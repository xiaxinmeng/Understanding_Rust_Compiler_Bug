{"sha": "39a523ba134c86df449bccd903313fc5e7b6f6c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTUyM2JhMTM0Yzg2ZGY0NDliY2NkOTAzMzEzZmM1ZTdiNmY2YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-07T18:50:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-07T18:50:31Z"}, "message": "Auto merge of #34139 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 13 pull requests\n\n- Successful merges: #33645, #33897, #33945, #34007, #34060, #34070, #34094, #34098, #34099, #34104, #34124, #34125, #34138\n- Failed merges:", "tree": {"sha": "f07d460c961da44d6a7f83cda319b6724be609b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07d460c961da44d6a7f83cda319b6724be609b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a523ba134c86df449bccd903313fc5e7b6f6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a523ba134c86df449bccd903313fc5e7b6f6c3", "html_url": "https://github.com/rust-lang/rust/commit/39a523ba134c86df449bccd903313fc5e7b6f6c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a523ba134c86df449bccd903313fc5e7b6f6c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "html_url": "https://github.com/rust-lang/rust/commit/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e"}, {"sha": "a0bf3b8b47b728d6b9761f22b98fd77b91536d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0bf3b8b47b728d6b9761f22b98fd77b91536d47", "html_url": "https://github.com/rust-lang/rust/commit/a0bf3b8b47b728d6b9761f22b98fd77b91536d47"}], "stats": {"total": 814, "additions": 483, "deletions": 331}, "files": [{"sha": "60935770781817a63c3ea9b6a19260ee33118b54", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -108,7 +108,8 @@ root.\n There are large number of options accepted by this script to alter the\n configuration used later in the build process. Some options to note:\n \n-- `--enable-debug` - Build a debug version of the compiler (disables optimizations)\n+- `--enable-debug` - Build a debug version of the compiler (disables optimizations,\n+    which speeds up compilation of stage1 rustc)\n - `--enable-optimize` - Enable optimizations (can be used with `--enable-debug`\n     to make a debug build with optimizations)\n - `--disable-valgrind-rpass` - Don't run tests with valgrind\n@@ -128,6 +129,12 @@ Some common make targets are:\n   cases we don't need to build the stage2 compiler, so we can save time by not\n   building it. The stage1 compiler is a fully functioning compiler and\n   (probably) will be enough to determine if your change works as expected.\n+- `make $host/stage1/bin/rustc` - Where $host is a target triple like x86_64-unknown-linux-gnu.\n+  This will build just rustc, without libstd. This is the fastest way to recompile after\n+  you changed only rustc source code. Note however that the resulting rustc binary\n+  won't have a stdlib to link against by default. You can build libstd once with\n+  `make rustc-stage1`, rustc will pick it up afterwards. libstd is only guaranteed to\n+  work if recompiled, so if there are any issues recompile it.\n - `make check` - build the full compiler & run all tests (takes a while). This\n   is what gets run by the continuous integration system against your pull\n   request. You should run this before submitting to make sure your tests pass"}, {"sha": "179ae1138d80bd9734b751c713c3ec0a80d26f38", "filename": "Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -62,6 +62,8 @@\n #   * tidy - Basic style check, show highest rustc error code and\n #     the status of language and lib features\n #   * rustc-stage$(stage) - Only build up to a specific stage\n+#   * $host/stage1/bin/rustc - Only build stage1 rustc, not libstd. For further\n+#     information see \"Rust recipes for build system success\" below.\n #\n # Then mix in some of these environment variables to harness the\n # ultimate power of The Rust Build System.\n@@ -93,6 +95,15 @@\n #     // Modifying libstd? Use this command to run unit tests just on your change\n #     make check-stage1-std NO_REBUILD=1 NO_BENCH=1\n #\n+#     // Modifying just rustc?\n+#     // Compile rustc+libstd once\n+#     make rustc-stage1\n+#     // From now on use this command to rebuild just rustc and reuse the previously built libstd\n+#     // $host is a target triple, eg. x86_64-unknown-linux-gnu\n+#     // The resulting binary is located at $host/stage1/bin/rustc.\n+#     // If there are any issues with libstd recompile it with the command above.\n+#     make $host/stage1/bin/rustc\n+#\n #     // Added a run-pass test? Use this to test running your test\n #     make check-stage1-rpass TESTNAME=my-shiny-new-test\n #"}, {"sha": "5edfd0ed5a1c88088e1783249914083fdfee7eef", "filename": "configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -988,11 +988,11 @@ then\n     LLVM_VERSION=$($LLVM_CONFIG --version)\n \n     case $LLVM_VERSION in\n-        (3.[6-8]*)\n+        (3.[7-8]*)\n             msg \"found ok version of LLVM: $LLVM_VERSION\"\n             ;;\n         (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.6\"\n+            err \"bad LLVM version: $LLVM_VERSION, need >=3.7\"\n             ;;\n     esac\n fi"}, {"sha": "b040684d05f7eaca4259b2cd95f433087eedbf7c", "filename": "src/doc/book/functions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ffunctions.md?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -249,7 +249,7 @@ stack backtrace:\n If you need to override an already set `RUST_BACKTRACE`, \n in cases when you cannot just unset the variable, \n then set it to `0` to avoid getting a backtrace. \n-Any other value(even no value at all) turns on backtrace.\n+Any other value (even no value at all) turns on backtrace.\n \n ```text\n $ export RUST_BACKTRACE=1"}, {"sha": "7954085472e503dc64eceb946a71b89a11e80ab6", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -380,8 +380,9 @@ the `tests` directory.\n \n # The `tests` directory\n \n-To write an integration test, let's make a `tests` directory, and\n-put a `tests/lib.rs` file inside, with this as its contents:\n+Each file in `tests/*.rs` directory is treated as individual crate.\n+So, to write an integration test, let's make a `tests` directory, and\n+put a `tests/integration_test.rs` file inside, with this as its contents:\n \n ```rust,ignore\n extern crate adder;\n@@ -394,8 +395,8 @@ fn it_works() {\n ```\n \n This looks similar to our previous tests, but slightly different. We now have\n-an `extern crate adder` at the top. This is because the tests in the `tests`\n-directory are an entirely separate crate, and so we need to import our library.\n+an `extern crate adder` at the top. This is because each test in the `tests`\n+directory is an entirely separate crate, and so we need to import our library.\n This is also why `tests` is a suitable place to write integration-style tests:\n they use the library like any other consumer of it would.\n \n@@ -428,6 +429,11 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n Now we have three sections: our previous test is also run, as well as our new\n one.\n \n+Cargo will ignore files in subdirectories of the `tests/` directory.\n+Therefore shared modules in integrations tests are possible.\n+For example `tests/common/mod.rs` is not seperatly compiled by cargo but can \n+be imported in every test with `mod common;`\n+\n That's all there is to the `tests` directory. The `tests` module isn't needed\n here, since the whole thing is focused on tests.\n "}, {"sha": "b6751f57a972146a8bbefc936ed1cee0d3fba26c", "filename": "src/doc/book/variable-bindings.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvariable-bindings.md?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -37,8 +37,8 @@ of our minds as we go forward.\n Rust is a statically typed language, which means that we specify our types up\n front, and they\u2019re checked at compile time. So why does our first example\n compile? Well, Rust has this thing called \u2018type inference\u2019. If it can figure\n-out what the type of something is, Rust doesn\u2019t require you to actually type it\n-out.\n+out what the type of something is, Rust doesn\u2019t require you to explicitly type\n+it out.\n \n We can add the type if we want to, though. Types come after a colon (`:`):\n \n@@ -159,8 +159,9 @@ error: aborting due to previous error\n Could not compile `hello_world`.\n ```\n \n-Rust will not let us use a value that has not been initialized. Next, let\u2019s\n-talk about this stuff we've added to `println!`.\n+Rust will not let us use a value that has not been initialized.\n+\n+Let take a minute to talk about this stuff we've added to `println!`.\n \n If you include two curly braces (`{}`, some call them moustaches...) in your\n string to print, Rust will interpret this as a request to interpolate some sort\n@@ -222,8 +223,8 @@ To learn more, run the command again with --verbose.\n ```\n \n Additionally, variable bindings can be shadowed. This means that a later\n-variable binding with the same name as another binding, that's currently in\n-scope, will override the previous binding.\n+variable binding with the same name as another binding that is currently in\n+scope will override the previous binding.\n \n ```rust\n let x: i32 = 8;\n@@ -240,7 +241,10 @@ println!(\"{}\", x); // Prints \"42\"\n Shadowing and mutable bindings may appear as two sides of the same coin, but\n they are two distinct concepts that can't always be used interchangeably. For\n one, shadowing enables us to rebind a name to a value of a different type. It\n-is also possible to change the mutability of a binding.\n+is also possible to change the mutability of a binding. Note that shadowing a \n+name does not alter or destroy the value it was bound to, and the value will\n+continue to exist until it goes out of scope, even if it is no longer accessible\n+by any means.\n \n ```rust\n let mut x: i32 = 1;"}, {"sha": "fac9cfadd976e750a66fc98d614d133347d070c5", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -1983,6 +1983,7 @@ macro scope.\n \n ### Miscellaneous attributes\n \n+- `deprecated` - mark the item as deprecated; the full attribute is `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments are optional.\n - `export_name` - on statics and functions, this determines the name of the\n   exported symbol.\n - `link_section` - on statics and functions, this specifies the section of the\n@@ -2426,8 +2427,6 @@ The currently implemented features of the reference compiler are:\n * - `stmt_expr_attributes` - Allows attributes on expressions and\n                              non-item statements.\n \n-* - `deprecated` - Allows using the `#[deprecated]` attribute.\n-\n * - `type_ascription` - Allows type ascription expressions `expr: Type`.\n \n * - `abi_vectorcall` - Allows the usage of the vectorcall calling convention"}, {"sha": "9c1b3724d8d8168e6b4f6a98d52ff0c7d5e0210f", "filename": "src/doc/rust.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -229,7 +229,7 @@ a > code {\n pre.rust .kw { color: #8959A8; }\n pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n pre.rust .number, pre.rust .string { color: #718C00; }\n-pre.rust .self, pre.rust .boolval, pre.rust .prelude-val,\n+pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n pre.rust .comment { color: #8E908C; }\n pre.rust .doccomment { color: #4D4D4C; }"}, {"sha": "a873be455d5558c673c3f6cd4d0d50f89f611bbd", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -271,7 +271,7 @@ impl<T> Rc<T> {\n }\n \n impl<T: ?Sized> Rc<T> {\n-    /// Downgrades the `Rc<T>` to a `Weak<T>` reference.\n+    /// Creates a new `Weak<T>` reference from this value.\n     ///\n     /// # Examples\n     ///"}, {"sha": "3364d7e16972ce316bb53000d4c769246d94faef", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -1404,8 +1404,8 @@ impl str {\n     /// Returns a string slice with all prefixes and suffixes that match a\n     /// pattern repeatedly removed.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines\n-    /// if a character matches.\n+    /// The pattern can be a [`char`] or a closure that determines if a\n+    /// character matches.\n     ///\n     /// [`char`]: primitive.char.html\n     ///"}, {"sha": "0ad6a74d1013c60b562ed1d9ff7467b2bedd5075", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -24,36 +24,35 @@\n use dwarf::DwarfReader;\n use core::mem;\n \n-pub const DW_EH_PE_omit     : u8 = 0xFF;\n-pub const DW_EH_PE_absptr   : u8 = 0x00;\n-\n-pub const DW_EH_PE_uleb128  : u8 = 0x01;\n-pub const DW_EH_PE_udata2   : u8 = 0x02;\n-pub const DW_EH_PE_udata4   : u8 = 0x03;\n-pub const DW_EH_PE_udata8   : u8 = 0x04;\n-pub const DW_EH_PE_sleb128  : u8 = 0x09;\n-pub const DW_EH_PE_sdata2   : u8 = 0x0A;\n-pub const DW_EH_PE_sdata4   : u8 = 0x0B;\n-pub const DW_EH_PE_sdata8   : u8 = 0x0C;\n-\n-pub const DW_EH_PE_pcrel    : u8 = 0x10;\n-pub const DW_EH_PE_textrel  : u8 = 0x20;\n-pub const DW_EH_PE_datarel  : u8 = 0x30;\n-pub const DW_EH_PE_funcrel  : u8 = 0x40;\n-pub const DW_EH_PE_aligned  : u8 = 0x50;\n-\n-pub const DW_EH_PE_indirect : u8 = 0x80;\n+pub const DW_EH_PE_omit: u8 = 0xFF;\n+pub const DW_EH_PE_absptr: u8 = 0x00;\n+\n+pub const DW_EH_PE_uleb128: u8 = 0x01;\n+pub const DW_EH_PE_udata2: u8 = 0x02;\n+pub const DW_EH_PE_udata4: u8 = 0x03;\n+pub const DW_EH_PE_udata8: u8 = 0x04;\n+pub const DW_EH_PE_sleb128: u8 = 0x09;\n+pub const DW_EH_PE_sdata2: u8 = 0x0A;\n+pub const DW_EH_PE_sdata4: u8 = 0x0B;\n+pub const DW_EH_PE_sdata8: u8 = 0x0C;\n+\n+pub const DW_EH_PE_pcrel: u8 = 0x10;\n+pub const DW_EH_PE_textrel: u8 = 0x20;\n+pub const DW_EH_PE_datarel: u8 = 0x30;\n+pub const DW_EH_PE_funcrel: u8 = 0x40;\n+pub const DW_EH_PE_aligned: u8 = 0x50;\n+\n+pub const DW_EH_PE_indirect: u8 = 0x80;\n \n #[derive(Copy, Clone)]\n pub struct EHContext {\n-    pub ip: usize,         // Current instruction pointer\n+    pub ip: usize, // Current instruction pointer\n     pub func_start: usize, // Address of the current function\n     pub text_start: usize, // Address of the code section\n     pub data_start: usize, // Address of the data section\n }\n \n-pub unsafe fn find_landing_pad(lsda: *const u8, context: &EHContext)\n-                               -> Option<usize> {\n+pub unsafe fn find_landing_pad(lsda: *const u8, context: &EHContext) -> Option<usize> {\n     if lsda.is_null() {\n         return None;\n     }\n@@ -80,7 +79,7 @@ pub unsafe fn find_landing_pad(lsda: *const u8, context: &EHContext)\n     let action_table = reader.ptr.offset(call_site_table_length as isize);\n     // Return addresses point 1 byte past the call instruction, which could\n     // be in the next IP range.\n-    let ip = context.ip-1;\n+    let ip = context.ip - 1;\n \n     while reader.ptr < action_table {\n         let cs_start = read_encoded_pointer(&mut reader, context, call_site_encoding);\n@@ -90,7 +89,7 @@ pub unsafe fn find_landing_pad(lsda: *const u8, context: &EHContext)\n         // Callsite table is sorted by cs_start, so if we've passed the ip, we\n         // may stop searching.\n         if ip < func_start + cs_start {\n-            break\n+            break;\n         }\n         if ip < func_start + cs_start + cs_len {\n             if cs_lpad != 0 {\n@@ -114,13 +113,13 @@ fn round_up(unrounded: usize, align: usize) -> usize {\n \n unsafe fn read_encoded_pointer(reader: &mut DwarfReader,\n                                context: &EHContext,\n-                               encoding: u8) -> usize {\n+                               encoding: u8)\n+                               -> usize {\n     assert!(encoding != DW_EH_PE_omit);\n \n     // DW_EH_PE_aligned implies it's an absolute pointer value\n     if encoding == DW_EH_PE_aligned {\n-        reader.ptr = round_up(reader.ptr as usize,\n-                              mem::size_of::<usize>()) as *const u8;\n+        reader.ptr = round_up(reader.ptr as usize, mem::size_of::<usize>()) as *const u8;\n         return reader.read::<usize>();\n     }\n \n@@ -134,20 +133,26 @@ unsafe fn read_encoded_pointer(reader: &mut DwarfReader,\n         DW_EH_PE_sdata2 => reader.read::<i16>() as usize,\n         DW_EH_PE_sdata4 => reader.read::<i32>() as usize,\n         DW_EH_PE_sdata8 => reader.read::<i64>() as usize,\n-        _ => panic!()\n+        _ => panic!(),\n     };\n \n     result += match encoding & 0x70 {\n         DW_EH_PE_absptr => 0,\n         // relative to address of the encoded value, despite the name\n         DW_EH_PE_pcrel => reader.ptr as usize,\n-        DW_EH_PE_textrel => { assert!(context.text_start != 0);\n-                              context.text_start },\n-        DW_EH_PE_datarel => { assert!(context.data_start != 0);\n-                              context.data_start },\n-        DW_EH_PE_funcrel => { assert!(context.func_start != 0);\n-                              context.func_start },\n-        _ => panic!()\n+        DW_EH_PE_textrel => {\n+            assert!(context.text_start != 0);\n+            context.text_start\n+        }\n+        DW_EH_PE_datarel => {\n+            assert!(context.data_start != 0);\n+            context.data_start\n+        }\n+        DW_EH_PE_funcrel => {\n+            assert!(context.func_start != 0);\n+            context.func_start\n+        }\n+        _ => panic!(),\n     };\n \n     if encoding & DW_EH_PE_indirect != 0 {"}, {"sha": "5c05ac11d307d1c74884c4f18315a6caa0f48991", "filename": "src/libpanic_unwind/dwarf/mod.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -21,25 +21,22 @@ pub mod eh;\n use core::mem;\n \n pub struct DwarfReader {\n-    pub ptr : *const u8\n+    pub ptr: *const u8,\n }\n \n #[repr(C,packed)]\n struct Unaligned<T>(T);\n \n impl DwarfReader {\n-\n-    pub fn new(ptr : *const u8) -> DwarfReader {\n-        DwarfReader {\n-            ptr : ptr\n-        }\n+    pub fn new(ptr: *const u8) -> DwarfReader {\n+        DwarfReader { ptr: ptr }\n     }\n \n     // DWARF streams are packed, so e.g. a u32 would not necessarily be aligned\n     // on a 4-byte boundary. This may cause problems on platforms with strict\n     // alignment requirements. By wrapping data in a \"packed\" struct, we are\n     // telling the backend to generate \"misalignment-safe\" code.\n-    pub unsafe fn read<T:Copy>(&mut self) -> T {\n+    pub unsafe fn read<T: Copy>(&mut self) -> T {\n         let Unaligned(result) = *(self.ptr as *const Unaligned<T>);\n         self.ptr = self.ptr.offset(mem::size_of::<T>() as isize);\n         result\n@@ -48,9 +45,9 @@ impl DwarfReader {\n     // ULEB128 and SLEB128 encodings are defined in Section 7.6 - \"Variable\n     // Length Data\".\n     pub unsafe fn read_uleb128(&mut self) -> u64 {\n-        let mut shift : usize = 0;\n-        let mut result : u64 = 0;\n-        let mut byte : u8;\n+        let mut shift: usize = 0;\n+        let mut result: u64 = 0;\n+        let mut byte: u8;\n         loop {\n             byte = self.read::<u8>();\n             result |= ((byte & 0x7F) as u64) << shift;\n@@ -63,9 +60,9 @@ impl DwarfReader {\n     }\n \n     pub unsafe fn read_sleb128(&mut self) -> i64 {\n-        let mut shift : usize = 0;\n-        let mut result : u64 = 0;\n-        let mut byte : u8;\n+        let mut shift: usize = 0;\n+        let mut result: u64 = 0;\n+        let mut byte: u8;\n         loop {\n             byte = self.read::<u8>();\n             result |= ((byte & 0x7F) as u64) << shift;\n@@ -84,12 +81,7 @@ impl DwarfReader {\n \n #[test]\n fn dwarf_reader() {\n-    let encoded: &[u8] = &[1,\n-                           2, 3,\n-                           4, 5, 6, 7,\n-                           0xE5, 0x8E, 0x26,\n-                           0x9B, 0xF1, 0x59,\n-                           0xFF, 0xFF];\n+    let encoded: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 0xE5, 0x8E, 0x26, 0x9B, 0xF1, 0x59, 0xFF, 0xFF];\n \n     let mut reader = DwarfReader::new(encoded.as_ptr());\n "}, {"sha": "8df68da3786e2b8d28134447dc65784c85c24e5a", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 70, "deletions": 96, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -79,8 +79,8 @@ pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n     let exception_param = Box::into_raw(exception) as *mut uw::_Unwind_Exception;\n     return uw::_Unwind_RaiseException(exception_param) as u32;\n \n-    extern fn exception_cleanup(_unwind_code: uw::_Unwind_Reason_Code,\n-                                exception: *mut uw::_Unwind_Exception) {\n+    extern \"C\" fn exception_cleanup(_unwind_code: uw::_Unwind_Reason_Code,\n+                                    exception: *mut uw::_Unwind_Exception) {\n         unsafe {\n             let _: Box<Exception> = Box::from_raw(exception as *mut Exception);\n         }\n@@ -130,50 +130,41 @@ pub mod eabi {\n     use unwind as uw;\n     use libc::c_int;\n \n-    extern {\n+    extern \"C\" {\n         fn __gcc_personality_v0(version: c_int,\n                                 actions: uw::_Unwind_Action,\n                                 exception_class: uw::_Unwind_Exception_Class,\n                                 ue_header: *mut uw::_Unwind_Exception,\n                                 context: *mut uw::_Unwind_Context)\n-            -> uw::_Unwind_Reason_Code;\n+                                -> uw::_Unwind_Reason_Code;\n     }\n \n     #[lang = \"eh_personality\"]\n     #[no_mangle]\n-    extern fn rust_eh_personality(\n-        version: c_int,\n-        actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n-        unsafe {\n-            __gcc_personality_v0(version, actions, exception_class, ue_header,\n-                                 context)\n-        }\n+    extern \"C\" fn rust_eh_personality(version: c_int,\n+                                      actions: uw::_Unwind_Action,\n+                                      exception_class: uw::_Unwind_Exception_Class,\n+                                      ue_header: *mut uw::_Unwind_Exception,\n+                                      context: *mut uw::_Unwind_Context)\n+                                      -> uw::_Unwind_Reason_Code {\n+        unsafe { __gcc_personality_v0(version, actions, exception_class, ue_header, context) }\n     }\n \n     #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n-    pub extern fn rust_eh_personality_catch(\n-        version: c_int,\n-        actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n+    pub extern \"C\" fn rust_eh_personality_catch(version: c_int,\n+                                                actions: uw::_Unwind_Action,\n+                                                exception_class: uw::_Unwind_Exception_Class,\n+                                                ue_header: *mut uw::_Unwind_Exception,\n+                                                context: *mut uw::_Unwind_Context)\n+                                                -> uw::_Unwind_Reason_Code {\n \n-        if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n+        if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 {\n+            // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n-        }\n-        else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_v0(version, actions, exception_class, ue_header,\n-                                     context)\n-            }\n+        } else {\n+            // cleanup phase\n+            unsafe { __gcc_personality_v0(version, actions, exception_class, ue_header, context) }\n         }\n     }\n }\n@@ -186,49 +177,40 @@ pub mod eabi {\n     use unwind as uw;\n     use libc::c_int;\n \n-    extern {\n+    extern \"C\" {\n         fn __gcc_personality_sj0(version: c_int,\n-                                actions: uw::_Unwind_Action,\n-                                exception_class: uw::_Unwind_Exception_Class,\n-                                ue_header: *mut uw::_Unwind_Exception,\n-                                context: *mut uw::_Unwind_Context)\n-            -> uw::_Unwind_Reason_Code;\n+                                 actions: uw::_Unwind_Action,\n+                                 exception_class: uw::_Unwind_Exception_Class,\n+                                 ue_header: *mut uw::_Unwind_Exception,\n+                                 context: *mut uw::_Unwind_Context)\n+                                 -> uw::_Unwind_Reason_Code;\n     }\n \n     #[lang = \"eh_personality\"]\n     #[no_mangle]\n-    pub extern fn rust_eh_personality(\n-        version: c_int,\n-        actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n-        unsafe {\n-            __gcc_personality_sj0(version, actions, exception_class, ue_header,\n-                                  context)\n-        }\n+    pub extern \"C\" fn rust_eh_personality(version: c_int,\n+                                          actions: uw::_Unwind_Action,\n+                                          exception_class: uw::_Unwind_Exception_Class,\n+                                          ue_header: *mut uw::_Unwind_Exception,\n+                                          context: *mut uw::_Unwind_Context)\n+                                          -> uw::_Unwind_Reason_Code {\n+        unsafe { __gcc_personality_sj0(version, actions, exception_class, ue_header, context) }\n     }\n \n     #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n-    pub extern fn rust_eh_personality_catch(\n-        version: c_int,\n-        actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n-        if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n+    pub extern \"C\" fn rust_eh_personality_catch(version: c_int,\n+                                                actions: uw::_Unwind_Action,\n+                                                exception_class: uw::_Unwind_Exception_Class,\n+                                                ue_header: *mut uw::_Unwind_Exception,\n+                                                context: *mut uw::_Unwind_Context)\n+                                                -> uw::_Unwind_Reason_Code {\n+        if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 {\n+            // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n-        }\n-        else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_sj0(version, actions, exception_class, ue_header,\n-                                      context)\n-            }\n+        } else {\n+            // cleanup phase\n+            unsafe { __gcc_personality_sj0(version, actions, exception_class, ue_header, context) }\n         }\n     }\n }\n@@ -241,47 +223,40 @@ pub mod eabi {\n     use unwind as uw;\n     use libc::c_int;\n \n-    extern {\n+    extern \"C\" {\n         fn __gcc_personality_v0(state: uw::_Unwind_State,\n                                 ue_header: *mut uw::_Unwind_Exception,\n                                 context: *mut uw::_Unwind_Context)\n-            -> uw::_Unwind_Reason_Code;\n+                                -> uw::_Unwind_Reason_Code;\n     }\n \n     #[lang = \"eh_personality\"]\n     #[no_mangle]\n-    extern fn rust_eh_personality(\n-        state: uw::_Unwind_State,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n-        unsafe {\n-            __gcc_personality_v0(state, ue_header, context)\n-        }\n+    extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n+                                      ue_header: *mut uw::_Unwind_Exception,\n+                                      context: *mut uw::_Unwind_Context)\n+                                      -> uw::_Unwind_Reason_Code {\n+        unsafe { __gcc_personality_v0(state, ue_header, context) }\n     }\n \n     #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n-    pub extern fn rust_eh_personality_catch(\n-        state: uw::_Unwind_State,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n-    ) -> uw::_Unwind_Reason_Code\n-    {\n+    pub extern \"C\" fn rust_eh_personality_catch(state: uw::_Unwind_State,\n+                                                ue_header: *mut uw::_Unwind_Exception,\n+                                                context: *mut uw::_Unwind_Context)\n+                                                -> uw::_Unwind_Reason_Code {\n         // Backtraces on ARM will call the personality routine with\n         // state == _US_VIRTUAL_UNWIND_FRAME | _US_FORCE_UNWIND. In those cases\n         // we want to continue unwinding the stack, otherwise all our backtraces\n         // would end at __rust_try.\n-        if (state as c_int & uw::_US_ACTION_MASK as c_int)\n-                           == uw::_US_VIRTUAL_UNWIND_FRAME as c_int\n-               && (state as c_int & uw::_US_FORCE_UNWIND as c_int) == 0 { // search phase\n+        if (state as c_int & uw::_US_ACTION_MASK as c_int) ==\n+           uw::_US_VIRTUAL_UNWIND_FRAME as c_int &&\n+           (state as c_int & uw::_US_FORCE_UNWIND as c_int) == 0 {\n+            // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n-        }\n-        else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_v0(state, ue_header, context)\n-            }\n+        } else {\n+            // cleanup phase\n+            unsafe { __gcc_personality_v0(state, ue_header, context) }\n         }\n     }\n }\n@@ -290,7 +265,7 @@ pub mod eabi {\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n #[lang = \"eh_unwind_resume\"]\n #[unwind]\n-unsafe extern fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n+unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n     uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n }\n \n@@ -314,22 +289,21 @@ unsafe extern fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n pub mod eh_frame_registry {\n     #[link(name = \"gcc_eh\")]\n     #[cfg(not(cargobuild))]\n-    extern {}\n+    extern \"C\" {}\n \n-    extern {\n+    extern \"C\" {\n         fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n     }\n \n     #[no_mangle]\n-    pub unsafe extern fn rust_eh_register_frames(eh_frame_begin: *const u8,\n-                                                 object: *mut u8) {\n+    pub unsafe extern \"C\" fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8) {\n         __register_frame_info(eh_frame_begin, object);\n     }\n \n     #[no_mangle]\n-    pub  unsafe extern fn rust_eh_unregister_frames(eh_frame_begin: *const u8,\n-                                                   object: *mut u8) {\n+    pub unsafe extern \"C\" fn rust_eh_unregister_frames(eh_frame_begin: *const u8,\n+                                                       object: *mut u8) {\n         __deregister_frame_info(eh_frame_begin, object);\n     }\n }"}, {"sha": "b765ee6f81cf9a70468f9e02cfe3849c73a8ff08", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -82,11 +82,11 @@ mod windows;\n // hairy and tightly coupled, for more information see the compiler's\n // implementation of this.\n #[no_mangle]\n-pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n-                                              data: *mut u8,\n-                                              data_ptr: *mut usize,\n-                                              vtable_ptr: *mut usize)\n-                                              -> u32 {\n+pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n+                                                  data: *mut u8,\n+                                                  data_ptr: *mut usize,\n+                                                  vtable_ptr: *mut usize)\n+                                                  -> u32 {\n     let mut payload = imp::payload();\n     if intrinsics::try(f, data, &mut payload as *mut _ as *mut _) == 0 {\n         0\n@@ -101,7 +101,7 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[no_mangle]\n-pub unsafe extern fn __rust_start_panic(data: usize, vtable: usize) -> u32 {\n+pub unsafe extern \"C\" fn __rust_start_panic(data: usize, vtable: usize) -> u32 {\n     imp::panic(mem::transmute(raw::TraitObject {\n         data: data as *mut (),\n         vtable: vtable as *mut (),"}, {"sha": "dd6e92fe9ae19efc4779af3f57a773fe46fa8a8a", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -128,7 +128,7 @@ mod imp {\n     pub const NAME1: [u8; 7] = [b'.', b'P', b'E', b'A', b'_', b'K', 0];\n     pub const NAME2: [u8; 7] = [b'.', b'P', b'E', b'A', b'X', 0, 0];\n \n-    extern {\n+    extern \"C\" {\n         pub static __ImageBase: u8;\n     }\n \n@@ -186,10 +186,7 @@ static mut THROW_INFO: _ThrowInfo = _ThrowInfo {\n \n static mut CATCHABLE_TYPE_ARRAY: _CatchableTypeArray = _CatchableTypeArray {\n     nCatchableTypes: 2,\n-    arrayOfCatchableTypes: [\n-        ptr!(0),\n-        ptr!(0),\n-    ],\n+    arrayOfCatchableTypes: [ptr!(0), ptr!(0)],\n };\n \n static mut CATCHABLE_TYPE1: _CatchableType = _CatchableType {\n@@ -216,7 +213,7 @@ static mut CATCHABLE_TYPE2: _CatchableType = _CatchableType {\n     copy_function: ptr!(0),\n };\n \n-extern {\n+extern \"C\" {\n     // The leading `\\x01` byte here is actually a magical signal to LLVM to\n     // *not* apply any other mangling like prefixing with a `_` character.\n     //"}, {"sha": "12e1a764c5f9403865045990f0d4ae4602673a5b", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -32,11 +32,11 @@ use windows as c;\n const ETYPE: c::DWORD = 0b1110_u32 << 28;\n const MAGIC: c::DWORD = 0x525354; // \"RST\"\n \n-const RUST_PANIC: c::DWORD  = ETYPE | (1 << 24) | MAGIC;\n+const RUST_PANIC: c::DWORD = ETYPE | (1 << 24) | MAGIC;\n \n #[repr(C)]\n struct PanicData {\n-    data: Box<Any + Send>\n+    data: Box<Any + Send>,\n }\n \n pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n@@ -82,30 +82,29 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n \n #[lang = \"eh_personality_catch\"]\n #[cfg(not(test))]\n-unsafe extern fn rust_eh_personality_catch(\n-    exceptionRecord: *mut c::EXCEPTION_RECORD,\n-    establisherFrame: c::LPVOID,\n-    contextRecord: *mut c::CONTEXT,\n-    dispatcherContext: *mut c::DISPATCHER_CONTEXT\n-) -> c::EXCEPTION_DISPOSITION\n-{\n-    rust_eh_personality(exceptionRecord, establisherFrame,\n-                        contextRecord, dispatcherContext)\n+unsafe extern \"C\" fn rust_eh_personality_catch(exceptionRecord: *mut c::EXCEPTION_RECORD,\n+                                               establisherFrame: c::LPVOID,\n+                                               contextRecord: *mut c::CONTEXT,\n+                                               dispatcherContext: *mut c::DISPATCHER_CONTEXT)\n+                                               -> c::EXCEPTION_DISPOSITION {\n+    rust_eh_personality(exceptionRecord,\n+                        establisherFrame,\n+                        contextRecord,\n+                        dispatcherContext)\n }\n \n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n-unsafe extern fn rust_eh_personality(\n-    exceptionRecord: *mut c::EXCEPTION_RECORD,\n-    establisherFrame: c::LPVOID,\n-    contextRecord: *mut c::CONTEXT,\n-    dispatcherContext: *mut c::DISPATCHER_CONTEXT\n-) -> c::EXCEPTION_DISPOSITION\n-{\n+unsafe extern \"C\" fn rust_eh_personality(exceptionRecord: *mut c::EXCEPTION_RECORD,\n+                                         establisherFrame: c::LPVOID,\n+                                         contextRecord: *mut c::CONTEXT,\n+                                         dispatcherContext: *mut c::DISPATCHER_CONTEXT)\n+                                         -> c::EXCEPTION_DISPOSITION {\n     let er = &*exceptionRecord;\n     let dc = &*dispatcherContext;\n \n-    if er.ExceptionFlags & c::EXCEPTION_UNWIND == 0 { // we are in the dispatch phase\n+    if er.ExceptionFlags & c::EXCEPTION_UNWIND == 0 {\n+        // we are in the dispatch phase\n         if er.ExceptionCode == RUST_PANIC {\n             if let Some(lpad) = find_landing_pad(dc) {\n                 c::RtlUnwindEx(establisherFrame,\n@@ -122,7 +121,7 @@ unsafe extern fn rust_eh_personality(\n \n #[lang = \"eh_unwind_resume\"]\n #[unwind]\n-unsafe extern fn rust_eh_unwind_resume(panic_ctx: c::LPVOID) -> ! {\n+unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: c::LPVOID) -> ! {\n     let params = [panic_ctx as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,\n                       c::EXCEPTION_NONCONTINUABLE,\n@@ -136,7 +135,7 @@ unsafe fn find_landing_pad(dc: &c::DISPATCHER_CONTEXT) -> Option<usize> {\n         ip: dc.ControlPc as usize,\n         func_start: dc.ImageBase as usize + (*dc.FunctionEntry).BeginAddress as usize,\n         text_start: dc.ImageBase as usize,\n-        data_start: 0\n+        data_start: 0,\n     };\n     eh::find_landing_pad(dc.HandlerData, &eh_ctx)\n }"}, {"sha": "fd8429d262e6ec2c99d384b7803b1ab33cb1243c", "filename": "src/libpanic_unwind/windows.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibpanic_unwind%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwindows.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,7 +12,7 @@\n #![allow(dead_code)]\n #![cfg(windows)]\n \n-use libc::{c_void, c_ulong, c_long, c_ulonglong};\n+use libc::{c_long, c_ulong, c_ulonglong, c_void};\n \n pub type DWORD = c_ulong;\n pub type LONG = c_long;\n@@ -25,8 +25,7 @@ pub const EXCEPTION_UNWINDING: DWORD = 0x2;        // Unwind is in progress\n pub const EXCEPTION_EXIT_UNWIND: DWORD = 0x4;      // Exit unwind is in progress\n pub const EXCEPTION_TARGET_UNWIND: DWORD = 0x20;   // Target unwind in progress\n pub const EXCEPTION_COLLIDED_UNWIND: DWORD = 0x40; // Collided exception handler call\n-pub const EXCEPTION_UNWIND: DWORD = EXCEPTION_UNWINDING |\n-                                    EXCEPTION_EXIT_UNWIND |\n+pub const EXCEPTION_UNWIND: DWORD = EXCEPTION_UNWINDING | EXCEPTION_EXIT_UNWIND |\n                                     EXCEPTION_TARGET_UNWIND |\n                                     EXCEPTION_COLLIDED_UNWIND;\n \n@@ -37,7 +36,7 @@ pub struct EXCEPTION_RECORD {\n     pub ExceptionRecord: *mut EXCEPTION_RECORD,\n     pub ExceptionAddress: LPVOID,\n     pub NumberParameters: DWORD,\n-    pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n+    pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS],\n }\n \n #[repr(C)]\n@@ -75,7 +74,7 @@ pub enum EXCEPTION_DISPOSITION {\n     ExceptionContinueExecution,\n     ExceptionContinueSearch,\n     ExceptionNestedException,\n-    ExceptionCollidedUnwind\n+    ExceptionCollidedUnwind,\n }\n pub use self::EXCEPTION_DISPOSITION::*;\n \n@@ -93,6 +92,5 @@ extern \"system\" {\n                        OriginalContext: *const CONTEXT,\n                        HistoryTable: *const UNWIND_HISTORY_TABLE);\n     #[unwind]\n-    pub fn _CxxThrowException(pExceptionObject: *mut c_void,\n-                              pThrowInfo: *mut u8);\n+    pub fn _CxxThrowException(pExceptionObject: *mut c_void, pThrowInfo: *mut u8);\n }"}, {"sha": "7a1ac7c218c8c561de62e7dc2db43121282cc9fb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -112,7 +112,6 @@ pub struct Options {\n     // with additional crate configurations during the compile process\n     pub crate_types: Vec<CrateType>,\n \n-    pub gc: bool,\n     pub optimize: OptLevel,\n     pub debug_assertions: bool,\n     pub debuginfo: DebugInfoLevel,\n@@ -242,7 +241,6 @@ pub fn host_triple() -> &'static str {\n pub fn basic_options() -> Options {\n     Options {\n         crate_types: Vec::new(),\n-        gc: false,\n         optimize: OptLevel::No,\n         debuginfo: NoDebugInfo,\n         lint_opts: Vec::new(),\n@@ -632,14 +630,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"omit landing pads for unwinding\"),\n     debug_llvm: bool = (false, parse_bool,\n         \"enable debug output from LLVM\"),\n-    count_type_sizes: bool = (false, parse_bool,\n-        \"count the sizes of aggregate types\"),\n     meta_stats: bool = (false, parse_bool,\n         \"gather metadata statistics\"),\n     print_link_args: bool = (false, parse_bool,\n         \"print the arguments passed to the linker\"),\n-    gc: bool = (false, parse_bool,\n-        \"garbage collect shared data (experimental)\"),\n     print_llvm_passes: bool = (false, parse_bool,\n         \"prints the llvm optimization passes being run\"),\n     ast_json: bool = (false, parse_bool,\n@@ -1189,7 +1183,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     };\n     let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == OptLevel::No);\n-    let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n             early_error(error_format, \"-g and -C debuginfo both provided\");\n@@ -1272,7 +1265,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     Options {\n         crate_types: crate_types,\n-        gc: gc,\n         optimize: opt_level,\n         debuginfo: debuginfo,\n         lint_opts: lint_opts,"}, {"sha": "d60c31369d0a1619ac481ca0307733426a6c0dd8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -284,9 +284,6 @@ impl Session {\n     pub fn count_llvm_insns(&self) -> bool {\n         self.opts.debugging_opts.count_llvm_insns\n     }\n-    pub fn count_type_sizes(&self) -> bool {\n-        self.opts.debugging_opts.count_type_sizes\n-    }\n     pub fn time_llvm_passes(&self) -> bool {\n         self.opts.debugging_opts.time_llvm_passes\n     }"}, {"sha": "aab75b33ec977a32ba5bfbeefd66b01221412c53", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -337,7 +337,7 @@ impl Class {\n             Class::MacroNonTerminal => \"macro-nonterminal\",\n             Class::String => \"string\",\n             Class::Number => \"number\",\n-            Class::Bool => \"boolvalue\",\n+            Class::Bool => \"bool-val\",\n             Class::Ident => \"ident\",\n             Class::Lifetime => \"lifetime\",\n             Class::PreludeTy => \"prelude-ty\","}, {"sha": "da04f26a70b804ff9b117b12135e0764e314d66e", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -554,7 +554,7 @@ td.summary-column {\n pre.rust .kw { color: #8959A8; }\n pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n pre.rust .number, pre.rust .string { color: #718C00; }\n-pre.rust .self, pre.rust .boolval, pre.rust .prelude-val,\n+pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n pre.rust .lifetime { color: #B76514; }"}, {"sha": "b8fb03faf0802b9680f74292606238ad5e09351b", "filename": "src/test/run-fail/args-panic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -14,6 +14,10 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-fn f(_a: isize, _b: isize, _c: Box<isize>) { panic!(\"moop\"); }\n+fn f(_a: isize, _b: isize, _c: Box<isize>) {\n+    panic!(\"moop\");\n+}\n \n-fn main() { f(1, panic!(\"meep\"), box 42); }\n+fn main() {\n+    f(1, panic!(\"meep\"), box 42);\n+}"}, {"sha": "a3e0a1f904faa0353ff30665470ef3441b706fde", "filename": "src/test/run-fail/assert-eq-macro-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:assertion failed: `(left == right)` (left: `14`, right: `15`)\n \n fn main() {\n-    assert_eq!(14,15);\n+    assert_eq!(14, 15);\n }"}, {"sha": "5be9cd4a9bc345be939b9d3880b69721c092e08b", "filename": "src/test/run-fail/binop-fail-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbinop-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbinop-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-3.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn foo() -> ! { panic!(\"quux\"); }\n+fn foo() -> ! {\n+    panic!(\"quux\");\n+}\n fn main() {\n     foo() == foo(); // these types wind up being defaulted to ()\n }"}, {"sha": "fb2db7ea9985c1ab57862d0b8668829ed0016d56", "filename": "src/test/run-fail/binop-panic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,5 +9,10 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: String) -> ! { println!(\"{}\", s); panic!(\"quux\"); }\n-fn main() { 3_usize == my_err(\"bye\".to_string()); }\n+fn my_err(s: String) -> ! {\n+    println!(\"{}\", s);\n+    panic!(\"quux\");\n+}\n+fn main() {\n+    3_usize == my_err(\"bye\".to_string());\n+}"}, {"sha": "4a294d8fabc38a1564c24c8bdafccd43a54356e8", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -20,15 +20,15 @@ fn main() {\n     // address of the 0th cell in the array (even though the index is\n     // huge).\n \n-    let x = vec!(1_usize,2_usize,3_usize);\n+    let x = vec![1_usize, 2_usize, 3_usize];\n \n     let base = x.as_ptr() as usize;\n     let idx = base / mem::size_of::<usize>();\n     println!(\"ov1 base = 0x{:x}\", base);\n     println!(\"ov1 idx = 0x{:x}\", idx);\n     println!(\"ov1 sizeof::<usize>() = 0x{:x}\", mem::size_of::<usize>());\n     println!(\"ov1 idx * sizeof::<usize>() = 0x{:x}\",\n-           idx * mem::size_of::<usize>());\n+             idx * mem::size_of::<usize>());\n \n     // This should panic.\n     println!(\"ov1 0x{:x}\", x[idx]);"}, {"sha": "c0e02ccd61be25ba5b4a28574cb73333c4f3cf1c", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,7 +12,9 @@\n \n use std::marker::PhantomData;\n \n-fn test00_start(ch: chan_t<isize>, message: isize) { send(ch, message); }\n+fn test00_start(ch: chan_t<isize>, message: isize) {\n+    send(ch, message);\n+}\n \n type task_id = isize;\n type port_id = isize;\n@@ -23,6 +25,10 @@ struct chan_t<T> {\n     marker: PhantomData<*mut T>,\n }\n \n-fn send<T:Send>(_ch: chan_t<T>, _data: T) { panic!(); }\n+fn send<T: Send>(_ch: chan_t<T>, _data: T) {\n+    panic!();\n+}\n \n-fn main() { panic!(\"quux\"); }\n+fn main() {\n+    panic!(\"quux\");\n+}"}, {"sha": "936ebd96897371008746fc059cf48e56776a6437", "filename": "src/test/run-fail/doublepanic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fdoublepanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fdoublepanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublepanic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(unreachable_code)]\n \n-//error-pattern:One\n+// error-pattern:One\n fn main() {\n     panic!(\"One\");\n     panic!(\"Two\");"}, {"sha": "907fae02b419b5ec76c52c30a69cdafb60b5282f", "filename": "src/test/run-fail/explicit-panic-msg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -14,6 +14,8 @@\n // error-pattern:wooooo\n fn main() {\n     let mut a = 1;\n-    if 1 == 1 { a = 2; }\n+    if 1 == 1 {\n+        a = 2;\n+    }\n     panic!(format!(\"woooo{}\", \"o\"));\n }"}, {"sha": "928e7326b66cd8cb6b1d10a43395729bcbc66159", "filename": "src/test/run-fail/explicit-panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexplicit-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexplicit-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,4 +12,6 @@\n \n \n // error-pattern:explicit\n-fn main() { panic!(); }\n+fn main() {\n+    panic!();\n+}"}, {"sha": "f7a889754257b574821f822350b2fec2e2d58a54", "filename": "src/test/run-fail/expr-fn-panic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-fn-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-fn-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-fn-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,6 +10,10 @@\n \n // error-pattern:explicit panic\n \n-fn f() -> ! { panic!() }\n+fn f() -> ! {\n+    panic!()\n+}\n \n-fn main() { f(); }\n+fn main() {\n+    f();\n+}"}, {"sha": "a8ec8f3f414621f8443658d04a8e37bb6405be63", "filename": "src/test/run-fail/expr-if-panic-fn.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-if-panic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-if-panic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-panic-fn.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,8 +10,19 @@\n \n // error-pattern:explicit panic\n \n-fn f() -> ! { panic!() }\n+fn f() -> ! {\n+    panic!()\n+}\n \n-fn g() -> isize { let x = if true { f() } else { 10 }; return x; }\n+fn g() -> isize {\n+    let x = if true {\n+        f()\n+    } else {\n+        10\n+    };\n+    return x;\n+}\n \n-fn main() { g(); }\n+fn main() {\n+    g();\n+}"}, {"sha": "25bf43751f0b3c1f76f4478a350d5e3cdbb15eab", "filename": "src/test/run-fail/expr-if-panic.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,4 +10,12 @@\n \n // error-pattern:explicit panic\n \n-fn main() { let _x = if false { 0 } else if true { panic!() } else { 10 }; }\n+fn main() {\n+    let _x = if false {\n+        0\n+    } else if true {\n+        panic!()\n+    } else {\n+        10\n+    };\n+}"}, {"sha": "6758ac6c4d4d8eb2045446ce2d0d798e4710c8ba", "filename": "src/test/run-fail/expr-match-panic-fn.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-match-panic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-match-panic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-match-panic-fn.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,8 +10,18 @@\n \n // error-pattern:explicit panic\n \n-fn f() -> ! { panic!() }\n+fn f() -> ! {\n+    panic!()\n+}\n \n-fn g() -> isize { let x = match true { true => { f() } false => { 10 } }; return x; }\n+fn g() -> isize {\n+    let x = match true {\n+        true => f(),\n+        false => 10,\n+    };\n+    return x;\n+}\n \n-fn main() { g(); }\n+fn main() {\n+    g();\n+}"}, {"sha": "8876fb1f49b8234150a5d57f5c3e290b5e44d4fa", "filename": "src/test/run-fail/expr-match-panic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,4 +10,9 @@\n \n // error-pattern:explicit panic\n \n-fn main() { let _x = match true { false => { 0 } true => { panic!() } }; }\n+fn main() {\n+    let _x = match true {\n+        false => 0,\n+        true => panic!(),\n+    };\n+}"}, {"sha": "a462d83601921578cd71cae7a5d2b40a8c7704d5", "filename": "src/test/run-fail/for-each-loop-panic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,4 +10,8 @@\n \n // error-pattern:moop\n \n-fn main() { for _ in 0_usize..10_usize { panic!(\"moop\"); } }\n+fn main() {\n+    for _ in 0_usize..10_usize {\n+        panic!(\"moop\");\n+    }\n+}"}, {"sha": "f8b2d11cb646d720aec1b46062d069087b61bd82", "filename": "src/test/run-fail/if-check-panic.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,7 +12,11 @@\n fn even(x: usize) -> bool {\n     if x < 2 {\n         return false;\n-    } else if x == 2 { return true; } else { return even(x - 2); }\n+    } else if x == 2 {\n+        return true;\n+    } else {\n+        return even(x - 2);\n+    }\n }\n \n fn foo(x: usize) {\n@@ -23,4 +27,6 @@ fn foo(x: usize) {\n     }\n }\n \n-fn main() { foo(3); }\n+fn main() {\n+    foo(3);\n+}"}, {"sha": "203bc8fc65ff8a17f5ff7d7770473e766eb3074f", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,5 +9,11 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: String) -> ! { println!(\"{}\", s); panic!(\"quux\"); }\n-fn main() { if my_err(\"bye\".to_string()) { } }\n+fn my_err(s: String) -> ! {\n+    println!(\"{}\", s);\n+    panic!(\"quux\");\n+}\n+fn main() {\n+    if my_err(\"bye\".to_string()) {\n+    }\n+}"}, {"sha": "39a819f3d5204cb0229f298578d8389a2cdf7512", "filename": "src/test/run-fail/issue-12920.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-12920.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-12920.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-12920.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -11,5 +11,6 @@\n // error-pattern:explicit panic\n \n pub fn main() {\n-    panic!(); println!(\"{}\", 1);\n+    panic!();\n+    println!(\"{}\", 1);\n }"}, {"sha": "88fb8f1b0c4ccd87446df3a64add2c5aa6674289", "filename": "src/test/run-fail/issue-18576.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-18576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-18576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-18576.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -20,4 +20,4 @@ fn main() {\n     let pointer = other;\n     pointer();\n }\n-extern fn other() {}\n+extern \"C\" fn other() {}"}, {"sha": "e433a45731f95e5159f5f7f96813c1ec3b5a59c0", "filename": "src/test/run-fail/issue-20971.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-20971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-20971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-20971.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -19,16 +19,13 @@ pub trait Parser {\n \n impl Parser for () {\n     type Input = ();\n-    fn parse(&mut self, input: ()) {\n-\n-    }\n+    fn parse(&mut self, input: ()) {}\n }\n \n-pub fn many() -> Box<Parser<Input=<() as Parser>::Input> + 'static> {\n+pub fn many() -> Box<Parser<Input = <() as Parser>::Input> + 'static> {\n     panic!(\"Hello, world!\")\n }\n \n fn main() {\n-    many()\n-        .parse(());\n+    many().parse(());\n }"}, {"sha": "f55b1ba03dee87ae8edfb1fb0bae84a93841c879", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,10 +12,14 @@\n \n use std::sync::Arc;\n \n-enum e<T> { ee(Arc<T>) }\n+enum e<T> {\n+    ee(Arc<T>),\n+}\n \n-fn foo() -> e<isize> {panic!();}\n+fn foo() -> e<isize> {\n+    panic!();\n+}\n \n fn main() {\n-   let _f = foo();\n+    let _f = foo();\n }"}, {"sha": "b32a504cb6beee0e9b2044b34f2dd725a419ac7f", "filename": "src/test/run-fail/issue-28934.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-28934.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-28934.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-28934.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -17,9 +17,14 @@ struct Parser<'i: 't, 't>(&'i u8, &'t u8);\n \n impl<'i, 't> Parser<'i, 't> {\n     fn parse_nested_block<F, T>(&mut self, parse: F) -> Result<T, ()>\n-        where for<'tt> F: FnOnce(&mut Parser<'i, 'tt>) -> T { panic!() }\n+        where for<'tt> F: FnOnce(&mut Parser<'i, 'tt>) -> T\n+    {\n+        panic!()\n+    }\n \n-    fn expect_exhausted(&mut self) -> Result<(), ()> { Ok(()) }\n+    fn expect_exhausted(&mut self) -> Result<(), ()> {\n+        Ok(())\n+    }\n }\n \n fn main() {"}, {"sha": "1ada7771cd66c718a706f36b8f86eca06f5d4636", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -16,7 +16,7 @@\n // error-pattern:so long\n fn main() {\n     let mut x = Vec::new();\n-    let y = vec!(3);\n+    let y = vec![3];\n     panic!(\"so long\");\n     x.extend(y.into_iter());\n }"}, {"sha": "7da27bd15f24ac4679c5b42e151cbc7379323060", "filename": "src/test/run-fail/issue-6458-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -11,4 +11,6 @@\n // error-pattern:explicit panic\n \n fn foo<T>(t: T) {}\n-fn main() { foo(panic!()) }\n+fn main() {\n+    foo(panic!())\n+}"}, {"sha": "4a1bc856a39c3e86b681fedbdbe705306b771bb7", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,9 +12,12 @@\n \n #![allow(unused_variables)]\n \n-struct Point { x: isize, y: isize }\n+struct Point {\n+    x: isize,\n+    y: isize,\n+}\n \n fn main() {\n-    let origin = Point {x: 0, y: 0};\n-    let f: Point = Point {x: (panic!(\"beep boop\")),.. origin};\n+    let origin = Point { x: 0, y: 0 };\n+    let f: Point = Point { x: (panic!(\"beep boop\")), ..origin };\n }"}, {"sha": "5a6eedb4863a920cf7bf68ce2414dd5cc9b8d1cf", "filename": "src/test/run-fail/match-bot-panic.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-bot-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-bot-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-bot-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -13,10 +13,12 @@\n #![allow(unreachable_code)]\n #![allow(unused_variables)]\n \n-fn foo(s: String) { }\n+fn foo(s: String) {}\n \n fn main() {\n-    let i =\n-        match Some::<isize>(3) { None::<isize> => { panic!() } Some::<isize>(_) => { panic!() } };\n+    let i = match Some::<isize>(3) {\n+        None::<isize> => panic!(),\n+        Some::<isize>(_) => panic!(),\n+    };\n     foo(i);\n }"}, {"sha": "a369a9889cc59c9438d416c526715ed745d05e3b", "filename": "src/test/run-fail/match-disc-bot.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-disc-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-disc-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-disc-bot.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,6 +9,15 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn f() -> ! { panic!(\"quux\") }\n-fn g() -> isize { match f() { true => { 1 } false => { 0 } } }\n-fn main() { g(); }\n+fn f() -> ! {\n+    panic!(\"quux\")\n+}\n+fn g() -> isize {\n+    match f() {\n+        true => 1,\n+        false => 0,\n+    }\n+}\n+fn main() {\n+    g();\n+}"}, {"sha": "61bfd38c5f4c8ed6798504c371c2f395d7a3e66a", "filename": "src/test/run-fail/match-wildcards.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -11,10 +11,18 @@\n // error-pattern:squirrelcupcake\n fn cmp() -> isize {\n     match (Some('a'), None::<char>) {\n-        (Some(_), _) => { panic!(\"squirrelcupcake\"); }\n-        (_, Some(_)) => { panic!(); }\n-        _                    => { panic!(\"wat\"); }\n+        (Some(_), _) => {\n+            panic!(\"squirrelcupcake\");\n+        }\n+        (_, Some(_)) => {\n+            panic!();\n+        }\n+        _ => {\n+            panic!(\"wat\");\n+        }\n     }\n }\n \n-fn main() { println!(\"{}\", cmp()); }\n+fn main() {\n+    println!(\"{}\", cmp());\n+}"}, {"sha": "0b7c464800aa82e05a8b62b6cda27c0c57994194", "filename": "src/test/run-fail/meta-revision-bad.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmeta-revision-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmeta-revision-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmeta-revision-bad.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -16,7 +16,15 @@\n //[foo] error-pattern:bar\n //[bar] error-pattern:foo\n \n-#[cfg(foo)] fn die() {panic!(\"foo\");}\n-#[cfg(bar)] fn die() {panic!(\"bar\");}\n+#[cfg(foo)]\n+fn die() {\n+    panic!(\"foo\");\n+}\n+#[cfg(bar)]\n+fn die() {\n+    panic!(\"bar\");\n+}\n \n-fn main() { die(); }\n+fn main() {\n+    die();\n+}"}, {"sha": "99dd332c558b0d93e27f0f50961d35222c60fcc0", "filename": "src/test/run-fail/meta-revision-ok.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmeta-revision-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmeta-revision-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmeta-revision-ok.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -15,7 +15,15 @@\n //[foo] error-pattern:foo\n //[bar] error-pattern:bar\n \n-#[cfg(foo)] fn die() {panic!(\"foo\");}\n-#[cfg(bar)] fn die() {panic!(\"bar\");}\n+#[cfg(foo)]\n+fn die() {\n+    panic!(\"foo\");\n+}\n+#[cfg(bar)]\n+fn die() {\n+    panic!(\"bar\");\n+}\n \n-fn main() { die(); }\n+fn main() {\n+    die();\n+}"}, {"sha": "16160a1496ff9d1dc20eb2824e7cd9bbbbd9bdb4", "filename": "src/test/run-fail/mir_dynamic_drops_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -27,7 +27,7 @@ impl<'a> Drop for Droppable<'a> {\n }\n \n #[rustc_mir]\n-fn mir(){\n+fn mir() {\n     let (mut xv, mut yv) = (false, false);\n     let x = Droppable(&mut xv, 1);\n     let y = Droppable(&mut yv, 2);"}, {"sha": "803ca53bf7a848c00aa4b13a4653b4d237950ff7", "filename": "src/test/run-fail/mir_dynamic_drops_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -26,7 +26,7 @@ impl<'a> Drop for Droppable<'a> {\n }\n \n #[rustc_mir]\n-fn mir<'a>(d: Droppable<'a>){\n+fn mir<'a>(d: Droppable<'a>) {\n     loop {\n         let x = d;\n         break;"}, {"sha": "afc037f48aa43723b04e29454062927dde1416c6", "filename": "src/test/run-fail/mir_dynamic_drops_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -33,7 +33,7 @@ fn may_panic<'a>() -> Droppable<'a> {\n }\n \n #[rustc_mir]\n-fn mir<'a>(d: Droppable<'a>){\n+fn mir<'a>(d: Droppable<'a>) {\n     let (mut a, mut b) = (false, false);\n     let y = Droppable(&mut a, 2);\n     let x = [Droppable(&mut b, 1), y, d, may_panic()];"}, {"sha": "9023784050f2f096c8e8691a025a49618708b817", "filename": "src/test/run-fail/panic-arg.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-arg.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n // error-pattern:woe\n-fn f(a: isize) { println!(\"{}\", a); }\n+fn f(a: isize) {\n+    println!(\"{}\", a);\n+}\n \n-fn main() { f(panic!(\"woe\")); }\n+fn main() {\n+    f(panic!(\"woe\"));\n+}"}, {"sha": "7ca45565d854bee82f59a485a11ce83353ca86c0", "filename": "src/test/run-fail/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -14,5 +14,5 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    panic!(box 413 as Box<::std::any::Any+Send>);\n+    panic!(box 413 as Box<::std::any::Any + Send>);\n }"}, {"sha": "fd2919bfe12fcb8faa1d21e87209a8b87ad70b16", "filename": "src/test/run-fail/panic-main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-main.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:moop\n-fn main() { panic!(\"moop\"); }\n+fn main() {\n+    panic!(\"moop\");\n+}"}, {"sha": "1917a7e2a7ff18db7bca82340edbfbcef6eabca7", "filename": "src/test/run-fail/panic-parens.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-parens.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -13,11 +13,15 @@\n // error-pattern:oops\n \n fn bigpanic() {\n-    while (panic!(\"oops\")) { if (panic!()) {\n-        match (panic!()) { () => {\n+    while (panic!(\"oops\")) {\n+        if (panic!()) {\n+            match (panic!()) {\n+                () => {}\n+            }\n         }\n-                     }\n-    }};\n+    }\n }\n \n-fn main() { bigpanic(); }\n+fn main() {\n+    bigpanic();\n+}"}, {"sha": "ab50503830534e7546ba0e89dd58807c8e7be3fd", "filename": "src/test/run-fail/panic-task-name-none.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -13,8 +13,9 @@\n use std::thread;\n \n fn main() {\n-    let r: Result<(),_> = thread::spawn(move|| {\n-        panic!(\"test\");\n-    }).join();\n+    let r: Result<(), _> = thread::spawn(move || {\n+                               panic!(\"test\");\n+                           })\n+                               .join();\n     assert!(r.is_ok());\n }"}, {"sha": "2d2371f5ce77c6d05fc58e85249b9442bdb580ea", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -13,9 +13,14 @@\n use std::thread::Builder;\n \n fn main() {\n-    let r: () = Builder::new().name(\"owned name\".to_string()).spawn(move|| {\n-        panic!(\"test\");\n-        ()\n-    }).unwrap().join().unwrap();\n+    let r: () = Builder::new()\n+                    .name(\"owned name\".to_string())\n+                    .spawn(move || {\n+                        panic!(\"test\");\n+                        ()\n+                    })\n+                    .unwrap()\n+                    .join()\n+                    .unwrap();\n     panic!();\n }"}, {"sha": "f59e6001794eb94de0eabab0c245f08633c2f7ea", "filename": "src/test/run-fail/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:1 == 2\n-fn main() { assert!(1 == 2); }\n+fn main() {\n+    assert!(1 == 2);\n+}"}, {"sha": "6378b4ec795405617901cc37b1987c8d6f50c372", "filename": "src/test/run-fail/result-get-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -13,5 +13,5 @@\n use std::result::Result::Err;\n \n fn main() {\n-    println!(\"{}\", Err::<isize,String>(\"kitty\".to_string()).unwrap());\n+    println!(\"{}\", Err::<isize, String>(\"kitty\".to_string()).unwrap());\n }"}, {"sha": "e16ce9c8edb85f5a29418fe4f86cba580f523c6d", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -15,9 +15,11 @@\n #![allow(unreachable_code)]\n #![allow(unused_variables)]\n \n-struct T { t: String }\n+struct T {\n+    t: String,\n+}\n \n fn main() {\n     let pth = panic!(\"bye\");\n-    let _rs: T = T {t: pth};\n+    let _rs: T = T { t: pth };\n }"}, {"sha": "8158333ade818ae71af12135355cd246e10d6f13", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -14,8 +14,10 @@\n // ignore-pretty: does not work well with `--test`\n \n mod m {\n-    pub fn exported() { }\n+    pub fn exported() {}\n \n     #[test]\n-    fn unexported() { panic!(\"runned an unexported test\"); }\n+    fn unexported() {\n+        panic!(\"runned an unexported test\");\n+    }\n }"}, {"sha": "e3d8aa2e460af8c98b18b3d190ccfaface31eeee", "filename": "src/test/run-fail/unimplemented-macro-panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:not yet implemented\n-fn main() { unimplemented!() }\n+fn main() {\n+    unimplemented!()\n+}"}, {"sha": "3dc3d0afda10b3fec88e81b4be5c97a6ed75327e", "filename": "src/test/run-fail/unique-panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funique-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funique-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,4 +10,6 @@\n \n // error-pattern: panic\n \n-fn main() { Box::new(panic!()); }\n+fn main() {\n+    Box::new(panic!());\n+}"}, {"sha": "493fe7ee4f8e71d454a6317eb2893f9423348247", "filename": "src/test/run-fail/unreachable-macro-panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funreachable-macro-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:internal error: entered unreachable code\n-fn main() { unreachable!() }\n+fn main() {\n+    unreachable!()\n+}"}, {"sha": "0a9dee3d0b99c1e56f8d4f3c805dbe4f852bd4bf", "filename": "src/test/run-fail/unreachable-static-msg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable-static-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable-static-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funreachable-static-msg.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:internal error: entered unreachable code: uhoh\n-fn main() { unreachable!(\"uhoh\") }\n+fn main() {\n+    unreachable!(\"uhoh\")\n+}"}, {"sha": "493fe7ee4f8e71d454a6317eb2893f9423348247", "filename": "src/test/run-fail/unreachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funreachable.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n // error-pattern:internal error: entered unreachable code\n-fn main() { unreachable!() }\n+fn main() {\n+    unreachable!()\n+}"}, {"sha": "0a7be154d5d152b324b0f4c3c5b0f555cca8caf4", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -10,13 +10,15 @@\n \n // error-pattern:fail\n \n-fn a() { }\n+fn a() {}\n \n-fn b() { panic!(); }\n+fn b() {\n+    panic!();\n+}\n \n fn main() {\n-    let _x = vec!(0);\n+    let _x = vec![0];\n     a();\n-    let _y = vec!(0);\n+    let _y = vec![0];\n     b();\n }"}, {"sha": "5177b4091d73db1e4a2e030b914552b6e21b6b37", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -15,10 +15,10 @@ fn build() -> Vec<isize> {\n     panic!();\n }\n \n-struct Blk { node: Vec<isize> }\n+struct Blk {\n+    node: Vec<isize>,\n+}\n \n fn main() {\n-    let _blk = Blk {\n-        node: build()\n-    };\n+    let _blk = Blk { node: build() };\n }"}, {"sha": "3be5036b216e01bc063a74890fef339bb5320fd0", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,18 +12,21 @@\n \n \n fn build1() -> Vec<isize> {\n-    vec!(0,0,0,0,0,0,0)\n+    vec![0, 0, 0, 0, 0, 0, 0]\n }\n \n fn build2() -> Vec<isize> {\n     panic!();\n }\n \n-struct Blk { node: Vec<isize> , span: Vec<isize> }\n+struct Blk {\n+    node: Vec<isize>,\n+    span: Vec<isize>,\n+}\n \n fn main() {\n     let _blk = Blk {\n         node: build1(),\n-        span: build2()\n+        span: build2(),\n     };\n }"}, {"sha": "457ae75a451e909767decdc8ee4678c458d850e6", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,7 +12,7 @@\n \n \n fn main() {\n-    let v: Vec<isize> = vec!(10);\n+    let v: Vec<isize> = vec![10];\n     let x: usize = 0;\n     assert_eq!(v[x], 10);\n     // Bounds-check panic."}, {"sha": "29482612c24c741fe33914aeeee91e4f9519813b", "filename": "src/test/run-fail/while-body-panics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fwhile-body-panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fwhile-body-panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-panics.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -11,4 +11,11 @@\n #![allow(while_true)]\n \n // error-pattern:quux\n-fn main() { let _x: isize = { while true { panic!(\"quux\"); } ; 8 } ; }\n+fn main() {\n+    let _x: isize = {\n+        while true {\n+            panic!(\"quux\");\n+        }\n+        8\n+    };\n+}"}, {"sha": "e410684cd349a13468c497030a0dd9959714fddd", "filename": "src/test/run-fail/while-panic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fwhile-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a523ba134c86df449bccd903313fc5e7b6f6c3/src%2Ftest%2Frun-fail%2Fwhile-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-panic.rs?ref=39a523ba134c86df449bccd903313fc5e7b6f6c3", "patch": "@@ -12,5 +12,10 @@\n \n // error-pattern:giraffe\n fn main() {\n-    panic!({ while true { panic!(\"giraffe\") }; \"clandestine\" });\n+    panic!({\n+        while true {\n+            panic!(\"giraffe\")\n+        }\n+        \"clandestine\"\n+    });\n }"}]}