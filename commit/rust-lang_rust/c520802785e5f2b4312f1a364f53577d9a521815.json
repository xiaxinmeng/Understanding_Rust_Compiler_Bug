{"sha": "c520802785e5f2b4312f1a364f53577d9a521815", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MjA4MDI3ODVlNWYyYjQzMTJmMWEzNjRmNTM1NzdkOWE1MjE4MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T22:32:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T22:32:52Z"}, "message": "Auto merge of #70722 - Centril:rollup-ar4gn1x, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #70487 (Stabilize float::to_int_unchecked)\n - #70595 (Remove unused discriminant reads from MIR bodies)\n - #70691 (Improve docs in `AllocRef`)\n - #70694 (Use Self over specific type in return position)\n - #70700 (Expand on platform details of `include_xxx` macros)\n - #70708 (Fix typo in u8::to_ascii_uppercase and u8::to_ascii_lowercase)\n - #70716 (Unerase regions in infer_placeholder_type)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0a9a750df701c3632c1b34d070f202bd450c618c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9a750df701c3632c1b34d070f202bd450c618c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c520802785e5f2b4312f1a364f53577d9a521815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c520802785e5f2b4312f1a364f53577d9a521815", "html_url": "https://github.com/rust-lang/rust/commit/c520802785e5f2b4312f1a364f53577d9a521815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c520802785e5f2b4312f1a364f53577d9a521815/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae", "html_url": "https://github.com/rust-lang/rust/commit/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae"}, {"sha": "98cf9d9aacd40ad7847f5777dea0f0a318a13068", "url": "https://api.github.com/repos/rust-lang/rust/commits/98cf9d9aacd40ad7847f5777dea0f0a318a13068", "html_url": "https://github.com/rust-lang/rust/commit/98cf9d9aacd40ad7847f5777dea0f0a318a13068"}], "stats": {"total": 215, "additions": 150, "deletions": 65}, "files": [{"sha": "77ac93c7b7905c293472964c9aac808a01a7be0f", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -33,9 +33,7 @@ impl fmt::Display for AllocErr {\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n pub enum AllocInit {\n-    /// The contents of the new memory are undefined.\n-    ///\n-    /// Reading uninitialized memory is Undefined Behavior; it must be initialized before use.\n+    /// The contents of the new memory are uninitialized.\n     Uninitialized,\n     /// The new memory is guaranteed to be zeroed.\n     Zeroed,\n@@ -196,7 +194,11 @@ pub unsafe trait AllocRef {\n     ///\n     /// # Safety\n     ///\n-    /// `memory` must be a memory block returned by this allocator.\n+    /// * `ptr` must be [*currently allocated*] via this allocator, and\n+    /// * `layout` must [*fit*] the `ptr`.\n+    ///\n+    /// [*currently allocated*]: #currently-allocated-memory\n+    /// [*fit*]: #memory-fitting\n     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout);\n \n     /// Attempts to extend the memory block.\n@@ -237,7 +239,7 @@ pub unsafe trait AllocRef {\n     // * `new_size must be strictly greater than `memory.size` or both are zero\n     /// * `new_size` must be greater than or equal to `layout.size()`\n     /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\n-    ///   (i.e., the rounded value must be less than `usize::MAX`).\n+    ///   (i.e., the rounded value must be less than or equal to `usize::MAX`).\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting"}, {"sha": "66ae760fc1f791b6a57eea66c117416e122c1572", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -13,9 +13,9 @@ mod private {\n /// Typically doesn\u2019t need to be used directly.\n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n pub trait FloatToInt<Int>: private::Sealed + Sized {\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n     #[doc(hidden)]\n-    unsafe fn approx_unchecked(self) -> Int;\n+    unsafe fn to_int_unchecked(self) -> Int;\n }\n \n macro_rules! impl_float_to_int {\n@@ -27,8 +27,15 @@ macro_rules! impl_float_to_int {\n             impl FloatToInt<$Int> for $Float {\n                 #[doc(hidden)]\n                 #[inline]\n-                unsafe fn approx_unchecked(self) -> $Int {\n-                    crate::intrinsics::float_to_int_approx_unchecked(self)\n+                unsafe fn to_int_unchecked(self) -> $Int {\n+                    #[cfg(bootstrap)]\n+                    {\n+                        crate::intrinsics::float_to_int_approx_unchecked(self)\n+                    }\n+                    #[cfg(not(bootstrap))]\n+                    {\n+                        crate::intrinsics::float_to_int_unchecked(self)\n+                    }\n                 }\n             }\n         )+"}, {"sha": "7e9140faa64119e81050c78f55460fd703bd83a5", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -1582,8 +1582,16 @@ extern \"rust-intrinsic\" {\n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n     /// (<https://github.com/rust-lang/rust/issues/10184>)\n     /// This is under stabilization at <https://github.com/rust-lang/rust/issues/67058>\n+    #[cfg(bootstrap)]\n     pub fn float_to_int_approx_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n \n+    /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n+    /// (<https://github.com/rust-lang/rust/issues/10184>)\n+    ///\n+    /// Stabilized as `f32::to_int_unchecked` and `f64::to_int_unchecked`.\n+    #[cfg(not(bootstrap))]\n+    pub fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+\n     /// Returns the number of bits set in an integer type `T`\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer"}, {"sha": "9c885ef99a980010b97d0d37fd4ddad7b1c34a72", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -1070,8 +1070,10 @@ pub(crate) mod builtin {\n \n     /// Includes a utf8-encoded file as a string.\n     ///\n-    /// The file is located relative to the current file. (similarly to how\n-    /// modules are found)\n+    /// The file is located relative to the current file (similarly to how\n+    /// modules are found). The provided path is interpreted in a platform-specific\n+    /// way at compile time. So, for instance, an invocation with a Windows path\n+    /// containing backslashes `\\` would not compile correctly on Unix.\n     ///\n     /// This macro will yield an expression of type `&'static str` which is the\n     /// contents of the file.\n@@ -1108,8 +1110,10 @@ pub(crate) mod builtin {\n \n     /// Includes a file as a reference to a byte array.\n     ///\n-    /// The file is located relative to the current file. (similarly to how\n-    /// modules are found)\n+    /// The file is located relative to the current file (similarly to how\n+    /// modules are found). The provided path is interpreted in a platform-specific\n+    /// way at compile time. So, for instance, an invocation with a Windows path\n+    /// containing backslashes `\\` would not compile correctly on Unix.\n     ///\n     /// This macro will yield an expression of type `&'static [u8; N]` which is\n     /// the contents of the file.\n@@ -1202,7 +1206,9 @@ pub(crate) mod builtin {\n     /// Parses a file as an expression or an item according to the context.\n     ///\n     /// The file is located relative to the current file (similarly to how\n-    /// modules are found).\n+    /// modules are found). The provided path is interpreted in a platform-specific\n+    /// way at compile time. So, for instance, an invocation with a Windows path\n+    /// containing backslashes `\\` would not compile correctly on Unix.\n     ///\n     /// Using this macro is often a bad idea, because if the file is\n     /// parsed as an expression, it is going to be placed in the"}, {"sha": "09f1eab2d4b9d66be4c56907850e0a86d836973c", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -464,14 +464,12 @@ impl f32 {\n     /// assuming that the value is finite and fits in that type.\n     ///\n     /// ```\n-    /// #![feature(float_approx_unchecked_to)]\n-    ///\n     /// let value = 4.6_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<u16>() };\n     /// assert_eq!(rounded, 4);\n     ///\n     /// let value = -128.9_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n     /// assert_eq!(rounded, std::i8::MIN);\n     /// ```\n     ///\n@@ -482,13 +480,13 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n-    pub unsafe fn approx_unchecked_to<Int>(self) -> Int\n+    pub unsafe fn to_int_unchecked<Int>(self) -> Int\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::approx_unchecked(self)\n+        FloatToInt::<Int>::to_int_unchecked(self)\n     }\n \n     /// Raw transmutation to `u32`."}, {"sha": "65ef7ba9ac7680b00e1e2dd7bf05e3efc1d4ee63", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -478,14 +478,12 @@ impl f64 {\n     /// assuming that the value is finite and fits in that type.\n     ///\n     /// ```\n-    /// #![feature(float_approx_unchecked_to)]\n-    ///\n     /// let value = 4.6_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<u16>() };\n     /// assert_eq!(rounded, 4);\n     ///\n     /// let value = -128.9_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n     /// assert_eq!(rounded, std::i8::MIN);\n     /// ```\n     ///\n@@ -496,13 +494,13 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n-    pub unsafe fn approx_unchecked_to<Int>(self) -> Int\n+    pub unsafe fn to_int_unchecked<Int>(self) -> Int\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::approx_unchecked(self)\n+        FloatToInt::<Int>::to_int_unchecked(self)\n     }\n \n     /// Raw transmutation to `u64`."}, {"sha": "c85064759ea031aff810bdbd9436f0bb80bb90af", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -4376,7 +4376,7 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n-        // Unset the fith bit if this is a lowercase letter\n+        // Unset the fifth bit if this is a lowercase letter\n         *self & !((self.is_ascii_lowercase() as u8) << 5)\n     }\n \n@@ -4399,7 +4399,7 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n-        // Set the fith bit if this is an uppercase letter\n+        // Set the fifth bit if this is an uppercase letter\n         *self | ((self.is_ascii_uppercase() as u8) << 5)\n     }\n "}, {"sha": "5734eae7d5946b480963969ecafa7d5faf6bdb63", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -543,13 +543,13 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n             }\n \n-            \"float_to_int_approx_unchecked\" => {\n+            \"float_to_int_unchecked\" => {\n                 if float_type_width(arg_tys[0]).is_none() {\n                     span_invalid_monomorphization_error(\n                         tcx.sess,\n                         span,\n                         &format!(\n-                            \"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                            \"invalid monomorphization of `float_to_int_unchecked` \\\n                                   intrinsic: expected basic float type, \\\n                                   found `{}`\",\n                             arg_tys[0]\n@@ -570,7 +570,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                             tcx.sess,\n                             span,\n                             &format!(\n-                                \"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                                \"invalid monomorphization of `float_to_int_unchecked` \\\n                                       intrinsic:  expected basic integer type, \\\n                                       found `{}`\",\n                                 ret_ty"}, {"sha": "c2029a223b94123e3ec6a625cb83c15d58ac9195", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -368,18 +368,22 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n-                if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) =\n-                    &stmt.kind\n-                {\n-                    match c.literal.val {\n-                        // Keep assignments from unevaluated constants around, since the evaluation\n-                        // may report errors, even if the use of the constant is dead code.\n-                        ty::ConstKind::Unevaluated(..) => {}\n-                        _ => {\n-                            if !p.is_indirect() {\n-                                trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n-                                return;\n+                if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n+                    if !dest.is_indirect() && dest.local == *local {\n+                        if let Rvalue::Use(Operand::Constant(c)) = rvalue {\n+                            match c.literal.val {\n+                                // Keep assignments from unevaluated constants around, since the\n+                                // evaluation may report errors, even if the use of the constant\n+                                // is dead code.\n+                                ty::ConstKind::Unevaluated(..) => {}\n+                                _ => {\n+                                    trace!(\"skipping store of const value {:?} to {:?}\", c, dest);\n+                                    return;\n+                                }\n                             }\n+                        } else if let Rvalue::Discriminant(d) = rvalue {\n+                            trace!(\"skipping store of discriminant value {:?} to {:?}\", d, dest);\n+                            return;\n                         }\n                     }\n                 }"}, {"sha": "05028ff0b2c26f01d6292a5d7909ef30425ce95c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -275,7 +275,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n                 (1, vec![param(0), param(0)], param(0))\n             }\n-            \"float_to_int_approx_unchecked\" => (2, vec![param(0)], param(1)),\n+            \"float_to_int_unchecked\" => (2, vec![param(0)], param(1)),\n \n             \"assume\" => (0, vec![tcx.types.bool], tcx.mk_unit()),\n             \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),"}, {"sha": "e6099b98dc82bffab40cc89cb3088c70f5fd26d2", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -655,7 +655,11 @@ fn infer_placeholder_type(\n         }\n     }\n \n-    ty\n+    // Typeck doesn't expect erased regions to be returned from `type_of`.\n+    tcx.fold_regions(&ty, &mut false, |r, _| match r {\n+        ty::ReErased => tcx.lifetimes.re_static,\n+        _ => r,\n+    })\n }\n \n fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {"}, {"sha": "119bdfcb0f4425807b6a2d529ac989ae2ddc7de9", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -734,7 +734,7 @@ impl OpenOptions {\n     /// let file = options.read(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> OpenOptions {\n+    pub fn new() -> Self {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n \n@@ -751,7 +751,7 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn read(&mut self, read: bool) -> &mut OpenOptions {\n+    pub fn read(&mut self, read: bool) -> &mut Self {\n         self.0.read(read);\n         self\n     }\n@@ -772,7 +772,7 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().write(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn write(&mut self, write: bool) -> &mut OpenOptions {\n+    pub fn write(&mut self, write: bool) -> &mut Self {\n         self.0.write(write);\n         self\n     }\n@@ -819,7 +819,7 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().append(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn append(&mut self, append: bool) -> &mut OpenOptions {\n+    pub fn append(&mut self, append: bool) -> &mut Self {\n         self.0.append(append);\n         self\n     }\n@@ -839,7 +839,7 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().write(true).truncate(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn truncate(&mut self, truncate: bool) -> &mut OpenOptions {\n+    pub fn truncate(&mut self, truncate: bool) -> &mut Self {\n         self.0.truncate(truncate);\n         self\n     }\n@@ -860,7 +860,7 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().write(true).create(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn create(&mut self, create: bool) -> &mut OpenOptions {\n+    pub fn create(&mut self, create: bool) -> &mut Self {\n         self.0.create(create);\n         self\n     }\n@@ -893,7 +893,7 @@ impl OpenOptions {\n     ///                              .open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"expand_open_options2\", since = \"1.9.0\")]\n-    pub fn create_new(&mut self, create_new: bool) -> &mut OpenOptions {\n+    pub fn create_new(&mut self, create_new: bool) -> &mut Self {\n         self.0.create_new(create_new);\n         self\n     }"}, {"sha": "067fa879b40382ca1786220d639c1d95a6de4f72", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -0,0 +1,12 @@\n+fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n+    match x {\n+        None => None,\n+        Some(x) => Some(x),\n+    }\n+}\n+\n+fn main() {\n+    map(None);\n+}\n+\n+// EMIT_MIR rustc.map.SimplifyLocals.diff"}, {"sha": "bba8bc82fe7d9b06de710a32313dd056f76875f6", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/rustc.map.SimplifyLocals.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `map` before SimplifyLocals\n++ // MIR for `map` after SimplifyLocals\n+  \n+  fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n+-     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      scope 1 {\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      }\n+  \n+      bb1: {\n+          _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb2: {\n+          discriminant(_0) = 0;            // bb2[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+          goto -> bb3;                     // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb3: {\n+-         _5 = discriminant(_1);           // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-         return;                          // bb3[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n++         return;                          // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "78a7f722538edb2c82d54e0d9c8eb2078042d2bc", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -183,33 +183,31 @@ fn main() {\n // fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n //     debug x => _1;\n //     let mut _0: std::result::Result<u32, i32>;\n-//     let mut _2: isize;\n-//     let _3: i32;\n-//     let _4: u32;\n+//     let _2: i32;\n+//     let _3: u32;\n //     scope 1 {\n-//         debug y => _4;\n+//         debug y => _3;\n //     }\n //     scope 2 {\n-//         debug err => _3;\n+//         debug err => _2;\n //         scope 3 {\n //             scope 7 {\n-//                 debug t => _3;\n+//                 debug t => _2;\n //             }\n //             scope 8 {\n-//                 debug v => _3;\n+//                 debug v => _2;\n //             }\n //         }\n //     }\n //     scope 4 {\n-//         debug val => _4;\n+//         debug val => _3;\n //         scope 5 {\n //         }\n //     }\n //     scope 6 {\n //         debug self => _1;\n //     }\n //     bb0: {\n-//         _2 = discriminant(_1);\n //         _0 = move _1;\n //         return;\n //     }"}, {"sha": "b931a04c2860c9f7033203b68de717208ffca51f", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -35,6 +35,11 @@ const C = 42;\n //~| HELP provide a type for the item\n //~| SUGGESTION C: i32\n \n+const D = &&42;\n+//~^ ERROR missing type for `const` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION D: &&i32\n+\n static S = Vec::<String>::new();\n //~^ ERROR missing type for `static` item\n //~| HELP provide a type for the item"}, {"sha": "874c1bac10bd5613ba5024e88aec2a60383b9d0f", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c520802785e5f2b4312f1a364f53577d9a521815/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=c520802785e5f2b4312f1a364f53577d9a521815", "patch": "@@ -4,14 +4,20 @@ error: missing type for `const` item\n LL | const C = 42;\n    |       ^ help: provide a type for the item: `C: i32`\n \n+error: missing type for `const` item\n+  --> $DIR/const-no-type.rs:38:7\n+   |\n+LL | const D = &&42;\n+   |       ^ help: provide a type for the item: `D: &&i32`\n+\n error: missing type for `static` item\n-  --> $DIR/const-no-type.rs:38:8\n+  --> $DIR/const-no-type.rs:43:8\n    |\n LL | static S = Vec::<String>::new();\n    |        ^ help: provide a type for the item: `S: std::vec::Vec<std::string::String>`\n \n error: missing type for `static mut` item\n-  --> $DIR/const-no-type.rs:43:12\n+  --> $DIR/const-no-type.rs:48:12\n    |\n LL | static mut SM = \"abc\";\n    |            ^^ help: provide a type for the item: `SM: &str`\n@@ -34,5 +40,5 @@ error: missing type for `static mut` item\n LL | static mut SM2 = \"abc\";\n    |            ^^^ help: provide a type for the item: `SM2: <type>`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}]}