{"sha": "0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTQwNzFhYjc4YmE0NjQ4ZTY0YTI2OGVmMWE0ZmZmYWE2YzM5YjY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-05T19:42:39Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-05T19:42:39Z"}, "message": "Merge pull request #564 from mcarton/hashmap\n\nLint looping on maps ignoring the keys or values", "tree": {"sha": "65b5ed5cad076cd256b71f3e0d58c965795bc620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65b5ed5cad076cd256b71f3e0d58c965795bc620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "html_url": "https://github.com/rust-lang/rust/commit/0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28814fb30b1f780a37cfa6aa0b02f3e5d43da0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28814fb30b1f780a37cfa6aa0b02f3e5d43da0e9", "html_url": "https://github.com/rust-lang/rust/commit/28814fb30b1f780a37cfa6aa0b02f3e5d43da0e9"}, {"sha": "c0063e172de4854b6da3f097e5eb1da43dd3bd7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0063e172de4854b6da3f097e5eb1da43dd3bd7a", "html_url": "https://github.com/rust-lang/rust/commit/c0063e172de4854b6da3f097e5eb1da43dd3bd7a"}], "stats": {"total": 143, "additions": 135, "deletions": 8}, "files": [{"sha": "59a12e09b17bfd95fe8188b59e449eda2d318700", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 111 lints included in this crate:\n+There are 112 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -42,6 +42,7 @@ name\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                         | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                       | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                   | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`"}, {"sha": "3f18bcb17ced339ff6cb1cabd9986a4f4d4d6e94", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "patch": "@@ -205,6 +205,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_ITER_LOOP,\n+        loops::FOR_KV_MAP,\n         loops::FOR_LOOP_OVER_OPTION,\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,"}, {"sha": "3e9880d59323aa04ba9acbb9e96b938606a21213", "filename": "src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "patch": "@@ -352,7 +352,7 @@ fn report_extra_lifetimes(cx: &LateContext, func: &FnDecl, generics: &Generics,\n         }\n     }\n \n-    for (_, v) in checker.0 {\n+    for &v in checker.0.values() {\n         span_lint(cx, UNUSED_LIFETIMES, v, \"this lifetime isn't used in the function definition\");\n     }\n }"}, {"sha": "3f430a1aaf02b2ad4ae7054845912b8e367672ed", "filename": "src/loops.rs", "status": "modified", "additions": 102, "deletions": 6, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "patch": "@@ -10,8 +10,8 @@ use std::borrow::Cow;\n use std::collections::{HashSet, HashMap};\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro, expr_block,\n-            span_help_and_lint, is_integer_literal, get_enclosing_block};\n-use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH, OPTION_PATH, RESULT_PATH};\n+            span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, walk_ptrs_ty};\n+use utils::{BTREEMAP_PATH, HASHMAP_PATH, LL_PATH, OPTION_PATH, RESULT_PATH, VEC_PATH};\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n ///\n@@ -141,6 +141,24 @@ declare_lint!{ pub EMPTY_LOOP, Warn, \"empty `loop {}` detected\" }\n /// **Example:** `while let Some(val) = iter() { .. }`\n declare_lint!{ pub WHILE_LET_ON_ITERATOR, Warn, \"using a while-let loop instead of a for loop on an iterator\" }\n \n+/// **What it does:** This warns when you iterate on a map (`HashMap` or `BTreeMap`) and ignore\n+/// either the keys or values.\n+///\n+/// **Why is this bad?** Readability. There are `keys` and `values` methods that can be used to\n+/// express that don't need the values or keys.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// for (k, _) in &map { .. }\n+/// ```\n+/// could be replaced by\n+/// ```rust\n+/// for k in map.keys() { .. }\n+/// ```\n+declare_lint!{ pub FOR_KV_MAP, Warn, \"looping on a map using `iter` when `keys` or `values` would do\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n@@ -154,7 +172,8 @@ impl LintPass for LoopsPass {\n                     REVERSE_RANGE_LOOP,\n                     EXPLICIT_COUNTER_LOOP,\n                     EMPTY_LOOP,\n-                    WHILE_LET_ON_ITERATOR)\n+                    WHILE_LET_ON_ITERATOR,\n+                    FOR_KV_MAP)\n     }\n }\n \n@@ -270,6 +289,7 @@ fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &E\n     check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n+    check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n }\n \n /// Check for looping over a range and then indexing a sequence with it.\n@@ -499,6 +519,79 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n     }\n }\n \n+// Check for the FOR_KV_MAP lint.\n+fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n+    if let PatTup(ref pat) = pat.node {\n+        if pat.len() == 2 {\n+\n+            let (pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n+                (key, _) if pat_is_wild(key, body) => (&pat[1].span, \"values\"),\n+                (_, value) if pat_is_wild(value, body) => (&pat[0].span, \"keys\"),\n+                _ => return\n+            };\n+\n+            let ty = walk_ptrs_ty(cx.tcx.expr_ty(arg));\n+            let arg_span = if let ExprAddrOf(_, ref expr) = arg.node {\n+                expr.span\n+            }\n+            else {\n+                arg.span\n+            };\n+\n+            if match_type(cx, ty, &HASHMAP_PATH) ||\n+               match_type(cx, ty, &BTREEMAP_PATH) {\n+                span_lint_and_then(cx,\n+                          FOR_KV_MAP,\n+                          expr.span,\n+                          &format!(\"you seem to want to iterate on a map's {}\", kind),\n+                          |db| {\n+                    db.span_suggestion(expr.span,\n+                                       \"use the corresponding method\",\n+                                       format!(\"for {} in {}.{}() {{...}}\",\n+                                               snippet(cx, *pat_span, \"..\"),\n+                                               snippet(cx, arg_span, \"..\"),\n+                                               kind));\n+                });\n+            }\n+        }\n+    }\n+\n+}\n+\n+// Return true if the pattern is a `PatWild` or an ident prefixed with '_'.\n+fn pat_is_wild(pat: &Pat_, body: &Expr) -> bool {\n+    match *pat {\n+        PatWild => true,\n+        PatIdent(_, ident, None) if ident.node.name.as_str().starts_with('_') => {\n+            let mut visitor = UsedVisitor {\n+                var: ident.node,\n+                used: false,\n+            };\n+            walk_expr(&mut visitor, body);\n+            !visitor.used\n+        },\n+        _ => false,\n+    }\n+}\n+\n+struct UsedVisitor {\n+    var: Ident, // var to look for\n+    used: bool, // has the var been used otherwise?\n+}\n+\n+impl<'a> Visitor<'a> for UsedVisitor {\n+    fn visit_expr(&mut self, expr: &Expr) {\n+        if let ExprPath(None, ref path) = expr.node {\n+            if path.segments.len() == 1 && path.segments[0].identifier == self.var {\n+                self.used = true;\n+                return\n+            }\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+}\n+\n /// Recover the essential nodes of a desugared for loop:\n /// `for pat in arg { body }` becomes `(pat, arg, body)`.\n fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n@@ -601,11 +694,14 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     // no walk_ptrs_ty: calling iter() on a reference can make sense because it\n     // will allow further borrows afterwards\n     let ty = cx.tcx.expr_ty(e);\n-    is_iterable_array(ty) || match_type(cx, ty, &VEC_PATH) || match_type(cx, ty, &LL_PATH) ||\n-    match_type(cx, ty, &HASHMAP_PATH) || match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"]) ||\n+    is_iterable_array(ty) ||\n+    match_type(cx, ty, &VEC_PATH) ||\n+    match_type(cx, ty, &LL_PATH) ||\n+    match_type(cx, ty, &HASHMAP_PATH) ||\n+    match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"]) ||\n     match_type(cx, ty, &[\"collections\", \"vec_deque\", \"VecDeque\"]) ||\n     match_type(cx, ty, &[\"collections\", \"binary_heap\", \"BinaryHeap\"]) ||\n-    match_type(cx, ty, &[\"collections\", \"btree\", \"map\", \"BTreeMap\"]) ||\n+    match_type(cx, ty, &BTREEMAP_PATH) ||\n     match_type(cx, ty, &[\"collections\", \"btree\", \"set\", \"BTreeSet\"])\n }\n "}, {"sha": "e361ebe777f478da482656697745537f738827d8", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0494071ab78ba4648e64a268ef1a4fffaa6c39b6/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "patch": "@@ -280,4 +280,33 @@ fn main() {\n     println!(\"index: {}\", index);\n \n     for_loop_over_option_and_result();\n+\n+    let m : HashMap<u64, u64> = HashMap::new();\n+    for (_, v) in &m {\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in &m.values()\n+        let _v = v;\n+    }\n+\n+    let rm = &m;\n+    for (k, _value) in rm {\n+        //~^ you seem to want to iterate on a map's keys\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for k in rm.keys()\n+        let _k = k;\n+    }\n+\n+    test_for_kv_map();\n+}\n+\n+#[allow(used_underscore_binding)]\n+fn test_for_kv_map() {\n+    let m : HashMap<u64, u64> = HashMap::new();\n+\n+    // No error, _value is actually used\n+    for (k, _value) in &m {\n+        let _ = _value;\n+        let _k = k;\n+    }\n }"}]}