{"sha": "e3025a07338eca4092f96c16011caccee149c8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMDI1YTA3MzM4ZWNhNDA5MmY5NmMxNjAxMWNhY2NlZTE0OWM4ZDQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-31T20:37:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-01T13:41:46Z"}, "message": "ICH: Hash expression spans if their source location is captured for panics", "tree": {"sha": "8fce17d8933737cf9879662daee73399972361bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fce17d8933737cf9879662daee73399972361bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3025a07338eca4092f96c16011caccee149c8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3025a07338eca4092f96c16011caccee149c8d4", "html_url": "https://github.com/rust-lang/rust/commit/e3025a07338eca4092f96c16011caccee149c8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3025a07338eca4092f96c16011caccee149c8d4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "html_url": "https://github.com/rust-lang/rust/commit/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01"}], "stats": {"total": 311, "additions": 276, "deletions": 35}, "files": [{"sha": "80c41f855ba5c95508e60369a9020879bc650e77", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 103, "deletions": 35, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/e3025a07338eca4092f96c16011caccee149c8d4/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3025a07338eca4092f96c16011caccee149c8d4/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=e3025a07338eca4092f96c16011caccee149c8d4", "patch": "@@ -21,6 +21,7 @@ use self::SawTyComponent::*;\n use self::SawTraitOrImplItemComponent::*;\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n+use syntax::attr;\n use syntax::parse::token;\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n use rustc::hir;\n@@ -53,6 +54,7 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n     hash_spans: bool,\n     codemap: &'a mut CachingCodemapView<'tcx>,\n+    overflow_checks_enabled: bool,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n@@ -62,12 +64,16 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                codemap: &'a mut CachingCodemapView<'tcx>,\n                hash_spans: bool)\n                -> Self {\n+        let check_overflow = tcx.sess.opts.debugging_opts.force_overflow_checks\n+            .unwrap_or(tcx.sess.opts.debug_assertions);\n+\n         StrictVersionHashVisitor {\n             st: st,\n             tcx: tcx,\n             def_path_hashes: def_path_hashes,\n             hash_spans: hash_spans,\n             codemap: codemap,\n+            overflow_checks_enabled: check_overflow,\n         }\n     }\n \n@@ -83,7 +89,6 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     // Also note that we are hashing byte offsets for the column, not unicode\n     // codepoint offsets. For the purpose of the hash that's sufficient.\n     fn hash_span(&mut self, span: Span) {\n-        debug_assert!(self.hash_spans);\n         debug!(\"hash_span: st={:?}\", self.st);\n \n         // If this is not an empty or invalid span, we want to hash the last\n@@ -241,37 +246,80 @@ enum SawExprComponent<'a> {\n     SawExprRepeat,\n }\n \n-fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n+// The boolean returned indicates whether the span of this expression is always\n+// significant, regardless of debuginfo.\n+fn saw_expr<'a>(node: &'a Expr_,\n+                overflow_checks_enabled: bool)\n+                -> (SawExprComponent<'a>, bool) {\n+    let binop_can_panic_at_runtime = |binop| {\n+        match binop {\n+            BiAdd |\n+            BiSub |\n+            BiMul => overflow_checks_enabled,\n+\n+            BiDiv |\n+            BiRem => true,\n+\n+            BiAnd |\n+            BiOr |\n+            BiBitXor |\n+            BiBitAnd |\n+            BiBitOr |\n+            BiShl |\n+            BiShr |\n+            BiEq |\n+            BiLt |\n+            BiLe |\n+            BiNe |\n+            BiGe |\n+            BiGt => false\n+        }\n+    };\n+\n+    let unop_can_panic_at_runtime = |unop| {\n+        match unop {\n+            UnDeref |\n+            UnNot => false,\n+            UnNeg => overflow_checks_enabled,\n+        }\n+    };\n+\n     match *node {\n-        ExprBox(..)              => SawExprBox,\n-        ExprArray(..)            => SawExprArray,\n-        ExprCall(..)             => SawExprCall,\n-        ExprMethodCall(..)       => SawExprMethodCall,\n-        ExprTup(..)              => SawExprTup,\n-        ExprBinary(op, ..)       => SawExprBinary(op.node),\n-        ExprUnary(op, _)         => SawExprUnary(op),\n-        ExprLit(ref lit)         => SawExprLit(lit.node.clone()),\n-        ExprCast(..)             => SawExprCast,\n-        ExprType(..)             => SawExprType,\n-        ExprIf(..)               => SawExprIf,\n-        ExprWhile(..)            => SawExprWhile,\n-        ExprLoop(_, id)          => SawExprLoop(id.map(|id| id.node.as_str())),\n-        ExprMatch(..)            => SawExprMatch,\n-        ExprClosure(cc, _, _, _) => SawExprClosure(cc),\n-        ExprBlock(..)            => SawExprBlock,\n-        ExprAssign(..)           => SawExprAssign,\n-        ExprAssignOp(op, ..)     => SawExprAssignOp(op.node),\n-        ExprField(_, name)       => SawExprField(name.node.as_str()),\n-        ExprTupField(_, id)      => SawExprTupField(id.node),\n-        ExprIndex(..)            => SawExprIndex,\n-        ExprPath(ref qself, _)   => SawExprPath(qself.as_ref().map(|q| q.position)),\n-        ExprAddrOf(m, _)         => SawExprAddrOf(m),\n-        ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.as_str())),\n-        ExprAgain(id)            => SawExprAgain(id.map(|id| id.node.as_str())),\n-        ExprRet(..)              => SawExprRet,\n-        ExprInlineAsm(ref a,..)  => SawExprInlineAsm(a),\n-        ExprStruct(..)           => SawExprStruct,\n-        ExprRepeat(..)           => SawExprRepeat,\n+        ExprBox(..)              => (SawExprBox, false),\n+        ExprArray(..)            => (SawExprArray, false),\n+        ExprCall(..)             => (SawExprCall, false),\n+        ExprMethodCall(..)       => (SawExprMethodCall, false),\n+        ExprTup(..)              => (SawExprTup, false),\n+        ExprBinary(op, ..)       => {\n+            (SawExprBinary(op.node), binop_can_panic_at_runtime(op.node))\n+        }\n+        ExprUnary(op, _)         => {\n+            (SawExprUnary(op), unop_can_panic_at_runtime(op))\n+        }\n+        ExprLit(ref lit)         => (SawExprLit(lit.node.clone()), false),\n+        ExprCast(..)             => (SawExprCast, false),\n+        ExprType(..)             => (SawExprType, false),\n+        ExprIf(..)               => (SawExprIf, false),\n+        ExprWhile(..)            => (SawExprWhile, false),\n+        ExprLoop(_, id)          => (SawExprLoop(id.map(|id| id.node.as_str())), false),\n+        ExprMatch(..)            => (SawExprMatch, false),\n+        ExprClosure(cc, _, _, _) => (SawExprClosure(cc), false),\n+        ExprBlock(..)            => (SawExprBlock, false),\n+        ExprAssign(..)           => (SawExprAssign, false),\n+        ExprAssignOp(op, ..)     => {\n+            (SawExprAssignOp(op.node), binop_can_panic_at_runtime(op.node))\n+        }\n+        ExprField(_, name)       => (SawExprField(name.node.as_str()), false),\n+        ExprTupField(_, id)      => (SawExprTupField(id.node), false),\n+        ExprIndex(..)            => (SawExprIndex, true),\n+        ExprPath(ref qself, _)   => (SawExprPath(qself.as_ref().map(|q| q.position)), false),\n+        ExprAddrOf(m, _)         => (SawExprAddrOf(m), false),\n+        ExprBreak(id)            => (SawExprBreak(id.map(|id| id.node.as_str())), false),\n+        ExprAgain(id)            => (SawExprAgain(id.map(|id| id.node.as_str())), false),\n+        ExprRet(..)              => (SawExprRet, false),\n+        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(a), false),\n+        ExprStruct(..)           => (SawExprStruct, false),\n+        ExprRepeat(..)           => (SawExprRepeat, false),\n     }\n }\n \n@@ -421,10 +469,13 @@ macro_rules! hash_attrs {\n \n macro_rules! hash_span {\n     ($visitor:expr, $span:expr) => ({\n-        if $visitor.hash_spans {\n+        hash_span!($visitor, $span, false)\n+    });\n+    ($visitor:expr, $span:expr, $force:expr) => ({\n+        if $force || $visitor.hash_spans {\n             $visitor.hash_span($span);\n         }\n-    })\n+    });\n }\n \n impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n@@ -474,10 +525,12 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         debug!(\"visit_expr: st={:?}\", self.st);\n-        SawExpr(saw_expr(&ex.node)).hash(self.st);\n+        let (saw_expr, force_span) = saw_expr(&ex.node,\n+                                              self.overflow_checks_enabled);\n+        SawExpr(saw_expr).hash(self.st);\n         // No need to explicitly hash the discriminant here, since we are\n         // implicitly hashing the discriminant of SawExprComponent.\n-        hash_span!(self, ex.span);\n+        hash_span!(self, ex.span, force_span);\n         hash_attrs!(self, &ex.attrs);\n         visit::walk_expr(self, ex)\n     }\n@@ -519,6 +572,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_item(&mut self, i: &'tcx Item) {\n         debug!(\"visit_item: {:?} st={:?}\", i, self.st);\n+\n+        self.maybe_enable_overflow_checks(&i.attrs);\n+\n         SawItem(saw_item(&i.node)).hash(self.st);\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n@@ -545,6 +601,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n+\n+        self.maybe_enable_overflow_checks(&ti.attrs);\n+\n         SawTraitItem(saw_trait_item(&ti.node)).hash(self.st);\n         hash_span!(self, ti.span);\n         hash_attrs!(self, &ti.attrs);\n@@ -553,6 +612,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_impl_item(&mut self, ii: &'tcx ImplItem) {\n         debug!(\"visit_impl_item: st={:?}\", self.st);\n+\n+        self.maybe_enable_overflow_checks(&ii.attrs);\n+\n         SawImplItem(saw_impl_item(&ii.node)).hash(self.st);\n         hash_span!(self, ii.span);\n         hash_attrs!(self, &ii.attrs);\n@@ -842,4 +904,10 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n         indices.sort_by_key(|index| get_key(&items[*index]));\n         indices\n     }\n+\n+    fn maybe_enable_overflow_checks(&mut self, item_attrs: &[ast::Attribute]) {\n+        if attr::contains_name(item_attrs, \"rustc_inherit_overflow_checks\") {\n+            self.overflow_checks_enabled = true;\n+        }\n+    }\n }"}, {"sha": "f5f4c0042b4328cd1363b03be64e46208ebee180", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/e3025a07338eca4092f96c16011caccee149c8d4/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3025a07338eca4092f96c16011caccee149c8d4/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=e3025a07338eca4092f96c16011caccee149c8d4", "patch": "@@ -0,0 +1,173 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for exprs that can panic at runtime (e.g. because of bounds checking). For\n+// these expressions an error message containing their source location is\n+// generated, so their hash must always depend on their location in the source\n+// code, not just when debuginfo is enabled.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -C debug-assertions\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Indexing expression ---------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+\n+\n+// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n+\n+// bitwise ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+\n+// logical ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}"}]}