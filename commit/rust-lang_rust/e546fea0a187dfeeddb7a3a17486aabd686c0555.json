{"sha": "e546fea0a187dfeeddb7a3a17486aabd686c0555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDZmZWEwYTE4N2RmZWVkZGI3YTNhMTc0ODZhYWJkNjg2YzA1NTU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-30T17:49:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T07:54:38Z"}, "message": "Don't duplicate logic of when an Instance requests to be inlined.", "tree": {"sha": "8e0ac085da9b176323778702ee23b7e27e2217c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0ac085da9b176323778702ee23b7e27e2217c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e546fea0a187dfeeddb7a3a17486aabd686c0555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e546fea0a187dfeeddb7a3a17486aabd686c0555", "html_url": "https://github.com/rust-lang/rust/commit/e546fea0a187dfeeddb7a3a17486aabd686c0555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e546fea0a187dfeeddb7a3a17486aabd686c0555/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a8d23b971fb11c19ace8bf821c2c25a10f052a", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a8d23b971fb11c19ace8bf821c2c25a10f052a", "html_url": "https://github.com/rust-lang/rust/commit/48a8d23b971fb11c19ace8bf821c2c25a10f052a"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "47968afd70d97112675ff0380155c434cef7e5e5", "filename": "src/librustc_trans_utils/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e546fea0a187dfeeddb7a3a17486aabd686c0555/src%2Flibrustc_trans_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e546fea0a187dfeeddb7a3a17486aabd686c0555/src%2Flibrustc_trans_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcommon.rs?ref=e546fea0a187dfeeddb7a3a17486aabd686c0555", "patch": "@@ -51,7 +51,8 @@ pub fn requests_inline<'a, 'tcx>(\n         // available to normal end-users.\n         return true\n     }\n-    attr::requests_inline(&instance.def.attrs(tcx)[..])\n+    attr::requests_inline(&instance.def.attrs(tcx)[..]) ||\n+        tcx.is_const_fn(instance.def.def_id())\n }\n \n pub fn is_inline_instance<'a, 'tcx>("}, {"sha": "d6f8707b8747a834caf890745b038ae58f96dbba", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e546fea0a187dfeeddb7a3a17486aabd686c0555/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e546fea0a187dfeeddb7a3a17486aabd686c0555/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=e546fea0a187dfeeddb7a3a17486aabd686c0555", "patch": "@@ -40,14 +40,12 @@ extern crate rustc_data_structures;\n extern crate syntax;\n extern crate syntax_pos;\n \n-use rustc::ty::TyCtxt;\n+use rustc::ty::{TyCtxt, Instance};\n use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n use rustc::util::nodemap::NodeSet;\n \n-use syntax::attr;\n-\n pub mod common;\n pub mod link;\n pub mod collector;\n@@ -77,7 +75,7 @@ pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n+pub fn find_exported_symbols<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n     tcx.reachable_set(LOCAL_CRATE).0.iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n@@ -110,8 +108,7 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n                 (generics.parent_types == 0 && generics.types.is_empty()) &&\n                 // Functions marked with #[inline] are only ever translated\n                 // with \"internal\" linkage and are never exported.\n-                !attr::requests_inline(&tcx.get_attrs(def_id)) &&\n-                !tcx.is_const_fn(def_id)\n+                !common::requests_inline(tcx, &Instance::mono(tcx, def_id))\n             }\n \n             _ => false"}]}