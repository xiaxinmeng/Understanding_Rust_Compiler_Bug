{"sha": "adda0cd6852b9b00b0a9cbba94ece28da6a44126", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGEwY2Q2ODUyYjliMDBiMGE5Y2JiYTk0ZWNlMjhkYTZhNDQxMjY=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-09-11T03:41:02Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-09-28T05:34:47Z"}, "message": "Add tests for updated closure/generator printing\n\nCo-authored-by: Dhruv Jauhar <dhruvjhr@gmail.com>\nCo-authored-by: Logan Mosier <logmosier@gmail.com>", "tree": {"sha": "aaf492cbc1da5b0f82bd9d501c971ef2691aa8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf492cbc1da5b0f82bd9d501c971ef2691aa8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adda0cd6852b9b00b0a9cbba94ece28da6a44126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adda0cd6852b9b00b0a9cbba94ece28da6a44126", "html_url": "https://github.com/rust-lang/rust/commit/adda0cd6852b9b00b0a9cbba94ece28da6a44126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adda0cd6852b9b00b0a9cbba94ece28da6a44126/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c923da0b498b948de4b9419f9720922cde0613a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c923da0b498b948de4b9419f9720922cde0613a2", "html_url": "https://github.com/rust-lang/rust/commit/c923da0b498b948de4b9419f9720922cde0613a2"}], "stats": {"total": 409, "additions": 409, "deletions": 0}, "files": [{"sha": "504b4adbeb9bc1e579c47a5ff73b0c37b0a16ce0", "filename": "src/test/ui/closures/print/closure-print-generic-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,23 @@\n+fn to_fn_once<F: FnOnce()>(f: F) -> F {\n+    f\n+}\n+\n+fn f<T: std::fmt::Display>(y: T) {\n+    struct Foo<U: std::fmt::Display> {\n+        x: U,\n+    };\n+\n+    let foo = Foo { x: \"x\" };\n+\n+    let c = to_fn_once(move || {\n+        println!(\"{} {}\", foo.x, y);\n+    });\n+\n+    c();\n+    c();\n+    //~^ ERROR use of moved value\n+}\n+\n+fn main() {\n+    f(\"S\");\n+}"}, {"sha": "43a12f675f562578e88b085cd2d62cf8a7108bbd", "filename": "src/test/ui/closures/print/closure-print-generic-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-print-generic-1.rs:17:5\n+   |\n+LL |     let c = to_fn_once(move || {\n+   |         - move occurs because `c` has type `[closure@$DIR/closure-print-generic-1.rs:12:24: 14:6]`, which does not implement the `Copy` trait\n+...\n+LL |     c();\n+   |     --- `c` moved due to this call\n+LL |     c();\n+   |     ^ value used here after move\n+   |\n+note: this value implements `FnOnce`, which causes it to be moved when called\n+  --> $DIR/closure-print-generic-1.rs:16:5\n+   |\n+LL |     c();\n+   |     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "3f77fd26b1772ca4e1265f6ab6c4209ece935efe", "filename": "src/test/ui/closures/print/closure-print-generic-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,13 @@\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T) {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1: () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "f7cfbd251b7c28831d6a87046eafe73c08c79a7f", "filename": "src/test/ui/closures/print/closure-print-generic-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-2.rs:6:22\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1: () = c;\n+   |                 --   ^ expected `()`, found closure\n+   |                 |\n+   |                 expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/closure-print-generic-2.rs:5:17: 5:43]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1: () = c();\n+   |                       ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "07bf8fe4c0076c3bb229cba2db4394a9bf7ebf81", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Ztrim-diagnostic-paths=off -Zverbose\n+\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T)\n+    {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1 : () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "7fd929221d026d54d2d30f6931cdf7dc121dd970", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-trim-off-verbose-2.rs:9:23\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1 : () = c;\n+   |                  --   ^ expected `()`, found closure\n+   |                  |\n+   |                  expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable)]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1 : () = c();\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "67d37f1c59b40d36f2ca087aed5a1112c3df9835", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zverbose\n+\n+fn to_fn_once<F:FnOnce()>(f: F) -> F { f }\n+\n+fn f<T: std::fmt::Display>(y: T) {\n+    struct Foo<U: std::fmt::Display> {\n+        x: U\n+    };\n+\n+    let foo =  Foo{ x: \"x\" };\n+\n+    let c = to_fn_once(move|| {\n+        println!(\"{} {}\", foo.x, y);\n+    });\n+\n+    c();\n+    c();\n+    //~^ ERROR use of moved value\n+}\n+\n+\n+fn main() {\n+    f(\"S\");\n+}"}, {"sha": "fdaf353fe3d22c76c09ea787d6d25ed12e9ab3af", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-print-generic-verbose-1.rs:17:5\n+   |\n+LL |     let c = to_fn_once(move|| {\n+   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'_#10r str>, T)]`, which does not implement the `Copy` trait\n+...\n+LL |     c();\n+   |     --- `c` moved due to this call\n+LL |     c();\n+   |     ^ value used here after move\n+   |\n+note: this value implements `FnOnce`, which causes it to be moved when called\n+  --> $DIR/closure-print-generic-verbose-1.rs:16:5\n+   |\n+LL |     c();\n+   |     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f460fedffb7fb53b137f5ad32a16609f8c07d978", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Zverbose\n+\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T)\n+    {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1 : () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "680f6ff6792194e8eb7b9e8dfe867c1fe0b22a14", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-verbose-2.rs:9:23\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1 : () = c;\n+   |                  --   ^ expected `()`, found closure\n+   |                  |\n+   |                  expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable)]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1 : () = c();\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b0438a91ed2e98f90ea784ad56c51bcef7b9e18", "filename": "src/test/ui/closures/print/closure-print-verbose.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zverbose\n+\n+// Same as closure-coerce-fn-1.rs\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let mut a = 0u8;\n+    let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9e07137a24195861e1086493f1f5e3855bc0004a", "filename": "src/test/ui/closures/print/closure-print-verbose.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-verbose.rs:10:29\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |              ------------   ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn(u8) -> u8`\n+                 found closure `[main::{closure#0} closure_substs=(unavailable)]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fe0687722b0b97d88e45de0cabe5ad528ceab797", "filename": "src/test/ui/generator/print/generator-print-verbose-1.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,60 @@\n+// compile-flags: -Zverbose\n+\n+// Same as: src/test/ui/generator/issue-68112.stderr\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    cell::RefCell,\n+    sync::Arc,\n+    pin::Pin,\n+    ops::{Generator, GeneratorState},\n+};\n+\n+pub struct Ready<T>(Option<T>);\n+impl<T> Generator<()> for Ready<T> {\n+    type Return = T;\n+    type Yield = ();\n+    fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {\n+        GeneratorState::Complete(self.0.take().unwrap())\n+    }\n+}\n+pub fn make_gen1<T>(t: T) -> Ready<T> {\n+    Ready(Some(t))\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen1(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test1() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR generator cannot be sent between threads\n+}\n+\n+pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+    || {\n+        yield;\n+        t\n+    }\n+}\n+fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen2(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test2() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator2();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "b5c63584c6c1487595e14f0133b771e59951d4b0", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,40 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:37:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:35:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:24 ~ generator_print_verbose_1[317d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:56:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:29 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d914719cb36bb7d40b072d14128a473ab130ade6", "filename": "src/test/ui/generator/print/generator-print-verbose-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zverbose\n+\n+// Same as test/ui/generator/not-send-sync.rs\n+#![feature(generators)]\n+\n+use std::cell::Cell;\n+\n+fn main() {\n+    fn assert_sync<T: Sync>(_: T) {}\n+    fn assert_send<T: Send>(_: T) {}\n+\n+    assert_sync(|| {\n+        //~^ ERROR: generator cannot be shared between threads safely\n+        let a = Cell::new(2);\n+        yield;\n+    });\n+\n+    let a = Cell::new(2);\n+    assert_send(|| {\n+        //~^ ERROR: E0277\n+        drop(&a);\n+        yield;\n+    });\n+}"}, {"sha": "cc45d5631cb012fd5795c95e2b43c4319a5bcc3c", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:19:5\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ---- required by this bound in `assert_send`\n+...\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `&'_#3r Cell<i32>`\n+   = note: required because it appears within the type `[main::{closure#1} upvar_tys=(&'_#3r Cell<i32>) _#16t]`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:12:5\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ---- required by this bound in `assert_sync`\n+...\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:15:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8689539ec8ebb7611923d94407d39752d0531bd8", "filename": "src/test/ui/generator/print/generator-print-verbose-3.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zverbose\n+\n+#![feature(generators, generator_trait)]\n+\n+fn main() {\n+    let x = \"Type mismatch test\";\n+    let generator :() = || {\n+    //~^ ERROR mismatched types\n+        yield 1i32;\n+        return x\n+    };\n+}"}, {"sha": "0ce108dfd62065a1a2b1bc2e9d7ba123307c2958", "filename": "src/test/ui/generator/print/generator-print-verbose-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adda0cd6852b9b00b0a9cbba94ece28da6a44126/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr?ref=adda0cd6852b9b00b0a9cbba94ece28da6a44126", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generator-print-verbose-3.rs:7:25\n+   |\n+LL |       let generator :() = || {\n+   |  ____________________--___^\n+   | |                    |\n+   | |                    expected due to this\n+LL | |\n+LL | |         yield 1i32;\n+LL | |         return x\n+LL | |     };\n+   | |_____^ expected `()`, found generator\n+   |\n+   = note: expected unit type `()`\n+              found generator `[main::{closure#0} upvar_tys=(unavailable) _#5t]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}