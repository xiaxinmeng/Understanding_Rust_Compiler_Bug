{"sha": "a73d6203236fb251a9d530a5903999d204c0d449", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3M2Q2MjAzMjM2ZmIyNTFhOWQ1MzBhNTkwMzk5OWQyMDRjMGQ0NDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-14T22:17:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:58:11Z"}, "message": "Nit: reset more state after `take_and_reset_data`", "tree": {"sha": "21ad6809bfa41d4c61bcb7c3ab88a5806fa9ffc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ad6809bfa41d4c61bcb7c3ab88a5806fa9ffc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a73d6203236fb251a9d530a5903999d204c0d449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a73d6203236fb251a9d530a5903999d204c0d449", "html_url": "https://github.com/rust-lang/rust/commit/a73d6203236fb251a9d530a5903999d204c0d449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a73d6203236fb251a9d530a5903999d204c0d449/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c84c6625d5e9374aa4f8a60b67c3c4a6f233b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c84c6625d5e9374aa4f8a60b67c3c4a6f233b6", "html_url": "https://github.com/rust-lang/rust/commit/11c84c6625d5e9374aa4f8a60b67c3c4a6f233b6"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "096037ebe880cae5a08fd106b71b372d278befd6", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a73d6203236fb251a9d530a5903999d204c0d449/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73d6203236fb251a9d530a5903999d204c0d449/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=a73d6203236fb251a9d530a5903999d204c0d449", "patch": "@@ -296,12 +296,54 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         (self.var_origins, self.data)\n     }\n \n-    /// Takes (and clears) the current set of constraints. Note that the set of\n-    /// variables remains intact.\n+    /// Takes (and clears) the current set of constraints. Note that\n+    /// the set of variables remains intact, but all relationships\n+    /// between them are reset.  This is used during NLL checking to\n+    /// grab the set of constraints that arose from a particular\n+    /// operation.\n+    ///\n+    /// We don't want to leak relationships between variables between\n+    /// points because just because (say) `r1 == r2` was true at some\n+    /// point P in the graph doesn't imply that it will be true at\n+    /// some other point Q, in NLL.\n     ///\n     /// Not legal during a snapshot.\n     pub fn take_and_reset_data(&mut self) -> RegionConstraintData<'tcx> {\n-        mem::replace(&mut self.data, RegionConstraintData::default())\n+        assert!(!self.in_snapshot());\n+\n+        // If you add a new field to `RegionConstraintCollector`, you\n+        // should think carefully about whether it needs to be cleared\n+        // or updated in some way.\n+        let RegionConstraintCollector {\n+            var_origins,\n+            data,\n+            lubs,\n+            glbs,\n+            skolemization_count,\n+            bound_count: _,\n+            undo_log: _,\n+            unification_table,\n+        } = self;\n+\n+        assert_eq!(*skolemization_count, 0);\n+\n+        // Clear the tables of (lubs, glbs), so that we will create\n+        // fresh regions if we do a LUB operation. As it happens,\n+        // LUB/GLB are not performed by the MIR type-checker, which is\n+        // the one that uses this method, but it's good to be correct.\n+        lubs.clear();\n+        glbs.clear();\n+\n+        // Clear all unifications and recreate the variables a \"now\n+        // un-unified\" state. Note that when we unify `a` and `b`, we\n+        // also insert `a <= b` and a `b <= a` edges, so the\n+        // `RegionConstraintData` contains the relationship here.\n+        *unification_table = UnificationTable::new();\n+        for vid in var_origins.indices() {\n+            unification_table.new_key(unify_key::RegionVidKey { min_vid: vid });\n+        }\n+\n+        mem::replace(data, RegionConstraintData::default())\n     }\n \n     fn in_snapshot(&self) -> bool {\n@@ -904,7 +946,11 @@ impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n impl<'tcx> RegionConstraintData<'tcx> {\n     /// True if this region constraint data contains no constraints.\n     pub fn is_empty(&self) -> bool {\n-        let RegionConstraintData { constraints, verifys, givens } = self;\n+        let RegionConstraintData {\n+            constraints,\n+            verifys,\n+            givens,\n+        } = self;\n         constraints.is_empty() && verifys.is_empty() && givens.is_empty()\n     }\n }"}]}