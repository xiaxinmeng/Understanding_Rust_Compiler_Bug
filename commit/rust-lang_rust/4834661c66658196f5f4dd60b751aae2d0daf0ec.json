{"sha": "4834661c66658196f5f4dd60b751aae2d0daf0ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzQ2NjFjNjY2NTgxOTZmNWY0ZGQ2MGI3NTFhYWUyZDBkYWYwZWM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-18T17:54:43Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-27T05:20:39Z"}, "message": "std and rustc: Convert users of c_str to use .with_c_str", "tree": {"sha": "e7777c49d85270b1d92de33a92e8923501fd70a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7777c49d85270b1d92de33a92e8923501fd70a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4834661c66658196f5f4dd60b751aae2d0daf0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4834661c66658196f5f4dd60b751aae2d0daf0ec", "html_url": "https://github.com/rust-lang/rust/commit/4834661c66658196f5f4dd60b751aae2d0daf0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4834661c66658196f5f4dd60b751aae2d0daf0ec/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a94158ce64524b7e21e6c8ec23a6b762d45926fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a94158ce64524b7e21e6c8ec23a6b762d45926fb", "html_url": "https://github.com/rust-lang/rust/commit/a94158ce64524b7e21e6c8ec23a6b762d45926fb"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "bb793dd215518d4beb23559619e9b70587e30a89", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -524,13 +524,13 @@ pub fn set_always_inline(f: ValueRef) {\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    do \"fixed-stack-segment\".to_c_str().with_ref |buf| {\n+    do \"fixed-stack-segment\".with_c_str |buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     }\n }\n \n pub fn set_no_split_stack(f: ValueRef) {\n-    do \"no-split-stack\".to_c_str().with_ref |buf| {\n+    do \"no-split-stack\".with_c_str |buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     }\n }"}, {"sha": "c36d427a06cae1a5789fffe58dd38760e7b4de31", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -781,7 +781,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n                 let ident = special_idents::type_self;\n \n-                let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n+                let param_metadata = do token::ident_to_str(&ident).with_c_str |name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),\n@@ -819,7 +819,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             // Again, only create type information if extra_debuginfo is enabled\n             if cx.sess.opts.extra_debuginfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::dummy_sp());\n-                let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n+                let param_metadata = do token::ident_to_str(&ident).with_c_str |name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),"}, {"sha": "f28f5449e0046508a0cbd586c187e74bf90db6f8", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -465,7 +465,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n         //     }\n \n         let the_block =\n-            \"the block\".to_c_str().with_ref(\n+            \"the block\".with_c_str(\n                 |s| llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llwrapfn, s));\n \n         let builder = ccx.builder.B;\n@@ -519,7 +519,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n \n                 None => {\n                     let slot = {\n-                        \"return_alloca\".to_c_str().with_ref(\n+                        \"return_alloca\".with_c_str(\n                             |s| llvm::LLVMBuildAlloca(builder,\n                                                       llrust_ret_ty.to_ref(),\n                                                       s))"}, {"sha": "94d37f67ba1ce177a85703ed8ac289f02b18083b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -209,7 +209,7 @@ fn iter_crate_map_follow_children() {\n         let child_crate1 = CrateMapT2 {\n             version: 1,\n             entries: vec::raw::to_ptr([\n-                ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 1},\n+                ModEntry { name: \"t::f1\".with_c_str(|buf| buf), log_level: &mut 1},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}\n             ]),\n             children: [&child_crate2 as *CrateMap, ptr::null()]\n@@ -219,7 +219,7 @@ fn iter_crate_map_follow_children() {\n         let root_crate = CrateMapT2 {\n             version: 1,\n             entries: vec::raw::to_ptr([\n-                ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 0},\n+                ModEntry { name: \"t::f1\".with_c_str(|buf| buf), log_level: &mut 0},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}\n             ]),\n             children: [child_crate1_ptr, ptr::null()]"}, {"sha": "abbcd27e8cafbad96c61c0dc0d51ee90dc851976", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -294,7 +294,7 @@ fn update_entry_match_full_path() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate1::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate1::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 2);\n@@ -310,7 +310,7 @@ fn update_entry_no_match() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate3::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate3::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == DEFAULT_LOG_LEVEL);\n@@ -326,7 +326,7 @@ fn update_entry_match_beginning() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 3);\n@@ -343,7 +343,7 @@ fn update_entry_match_beginning_longest_match() {\n                  LogDirective {name: Some(~\"crate2::mod\"), level: 4}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod1\".with_c_str |ptr| {\n             let entry = &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 4);\n@@ -360,13 +360,13 @@ fn update_entry_match_default() {\n                 ];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate1::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate1::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 2);\n             assert!(m == 1);\n         }\n-        do \"crate2::mod2\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod2\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 3);"}, {"sha": "fcd8800fadd949656e5a9d186685d659ce0c4213", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4834661c66658196f5f4dd60b751aae2d0daf0ec/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=4834661c66658196f5f4dd60b751aae2d0daf0ec", "patch": "@@ -43,7 +43,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n                           self.native_handle(), p, flags, mode, complete_cb_ptr)\n             })\n@@ -57,7 +57,7 @@ impl FsRequest {\n             me.req_boilerplate(None)\n         };\n         let result = path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n                     self.native_handle(), p, flags, mode, complete_cb_ptr)\n             })\n@@ -71,7 +71,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -85,7 +85,7 @@ impl FsRequest {\n             me.req_boilerplate(None)\n         };\n         let result = path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -99,7 +99,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_stat(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -192,7 +192,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_mkdir(loop_.native_handle(),\n                           self.native_handle(), p, mode, complete_cb_ptr)\n             })\n@@ -205,7 +205,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_rmdir(loop_.native_handle(),\n                           self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -219,7 +219,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_readdir(loop_.native_handle(),\n                           self.native_handle(), p, flags, complete_cb_ptr)\n             })"}]}