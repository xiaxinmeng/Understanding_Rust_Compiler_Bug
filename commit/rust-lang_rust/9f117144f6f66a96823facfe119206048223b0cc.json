{"sha": "9f117144f6f66a96823facfe119206048223b0cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTE3MTQ0ZjZmNjZhOTY4MjNmYWNmZTExOTIwNjA0ODIyM2IwY2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-22T15:45:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-22T15:45:36Z"}, "message": "pacify the mercilous tidy", "tree": {"sha": "d0d3ea3df5630ab77a70ac6d0474e4be4e1220eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d3ea3df5630ab77a70ac6d0474e4be4e1220eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f117144f6f66a96823facfe119206048223b0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f117144f6f66a96823facfe119206048223b0cc", "html_url": "https://github.com/rust-lang/rust/commit/9f117144f6f66a96823facfe119206048223b0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f117144f6f66a96823facfe119206048223b0cc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c4eb456606fcbb28515a0eeabb850bc01f4a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c4eb456606fcbb28515a0eeabb850bc01f4a94", "html_url": "https://github.com/rust-lang/rust/commit/60c4eb456606fcbb28515a0eeabb850bc01f4a94"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "f55a4c0a2a6b78f55471514ad1760f03a1a08b39", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f117144f6f66a96823facfe119206048223b0cc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f117144f6f66a96823facfe119206048223b0cc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9f117144f6f66a96823facfe119206048223b0cc", "patch": "@@ -1660,7 +1660,13 @@ impl<'a> Resolver<'a> {\n             PathResult::Module(module) => *def = module.def().unwrap(),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n                 *def = path_res.base_def(),\n-            PathResult::NonModule(..) => match self.resolve_path(&path, None, true, span, CrateLint::No) {\n+            PathResult::NonModule(..) => match self.resolve_path(\n+                &path,\n+                None,\n+                true,\n+                span,\n+                CrateLint::No,\n+            ) {\n                 PathResult::Failed(span, msg, _) => {\n                     error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n                 }\n@@ -3175,7 +3181,13 @@ impl<'a> Resolver<'a> {\n             ));\n         }\n \n-        let result = match self.resolve_path(&path, Some(ns), true, span, CrateLint::SimplePath(id)) {\n+        let result = match self.resolve_path(\n+            &path,\n+            Some(ns),\n+            true,\n+            span,\n+            CrateLint::SimplePath(id),\n+        ) {\n             PathResult::NonModule(path_res) => path_res,\n             PathResult::Module(module) if !module.is_normal() => {\n                 PathResolution::new(module.def().unwrap())\n@@ -3212,7 +3224,13 @@ impl<'a> Resolver<'a> {\n            path[0].name != keywords::CrateRoot.name() &&\n            path[0].name != keywords::DollarCrate.name() {\n             let unqualified_result = {\n-                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span, CrateLint::No) {\n+                match self.resolve_path(\n+                    &[*path.last().unwrap()],\n+                    Some(ns),\n+                    false,\n+                    span,\n+                    CrateLint::No,\n+                ) {\n                     PathResult::NonModule(path_res) => path_res.base_def(),\n                     PathResult::Module(module) => module.def().unwrap(),\n                     _ => return Some(result),"}, {"sha": "2263401e6dc1d19df29879f4f6546fa4bd24625b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f117144f6f66a96823facfe119206048223b0cc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f117144f6f66a96823facfe119206048223b0cc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9f117144f6f66a96823facfe119206048223b0cc", "patch": "@@ -60,7 +60,7 @@ pub struct ImportDirective<'a> {\n     /// In the case where the `ImportDirective` was expanded from a \"nested\" use tree,\n     /// this id is the id of the leaf tree. For example:\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore (pacify the mercilous tidy)\n     /// use foo::bar::{a, b}\n     /// ```\n     ///\n@@ -737,7 +737,13 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n         }\n \n-        let module_result = self.resolve_path(&module_path, None, true, span, directive.crate_lint());\n+        let module_result = self.resolve_path(\n+            &module_path,\n+            None,\n+            true,\n+            span,\n+            directive.crate_lint(),\n+        );\n         let module = match module_result {\n             PathResult::Module(module) => module,\n             PathResult::Failed(span, msg, false) => {"}]}