{"sha": "0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTA1YzBlNzdhMzVjYmI2NTEzYjRiYmFhNGQ4YTJkNGZkNDAwOWU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:18Z"}, "message": "Rollup merge of #88560 - klensy:formatter-pad-shrink, r=m-ou-se\n\n`fmt::Formatter::pad`: don't call chars().count() more than one time\n\nFirst commit merges two branches of match to call chars().count() only once: that should be faster if this method hits place of 3rd (previous) branch, plus quarter shorter.\nSecond commit fixes some clippy lints while i'm here (should it be separate PR?).", "tree": {"sha": "348f0156f0e5009af1e61924ecfb5014df6ac5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348f0156f0e5009af1e61924ecfb5014df6ac5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV6CRBK7hj4Ov3rIwAAicoIAK0+9X43UmKatf71l+F8lqad\nnidF4HNFgpxvqo8ie41kpH7FhsmpGMQRFlCO7nqxUtmDCOWRFaBmt6YMFRSmteZ6\nKh4w5emTVRYhxUCZQrYqp8rV5o1hE/xAC0XQWh6RgHqZmpO+WPWF7SxV0SMj8rBx\novYrvTxQZpwHtNStmH36Te/uwkc6sqoEd65G4uwcyPYBlP5VA5pSuHnvUSGNKtmg\nFvsrmyxGwwbOSiYP9YRIUJJNsDFXqE9HWLGRE+sY0JAKdasv7y3mlZ4uRIUgQ2H9\n03jrD72hlz0OqHF5Wena5L+1X5CuwwfPdA0zSTh+Ciujd36eti2uINkI6PE5i+A=\n=coNv\n-----END PGP SIGNATURE-----\n", "payload": "tree 348f0156f0e5009af1e61924ecfb5014df6ac5ed\nparent ffbce26e24cb1cf955f07cee0d0e1c59d1692edb\nparent f5f489b945f2fe67474a1a49c5b19cffebc2e7bb\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602618 +0200\ncommitter GitHub <noreply@github.com> 1630602618 +0200\n\nRollup merge of #88560 - klensy:formatter-pad-shrink, r=m-ou-se\n\n`fmt::Formatter::pad`: don't call chars().count() more than one time\n\nFirst commit merges two branches of match to call chars().count() only once: that should be faster if this method hits place of 3rd (previous) branch, plus quarter shorter.\nSecond commit fixes some clippy lints while i'm here (should it be separate PR?).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "html_url": "https://github.com/rust-lang/rust/commit/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "html_url": "https://github.com/rust-lang/rust/commit/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb"}, {"sha": "f5f489b945f2fe67474a1a49c5b19cffebc2e7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f489b945f2fe67474a1a49c5b19cffebc2e7bb", "html_url": "https://github.com/rust-lang/rust/commit/f5f489b945f2fe67474a1a49c5b19cffebc2e7bb"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "aff789f2afa1486b1b25816b2d15ccb6c5510493", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "patch": "@@ -402,7 +402,7 @@ impl<'a> Arguments<'a> {\n \n         if self.args.is_empty() {\n             pieces_length\n-        } else if self.pieces[0] == \"\" && pieces_length < 16 {\n+        } else if !self.pieces.is_empty() && self.pieces[0].is_empty() && pieces_length < 16 {\n             // If the format string starts with an argument,\n             // don't preallocate anything, unless length\n             // of pieces is significant.\n@@ -1163,7 +1163,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n                 }\n                 // SAFETY: arg and args.args come from the same Arguments,\n                 // which guarantees the indexes are always within bounds.\n-                unsafe { run(&mut formatter, arg, &args.args) }?;\n+                unsafe { run(&mut formatter, arg, args.args) }?;\n                 idx += 1;\n             }\n         }\n@@ -1409,7 +1409,7 @@ impl<'a> Formatter<'a> {\n                 // we know that it can't panic. Use `get` + `unwrap_or` to avoid\n                 // `unsafe` and otherwise don't emit any panic-related code\n                 // here.\n-                s.get(..i).unwrap_or(&s)\n+                s.get(..i).unwrap_or(s)\n             } else {\n                 &s\n             }\n@@ -1421,16 +1421,21 @@ impl<'a> Formatter<'a> {\n             // If we're under the maximum length, and there's no minimum length\n             // requirements, then we can just emit the string\n             None => self.buf.write_str(s),\n-            // If we're under the maximum width, check if we're over the minimum\n-            // width, if so it's as easy as just emitting the string.\n-            Some(width) if s.chars().count() >= width => self.buf.write_str(s),\n-            // If we're under both the maximum and the minimum width, then fill\n-            // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n-                let align = rt::v1::Alignment::Left;\n-                let post_padding = self.padding(width - s.chars().count(), align)?;\n-                self.buf.write_str(s)?;\n-                post_padding.write(self.buf)\n+                let chars_count = s.chars().count();\n+                // If we're under the maximum width, check if we're over the minimum\n+                // width, if so it's as easy as just emitting the string.\n+                if chars_count >= width {\n+                    self.buf.write_str(s)\n+                }\n+                // If we're under both the maximum and the minimum width, then fill\n+                // up the minimum width with the specified string + some alignment.\n+                else {\n+                    let align = rt::v1::Alignment::Left;\n+                    let post_padding = self.padding(width - chars_count, align)?;\n+                    self.buf.write_str(s)?;\n+                    post_padding.write(self.buf)\n+                }\n             }\n         }\n     }"}]}