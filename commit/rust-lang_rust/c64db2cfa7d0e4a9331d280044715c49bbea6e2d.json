{"sha": "c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "node_id": "C_kwDOAAsO6NoAKGM2NGRiMmNmYTdkMGU0YTkzMzFkMjgwMDQ0NzE1YzQ5YmJlYTZlMmQ", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-30T07:54:40Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-30T07:54:40Z"}, "message": "use `build_helper::util::try_run` in rustdoc-gui-test\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "6b92c7c70540836c6b636a9cbcff42604bbf4466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b92c7c70540836c6b636a9cbcff42604bbf4466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "html_url": "https://github.com/rust-lang/rust/commit/c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2803c66006b37a12c16e15cdb9873565f4c585d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2803c66006b37a12c16e15cdb9873565f4c585d2", "html_url": "https://github.com/rust-lang/rust/commit/2803c66006b37a12c16e15cdb9873565f4c585d2"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "71e4f803477bb84c6f9ccc8392f84c24d87e0afc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "patch": "@@ -4383,6 +4383,7 @@ dependencies = [\n name = \"rustdoc-gui-test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"build_helper\",\n  \"compiletest\",\n  \"getopts\",\n  \"walkdir\","}, {"sha": "4cb200ebc7c5f1928287648adfb0c662eaa30373", "filename": "src/tools/rustdoc-gui-test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml?ref=c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "patch": "@@ -4,6 +4,7 @@ version = \"0.1.0\"\n edition = \"2021\"\n \n [dependencies]\n+build_helper = { path = \"../build_helper\" }\n compiletest = { path = \"../compiletest\" }\n getopts = \"0.2\"\n walkdir = \"2\""}, {"sha": "3f60a90f87a22c154e6a077e59e8dd3334a67d1a", "filename": "src/tools/rustdoc-gui-test/src/main.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64db2cfa7d0e4a9331d280044715c49bbea6e2d/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs?ref=c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "patch": "@@ -1,3 +1,4 @@\n+use build_helper::util::try_run;\n use compiletest::header::TestProps;\n use config::Config;\n use std::path::{Path, PathBuf};\n@@ -60,23 +61,6 @@ fn find_librs<P: AsRef<Path>>(path: P) -> Option<PathBuf> {\n     None\n }\n \n-// FIXME: move `bootstrap::util::try_run` into `build_helper` crate\n-// and use that one instead of creating this function.\n-fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n-    let status = match cmd.status() {\n-        Ok(status) => status,\n-        Err(e) => panic!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e),\n-    };\n-    if !status.success() && print_cmd_on_fail {\n-        println!(\n-            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\\n\\n\",\n-            cmd, status\n-        );\n-    }\n-    status.success()\n-}\n-\n fn main() {\n     let config = Arc::new(Config::from_args(env::args().collect()));\n "}]}