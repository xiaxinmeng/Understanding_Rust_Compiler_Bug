{"sha": "e845e691c988303ea54cb9de9639a8577b5a9d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDVlNjkxYzk4ODMwM2VhNTRjYjlkZTk2MzlhODU3N2I1YTlkNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T22:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T22:03:20Z"}, "message": "Auto merge of #67829 - michaelwoerister:try-to-fix-pgo-branch-weights-test, r=Mark-Simulacrum\n\nAttempt to fix intermittent failures of pgo-branch-weights test.\n\nThis PR tries to fix the intermittent failures of the pgo-branch-weights test (https://github.com/rust-lang/rust/issues/67746). The failing instances show no `!prof` annotations in LLVM IR. One possible cause is that the instrumented binary did not record anything. This is something I've occasionally seen happen for similarly small programs when using GNU ld as linker. The linker would not properly append the instruction counter sections, leading to most counters being dropped. This PR makes the test use the Gold linker instead.\n\nIt also makes each command exit immediately on failure so we can pinpoint the failure source better, should there still be a problem.\n\nr? @Mark-Simulacrum", "tree": {"sha": "a7da310c2ebd20fff955193d1890595fb549f4f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7da310c2ebd20fff955193d1890595fb549f4f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e845e691c988303ea54cb9de9639a8577b5a9d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e845e691c988303ea54cb9de9639a8577b5a9d6b", "html_url": "https://github.com/rust-lang/rust/commit/e845e691c988303ea54cb9de9639a8577b5a9d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e845e691c988303ea54cb9de9639a8577b5a9d6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5840f9d252c2f5cc16698dbf385a29c5de3ca07", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5840f9d252c2f5cc16698dbf385a29c5de3ca07", "html_url": "https://github.com/rust-lang/rust/commit/c5840f9d252c2f5cc16698dbf385a29c5de3ca07"}, {"sha": "971aa2bd6218fb6c843db965f7da70586865171d", "url": "https://api.github.com/repos/rust-lang/rust/commits/971aa2bd6218fb6c843db965f7da70586865171d", "html_url": "https://github.com/rust-lang/rust/commit/971aa2bd6218fb6c843db965f7da70586865171d"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "c13297b3a61410fa1f1890ed385d0a8d72b99b04", "filename": "src/test/run-make-fulldeps/pgo-branch-weights/Makefile", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e845e691c988303ea54cb9de9639a8577b5a9d6b/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e845e691c988303ea54cb9de9639a8577b5a9d6b/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile?ref=e845e691c988303ea54cb9de9639a8577b5a9d6b", "patch": "@@ -15,21 +15,29 @@ ifdef IS_MSVC\n COMMON_FLAGS=-Cpanic=abort\n endif\n \n+# For some very small programs GNU ld seems to not properly handle\n+# instrumentation sections correctly. Neither Gold nor LLD have that problem.\n+ifeq ($(UNAME),Linux)\n+ifneq (,$(findstring x86,$(TARGET)))\n+COMMON_FLAGS=-Clink-args=-fuse-ld=gold\n+endif\n+endif\n+\n+\n all:\n \t# We don't compile `opaque` with either optimizations or instrumentation.\n-\t# We don't compile `opaque` with either optimizations or instrumentation.\n-\t$(RUSTC) $(COMMON_FLAGS) opaque.rs\n+\t$(RUSTC) $(COMMON_FLAGS) opaque.rs || exit 1\n \t# Compile the test program with instrumentation\n-\tmkdir -p \"$(TMPDIR)\"/prof_data_dir\n+\tmkdir -p \"$(TMPDIR)/prof_data_dir\" || exit 1\n \t$(RUSTC) $(COMMON_FLAGS) interesting.rs \\\n-\t\t-Cprofile-generate=\"$(TMPDIR)\"/prof_data_dir -O -Ccodegen-units=1\n-\t$(RUSTC) $(COMMON_FLAGS) main.rs -Cprofile-generate=\"$(TMPDIR)\"/prof_data_dir -O\n+\t\t-Cprofile-generate=\"$(TMPDIR)/prof_data_dir\" -O -Ccodegen-units=1 || exit 1\n+\t$(RUSTC) $(COMMON_FLAGS) main.rs -Cprofile-generate=\"$(TMPDIR)/prof_data_dir\" -O || exit 1\n \t# The argument below generates to the expected branch weights\n \t$(call RUN,main aaaaaaaaaaaa2bbbbbbbbbbbb2bbbbbbbbbbbbbbbbcc) || exit 1\n-\t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n-\t\t-o \"$(TMPDIR)\"/prof_data_dir/merged.profdata \\\n-\t\t\"$(TMPDIR)\"/prof_data_dir\n+\t\"$(LLVM_BIN_DIR)/llvm-profdata\" merge \\\n+\t\t-o \"$(TMPDIR)/prof_data_dir/merged.profdata\" \\\n+\t\t\"$(TMPDIR)/prof_data_dir\" || exit 1\n \t$(RUSTC) $(COMMON_FLAGS) interesting.rs \\\n-\t\t-Cprofile-use=\"$(TMPDIR)\"/prof_data_dir/merged.profdata -O \\\n-\t\t-Ccodegen-units=1 --emit=llvm-ir\n-\tcat \"$(TMPDIR)\"/interesting.ll | \"$(LLVM_FILECHECK)\" filecheck-patterns.txt\n+\t\t-Cprofile-use=\"$(TMPDIR)/prof_data_dir/merged.profdata\" -O \\\n+\t\t-Ccodegen-units=1 --emit=llvm-ir || exit 1\n+\tcat \"$(TMPDIR)/interesting.ll\" | \"$(LLVM_FILECHECK)\" filecheck-patterns.txt"}]}