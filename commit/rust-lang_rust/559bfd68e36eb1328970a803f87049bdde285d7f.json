{"sha": "559bfd68e36eb1328970a803f87049bdde285d7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OWJmZDY4ZTM2ZWIxMzI4OTcwYTgwM2Y4NzA0OWJkZGUyODVkN2Y=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-17T13:25:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-17T13:25:24Z"}, "message": "Rollup merge of #35613 - matthew-piziak:array-docs-trait-justification, r=steveklabnik\n\nprovide additional justification for array interface design\n\nExplain why Rust does not implement traits for large arrays.\n\nExplain why most methods are implemented on slices rather than arrays.\n\nNote: I'm dipping my toes in the water with a tiny PR. Especially looking for feedback on wording and style. Points of concern: appropriate level of top-level explanation; foreshadowing (is it appropriate to imply that we expect Rust's type system to eventually support size-generic arrays?); using `Foo` and `Bar` as type variables instead of e.g. `T` and `S`.\n\n@peschkaj", "tree": {"sha": "a377a112c33262c8532f8972f752653aca642876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a377a112c33262c8532f8972f752653aca642876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/559bfd68e36eb1328970a803f87049bdde285d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/559bfd68e36eb1328970a803f87049bdde285d7f", "html_url": "https://github.com/rust-lang/rust/commit/559bfd68e36eb1328970a803f87049bdde285d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/559bfd68e36eb1328970a803f87049bdde285d7f/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "997a248c017db838093ddfb06654028721129bfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/997a248c017db838093ddfb06654028721129bfd", "html_url": "https://github.com/rust-lang/rust/commit/997a248c017db838093ddfb06654028721129bfd"}, {"sha": "e173ead68458da5c4cb241f3d105abc87c529071", "url": "https://api.github.com/repos/rust-lang/rust/commits/e173ead68458da5c4cb241f3d105abc87c529071", "html_url": "https://github.com/rust-lang/rust/commit/e173ead68458da5c4cb241f3d105abc87c529071"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "d31a593037622f7c6ad8692f94f9402b5413c2d6", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/559bfd68e36eb1328970a803f87049bdde285d7f/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559bfd68e36eb1328970a803f87049bdde285d7f/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=559bfd68e36eb1328970a803f87049bdde285d7f", "patch": "@@ -269,13 +269,18 @@ mod prim_pointer { }\n /// - `Borrow`, `BorrowMut`\n /// - `Default`\n ///\n+/// This limitation to `N in 0..33` exists because Rust does not yet support\n+/// generics over the size of an array type. `[Foo; 3]` and `[Bar; 3]` are\n+/// instances of same generic type `[T; 3]`, but `[Foo; 3]` and `[Foo; 5]` are\n+/// entirely different types. As a stopgap, trait implementations are\n+/// statically generated for `N in 0..33`.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so their methods can be called on\n-/// arrays.\n+/// arrays. Slices are dynamic and do not coerce to arrays; consequently more\n+/// methods are defined on `slice` where they support both types.\n ///\n /// [slice]: primitive.slice.html\n ///\n-/// Rust does not currently support generics over the size of an array type.\n-///\n /// # Examples\n ///\n /// ```"}]}