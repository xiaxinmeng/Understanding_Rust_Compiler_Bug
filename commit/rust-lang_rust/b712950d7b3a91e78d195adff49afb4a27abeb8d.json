{"sha": "b712950d7b3a91e78d195adff49afb4a27abeb8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTI5NTBkN2IzYTkxZTc4ZDE5NWFkZmY0OWFmYjRhMjdhYmViOGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-05T23:01:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T23:01:09Z"}, "message": "Rollup merge of #41015 - arielb1:new-block-stack, r=alexcrichton\n\nmark build::cfg::start_new_block as inline(never)\n\nLLVM has a bug - [PR32488](https://bugs.llvm.org//show_bug.cgi?id=32488) - where it fails to deduplicate allocas in some\ncircumstances. The function `start_new_block` has allocas totalling 1216\nbytes, and when LLVM inlines several copies of that function into\nthe recursive function `expr::into`, that function's stack space usage\ngoes into tens of kiBs, causing stack overflows.\n\nMark `start_new_block` as inline(never) to keep it from being inlined,\ngetting stack usage under control.\n\nFixes #40493.\nFixes #40573.\n\nr? @eddyb", "tree": {"sha": "02770b3b6645580c61106ef78c3b13e67159679c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02770b3b6645580c61106ef78c3b13e67159679c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b712950d7b3a91e78d195adff49afb4a27abeb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b712950d7b3a91e78d195adff49afb4a27abeb8d", "html_url": "https://github.com/rust-lang/rust/commit/b712950d7b3a91e78d195adff49afb4a27abeb8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b712950d7b3a91e78d195adff49afb4a27abeb8d/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "html_url": "https://github.com/rust-lang/rust/commit/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0"}, {"sha": "09ac56d6efd41c02cbb7f8714d59bdd43f663ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ac56d6efd41c02cbb7f8714d59bdd43f663ec8", "html_url": "https://github.com/rust-lang/rust/commit/09ac56d6efd41c02cbb7f8714d59bdd43f663ec8"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "c503b8c7fe06f7bb9c58ed0fce452203e35551e0", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b712950d7b3a91e78d195adff49afb4a27abeb8d/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b712950d7b3a91e78d195adff49afb4a27abeb8d/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=b712950d7b3a91e78d195adff49afb4a27abeb8d", "patch": "@@ -25,6 +25,9 @@ impl<'tcx> CFG<'tcx> {\n         &mut self.basic_blocks[blk]\n     }\n \n+    // llvm.org/PR32488 makes this function use an excess of stack space. Mark\n+    // it as #[inline(never)] to keep rustc's stack use in check.\n+    #[inline(never)]\n     pub fn start_new_block(&mut self) -> BasicBlock {\n         self.basic_blocks.push(BasicBlockData::new(None))\n     }"}]}