{"sha": "b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "node_id": "C_kwDOAAsO6NoAKGI0YmY1NmNkNjZjYTgzZTkwOGZkNDNiZGU0YzYyN2Y5NGIyYThhOWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T13:06:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T13:06:14Z"}, "message": "Auto merge of #94570 - shampoofactory:reopen-91719, r=workingjubilee\n\nReopen 91719\n\nReopened #91719, which was closed inadvertently due to technical difficulties.", "tree": {"sha": "387be8d230f4b8351e27102a8a488a0dcb1f892f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/387be8d230f4b8351e27102a8a488a0dcb1f892f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "html_url": "https://github.com/rust-lang/rust/commit/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "html_url": "https://github.com/rust-lang/rust/commit/047f9c4bc4e26df4f54c3c76af3e963782ed05e4"}, {"sha": "0c131861c9f270ff8409ebfa3ec5c40bffc41ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c131861c9f270ff8409ebfa3ec5c40bffc41ee5", "html_url": "https://github.com/rust-lang/rust/commit/0c131861c9f270ff8409ebfa3ec5c40bffc41ee5"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "7495449da4c4f78abee054894d03aadd3f7eee9e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "patch": "@@ -3226,12 +3226,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     _ => return,\n                 }\n \n-                // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.\n-                // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.\n-                let max_by_val_size = Pointer.size(self) * 2;\n                 let size = arg.layout.size;\n-\n-                if arg.layout.is_unsized() || size > max_by_val_size {\n+                if arg.layout.is_unsized() || size > Pointer.size(self) {\n                     arg.make_indirect();\n                 } else {\n                     // We want to pass small aggregates as immediates, but using"}, {"sha": "a69291d47821ae06742cdcaf714348db6ce10a73", "filename": "src/test/codegen/arg-return-value-in-reg.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047f9c4bc4e26df4f54c3c76af3e963782ed05e4/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs?ref=047f9c4bc4e26df4f54c3c76af3e963782ed05e4", "patch": "@@ -1,32 +0,0 @@\n-//! Check that types of up to 128 bits are passed and returned by-value instead of via pointer.\n-\n-// compile-flags: -C no-prepopulate-passes -O\n-// only-x86_64\n-\n-#![crate_type = \"lib\"]\n-\n-pub struct S {\n-    a: u64,\n-    b: u32,\n-    c: u32,\n-}\n-\n-// CHECK: define i128 @modify(i128{{( %0)?}})\n-#[no_mangle]\n-pub fn modify(s: S) -> S {\n-    S { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c }\n-}\n-\n-#[repr(packed)]\n-pub struct TooBig {\n-    a: u64,\n-    b: u32,\n-    c: u32,\n-    d: u8,\n-}\n-\n-// CHECK: define void @m_big(%TooBig* [[ATTRS:.*sret.*]], %TooBig* [[ATTRS2:.*]] %s)\n-#[no_mangle]\n-pub fn m_big(s: TooBig) -> TooBig {\n-    TooBig { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c, d: s.d + s.d }\n-}"}, {"sha": "8dce004b54a1b2d7d3b46044974efd03c0c4145f", "filename": "src/test/codegen/array-equality.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Farray-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Farray-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-equality.rs?ref=b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "patch": "@@ -5,20 +5,20 @@\n \n // CHECK-LABEL: @array_eq_value\n #[no_mangle]\n-pub fn array_eq_value(a: [u16; 6], b: [u16; 6]) -> bool {\n+pub fn array_eq_value(a: [u16; 3], b: [u16; 3]) -> bool {\n     // CHECK-NEXT: start:\n-    // CHECK-NEXT: %2 = icmp eq i96 %0, %1\n+    // CHECK-NEXT: %2 = icmp eq i48 %0, %1\n     // CHECK-NEXT: ret i1 %2\n     a == b\n }\n \n // CHECK-LABEL: @array_eq_ref\n #[no_mangle]\n-pub fn array_eq_ref(a: &[u16; 6], b: &[u16; 6]) -> bool {\n+pub fn array_eq_ref(a: &[u16; 3], b: &[u16; 3]) -> bool {\n     // CHECK: start:\n-    // CHECK: load i96, i96* %{{.+}}, align 2\n-    // CHECK: load i96, i96* %{{.+}}, align 2\n-    // CHECK: icmp eq i96\n+    // CHECK: load i48, i48* %{{.+}}, align 2\n+    // CHECK: load i48, i48* %{{.+}}, align 2\n+    // CHECK: icmp eq i48\n     // CHECK-NEXT: ret\n     a == b\n }\n@@ -47,11 +47,33 @@ pub fn array_eq_long(a: &[u16; 1234], b: &[u16; 1234]) -> bool {\n     a == b\n }\n \n-// CHECK-LABEL: @array_eq_zero(i128 %0)\n+// CHECK-LABEL: @array_eq_zero_short(i48\n #[no_mangle]\n-pub fn array_eq_zero(x: [u16; 8]) -> bool {\n+pub fn array_eq_zero_short(x: [u16; 3]) -> bool {\n     // CHECK-NEXT: start:\n-    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i128 %0, 0\n+    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i48 %0, 0\n+    // CHECK-NEXT: ret i1 %[[EQ]]\n+    x == [0; 3]\n+}\n+\n+// CHECK-LABEL: @array_eq_zero_mid([8 x i16]*\n+#[no_mangle]\n+pub fn array_eq_zero_mid(x: [u16; 8]) -> bool {\n+    // CHECK-NEXT: start:\n+    // CHECK-NEXT: bitcast\n+    // CHECK-NEXT: %[[LOAD:.+]] = load i128,\n+    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i128 %[[LOAD]], 0\n     // CHECK-NEXT: ret i1 %[[EQ]]\n     x == [0; 8]\n }\n+\n+// CHECK-LABEL: @array_eq_zero_long([1234 x i16]*\n+#[no_mangle]\n+pub fn array_eq_zero_long(x: [u16; 1234]) -> bool {\n+    // CHECK-NEXT: start:\n+    // CHECK-NOT: alloca\n+    // CHECK: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(\n+    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i32 %[[CMP]], 0\n+    // CHECK-NEXT: ret i1 %[[EQ]]\n+    x == [0; 1234]\n+}"}, {"sha": "6b09c8fc99860c8c5bd2ea30c325e3f91b5e5abe", "filename": "src/test/codegen/autovectorize-f32x4.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Fautovectorize-f32x4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Fautovectorize-f32x4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fautovectorize-f32x4.rs?ref=b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -C opt-level=3\n+// only-x86_64\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @auto_vectorize_direct\n+#[no_mangle]\n+pub fn auto_vectorize_direct(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n+// CHECK: load <4 x float>\n+// CHECK: load <4 x float>\n+// CHECK: fadd <4 x float>\n+// CHECK: store <4 x float>\n+    [\n+        a[0] + b[0],\n+        a[1] + b[1],\n+        a[2] + b[2],\n+        a[3] + b[3],\n+    ]\n+}\n+\n+// CHECK-LABEL: @auto_vectorize_loop\n+#[no_mangle]\n+pub fn auto_vectorize_loop(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n+// CHECK: load <4 x float>\n+// CHECK: load <4 x float>\n+// CHECK: fadd <4 x float>\n+// CHECK: store <4 x float>\n+    let mut c = [0.0; 4];\n+    for i in 0..4 {\n+        c[i] = a[i] + b[i];\n+    }\n+    c\n+}"}, {"sha": "01f917b291094dcbdff7f00235b9327d4dfee06e", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "patch": "@@ -63,16 +63,11 @@ pub union UnionU128{a:u128}\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n-pub union UnionU128x2{a:(u128, u128)}\n-// CHECK: define void @test_UnionU128x2(i128 %_1.0, i128 %_1.1)\n-#[no_mangle]\n-pub fn test_UnionU128x2(_: UnionU128x2) { loop {} }\n-\n #[repr(C)]\n-pub union CUnionU128x2{a:(u128, u128)}\n-// CHECK: define void @test_CUnionU128x2(%CUnionU128x2* {{.*}} %_1)\n+pub union CUnionU128{a:u128}\n+// CHECK: define void @test_CUnionU128(%CUnionU128* {{.*}} %_1)\n #[no_mangle]\n-pub fn test_CUnionU128x2(_: CUnionU128x2) { loop {} }\n+pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n pub union UnionBool { b:bool }\n // CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)"}]}