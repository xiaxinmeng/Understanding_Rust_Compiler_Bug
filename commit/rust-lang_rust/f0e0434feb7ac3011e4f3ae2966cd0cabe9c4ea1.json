{"sha": "f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "node_id": "C_kwDOAAsO6NoAKGYwZTA0MzRmZWI3YWMzMDExZTRmM2FlMjk2NmNkMGNhYmU5YzRlYTE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-30T14:31:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-01T15:02:35Z"}, "message": "resolve: Merge `last_import_segment` into `Finalize`", "tree": {"sha": "e151b7e154f787e985174b9213c924fa2e90a8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e151b7e154f787e985174b9213c924fa2e90a8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "html_url": "https://github.com/rust-lang/rust/commit/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffedcec4e8c9de11b8195074f59d014511bcb422", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffedcec4e8c9de11b8195074f59d014511bcb422", "html_url": "https://github.com/rust-lang/rust/commit/ffedcec4e8c9de11b8195074f59d014511bcb422"}], "stats": {"total": 60, "additions": 16, "deletions": 44}, "files": [{"sha": "8cb5d815f0d2c24e59780e4358d25248ca9ac38e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "patch": "@@ -1500,7 +1500,6 @@ impl<'a> Resolver<'a> {\n                 &parent_scope,\n                 None,\n                 false,\n-                false,\n                 None,\n             ) {\n                 let desc = match binding.res() {\n@@ -1860,7 +1859,6 @@ impl<'a> Resolver<'a> {\n                         ns_to_try,\n                         parent_scope,\n                         None,\n-                        false,\n                         unusable_binding,\n                     ).ok()\n                 } else if let Some(ribs) = ribs\n@@ -1886,7 +1884,6 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         None,\n                         false,\n-                        false,\n                         unusable_binding,\n                     ).ok()\n                 };"}, {"sha": "0ca04d4c8934c8577bc884a6bbdfe8adc3388aa3", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "patch": "@@ -343,7 +343,6 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 parent_scope,\n                 finalize,\n-                false,\n                 unusable_binding,\n             );\n             if let Ok(binding) = item {\n@@ -357,7 +356,6 @@ impl<'a> Resolver<'a> {\n             parent_scope,\n             finalize,\n             finalize.is_some(),\n-            false,\n             unusable_binding,\n         )\n         .ok()\n@@ -377,7 +375,6 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n         force: bool,\n-        last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         bitflags::bitflags! {\n@@ -498,7 +495,6 @@ impl<'a> Resolver<'a> {\n                             ns,\n                             parent_scope,\n                             finalize,\n-                            last_import_segment,\n                             unusable_binding,\n                         );\n                         match binding {\n@@ -521,7 +517,6 @@ impl<'a> Resolver<'a> {\n                             adjusted_parent_scope,\n                             !matches!(scope_set, ScopeSet::Late(..)),\n                             finalize,\n-                            last_import_segment,\n                             unusable_binding,\n                         );\n                         match binding {\n@@ -607,7 +602,6 @@ impl<'a> Resolver<'a> {\n                                 ns,\n                                 parent_scope,\n                                 None,\n-                                last_import_segment,\n                                 unusable_binding,\n                             ) {\n                                 if use_prelude || this.is_builtin_macro(binding.res()) {\n@@ -730,7 +724,7 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n-        self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, None, false, None)\n+        self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, None, None)\n             .map_err(|(determinacy, _)| determinacy)\n     }\n \n@@ -742,8 +736,6 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        // We are resolving a last import segment during import validation.\n-        last_import_segment: bool,\n         // This binding should be ignored during in-module resolution, so that we don't get\n         // \"self-confirming\" import resolutions during import validation.\n         unusable_binding: Option<&'a NameBinding<'a>>,\n@@ -754,7 +746,6 @@ impl<'a> Resolver<'a> {\n             ns,\n             parent_scope,\n             finalize,\n-            last_import_segment,\n             unusable_binding,\n         )\n         .map_err(|(determinacy, _)| determinacy)\n@@ -768,7 +759,6 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let tmp_parent_scope;\n@@ -795,7 +785,6 @@ impl<'a> Resolver<'a> {\n             adjusted_parent_scope,\n             false,\n             finalize,\n-            last_import_segment,\n             unusable_binding,\n         )\n     }\n@@ -808,7 +797,6 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         self.resolve_ident_in_module_unadjusted_ext(\n@@ -818,7 +806,6 @@ impl<'a> Resolver<'a> {\n             parent_scope,\n             false,\n             finalize,\n-            last_import_segment,\n             unusable_binding,\n         )\n         .map_err(|(determinacy, _)| determinacy)\n@@ -835,7 +822,6 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         restricted_shadowing: bool,\n         finalize: Option<Finalize>,\n-        last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let module = match module {\n@@ -848,7 +834,6 @@ impl<'a> Resolver<'a> {\n                     parent_scope,\n                     finalize,\n                     finalize.is_some(),\n-                    last_import_segment,\n                     unusable_binding,\n                 );\n                 return binding.map_err(|determinacy| (determinacy, Weak::No));\n@@ -889,7 +874,6 @@ impl<'a> Resolver<'a> {\n                     parent_scope,\n                     finalize,\n                     finalize.is_some(),\n-                    last_import_segment,\n                     unusable_binding,\n                 );\n                 return binding.map_err(|determinacy| (determinacy, Weak::No));\n@@ -900,7 +884,7 @@ impl<'a> Resolver<'a> {\n         let resolution =\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n-        if let Some(Finalize { path_span, .. }) = finalize {\n+        if let Some(Finalize { path_span, report_private, .. }) = finalize {\n             // If the primary binding is unusable, search further and return the shadowed glob\n             // binding if it exists. What we really want here is having two separate scopes in\n             // a module - one for non-globs and one for globs, but until that's done use this\n@@ -921,14 +905,14 @@ impl<'a> Resolver<'a> {\n             };\n \n             if !self.is_accessible_from(binding.vis, parent_scope.module) {\n-                if last_import_segment {\n-                    return Err((Determined, Weak::No));\n-                } else {\n+                if report_private {\n                     self.privacy_errors.push(PrivacyError {\n                         ident,\n                         binding,\n                         dedup_span: path_span,\n                     });\n+                } else {\n+                    return Err((Determined, Weak::No));\n                 }\n             }\n \n@@ -995,7 +979,6 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 &single_import.parent_scope,\n                 None,\n-                last_import_segment,\n                 unusable_binding,\n             ) {\n                 Err(Determined) => continue,\n@@ -1072,7 +1055,6 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 adjusted_parent_scope,\n                 None,\n-                last_import_segment,\n                 unusable_binding,\n             );\n \n@@ -1495,7 +1477,6 @@ impl<'a> Resolver<'a> {\n                         ns,\n                         parent_scope,\n                         finalize,\n-                        false,\n                         unusable_binding,\n                     )\n                 } else if let Some(ribs) = ribs\n@@ -1523,7 +1504,6 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         finalize,\n                         finalize.is_some(),\n-                        false,\n                         unusable_binding,\n                     )\n                 };"}, {"sha": "cae9b1498c287cd866c24177d928902d2df674b6", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "patch": "@@ -545,7 +545,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         ns,\n                         &import.parent_scope,\n                         None,\n-                        false,\n                         None,\n                     );\n                     import.vis.set(orig_vis);\n@@ -594,13 +593,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             _ => None,\n         };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n-        let finalize =\n-            Some(Finalize::with_root_span(import.root_id, import.span, import.root_span));\n+        let finalize = Finalize::with_root_span(import.root_id, import.span, import.root_span);\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n             None,\n             &import.parent_scope,\n-            finalize,\n+            Some(finalize),\n             unusable_binding,\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n@@ -682,7 +680,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     // 2 segments, so the `resolve_path` above won't trigger it.\n                     let mut full_path = import.module_path.clone();\n                     full_path.push(Segment::from_ident(Ident::empty()));\n-                    self.r.lint_if_path_starts_with_module(finalize, &full_path, None);\n+                    self.r.lint_if_path_starts_with_module(Some(finalize), &full_path, None);\n                 }\n \n                 if let ModuleOrUniformRoot::Module(module) = module {\n@@ -717,8 +715,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     ident,\n                     ns,\n                     &import.parent_scope,\n-                    finalize,\n-                    true,\n+                    Some(Finalize { report_private: false, ..finalize }),\n                     target_bindings[ns].get(),\n                 );\n                 import.vis.set(orig_vis);\n@@ -778,8 +775,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         ident,\n                         ns,\n                         &import.parent_scope,\n-                        finalize,\n-                        false,\n+                        Some(finalize),\n                         None,\n                     );\n                     if binding.is_ok() {\n@@ -945,7 +941,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             full_path.push(Segment::from_ident(ident));\n             self.r.per_ns(|this, ns| {\n                 if let Ok(binding) = source_bindings[ns].get() {\n-                    this.lint_if_path_starts_with_module(finalize, &full_path, Some(binding));\n+                    this.lint_if_path_starts_with_module(Some(finalize), &full_path, Some(binding));\n                 }\n             });\n         }\n@@ -1000,7 +996,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     &import.parent_scope,\n                     None,\n                     false,\n-                    false,\n                     target_bindings[ns].get(),\n                 ) {\n                     Ok(other_binding) => {"}, {"sha": "2e625fc1b4f7b4ff732f31c82c8edb7dc45ade8d", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "patch": "@@ -2053,15 +2053,18 @@ struct Finalize {\n     /// Span of the path start, suitable for prepending something to to it.\n     /// E.g. span of `foo` in `foo::{a, b, c}`, or full span for regular paths.\n     root_span: Span,\n+    /// Whether to report privacy errors or silently return \"no resolution\" for them,\n+    /// similarly to speculative resolution.\n+    report_private: bool,\n }\n \n impl Finalize {\n     fn new(node_id: NodeId, path_span: Span) -> Finalize {\n-        Finalize { node_id, path_span, root_span: path_span }\n+        Finalize::with_root_span(node_id, path_span, path_span)\n     }\n \n     fn with_root_span(node_id: NodeId, path_span: Span, root_span: Span) -> Finalize {\n-        Finalize { node_id, path_span, root_span }\n+        Finalize { node_id, path_span, root_span, report_private: true }\n     }\n }\n "}, {"sha": "19a9c1b99fc47f897d2701fc90d0be3312b4b442", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "patch": "@@ -604,7 +604,6 @@ impl<'a> Resolver<'a> {\n                 parent_scope,\n                 None,\n                 force,\n-                false,\n                 None,\n             );\n             if let Err(Determinacy::Undetermined) = binding {\n@@ -710,7 +709,6 @@ impl<'a> Resolver<'a> {\n                 &parent_scope,\n                 Some(Finalize::new(ast::CRATE_NODE_ID, ident.span)),\n                 true,\n-                false,\n                 None,\n             ) {\n                 Ok(binding) => {\n@@ -753,7 +751,6 @@ impl<'a> Resolver<'a> {\n                 &parent_scope,\n                 Some(Finalize::new(ast::CRATE_NODE_ID, ident.span)),\n                 true,\n-                false,\n                 None,\n             );\n         }"}]}