{"sha": "609144f7a6adba552602feb7e50e7c4d6a815fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTE0NGY3YTZhZGJhNTUyNjAyZmViN2U1MGU3YzRkNmE4MTVmYWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-31T00:10:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T02:51:29Z"}, "message": "rt: Extract start_main_loop from rust_sched_loop to rust_sched_driver", "tree": {"sha": "a0281e219c6d944dbffcd408e7291d14ae08e21e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0281e219c6d944dbffcd408e7291d14ae08e21e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/609144f7a6adba552602feb7e50e7c4d6a815fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/609144f7a6adba552602feb7e50e7c4d6a815fae", "html_url": "https://github.com/rust-lang/rust/commit/609144f7a6adba552602feb7e50e7c4d6a815fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/609144f7a6adba552602feb7e50e7c4d6a815fae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "html_url": "https://github.com/rust-lang/rust/commit/218dd084697ed2ce58812ef9e69cdc86cb83bcf2"}], "stats": {"total": 140, "additions": 108, "deletions": 32}, "files": [{"sha": "eee3f9cf3ea5be754220832abd841ca7a2ad36a1", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -52,6 +52,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_env.cpp \\\n               rt/rust_sched_loop.cpp \\\n               rt/rust_sched_launcher.cpp \\\n+              rt/rust_sched_driver.cpp \\\n               rt/rust_scheduler.cpp \\\n               rt/rust_sched_reaper.cpp \\\n               rt/rust_task.cpp \\"}, {"sha": "dd9ca9e7f10648e0293f5232713d7a3a172838dc", "filename": "src/rt/rust_sched_driver.cpp", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_driver.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_driver.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_driver.cpp?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -0,0 +1,46 @@\n+#include <assert.h>\n+#include \"rust_internal.h\"\n+#include \"rust_sched_driver.h\"\n+#include \"rust_sched_loop.h\"\n+\n+rust_sched_driver::rust_sched_driver(rust_sched_loop *sched_loop)\n+    : sched_loop(sched_loop),\n+      signalled(false) {\n+\n+    assert(sched_loop != NULL);\n+    sched_loop->on_pump_loop(this);\n+}\n+\n+/**\n+ * Starts the main scheduler loop which performs task scheduling for this\n+ * domain.\n+ *\n+ * Returns once no more tasks can be scheduled and all task ref_counts\n+ * drop to zero.\n+ */\n+void\n+rust_sched_driver::start_main_loop() {\n+    assert(sched_loop != NULL);\n+\n+    rust_sched_loop_state state = sched_loop_state_keep_going;\n+    while (state != sched_loop_state_exit) {\n+        DLOG(sched_loop, dom, \"pumping scheduler\");\n+        state = sched_loop->run_single_turn();\n+\n+        if (state == sched_loop_state_block) {\n+            scoped_lock with(lock);\n+            if (!signalled) {\n+                DLOG(sched_loop, dom, \"blocking scheduler\");\n+                lock.wait();\n+            }\n+            signalled = false;\n+        }\n+    }\n+}\n+\n+void\n+rust_sched_driver::signal() {\n+    scoped_lock with(lock);\n+    signalled = true;\n+    lock.signal();\n+}"}, {"sha": "c8dae9ca7b819a359bc1337979f7af1b5b8caf57", "filename": "src/rt/rust_sched_driver.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_driver.h", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_driver.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_driver.h?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -0,0 +1,23 @@\n+#ifndef RUST_SCHED_DRIVER_H\n+#define RUST_SCHED_DRIVER_H\n+\n+#include \"sync/lock_and_signal.h\"\n+#include \"rust_signal.h\"\n+\n+struct rust_sched_loop;\n+\n+class rust_sched_driver : public rust_signal {\n+private:\n+    rust_sched_loop *sched_loop;\n+    lock_and_signal lock;\n+    bool signalled;\n+\n+public:\n+    rust_sched_driver(rust_sched_loop *sched_loop);\n+\n+    void start_main_loop();\n+\n+    virtual void signal();\n+};\n+\n+#endif /* RUST_SCHED_DRIVER_H */"}, {"sha": "2a001a619fa3fde900a9b18b108165f43c858a9f", "filename": "src/rt/rust_sched_launcher.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_launcher.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_launcher.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.cpp?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -7,10 +7,11 @@ rust_sched_launcher::rust_sched_launcher(rust_scheduler *sched,\n                                          rust_srv *srv, int id)\n     : rust_thread(SCHED_STACK_SIZE),\n       kernel(sched->kernel),\n-      sched_loop(sched, srv, id) {\n+      sched_loop(sched, srv, id),\n+      driver(&sched_loop) {\n }\n \n void\n rust_sched_launcher::run() {\n-    sched_loop.start_main_loop();\n+    driver.start_main_loop();\n }"}, {"sha": "1baf1724341d11eb7f1799202ab47f57359c9a41", "filename": "src/rt/rust_sched_launcher.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -3,12 +3,7 @@\n \n #include \"rust_internal.h\"\n #include \"sync/rust_thread.h\"\n-\n-#ifndef _WIN32\n-#include <pthread.h>\n-#else\n-#include <windows.h>\n-#endif\n+#include \"rust_sched_driver.h\"\n \n class rust_sched_launcher\n   : public kernel_owned<rust_sched_launcher>,\n@@ -18,6 +13,7 @@ class rust_sched_launcher\n \n private:\n     rust_sched_loop sched_loop;\n+    rust_sched_driver driver;\n \n public:\n     rust_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);"}, {"sha": "ce549db52361ab6b857f1e058aa05d758bcfbf40", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -25,6 +25,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched,\n     should_exit(false),\n     cached_c_stack(NULL),\n     dead_task(NULL),\n+    pump_signal(NULL),\n     kernel(sched->kernel),\n     sched(sched),\n     srv(srv),\n@@ -183,32 +184,24 @@ rust_sched_loop::log_state() {\n     }\n }\n \n-/**\n- * Starts the main scheduler loop which performs task scheduling for this\n- * domain.\n- *\n- * Returns once no more tasks can be scheduled and all task ref_counts\n- * drop to zero.\n- */\n void\n-rust_sched_loop::start_main_loop() {\n-    DLOG(this, dom, \"started domain loop %d\", id);\n-\n-    rust_sched_loop_state state = sched_loop_state_keep_going;\n-    while (state != sched_loop_state_exit) {\n-        state = run_single_turn();\n+rust_sched_loop::on_pump_loop(rust_signal *signal) {\n+    I(this, pump_signal == NULL);\n+    I(this, signal != NULL);\n+    pump_signal = signal;\n+}\n \n-        scoped_lock with(lock);\n-        if (!should_exit && running_tasks.length() == 0) {\n-            lock.wait();\n-        }\n-        DLOG(this, task,\n-             \"scheduler %d resuming ...\", id);\n-    }\n+void\n+rust_sched_loop::pump_loop() {\n+    I(this, pump_signal != NULL);\n+    pump_signal->signal();\n }\n \n rust_sched_loop_state\n rust_sched_loop::run_single_turn() {\n+    DLOG(this, task,\n+         \"scheduler %d resuming ...\", id);\n+\n     lock.lock();\n \n     if (!should_exit) {\n@@ -344,7 +337,7 @@ rust_sched_loop::transition(rust_task *task,\n     }\n     task->set_state(dst, cond, cond_name);\n \n-    lock.signal();\n+    pump_loop();\n }\n \n #ifndef _WIN32\n@@ -382,7 +375,7 @@ rust_sched_loop::exit() {\n     scoped_lock with(lock);\n     DLOG(this, dom, \"Requesting exit for thread %d\", id);\n     should_exit = true;\n-    lock.signal();\n+    pump_loop();\n }\n \n // Before activating each task, make sure we have a C stack available."}, {"sha": "e89e9a6313b85de1bfe190c157d62327ebcff57d", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -3,6 +3,7 @@\n \n #include \"rust_internal.h\"\n #include \"rust_stack.h\"\n+#include \"rust_signal.h\"\n #include \"context.h\"\n \n enum rust_task_state {\n@@ -22,6 +23,8 @@ enum rust_sched_loop_state {\n     sched_loop_state_exit\n };\n \n+struct rust_task;\n+\n typedef indexed_list<rust_task> rust_task_list;\n \n struct rust_sched_loop\n@@ -53,13 +56,15 @@ struct rust_sched_loop\n     rust_task_list blocked_tasks;\n     rust_task *dead_task;\n \n+    rust_signal *pump_signal;\n+\n     void prepare_c_stack(rust_task *task);\n     void unprepare_c_stack();\n \n     rust_task_list *state_list(rust_task_state state);\n     const char *state_name(rust_task_state state);\n \n-    rust_sched_loop_state run_single_turn();\n+    void pump_loop();\n \n public:\n     rust_kernel *kernel;\n@@ -96,7 +101,8 @@ struct rust_sched_loop\n     void reap_dead_tasks();\n     rust_task *schedule_task();\n \n-    void start_main_loop();\n+    void on_pump_loop(rust_signal *signal);\n+    rust_sched_loop_state run_single_turn();\n \n     void log_state();\n "}, {"sha": "3f27f1fad97c9eed849c27e4c29232118601d8a4", "filename": "src/rt/rust_signal.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/609144f7a6adba552602feb7e50e7c4d6a815fae/src%2Frt%2Frust_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_signal.h?ref=609144f7a6adba552602feb7e50e7c4d6a815fae", "patch": "@@ -0,0 +1,10 @@\n+#ifndef RUST_SIGNAL_H\n+#define RUST_SIGNAL_H\n+\n+// Just an abstrict class that reperesents something that can be signalled\n+class rust_signal {\n+public:\n+    virtual void signal() = 0;\n+};\n+\n+#endif /* RUST_SIGNAL_H */"}]}