{"sha": "faf80ad3979e58d238f41c22e7be06ff1276a359", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjgwYWQzOTc5ZTU4ZDIzOGY0MWMyMmU3YmUwNmZmMTI3NmEzNTk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-03T20:50:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-03T20:50:03Z"}, "message": "remove base_place", "tree": {"sha": "f57fe99bd6516cf2649c16634a4bab07033f3e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57fe99bd6516cf2649c16634a4bab07033f3e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf80ad3979e58d238f41c22e7be06ff1276a359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf80ad3979e58d238f41c22e7be06ff1276a359", "html_url": "https://github.com/rust-lang/rust/commit/faf80ad3979e58d238f41c22e7be06ff1276a359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf80ad3979e58d238f41c22e7be06ff1276a359/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee73f80dc963707df3b3da82976556d64cac5752", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee73f80dc963707df3b3da82976556d64cac5752", "html_url": "https://github.com/rust-lang/rust/commit/ee73f80dc963707df3b3da82976556d64cac5752"}], "stats": {"total": 88, "additions": 18, "deletions": 70}, "files": [{"sha": "fd5ca0780e2909804e958c235bbe6c7cb5275894", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=faf80ad3979e58d238f41c22e7be06ff1276a359", "patch": "@@ -1602,10 +1602,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1643,8 +1639,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenarios 1, 2, and 3.\n \n-        debug!(\"check_if_full_path_is_moved place: {:?}\", place);\n-        match self.move_path_closest_to(place) {\n+        debug!(\"check_if_full_path_is_moved place: {:?}\", place_span.0);\n+        match self.move_path_closest_to(place_span.0) {\n             Ok(mpi) => {\n                 if maybe_uninits.contains(&mpi) {\n                     self.report_use_of_moved_or_uninitialized(\n@@ -1674,10 +1670,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1706,8 +1698,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenario 1.\n \n-        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place);\n-        if let Some(mpi) = self.move_path_for_place(place) {\n+        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place_span.0);\n+        if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             if let Some(child_mpi) = maybe_uninits.has_any_child_of(mpi) {\n                 self.report_use_of_moved_or_uninitialized(\n                     context,\n@@ -1810,11 +1802,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             let tcx = self.tcx;\n                             match base.ty(self.mir, tcx).to_ty(tcx).sty {\n                                 ty::Adt(def, _) if def.has_dtor(tcx) => {\n-\n-                                    // FIXME: analogous code in\n-                                    // check_loans.rs first maps\n-                                    // `base` to its base_path.\n-\n                                     self.check_if_path_or_subpath_is_moved(\n                                         context, InitializationRequiringAction::Assignment,\n                                         (base, span), flow_state);\n@@ -2187,35 +2174,6 @@ enum Overlap {\n     Disjoint,\n }\n \n-impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    // FIXME (#16118): function intended to allow the borrow checker\n-    // to be less precise in its handling of Box while still allowing\n-    // moves out of a Box. They should be removed when/if we stop\n-    // treating Box specially (e.g. when/if DerefMove is added...)\n-\n-    fn base_path<'d>(&self, place: &'d Place<'tcx>) -> &'d Place<'tcx> {\n-        //! Returns the base of the leftmost (deepest) dereference of an\n-        //! Box in `place`. If there is no dereference of an Box\n-        //! in `place`, then it just returns `place` itself.\n-\n-        let mut cursor = place;\n-        let mut deepest = place;\n-        loop {\n-            let proj = match *cursor {\n-                Place::Promoted(_) |\n-                Place::Local(..) | Place::Static(..) => return deepest,\n-                Place::Projection(ref proj) => proj,\n-            };\n-            if proj.elem == ProjectionElem::Deref\n-                && place.ty(self.mir, self.tcx).to_ty(self.tcx).is_box()\n-            {\n-                deepest = &proj.base;\n-            }\n-            cursor = &proj.base;\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Context {\n     kind: ContextKind,"}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=faf80ad3979e58d238f41c22e7be06ff1276a359", "patch": "@@ -1,25 +1,14 @@\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:46:14\n-   |\n-LL |     let _x = a.x;\n-   |              --- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:108:14\n-   |\n-LL |     let _x = a.x.x;\n-   |              ----- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+error: compilation successful\n+  --> $DIR/borrowck-box-insensitivity.rs:160:1\n+   |\n+LL | / fn main() {\n+LL | |     copy_after_move();\n+LL | |     move_after_move();\n+LL | |     borrow_after_move();\n+...  |\n+LL | |     mut_borrow_after_borrow_nested();\n+LL | | }\n+   | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "eabb8d7bca3fae511c73da3e4edd2f5d393e4041", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf80ad3979e58d238f41c22e7be06ff1276a359/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=faf80ad3979e58d238f41c22e7be06ff1276a359", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs)]\n \n struct A {\n     x: Box<isize>,\n@@ -156,6 +156,7 @@ fn mut_borrow_after_borrow_nested() {\n     //~^ mutable borrow occurs here\n }\n \n+#[rustc_error]\n fn main() {\n     copy_after_move();\n     move_after_move();"}]}