{"sha": "9e39219d9b5466739d12bd60c74c21e3ab2483e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMzkyMTlkOWI1NDY2NzM5ZDEyYmQ2MGM3NGMyMWUzYWIyNDgzZTc=", "commit": {"author": {"name": "Donovan Preston", "email": "donovanpreston@gmail.com", "date": "2012-01-25T23:38:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T00:01:26Z"}, "message": "Shuffle around to work with rust-spidermonkey", "tree": {"sha": "e44e403f8f787ad24bf14d0c594c9aa59418b36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44e403f8f787ad24bf14d0c594c9aa59418b36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e39219d9b5466739d12bd60c74c21e3ab2483e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e39219d9b5466739d12bd60c74c21e3ab2483e7", "html_url": "https://github.com/rust-lang/rust/commit/9e39219d9b5466739d12bd60c74c21e3ab2483e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e39219d9b5466739d12bd60c74c21e3ab2483e7/comments", "author": {"login": "fzzzy", "id": 46048, "node_id": "MDQ6VXNlcjQ2MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/46048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fzzzy", "html_url": "https://github.com/fzzzy", "followers_url": "https://api.github.com/users/fzzzy/followers", "following_url": "https://api.github.com/users/fzzzy/following{/other_user}", "gists_url": "https://api.github.com/users/fzzzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/fzzzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fzzzy/subscriptions", "organizations_url": "https://api.github.com/users/fzzzy/orgs", "repos_url": "https://api.github.com/users/fzzzy/repos", "events_url": "https://api.github.com/users/fzzzy/events{/privacy}", "received_events_url": "https://api.github.com/users/fzzzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d360d2b026dbfd9cd8a5dc1b25e452c7fa544ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d360d2b026dbfd9cd8a5dc1b25e452c7fa544ee", "html_url": "https://github.com/rust-lang/rust/commit/6d360d2b026dbfd9cd8a5dc1b25e452c7fa544ee"}], "stats": {"total": 131, "additions": 80, "deletions": 51}, "files": [{"sha": "fb73247d51e7db7dc4994bcb0eed925cbea2bbbb", "filename": "src/libstd/uvtmp.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Flibstd%2Fuvtmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Flibstd%2Fuvtmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuvtmp.rs?ref=9e39219d9b5466739d12bd60c74c21e3ab2483e7", "patch": "@@ -13,20 +13,22 @@ native mod rustrt {\n     fn rust_uvtmp_delete_thread(thread: thread);\n     fn rust_uvtmp_connect(\n         thread: thread,\n+        req_id: u32,\n         ip: str::sbuf,\n-        chan: comm::chan<iomsg>);\n-    fn rust_uvtmp_close_connection(thread: thread, cd: connect_data);\n+        chan: comm::chan<iomsg>) -> connect_data;\n+    fn rust_uvtmp_close_connection(thread: thread, req_id: u32);\n     fn rust_uvtmp_write(\n         thread: thread,\n-        cd: connect_data,\n+        req_id: u32,\n         buf: *u8,\n         len: ctypes::size_t,\n         chan: comm::chan<iomsg>);\n     fn rust_uvtmp_read_start(\n         thread: thread,\n-        cd: connect_data,\n+        req_id: u32,\n         chan: comm::chan<iomsg>);\n     fn rust_uvtmp_delete_buf(buf: *u8);\n+    fn rust_uvtmp_get_req_id(cd: connect_data) -> u32;\n }\n \n type thread = *ctypes::void;\n@@ -56,31 +58,36 @@ fn delete_thread(thread: thread) {\n     rustrt::rust_uvtmp_delete_thread(thread)\n }\n \n-fn connect(thread: thread, ip: str, ch: comm::chan<iomsg>) {\n+fn connect(thread: thread, req_id: u32,\n+           ip: str, ch: comm::chan<iomsg>) -> connect_data {\n     str::as_buf(ip) {|ipbuf|\n-        rustrt::rust_uvtmp_connect(thread, ipbuf, ch)\n+        rustrt::rust_uvtmp_connect(thread, req_id, ipbuf, ch)\n     }\n }\n \n-fn close_connection(thread: thread, cd: connect_data) {\n-    rustrt::rust_uvtmp_close_connection(thread ,cd);\n+fn close_connection(thread: thread, req_id: u32) {\n+    rustrt::rust_uvtmp_close_connection(thread, req_id);\n }\n \n-fn write(thread: thread, cd: connect_data,bytes: [u8],\n+fn write(thread: thread, req_id: u32, bytes: [u8],\n          chan: comm::chan<iomsg>) unsafe {\n     rustrt::rust_uvtmp_write(\n-        thread, cd, vec::to_ptr(bytes), vec::len(bytes), chan);\n+        thread, req_id, vec::to_ptr(bytes), vec::len(bytes), chan);\n }\n \n-fn read_start(thread: thread, cd: connect_data,\n+fn read_start(thread: thread, req_id: u32,\n               chan: comm::chan<iomsg>) {\n-    rustrt::rust_uvtmp_read_start(thread, cd, chan);\n+    rustrt::rust_uvtmp_read_start(thread, req_id, chan);\n }\n \n fn delete_buf(buf: *u8) {\n     rustrt::rust_uvtmp_delete_buf(buf);\n }\n \n+fn get_req_id(cd: connect_data) -> u32 {\n+    ret rustrt::rust_uvtmp_get_req_id(cd);\n+}\n+\n #[test]\n fn test_start_stop() {\n     let thread = create_thread();\n@@ -96,7 +103,7 @@ fn test_connect() {\n     start_thread(thread);\n     let port = comm::port();\n     let chan = comm::chan(port);\n-    connect(thread, \"74.125.224.146\", chan);\n+    connect(thread, 0u32, \"74.125.224.146\", chan);\n     alt comm::recv(port) {\n       connected(cd) {\n         close_connection(thread, cd);\n@@ -113,7 +120,7 @@ fn test_http() {\n     start_thread(thread);\n     let port = comm::port();\n     let chan = comm::chan(port);\n-    connect(thread, \"74.125.224.146\", chan);\n+    connect(thread, 0u32, \"74.125.224.146\", chan);\n     alt comm::recv(port) {\n       connected(cd) {\n         write(thread, cd, str::bytes(\"GET / HTTP/1.0\\n\\n\"), chan);"}, {"sha": "27e0021bc6c0dfbb08ee34d73f1ea3c6aed461d3", "filename": "src/rt/rust_uvtmp.cpp", "status": "modified", "additions": 57, "deletions": 37, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Frt%2Frust_uvtmp.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Frt%2Frust_uvtmp.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uvtmp.cpp?ref=9e39219d9b5466739d12bd60c74c21e3ab2483e7", "patch": "@@ -7,7 +7,9 @@\n class rust_uvtmp_thread;\n \n struct connect_data {\n+    uint32_t req_id;\n     rust_uvtmp_thread *thread;\n+    char * ip_addr;\n     uv_connect_t connect;\n     uv_tcp_t tcp;\n     chan_handle chan;\n@@ -60,12 +62,13 @@ send(rust_task *task, chan_handle chan, void *data) {\n class rust_uvtmp_thread : public rust_thread {\n \n private:\n+    std::map<int, connect_data *> req_map;\n     rust_task *task;\n     uv_loop_t *loop;\n     uv_idle_t idle;\n     lock_and_signal lock;\n     bool stop_flag;\n-    std::queue<std::pair<std::string, chan_handle> > connect_queue;\n+    std::queue<std::pair<connect_data *, chan_handle> > connect_queue;\n     std::queue<connect_data*> close_connection_queue;\n     std::queue<write_data*> write_queue;\n     std::queue<read_start_data*> read_start_queue;\n@@ -90,40 +93,50 @@ class rust_uvtmp_thread : public rust_thread {\n \tstop_flag = true;\n     }\n \n-    void connect(char *ip, chan_handle chan) {\n+    connect_data *connect(uint32_t req_id, char *ip, chan_handle chan) {\n \tscoped_lock with(lock);\n-\tconnect_queue.push(std::pair<std::string, chan_handle>\n-\t\t\t   (std::string(ip), chan));\n+        if (req_map.count(req_id)) return NULL;\n+        connect_data *cd = new connect_data();\n+        req_map[req_id] = cd;\n+        cd->req_id = req_id;\n+        cd->ip_addr = ip;\n+\tconnect_queue.push(\n+            std::pair<connect_data *, chan_handle>(cd, chan));\n+        return cd;\n     }\n \n     void\n-    close_connection(connect_data *cd) {\n-\tscoped_lock with(lock);\n-\tclose_connection_queue.push(cd);\n+    close_connection(uint32_t req_id) {\n+        scoped_lock with(lock);\n+        connect_data *cd = req_map[req_id];\n+        close_connection_queue.push(cd);\n+        req_map.erase(req_id);\n     }\n \n     void\n-    write(connect_data *cd, uint8_t *buf, size_t len, chan_handle chan) {\n-\tscoped_lock with(lock);\n-\twrite_data *wd = new write_data();\n-\twd->cd = cd;\n-\twd->buf = new uint8_t[len];\n-\twd->len = len;\n-\twd->chan = chan;\n-\n-\tmemcpy(wd->buf, buf, len);\n-\n-\twrite_queue.push(wd);\n+    write(uint32_t req_id, uint8_t *buf, size_t len, chan_handle chan) {\n+        scoped_lock with(lock);\n+        connect_data *cd = req_map[req_id];\n+        write_data *wd = new write_data();\n+        wd->cd = cd;\n+        wd->buf = new uint8_t[len];\n+        wd->len = len;\n+        wd->chan = chan;\n+\n+        memcpy(wd->buf, buf, len);\n+\n+        write_queue.push(wd);\n     }\n \n     void\n-    read_start(connect_data *cd, chan_handle chan) {\n-\tscoped_lock with(lock);\n-\tread_start_data *rd = new read_start_data();\n-\trd->cd = cd;\n-\trd->chan = chan;\n-\n-\tread_start_queue.push(rd);\n+    read_start(uint32_t req_id, chan_handle chan) {\n+        scoped_lock with(lock);\n+        connect_data *cd = req_map[req_id];\n+        read_start_data *rd = new read_start_data();\n+        rd->cd = cd;\n+        rd->chan = chan;\n+\n+        read_start_queue.push(rd);\n     }\n \n private:\n@@ -153,12 +166,12 @@ class rust_uvtmp_thread : public rust_thread {\n     make_new_connections() {\n \tassert(lock.lock_held_by_current_thread());\n \twhile (!connect_queue.empty()) {\n-\t    std::pair<std::string, chan_handle> pair = connect_queue.front();\n+\t    std::pair<connect_data *, chan_handle> pair = connect_queue.front();\n \t    connect_queue.pop();\n+            connect_data *cd = pair.first;\n \t    struct sockaddr_in client_addr = uv_ip4_addr(\"0.0.0.0\", 0);\n-\t    struct sockaddr_in server_addr = uv_ip4_addr(pair.first.c_str(), 80);\n+\t    struct sockaddr_in server_addr = uv_ip4_addr(cd->ip_addr, 80);\n \n-\t    connect_data *cd = new connect_data();\n \t    cd->thread = this;\n \t    cd->chan = pair.second;\n \t    cd->connect.data = cd;\n@@ -318,29 +331,36 @@ rust_uvtmp_delete_thread(rust_uvtmp_thread *thread) {\n     delete thread;\n }\n \n-extern \"C\" void\n-rust_uvtmp_connect(rust_uvtmp_thread *thread, char *ip, chan_handle *chan) {\n-    thread->connect(ip, *chan);\n+extern \"C\" connect_data *\n+rust_uvtmp_connect(rust_uvtmp_thread *thread, uint32_t req_id, char *ip, chan_handle *chan) {\n+    return thread->connect(req_id, ip, *chan);\n }\n \n extern \"C\" void\n-rust_uvtmp_close_connection(rust_uvtmp_thread *thread, connect_data *cd) {\n-  thread->close_connection(cd);\n+rust_uvtmp_close_connection(rust_uvtmp_thread *thread, uint32_t req_id) {\n+  thread->close_connection(req_id);\n }\n \n extern \"C\" void\n-rust_uvtmp_write(rust_uvtmp_thread *thread, connect_data *cd,\n+rust_uvtmp_write(rust_uvtmp_thread *thread, uint32_t req_id,\n \t\t uint8_t *buf, size_t len, chan_handle *chan) {\n-    thread->write(cd, buf, len, *chan);\n+    thread->write(req_id, buf, len, *chan);\n }\n \n extern \"C\" void\n-rust_uvtmp_read_start(rust_uvtmp_thread *thread, connect_data *cd,\n+rust_uvtmp_read_start(rust_uvtmp_thread *thread, uint32_t req_id,\n \t\t      chan_handle *chan) {\n-    thread->read_start(cd, *chan);\n+    thread->read_start(req_id, *chan);\n }\n \n extern \"C\" void\n rust_uvtmp_delete_buf(uint8_t *buf) {\n     delete [] buf;\n }\n+\n+extern \"C\" uint32_t\n+rust_uvtmp_get_req_id(connect_data *cd) {\n+    return cd->req_id;\n+}\n+\n+"}, {"sha": "17a0274d96e59efb160365573063c15aa999702f", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/9e39219d9b5466739d12bd60c74c21e3ab2483e7/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=9e39219d9b5466739d12bd60c74c21e3ab2483e7", "patch": "@@ -97,3 +97,5 @@ rust_uvtmp_close_connection\n rust_uvtmp_write\n rust_uvtmp_read_start\n rust_uvtmp_delete_buf\n+rust_uvtmp_get_req_id\n+"}]}