{"sha": "44b68116c522ad8870f0a8627550ba1f5c8fc797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjY4MTE2YzUyMmFkODg3MGYwYTg2Mjc1NTBiYTFmNWM4ZmM3OTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-16T12:14:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-16T12:15:45Z"}, "message": "rename and move read_vector_ty", "tree": {"sha": "49d44166a1c00c0c8acdf4e2c91852f1d204609d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49d44166a1c00c0c8acdf4e2c91852f1d204609d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b68116c522ad8870f0a8627550ba1f5c8fc797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b68116c522ad8870f0a8627550ba1f5c8fc797", "html_url": "https://github.com/rust-lang/rust/commit/44b68116c522ad8870f0a8627550ba1f5c8fc797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b68116c522ad8870f0a8627550ba1f5c8fc797/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405866aaa3e8057218ad482ca60e284ea0c9e350", "url": "https://api.github.com/repos/rust-lang/rust/commits/405866aaa3e8057218ad482ca60e284ea0c9e350", "html_url": "https://github.com/rust-lang/rust/commit/405866aaa3e8057218ad482ca60e284ea0c9e350"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "d1d71a42872449d8a59cd54c1d48a0ed2707f15e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=44b68116c522ad8870f0a8627550ba1f5c8fc797", "patch": "@@ -1814,20 +1814,30 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn simd_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind {\n-            Adt(def, substs) => {\n-                def.non_enum_variant().fields[0].ty(tcx, substs)\n-            }\n+            Adt(def, substs) => def.non_enum_variant().fields[0].ty(tcx, substs),\n             _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: TyCtxt<'_>) -> usize {\n+    pub fn simd_size(&self, _tcx: TyCtxt<'tcx>) -> usize {\n+        // Parameter currently unused, but probably needed in the future to\n+        // allow `#[repr(simd)] struct Simd<T, const N: usize>([T; N]);`.\n         match self.kind {\n             Adt(def, _) => def.non_enum_variant().fields.len(),\n             _ => bug!(\"simd_size called on invalid type\")\n         }\n     }\n \n+    pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (usize, Ty<'tcx>) {\n+        match self.kind {\n+            Adt(def, substs) => {\n+                let variant = def.non_enum_variant();\n+                (variant.fields.len(), variant.fields[0].ty(tcx, substs))\n+            }\n+            _ => bug!(\"simd_size_and_type called on invalid type\")\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_region_ptr(&self) -> bool {\n         match self.kind {"}, {"sha": "e43e6c0e43a8021c3b43a04f10112106fec8f9a3", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=44b68116c522ad8870f0a8627550ba1f5c8fc797", "patch": "@@ -302,10 +302,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n             \"simd_insert\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as u64;\n-                let scalar = args[2];\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let elem = args[2];\n                 let input = args[0];\n-                let (len, e_ty) = self.read_vector_ty(input);\n+                let (len, e_ty) = input.layout.ty.simd_size_and_type(self.tcx.tcx);\n+                let len = len as u64;\n                 assert!(\n                     index < len,\n                     \"Index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n@@ -317,26 +318,26 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     dest.layout.ty, input.layout.ty\n                 );\n                 assert_eq!(\n-                    scalar.layout.ty, e_ty,\n-                    \"Scalar type `{}` must match vector element type `{}`\",\n-                    scalar.layout.ty, e_ty\n+                    elem.layout.ty, e_ty,\n+                    \"Scalar element type `{}` must match vector element type `{}`\",\n+                    elem.layout.ty, e_ty\n                 );\n \n                 for i in 0..len {\n                     let place = self.place_field(dest, i)?;\n                     let value = if i == index {\n-                        scalar\n+                        elem\n                     } else {\n                         self.operand_field(input, i)?\n                     };\n                     self.copy_op(value, place)?;\n                 }\n             }\n             \"simd_extract\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as _;\n-                let (len, e_ty) = self.read_vector_ty(args[0]);\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let (len, e_ty) = args[0].layout.ty.simd_size_and_type(self.tcx.tcx);\n                 assert!(\n-                    index < len,\n+                    index < len as u64,\n                     \"index `{}` is out-of-bounds of vector type `{}` with length `{}`\",\n                     index, e_ty, len\n                 );"}, {"sha": "970f76a9d6d7ce8cd1722f426b2b33eac6e919a0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b68116c522ad8870f0a8627550ba1f5c8fc797/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=44b68116c522ad8870f0a8627550ba1f5c8fc797", "patch": "@@ -315,17 +315,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Read vector length and element type\n-    pub fn read_vector_ty(\n-        &self, op: OpTy<'tcx, M::PointerTag>\n-    ) -> (u64, &rustc::ty::TyS<'tcx>) {\n-        if let layout::Abi::Vector { .. } = op.layout.abi {\n-            (op.layout.ty.simd_size(*self.tcx) as _, op.layout.ty.simd_type(*self.tcx))\n-        } else {\n-            bug!(\"Type `{}` is not a SIMD vector type\", op.layout.ty)\n-        }\n-    }\n-\n     /// Read a scalar from a place\n     pub fn read_scalar(\n         &self,"}]}