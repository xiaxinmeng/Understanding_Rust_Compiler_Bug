{"sha": "c69387a0d530dccb56ef11d4cd148f9c38904893", "node_id": "C_kwDOAAsO6NoAKGM2OTM4N2EwZDUzMGRjY2I1NmVmMTFkNGNkMTQ4ZjljMzg5MDQ4OTM", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-15T07:13:42Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "Well it builds", "tree": {"sha": "58cc1399a4be7c9c3b9bfd0b167cc3038f34877a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58cc1399a4be7c9c3b9bfd0b167cc3038f34877a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c69387a0d530dccb56ef11d4cd148f9c38904893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c69387a0d530dccb56ef11d4cd148f9c38904893", "html_url": "https://github.com/rust-lang/rust/commit/c69387a0d530dccb56ef11d4cd148f9c38904893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c69387a0d530dccb56ef11d4cd148f9c38904893/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797507c58390662098f0d20a9ee89d200f93f11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/797507c58390662098f0d20a9ee89d200f93f11c", "html_url": "https://github.com/rust-lang/rust/commit/797507c58390662098f0d20a9ee89d200f93f11c"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "507d9b404127eff972d8fa3f99ac63b5fd5c5ec3", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c69387a0d530dccb56ef11d4cd148f9c38904893/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69387a0d530dccb56ef11d4cd148f9c38904893/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=c69387a0d530dccb56ef11d4cd148f9c38904893", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use rustc_hir::*;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -33,26 +34,54 @@ declare_clippy_lint! {\n declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C]);\n \n impl LateLintPass<'_> for TrailingZeroSizedArrayWithoutReprC {\n-    fn check_struct_def(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_hir::VariantData<'tcx>) {}\n+    fn check_struct_def(&mut self, cx: &LateContext<'tcx>, data: &'tcx rustc_hir::VariantData<'tcx>) {\n+        dbg!(\"in check_struct_def\");\n+        if_chain! {\n+            if let Some(def) = data.fields().last();\n+            if let rustc_hir::TyKind::Array(ty, acost) = def.ty.kind;\n+            then {\n+                // is the AnonConst `0`\n+            }\n+        }\n \n-    fn check_struct_def_post(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_hir::VariantData<'tcx>) {}\n+        // span_lint_and_sugg(\n+        //     cx,\n+        //     todo!(),\n+        //     todo!(),\n+        //     todo!(),\n+        //     todo!(),\n+        //     todo!(),\n+        //     rustc_errors::Applicability::MaybeIncorrect,\n+        // )\n+    }\n     // https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/enum.TyKind.html#variant.Array in latepass\n     // or https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.TyKind.html#variant.Array in early pass\n \n-    fn check_field_def(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_hir::FieldDef<'tcx>) {}\n+    // fn check_struct_def_post(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_hir::VariantData<'tcx>)\n+    // {}\n \n-    fn check_attribute(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_ast::Attribute) {}\n+    // fn check_field_def(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_hir::FieldDef<'tcx>) {}\n \n-    fn enter_lint_attrs(&mut self, _: &LateContext<'tcx>, _: &'tcx [rustc_ast::Attribute]) {}\n+    // fn check_attribute(&mut self, _: &LateContext<'tcx>, _: &'tcx rustc_ast::Attribute) {}\n \n-    fn exit_lint_attrs(&mut self, _: &LateContext<'tcx>, _: &'tcx [rustc_ast::Attribute]) {}\n+    // fn enter_lint_attrs(&mut self, _: &LateContext<'tcx>, _: &'tcx [rustc_ast::Attribute]) {}\n+\n+    // fn exit_lint_attrs(&mut self, _: &LateContext<'tcx>, _: &'tcx [rustc_ast::Attribute]) {}\n }\n //\n // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n //       e.g. store.register_late_pass(||\n // Box::new(trailing_zero_sized_array_without_repr_c::TrailingZeroSizedArrayWithoutReprC));\n \n+// fn temp_alert() {}\n \n-fn temp_alert() {\n-    span_lint_and_sugg(cx, lint, sp, msg, help, sugg, applicability)\n-}\n\\ No newline at end of file\n+impl EarlyLintPass for TrailingZeroSizedArrayWithoutReprC {\n+    fn check_struct_def(&mut self, cx: &EarlyContext<'_>, data: &rustc_ast::VariantData) {\n+        if_chain! {\n+            if let rustc_ast::ast::VariantData::Struct(field_defs, some_bool_huh) = data;\n+            if let Some(last_field) = field_defs.last();\n+            if let rustc_ast::ast::TyKind::Array(_, aconst) = &last_field.ty.kind;            \n+            then {dbg!(aconst); return ();}\n+        }\n+    }\n+}"}, {"sha": "771622178e73f2cc66aea2d619393eb6b9d825ed", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c69387a0d530dccb56ef11d4cd148f9c38904893/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69387a0d530dccb56ef11d4cd148f9c38904893/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=c69387a0d530dccb56ef11d4cd148f9c38904893", "patch": "@@ -2,17 +2,17 @@\n \n struct RarelyUseful {\n     field: i32,\n-    last: [SomeType; 0],\n+    last: [usize; 0],\n }\n \n #[repr(C)]\n struct GoodReason {\n     field: i32,\n-    last: [SomeType; 0],\n+    last: [usize; 0],\n }\n \n struct OnlyFieldIsZeroSizeArray {\n-    first_and_last: [SomeType; 0],\n+    first_and_last: [usize; 0],\n }\n \n struct GenericArrayType<T> {"}]}