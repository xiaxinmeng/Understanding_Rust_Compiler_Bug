{"sha": "638832e64cc62ec46721161ca19731ba00d4da58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODgzMmU2NGNjNjJlYzQ2NzIxMTYxY2ExOTczMWJhMDBkNGRhNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T18:32:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T18:32:16Z"}, "message": "Auto merge of #21824 - sfackler:should_panic, r=alexcrichton", "tree": {"sha": "c4d523c60793d664d81a1ee0a07a69193f371f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d523c60793d664d81a1ee0a07a69193f371f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638832e64cc62ec46721161ca19731ba00d4da58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638832e64cc62ec46721161ca19731ba00d4da58", "html_url": "https://github.com/rust-lang/rust/commit/638832e64cc62ec46721161ca19731ba00d4da58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638832e64cc62ec46721161ca19731ba00d4da58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777f5d959930711acc321a50c493b984b780f156", "url": "https://api.github.com/repos/rust-lang/rust/commits/777f5d959930711acc321a50c493b984b780f156", "html_url": "https://github.com/rust-lang/rust/commit/777f5d959930711acc321a50c493b984b780f156"}, {"sha": "e2605b42c7ce37717118fe240f7d0e8c4eae3598", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2605b42c7ce37717118fe240f7d0e8c4eae3598", "html_url": "https://github.com/rust-lang/rust/commit/e2605b42c7ce37717118fe240f7d0e8c4eae3598"}], "stats": {"total": 264, "additions": 136, "deletions": 128}, "files": [{"sha": "2837c923b3d5b67ae749a4adf4ffd363fed11d17", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -332,7 +332,7 @@ pub fn make_test<F>(config: &Config, testfile: &Path, f: F) -> test::TestDescAnd\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),\n             ignore: header::is_test_ignored(config, testfile),\n-            should_fail: test::ShouldFail::No,\n+            should_panic: test::ShouldPanic::No,\n         },\n         testfn: f(),\n     }"}, {"sha": "d08c9b3257a01bd01582980e0f3cc1cd9c5938ad", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -323,7 +323,7 @@ fn test_arena_destructors() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_arena_destructors_fail() {\n     let arena = Arena::new();\n     // Put some stuff in the arena."}, {"sha": "68ff94cfbfb942f33ec251dceee5941156f5a90b", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -490,7 +490,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_overflow() {\n         #[allow(dead_code)]\n         #[derive(Copy)]"}, {"sha": "cffa4bbfbf41134bf12a04d9ed8163bb88ade7a4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1647,14 +1647,14 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_tail_empty() {\n         let a = Vec::<i32>::new();\n         a.tail();\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_tail_mut_empty() {\n         let mut a = Vec::<i32>::new();\n         a.tail_mut();\n@@ -1681,14 +1681,14 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_init_empty() {\n         let a = Vec::<i32>::new();\n         a.init();\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_init_mut_empty() {\n         let mut a = Vec::<i32>::new();\n         a.init_mut();\n@@ -1790,7 +1790,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_swap_remove_fail() {\n         let mut v = vec![1];\n         let _ = v.swap_remove(0);\n@@ -2205,7 +2205,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_insert_oob() {\n         let mut a = vec![1, 2, 3];\n         a.insert(4, 5);\n@@ -2229,7 +2229,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_remove_fail() {\n         let mut a = vec![1];\n         let _ = a.remove(0);\n@@ -2253,7 +2253,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_permute_fail() {\n         let v: [(Box<_>, Rc<_>); 4] =\n             [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n@@ -2528,7 +2528,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_windowsator_0() {\n         let v = &[1,2,3,4];\n         let _it = v.windows(0);\n@@ -2564,7 +2564,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_chunksator_0() {\n         let v = &[1,2,3,4];\n         let _it = v.chunks(0);\n@@ -2647,7 +2647,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_overflow_does_not_cause_segfault() {\n         let mut v = vec![];\n         v.reserve_exact(-1);\n@@ -2656,7 +2656,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_overflow_does_not_cause_segfault_managed() {\n         let mut v = vec![Rc::new(1)];\n         v.reserve_exact(-1);\n@@ -2833,7 +2833,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_mut_chunks_0() {\n         let mut v = [1, 2, 3, 4];\n         let _it = v.chunks_mut(0);"}, {"sha": "49317a7f0cecdfab20de2a20dc69c1668d9dc556", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1877,7 +1877,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_fail() {\n         \"\u4e2d\u534eVi\u1ec7t Nam\".slice(0, 2);\n     }\n@@ -2095,7 +2095,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_as_bytes_fail() {\n         // Don't double free. (I'm not sure if this exercises the\n         // original problem code path anymore.)\n@@ -2132,7 +2132,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_subslice_offset_2() {\n         let a = \"alchemiter\";\n         let b = \"cruxtruder\";"}, {"sha": "a34193a4d2c85f1fd32fb62dd239ee99a7b6f712", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1232,14 +1232,14 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_str_truncate_invalid_len() {\n         let mut s = String::from_str(\"12345\");\n         s.truncate(6);\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_str_truncate_split_codepoint() {\n         let mut s = String::from_str(\"\\u{FC}\"); // \u00fc\n         s.truncate(1);\n@@ -1272,7 +1272,7 @@ mod tests {\n         assert_eq!(s, \"\u0e44\u0e17\u0e22\u4e2d\u534eVit Nam; foobar\");\n     }\n \n-    #[test] #[should_fail]\n+    #[test] #[should_panic]\n     fn remove_bad() {\n         \"\u0e28\".to_string().remove(1);\n     }\n@@ -1286,8 +1286,8 @@ mod tests {\n         assert_eq!(s, \"\u1ec7foo\u0e22bar\");\n     }\n \n-    #[test] #[should_fail] fn insert_bad1() { \"\".to_string().insert(1, 't'); }\n-    #[test] #[should_fail] fn insert_bad2() { \"\u1ec7\".to_string().insert(1, 't'); }\n+    #[test] #[should_panic] fn insert_bad1() { \"\".to_string().insert(1, 't'); }\n+    #[test] #[should_panic] fn insert_bad2() { \"\u1ec7\".to_string().insert(1, 't'); }\n \n     #[test]\n     fn test_slicing() {"}, {"sha": "ca0092a6e66ddb942c07d2b2b0cb8c55d6c38776", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -2242,7 +2242,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_vec_truncate_fail() {\n         struct BadElem(i32);\n         impl Drop for BadElem {\n@@ -2265,49 +2265,49 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_index_out_of_bounds() {\n         let vec = vec![1, 2, 3];\n         let _ = vec[3];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_out_of_bounds_1() {\n         let x = vec![1, 2, 3, 4, 5];\n         &x[-1..];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_out_of_bounds_2() {\n         let x = vec![1, 2, 3, 4, 5];\n         &x[..6];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_out_of_bounds_3() {\n         let x = vec![1, 2, 3, 4, 5];\n         &x[-1..4];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_out_of_bounds_4() {\n         let x = vec![1, 2, 3, 4, 5];\n         &x[1..6];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_slice_out_of_bounds_5() {\n         let x = vec![1, 2, 3, 4, 5];\n         &x[3..2];\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_swap_remove_empty() {\n         let mut vec= Vec::<i32>::new();\n         vec.swap_remove(0);\n@@ -2326,7 +2326,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_map_in_place_incompatible_types_fail() {\n         let v = vec![0, 1, 2];\n         v.map_in_place(|_| ());"}, {"sha": "cab589d55beae584a18385f4911fb2830a72c959", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1884,7 +1884,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_index_out_of_bounds() {\n         let mut deq = VecDeque::new();\n         for i in 1..4 {"}, {"sha": "431c8d5df8c0a11dfa27efa2394b1a2db30a57a8", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1432,7 +1432,7 @@ mod test_map {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_index_nonexistent() {\n         let mut map = VecMap::new();\n "}, {"sha": "3397cbb18faa09c38284194e5149a95cb7141047", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -109,7 +109,7 @@ fn double_borrow_single_release_no_borrow_mut() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn discard_doesnt_unborrow() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();"}, {"sha": "2a48395271db3804ccb20a0b0c6be55bc67e72f4", "filename": "src/libcoretest/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffinally.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -30,7 +30,7 @@ fn test_success() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_fail() {\n     let mut i = 0;\n     try_finally("}, {"sha": "7db8db444ff20901b67040498155a4c2196a90a3", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -161,7 +161,7 @@ fn test_format_radix() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_radix_base_too_large() {\n     let _ = radix(55, 37);\n }"}, {"sha": "0f4e7fcdda57bdb3469316492c823aa141acbdd9", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -581,7 +581,7 @@ fn test_rposition() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_rposition_panic() {\n     let v: [(Box<_>, Box<_>); 4] =\n         [(box 0, box 0), (box 0, box 0),"}, {"sha": "fe0b10e91192bce5c1b62e288d0b0c9df9ffc748", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -80,7 +80,7 @@ fn test_option_dance() {\n     assert!(y.is_none());\n }\n \n-#[test] #[should_fail]\n+#[test] #[should_panic]\n fn test_option_too_much_dance() {\n     let mut y = Some(marker::NoCopy);\n     let _y2 = y.take().unwrap();\n@@ -139,14 +139,14 @@ fn test_unwrap() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_unwrap_panic1() {\n     let x: Option<int> = None;\n     x.unwrap();\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n fn test_unwrap_panic2() {\n     let x: Option<String> = None;\n     x.unwrap();"}, {"sha": "1c175ba99f7739619bd7c7b90148666d27c41052", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -126,7 +126,7 @@ pub fn test_unwrap_or_else() {\n }\n \n #[test]\n-#[should_fail]\n+#[should_panic]\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> int {\n         if msg == \"I got this.\" {"}, {"sha": "bf9d334e8a4734bf7814d31fdf5a30f49a458808", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -109,12 +109,12 @@ mod test {\n         }\n     }\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_exp_invalid_lambda_zero() {\n         Exp::new(0.0);\n     }\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_exp_invalid_lambda_neg() {\n         Exp::new(-10.0);\n     }"}, {"sha": "ae3724a2b431a1ca371465ced275fd5dfb13d88b", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -356,7 +356,7 @@ mod test {\n         }\n     }\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_chi_squared_invalid_dof() {\n         ChiSquared::new(-1.0);\n     }"}, {"sha": "9775507b3cd578b38abd7c1225da82d0b8162369", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -351,16 +351,16 @@ mod tests {\n            [50, 51, 52, 53, 54, 55, 56]);\n     }\n \n-    #[test] #[should_fail]\n+    #[test] #[should_panic]\n     fn test_weighted_choice_no_items() {\n         WeightedChoice::<int>::new(&mut []);\n     }\n-    #[test] #[should_fail]\n+    #[test] #[should_panic]\n     fn test_weighted_choice_zero_weight() {\n         WeightedChoice::new(&mut [Weighted { weight: 0, item: 0},\n                                   Weighted { weight: 0, item: 1}]);\n     }\n-    #[test] #[should_fail]\n+    #[test] #[should_panic]\n     fn test_weighted_choice_weight_overflows() {\n         let x = (-1) as uint / 2; // x + x + 2 is the overflow\n         WeightedChoice::new(&mut [Weighted { weight: x, item: 0 },"}, {"sha": "ab5d03ad82557adfe8fbf28eca8dbd5d13df47e0", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -175,7 +175,7 @@ mod tests {\n         }\n     }\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_normal_invalid_sd() {\n         Normal::new(10.0, -1.0);\n     }\n@@ -191,7 +191,7 @@ mod tests {\n         }\n     }\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_log_normal_invalid_sd() {\n         LogNormal::new(10.0, -1.0);\n     }"}, {"sha": "c5a260346e0adf17dc464bb62a57d4313d3e1e82", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -169,12 +169,12 @@ mod tests {\n     use distributions::{Sample, IndependentSample};\n     use super::Range as Range;\n \n-    #[should_fail]\n+    #[should_panic]\n     #[test]\n     fn test_range_bad_limits_equal() {\n         Range::new(10, 10);\n     }\n-    #[should_fail]\n+    #[should_panic]\n     #[test]\n     fn test_range_bad_limits_flipped() {\n         Range::new(10, 5);"}, {"sha": "1a399519296a829ecd782994096376ff890a392b", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -548,7 +548,7 @@ mod tests {\n \n     // A simple failure case - adding 1 to the max value\n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_add_bytes_to_bits_overflow() {\n         super::add_bytes_to_bits::<u64>(Int::max_value(), 1);\n     }"}, {"sha": "e7312d6548e9f5798a811923818389ecad43b141", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -114,7 +114,7 @@ pub fn run(input: &str,\n #[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n-           should_fail: bool, no_run: bool, as_test_harness: bool) {\n+           should_panic: bool, no_run: bool, as_test_harness: bool) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), true, as_test_harness);\n@@ -210,9 +210,9 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n                             \" - maybe your tempdir is mounted with noexec?\"\n                         } else { \"\" }),\n         Ok(out) => {\n-            if should_fail && out.status.success() {\n+            if should_panic && out.status.success() {\n                 panic!(\"test executable succeeded when it should have failed\");\n-            } else if !should_fail && !out.status.success() {\n+            } else if !should_panic && !out.status.success() {\n                 panic!(\"test executable failed:\\n{:?}\",\n                       str::from_utf8(&out.stdout));\n             }\n@@ -279,7 +279,7 @@ impl Collector {\n     }\n \n     pub fn add_test(&mut self, test: String,\n-                    should_fail: bool, no_run: bool, should_ignore: bool, as_test_harness: bool) {\n+                    should_panic: bool, no_run: bool, should_ignore: bool, as_test_harness: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -295,14 +295,14 @@ impl Collector {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),\n                 ignore: should_ignore,\n-                should_fail: testing::ShouldFail::No, // compiler failures are test failures\n+                should_panic: testing::ShouldPanic::No, // compiler failures are test failures\n             },\n             testfn: testing::DynTestFn(Thunk::new(move|| {\n                 runtest(&test,\n                         &cratename,\n                         libs,\n                         externs,\n-                        should_fail,\n+                        should_panic,\n                         no_run,\n                         as_test_harness);\n             }))"}, {"sha": "9502302aa53ab8de04827a7af22e91b23bc8d93e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -2197,7 +2197,7 @@ mod test_map {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_index_nonexistent() {\n         let mut map = HashMap::new();\n "}, {"sha": "cbb7bf043274506cee50a88ae535ac30f79711e2", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -658,7 +658,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn dont_panic_in_drop_on_panicked_flush() {\n         struct FailFlushWriter;\n "}, {"sha": "ec30121d78db807afbab0b9495dccd6ce7f4b204", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -396,7 +396,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn read_to_end_error() {\n         let mut reader = ThreeChunkReader {\n             count: 0,"}, {"sha": "375fe6ce483aae520dbb3236ce0bbf75c0af3d15", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -333,23 +333,23 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn oneshot_fail() {\n         let mut timer = Timer::new().unwrap();\n         let _rx = timer.oneshot(Duration::milliseconds(1));\n         panic!();\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn period_fail() {\n         let mut timer = Timer::new().unwrap();\n         let _rx = timer.periodic(Duration::milliseconds(1));\n         panic!();\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn normal_fail() {\n         let _timer = Timer::new().unwrap();\n         panic!();"}, {"sha": "5f2f1728be1a6317a65792f4be1f1351f89ec58c", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1324,7 +1324,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_not_utf8_panics() {\n         Path::new(b\"hello\\x80.txt\");\n     }"}, {"sha": "7382cc6e2eb33cd1f19fb15e21593ac01247ca11", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -500,14 +500,14 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_gen_range_panic_int() {\n         let mut r = thread_rng();\n         r.gen_range(5, -2);\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_gen_range_panic_uint() {\n         let mut r = thread_rng();\n         r.gen_range(5, 2);"}, {"sha": "c56dc387b7fe6773fa0c69ad0188242c729e3974", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -114,7 +114,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_reader_rng_insufficient_bytes() {\n         let mut rng = ReaderRng::new(MemReader::new(vec!()));\n         let mut v = [0; 3];"}, {"sha": "3499675f5422d81c508f37c405ae3ecbc4c5c05b", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -479,7 +479,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn two_mutexes() {\n         static M1: StaticMutex = MUTEX_INIT;\n         static M2: StaticMutex = MUTEX_INIT;"}, {"sha": "ee9bcd3dd89bf630d28886e8357f62ea41297def", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -204,7 +204,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_future_panic() {\n         let mut f = Future::spawn(move|| panic!());\n         let _x: String = f.get();"}, {"sha": "e41bc6d8683abb14a32df9de279ace42423ad01b", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -164,7 +164,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_zero_tasks_panic() {\n         TaskPool::new(0);\n     }"}, {"sha": "7a02df23b19c5659a287d06dceab3c16a7b23a6d", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1030,14 +1030,14 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn wtf8buf_truncate_fail_code_point_boundary() {\n         let mut string = Wtf8Buf::from_str(\"a\u00e9\");\n         string.truncate(2);\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn wtf8buf_truncate_fail_longer() {\n         let mut string = Wtf8Buf::from_str(\"a\u00e9\");\n         string.truncate(4);\n@@ -1133,7 +1133,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn wtf8_slice_not_code_point_boundary() {\n         &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2.. 4];\n     }\n@@ -1144,7 +1144,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn wtf8_slice_from_not_code_point_boundary() {\n         &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2..];\n     }\n@@ -1155,7 +1155,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn wtf8_slice_to_not_code_point_boundary() {\n         &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[5..];\n     }"}, {"sha": "7d2d4e53fe9fd43002db11920e775e60bfa7b06a", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -922,7 +922,7 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn t2 () {\n         let cm = CodeMap::new();\n         let fm = cm.new_filemap(\"blork.rs\".to_string(),"}, {"sha": "98c7aefcd8ad3275f68122308e65b87d790b441e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -1656,7 +1656,7 @@ mod test {\n     }\n \n     // make sure that macros can't escape fns\n-    #[should_fail]\n+    #[should_panic]\n     #[test] fn macros_cant_escape_fns_test () {\n         let src = \"fn bogus() {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n@@ -1670,7 +1670,7 @@ mod test {\n     }\n \n     // make sure that macros can't escape modules\n-    #[should_fail]\n+    #[should_panic]\n     #[test] fn macros_cant_escape_mods_test () {\n         let src = \"mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();"}, {"sha": "fae305f955174241d46b018609fbfd5a521c50f2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -813,7 +813,7 @@ mod test {\n                    }))\n     }\n \n-    #[should_fail]\n+    #[should_panic]\n     #[test] fn bad_path_expr_1() {\n         string_to_expr(\"::abc::def::return\".to_string());\n     }"}, {"sha": "5e858d8a79f766b3750fa6b1b4eaee7176d3c8d4", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -37,7 +37,7 @@ use {ast, ast_util};\n use ptr::P;\n use util::small_vector::SmallVector;\n \n-enum ShouldFail {\n+enum ShouldPanic {\n     No,\n     Yes(Option<InternedString>),\n }\n@@ -47,7 +47,7 @@ struct Test {\n     path: Vec<ast::Ident> ,\n     bench: bool,\n     ignore: bool,\n-    should_fail: ShouldFail\n+    should_panic: ShouldPanic\n }\n \n struct TestCtxt<'a> {\n@@ -136,7 +136,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &*i),\n                         ignore: is_ignored(&*i),\n-                        should_fail: should_fail(&*i)\n+                        should_panic: should_panic(&*i, self.cx.span_diagnostic)\n                     };\n                     self.cx.testfns.push(test);\n                     self.tests.push(i.ident);\n@@ -378,15 +378,23 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n-fn should_fail(i: &ast::Item) -> ShouldFail {\n-    match i.attrs.iter().find(|attr| attr.check_name(\"should_fail\")) {\n+fn should_panic(i: &ast::Item, diag: &diagnostic::SpanHandler) -> ShouldPanic {\n+    match i.attrs.iter().find(|attr| {\n+        if attr.check_name(\"should_panic\") { return true; }\n+        if attr.check_name(\"should_fail\") {\n+            diag.span_warn(attr.span, \"`#[should_fail]` is deprecated. Use `#[should_panic]` \\\n+                                       instead\");\n+            return true;\n+        }\n+        false\n+    }) {\n         Some(attr) => {\n             let msg = attr.meta_item_list()\n                 .and_then(|list| list.iter().find(|mi| mi.check_name(\"expected\")))\n                 .and_then(|mi| mi.value_str());\n-            ShouldFail::Yes(msg)\n+            ShouldPanic::Yes(msg)\n         }\n-        None => ShouldFail::No,\n+        None => ShouldPanic::No,\n     }\n }\n \n@@ -617,13 +625,13 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n                                   vec![name_expr]);\n \n     let ignore_expr = ecx.expr_bool(span, test.ignore);\n-    let should_fail_path = |name| {\n-        ecx.path(span, vec![self_id, test_id, ecx.ident_of(\"ShouldFail\"), ecx.ident_of(name)])\n+    let should_panic_path = |name| {\n+        ecx.path(span, vec![self_id, test_id, ecx.ident_of(\"ShouldPanic\"), ecx.ident_of(name)])\n     };\n-    let fail_expr = match test.should_fail {\n-        ShouldFail::No => ecx.expr_path(should_fail_path(\"No\")),\n-        ShouldFail::Yes(ref msg) => {\n-            let path = should_fail_path(\"Yes\");\n+    let fail_expr = match test.should_panic {\n+        ShouldPanic::No => ecx.expr_path(should_panic_path(\"No\")),\n+        ShouldPanic::Yes(ref msg) => {\n+            let path = should_panic_path(\"Yes\");\n             let arg = match *msg {\n                 Some(ref msg) => ecx.expr_some(span, ecx.expr_str(span, msg.clone())),\n                 None => ecx.expr_none(span),\n@@ -638,7 +646,7 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n         test_path(\"TestDesc\"),\n         vec![field(\"name\", name_expr),\n              field(\"ignore\", ignore_expr),\n-             field(\"should_fail\", fail_expr)]);\n+             field(\"should_panic\", fail_expr)]);\n \n \n     let mut visible_path = match cx.toplevel_reexport {"}, {"sha": "7ae9e4646e516b32bee9972485f904b3f974d2d6", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -234,7 +234,7 @@ mod tests {\n     use ast::Name;\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn i1 () {\n         let i : Interner<RcStr> = Interner::new();\n         i.get(Name(13));"}, {"sha": "5bd6591cfb097c770cf1aa658e8e495ad91f4e97", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -236,13 +236,13 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_expect_one_zero() {\n         let _: isize = SmallVector::zero().expect_one(\"\");\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_expect_one_many() {\n         SmallVector::many(vec!(1, 2)).expect_one(\"\");\n     }"}, {"sha": "1590291c88c16336a492d4a00341f77511f90231", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -90,7 +90,7 @@ pub mod test {\n              Metric, MetricMap,\n              StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n              run_test, test_main, test_main_static, filter_tests,\n-             parse_opts, StaticBenchFn, ShouldFail};\n+             parse_opts, StaticBenchFn, ShouldPanic};\n }\n \n pub mod stats;\n@@ -202,7 +202,7 @@ pub struct Bencher {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum ShouldFail {\n+pub enum ShouldPanic {\n     No,\n     Yes(Option<&'static str>)\n }\n@@ -213,7 +213,7 @@ pub enum ShouldFail {\n pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n-    pub should_fail: ShouldFail,\n+    pub should_panic: ShouldPanic,\n }\n \n unsafe impl Send for TestDesc {}\n@@ -351,10 +351,10 @@ Test Attributes:\n                      takes no arguments.\n     #[bench]       - Indicates a function is a benchmark to be run. This\n                      function takes one argument (test::Bencher).\n-    #[should_fail] - This function (also labeled with #[test]) will only pass if\n-                     the code causes a failure (an assertion failure or panic!)\n+    #[should_panic] - This function (also labeled with #[test]) will only pass if\n+                     the code causes a panic (an assertion failure or panic!)\n                      A message may be provided, which the failure string must\n-                     contain: #[should_fail(expected = \"foo\")].\n+                     contain: #[should_panic(expected = \"foo\")].\n     #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n@@ -717,13 +717,13 @@ fn should_sort_failures_before_printing_them() {\n     let test_a = TestDesc {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n-        should_fail: ShouldFail::No\n+        should_panic: ShouldPanic::No\n     };\n \n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n-        should_fail: ShouldFail::No\n+        should_panic: ShouldPanic::No\n     };\n \n     let mut st = ConsoleTestState {\n@@ -953,10 +953,10 @@ pub fn run_test(opts: &TestOpts,\n }\n \n fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any+Send>>) -> TestResult {\n-    match (&desc.should_fail, task_result) {\n-        (&ShouldFail::No, Ok(())) |\n-        (&ShouldFail::Yes(None), Err(_)) => TrOk,\n-        (&ShouldFail::Yes(Some(msg)), Err(ref err))\n+    match (&desc.should_panic, task_result) {\n+        (&ShouldPanic::No, Ok(())) |\n+        (&ShouldPanic::Yes(None), Err(_)) => TrOk,\n+        (&ShouldPanic::Yes(Some(msg)), Err(ref err))\n             if err.downcast_ref::<String>()\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n@@ -1151,7 +1151,7 @@ mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n                MetricMap,\n-               StaticTestName, DynTestName, DynTestFn, ShouldFail};\n+               StaticTestName, DynTestName, DynTestFn, ShouldPanic};\n     use std::thunk::Thunk;\n     use std::sync::mpsc::channel;\n \n@@ -1162,7 +1162,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n-                should_fail: ShouldFail::No,\n+                should_panic: ShouldPanic::No,\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1179,7 +1179,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n-                should_fail: ShouldFail::No,\n+                should_panic: ShouldPanic::No,\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1190,13 +1190,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_should_fail() {\n+    fn test_should_panic() {\n         fn f() { panic!(); }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: ShouldFail::Yes(None)\n+                should_panic: ShouldPanic::Yes(None)\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1207,13 +1207,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_should_fail_good_message() {\n+    fn test_should_panic_good_message() {\n         fn f() { panic!(\"an error message\"); }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: ShouldFail::Yes(Some(\"error message\"))\n+                should_panic: ShouldPanic::Yes(Some(\"error message\"))\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1224,13 +1224,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_should_fail_bad_message() {\n+    fn test_should_panic_bad_message() {\n         fn f() { panic!(\"an error message\"); }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: ShouldFail::Yes(Some(\"foobar\"))\n+                should_panic: ShouldPanic::Yes(Some(\"foobar\"))\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1241,13 +1241,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_should_fail_but_succeeds() {\n+    fn test_should_panic_but_succeeds() {\n         fn f() { }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: ShouldFail::Yes(None)\n+                should_panic: ShouldPanic::Yes(None)\n             },\n             testfn: DynTestFn(Thunk::new(move|| f())),\n         };\n@@ -1283,15 +1283,15 @@ mod tests {\n                 desc: TestDesc {\n                     name: StaticTestName(\"1\"),\n                     ignore: true,\n-                    should_fail: ShouldFail::No,\n+                    should_panic: ShouldPanic::No,\n                 },\n                 testfn: DynTestFn(Thunk::new(move|| {})),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n-                    should_fail: ShouldFail::No,\n+                    should_panic: ShouldPanic::No,\n                 },\n                 testfn: DynTestFn(Thunk::new(move|| {})),\n             });\n@@ -1327,7 +1327,7 @@ mod tests {\n                     desc: TestDesc {\n                         name: DynTestName((*name).clone()),\n                         ignore: false,\n-                        should_fail: ShouldFail::No,\n+                        should_panic: ShouldPanic::No,\n                     },\n                     testfn: DynTestFn(Thunk::new(testfn)),\n                 };"}, {"sha": "e18c5d9631a702358a6964b918fe8b2db3bb3267", "filename": "src/test/run-fail/test-should-fail-bad-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -14,7 +14,7 @@\n // ignore-pretty: does not work well with `--test`\n \n #[test]\n-#[should_fail(expected = \"foobar\")]\n+#[should_panic(expected = \"foobar\")]\n fn test_foo() {\n     panic!(\"blah\")\n }"}, {"sha": "b8e05b4d35ab78da407efe8174b2d383a2bac5ca", "filename": "src/test/run-pass/test-should-fail-good-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638832e64cc62ec46721161ca19731ba00d4da58/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638832e64cc62ec46721161ca19731ba00d4da58/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs?ref=638832e64cc62ec46721161ca19731ba00d4da58", "patch": "@@ -12,13 +12,13 @@\n // ignore-pretty: does not work well with `--test`\n \n #[test]\n-#[should_fail(expected = \"foo\")]\n+#[should_panic(expected = \"foo\")]\n fn test_foo() {\n     panic!(\"foo bar\")\n }\n \n #[test]\n-#[should_fail(expected = \"foo\")]\n+#[should_panic(expected = \"foo\")]\n fn test_foo_dynamic() {\n     panic!(\"{} bar\", \"foo\")\n }"}]}