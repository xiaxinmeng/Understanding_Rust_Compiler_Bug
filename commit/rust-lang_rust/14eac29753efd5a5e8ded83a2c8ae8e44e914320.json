{"sha": "14eac29753efd5a5e8ded83a2c8ae8e44e914320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZWFjMjk3NTNlZmQ1YTVlOGRlZDgzYTJjOGFlOGU0NGU5MTQzMjA=", "commit": {"author": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-13T13:53:22Z"}, "committer": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-13T13:53:22Z"}, "message": "Address the PR review", "tree": {"sha": "c3aa0f50b097de1d8ee7ccc7228d723fd003210f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3aa0f50b097de1d8ee7ccc7228d723fd003210f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14eac29753efd5a5e8ded83a2c8ae8e44e914320", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEyGBf8fbcGdY6ClTCOhaZhUeDJOkFAljvguAACgkQOhaZhUeD\nJOnAiAf+M7iUe0nTa9OJJgfisqhdkC54wO4xcJE9oEt5JkIk1ZZtEBvlidEoxNwj\nG9mnlVg50xMpGkYSjhaFB6V1LrTWTXSkqNIE2Zm7IhAohoKaaAmM09hQtg9dgPHB\nok6PhrLJNqPVzrJOwKHTLmFzTt3+UUS4+NrYMfDCAqMaPGOj2E6gMVobkHoH6Upz\nXrHYwDunz2pAN9oRSPVXnMKLQCW6hVLsBaW8GKXpotwnmjWfjDt0MyIcLRK98K+1\nSLq4YZyTsMFhAbSt8ohC3aLi1UB5js/1RN1l8pwOxxumAncoWLobPV2FcjT7QEic\nhodIPtnE4t5VLFxVfW+jQC0H+77LMg==\n=Ovc5\n-----END PGP SIGNATURE-----", "payload": "tree c3aa0f50b097de1d8ee7ccc7228d723fd003210f\nparent a50737051abdc943f96c6e89a732fd00e58248e8\nauthor alexey zabelin <zabelin.alex@gmail.com> 1492091602 -0400\ncommitter alexey zabelin <zabelin.alex@gmail.com> 1492091602 -0400\n\nAddress the PR review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14eac29753efd5a5e8ded83a2c8ae8e44e914320", "html_url": "https://github.com/rust-lang/rust/commit/14eac29753efd5a5e8ded83a2c8ae8e44e914320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14eac29753efd5a5e8ded83a2c8ae8e44e914320/comments", "author": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50737051abdc943f96c6e89a732fd00e58248e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50737051abdc943f96c6e89a732fd00e58248e8", "html_url": "https://github.com/rust-lang/rust/commit/a50737051abdc943f96c6e89a732fd00e58248e8"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "3fbf9f06d99f6fdbb49f3143f5327ff9fb65d35d", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14eac29753efd5a5e8ded83a2c8ae8e44e914320/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/14eac29753efd5a5e8ded83a2c8ae8e44e914320/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=14eac29753efd5a5e8ded83a2c8ae8e44e914320", "patch": "@@ -761,8 +761,6 @@ closure_type := [ 'unsafe' ] [ '<' lifetime-list '>' ] '|' arg-list '|'\n                 [ ':' bound-list ] [ '->' type ]\n lifetime-list := lifetime | lifetime ',' lifetime-list\n arg-list := ident ':' type | ident ':' type ',' arg-list\n-bound-list := bound | bound '+' bound-list\n-bound := path | lifetime\n ```\n \n ### Never type\n@@ -786,6 +784,7 @@ never_type : \"!\" ;\n bound := ty_bound | lt_bound\n lt_bound := lifetime\n ty_bound := [?] [ for<lt_param_defs> ] simple_path\n+bound-list := bound | bound '+' bound-list '+' ?\n ```\n \n ### Self types"}, {"sha": "0fddbca72cdc18c5be8ed42608086b1ee1ee0052", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eac29753efd5a5e8ded83a2c8ae8e44e914320/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14eac29753efd5a5e8ded83a2c8ae8e44e914320/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=14eac29753efd5a5e8ded83a2c8ae8e44e914320", "patch": "@@ -4066,7 +4066,7 @@ impl<'a> Parser<'a> {\n         }).emit();\n     }\n \n-    // Parse bounds of a type parameter `BOUND + BOUND + BOUND`.\n+    // Parse bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = TY_BOUND | LT_BOUND\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n     // TY_BOUND = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n@@ -4107,7 +4107,7 @@ impl<'a> Parser<'a> {\n         self.parse_ty_param_bounds_common(true)\n     }\n \n-    // Parse bounds of a type parameter `BOUND + BOUND + BOUND`.\n+    // Parse bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = LT_BOUND (e.g. `'a`)\n     fn parse_lt_param_bounds(&mut self) -> Vec<Lifetime> {\n         let mut lifetimes = Vec::new();"}]}