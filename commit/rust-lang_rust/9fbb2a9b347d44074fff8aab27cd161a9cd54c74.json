{"sha": "9fbb2a9b347d44074fff8aab27cd161a9cd54c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYmIyYTliMzQ3ZDQ0MDc0ZmZmOGFhYjI3Y2QxNjFhOWNkNTRjNzQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-02T19:43:24Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-02T19:52:15Z"}, "message": "Fix missing calls to drop on unwind with lto=fat; issue 64655.", "tree": {"sha": "cf95ac2a7c420e3c22ceb2409f9f28e3d4ad6dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf95ac2a7c420e3c22ceb2409f9f28e3d4ad6dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fbb2a9b347d44074fff8aab27cd161a9cd54c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fbb2a9b347d44074fff8aab27cd161a9cd54c74", "html_url": "https://github.com/rust-lang/rust/commit/9fbb2a9b347d44074fff8aab27cd161a9cd54c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fbb2a9b347d44074fff8aab27cd161a9cd54c74/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e869133b9888dc5abde54f4f31cb797ed9c7874", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e869133b9888dc5abde54f4f31cb797ed9c7874", "html_url": "https://github.com/rust-lang/rust/commit/1e869133b9888dc5abde54f4f31cb797ed9c7874"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "4189904a8018c309d630ce8ef0e0e0cdd1dffe1e", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9fbb2a9b347d44074fff8aab27cd161a9cd54c74/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbb2a9b347d44074fff8aab27cd161a9cd54c74/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=9fbb2a9b347d44074fff8aab27cd161a9cd54c74", "patch": "@@ -273,25 +273,50 @@ pub fn from_fn_attrs(\n     } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n         // Special attribute for allocator functions, which can't unwind\n         false\n-    } else if let Some(id) = id {\n+    } else if let Some(_) = id {\n+        // rust-lang/rust#64655, rust-lang/rust#63909: to minimize\n+        // risk associated with changing cases where nounwind\n+        // attribute is attached, this code is deliberately mimicking\n+        // old control flow based on whether `id` is `Some` or `None`.\n+        //\n+        // However, in the long term we should either:\n+        // - fold this into final else (i.e. stop inspecting `id`)\n+        // - or better still: whole-heartedly adopt Rust PR #63909.\n+        //\n+        // see also Rust RFC 2753.\n+\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-        if cx.tcx.is_foreign_item(id) {\n-            // Foreign items like `extern \"C\" { fn foo(); }` are assumed not to\n-            // unwind\n-            false\n-        } else if sig.abi != Abi::Rust && sig.abi != Abi::RustCall {\n-            // Any items defined in Rust that *don't* have the `extern` ABI are\n-            // defined to not unwind. We insert shims to abort if an unwind\n-            // happens to enforce this.\n-            false\n-        } else {\n-            // Anything else defined in Rust is assumed that it can possibly\n-            // unwind\n+        if sig.abi == Abi::Rust || sig.abi == Abi::RustCall {\n+            // Any Rust method (or `extern \"Rust\" fn` or `extern\n+            // \"rust-call\" fn`) is explicitly allowed to unwind\n+            // (unless it has no-unwind attribute, handled above).\n             true\n+        } else {\n+            // Anything else is either:\n+            //\n+            //  1. A foreign item (like `extern \"C\" { fn foo(); }`), or\n+            //\n+            //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n+            //\n+            // Foreign items (case 1) are assumed to not unwind; it is\n+            // UB otherwise. (At least for now; see also\n+            // rust-lang/rust#63909 and Rust RFC 2753.)\n+            //\n+            // Items defined in Rust with non-Rust ABIs (case 2) are\n+            // defined to not unwind. We insert shims to abort if an\n+            // unwind happens to enforce this.\n+            //\n+            // In either case, we mark item as explicitly nounwind.\n+            false\n         }\n     } else {\n         // assume this can possibly unwind, avoiding the application of a\n         // `nounwind` attribute below.\n+        //\n+        // (But: See comments in previous branch. Specifically, it is\n+        // unclear whether there is real value in the assumption this\n+        // can unwind. The conservatism here may just be papering over\n+        // a real problem by making some UB a bit harder to hit.)\n         true\n     });\n "}]}