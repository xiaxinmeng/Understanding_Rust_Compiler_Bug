{"sha": "4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDZhOTU4NjA1MDc2MmEzZDdlNGU5YmZlZTJmYWEzNmZiZjcyNmY=", "commit": {"author": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-24T00:26:39Z"}, "committer": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-24T00:49:36Z"}, "message": "Add Target (de)serialization for environment vars\n\nAlso turn WebAssembly backend back on in its builder.", "tree": {"sha": "d0f159d601762bc9eb46aa988d9db74cfc9450fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f159d601762bc9eb46aa988d9db74cfc9450fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "html_url": "https://github.com/rust-lang/rust/commit/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f/comments", "author": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f97449b0a3043ecf91cdcc75ee69018cda6176", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f97449b0a3043ecf91cdcc75ee69018cda6176", "html_url": "https://github.com/rust-lang/rust/commit/a4f97449b0a3043ecf91cdcc75ee69018cda6176"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "ad57a1191e4e2fee447ce6a16b025ac2c1e4d4a0", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "patch": "@@ -38,7 +38,7 @@ ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten,wasm32-experimental-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --experimental-targets=WebAssembly\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n "}, {"sha": "5df227e39acbdaf0c9eb70d9c2434994f64f311c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad6a9586050762a3d7e4e9bfee2faa36fbf726f/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=4ad6a9586050762a3d7e4e9bfee2faa36fbf726f", "patch": "@@ -624,6 +624,21 @@ impl Target {\n                     base.options.$key_name = args;\n                 }\n             } );\n+            ($key_name:ident, env) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(a) = obj.find(&name[..]).and_then(|o| o.as_array()) {\n+                    for o in a {\n+                        if let Some(s) = o.as_string() {\n+                            let p = s.split('=').collect::<Vec<_>>();\n+                            if p.len() == 2 {\n+                                let k = p[0].to_string();\n+                                let v = p[1].to_string();\n+                                base.options.$key_name.push((k, v));\n+                            }\n+                        }\n+                    }\n+                }\n+            } );\n         }\n \n         key!(is_builtin, bool);\n@@ -635,6 +650,7 @@ impl Target {\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n         key!(post_link_args, link_args);\n+        key!(link_env, env);\n         key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n@@ -789,6 +805,17 @@ impl ToJson for Target {\n                     d.insert(name.to_string(), obj.to_json());\n                 }\n             } );\n+            (env - $attr:ident) => ( {\n+                let name = (stringify!($attr)).replace(\"_\", \"-\");\n+                if default.$attr != self.options.$attr {\n+                    let obj = self.options.$attr\n+                        .iter()\n+                        .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n+                        .collect::<Vec<_>>();\n+                    d.insert(name.to_string(), obj.to_json());\n+                }\n+            } );\n+\n         }\n \n         target_val!(llvm_target);\n@@ -810,6 +837,7 @@ impl ToJson for Target {\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n         target_option_val!(link_args - post_link_args);\n+        target_option_val!(env - link_env);\n         target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);"}]}