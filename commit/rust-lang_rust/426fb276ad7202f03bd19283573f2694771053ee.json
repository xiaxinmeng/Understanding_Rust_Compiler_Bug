{"sha": "426fb276ad7202f03bd19283573f2694771053ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNmZiMjc2YWQ3MjAyZjAzYmQxOTI4MzU3M2YyNjk0NzcxMDUzZWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T23:52:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T23:52:23Z"}, "message": "Rollup merge of #69573 - pnkfelix:issue-53114-add-tests, r=Centril\n\ntests encoding current behavior for various cases of \"binding\" to _.\n\nThe `_` binding form is special, in that it encodes a \"no-op\": nothing is actually bound, and thus nothing is moved or borrowed in this scenario. Usually we do the \"right\" thing in all such cases. The exceptions are explicitly pointed out in this test case, so that we keep track of whether they are eventually fixed.\n\nCc #53114.\n\n(This does not close the aforementioned issue; it just adds the tests encoding the current behavior, which we hope to eventually fix.)", "tree": {"sha": "1016b95a0c9c5dcd53ec66ce36d8bf2596e889b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1016b95a0c9c5dcd53ec66ce36d8bf2596e889b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426fb276ad7202f03bd19283573f2694771053ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekQa3CRBK7hj4Ov3rIwAAdHIIAEn2SO3EXsOyZbbcvmjWZlYJ\nKR1Esqn8x9G7+HsZ6JTyLHRK+iT+9Rw60Oiw5/DIeZRva06yyVyCuxsgU2vtA+WX\nlki46xT9vhPc3ZV3eLjziVenCYIzj4P0LXgmR20UJbWfYkfeknru8Dio07MPBcFP\nm5N+J74BOk+oMkzEUefEvGero4Jt+XyqJhmf9KafLC1qzwAbkEW6RmrKnhzQrDbf\neny/ti+HtuFpsIK+/VcEYmDbGFuzi62eyomm3yYD5XV1vlpRE9Bpbq8vxYmi57CI\nqGFodZExVT1gAe3WckaMgmneVzNB4x2U7Z3Fa1kvkfmXC0i/IFgZkv0ETbaX5zQ=\n=JfIj\n-----END PGP SIGNATURE-----\n", "payload": "tree 1016b95a0c9c5dcd53ec66ce36d8bf2596e889b5\nparent 14061868b3960d8a68a079bd276dde85936970ac\nparent 22ea3a4476e3b2ecef218524f132b57ea14c64de\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586562743 +0200\ncommitter GitHub <noreply@github.com> 1586562743 +0200\n\nRollup merge of #69573 - pnkfelix:issue-53114-add-tests, r=Centril\n\ntests encoding current behavior for various cases of \"binding\" to _.\n\nThe `_` binding form is special, in that it encodes a \"no-op\": nothing is actually bound, and thus nothing is moved or borrowed in this scenario. Usually we do the \"right\" thing in all such cases. The exceptions are explicitly pointed out in this test case, so that we keep track of whether they are eventually fixed.\n\nCc #53114.\n\n(This does not close the aforementioned issue; it just adds the tests encoding the current behavior, which we hope to eventually fix.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426fb276ad7202f03bd19283573f2694771053ee", "html_url": "https://github.com/rust-lang/rust/commit/426fb276ad7202f03bd19283573f2694771053ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426fb276ad7202f03bd19283573f2694771053ee/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14061868b3960d8a68a079bd276dde85936970ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/14061868b3960d8a68a079bd276dde85936970ac", "html_url": "https://github.com/rust-lang/rust/commit/14061868b3960d8a68a079bd276dde85936970ac"}, {"sha": "22ea3a4476e3b2ecef218524f132b57ea14c64de", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ea3a4476e3b2ecef218524f132b57ea14c64de", "html_url": "https://github.com/rust-lang/rust/commit/22ea3a4476e3b2ecef218524f132b57ea14c64de"}], "stats": {"total": 300, "additions": 300, "deletions": 0}, "files": [{"sha": "7646472f45fac4e78ef29b4faf4425dcba9c030b", "filename": "src/test/ui/binding/issue-53114-borrow-checks.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.rs?ref=426fb276ad7202f03bd19283573f2694771053ee", "patch": "@@ -0,0 +1,84 @@\n+// Issue #53114: NLL's borrow check had some deviations from the old borrow\n+// checker, and both had some deviations from our ideal state. This test\n+// captures the behavior of how `_` bindings are handled with respect to how we\n+// flag expressions that are meant to request unsafe blocks.\n+#![allow(irrefutable_let_patterns)]\n+struct M;\n+\n+fn let_wild_gets_moved_expr() {\n+    let m = M;\n+    drop(m);\n+    let _ = m; // accepted, and want it to continue to be\n+\n+    let mm = (M, M); // variation on above with `_` in substructure\n+    let (_x, _) = mm;\n+    let (_, _y) = mm;\n+    let (_, _) = mm;\n+}\n+\n+fn match_moved_expr_to_wild() {\n+    let m = M;\n+    drop(m);\n+    match m { _ => { } } // #53114: should eventually be accepted too\n+    //~^ ERROR [E0382]\n+\n+    let mm = (M, M); // variation on above with `_` in substructure\n+    match mm { (_x, _) => { } }\n+    match mm { (_, _y) => { } }\n+    //~^ ERROR [E0382]\n+    match mm { (_, _) => { } }\n+    //~^ ERROR [E0382]\n+}\n+\n+fn if_let_moved_expr_to_wild() {\n+    let m = M;\n+    drop(m);\n+    if let _ = m { } // #53114: should eventually be accepted too\n+    //~^ ERROR [E0382]\n+\n+    let mm = (M, M); // variation on above with `_` in substructure\n+    if let (_x, _) = mm { }\n+    if let (_, _y) = mm { }\n+    //~^ ERROR [E0382]\n+    if let (_, _) = mm { }\n+    //~^ ERROR [E0382]\n+}\n+\n+fn let_wild_gets_borrowed_expr() {\n+    let mut m = M;\n+    let r = &mut m;\n+    let _ = m; // accepted, and want it to continue to be\n+    // let _x = m; // (compare with this error.)\n+    drop(r);\n+\n+    let mut mm = (M, M); // variation on above with `_` in substructure\n+    let (r1, r2) = (&mut mm.0, &mut mm.1);\n+    let (_, _) = mm;\n+    drop((r1, r2));\n+}\n+\n+fn match_borrowed_expr_to_wild() {\n+    let mut m = M;\n+    let r = &mut m;\n+    match m { _ => {} } ; // accepted, and want it to continue to be\n+    drop(r);\n+\n+    let mut mm = (M, M); // variation on above with `_` in substructure\n+    let (r1, r2) = (&mut mm.0, &mut mm.1);\n+    match mm { (_, _) => { } }\n+    drop((r1, r2));\n+}\n+\n+fn if_let_borrowed_expr_to_wild() {\n+    let mut m = M;\n+    let r = &mut m;\n+    if let _ = m { } // accepted, and want it to continue to be\n+    drop(r);\n+\n+    let mut mm = (M, M); // variation on above with `_` in substructure\n+    let (r1, r2) = (&mut mm.0, &mut mm.1);\n+    if let (_, _) = mm { }\n+    drop((r1, r2));\n+}\n+\n+fn main() { }"}, {"sha": "2a7a721324d69f18b0687912188389550afc8bef", "filename": "src/test/ui/binding/issue-53114-borrow-checks.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr?ref=426fb276ad7202f03bd19283573f2694771053ee", "patch": "@@ -0,0 +1,65 @@\n+error[E0382]: use of moved value: `m`\n+  --> $DIR/issue-53114-borrow-checks.rs:22:11\n+   |\n+LL |     let m = M;\n+   |         - move occurs because `m` has type `M`, which does not implement the `Copy` trait\n+LL |     drop(m);\n+   |          - value moved here\n+LL |     match m { _ => { } } // #53114: should eventually be accepted too\n+   |           ^ value used here after move\n+\n+error[E0382]: use of moved value: `mm`\n+  --> $DIR/issue-53114-borrow-checks.rs:27:11\n+   |\n+LL |     match mm { (_x, _) => { } }\n+   |                 -- value moved here\n+LL |     match mm { (_, _y) => { } }\n+   |           ^^ value used here after partial move\n+   |\n+   = note: move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `mm`\n+  --> $DIR/issue-53114-borrow-checks.rs:29:11\n+   |\n+LL |     match mm { (_, _y) => { } }\n+   |                    -- value moved here\n+LL |\n+LL |     match mm { (_, _) => { } }\n+   |           ^^ value used here after partial move\n+   |\n+   = note: move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `m`\n+  --> $DIR/issue-53114-borrow-checks.rs:36:16\n+   |\n+LL |     let m = M;\n+   |         - move occurs because `m` has type `M`, which does not implement the `Copy` trait\n+LL |     drop(m);\n+   |          - value moved here\n+LL |     if let _ = m { } // #53114: should eventually be accepted too\n+   |                ^ value used here after move\n+\n+error[E0382]: use of moved value: `mm`\n+  --> $DIR/issue-53114-borrow-checks.rs:41:22\n+   |\n+LL |     if let (_x, _) = mm { }\n+   |             -- value moved here\n+LL |     if let (_, _y) = mm { }\n+   |                      ^^ value used here after partial move\n+   |\n+   = note: move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `mm`\n+  --> $DIR/issue-53114-borrow-checks.rs:43:21\n+   |\n+LL |     if let (_, _y) = mm { }\n+   |                -- value moved here\n+LL |\n+LL |     if let (_, _) = mm { }\n+   |                     ^^ value used here after partial move\n+   |\n+   = note: move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "28adb7571a98ba091cd5a5e698a56ae3f04f2a9a", "filename": "src/test/ui/binding/issue-53114-safety-checks.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=426fb276ad7202f03bd19283573f2694771053ee", "patch": "@@ -0,0 +1,51 @@\n+// Issue #53114: NLL's borrow check had some deviations from the old borrow\n+// checker, and both had some deviations from our ideal state. This test\n+// captures the behavior of how `_` bindings are handled with respect to how we\n+// flag expressions that are meant to request unsafe blocks.\n+\n+#![feature(untagged_unions)]\n+\n+struct I(i64);\n+struct F(f64);\n+\n+union U { a: I, b: F }\n+\n+#[repr(packed)]\n+struct P {\n+    a: &'static i8,\n+    b: &'static u32,\n+}\n+\n+fn let_wild_gets_unsafe_field() {\n+    let u1 = U { a: I(0) };\n+    let u2 = U { a: I(1) };\n+    let p = P { a: &2, b: &3 };\n+    let _ = &p.b;  //~ WARN    E0133\n+    //~^  WARN will become a hard error\n+    let _ = u1.a;  // #53114: should eventually signal error as well\n+    let _ = &u2.a; //~ ERROR  [E0133]\n+\n+    // variation on above with `_` in substructure\n+    let (_,) = (&p.b,);  //~ WARN     E0133\n+    //~^  WARN will become a hard error\n+    let (_,) = (u1.a,);  //~ ERROR   [E0133]\n+    let (_,) = (&u2.a,); //~ ERROR   [E0133]\n+}\n+\n+fn match_unsafe_field_to_wild() {\n+    let u1 = U { a: I(0) };\n+    let u2 = U { a: I(1) };\n+    let p = P { a: &2, b: &3 };\n+    match &p.b  { _ => { } } //~ WARN     E0133\n+    //~^  WARN will become a hard error\n+    match u1.a  { _ => { } } //~ ERROR   [E0133]\n+    match &u2.a { _ => { } } //~ ERROR   [E0133]\n+\n+    // variation on above with `_` in substructure\n+    match (&p.b,)  { (_,) => { } } //~ WARN     E0133\n+    //~^  WARN will become a hard error\n+    match (u1.a,)  { (_,) => { } } //~ ERROR   [E0133]\n+    match (&u2.a,) { (_,) => { } } //~ ERROR   [E0133]\n+}\n+\n+fn main() { }"}, {"sha": "fc714a78bf64815c96e214b4247f2b9abff50f23", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/426fb276ad7202f03bd19283573f2694771053ee/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=426fb276ad7202f03bd19283573f2694771053ee", "patch": "@@ -0,0 +1,100 @@\n+warning: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-53114-safety-checks.rs:23:13\n+   |\n+LL |     let _ = &p.b;\n+   |             ^^^^\n+   |\n+   = note: `#[warn(safe_packed_borrows)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:26:13\n+   |\n+LL |     let _ = &u2.a;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+warning: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-53114-safety-checks.rs:29:17\n+   |\n+LL |     let (_,) = (&p.b,);\n+   |                 ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:31:17\n+   |\n+LL |     let (_,) = (u1.a,);\n+   |                 ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:32:17\n+   |\n+LL |     let (_,) = (&u2.a,);\n+   |                 ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+warning: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-53114-safety-checks.rs:39:11\n+   |\n+LL |     match &p.b  { _ => { } }\n+   |           ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:41:11\n+   |\n+LL |     match u1.a  { _ => { } }\n+   |           ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:42:11\n+   |\n+LL |     match &u2.a { _ => { } }\n+   |           ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+warning: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-53114-safety-checks.rs:45:12\n+   |\n+LL |     match (&p.b,)  { (_,) => { } }\n+   |            ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:47:12\n+   |\n+LL |     match (u1.a,)  { (_,) => { } }\n+   |            ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:48:12\n+   |\n+LL |     match (&u2.a,) { (_,) => { } }\n+   |            ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}