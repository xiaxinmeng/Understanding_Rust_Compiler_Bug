{"sha": "03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "node_id": "C_kwDOAAsO6NoAKDAzMzMyYjBhMjEyZTU2Y2MxNGFkNWJkOWFhN2IyNmNhZDJmNTkzZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-10T11:09:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-10T11:09:55Z"}, "message": "Rollup merge of #92670 - hermitcore:kernel, r=davidtwco\n\nadd kernel target for RustyHermit\n\nCurrently, we are thinking to use *-unknown-none targets instead to define for every platform our own one (see hermitcore/rusty-hermit#197). However, the current target aarch64-unknown-none-softfloat doesn't support dynamic relocation. Our RustyHermit project uses this feature and consequently we define a new target aarch64-unknown-hermitkernel to support it.\n\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\nI would be willing to be a target maintainer, though I would appreciate if others volunteered to help with that as well.\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nUses the same naming as the LLVM target, and the same convention as many other kernel targets (e.g. `x86_64_unknown_none_linuxkernel`). In contrast to the bare-metal target for the aarch64 architecture, the unikernel requires dynamic relocation.\n\n> Target names should not introduce undue confusion or ambiguity unless absolutely necessary to maintain ecosystem compatibility. For example, if the name of the target makes people extremely likely to form incorrect beliefs about what it targets, the name should be changed or augmented to disambiguate it.\n\nI don't believe there is any ambiguity here. It use the same convention on x86_64 architecture.\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nI don't see any legal issues here.\n\n> The target must not introduce license incompatibilities.\nAnything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\nThe target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. This applies whether the dependency is a Rust crate that would require adding new license exceptions (as specified by the tidy tool in the rust-lang/rust repository), or whether the dependency is a native library or binary. In other words, the introduction of the target must not cause a user installing or running a version of Rust or the Rust tools to be subject to any new license requirements.\nIf the target supports building host tools (such as rustc or cargo), those host tools must not depend on proprietary (non-FOSS) libraries, other than ordinary runtime libraries supplied by the platform and commonly used by other binaries built for the target. For instance, rustc built for the target may depend on a common proprietary C runtime library or console output library, but must not depend on a proprietary code generation library or code optimization library. Rust's license permits such combinations, but the Rust project has no interest in maintaining such combinations within the scope of Rust itself, even at tier 3.\nTargets should not require proprietary (non-FOSS) components to link a functional binary or library.\n\"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\" legal/licensing terms include but are not limited to: non-disclosure requirements, non-compete requirements, contributor license agreements (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms, requirements conditional on the employer or employment of any particular Rust developers, revocable terms, any requirements that create liability for the Rust project or its developers or users, or any requirements that adversely affect the livelihood or prospects of the Rust project or its developers or users.\n\nI see no issues with any of the above.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\nThis requirement does not prevent part or all of this policy from being cited in an explicit contract or work agreement (e.g. to implement or maintain support for a target). This requirement exists to ensure that a developer or team responsible for reviewing and approving a target does not face any legal threats or obligations that would prevent them from freely exercising their judgment in such approval, even if such judgment involves subjective matters or goes beyond the letter of these requirements.\n\nOnly relevant to those making approval decisions.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\n`core` and `alloc` can be used. For `std` exists already the target `aarch64_unknown_hermit`, which enables FPU support.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running tests (even if they do not pass), the documentation must explain how to run tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nUse `--target=aarch64_unknown_hermitkernel` option to cross compile. The target does currently not support running tests.\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\nBacklinks such as those generated by the issue/PR tracker when linking to an issue or PR are not considered a violation of this policy, within reason. However, such messages (even on a separate repository) must not generate notifications to anyone involved with a PR who has not requested such notifications.\n\nI don't foresee this being a problem.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\nIn particular, this may come up when working on closely related targets, such as variations of the same architecture with different features. Avoid introducing unconditional uses of features that another variation of the target may not have; use conditional compilation or runtime detection, as appropriate, to let each target run code supported by that target.\n\nNo other targets should be affected by the pull request.", "tree": {"sha": "807b7e50ae8e3375c71341a74bda223420cab8a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807b7e50ae8e3375c71341a74bda223420cab8a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBPKDCRBK7hj4Ov3rIwAAFC4IAEGPFA6HfBxyefpkln/XVFW1\ntM94WuhK2EWL1EKpskjyO9mSPb+J8eC/s5L6M8jl8F8uZuDCwzikLjmm6UB5sb3r\neK5Lq9YjRA3PlNuAK2BGF67U/wsrGmPYpzfjwtHQd0PPCbjsPZUJKnfg1d8nPBb/\nnQtt8cm1/mK0nUh2A5PFxWS/OyXrlwjshtWxv4K7XIpmz1xyp5YMLUNms2hZiJZ+\nzm5Rp+hbeUfhfmF2rgH0jcmyAPiDqnTujqpPYShLnd/t0KrqT6lFM1mjjwACAMMc\nTm6e79N5lNCQudC4za/UNtV4cLvtyy6nfjjn7oXMoT9Nng+yuQQSG8hvOTtCzcY=\n=9ENJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 807b7e50ae8e3375c71341a74bda223420cab8a6\nparent 5d6ee0db96aada145725838379f909bbb8aa2312\nparent df70adffcee10ed3f5c050642e7e027259652dab\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644491395 +0100\ncommitter GitHub <noreply@github.com> 1644491395 +0100\n\nRollup merge of #92670 - hermitcore:kernel, r=davidtwco\n\nadd kernel target for RustyHermit\n\nCurrently, we are thinking to use *-unknown-none targets instead to define for every platform our own one (see hermitcore/rusty-hermit#197). However, the current target aarch64-unknown-none-softfloat doesn't support dynamic relocation. Our RustyHermit project uses this feature and consequently we define a new target aarch64-unknown-hermitkernel to support it.\n\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\nI would be willing to be a target maintainer, though I would appreciate if others volunteered to help with that as well.\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nUses the same naming as the LLVM target, and the same convention as many other kernel targets (e.g. `x86_64_unknown_none_linuxkernel`). In contrast to the bare-metal target for the aarch64 architecture, the unikernel requires dynamic relocation.\n\n> Target names should not introduce undue confusion or ambiguity unless absolutely necessary to maintain ecosystem compatibility. For example, if the name of the target makes people extremely likely to form incorrect beliefs about what it targets, the name should be changed or augmented to disambiguate it.\n\nI don't believe there is any ambiguity here. It use the same convention on x86_64 architecture.\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nI don't see any legal issues here.\n\n> The target must not introduce license incompatibilities.\nAnything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\nThe target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. This applies whether the dependency is a Rust crate that would require adding new license exceptions (as specified by the tidy tool in the rust-lang/rust repository), or whether the dependency is a native library or binary. In other words, the introduction of the target must not cause a user installing or running a version of Rust or the Rust tools to be subject to any new license requirements.\nIf the target supports building host tools (such as rustc or cargo), those host tools must not depend on proprietary (non-FOSS) libraries, other than ordinary runtime libraries supplied by the platform and commonly used by other binaries built for the target. For instance, rustc built for the target may depend on a common proprietary C runtime library or console output library, but must not depend on a proprietary code generation library or code optimization library. Rust's license permits such combinations, but the Rust project has no interest in maintaining such combinations within the scope of Rust itself, even at tier 3.\nTargets should not require proprietary (non-FOSS) components to link a functional binary or library.\n\"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\" legal/licensing terms include but are not limited to: non-disclosure requirements, non-compete requirements, contributor license agreements (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms, requirements conditional on the employer or employment of any particular Rust developers, revocable terms, any requirements that create liability for the Rust project or its developers or users, or any requirements that adversely affect the livelihood or prospects of the Rust project or its developers or users.\n\nI see no issues with any of the above.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\nThis requirement does not prevent part or all of this policy from being cited in an explicit contract or work agreement (e.g. to implement or maintain support for a target). This requirement exists to ensure that a developer or team responsible for reviewing and approving a target does not face any legal threats or obligations that would prevent them from freely exercising their judgment in such approval, even if such judgment involves subjective matters or goes beyond the letter of these requirements.\n\nOnly relevant to those making approval decisions.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\n`core` and `alloc` can be used. For `std` exists already the target `aarch64_unknown_hermit`, which enables FPU support.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running tests (even if they do not pass), the documentation must explain how to run tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nUse `--target=aarch64_unknown_hermitkernel` option to cross compile. The target does currently not support running tests.\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\nBacklinks such as those generated by the issue/PR tracker when linking to an issue or PR are not considered a violation of this policy, within reason. However, such messages (even on a separate repository) must not generate notifications to anyone involved with a PR who has not requested such notifications.\n\nI don't foresee this being a problem.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\nIn particular, this may come up when working on closely related targets, such as variations of the same architecture with different features. Avoid introducing unconditional uses of features that another variation of the target may not have; use conditional compilation or runtime detection, as appropriate, to let each target run code supported by that target.\n\nNo other targets should be affected by the pull request.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "html_url": "https://github.com/rust-lang/rust/commit/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d6ee0db96aada145725838379f909bbb8aa2312", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6ee0db96aada145725838379f909bbb8aa2312", "html_url": "https://github.com/rust-lang/rust/commit/5d6ee0db96aada145725838379f909bbb8aa2312"}, {"sha": "df70adffcee10ed3f5c050642e7e027259652dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/df70adffcee10ed3f5c050642e7e027259652dab", "html_url": "https://github.com/rust-lang/rust/commit/df70adffcee10ed3f5c050642e7e027259652dab"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "f8e1e1b02f5a285cc8b23ab7beadb332b56dcd3c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -3,6 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.features = \"+strict-align,+neon,+fp-armv8\".to_string();\n \n     Target {\n         llvm_target: \"aarch64-unknown-hermit\".to_string(),"}, {"sha": "6e9d6c6221ccc58ec8f7ef9bfe14231cd0c25aaf", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_hermitkernel.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -0,0 +1,16 @@\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::hermit_kernel_base::opts();\n+    base.max_atomic_width = Some(128);\n+    base.abi = \"softfloat\".to_string();\n+    base.features = \"+strict-align,-neon,-fp-armv8\".to_string();\n+\n+    Target {\n+        llvm_target: \"aarch64-unknown-hermit\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "d735f3d41fdb0a7780882fabec629787ac4d3ff7", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -964,6 +964,7 @@ supported_targets! {\n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n \n+    (\"aarch64-unknown-none-hermitkernel\", aarch64_unknown_none_hermitkernel),\n     (\"x86_64-unknown-none-hermitkernel\", x86_64_unknown_none_hermitkernel),\n \n     (\"riscv32i-unknown-none-elf\", riscv32i_unknown_none_elf),"}, {"sha": "aecd892ce8b3b0f39b9d47bd144b37c1a441d338", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -17,6 +17,7 @@\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n+    - [aarch64-unknown-none-hermitkernel](platform-support/aarch64-unknown-none-hermitkernel.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)"}, {"sha": "d4a5f0e5a98c2541f5aa41aff583d9f92c8c78a8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -204,7 +204,8 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n-`aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n+[`aarch64-unknown-none-hermitkernel`](platform-support/aarch64-unknown-none-hermitkernel.md) | * |  | ARM64 HermitCore kernel\n `aarch64-unknown-uefi` | * |  | ARM64 UEFI\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n@@ -286,10 +287,10 @@ target | std | host | notes\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n-`x86_64-unknown-hermit` | ? |  |\n+`x86_64-unknown-hermit` | \u2713 |  | HermitCore\n `x86_64-unknown-l4re-uclibc` | ? |  |\n [`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * |  | Freestanding/bare-metal x86_64, softfloat\n-`x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n+`x86_64-unknown-none-hermitkernel` | * |  | HermitCore kernel\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n [`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-unknown-uefi` | * |  | 64-bit UEFI"}, {"sha": "b8967f631878c8d0230c0a686ef6e6cafd99b0d5", "filename": "src/doc/rustc/src/platform-support/aarch64-unknown-none-hermitkernel.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md", "raw_url": "https://github.com/rust-lang/rust/raw/03332b0a212e56cc14ad5bd9aa7b26cad2f593fc/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md?ref=03332b0a212e56cc14ad5bd9aa7b26cad2f593fc", "patch": "@@ -0,0 +1,77 @@\n+# `aarch64-unknown-none-hermitkernel`\n+\n+**Tier: 3**\n+\n+Required to build the kernel for [HermitCore](https://github.com/hermitcore/hermit-playground)\n+or [RustyHermit](https://github.com/hermitcore/rusty-hermit).\n+The result is a bare-metal aarch64 binary in ELF format.\n+\n+## Target maintainers\n+\n+- Stefan Lankes, https://github.com/stlankes\n+\n+## Requirements\n+\n+This target is cross-compiled. There is no support for `std`, but the\n+library operating system provides a simple allocator to use `alloc`.\n+\n+By default, Rust code generated for this target does not use any vector or\n+floating-point registers. This allows the generated code to build the library\n+operaring system, which may need to avoid the use of such\n+registers or which may have special considerations about the use of such\n+registers (e.g. saving and restoring them to avoid breaking userspace code\n+using the same registers). In contrast to `aarch64-unknown-none-softfloat`,\n+the target is completly relocatable, which is a required feature of RustyHermit.\n+\n+By default, code generated with this target should run on any `aarch64`\n+hardware; enabling additional target features may raise this baseline.\n+On `aarch64-unknown-none-hermitkernel`, `extern \"C\"` uses the [standard System V calling\n+convention](https://github.com/ARM-software/abi-aa/releases/download/2021Q3/sysvabi64.pdf),\n+without red zones.\n+\n+This target generated binaries in the ELF format.\n+\n+## Building the target\n+\n+Typical you should not use the target directly. The target `aarch64-unknown-hermit`\n+builds the _user space_ of RustyHermit and supports red zones and floating-point\n+operations.\n+To build and link the kernel to the application, the crate\n+[hermit-sys](https://github.com/hermitcore/rusty-hermit/tree/master/hermit-sys)\n+should be used by adding the following lines to the `Cargo.toml` file of\n+your application.\n+\n+```toml\n+[target.'cfg(target_os = \"hermit\")'.dependencies]\n+hermit-sys = \"0.1.*\"\n+```\n+\n+The crate `hermit-sys` uses the target `aarch64-unknown-none-hermitkernel`\n+to build the kernel.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you need to build the crate `hermit-sys` (see\n+\"Building the target\" above).\n+\n+## Testing\n+\n+As `aarch64-unknown-none-hermitkernel` does not support `std`\n+and does not support running any Rust testsuite.\n+\n+## Cross-compilation toolchains and C code\n+\n+If you want to compile C code along with Rust you will need an\n+appropriate `aarch64` toolchain.\n+\n+Rust *may* be able to use an `aarch64-linux-gnu-` toolchain with appropriate\n+standalone flags to build for this toolchain (depending on the assumptions of\n+that toolchain, see below), or you may wish to use a separate\n+`aarch64-unknown-none` (or `aarch64-elf-`) toolchain.\n+\n+On some `aarch64` hosts that use ELF binaries, you *may* be able to use the host\n+C toolchain, if it does not introduce assumptions about the host environment\n+that don't match the expectations of a standalone environment. Otherwise, you\n+may need a separate toolchain for standalone/freestanding development, just as\n+when cross-compiling from a non-`aarch64` platform."}]}