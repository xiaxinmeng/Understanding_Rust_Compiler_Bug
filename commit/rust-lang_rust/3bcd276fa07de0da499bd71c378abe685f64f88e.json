{"sha": "3bcd276fa07de0da499bd71c378abe685f64f88e", "node_id": "C_kwDOAAsO6NoAKDNiY2QyNzZmYTA3ZGUwZGE0OTliZDcxYzM3OGFiZTY4NWY2NGY4OGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T11:42:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T11:42:05Z"}, "message": "Auto merge of #2590 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "232967a510979f157a2041cd37e3ad62929048e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232967a510979f157a2041cd37e3ad62929048e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bcd276fa07de0da499bd71c378abe685f64f88e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcd276fa07de0da499bd71c378abe685f64f88e", "html_url": "https://github.com/rust-lang/rust/commit/3bcd276fa07de0da499bd71c378abe685f64f88e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bcd276fa07de0da499bd71c378abe685f64f88e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ef1cbf232773726e3820ddcea00f9b08b999f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ef1cbf232773726e3820ddcea00f9b08b999f3", "html_url": "https://github.com/rust-lang/rust/commit/10ef1cbf232773726e3820ddcea00f9b08b999f3"}, {"sha": "ccbc63be5ef43a508f16bdbfcdbc71c15114ca8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbc63be5ef43a508f16bdbfcdbc71c15114ca8e", "html_url": "https://github.com/rust-lang/rust/commit/ccbc63be5ef43a508f16bdbfcdbc71c15114ca8e"}], "stats": {"total": 78, "additions": 19, "deletions": 59}, "files": [{"sha": "028fcd55e9cfe87d8c4e1f7b63dd41c60f380872", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -1 +1 @@\n-e42c4d7218b2596276152c5eb1e69335621f3086\n+f382c2748aec2ada91eff88840c996644ff0f70d"}, {"sha": "bb0282d6c9167a84e1be7477748d05786a8d3048", "filename": "src/tools/miri/test-cargo-miri/test.filter.cross-target.stdout.ref", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -1,9 +1,4 @@\n \n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n-\n-\n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out"}, {"sha": "c618956656a8a60f0c8a8be587ed729d0cef60e6", "filename": "src/tools/miri/test-cargo-miri/test.filter.stdout.ref", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -1,9 +1,4 @@\n \n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n-\n-\n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out\n@@ -15,3 +10,8 @@ test simple ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out\n \n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out; finished in $TIME\n+"}, {"sha": "d14998ccba269f46850ba3d5742ef9264c285ec8", "filename": "src/tools/miri/tests/fail/erroneous_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -3,7 +3,6 @@\n // Inlining changes the error location\n //@compile-flags: -Zmir-opt-level=0\n #![feature(never_type)]\n-#![warn(warnings, const_err)]\n \n struct PrintName<T>(T);\n impl<T> PrintName<T> {"}, {"sha": "9a1a970778fb4555442a2a3966ddc5d7ac0b6a6a", "filename": "src/tools/miri/tests/fail/erroneous_const2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -1,13 +1,9 @@\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ERROR: any use of this value\n-//~|WARN: previously accepted\n+//~^ERROR: evaluation of constant value failed\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391\n fn main() {\n-    println!(\"{}\", FOO); //~ERROR: post-monomorphization error\n-    //~|ERROR: evaluation of constant value failed\n-    //~|ERROR: erroneous constant used\n-    //~|WARN: previously accepted\n+    println!(\"{}\", FOO);\n }"}, {"sha": "d41fcfd2302e57c87f00992720147757c0b236c5", "filename": "src/tools/miri/tests/fail/erroneous_const2.stderr", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -1,39 +1,9 @@\n-error: any use of this value will cause an error\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n error[E0080]: evaluation of constant value failed\n   --> $DIR/erroneous_const2.rs:LL:CC\n    |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-\n-error: erroneous constant used\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: post-monomorphization error: referenced constant has errors\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = note: inside `main` at $DIR/erroneous_const2.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ca8590cc6b3f47f31ebcf3c9125c921377daecf3", "filename": "src/tools/miri/tests/fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -7,7 +7,7 @@ struct MuchAlign;\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let buf = [0u32; 256];\n         // `buf` is sufficiently aligned for `layout.align` on a `dyn Debug`, but not\n         // for the actual alignment required by `MuchAlign`."}, {"sha": "a807200771d62c087c51e9035a8fa5d50bc30f31", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -11,7 +11,7 @@ struct Foo {\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let foo = Foo { x: 42, y: 99 };\n         let p = &foo.x;\n         let i = *p; //~ERROR: alignment 4 is required"}, {"sha": "47d1f782cb6ce0365a9846327bc8654839599393", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}, {"sha": "3aa8cb492a13c2e0ad920fa43138f26af5f4f2bb", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n         // This must fail because alignment is violated. Test specifically for loading pointers,"}, {"sha": "606316120d6e49629217543b9ce3c653e87d2ca5", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     // (This would be missed if u8 allocations are *always* at odd addresses.)\n     //\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [0u8; 4];\n         let ptr = x.as_ptr().wrapping_offset(1).cast::<u16>();\n         let _val = unsafe { *ptr }; //~ERROR: but alignment"}, {"sha": "f1032ab52bc7cda08d0c5ff46bbb43e079ad2d70", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -4,7 +4,7 @@ use std::ptr;\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}, {"sha": "eff4237595600364b520087eb737788e872f9f9f", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -4,7 +4,7 @@\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for i in 0..10 {\n+    for i in 0..20 {\n         let x = i as u8;\n         let x = &x as *const _ as *const [u32; 0];\n         // This must fail because alignment is violated. Test specifically for loading ZST."}, {"sha": "2b6e83891d6eae684907f257158057ece130bdf2", "filename": "src/tools/miri/tests/pass/align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcd276fa07de0da499bd71c378abe685f64f88e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Falign.rs?ref=3bcd276fa07de0da499bd71c378abe685f64f88e", "patch": "@@ -22,7 +22,7 @@ fn align_to() {\n \n fn main() {\n     // Do this a couple times in a loop because it may work \"by chance\".\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         manual_alignment();\n         align_to();\n     }"}]}