{"sha": "b3ac88ad922a618e6bf0eb269084d60233a311e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYWM4OGFkOTIyYTYxOGU2YmYwZWIyNjkwODRkNjAyMzNhMzExZTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-29T22:25:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-31T00:59:05Z"}, "message": "Recover gracefully from argument with missing type or param name", "tree": {"sha": "c2343ffa058f014297095185fcb09e163c20bb85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2343ffa058f014297095185fcb09e163c20bb85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ac88ad922a618e6bf0eb269084d60233a311e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ac88ad922a618e6bf0eb269084d60233a311e4", "html_url": "https://github.com/rust-lang/rust/commit/b3ac88ad922a618e6bf0eb269084d60233a311e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ac88ad922a618e6bf0eb269084d60233a311e4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "html_url": "https://github.com/rust-lang/rust/commit/aee7012fab26d5e307a2fe767e4e7c847c5a45ee"}], "stats": {"total": 189, "additions": 161, "deletions": 28}, "files": [{"sha": "248d9d3950c2e07d75ccd8db00ed53c799499447", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -2298,7 +2298,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_arg_source(&mut self, source: &ArgSource) -> hir::ArgSource {\n         match source {\n-            ArgSource::Normal => hir::ArgSource::Normal,\n+            ArgSource::Normal | ArgSource::Recovery => hir::ArgSource::Normal,\n             ArgSource::AsyncFn(pat) => hir::ArgSource::AsyncFn(self.lower_pat(pat)),\n         }\n     }"}, {"sha": "3e25f22f0a43b6709d088005464d091c75b081b6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -1780,6 +1780,8 @@ pub enum ArgSource {\n     Normal,\n     /// Argument from `async fn` lowering, contains the original binding pattern.\n     AsyncFn(P<Pat>),\n+    /// Placeholder argument caused by incorrect syntax. Used to silence unecessary errors.\n+    Recovery,\n }\n \n /// Alternative representation for `Arg`s describing `self` parameter of methods."}, {"sha": "e31bded0dec5b938593aaa641a6c9d4e1cc2ed08", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -580,7 +580,7 @@ pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty, source }: &mut Arg, vis:\n \n pub fn noop_visit_arg_source<T: MutVisitor>(source: &mut ArgSource, vis: &mut T) {\n     match source {\n-        ArgSource::Normal => {},\n+        ArgSource::Normal | ArgSource::Recovery => {},\n         ArgSource::AsyncFn(pat) => vis.visit_pat(pat),\n     }\n }"}, {"sha": "b6f26c73a70a5724a0a5f9c5cb720396d178777e", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -1,7 +1,7 @@\n use crate::ast;\n use crate::ast::{\n     BlockCheckMode, BinOpKind, Expr, ExprKind, Item, ItemKind, Pat, PatKind, PathSegment, QSelf,\n-    Ty, TyKind, VariantData,\n+    Ty, TyKind, VariantData, Ident,\n };\n use crate::parse::{SeqSep, token, PResult, Parser};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n@@ -1092,12 +1092,12 @@ impl<'a> Parser<'a> {\n         pat: P<ast::Pat>,\n         require_name: bool,\n         is_trait_item: bool,\n-    ) {\n+    ) -> Option<Ident> {\n         // If we find a pattern followed by an identifier, it could be an (incorrect)\n         // C-style parameter declaration.\n         if self.check_ident() && self.look_ahead(1, |t| {\n             *t == token::Comma || *t == token::CloseDelim(token::Paren)\n-        }) {\n+        }) { // `fn foo(String s) {}`\n             let ident = self.parse_ident().unwrap();\n             let span = pat.span.with_hi(ident.span.hi());\n \n@@ -1107,18 +1107,30 @@ impl<'a> Parser<'a> {\n                 String::from(\"<identifier>: <type>\"),\n                 Applicability::HasPlaceholders,\n             );\n-        } else if require_name && is_trait_item {\n-            if let PatKind::Ident(_, ident, _) = pat.node {\n+            return Some(ident);\n+        } else if let PatKind::Ident(_, ident, _) = pat.node {\n+            if require_name && (\n+                is_trait_item ||\n+                self.token == token::Comma ||\n+                self.token == token::CloseDelim(token::Paren)\n+            ) { // `fn foo(a, b) {}` or `fn foo(usize, usize) {}`\n+                err.span_suggestion(\n+                    pat.span,\n+                    \"if this was a parameter name, give it a type\",\n+                    format!(\"{}: TypeName\", ident),\n+                    Applicability::HasPlaceholders,\n+                );\n                 err.span_suggestion(\n                     pat.span,\n-                    \"explicitly ignore parameter\",\n+                    \"if this is a type, explicitly ignore the parameter name\",\n                     format!(\"_: {}\", ident),\n                     Applicability::MachineApplicable,\n                 );\n+                err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n+                return Some(ident);\n             }\n-\n-            err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n         }\n+        None\n     }\n \n     crate fn recover_arg_parse(&mut self) -> PResult<'a, (P<ast::Pat>, P<ast::Ty>)> {"}, {"sha": "2c35b9ea7fdada71056b3286342abd6d09558043", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -51,6 +51,7 @@ use crate::parse::diagnostics::Error;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n+use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName, hygiene::CompilerDesugaringKind};\n use log::debug;\n \n@@ -452,19 +453,18 @@ impl From<P<Expr>> for LhsExpr {\n }\n \n /// Creates a placeholder argument.\n-fn dummy_arg(span: Span) -> Arg {\n-    let ident = Ident::new(kw::Invalid, span);\n+fn dummy_arg(ident: Ident) -> Arg {\n     let pat = P(Pat {\n         id: ast::DUMMY_NODE_ID,\n         node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-        span,\n+        span: ident.span,\n     });\n     let ty = Ty {\n         node: TyKind::Err,\n-        span,\n+        span: ident.span,\n         id: ast::DUMMY_NODE_ID\n     };\n-    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal }\n+    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Recovery }\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -1528,8 +1528,17 @@ impl<'a> Parser<'a> {\n             let pat = self.parse_pat(Some(\"argument name\"))?;\n \n             if let Err(mut err) = self.expect(&token::Colon) {\n-                self.argument_without_type(&mut err, pat, require_name, is_trait_item);\n-                return Err(err);\n+                if let Some(ident) = self.argument_without_type(\n+                    &mut err,\n+                    pat,\n+                    require_name,\n+                    is_trait_item,\n+                ) {\n+                    err.emit();\n+                    return Ok(dummy_arg(ident));\n+                } else {\n+                    return Err(err);\n+                }\n             }\n \n             self.eat_incorrect_doc_comment(\"a method argument's type\");\n@@ -5431,7 +5440,7 @@ impl<'a> Parser<'a> {\n                             p.eat_to_tokens(&[&token::Comma, &token::CloseDelim(token::Paren)]);\n                             // Create a placeholder argument for proper arg count (issue #34264).\n                             let span = lo.to(p.prev_span);\n-                            Ok(Some(dummy_arg(span)))\n+                            Ok(Some(dummy_arg(Ident::new(kw::Invalid, span))))\n                         }\n                     }\n                 }\n@@ -5584,7 +5593,7 @@ impl<'a> Parser<'a> {\n \n         // Parse the rest of the function parameter list.\n         let sep = SeqSep::trailing_allowed(token::Comma);\n-        let (fn_inputs, recovered) = if let Some(self_arg) = self_arg {\n+        let (mut fn_inputs, recovered) = if let Some(self_arg) = self_arg {\n             if self.check(&token::CloseDelim(token::Paren)) {\n                 (vec![self_arg], false)\n             } else if self.eat(&token::Comma) {\n@@ -5607,6 +5616,24 @@ impl<'a> Parser<'a> {\n             // Parse closing paren and return type.\n             self.expect(&token::CloseDelim(token::Paren))?;\n         }\n+        // Replace duplicated recovered arguments with `_` pattern to avoid unecessary errors.\n+        let mut seen_inputs = FxHashSet::default();\n+        for input in fn_inputs.iter_mut() {\n+            let opt_ident = if let (PatKind::Ident(_, ident, _), ast::ArgSource::Recovery) = (\n+                &input.pat.node, &input.source,\n+            ) {\n+                Some(*ident)\n+            } else {\n+                None\n+            };\n+            if let Some(ident) = opt_ident {\n+                if seen_inputs.contains(&ident) {\n+                    input.pat.node = PatKind::Wild;\n+                }\n+                seen_inputs.insert(ident);\n+            }\n+        }\n+\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n             output: self.parse_ret_ty(true)?,"}, {"sha": "abff8275064e24dfd8d922a003feab905deaa06a", "filename": "src/test/ui/anon-params-denied-2018.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -6,7 +6,13 @@ trait T {\n     fn foo(i32); //~ expected one of `:` or `@`, found `)`\n \n     fn bar_with_default_impl(String, String) {}\n-    //~^ ERROR expected one of `:` or `@`, found `,`\n+    //~^ ERROR expected one of `:`\n+    //~| ERROR expected one of `:`\n+\n+    // do not complain about missing `b`\n+    fn baz(a:usize, b, c: usize) -> usize { //~ ERROR expected one of `:`\n+        a + b + c\n+    }\n }\n \n fn main() {}"}, {"sha": "438bcf4274daaf0ab6e0c1dca14f6633b93ee5ef", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -2,21 +2,65 @@ error: expected one of `:` or `@`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n LL |     fn foo(i32);\n-   |            ---^ expected one of `:` or `@` here\n-   |            |\n-   |            help: explicitly ignore parameter: `_: i32`\n+   |               ^ expected one of `:` or `@` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL |     fn foo(i32: TypeName);\n+   |            ^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn foo(_: i32);\n+   |            ^^^^^^\n \n error: expected one of `:` or `@`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:8:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                              ------^ expected one of `:` or `@` here\n-   |                              |\n-   |                              help: explicitly ignore parameter: `_: String`\n+   |                                    ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL |     fn bar_with_default_impl(String: TypeName, String) {}\n+   |                              ^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn bar_with_default_impl(_: String, String) {}\n+   |                              ^^^^^^^^^\n+\n+error: expected one of `:` or `@`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:8:44\n+   |\n+LL |     fn bar_with_default_impl(String, String) {}\n+   |                                            ^ expected one of `:` or `@` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL |     fn bar_with_default_impl(String, String: TypeName) {}\n+   |                                      ^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn bar_with_default_impl(String, _: String) {}\n+   |                                      ^^^^^^^^^\n+\n+error: expected one of `:` or `@`, found `,`\n+  --> $DIR/anon-params-denied-2018.rs:13:22\n+   |\n+LL |     fn baz(a:usize, b, c: usize) -> usize {\n+   |                      ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL |     fn baz(a:usize, b: TypeName, c: usize) -> usize {\n+   |                     ^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n+   |                     ^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "f06b9510417310ba616f0651b6986a080ad08900", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -20,6 +20,8 @@ fn pattern((i32, i32) (a, b)) {}\n \n fn fizz(i32) {}\n //~^ ERROR expected one of `:` or `@`\n+//~| HELP if this was a parameter name, give it a type\n+//~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}\n //~^ ERROR expected one of `:` or `@`"}, {"sha": "fb48bd1fe9383625660ab5150f43c7efef6d494d", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -33,9 +33,19 @@ error: expected one of `:` or `@`, found `)`\n    |\n LL | fn fizz(i32) {}\n    |            ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL | fn fizz(i32: TypeName) {}\n+   |         ^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn fizz(_: i32) {}\n+   |         ^^^^^^\n \n error: expected one of `:` or `@`, found `S`\n-  --> $DIR/inverted-parameters.rs:24:23\n+  --> $DIR/inverted-parameters.rs:26:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^"}, {"sha": "e501f235d6d3b6fce85d1e2858810e455d9771c6", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -3,6 +3,16 @@ error: expected one of `:` or `@`, found `)`\n    |\n LL | fn foo(x) {\n    |         ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL | fn foo(x: TypeName) {\n+   |        ^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn foo(_: x) {\n+   |        ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5dd9895c6e4f45f141292a27afd0eeaaf78afd42", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ac88ad922a618e6bf0eb269084d60233a311e4/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=b3ac88ad922a618e6bf0eb269084d60233a311e4", "patch": "@@ -9,12 +9,32 @@ error: expected one of `:` or `@`, found `)`\n    |\n LL | fn foo(Option<i32>, String) {}\n    |                           ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL | fn foo(Option<i32>, String: TypeName) {}\n+   |                     ^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn foo(Option<i32>, _: String) {}\n+   |                     ^^^^^^^^^\n \n error: expected one of `:` or `@`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n    |\n LL | fn bar(x, y: usize) {}\n    |         ^ expected one of `:` or `@` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this was a parameter name, give it a type\n+   |\n+LL | fn bar(x: TypeName, y: usize) {}\n+   |        ^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn bar(_: x, y: usize) {}\n+   |        ^^^^\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n   --> $DIR/issue-34264.rs:7:5"}]}