{"sha": "b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmQ3YTVkMmYyYWJhMGZmMTYyM2NhODViYmQ2ZTFmOTRhOTVlZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-29T22:54:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-29T22:54:43Z"}, "message": "Auto merge of #29976 - GuillaumeGomez:patch-5, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "b6fd9474ab8682e676a5a7dd652ceb32c6d20df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6fd9474ab8682e676a5a7dd652ceb32c6d20df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3", "html_url": "https://github.com/rust-lang/rust/commit/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ad1d199b24b74cd07fb42b2b101a585aff16cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ad1d199b24b74cd07fb42b2b101a585aff16cc", "html_url": "https://github.com/rust-lang/rust/commit/15ad1d199b24b74cd07fb42b2b101a585aff16cc"}, {"sha": "483656b606f81f0163b04fd05088813639b7f024", "url": "https://api.github.com/repos/rust-lang/rust/commits/483656b606f81f0163b04fd05088813639b7f024", "html_url": "https://github.com/rust-lang/rust/commit/483656b606f81f0163b04fd05088813639b7f024"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "bdfdc7f47860d699c3825a0bee17c46a01dd1bb6", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b22d7a5d2f2aba0ff1623ca85bbd6e1f94a95ed3", "patch": "@@ -1899,6 +1899,85 @@ contain references (with a maximum lifetime of `'a`).\n [1]: https://github.com/rust-lang/rfcs/pull/1156\n \"##,\n \n+E0492: r##\"\n+A borrow of a constant containing interior mutability was attempted. Erroneous\n+code example:\n+\n+```\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A;\n+// error: cannot borrow a constant which contains interior mutability, create a\n+//        static instead\n+```\n+\n+A `const` represents a constant value that should never change. If one takes\n+a `&` reference to the constant, then one is taking a pointer to some memory\n+location containing the value. Normally this is perfectly fine: most values\n+can't be changed via a shared `&` pointer, but interior mutability would allow\n+it. That is, a constant value could be mutated. On the other hand, a `static` is\n+explicitly a single memory location, which can be mutated at will.\n+\n+So, in order to solve this error, either use statics which are `Sync`:\n+\n+```\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A; // ok!\n+```\n+\n+You can also have this error while using a cell type:\n+\n+```\n+#![feature(const_fn)]\n+\n+use std::cell::Cell;\n+\n+const A: Cell<usize> = Cell::new(1);\n+const B: &'static Cell<usize> = &A;\n+// error: cannot borrow a constant which contains interior mutability, create\n+//        a static instead\n+\n+// or:\n+struct C { a: Cell<usize> }\n+\n+const D: C = C { a: Cell::new(1) };\n+const E: &'static Cell<usize> = &D.a; // error\n+\n+// or:\n+const F: &'static C = &D; // error\n+```\n+\n+This is because cell types internally use `UnsafeCell`, which isn't `Sync`.\n+These aren't thread safe, and thus can't be placed in statics. In this case,\n+`StaticMutex` would work just fine, but it isn't stable yet:\n+https://doc.rust-lang.org/nightly/std/sync/struct.StaticMutex.html\n+\n+However, if you still wish to use these types, you can achieve this by an unsafe\n+wrapper:\n+\n+```\n+#![feature(const_fn)]\n+\n+use std::cell::Cell;\n+use std::marker::Sync;\n+\n+struct NotThreadSafe<T> {\n+    value: Cell<T>,\n+}\n+\n+unsafe impl<T> Sync for NotThreadSafe<T> {}\n+\n+static A: NotThreadSafe<usize> = NotThreadSafe { value : Cell::new(1) };\n+static B: &'static NotThreadSafe<usize> = &A; // ok!\n+```\n+\n+Remember this solution is unsafe! You will have to ensure that accesses to the\n+cell are synchronized.\n+\"##,\n+\n E0493: r##\"\n A type with a destructor was assigned to an invalid type of variable. Erroneous\n code example:\n@@ -1967,7 +2046,6 @@ impl<'a> Foo<'a> {\n \n Please change the name of one of the lifetimes to remove this error. Example:\n \n-\n ```\n struct Foo<'a> {\n     a: &'a i32,\n@@ -2070,6 +2148,7 @@ If you wish to apply this attribute to all methods in an impl, manually annotate\n each method; it is not possible to annotate the entire impl with an `#[inline]`\n attribute.\n \"##,\n+\n }\n \n \n@@ -2120,6 +2199,5 @@ register_diagnostics! {\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n-    E0492, // cannot borrow a constant which contains interior mutability\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n }"}]}