{"sha": "aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzgyZDliMTNmOGJhMWJhZWJjNWEyYTFhNjczODMxZTZmNmZiZTc=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-02T00:05:56Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:42:41Z"}, "message": "SwitchInt over Switch\n\nThis removes another special case of Switch by replacing it with the more general SwitchInt. While\nthis is more clunky currently, there\u2019s no reason we can\u2019t make it nice (and efficient) to use.", "tree": {"sha": "84cd240a860c08186a117490c5547eae53b89793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84cd240a860c08186a117490c5547eae53b89793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "html_url": "https://github.com/rust-lang/rust/commit/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d70a7fbe489b96272a25b3a75b5f2ef46a846a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d70a7fbe489b96272a25b3a75b5f2ef46a846a3", "html_url": "https://github.com/rust-lang/rust/commit/5d70a7fbe489b96272a25b3a75b5f2ef46a846a3"}], "stats": {"total": 235, "additions": 105, "deletions": 130}, "files": [{"sha": "c4e3827fef289d87cc551ebca26015113d97b927", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -14,6 +14,7 @@ use std::rc::Rc;\n use hir::def_id::DefId;\n use rustc_const_math::*;\n use self::ConstVal::*;\n+pub use rustc_const_math::ConstInt;\n \n use std::collections::BTreeMap;\n "}, {"sha": "b0a6784c3c3cfea6c833f3904f825e33760134c5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -453,13 +453,6 @@ pub enum TerminatorKind<'tcx> {\n         target: BasicBlock,\n     },\n \n-    /// lvalue evaluates to some enum; jump depending on the branch\n-    Switch {\n-        discr: Lvalue<'tcx>,\n-        adt_def: &'tcx AdtDef,\n-        targets: Vec<BasicBlock>,\n-    },\n-\n     /// operand evaluates to an integer; jump depending on its value\n     /// to one of the targets, and otherwise fallback to `otherwise`\n     SwitchInt {\n@@ -471,6 +464,7 @@ pub enum TerminatorKind<'tcx> {\n \n         /// Possible values. The locations to branch to in each case\n         /// are found in the corresponding indices from the `targets` vector.\n+        // FIXME: ConstVal doesn\u2019t quite make any sense here? Its a Switch*Int*.\n         values: Vec<ConstVal>,\n \n         /// Possible branch sites. The length of this vector should be\n@@ -544,7 +538,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b).into_cow(),\n-            Switch { targets: ref b, .. } => b[..].into_cow(),\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n             Resume => (&[]).into_cow(),\n             Return => (&[]).into_cow(),\n@@ -573,7 +566,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref mut b } => vec![b],\n-            Switch { targets: ref mut b, .. } => b.iter_mut().collect(),\n             SwitchInt { targets: ref mut b, .. } => b.iter_mut().collect(),\n             Resume => Vec::new(),\n             Return => Vec::new(),\n@@ -651,7 +643,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { .. } => write!(fmt, \"goto\"),\n-            Switch { discr: ref lv, .. } => write!(fmt, \"switch({:?})\", lv),\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n             Return => write!(fmt, \"return\"),\n             Resume => write!(fmt, \"resume\"),\n@@ -701,12 +692,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             Return | Resume | Unreachable => vec![],\n             Goto { .. } => vec![\"\".into()],\n-            Switch { ref adt_def, .. } => {\n-                adt_def.variants\n-                       .iter()\n-                       .map(|variant| variant.name.to_string().into())\n-                       .collect()\n-            }\n             SwitchInt { ref values, .. } => {\n                 values.iter()\n                       .map(|const_val| {"}, {"sha": "fcfd1c5767216a44ccc90cf7ed82d9aefe09235e", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -17,6 +17,7 @@ use mir::*;\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use syntax::attr;\n use hir;\n \n #[derive(Copy, Clone, Debug)]\n@@ -170,9 +171,14 @@ impl<'tcx> Rvalue<'tcx> {\n                 Some(operand.ty(mir, tcx))\n             }\n             Rvalue::Discriminant(ref lval) => {\n-                if let ty::TyAdt(_, _) = lval.ty(mir, tcx).to_ty(tcx).sty {\n-                    // TODO\n-                    None\n+                if let ty::TyAdt(adt_def, _) = lval.ty(mir, tcx).to_ty(tcx).sty {\n+                    // FIXME: Why this does not work?\n+                    // Some(adt_def.discr_ty.to_ty(tcx))\n+                    let ty = match adt_def.discr_ty {\n+                        attr::SignedInt(i) => tcx.mk_mach_int(i),\n+                        attr::UnsignedInt(i) => tcx.mk_mach_uint(i),\n+                    };\n+                    Some(ty)\n                 } else {\n                     None\n                 }"}, {"sha": "ca20cf6236b580c48770f995f82df2abf07e28f8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -362,15 +362,6 @@ macro_rules! make_mir_visitor {\n                         self.visit_branch(block, target);\n                     }\n \n-                    TerminatorKind::Switch { ref $($mutability)* discr,\n-                                             adt_def: _,\n-                                             ref targets } => {\n-                        self.visit_lvalue(discr, LvalueContext::Inspect, source_location);\n-                        for &target in targets {\n-                            self.visit_branch(block, target);\n-                        }\n-                    }\n-\n                     TerminatorKind::SwitchInt { ref $($mutability)* discr,\n                                                 ref $($mutability)* switch_ty,\n                                                 ref $($mutability)* values,"}, {"sha": "fe4b6dad30e0403a982a2cdba6b524ffee3a7450", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -39,27 +39,17 @@ use rustc_i128::i128;\n use hir;\n \n pub trait IntTypeExt {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_ty<'a, 'tcx>(self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx>;\n     fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)\n                            -> Option<Disr>;\n     fn initial_discriminant<'a, 'tcx>(&self, _: TyCtxt<'a, 'tcx, 'tcx>) -> Disr;\n }\n \n impl IntTypeExt for attr::IntType {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n-        match *self {\n-            SignedInt(ast::IntTy::I8)      => tcx.types.i8,\n-            SignedInt(ast::IntTy::I16)     => tcx.types.i16,\n-            SignedInt(ast::IntTy::I32)     => tcx.types.i32,\n-            SignedInt(ast::IntTy::I64)     => tcx.types.i64,\n-            SignedInt(ast::IntTy::I128)     => tcx.types.i128,\n-            SignedInt(ast::IntTy::Is)   => tcx.types.isize,\n-            UnsignedInt(ast::UintTy::U8)    => tcx.types.u8,\n-            UnsignedInt(ast::UintTy::U16)   => tcx.types.u16,\n-            UnsignedInt(ast::UintTy::U32)   => tcx.types.u32,\n-            UnsignedInt(ast::UintTy::U64)   => tcx.types.u64,\n-            UnsignedInt(ast::UintTy::U128)   => tcx.types.u128,\n-            UnsignedInt(ast::UintTy::Us) => tcx.types.usize,\n+    fn to_ty<'a, 'gcx, 'tcx>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+        match self {\n+            SignedInt(i) => tcx.mk_mach_int(i),\n+            UnsignedInt(i) => tcx.mk_mach_uint(i),\n         }\n     }\n "}, {"sha": "8b246105f61693b147688622d62203ddfa33653b", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -454,7 +454,6 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n             }\n-            mir::TerminatorKind::Switch { ref targets, .. } |\n             mir::TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {\n                     self.propagate_bits_into_entry_set_for(in_out, changed, target);"}, {"sha": "8f3dcd0b8d6734c82341bcf1c54a1805503d36fb", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -17,9 +17,10 @@ use super::{DropFlagState, MoveDataParamEnv};\n use super::patch::MirPatch;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::util::IntTypeExt;\n use rustc::mir::*;\n use rustc::mir::transform::{Pass, MirPass, MirSource};\n-use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_val::{ConstVal, ConstInt};\n use rustc::middle::lang_items;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -672,27 +673,45 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 self.drop_ladder(c, fields)\n             }\n             _ => {\n-                let variant_drops : Vec<BasicBlock> =\n-                    (0..adt.variants.len()).map(|i| {\n-                        self.open_drop_for_variant(c, &mut drop_block,\n-                                                   adt, substs, i)\n-                    }).collect();\n-\n+                let mut values = Vec::with_capacity(adt.variants.len());\n+                let mut blocks = Vec::with_capacity(adt.variants.len() + 1);\n+                for (idx, variant) in adt.variants.iter().enumerate() {\n+                    let discr = ConstInt::new_inttype(variant.disr_val, adt.discr_ty,\n+                                                      self.tcx.sess.target.uint_type,\n+                                                      self.tcx.sess.target.int_type).unwrap();\n+                    values.push(ConstVal::Integral(discr));\n+                    blocks.push(self.open_drop_for_variant(c, &mut drop_block, adt, substs, idx));\n+                }\n                 // If there are multiple variants, then if something\n                 // is present within the enum the discriminant, tracked\n                 // by the rest path, must be initialized.\n                 //\n                 // Additionally, we do not want to switch on the\n                 // discriminant after it is free-ed, because that\n                 // way lies only trouble.\n-\n-                let switch_block = self.new_block(\n-                    c, c.is_cleanup, TerminatorKind::Switch {\n-                        discr: c.lvalue.clone(),\n-                        adt_def: adt,\n-                        targets: variant_drops\n-                    });\n-\n+                let discr_ty = adt.discr_ty.to_ty(self.tcx);\n+                let discr = Lvalue::Local(self.patch.new_temp(discr_ty));\n+                let switch_block = self.patch.new_block(BasicBlockData {\n+                    statements: vec![\n+                        Statement {\n+                            source_info: c.source_info,\n+                            kind: StatementKind::Assign(discr.clone(),\n+                                                        Rvalue::Discriminant(c.lvalue.clone()))\n+                        }\n+                    ],\n+                    terminator: Some(Terminator {\n+                        source_info: c.source_info,\n+                        kind: TerminatorKind::SwitchInt {\n+                            discr: Operand::Consume(discr),\n+                            switch_ty: discr_ty,\n+                            values: values,\n+                            targets: blocks,\n+                            // adt_def: adt,\n+                            // targets: variant_drops\n+                        }\n+                    }),\n+                    is_cleanup: c.is_cleanup,\n+                });\n                 self.drop_flag_test_block(c, switch_block)\n             }\n         }"}, {"sha": "0c7e922c48ab4b98d11a7220ff8f63b45cb45789", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -465,8 +465,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n \n             TerminatorKind::Assert { .. } |\n-            TerminatorKind::SwitchInt { .. } |\n-            TerminatorKind::Switch { .. } => {\n+            TerminatorKind::SwitchInt { .. } => {\n                 // branching terminators - these don't move anything\n             }\n "}, {"sha": "bc3809db1c63a619086b78b41daceb2d84a80ead", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -77,6 +77,14 @@ mod ibounds {\n }\n \n impl ConstInt {\n+    pub fn new_inttype(val: u128, ty: IntType, usize_ty: UintTy, isize_ty: IntTy)\n+    -> Option<ConstInt> {\n+        match ty {\n+            IntType::SignedInt(i) => ConstInt::new_signed(val as i128, i, isize_ty),\n+            IntType::UnsignedInt(i) => ConstInt::new_unsigned(val, i, usize_ty),\n+        }\n+    }\n+\n     /// Creates a new unsigned ConstInt with matching type while also checking that overflow does\n     /// not happen.\n     pub fn new_unsigned(val: u128, ty: UintTy, usize_ty: UintTy) -> Option<ConstInt> {"}, {"sha": "ffcd25a4cdd39ab2863054812d614dfa7765cfd9", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -30,6 +30,10 @@ impl BitVector {\n         }\n     }\n \n+    pub fn count(&self) -> usize {\n+        self.data.iter().map(|e| e.count_ones() as usize).sum()\n+    }\n+\n     #[inline]\n     pub fn contains(&self, bit: usize) -> bool {\n         let (word, mask) = word_mask(bit);"}, {"sha": "528e37e73c4f3ca2465722f615664c90c1a5ea6d", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -20,11 +20,12 @@ use build::matches::{Candidate, MatchPair, Test, TestKind};\n use hair::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::bitvec::BitVector;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_val::{ConstVal, ConstInt};\n use rustc::ty::{self, Ty};\n use rustc::mir::*;\n use rustc::hir::RangeEnd;\n use syntax_pos::Span;\n+use syntax::attr;\n use std::cmp::Ordering;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -182,24 +183,51 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(test.span);\n         match test.kind {\n             TestKind::Switch { adt_def, ref variants } => {\n+                // Variants is a BitVec of indexes into adt_def.variants.\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n+                let used_variants = variants.count();\n                 let mut otherwise_block = None;\n-                let target_blocks: Vec<_> = (0..num_enum_variants).map(|i| {\n-                    if variants.contains(i) {\n-                        self.cfg.start_new_block()\n+                let mut target_blocks = Vec::with_capacity(num_enum_variants);\n+                let mut targets = Vec::with_capacity(used_variants + 1);\n+                let mut values = Vec::with_capacity(used_variants);\n+                let tcx = self.hir.tcx();\n+                for (idx, variant) in adt_def.variants.iter().enumerate() {\n+                    target_blocks.place_back() <- if variants.contains(idx) {\n+                        let discr = ConstInt::new_inttype(variant.disr_val, adt_def.discr_ty,\n+                                                          tcx.sess.target.uint_type,\n+                                                          tcx.sess.target.int_type).unwrap();\n+                        values.push(ConstVal::Integral(discr));\n+                        *(targets.place_back() <- self.cfg.start_new_block())\n                     } else {\n                         if otherwise_block.is_none() {\n                             otherwise_block = Some(self.cfg.start_new_block());\n                         }\n                         otherwise_block.unwrap()\n-                    }\n-                }).collect();\n-                debug!(\"num_enum_variants: {}, num tested variants: {}, variants: {:?}\",\n-                       num_enum_variants, variants.iter().count(), variants);\n-                self.cfg.terminate(block, source_info, TerminatorKind::Switch {\n-                    discr: lvalue.clone(),\n-                    adt_def: adt_def,\n-                    targets: target_blocks.clone()\n+                    };\n+                }\n+                if let Some(otherwise_block) = otherwise_block {\n+                    targets.push(otherwise_block);\n+                } else {\n+                    values.pop();\n+                }\n+                debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n+                       num_enum_variants, values, variants);\n+                // FIXME: WHY THIS DOES NOT WORK?!\n+                // let discr_ty = adt_def.discr_ty.to_ty(tcx);\n+                let discr_ty = match adt_def.discr_ty {\n+                    attr::SignedInt(i) => tcx.mk_mach_int(i),\n+                    attr::UnsignedInt(i) => tcx.mk_mach_uint(i),\n+                };\n+\n+                let discr = self.temp(discr_ty);\n+                self.cfg.push_assign(block, source_info, &discr,\n+                                     Rvalue::Discriminant(lvalue.clone()));\n+                assert_eq!(values.len() + 1, targets.len());\n+                self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+                    discr: Operand::Consume(discr),\n+                    switch_ty: discr_ty,\n+                    values: values,\n+                    targets: targets\n                 });\n                 target_blocks\n             }"}, {"sha": "9a8fb1099d04bf84a6afa1992fa4c64afb95d471", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -26,6 +26,8 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n+#![feature(placement_in_syntax)]\n+#![feature(collection_placement)]\n \n #[macro_use] extern crate log;\n extern crate graphviz as dot;"}, {"sha": "55a26f4b37fe2521ae208ecee36cf8e0ec02aa49", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -28,7 +28,6 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n-            TerminatorKind::Switch { .. } |\n             TerminatorKind::SwitchInt { .. } => {\n                 /* nothing to do */\n             },"}, {"sha": "922521726c6262c2b98897ec7cf5f393cecf10eb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -394,7 +394,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                     return Qualif::empty();\n                 }\n \n-                TerminatorKind::Switch {..} |\n                 TerminatorKind::SwitchInt {..} |\n                 TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume |"}, {"sha": "e93a412dc744fcb6ddb4f8ef9a16d957ec4733b6", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -209,7 +209,6 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     // turn a branch with all successors identical to a goto\n     fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {\n         match terminator.kind {\n-            TerminatorKind::Switch { .. } |\n             TerminatorKind::SwitchInt { .. } => {},\n             _ => return false\n         };"}, {"sha": "8ede7aaab5f68c93dc52616a9b9256e5b96418e3", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -436,19 +436,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n                 // FIXME: check the values\n             }\n-            TerminatorKind::Switch { ref discr, adt_def, ref targets } => {\n-                let discr_ty = discr.ty(mir, tcx).to_ty(tcx);\n-                match discr_ty.sty {\n-                    ty::TyAdt(def, _) if def.is_enum() &&\n-                                         def == adt_def &&\n-                                         adt_def.variants.len() == targets.len()\n-                      => {},\n-                    _ => {\n-                        span_mirbug!(self, term, \"bad Switch ({:?} on {:?})\",\n-                                     adt_def, discr_ty);\n-                    }\n-                }\n-            }\n             TerminatorKind::Call { ref func, ref args, ref destination, .. } => {\n                 let func_ty = func.ty(mir, tcx);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n@@ -593,7 +580,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         match block.terminator().kind {\n             TerminatorKind::Goto { target } =>\n                 self.assert_iscleanup(mir, block, target, is_cleanup),\n-            TerminatorKind::Switch { ref targets, .. } |\n             TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {\n                     self.assert_iscleanup(mir, block, *target, is_cleanup);"}, {"sha": "517a4720563343d8f56ec8f97471741c12064e6a", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -148,7 +148,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"TerminatorKind\", kind);\n         self.record(match *kind {\n             TerminatorKind::Goto { .. } => \"TerminatorKind::Goto\",\n-            TerminatorKind::Switch { .. } => \"TerminatorKind::Switch\",\n             TerminatorKind::SwitchInt { .. } => \"TerminatorKind::SwitchInt\",\n             TerminatorKind::Resume => \"TerminatorKind::Resume\",\n             TerminatorKind::Return => \"TerminatorKind::Return\","}, {"sha": "37725bfa2de84340a51084e2531575512778e3c4", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -204,7 +204,6 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::Resume |\n                 TerminatorKind::Return |\n                 TerminatorKind::Unreachable |\n-                TerminatorKind::Switch { .. } |\n                 TerminatorKind::SwitchInt { .. } => {\n                     /* nothing to do */\n                 }"}, {"sha": "2ed2cc610628f19842638598af6f70bad6f88601", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=aac82d9b13f8ba1baebc5a2a1a673831e6f6fbe7", "patch": "@@ -14,22 +14,19 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, layout, TypeFoldable};\n use rustc::mir;\n use abi::{Abi, FnType, ArgType};\n-use adt;\n use base::{self, Lifetime};\n use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n use builder::Builder;\n use common::{self, Funclet};\n use common::{C_bool, C_str_slice, C_struct, C_u32, C_undef};\n use consts;\n-use Disr;\n use machine::{llalign_of_min, llbitsize_of_real};\n use meth;\n use type_of::{self, align_of};\n use glue;\n use type_::Type;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::fx::FxHashMap;\n use syntax::symbol::Symbol;\n \n use std::cmp;\n@@ -136,41 +133,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 funclet_br(self, bcx, target);\n             }\n \n-            mir::TerminatorKind::Switch { ref discr, ref adt_def, ref targets } => {\n-                let discr_lvalue = self.trans_lvalue(&bcx, discr);\n-                let ty = discr_lvalue.ty.to_ty(bcx.tcx());\n-                let discr = adt::trans_get_discr(\n-                    &bcx, ty, discr_lvalue.llval, discr_lvalue.alignment,\n-                    None, true);\n-\n-                let mut bb_hist = FxHashMap();\n-                for target in targets {\n-                    *bb_hist.entry(target).or_insert(0) += 1;\n-                }\n-                let (default_bb, default_blk) = match bb_hist.iter().max_by_key(|&(_, c)| c) {\n-                    // If a single target basic blocks is predominant, promote that to be the\n-                    // default case for the switch instruction to reduce the size of the generated\n-                    // code. This is especially helpful in cases like an if-let on a huge enum.\n-                    // Note: This optimization is only valid for exhaustive matches.\n-                    Some((&&bb, &c)) if c > targets.len() / 2 => {\n-                        (Some(bb), llblock(self, bb))\n-                    }\n-                    // We're generating an exhaustive switch, so the else branch\n-                    // can't be hit.  Branching to an unreachable instruction\n-                    // lets LLVM know this\n-                    _ => (None, self.unreachable_block())\n-                };\n-                let switch = bcx.switch(discr, default_blk, targets.len());\n-                assert_eq!(adt_def.variants.len(), targets.len());\n-                for (adt_variant, &target) in adt_def.variants.iter().zip(targets) {\n-                    if default_bb != Some(target) {\n-                        let llbb = llblock(self, target);\n-                        let llval = adt::trans_case(&bcx, ty, Disr::from(adt_variant.disr_val));\n-                        bcx.add_case(switch, llval, llbb)\n-                    }\n-                }\n-            }\n-\n             mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n                 // TODO: cond_br if only 1 value\n                 let (otherwise, targets) = targets.split_last().unwrap();"}]}