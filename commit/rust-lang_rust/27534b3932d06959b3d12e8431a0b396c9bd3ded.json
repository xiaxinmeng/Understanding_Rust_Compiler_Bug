{"sha": "27534b3932d06959b3d12e8431a0b396c9bd3ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTM0YjM5MzJkMDY5NTliM2QxMmU4NDMxYTBiMzk2YzliZDNkZWQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-09-06T19:04:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:33Z"}, "message": "Fix rebase", "tree": {"sha": "5a203485f4b0eada7a6f1990711a73666e3f7aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a203485f4b0eada7a6f1990711a73666e3f7aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27534b3932d06959b3d12e8431a0b396c9bd3ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27534b3932d06959b3d12e8431a0b396c9bd3ded", "html_url": "https://github.com/rust-lang/rust/commit/27534b3932d06959b3d12e8431a0b396c9bd3ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27534b3932d06959b3d12e8431a0b396c9bd3ded/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852073a7d2fc90597fa0369ce86611ed23f7e85d", "url": "https://api.github.com/repos/rust-lang/rust/commits/852073a7d2fc90597fa0369ce86611ed23f7e85d", "html_url": "https://github.com/rust-lang/rust/commit/852073a7d2fc90597fa0369ce86611ed23f7e85d"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "de42aa0e6b764ca69ae2930879729920ebc99562", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=27534b3932d06959b3d12e8431a0b396c9bd3ded", "patch": "@@ -916,8 +916,8 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n \n     let self_ty = obligation_trait_ref.self_ty();\n     let object_ty = selcx.infcx().shallow_resolve(self_ty);\n-    let data = match object_ty.kind {\n-        ty::Dynamic(ref data, ..) => data,\n+    let data = match object_ty.kind() {\n+        ty::Dynamic(data, ..) => data,\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being an object type, so induce an ambiguity."}, {"sha": "905a2ab7057c6a5d8d735d26261485fc4aed27b2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=27534b3932d06959b3d12e8431a0b396c9bd3ded", "patch": "@@ -126,7 +126,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let tcx = self.tcx();\n \n             let bound_self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n-            let (def_id, substs) = match bound_self_ty.skip_binder().kind {\n+            let (def_id, substs) = match *bound_self_ty.skip_binder().kind() {\n                 ty::Projection(proj) => (proj.item_def_id, proj.substs),\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n                 _ => bug!(\"projection candidate for unexpected type: {:?}\", bound_self_ty),\n@@ -158,7 +158,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }),\n             );\n \n-            if let ty::Projection(..) = bound_self_ty.skip_binder().kind {\n+            if let ty::Projection(..) = bound_self_ty.skip_binder().kind() {\n                 for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n                     let normalized = normalize_with_depth_to(\n                         self,"}, {"sha": "5553d4585244d681c1a39ffdabb63bf4b7ede0d3", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=27534b3932d06959b3d12e8431a0b396c9bd3ded", "patch": "@@ -77,10 +77,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n         let bounds = self\n+            .interner\n             .tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n-            .map(|(bound, _)| bound.subst(self.tcx, &bound_vars))\n+            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n             .filter_map(|bound| {\n                 LowerInto::<\n                         Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>>,\n@@ -453,14 +454,19 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n         let where_clauses = self.where_clauses_for(opaque_ty_id.0, bound_vars);\n \n-        let bounds: Vec<_> = predicates\n+        let bounds: Vec<_> = self\n+            .interner\n+            .tcx\n+            .explicit_item_bounds(opaque_ty_id.0)\n             .iter()\n-            .map(|(bound, _)| bound.subst(self.tcx, &bound_vars))\n-            .filter_map(|bound| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(bound, &self.interner))\n+            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n+            .filter_map(|bound| {\n+                LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(bound, &self.interner)\n+            })\n             .collect();\n \n         let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n-            bounds: chalk_ir::Binders::new(binders, bounds),\n+            bounds: chalk_ir::Binders::new(binders.clone(), bounds),\n             where_clauses: chalk_ir::Binders::new(binders, where_clauses),\n         };\n "}, {"sha": "82d46b78178b9b65412a431c40ca1ccab8de8038", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27534b3932d06959b3d12e8431a0b396c9bd3ded/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=27534b3932d06959b3d12e8431a0b396c9bd3ded", "patch": "@@ -2141,7 +2141,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             //       substs are the same as the trait's.\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n-            if let ty::Projection(projection) = ty.kind {\n+            if let ty::Projection(projection) = ty.kind() {\n                 if projection.substs == trait_identity_substs\n                     && tcx.associated_item(projection.item_def_id).container.id() == def_id\n                 {"}]}