{"sha": "1f3cda8bd8496c3b3771b0201d1073ed575321d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmM2NkYThiZDg0OTZjM2IzNzcxYjAyMDFkMTA3M2VkNTc1MzIxZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T17:18:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T17:18:07Z"}, "message": "auto merge of #17629 : alexcrichton/rust/rollup, r=alexcrichton", "tree": {"sha": "0acaf08d99d544c93df6f688fa96ce40e747588f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0acaf08d99d544c93df6f688fa96ce40e747588f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3cda8bd8496c3b3771b0201d1073ed575321d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3cda8bd8496c3b3771b0201d1073ed575321d0", "html_url": "https://github.com/rust-lang/rust/commit/1f3cda8bd8496c3b3771b0201d1073ed575321d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3cda8bd8496c3b3771b0201d1073ed575321d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5079a10b1e9d87fa0b0d50f1456f920b1ba8323c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5079a10b1e9d87fa0b0d50f1456f920b1ba8323c", "html_url": "https://github.com/rust-lang/rust/commit/5079a10b1e9d87fa0b0d50f1456f920b1ba8323c"}, {"sha": "d3e171861f0fd8f3a61ad28d70f675ea9dc712b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e171861f0fd8f3a61ad28d70f675ea9dc712b8", "html_url": "https://github.com/rust-lang/rust/commit/d3e171861f0fd8f3a61ad28d70f675ea9dc712b8"}], "stats": {"total": 1006, "additions": 727, "deletions": 279}, "files": [{"sha": "1a2a79cb36bd37affff2ddfb81d6d6fbc0575948", "filename": "configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -453,12 +453,12 @@ valopt datadir \"${CFG_PREFIX}/share\" \"install data\"\n valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n \n-valopt release-channel \"source\" \"the name of the release channel to build\"\n+valopt release-channel \"dev\" \"the name of the release channel to build\"\n \n # On windows we just store the libraries in the bin directory because\n # there's no rpath. This is where the build system itself puts libraries;\n # --libdir is used to configure the installation directory.\n-# FIXME: Thise needs to parameterized over target triples. Do it in platform.mk\n+# FIXME: This needs to parameterized over target triples. Do it in platform.mk\n CFG_LIBDIR_RELATIVE=lib\n if [ \"$CFG_OSTYPE\" = \"pc-mingw32\" ] || [ \"$CFG_OSTYPE\" = \"w64-mingw32\" ]\n then\n@@ -479,10 +479,10 @@ validate_opt\n \n # Validate the release channel\n case \"$CFG_RELEASE_CHANNEL\" in\n-    (source | nightly | beta | stable)\n+    (dev | nightly | beta | stable)\n \t;;\n     (*)\n-        err \"release channel must be 'source', 'nightly', 'beta' or 'stable'\"\n+        err \"release channel must be 'dev', 'nightly', 'beta' or 'stable'\"\n         ;;\n esac\n "}, {"sha": "9f01ff23c7fc93c7956285d174463cce288f7484", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -71,7 +71,7 @@ DEPS_graphviz := std\n DEPS_green := std native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n-DEPS_syntax := std term serialize log fmt_macros debug arena\n+DEPS_syntax := std term serialize log fmt_macros debug arena libc\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n               time log graphviz debug rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std"}, {"sha": "a4bac74aace0416b4aaa83bfd47bea64497ee72e", "filename": "mk/main.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -35,9 +35,9 @@ ifeq ($(CFG_RELEASE_CHANNEL),nightly)\n CFG_RELEASE=$(CFG_RELEASE_NUM)-nightly\n CFG_PACKAGE_VERS=nightly\n endif\n-ifeq ($(CFG_RELEASE_CHANNEL),source)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-pre\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-pre\n+ifeq ($(CFG_RELEASE_CHANNEL),dev)\n+CFG_RELEASE=$(CFG_RELEASE_NUM)-dev\n+CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-dev\n endif\n \n # The name of the package to use for creating tarballs, installers etc."}, {"sha": "0474e5a31ce1d5947644ba0026fa28c1b304c910", "filename": "src/doc/guide.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -4325,8 +4325,6 @@ and so we tell it that we want a vector of integers.\n is one:\n \n ```{rust}\n-let one_to_one_hundred = range(0i, 100i);\n-\n let greater_than_forty_two = range(0i, 100i)\n                              .find(|x| *x >= 42);\n "}, {"sha": "fe2107943c5762e193bade32da249470958bc275", "filename": "src/etc/pkg/rust.iss", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fetc%2Fpkg%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fetc%2Fpkg%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust.iss?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -8,7 +8,7 @@\n SetupIconFile=rust-logo.ico\n AppName=Rust\n AppVersion={#CFG_RELEASE}\n-AppCopyright=Copyright (C) 2006-2013 Mozilla Foundation, MIT license\n+AppCopyright=Copyright (C) 2006-2014 Mozilla Foundation, MIT license\n AppPublisher=Mozilla Foundation\n AppPublisherURL=http://www.rust-lang.org\n VersionInfoVersion={#CFG_VERSION_WIN}\n@@ -43,7 +43,7 @@ Source: \"tmp/dist/win/*.*\" ; DestDir: \"{app}\"; Flags: ignoreversion recursesubdi\n [Code]\n const\n \tModPathName = 'modifypath';\n-\tModPathType = 'user';\n+\tModPathType = 'system';\n \n function ModPathDir(): TArrayOfString;\n begin"}, {"sha": "e8165dabce5cd9ce2c4b8463831379ec2219bd3a", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -120,10 +120,9 @@ LIT_INTEGER\n   | '0x' [0-9a-fA-F][0-9a-fA-F_]* INT_SUFFIX?\n   ;\n \n-FLOAT_SUFFIX\n+fragment FLOAT_SUFFIX\n   : 'f32'\n   | 'f64'\n-  | 'f128'\n   ;\n \n LIT_FLOAT"}, {"sha": "168d0daeb3845d915a2fb734c6bcca442a768fa2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -96,12 +96,6 @@ pub trait BoxAny {\n     /// `Err(Self)` if it isn't.\n     #[unstable = \"naming conventions around accessing innards may change\"]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n-\n-    /// Deprecated; this method has been renamed to `downcast`.\n-    #[deprecated = \"use downcast instead\"]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self> {\n-        self.downcast::<T>()\n-    }\n }\n \n #[stable]"}, {"sha": "d5f0d25fb01f92a9e64fd85127ffd66ae2806e99", "filename": "src/liballoc/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fliballoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fliballoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Futil.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -16,7 +16,7 @@ use core::raw;\n #[inline]\n #[deprecated]\n pub fn get_box_size(body_size: uint, body_align: uint) -> uint {\n-    let header_size = mem::size_of::<raw::Box<()>>();\n+    let header_size = mem::size_of::<raw::GcBox<()>>();\n     let total_size = align_to(header_size, body_align) + body_size;\n     total_size\n }"}, {"sha": "f282549f6f9a44eb654ae9b464cf26b6eccdc817", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -16,7 +16,7 @@\n use core::prelude::*;\n use core::fmt;\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized `Set` implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set"}, {"sha": "a856642c9361b80bc7fde910e20624f9ae59f436", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -18,6 +18,7 @@ use core::default::Default;\n use core::fmt;\n use core::mem;\n use core::ptr;\n+use core::ops;\n // FIXME: ICE's abound if you import the `Slice` type while importing `Slice` trait\n use core::raw::Slice as RawSlice;\n \n@@ -530,7 +531,7 @@ impl String {\n     /// assert_eq!(s.as_slice(), \"abc123\");\n     /// ```\n     #[inline]\n-    #[stable = \"function just renamed from push\"]\n+    #[stable = \"function just renamed from push_char\"]\n     pub fn push(&mut self, ch: char) {\n         let cur_len = self.len();\n         // This may use up to 4 bytes.\n@@ -926,6 +927,28 @@ impl<S: Str> Add<S, String> for String {\n     }\n }\n \n+impl ops::Slice<uint, str> for String {\n+    #[inline]\n+    fn as_slice_<'a>(&'a self) -> &'a str {\n+        self.as_slice()\n+    }\n+\n+    #[inline]\n+    fn slice_from_<'a>(&'a self, from: &uint) -> &'a str {\n+        self[][*from..]\n+    }\n+\n+    #[inline]\n+    fn slice_to_<'a>(&'a self, to: &uint) -> &'a str {\n+        self[][..*to]\n+    }\n+\n+    #[inline]\n+    fn slice_<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+        self[][*from..*to]\n+    }\n+}\n+\n /// Unsafe operations\n #[unstable = \"waiting on raw module conventions\"]\n pub mod raw {\n@@ -1290,6 +1313,15 @@ mod tests {\n     #[test] #[should_fail] fn insert_bad1() { \"\".to_string().insert(1, 't'); }\n     #[test] #[should_fail] fn insert_bad2() { \"\u1ec7\".to_string().insert(1, 't'); }\n \n+    #[test]\n+    fn test_slicing() {\n+        let s = \"foobar\".to_string();\n+        assert_eq!(\"foobar\", s[]);\n+        assert_eq!(\"foo\", s[..3]);\n+        assert_eq!(\"bar\", s[3..]);\n+        assert_eq!(\"oob\", s[1..4]);\n+    }\n+\n     #[bench]\n     fn bench_with_capacity(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "8bccda37c246d7f44dfbeacc7126a0e601b49017", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -2393,8 +2393,6 @@ mod tests {\n         let _ = vec[3];\n     }\n \n-    // NOTE uncomment after snapshot\n-    /*\n     #[test]\n     #[should_fail]\n     fn test_slice_out_of_bounds_1() {\n@@ -2429,7 +2427,6 @@ mod tests {\n         let x: Vec<int> = vec![1, 2, 3, 4, 5];\n         x[3..2];\n     }\n-    */\n \n     #[test]\n     fn test_swap_remove_empty() {"}, {"sha": "9b63d325bc89add7fbe035be479676af95d5a707", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -33,24 +33,9 @@\n use fmt;\n use intrinsics;\n \n-// NOTE: remove after next snapshot\n-#[cfg(stage0)]\n-#[cold] #[inline(never)] // this is the slow path, always\n-#[lang=\"fail_\"]\n-fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n-    let (expr, file, line) = *expr_file_line;\n-    let ref file_line = (file, line);\n-    format_args!(|args| -> () {\n-        fail_fmt(args, file_line);\n-    }, \"{}\", expr);\n-\n-    unsafe { intrinsics::abort() }\n-}\n-\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail\"]\n-fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n+pub fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     let ref file_line = (file, line);\n     format_args!(|args| -> () {\n@@ -70,23 +55,10 @@ fn fail_bounds_check(file_line: &(&'static str, uint),\n     unsafe { intrinsics::abort() }\n }\n \n-#[cold] #[inline(never)]\n-pub fn fail_str(msg: &str, file: &(&'static str, uint)) -> ! {\n-    format_args!(|fmt| fail_fmt(fmt, file), \"{}\", msg)\n-}\n-\n #[cold] #[inline(never)]\n pub fn fail_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n-\n-        // NOTE: remove after next snapshot\n-        #[cfg(stage0)]\n-        #[lang = \"begin_unwind\"]\n-        fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n-                        line: uint) -> !;\n-\n-        #[cfg(not(stage0))]\n         #[lang = \"fail_fmt\"]\n         fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;"}, {"sha": "9799e9d398055ab23667d5d589572ac104f24ac1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -366,7 +366,7 @@ pub trait Iterator<A> {\n     ///     let mut sum = 0;\n     ///     for x in it {\n     ///         if x > 5 {\n-    ///             continue;\n+    ///             break;\n     ///         }\n     ///         sum += x;\n     ///     }\n@@ -377,6 +377,8 @@ pub trait Iterator<A> {\n     ///     sum\n     /// }\n     /// let x = vec![1i,2,3,7,8,9];\n+    /// assert_eq!(process(x.into_iter()), 6);\n+    /// let x = vec![1i,2,3];\n     /// assert_eq!(process(x.into_iter()), 1006);\n     /// ```\n     #[inline]"}, {"sha": "17fcf0254575df3f81824492ee6327d7b6f035a8", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -17,8 +17,8 @@ macro_rules! fail(\n         fail!(\"{}\", \"explicit failure\")\n     );\n     ($msg:expr) => ({\n-        static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::core::failure::fail_str($msg, &_FILE_LINE)\n+        static _MSG_FILE_LINE: (&'static str, &'static str, uint) = ($msg, file!(), line!());\n+        ::core::failure::fail(&_MSG_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full"}, {"sha": "ad0f128a02e783a39bc48dd5ceaae7ce34e961f4", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -764,13 +764,13 @@ pub trait Slice<Idx, Sized? Result> for Sized? {\n // FIXME(#17273) remove the postscript _s\n #[lang=\"slice_mut\"]\n pub trait SliceMut<Idx, Sized? Result> for Sized? {\n-    /// The method for the slicing operation foo[]\n+    /// The method for the slicing operation foo[mut]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Result;\n-    /// The method for the slicing operation foo[from..]\n+    /// The method for the slicing operation foo[mut from..]\n     fn slice_from_mut_<'a>(&'a mut self, from: &Idx) -> &'a mut Result;\n-    /// The method for the slicing operation foo[..to]\n+    /// The method for the slicing operation foo[mut ..to]\n     fn slice_to_mut_<'a>(&'a mut self, to: &Idx) -> &'a mut Result;\n-    /// The method for the slicing operation foo[from..to]\n+    /// The method for the slicing operation foo[mut from..to]\n     fn slice_mut_<'a>(&'a mut self, from: &Idx, to: &Idx) -> &'a mut Result;\n }\n /**"}, {"sha": "1e353708730f22e74bf4ac8825bc77d947433d7a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -312,7 +312,7 @@ impl<T> Option<T> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Some(val) => val,\n-            None => fail!(msg),\n+            None => fail!(\"{}\", msg),\n         }\n     }\n "}, {"sha": "86b96ff15f1569fa24d1091cb2347ac996406401", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -20,12 +20,12 @@\n \n use mem;\n \n-/// The representation of a Rust managed box\n-pub struct Box<T> {\n+/// The representation of `std::gc::Gc`.\n+pub struct GcBox<T> {\n     pub ref_count: uint,\n     pub drop_glue: fn(ptr: *mut u8),\n-    pub prev: *mut Box<T>,\n-    pub next: *mut Box<T>,\n+    pub prev: *mut GcBox<T>,\n+    pub next: *mut GcBox<T>,\n     pub data: T,\n }\n "}, {"sha": "343b8e0b64b0faefb46506f990a84427932dae70", "filename": "src/libcore/str.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -1123,6 +1123,7 @@ pub mod traits {\n     use collections::Collection;\n     use iter::Iterator;\n     use option::{Option, Some};\n+    use ops;\n     use str::{Str, StrSlice, eq_slice};\n \n     impl<'a> Ord for &'a str {\n@@ -1162,6 +1163,28 @@ pub mod traits {\n         #[inline]\n         fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n     }\n+\n+    impl ops::Slice<uint, str> for str {\n+        #[inline]\n+        fn as_slice_<'a>(&'a self) -> &'a str {\n+            self\n+        }\n+\n+        #[inline]\n+        fn slice_from_<'a>(&'a self, from: &uint) -> &'a str {\n+            self.slice_from(*from)\n+        }\n+\n+        #[inline]\n+        fn slice_to_<'a>(&'a self, to: &uint) -> &'a str {\n+            self.slice_to(*to)\n+        }\n+\n+        #[inline]\n+        fn slice_<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+            self.slice(*from, *to)\n+        }\n+    }\n }\n \n /// Any string that can be represented as a slice"}, {"sha": "64dc87908824b43bb184838598771c231a199f76", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -277,7 +277,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n     fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n         try!(self, self.writer.write(\"box(GC) \".as_bytes()));\n         self.write_mut_qualifier(mtbl);\n-        self.get::<&raw::Box<()>>(|this, b| {\n+        self.get::<&raw::GcBox<()>>(|this, b| {\n             let p = &b.data as *const () as *const u8;\n             this.visit_ptr_inner(p, inner)\n         })"}, {"sha": "b793096b30a4f3ec5f41018ef59c242d6bc31f15", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -1319,6 +1319,18 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n                         sess.abort_if_errors();\n                     }\n                 }\n+                // Fix up permissions of the copy, as fs::copy() preserves\n+                // permissions, but the original file may have been installed\n+                // by a package manager and may be read-only.\n+                match fs::chmod(&dst, io::UserRead | io::UserWrite) {\n+                    Ok(..) => {}\n+                    Err(e) => {\n+                        sess.err(format!(\"failed to chmod {} when preparing \\\n+                                          for LTO: {}\", dst.display(),\n+                                         e).as_slice());\n+                        sess.abort_if_errors();\n+                    }\n+                }\n                 let handler = &sess.diagnostic().handler;\n                 let config = ArchiveConfig {\n                     handler: handler,"}, {"sha": "7b4d1780ccd690fb072fcd600e29fb6103df936f", "filename": "src/librustc/back/write.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fwrite.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -16,6 +16,7 @@ use driver::session::Session;\n use driver::config;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n+use llvm::SMDiagnosticRef;\n use util::common::time;\n use syntax::abi;\n use syntax::codemap;\n@@ -326,14 +327,40 @@ impl<'a> CodegenContext<'a> {\n     }\n }\n \n-struct DiagHandlerFreeVars<'a> {\n+struct HandlerFreeVars<'a> {\n     llcx: ContextRef,\n     cgcx: &'a CodegenContext<'a>,\n }\n \n+unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n+                                        user: *const c_void,\n+                                        cookie: c_uint) {\n+    use syntax::codemap::ExpnId;\n+\n+    let HandlerFreeVars { cgcx, .. }\n+        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n+\n+    let msg = llvm::build_string(|s| llvm::LLVMWriteSMDiagnosticToString(diag, s))\n+        .expect(\"non-UTF8 SMDiagnostic\");\n+\n+    match cgcx.lto_ctxt {\n+        Some((sess, _)) => {\n+            sess.codemap().with_expn_info(ExpnId::from_llvm_cookie(cookie), |info| match info {\n+                Some(ei) => sess.span_err(ei.call_site, msg.as_slice()),\n+                None     => sess.err(msg.as_slice()),\n+            });\n+        }\n+\n+        None => {\n+            cgcx.handler.err(msg.as_slice());\n+            cgcx.handler.note(\"build without -C codegen-units for more exact errors\");\n+        }\n+    }\n+}\n+\n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n-    let DiagHandlerFreeVars { llcx, cgcx }\n-        = *mem::transmute::<_, *const DiagHandlerFreeVars>(user);\n+    let HandlerFreeVars { llcx, cgcx }\n+        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::Optimization(opt) => {\n@@ -368,14 +395,16 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let tm = config.tm;\n \n     // llcx doesn't outlive this function, so we can put this on the stack.\n-    let fv = DiagHandlerFreeVars {\n+    let fv = HandlerFreeVars {\n         llcx: llcx,\n         cgcx: cgcx,\n     };\n+    let fv = &fv as *const HandlerFreeVars as *mut c_void;\n+\n+    llvm::LLVMSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, fv);\n+\n     if !cgcx.remark.is_empty() {\n-        llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler,\n-                                              &fv as *const DiagHandlerFreeVars\n-                                                  as *mut c_void);\n+        llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, fv);\n     }\n \n     if config.emit_no_opt_bc {"}, {"sha": "be0c9bb0ba3563ae84db0fa97b07c353bc3e4ac1", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -288,8 +288,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n-                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 crate_name: crate_name.to_string(),\n+                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n+                enable_quotes: sess.features.borrow().quote,\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,\n@@ -556,6 +557,8 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n                               sess.opts.output_types.as_slice(),\n                               outputs));\n     }\n+\n+    sess.abort_if_errors();\n }\n \n /// Run the linker on any artifacts that resulted from the LLVM run."}, {"sha": "be3867eaba2fafef2851bdf13cb386d048e3081a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -32,7 +32,6 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, struct_variant, quote)]\n #![feature(default_type_params, phase, unsafe_destructor)]\n \n-#![allow(unknown_features)] // NOTE: Remove after next snapshot\n #![feature(rustc_diagnostic_macros)]\n #![feature(import_shadowing)]\n "}, {"sha": "26eca0938b1894b8469e5c82d073dcac18180537", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -652,12 +652,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         debug!(\"check_if_path_is_moved(id={:?}, use_kind={:?}, lp={})\",\n                id, use_kind, lp.repr(self.bccx.tcx));\n         let base_lp = owned_ptr_base_path_rc(lp);\n-        self.move_data.each_move_of(id, &base_lp, |move, moved_lp| {\n+        self.move_data.each_move_of(id, &base_lp, |the_move, moved_lp| {\n             self.bccx.report_use_of_moved_value(\n                 span,\n                 use_kind,\n                 &**lp,\n-                move,\n+                the_move,\n                 moved_lp);\n             false\n         });"}, {"sha": "63d49dcd3036ef7f499da1d582aa331766db0bbe", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         let move_index_to_path = |move_index| {\n             let move_data = &self.analysis_data.move_data.move_data;\n             let moves = move_data.moves.borrow();\n-            let move = moves.get(move_index);\n-            move_data.path_loan_path(move.path)\n+            let the_move = moves.get(move_index);\n+            move_data.path_loan_path(the_move.path)\n         };\n         self.build_set(e, cfgidx, dfcx, move_index_to_path)\n     }"}, {"sha": "d4d6fae53e3a330bdd0965f662130c4a95e9e6a8", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -409,14 +409,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                      use_span: Span,\n                                      use_kind: MovedValueUseKind,\n                                      lp: &LoanPath,\n-                                     move: &move_data::Move,\n+                                     the_move: &move_data::Move,\n                                      moved_lp: &LoanPath) {\n         let verb = match use_kind {\n             MovedInUse => \"use\",\n             MovedInCapture => \"capture\",\n         };\n \n-        match move.kind {\n+        match the_move.kind {\n             move_data::Declared => {\n                 self.tcx.sess.span_err(\n                     use_span,\n@@ -435,18 +435,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        match move.kind {\n+        match the_move.kind {\n             move_data::Declared => {}\n \n             move_data::MoveExpr => {\n-                let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n+                let (expr_ty, expr_span) = match self.tcx\n+                                                     .map\n+                                                     .find(the_move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n                         (ty::expr_ty_adjusted(self.tcx, &*expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(format!(\"MoveExpr({:?}) maps to \\\n                                                    {:?}, not Expr\",\n-                                                  move.id,\n+                                                  the_move.id,\n                                                   r).as_slice())\n                     }\n                 };\n@@ -461,8 +463,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             move_data::MovePat => {\n-                let pat_ty = ty::node_id_to_type(self.tcx, move.id);\n-                self.tcx.sess.span_note(self.tcx.map.span(move.id),\n+                let pat_ty = ty::node_id_to_type(self.tcx, the_move.id);\n+                self.tcx.sess.span_note(self.tcx.map.span(the_move.id),\n                     format!(\"`{}` moved here because it has type `{}`, \\\n                              which is moved by default (use `ref` to \\\n                              override)\",\n@@ -471,14 +473,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             move_data::Captured => {\n-                let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n+                let (expr_ty, expr_span) = match self.tcx\n+                                                     .map\n+                                                     .find(the_move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n                         (ty::expr_ty_adjusted(self.tcx, &*expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(format!(\"Captured({:?}) maps to \\\n                                                    {:?}, not Expr\",\n-                                                  move.id,\n+                                                  the_move.id,\n                                                   r).as_slice())\n                     }\n                 };"}, {"sha": "5cc58eb264e076d196167aad6f43130da525d0fe", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -413,8 +413,8 @@ impl MoveData {\n          * killed by scoping. See `doc.rs` for more details.\n          */\n \n-        for (i, move) in self.moves.borrow().iter().enumerate() {\n-            dfcx_moves.add_gen(move.id, i);\n+        for (i, the_move) in self.moves.borrow().iter().enumerate() {\n+            dfcx_moves.add_gen(the_move.id, i);\n         }\n \n         for (i, assignment) in self.var_assignments.borrow().iter().enumerate() {\n@@ -577,10 +577,10 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n         let mut ret = None;\n         for loan_path_index in self.move_data.path_map.borrow().find(&*loan_path).iter() {\n             self.dfcx_moves.each_gen_bit(id, |move_index| {\n-                let move = self.move_data.moves.borrow();\n-                let move = move.get(move_index);\n-                if move.path == **loan_path_index {\n-                    ret = Some(move.kind);\n+                let the_move = self.move_data.moves.borrow();\n+                let the_move = the_move.get(move_index);\n+                if the_move.path == **loan_path_index {\n+                    ret = Some(the_move.kind);\n                     false\n                 } else {\n                     true\n@@ -622,13 +622,13 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n         let mut ret = true;\n \n         self.dfcx_moves.each_bit_on_entry(id, |index| {\n-            let move = self.move_data.moves.borrow();\n-            let move = move.get(index);\n-            let moved_path = move.path;\n+            let the_move = self.move_data.moves.borrow();\n+            let the_move = the_move.get(index);\n+            let moved_path = the_move.path;\n             if base_indices.iter().any(|x| x == &moved_path) {\n                 // Scenario 1 or 2: `loan_path` or some base path of\n                 // `loan_path` was moved.\n-                if !f(move, &*self.move_data.path_loan_path(moved_path)) {\n+                if !f(the_move, &*self.move_data.path_loan_path(moved_path)) {\n                     ret = false;\n                 }\n             } else {\n@@ -637,7 +637,8 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                         if p == loan_path_index {\n                             // Scenario 3: some extension of `loan_path`\n                             // was moved\n-                            f(move, &*self.move_data.path_loan_path(moved_path))\n+                            f(the_move,\n+                              &*self.move_data.path_loan_path(moved_path))\n                         } else {\n                             true\n                         }"}, {"sha": "c51e242026241c72ee355dc4c7781e29368d8114", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -25,6 +25,7 @@ use middle::trans::type_::Type;\n use std::c_str::ToCStr;\n use std::string::String;\n use syntax::ast;\n+use libc::{c_uint, c_char};\n \n // Take an inline assembly expression and splat it out via LLVM\n pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n@@ -141,6 +142,19 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n         }\n     }\n \n+    // Store expn_id in a metadata node so we can map LLVM errors\n+    // back to source locations.  See #17552.\n+    unsafe {\n+        let key = \"srcloc\";\n+        let kind = llvm::LLVMGetMDKindIDInContext(bcx.ccx().llcx(),\n+            key.as_ptr() as *const c_char, key.len() as c_uint);\n+\n+        let val: llvm::ValueRef = C_i32(bcx.ccx(), ia.expn_id.to_llvm_cookie());\n+\n+        llvm::LLVMSetMetadata(r, kind,\n+            llvm::LLVMMDNodeInContext(bcx.ccx().llcx(), &val, 1));\n+    }\n+\n     return bcx;\n \n }"}, {"sha": "d4c38d48a8c561584c9acfae9250d2e6f7cb80de", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -1405,6 +1405,37 @@ fn check_cast(fcx: &FnCtxt,\n         return\n     }\n \n+    if !ty::type_is_sized(fcx.tcx(), t_1) {\n+        let tstr = fcx.infcx().ty_to_string(t_1);\n+        fcx.type_error_message(span, |actual| {\n+            format!(\"cast to unsized type: `{}` as `{}`\", actual, tstr)\n+        }, t_e, None);\n+        match ty::get(t_e).sty {\n+            ty::ty_rptr(_, ty::mt { mutbl: mt, .. }) => {\n+                let mtstr = match mt {\n+                    ast::MutMutable => \"mut \",\n+                    ast::MutImmutable => \"\"\n+                };\n+                if ty::type_is_trait(t_1) {\n+                    span_note!(fcx.tcx().sess, t.span, \"did you mean `&{}{}`?\", mtstr, tstr);\n+                } else {\n+                    span_note!(fcx.tcx().sess, span,\n+                               \"consider using an implicit coercion to `&{}{}` instead\",\n+                               mtstr, tstr);\n+                }\n+            }\n+            ty::ty_uniq(..) => {\n+                span_note!(fcx.tcx().sess, t.span, \"did you mean `Box<{}>`?\", tstr);\n+            }\n+            _ => {\n+                span_note!(fcx.tcx().sess, e.span,\n+                           \"consider using a box or reference as appropriate\");\n+            }\n+        }\n+        fcx.write_error(id);\n+        return\n+    }\n+\n     if ty::type_is_trait(t_1) {\n         // This will be looked up later on.\n         vtable2::check_object_cast(fcx, cast_expr, e, t_1);"}, {"sha": "88e09c306006083dca903b179a1f711fdcbc3a1a", "filename": "src/librustc/middle/typeck/coherence/overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Foverlap.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -49,8 +49,8 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n \n         // FIXME -- it seems like this method actually pushes\n         // duplicate impls onto the list\n-        ty::populate_implementations_for_type_if_necessary(self.tcx,\n-                                                           trait_def_id);\n+        ty::populate_implementations_for_trait_if_necessary(self.tcx,\n+                                                            trait_def_id);\n \n         let mut impls = Vec::new();\n         self.push_impls_of_trait(trait_def_id, &mut impls);"}, {"sha": "401933d7058493df7ec9a4404c9c0e4b6ed2436f", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -424,8 +424,11 @@ pub enum DiagnosticInfo_opaque {}\n pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n pub enum DebugLoc_opaque {}\n pub type DebugLocRef = *mut DebugLoc_opaque;\n+pub enum SMDiagnostic_opaque {}\n+pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n+pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n pub mod debuginfo {\n     use super::{ValueRef};\n@@ -1967,6 +1970,12 @@ extern {\n     pub fn LLVMGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n     pub fn LLVMWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n+\n+    pub fn LLVMSetInlineAsmDiagnosticHandler(C: ContextRef,\n+                                             H: InlineAsmDiagHandler,\n+                                             CX: *mut c_void);\n+\n+    pub fn LLVMWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);\n }\n \n pub fn SetInstructionCallConv(instr: ValueRef, cc: CallConv) {"}, {"sha": "666be2debdaabd8fbac8e4d5759220f2ed7c06fc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -641,18 +641,35 @@ impl Clean<Option<Lifetime>> for ty::Region {\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+pub struct WherePredicate {\n+    pub name: String,\n+    pub bounds: Vec<TyParamBound>\n+}\n+\n+impl Clean<WherePredicate> for ast::WherePredicate {\n+    fn clean(&self, cx: &DocContext) -> WherePredicate {\n+        WherePredicate {\n+            name: self.ident.clean(cx),\n+            bounds: self.bounds.clean(cx)\n+        }\n+    }\n+}\n+\n // maybe use a Generic enum and use ~[Generic]?\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n+    pub where_predicates: Vec<WherePredicate>\n }\n \n impl Clean<Generics> for ast::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n         Generics {\n             lifetimes: self.lifetimes.clean(cx),\n             type_params: self.ty_params.clean(cx),\n+            where_predicates: self.where_clause.predicates.clean(cx)\n         }\n     }\n }\n@@ -663,6 +680,7 @@ impl<'a> Clean<Generics> for (&'a ty::Generics, subst::ParamSpace) {\n         Generics {\n             type_params: me.types.get_slice(space).to_vec().clean(cx),\n             lifetimes: me.regions.get_slice(space).to_vec().clean(cx),\n+            where_predicates: vec![]\n         }\n     }\n }\n@@ -1260,7 +1278,9 @@ impl Clean<Type> for ty::t {\n             ty::ty_bare_fn(ref fty) => BareFunction(box BareFunctionDecl {\n                 fn_style: fty.fn_style,\n                 generics: Generics {\n-                    lifetimes: Vec::new(), type_params: Vec::new()\n+                    lifetimes: Vec::new(),\n+                    type_params: Vec::new(),\n+                    where_predicates: Vec::new()\n                 },\n                 decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n                 abi: fty.abi.to_string(),\n@@ -1670,6 +1690,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n             generics: Generics {\n                 lifetimes: self.lifetimes.clean(cx),\n                 type_params: Vec::new(),\n+                where_predicates: Vec::new()\n             },\n             decl: self.decl.clean(cx),\n             abi: self.abi.to_string(),\n@@ -2172,6 +2193,7 @@ impl Clean<Item> for ast::Typedef {\n                 generics: Generics {\n                     lifetimes: Vec::new(),\n                     type_params: Vec::new(),\n+                    where_predicates: Vec::new()\n                 },\n             }),\n             visibility: None,"}, {"sha": "947d9f05ae2bba0cdc0915b0547ffd36cf809488", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -44,6 +44,11 @@ pub struct RawMutableSpace(pub clean::Mutability);\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);\n /// Wrapper struct for emitting the stability level concisely.\n pub struct ConciseStability<'a>(pub &'a Option<clean::Stability>);\n+/// Wrapper struct for emitting a where clause from Generics.\n+pub struct WhereClause<'a>(pub &'a clean::Generics);\n+\n+/// Wrapper struct for emitting type parameter bounds.\n+struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -57,6 +62,19 @@ impl FnStyleSpace {\n     }\n }\n \n+impl<'a> fmt::Show for TyParamBounds<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let &TyParamBounds(bounds) = self;\n+        for (i, bound) in bounds.iter().enumerate() {\n+            if i > 0 {\n+                try!(f.write(\" + \".as_bytes()));\n+            }\n+            try!(write!(f, \"{}\", *bound));\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl fmt::Show for clean::Generics {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.lifetimes.len() == 0 && self.type_params.len() == 0 { return Ok(()) }\n@@ -73,21 +91,14 @@ impl fmt::Show for clean::Generics {\n             if self.lifetimes.len() > 0 {\n                 try!(f.write(\", \".as_bytes()));\n             }\n-\n             for (i, tp) in self.type_params.iter().enumerate() {\n                 if i > 0 {\n                     try!(f.write(\", \".as_bytes()))\n                 }\n                 try!(f.write(tp.name.as_bytes()));\n \n                 if tp.bounds.len() > 0 {\n-                    try!(f.write(\": \".as_bytes()));\n-                    for (i, bound) in tp.bounds.iter().enumerate() {\n-                        if i > 0 {\n-                            try!(f.write(\" + \".as_bytes()));\n-                        }\n-                        try!(write!(f, \"{}\", *bound));\n-                    }\n+                    try!(write!(f, \": {}\", TyParamBounds(tp.bounds.as_slice())));\n                 }\n \n                 match tp.default {\n@@ -101,6 +112,24 @@ impl fmt::Show for clean::Generics {\n     }\n }\n \n+impl<'a> fmt::Show for WhereClause<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let &WhereClause(gens) = self;\n+        if gens.where_predicates.len() == 0 {\n+            return Ok(());\n+        }\n+        try!(f.write(\" where \".as_bytes()));\n+        for (i, pred) in gens.where_predicates.iter().enumerate() {\n+            if i > 0 {\n+                try!(f.write(\", \".as_bytes()));\n+            }\n+            let bounds = pred.bounds.as_slice();\n+            try!(write!(f, \"{}: {}\", pred.name, TyParamBounds(bounds)));\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl fmt::Show for clean::Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(f.write(self.get_ref().as_bytes()));"}, {"sha": "8668e684c2d643bf01105798478398338a4af720", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -56,7 +56,7 @@ use clean;\n use doctree;\n use fold::DocFolder;\n use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace, Stability};\n-use html::format::{ConciseStability};\n+use html::format::{ConciseStability, WhereClause};\n use html::highlight;\n use html::item_type::{ItemType, shortty};\n use html::item_type;\n@@ -1610,11 +1610,12 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\\n-                    {name}{generics}{decl}</pre>\",\n+                    {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n            fn_style = FnStyleSpace(f.fn_style),\n            name = it.name.get_ref().as_slice(),\n            generics = f.generics,\n+           where_clause = WhereClause(&f.generics),\n            decl = f.decl));\n     document(w, it)\n }\n@@ -1631,11 +1632,12 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n \n     // Output the trait definition\n-    try!(write!(w, \"<pre class='rust trait'>{}trait {}{}{} \",\n+    try!(write!(w, \"<pre class='rust trait'>{}trait {}{}{}{} \",\n                   VisSpace(it.visibility),\n                   it.name.get_ref().as_slice(),\n                   t.generics,\n-                  bounds));\n+                  bounds,\n+                  WhereClause(&t.generics)));\n     let required = t.items.iter()\n                           .filter(|m| {\n                               match **m {\n@@ -1719,9 +1721,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     match cache.implementors.find(&it.def_id) {\n         Some(implementors) => {\n             for i in implementors.iter() {\n-                try!(writeln!(w, \"<li>{}<code>impl{} {} for {}</code></li>\",\n+                try!(writeln!(w, \"<li>{}<code>impl{} {} for {}{}</code></li>\",\n                               ConciseStability(&i.stability),\n-                              i.generics, i.trait_, i.for_));\n+                              i.generics, i.trait_, i.for_, WhereClause(&i.generics)));\n             }\n         }\n         None => {}\n@@ -1747,15 +1749,16 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n            g: &clean::Generics, selfty: &clean::SelfTy,\n            d: &clean::FnDecl) -> fmt::Result {\n         write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}\",\n+                   {generics}{decl}{where_clause}\",\n                match fn_style {\n                    ast::UnsafeFn => \"unsafe \",\n                    _ => \"\",\n                },\n                ty = shortty(it),\n                name = it.name.get_ref().as_slice(),\n                generics = *g,\n-               decl = Method(selfty, d))\n+               decl = Method(selfty, d),\n+               where_clause = WhereClause(g))\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n@@ -1810,10 +1813,11 @@ fn item_struct(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust enum'>{}enum {}{}\",\n+    try!(write!(w, \"<pre class='rust enum'>{}enum {}{}{}\",\n                   VisSpace(it.visibility),\n                   it.name.get_ref().as_slice(),\n-                  e.generics));\n+                  e.generics,\n+                  WhereClause(&e.generics)));\n     if e.variants.len() == 0 && !e.variants_stripped {\n         try!(write!(w, \" {{}}\"));\n     } else {\n@@ -1917,7 +1921,7 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n                   if structhead {\"struct \"} else {\"\"},\n                   it.name.get_ref().as_slice()));\n     match g {\n-        Some(g) => try!(write!(w, \"{}\", *g)),\n+        Some(g) => try!(write!(w, \"{}{}\", *g, WhereClause(g))),\n         None => {}\n     }\n     match ty {\n@@ -2009,7 +2013,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n         Some(ref ty) => try!(write!(w, \"{} for \", *ty)),\n         None => {}\n     }\n-    try!(write!(w, \"{}</code></h3>\", i.impl_.for_));\n+    try!(write!(w, \"{}{}</code></h3>\", i.impl_.for_, WhereClause(&i.impl_.generics)));\n     match i.dox {\n         Some(ref dox) => {\n             try!(write!(w, \"<div class='docblock'>{}</div>\","}, {"sha": "0e84e9c0097f55a8bbea436827aa168b07a520a3", "filename": "src/librustrt/local_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustrt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustrt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_heap.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -24,15 +24,15 @@ use task::Task;\n \n static RC_IMMORTAL : uint = 0x77777777;\n \n-pub type Box = raw::Box<()>;\n+pub type Box = raw::GcBox<()>;\n \n pub struct MemoryRegion {\n     live_allocations: uint,\n }\n \n pub struct LocalHeap {\n     memory_region: MemoryRegion,\n-    live_allocs: *mut raw::Box<()>,\n+    live_allocs: *mut raw::GcBox<()>,\n }\n \n impl LocalHeap {\n@@ -161,7 +161,7 @@ impl LocalHeap {\n     }\n \n     unsafe fn each_live_alloc(&mut self, read_next_before: bool,\n-                              f: |&mut LocalHeap, alloc: *mut raw::Box<()>|) {\n+                              f: |&mut LocalHeap, alloc: *mut raw::GcBox<()>|) {\n         //! Walks the internal list of allocations\n \n         let mut alloc = self.live_allocs;"}, {"sha": "d3ab0f27c1328d5973374ae59fe4840a5c915614", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -37,11 +37,11 @@\n //! In the cleanup phase, personality routines invoke cleanup code associated\n //! with their stack frames (i.e. destructors).  Once stack has been unwound down\n //! to the handler frame level, unwinding stops and the last personality routine\n-//! transfers control to its' catch block.\n+//! transfers control to its catch block.\n //!\n //! ## Frame unwind info registration\n //!\n-//! Each module has its' own frame unwind info section (usually \".eh_frame\"), and\n+//! Each module has its own frame unwind info section (usually \".eh_frame\"), and\n //! unwinder needs to know about all of them in order for unwinding to be able to\n //! cross module boundaries.\n //!\n@@ -488,22 +488,13 @@ pub mod eabi {\n }\n \n // Entry point of failure from the libcore crate\n-#[cfg(not(test), not(stage0))]\n+#[cfg(not(test))]\n #[lang = \"fail_fmt\"]\n pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {\n     begin_unwind_fmt(msg, &(file, line))\n }\n \n-//\n-// Entry point of failure from the libcore crate\n-#[cfg(stage0, not(test))]\n-#[lang = \"begin_unwind\"]\n-pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n-                                file: &'static str, line: uint) -> ! {\n-    begin_unwind_fmt(msg, &(file, line))\n-}\n-\n /// The entry point for unwinding with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call"}, {"sha": "ed95fa341b39dee80ceae43bd2f77bf2292fd7b0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -668,16 +668,23 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n         if cnt == 0 {\n             escape_str(self.writer, name)\n         } else {\n+            try!(write!(self.writer, \"{{\\n\"));\n             self.curr_indent += self.indent;\n-            try!(write!(self.writer, \"[\\n\"));\n             try!(spaces(self.writer, self.curr_indent));\n+            try!(write!(self.writer, \"\\\"variant\\\": \"));\n             try!(escape_str(self.writer, name));\n             try!(write!(self.writer, \",\\n\"));\n+            try!(spaces(self.writer, self.curr_indent));\n+            try!(write!(self.writer, \"\\\"fields\\\": [\\n\"));\n+            self.curr_indent += self.indent;\n             try!(f(self));\n             self.curr_indent -= self.indent;\n             try!(write!(self.writer, \"\\n\"));\n             try!(spaces(self.writer, self.curr_indent));\n-            write!(self.writer, \"]\")\n+            self.curr_indent -= self.indent;\n+            try!(write!(self.writer, \"]\\n\"));\n+            try!(spaces(self.writer, self.curr_indent));\n+            write!(self.writer, \"}}\")\n         }\n     }\n \n@@ -2651,12 +2658,13 @@ mod tests {\n                 let mut encoder = PrettyEncoder::new(writer);\n                 animal.encode(&mut encoder).unwrap();\n             }),\n-            \"\\\n-            [\\n  \\\n-                \\\"Frog\\\",\\n  \\\n-                \\\"Henry\\\",\\n  \\\n-                349\\n\\\n-            ]\".to_string()\n+            \"{\\n  \\\n+               \\\"variant\\\": \\\"Frog\\\",\\n  \\\n+               \\\"fields\\\": [\\n    \\\n+                 \\\"Henry\\\",\\n    \\\n+                 349\\n  \\\n+               ]\\n\\\n+             }\".to_string()\n         );\n     }\n "}, {"sha": "1d479b852480c009700e819f6acd07f92b106c7e", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -93,6 +93,7 @@\n ///\n /// - `BitOr`: union\n /// - `BitAnd`: intersection\n+/// - `BitXor`: toggle\n /// - `Sub`: set difference\n /// - `Not`: set complement\n ///\n@@ -109,6 +110,8 @@\n /// - `contains`: `true` all of the flags in `other` are contained within `self`\n /// - `insert`: inserts the specified flags in-place\n /// - `remove`: removes the specified flags in-place\n+/// - `toggle`: the specified flags will be inserted if not present, and removed\n+///             if they are.\n #[macro_export]\n macro_rules! bitflags {\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n@@ -184,6 +187,11 @@ macro_rules! bitflags {\n             pub fn remove(&mut self, other: $BitFlags) {\n                 self.bits &= !other.bits;\n             }\n+\n+            /// Toggles the specified flags in-place.\n+            pub fn toggle(&mut self, other: $BitFlags) {\n+                self.bits ^= other.bits;\n+            }\n         }\n \n         impl BitOr<$BitFlags, $BitFlags> for $BitFlags {\n@@ -194,6 +202,14 @@ macro_rules! bitflags {\n             }\n         }\n \n+        impl BitXor<$BitFlags, $BitFlags> for $BitFlags {\n+            /// Returns the left flags, but with all the right flags toggled.\n+            #[inline]\n+            fn bitxor(&self, other: &$BitFlags) -> $BitFlags {\n+                $BitFlags { bits: self.bits ^ other.bits }\n+            }\n+        }\n+\n         impl BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the intersection between the two sets of flags.\n             #[inline]\n@@ -234,7 +250,7 @@ macro_rules! bitflags {\n mod tests {\n     use hash;\n     use option::{Some, None};\n-    use ops::{BitOr, BitAnd, Sub, Not};\n+    use ops::{BitOr, BitAnd, BitXor, Sub, Not};\n \n     bitflags! {\n         #[doc = \"> The first principle is that you must not fool yourself \u2014 and\"]\n@@ -358,10 +374,14 @@ mod tests {\n     fn test_operators() {\n         let e1 = FlagA | FlagC;\n         let e2 = FlagB | FlagC;\n-        assert!((e1 | e2) == FlagABC);   // union\n-        assert!((e1 & e2) == FlagC);     // intersection\n-        assert!((e1 - e2) == FlagA);     // set difference\n-        assert!(!e2 == FlagA);           // set complement\n+        assert!((e1 | e2) == FlagABC);     // union\n+        assert!((e1 & e2) == FlagC);       // intersection\n+        assert!((e1 - e2) == FlagA);       // set difference\n+        assert!(!e2 == FlagA);             // set complement\n+        assert!(e1 ^ e2 == FlagA | FlagB); // toggle\n+        let mut e3 = e1;\n+        e3.toggle(e2);\n+        assert!(e3 == FlagA | FlagB);\n     }\n \n     #[test]"}, {"sha": "ecef8e9ed902231f2f70f0fabc9399d23b71b1c0", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -89,7 +89,7 @@ impl<T: Default + 'static> Default for Gc<T> {\n     }\n }\n \n-impl<T: 'static> raw::Repr<*const raw::Box<T>> for Gc<T> {}\n+impl<T: 'static> raw::Repr<*const raw::GcBox<T>> for Gc<T> {}\n \n impl<S: hash::Writer, T: hash::Hash<S> + 'static> hash::Hash<S> for Gc<T> {\n     fn hash(&self, s: &mut S) {"}, {"sha": "444372e3c4f0487a90e39441c6198f225162ea20", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -229,7 +229,7 @@ use int;\n use iter::Iterator;\n use libc;\n use mem::transmute;\n-use ops::{BitOr, BitAnd, Sub, Not};\n+use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n use option::{Option, Some, None};\n use os;\n use boxed::Box;"}, {"sha": "0fee3ff32185049f222e304b143f72d0cbda1961", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -10,7 +10,7 @@\n \n // The Rust abstract syntax tree.\n \n-use codemap::{Span, Spanned, DUMMY_SP};\n+use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -983,7 +983,8 @@ pub struct InlineAsm {\n     pub clobbers: InternedString,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect\n+    pub dialect: AsmDialect,\n+    pub expn_id: ExpnId,\n }\n \n /// represents an argument in a function header"}, {"sha": "e9b2556c53e25dd5a86c78e3cc2d90962b6f997f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -26,6 +26,7 @@ source code snippets, etc.\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::cell::RefCell;\n use std::rc::Rc;\n+use libc::c_uint;\n \n pub trait Pos {\n     fn from_uint(n: uint) -> Self;\n@@ -223,11 +224,22 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[deriving(PartialEq, Eq, Clone, Show, Hash)]\n+#[deriving(PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n pub struct ExpnId(u32);\n \n pub static NO_EXPANSION: ExpnId = ExpnId(-1);\n \n+impl ExpnId {\n+    pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {\n+        ExpnId(cookie as u32)\n+    }\n+\n+    pub fn to_llvm_cookie(self) -> i32 {\n+        let ExpnId(cookie) = self;\n+        cookie as i32\n+    }\n+}\n+\n pub type FileName = String;\n \n pub struct FileLines {"}, {"sha": "702be0c0eeede090cb501a24a57de7d2983c99d4", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -13,6 +13,7 @@\n  */\n \n use ast;\n+use codemap;\n use codemap::Span;\n use ext::base;\n use ext::base::*;\n@@ -198,6 +199,15 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n     }\n \n+    let expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n+        call_site: sp,\n+        callee: codemap::NameAndSpan {\n+            name: \"asm\".to_string(),\n+            format: codemap::MacroBang,\n+            span: None,\n+        },\n+    });\n+\n     MacExpr::new(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n@@ -208,7 +218,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             clobbers: token::intern_and_get_ident(cons.as_slice()),\n             volatile: volatile,\n             alignstack: alignstack,\n-            dialect: dialect\n+            dialect: dialect,\n+            expn_id: expn_id,\n         }),\n         span: sp\n     }))"}, {"sha": "212cd33e16e61142d581deddfa19227d3f77c058", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -344,7 +344,7 @@ impl BlockInfo {\n \n /// The base map of methods for expanding syntax extension\n /// AST nodes into full ASTs\n-fn initial_syntax_expander_table() -> SyntaxEnv {\n+fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n         NormalTT(box f, None)\n@@ -383,31 +383,33 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_meta_deriving));\n \n-    // Quasi-quoting expanders\n-    syntax_expanders.insert(intern(\"quote_tokens\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_tokens));\n-    syntax_expanders.insert(intern(\"quote_expr\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_expr));\n-    syntax_expanders.insert(intern(\"quote_ty\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_ty));\n-    syntax_expanders.insert(intern(\"quote_method\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_method));\n-    syntax_expanders.insert(intern(\"quote_item\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_item));\n-    syntax_expanders.insert(intern(\"quote_pat\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_pat));\n-    syntax_expanders.insert(intern(\"quote_arm\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_arm));\n-    syntax_expanders.insert(intern(\"quote_stmt\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_stmt));\n+    if ecfg.enable_quotes {\n+        // Quasi-quoting expanders\n+        syntax_expanders.insert(intern(\"quote_tokens\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_tokens));\n+        syntax_expanders.insert(intern(\"quote_expr\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_expr));\n+        syntax_expanders.insert(intern(\"quote_ty\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_ty));\n+        syntax_expanders.insert(intern(\"quote_method\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_method));\n+        syntax_expanders.insert(intern(\"quote_item\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_item));\n+        syntax_expanders.insert(intern(\"quote_pat\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_pat));\n+        syntax_expanders.insert(intern(\"quote_arm\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_arm));\n+        syntax_expanders.insert(intern(\"quote_stmt\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_stmt));\n+    }\n \n     syntax_expanders.insert(intern(\"line\"),\n                             builtin_normal_expander(\n@@ -466,6 +468,7 @@ pub struct ExtCtxt<'a> {\n impl<'a> ExtCtxt<'a> {\n     pub fn new<'a>(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,\n                    ecfg: expand::ExpansionConfig) -> ExtCtxt<'a> {\n+        let env = initial_syntax_expander_table(&ecfg);\n         ExtCtxt {\n             parse_sess: parse_sess,\n             cfg: cfg,\n@@ -474,7 +477,7 @@ impl<'a> ExtCtxt<'a> {\n             ecfg: ecfg,\n             trace_mac: false,\n             exported_macros: Vec::new(),\n-            syntax_env: initial_syntax_expander_table(),\n+            syntax_env: env,\n         }\n     }\n "}, {"sha": "9f3df1a762398223a5c9f6c8e978415baf40f45d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -975,8 +975,19 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n }\n \n pub struct ExpansionConfig {\n-    pub deriving_hash_type_parameter: bool,\n     pub crate_name: String,\n+    pub deriving_hash_type_parameter: bool,\n+    pub enable_quotes: bool,\n+}\n+\n+impl ExpansionConfig {\n+    pub fn default(crate_name: String) -> ExpansionConfig {\n+        ExpansionConfig {\n+            crate_name: crate_name,\n+            deriving_hash_type_parameter: false,\n+            enable_quotes: false,\n+        }\n+    }\n }\n \n pub struct ExportedMacros {\n@@ -1106,7 +1117,7 @@ impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n #[cfg(test)]\n mod test {\n     use super::{pattern_bindings, expand_crate, contains_macro_escape};\n-    use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer};\n+    use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord, Name};\n     use attr;\n@@ -1171,6 +1182,10 @@ mod test {\n     // these following tests are quite fragile, in that they don't test what\n     // *kind* of failure occurs.\n \n+    fn test_ecfg() -> ExpansionConfig {\n+        ExpansionConfig::default(\"test\".to_string())\n+    }\n+\n     // make sure that macros can't escape fns\n     #[should_fail]\n     #[test] fn macros_cant_escape_fns_test () {\n@@ -1182,11 +1197,7 @@ mod test {\n             src,\n             Vec::new(), &sess);\n         // should fail:\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n+        expand_crate(&sess,test_ecfg(),vec!(),vec!(),crate_ast);\n     }\n \n     // make sure that macros can't escape modules\n@@ -1199,11 +1210,7 @@ mod test {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n+        expand_crate(&sess,test_ecfg(),vec!(),vec!(),crate_ast);\n     }\n \n     // macro_escape modules should allow macros to escape\n@@ -1215,11 +1222,7 @@ mod test {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess, cfg, vec!(), vec!(), crate_ast);\n+        expand_crate(&sess, test_ecfg(), vec!(), vec!(), crate_ast);\n     }\n \n     #[test] fn test_contains_flatten (){\n@@ -1252,11 +1255,7 @@ mod test {\n         let ps = parse::new_parse_sess();\n         let crate_ast = string_to_parser(&ps, crate_str).parse_crate_mod();\n         // the cfg argument actually does matter, here...\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&ps,cfg,vec!(),vec!(),crate_ast)\n+        expand_crate(&ps,test_ecfg(),vec!(),vec!(),crate_ast)\n     }\n \n     // find the pat_ident paths in a crate"}, {"sha": "1c6ee8acc94a59077a2054fa2b9920288c183b7e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -102,6 +102,7 @@ pub struct Features {\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n     pub visible_private_types: bool,\n+    pub quote: bool,\n }\n \n impl Features {\n@@ -112,6 +113,7 @@ impl Features {\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n             visible_private_types: false,\n+            quote: false,\n         }\n     }\n }\n@@ -282,10 +284,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         let ast::MacInvocTT(ref path, _, _) = macro.node;\n         let id = path.segments.last().unwrap().identifier;\n-        let quotes = [\"quote_tokens\", \"quote_expr\", \"quote_ty\",\n-                      \"quote_item\", \"quote_pat\", \"quote_stmt\"];\n-        let msg = \" is not stable enough for use and are subject to change\";\n-\n \n         if id == token::str_to_ident(\"macro_rules\") {\n             self.gate_feature(\"macro_rules\", path.span, \"macro definitions are \\\n@@ -311,16 +309,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             self.gate_feature(\"concat_idents\", path.span, \"`concat_idents` is not \\\n                 stable enough for use and is subject to change\");\n         }\n-\n-        else {\n-            for &quote in quotes.iter() {\n-                if id == token::str_to_ident(quote) {\n-                  self.gate_feature(\"quote\",\n-                                    path.span,\n-                                    format!(\"{}{}\", quote, msg).as_slice());\n-                }\n-            }\n-        }\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n@@ -483,6 +471,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n+        quote: cx.has_feature(\"quote\"),\n     },\n     unknown_features)\n }"}, {"sha": "53be7f2c20c4ea6a545adbc606d21466f33b62bc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -1279,7 +1279,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 clobbers,\n                 volatile,\n                 alignstack,\n-                dialect\n+                dialect,\n+                expn_id,\n             }) => ExprInlineAsm(InlineAsm {\n                 inputs: inputs.move_map(|(c, input)| {\n                     (c, folder.fold_expr(input))\n@@ -1292,7 +1293,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 clobbers: clobbers,\n                 volatile: volatile,\n                 alignstack: alignstack,\n-                dialect: dialect\n+                dialect: dialect,\n+                expn_id: expn_id,\n             }),\n             ExprMac(mac) => ExprMac(folder.fold_mac(mac)),\n             ExprStruct(path, fields, maybe_expr) => {"}, {"sha": "a42715441465470b6516b5392e10f0e8bd31bd0a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -33,6 +33,7 @@ extern crate debug;\n #[phase(plugin, link)] extern crate log;\n extern crate serialize;\n extern crate term;\n+extern crate libc;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "415ff6a4097ac521a4d38d700073d8e203c10181", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -2084,7 +2084,7 @@ impl<'a> Parser<'a> {\n                                     ExprBlock(blk));\n             },\n             token::BINOP(token::OR) |  token::OROR => {\n-                return self.parse_lambda_expr(CaptureByValue);\n+                return self.parse_lambda_expr(CaptureByRef);\n             },\n             // FIXME #13626: Should be able to stick in\n             // token::SELF_KEYWORD_NAME\n@@ -2135,8 +2135,8 @@ impl<'a> Parser<'a> {\n                 hi = self.last_span.hi;\n             }\n             _ => {\n-                if self.eat_keyword(keywords::Ref) {\n-                    return self.parse_lambda_expr(CaptureByRef);\n+                if self.eat_keyword(keywords::Move) {\n+                    return self.parse_lambda_expr(CaptureByValue);\n                 }\n                 if self.eat_keyword(keywords::Proc) {\n                     let decl = self.parse_proc_decl();"}, {"sha": "a486ac40a97a137beaff65a60bdcf1b9f0f0474a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -482,40 +482,41 @@ declare_special_idents_and_keywords! {\n         (25,                         Loop,       \"loop\");\n         (26,                         Match,      \"match\");\n         (27,                         Mod,        \"mod\");\n-        (28,                         Mut,        \"mut\");\n-        (29,                         Once,       \"once\");\n-        (30,                         Pub,        \"pub\");\n-        (31,                         Ref,        \"ref\");\n-        (32,                         Return,     \"return\");\n+        (28,                         Move,       \"move\");\n+        (29,                         Mut,        \"mut\");\n+        (30,                         Once,       \"once\");\n+        (31,                         Pub,        \"pub\");\n+        (32,                         Ref,        \"ref\");\n+        (33,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n-        (33,                         Struct,     \"struct\");\n+        (34,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (34,                         True,       \"true\");\n-        (35,                         Trait,      \"trait\");\n-        (36,                         Type,       \"type\");\n-        (37,                         Unsafe,     \"unsafe\");\n-        (38,                         Use,        \"use\");\n-        (39,                         Virtual,    \"virtual\");\n-        (40,                         While,      \"while\");\n-        (41,                         Continue,   \"continue\");\n-        (42,                         Proc,       \"proc\");\n-        (43,                         Box,        \"box\");\n-        (44,                         Const,      \"const\");\n-        (45,                         Where,      \"where\");\n+        (35,                         True,       \"true\");\n+        (36,                         Trait,      \"trait\");\n+        (37,                         Type,       \"type\");\n+        (38,                         Unsafe,     \"unsafe\");\n+        (39,                         Use,        \"use\");\n+        (40,                         Virtual,    \"virtual\");\n+        (41,                         While,      \"while\");\n+        (42,                         Continue,   \"continue\");\n+        (43,                         Proc,       \"proc\");\n+        (44,                         Box,        \"box\");\n+        (45,                         Const,      \"const\");\n+        (46,                         Where,      \"where\");\n \n         'reserved:\n-        (46,                         Alignof,    \"alignof\");\n-        (47,                         Be,         \"be\");\n-        (48,                         Offsetof,   \"offsetof\");\n-        (49,                         Priv,       \"priv\");\n-        (50,                         Pure,       \"pure\");\n-        (51,                         Sizeof,     \"sizeof\");\n-        (52,                         Typeof,     \"typeof\");\n-        (53,                         Unsized,    \"unsized\");\n-        (54,                         Yield,      \"yield\");\n-        (55,                         Do,         \"do\");\n+        (47,                         Alignof,    \"alignof\");\n+        (48,                         Be,         \"be\");\n+        (49,                         Offsetof,   \"offsetof\");\n+        (50,                         Priv,       \"priv\");\n+        (51,                         Pure,       \"pure\");\n+        (52,                         Sizeof,     \"sizeof\");\n+        (53,                         Typeof,     \"typeof\");\n+        (54,                         Unsized,    \"unsized\");\n+        (55,                         Yield,      \"yield\");\n+        (56,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "ae4ba611bab5317424266b6a14c65e6358eb4dbb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -2176,8 +2176,8 @@ impl<'a> State<'a> {\n     pub fn print_capture_clause(&mut self, capture_clause: ast::CaptureClause)\n                                 -> IoResult<()> {\n         match capture_clause {\n-            ast::CaptureByValue => Ok(()),\n-            ast::CaptureByRef => self.word_space(\"ref\"),\n+            ast::CaptureByValue => self.word_space(\"move\"),\n+            ast::CaptureByRef => Ok(()),\n         }\n     }\n "}, {"sha": "828a6124aa09f5f122699c0ca8c065ea949f10df", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -235,10 +235,7 @@ fn generate_test_harness(sess: &ParseSess,\n         sess: sess,\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, cfg.clone(),\n-                             ExpansionConfig {\n-                                 deriving_hash_type_parameter: false,\n-                                 crate_name: \"test\".to_string(),\n-                             }),\n+                             ExpansionConfig::default(\"test\".to_string())),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,"}, {"sha": "1fdaa548ebe6ec95c09f1caaf21bd41048d3b456", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -871,3 +871,18 @@ extern \"C\" void LLVMWriteDebugLocToString(\n     raw_rust_string_ostream os(str);\n     unwrap(dl)->print(*unwrap(C), os);\n }\n+\n+DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n+\n+extern \"C\" void LLVMSetInlineAsmDiagnosticHandler(\n+    LLVMContextRef C,\n+    LLVMContext::InlineAsmDiagHandlerTy H,\n+    void *CX)\n+{\n+    unwrap(C)->setInlineAsmDiagnosticHandler(H, CX);\n+}\n+\n+extern \"C\" void LLVMWriteSMDiagnosticToString(LLVMSMDiagnosticRef d, RustStringRef str) {\n+    raw_rust_string_ostream os(str);\n+    unwrap(d)->print(\"\", os);\n+}"}, {"sha": "5469531c5418849a215d35eca40c839318bca718", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -73,6 +73,7 @@ void LLVMRustSetLastError(const char*);\n typedef struct OpaqueRustString *RustStringRef;\n typedef struct LLVMOpaqueTwine *LLVMTwineRef;\n typedef struct LLVMOpaqueDebugLoc *LLVMDebugLocRef;\n+typedef struct LLVMOpaqueSMDiagnostic *LLVMSMDiagnosticRef;\n \n extern \"C\" void\n rust_llvm_string_write_impl(RustStringRef str, const char *ptr, size_t size);"}, {"sha": "154191bb488d118e12687d5a4e48e8a1fbb50e3c", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -1,3 +1,12 @@\n+S 2014-09-28 7eb9337\n+  freebsd-x86_64 d45e0edd44f40a976ea0affaadd98732684cfca0\n+  linux-i386 3acb35755aa62b7ff78f76007d9a70696fce7aa7\n+  linux-x86_64 2615b67b700ae8f7d8d87c043207a1a6e2339389\n+  macos-i386 5eb4552dc66a14e1eff6e806a8ba27f4a73bb02a\n+  macos-x86_64 c6052632443f638f5024ae38f33ae2c80d8b18bd\n+  winnt-i386 269f46347b5766bff6f888c4307d50c475d3fe0f\n+  winnt-x86_64 06f89825cecda7f2e36a4660ffe6d2d4a0430ab4\n+\n S 2014-09-22 437179e\n   freebsd-x86_64 f693c0441de3dbb2d471dde5a5045ac8a48807d8\n   linux-i386 5c2132b65f45c21b43d28de6a9460978b1a7b08a"}, {"sha": "1b8fb32a808dc7067b76b973ff56368daeedd2eb", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: -C codegen-units=2\n+// error-pattern: build without -C codegen-units for more exact errors\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"nowayisthisavalidinstruction\");\n+    }\n+}"}, {"sha": "b4ebe07776a4d80b992e714c64da5a210b2cb7b4", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR invalid instruction\n+    }\n+}"}, {"sha": "99446be43acaa7930caf30614581a0ce0d7f6328", "filename": "src/test/compile-fail/conflicting-implementations-aux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -15,7 +15,9 @@\n extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n-impl<A> Foo for A { //~ ERROR E0117\n+impl<A> Foo for A {\n+    //~^ ERROR E0117\n+    //~^^ ERROR E0119\n }\n \n fn main() {"}, {"sha": "280f19cfe9cc79b267045967d5bc3f483dec4099", "filename": "src/test/compile-fail/issue-16465.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Used to cause an ICE\n+\n+struct Foo<T>{\n+    x : T\n+}\n+\n+type FooInt = Foo<int>;\n+\n+impl Drop for FooInt {\n+//~^ ERROR cannot implement a destructor on a structure with type parameters\n+    fn drop(&mut self){}\n+}\n+\n+fn main() {}"}, {"sha": "da548ca5ffe3e67dd61135b01aae97e87a8aab85", "filename": "src/test/compile-fail/issue-17441.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _foo = &[1u, 2] as [uint];\n+    //~^ ERROR cast to unsized type: `&[uint, .. 2]` as `[uint]`\n+    //~^^ NOTE consider using an implicit coercion to `&[uint]` instead\n+    let _bar = box 1u as std::fmt::Show;\n+    //~^ ERROR cast to unsized type: `Box<uint>` as `core::fmt::Show`\n+    //~^^ NOTE did you mean `Box<core::fmt::Show>`?\n+    let _baz = 1u as std::fmt::Show;\n+    //~^ ERROR cast to unsized type: `uint` as `core::fmt::Show`\n+    //~^^ NOTE consider using a box or reference as appropriate\n+    let _quux = [1u, 2] as [uint];\n+    //~^ ERROR cast to unsized type: `[uint, .. 2]` as `[uint]`\n+    //~^^ NOTE consider using a box or reference as appropriate\n+}"}, {"sha": "b3c436f6d2b678c27fa8f3670d240447e59263c8", "filename": "src/test/compile-fail/pat-range-bad-dots.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test\n+\n+pub fn main() {\n+    match 22i {\n+        0 .. 3 => {} //~ ERROR expected `=>`, found `..`\n+        _ => {}\n+    }\n+}"}, {"sha": "e046b5c68addd4c88826cd13c583fae3327fcf71", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     {\n         let c = 1;\n         let c_ref = &c; //~ ERROR `c` does not live long enough\n-        f = |&mut: a: int, b: int| { a + b + *c_ref };\n+        f = move |&mut: a: int, b: int| { a + b + *c_ref };\n     }\n }\n "}, {"sha": "0afbbc3450ac7fdd674a0344ee4c90915a736a46", "filename": "src/test/run-make/lto-readonly-lib/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-readonly-lib%2FMakefile?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,12 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs\n+\n+\t# the compiler needs to copy and modify the rlib file when performing\n+\t# LTO, so we should ensure that it can cope with the original rlib\n+\t# being read-only.\n+\tchmod 444 $(TMPDIR)/*.rlib\n+\n+\t$(RUSTC) main.rs -C lto\n+\t$(call RUN,main)"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make/lto-readonly-lib/lib.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Flib.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]"}, {"sha": "e12ac9e01dc17ecaa8b256aaab05723524f09176", "filename": "src/test/run-make/lto-readonly-lib/main.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-readonly-lib%2Fmain.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate lib;\n+\n+fn main() {}"}, {"sha": "864d594cf99637fb0ad01be0c173ecae29b445e7", "filename": "src/test/run-make/rustdoc-where/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all: verify.sh foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\tcp verify.sh $(TMPDIR)\n+\t$(call RUN,verify.sh) $(TMPDIR)"}, {"sha": "7e6df7f011ab771c5b0fa09d2900dc8ee60d0111", "filename": "src/test/run-make/rustdoc-where/foo.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait MyTrait {}\n+\n+pub struct Alpha<A> where A: MyTrait;\n+pub trait Bravo<B> where B: MyTrait {}\n+pub fn charlie<C>() where C: MyTrait {}\n+\n+pub struct Delta<D>;\n+impl<D> Delta<D> where D: MyTrait {\n+    pub fn delta() {}\n+}\n+\n+pub struct Echo<E>;\n+impl<E> MyTrait for Echo<E> where E: MyTrait {}\n+\n+pub enum Foxtrot<F> {}\n+impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}"}, {"sha": "5d424da02adb96eef0f579d9db2ea4dd1d9b6baf", "filename": "src/test/run-make/rustdoc-where/verify.sh", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2Fverify.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-make%2Frustdoc-where%2Fverify.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2Fverify.sh?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,23 @@\n+#!/bin/bash\n+set -e\n+\n+# $1 is the TMPDIR\n+DOC=$1/doc/foo\n+\n+grep \"Alpha.*where.*A:.*MyTrait\" $DOC/struct.Alpha.html > /dev/null\n+echo \"Alpha\"\n+grep \"Bravo.*where.*B:.*MyTrait\" $DOC/trait.Bravo.html > /dev/null\n+echo \"Bravo\"\n+grep \"charlie.*where.*C:.*MyTrait\" $DOC/fn.charlie.html > /dev/null\n+echo \"Charlie\"\n+grep \"impl.*Delta.*where.*D:.*MyTrait\" $DOC/struct.Delta.html > /dev/null\n+echo \"Delta\"\n+grep \"impl.*MyTrait.*for.*Echo.*where.*E:.*MyTrait\" $DOC/struct.Echo.html > /dev/null\n+echo \"Echo\"\n+grep \"impl.*MyTrait.*for.*Foxtrot.*where.*F:.*MyTrait\" $DOC/enum.Foxtrot.html > /dev/null\n+echo \"Foxtrot\"\n+\n+# check \"Implementors\" section of MyTrait\n+grep \"impl.*MyTrait.*for.*Echo.*where.*E:.*MyTrait\" $DOC/trait.MyTrait.html > /dev/null\n+grep \"impl.*MyTrait.*for.*Foxtrot.*where.*F:.*MyTrait\" $DOC/trait.MyTrait.html > /dev/null\n+echo \"Implementors OK\""}, {"sha": "a1411146ddda622da81b2cdcaf049bdb95c1f82c", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -17,7 +17,7 @@ fn each<T>(x: &[T], f: |&T|) {\n fn main() {\n     let mut sum = 0u;\n     let elems = [ 1u, 2, 3, 4, 5 ];\n-    each(elems, ref |val| sum += *val);\n+    each(elems, |val| sum += *val);\n     assert_eq!(sum, 15);\n }\n "}, {"sha": "c6dd3736857943bb7ef3df210281682e692ee066", "filename": "src/test/run-pass/non-built-in-quote.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! quote_tokens ( () => (()) )\n+\n+pub fn main() {\n+    quote_tokens!();\n+}"}, {"sha": "508d1e46f7e18e5e64588bbe47121f25ffc0e886", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -24,8 +24,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z: int = 7;\n-    assert_eq!(a(|&: x: int, y| x + y + z), 10);\n-    assert_eq!(b(|&mut: x: int, y| x + y + z), 14);\n-    assert_eq!(c(|: x: int, y| x + y + z), 18);\n+    assert_eq!(a(move |&: x: int, y| x + y + z), 10);\n+    assert_eq!(b(move |&mut: x: int, y| x + y + z), 14);\n+    assert_eq!(c(move |: x: int, y| x + y + z), 18);\n }\n "}, {"sha": "ab3faa16f948ffc2428e05f466a4f579e9720c96", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -13,7 +13,8 @@\n use std::ops::FnMut;\n \n  fn make_adder(x: int) -> Box<FnMut<(int,),int>+'static> {\n-    (box |&mut: y: int| -> int { x + y }) as Box<FnMut<(int,),int>+'static>\n+    (box move |&mut: y: int| -> int { x + y }) as\n+        Box<FnMut<(int,),int>+'static>\n }\n \n pub fn main() {"}, {"sha": "00bf5fac095cd6e77fbf3bd002a123156aa5c585", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -55,65 +55,65 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn test_fn() {\n     {\n-        a(|&: a: int, b| { a + b });\n+        a(move |&: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 0);\n \n     {\n         let z = &Droppable::new();\n-        a(|&: a: int, b| { z; a + b });\n+        a(move |&: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 0);\n     }\n     assert_eq!(drop_count(), 1);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        a(|&: a: int, b| { z; zz; a + b });\n+        a(move |&: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 1);\n     }\n     assert_eq!(drop_count(), 3);\n }\n \n fn test_fn_mut() {\n     {\n-        b(|&mut: a: int, b| { a + b });\n+        b(move |&mut: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 3);\n \n     {\n         let z = &Droppable::new();\n-        b(|&mut: a: int, b| { z; a + b });\n+        b(move |&mut: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 3);\n     }\n     assert_eq!(drop_count(), 4);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        b(|&mut: a: int, b| { z; zz; a + b });\n+        b(move |&mut: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 4);\n     }\n     assert_eq!(drop_count(), 6);\n }\n \n fn test_fn_once() {\n     {\n-        c(|: a: int, b| { a + b });\n+        c(move |: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 6);\n \n     {\n         let z = Droppable::new();\n-        c(|: a: int, b| { z; a + b });\n+        c(move |: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 7);\n     }\n     assert_eq!(drop_count(), 7);\n \n     {\n         let z = Droppable::new();\n         let zz = Droppable::new();\n-        c(|: a: int, b| { z; zz; a + b });\n+        c(move |: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 9);\n     }\n     assert_eq!(drop_count(), 9);"}, {"sha": "4239cfdd8cf14f552f85d67d1c09db33cb043f02", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3cda8bd8496c3b3771b0201d1073ed575321d0/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=1f3cda8bd8496c3b3771b0201d1073ed575321d0", "patch": "@@ -27,8 +27,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z = 10;\n-    assert_eq!(a(|&: x: int, y| x + y + z), 13);\n-    assert_eq!(b(|&mut: x: int, y| x + y + z), 17);\n-    assert_eq!(c(|: x: int, y| x + y + z), 21);\n+    assert_eq!(a(move |&: x: int, y| x + y + z), 13);\n+    assert_eq!(b(move |&mut: x: int, y| x + y + z), 17);\n+    assert_eq!(c(move |: x: int, y| x + y + z), 21);\n }\n "}]}