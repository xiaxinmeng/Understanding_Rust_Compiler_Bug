{"sha": "767719cc304e9b025875aea073f66ce248ae2616", "node_id": "C_kwDOAAsO6NoAKDc2NzcxOWNjMzA0ZTliMDI1ODc1YWVhMDczZjY2Y2UyNDhhZTI2MTY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-26T21:01:08Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-26T21:40:48Z"}, "message": "rustdoc: factor orphan impl items into an actual struct", "tree": {"sha": "1f679394195a5ac22136b3ed077626cff74b8bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f679394195a5ac22136b3ed077626cff74b8bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/767719cc304e9b025875aea073f66ce248ae2616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/767719cc304e9b025875aea073f66ce248ae2616", "html_url": "https://github.com/rust-lang/rust/commit/767719cc304e9b025875aea073f66ce248ae2616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/767719cc304e9b025875aea073f66ce248ae2616/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c516ffa8e531290687b60bb8023fbccd3abe43ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c516ffa8e531290687b60bb8023fbccd3abe43ad", "html_url": "https://github.com/rust-lang/rust/commit/c516ffa8e531290687b60bb8023fbccd3abe43ad"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9b2756b1d5c7452da07108489748b79225009398", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/767719cc304e9b025875aea073f66ce248ae2616/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767719cc304e9b025875aea073f66ce248ae2616/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=767719cc304e9b025875aea073f66ce248ae2616", "patch": "@@ -107,8 +107,7 @@ pub(crate) struct Cache {\n     // then the fully qualified name of the structure isn't presented in `paths`\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n-    pub(crate) orphan_impl_items:\n-        Vec<(DefId, clean::Item, Option<(clean::Type, clean::Generics)>, bool)>,\n+    pub(crate) orphan_impl_items: Vec<OrphanImplItem>,\n \n     // Similarly to `orphan_impl_items`, sometimes trait impls are picked up\n     // even though the trait itself is not exported. This can happen if a trait\n@@ -332,12 +331,12 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 (Some(parent), None) if is_inherent_impl_item => {\n                     // We have a parent, but we don't know where they're\n                     // defined yet. Wait for later to index this item.\n-                    self.cache.orphan_impl_items.push((\n+                    self.cache.orphan_impl_items.push(OrphanImplItem {\n                         parent,\n-                        item.clone(),\n-                        self.cache.impl_generics_stack.last().cloned(),\n-                        self.cache.parent_is_blanket_or_auto_impl,\n-                    ));\n+                        item: item.clone(),\n+                        impl_generics: self.cache.impl_generics_stack.last().cloned(),\n+                        parent_is_blanket_or_auto_impl: self.cache.parent_is_blanket_or_auto_impl,\n+                    });\n                 }\n                 _ => {}\n             }\n@@ -554,3 +553,10 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         ret\n     }\n }\n+\n+pub(crate) struct OrphanImplItem {\n+    pub(crate) parent: DefId,\n+    pub(crate) item: clean::Item,\n+    pub(crate) impl_generics: Option<(clean::Type, clean::Generics)>,\n+    pub(crate) parent_is_blanket_or_auto_impl: bool,\n+}"}, {"sha": "dcdf18978e31af2ececaedf1398f96c6e73cddbe", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/767719cc304e9b025875aea073f66ce248ae2616/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767719cc304e9b025875aea073f66ce248ae2616/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=767719cc304e9b025875aea073f66ce248ae2616", "patch": "@@ -8,7 +8,7 @@ use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n use crate::clean::types::{FnRetTy, Function, GenericBound, Generics, Type, WherePredicate};\n-use crate::formats::cache::Cache;\n+use crate::formats::cache::{Cache, OrphanImplItem};\n use crate::formats::item_type::ItemType;\n use crate::html::format::join_with_double_colon;\n use crate::html::markdown::short_markdown_summary;\n@@ -25,8 +25,10 @@ pub(crate) fn build_index<'tcx>(\n \n     // Attach all orphan items to the type's definition if the type\n     // has since been learned.\n-    for &(did, ref item, ref impl_generics, from_blanket_or_auto_impl) in &cache.orphan_impl_items {\n-        if let Some(&(ref fqp, _)) = cache.paths.get(&did) {\n+    for &OrphanImplItem { parent, ref item, ref impl_generics, parent_is_blanket_or_auto_impl } in\n+        &cache.orphan_impl_items\n+    {\n+        if let Some(&(ref fqp, _)) = cache.paths.get(&parent) {\n             let desc = item\n                 .doc_value()\n                 .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(cache)));\n@@ -35,13 +37,13 @@ pub(crate) fn build_index<'tcx>(\n                 name: item.name.unwrap().to_string(),\n                 path: join_with_double_colon(&fqp[..fqp.len() - 1]),\n                 desc,\n-                parent: Some(did),\n+                parent: Some(parent),\n                 parent_idx: None,\n                 search_type: get_function_type_for_search(\n                     item,\n                     tcx,\n                     impl_generics.as_ref(),\n-                    from_blanket_or_auto_impl,\n+                    parent_is_blanket_or_auto_impl,\n                     cache,\n                 ),\n                 aliases: item.attrs.get_doc_aliases(),"}]}