{"sha": "7ff57edb93625857b1ac289160550859e78ef6fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjU3ZWRiOTM2MjU4NTdiMWFjMjg5MTYwNTUwODU5ZTc4ZWY2ZmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T15:12:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T16:52:57Z"}, "message": "also identiy MaybeUninit::uninit().assume_init() as dangerous", "tree": {"sha": "cbe076c15919affb66a6332f71400a681d2f9e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbe076c15919affb66a6332f71400a681d2f9e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff57edb93625857b1ac289160550859e78ef6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff57edb93625857b1ac289160550859e78ef6fb", "html_url": "https://github.com/rust-lang/rust/commit/7ff57edb93625857b1ac289160550859e78ef6fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff57edb93625857b1ac289160550859e78ef6fb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4e12d88947db6ff832bb7caae44927af687eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4e12d88947db6ff832bb7caae44927af687eb7", "html_url": "https://github.com/rust-lang/rust/commit/df4e12d88947db6ff832bb7caae44927af687eb7"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "99a45c4e76104ad74eecefa8712a648bd70dc040", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7ff57edb93625857b1ac289160550859e78ef6fb", "patch": "@@ -699,6 +699,9 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n \n     /// Check if a `DefId`'s path matches the given absolute type path usage.\n     ///\n+    /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n+    /// inherent `impl` blocks are matched with the name of the type.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)"}, {"sha": "7f7db46466f387cd37851202cc96f45516f9cc7d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7ff57edb93625857b1ac289160550859e78ef6fb", "patch": "@@ -1911,8 +1911,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n             // `Invalid` represents the empty string and matches that.\n             const TRANSMUTE_PATH: &[Symbol] =\n                 &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n+            const MU_ZEROED_PATH: &[Symbol] =\n+                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::zeroed];\n+            const MU_UNINIT_PATH: &[Symbol] =\n+                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::uninit];\n \n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n+                // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                     let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n \n@@ -1927,8 +1932,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                             return Some(InitKind::Zeroed);\n                         }\n                     }\n-                    // FIXME: Also detect `MaybeUninit::zeroed().assume_init()` and\n-                    // `MaybeUninit::uninit().assume_init()`.\n+                }\n+            } else if let hir::ExprKind::MethodCall(ref path, _, ref args) = expr.kind {\n+                // Find problematic calls to `MaybeUninit::assume_init`.\n+                if path.ident.name == sym::assume_init {\n+                    // This is a call to *some* method named `assume_init`.\n+                    // See if the `self` parameter is one of the dangerous constructors.\n+                    if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {\n+                        if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n+                            let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n+                            if cx.match_def_path(def_id, MU_ZEROED_PATH) {\n+                                return Some(InitKind::Zeroed);\n+                            } else if cx.match_def_path(def_id, MU_UNINIT_PATH) {\n+                                return Some(InitKind::Uninit);\n+                            }\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "e3165a457b42bbf84dddfd74f6dc8ddcb84b9706", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=7ff57edb93625857b1ac289160550859e78ef6fb", "patch": "@@ -148,6 +148,7 @@ symbols! {\n         associated_type_bounds,\n         associated_type_defaults,\n         associated_types,\n+        assume_init,\n         async_await,\n         async_closure,\n         attr,\n@@ -417,6 +418,8 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n+        maybe_uninit,\n+        MaybeUninit,\n         mem,\n         member_constraints,\n         message,\n@@ -709,6 +712,7 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n+        uninit,\n         uninitialized,\n         universal_impl_trait,\n         unmarked_api,"}, {"sha": "473be434a7524931c374fe960c661e17176f3ded", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=7ff57edb93625857b1ac289160550859e78ef6fb", "patch": "@@ -85,10 +85,16 @@ fn main() {\n         let _val: &'static [i32] = mem::transmute((0usize, 0usize)); //~ ERROR: does not permit zero-initialization\n         let _val: NonZeroU32 = mem::transmute(0); //~ ERROR: does not permit zero-initialization\n \n+        // `MaybeUninit` cases\n+        let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init(); //~ ERROR: does not permit zero-initialization\n+        let _val: NonNull<i32> = MaybeUninit::uninit().assume_init(); //~ ERROR: does not permit being left uninitialized\n+        let _val: bool = MaybeUninit::uninit().assume_init(); //~ ERROR: does not permit being left uninitialized\n+\n         // Some more types that should work just fine.\n         let _val: Option<&'static i32> = mem::zeroed();\n         let _val: Option<fn()> = mem::zeroed();\n         let _val: MaybeUninit<&'static i32> = mem::zeroed();\n         let _val: i32 = mem::zeroed();\n+        let _val: bool = MaybeUninit::zeroed().assume_init();\n     }\n }"}, {"sha": "e12b1897ade1b667bdec9f10d152601c7020129b", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ff57edb93625857b1ac289160550859e78ef6fb/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=7ff57edb93625857b1ac289160550859e78ef6fb", "patch": "@@ -399,5 +399,38 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |\n    = note: std::num::NonZeroU32 must be non-null\n \n-error: aborting due to 32 previous errors\n+error: the type `std::ptr::NonNull<i32>` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:89:34\n+   |\n+LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n+   |\n+   = note: std::ptr::NonNull<i32> must be non-null\n+\n+error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:90:34\n+   |\n+LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n+   |\n+   = note: std::ptr::NonNull<i32> must be non-null\n+\n+error: the type `bool` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:91:26\n+   |\n+LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          this code causes undefined behavior when executed\n+   |                          help: use `MaybeUninit<T>` instead\n+   |\n+   = note: Booleans must be `true` or `false`\n+\n+error: aborting due to 35 previous errors\n "}]}