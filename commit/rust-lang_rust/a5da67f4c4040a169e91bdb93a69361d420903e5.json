{"sha": "a5da67f4c4040a169e91bdb93a69361d420903e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGE2N2Y0YzQwNDBhMTY5ZTkxYmRiOTNhNjkzNjFkNDIwOTAzZTU=", "commit": {"author": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-20T03:19:08Z"}, "committer": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-20T03:19:08Z"}, "message": "Add verbose and quiet flags to cargo-fmt\n\nQuiet mode supresses rustfmt's stdout, verbose mode prints targets that\nare going to be formatted.", "tree": {"sha": "0aabfb90500bf7fcdd02f4369bc4cc5716b37f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aabfb90500bf7fcdd02f4369bc4cc5716b37f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5da67f4c4040a169e91bdb93a69361d420903e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5da67f4c4040a169e91bdb93a69361d420903e5", "html_url": "https://github.com/rust-lang/rust/commit/a5da67f4c4040a169e91bdb93a69361d420903e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5da67f4c4040a169e91bdb93a69361d420903e5/comments", "author": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5e6d57e5a4eaff2300126a0d4489f004eeee12", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5e6d57e5a4eaff2300126a0d4489f004eeee12", "html_url": "https://github.com/rust-lang/rust/commit/0b5e6d57e5a4eaff2300126a0d4489f004eeee12"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "9c5e4bf956751e6be93cbd14f8fbee5aead33eaf", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a5da67f4c4040a169e91bdb93a69361d420903e5/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5da67f4c4040a169e91bdb93a69361d420903e5/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=a5da67f4c4040a169e91bdb93a69361d420903e5", "patch": "@@ -27,6 +27,8 @@ use rustc_serialize::json::Json;\n fn main() {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optflag(\"q\", \"quiet\", \"no output printed to stdout\");\n+    opts.optflag(\"v\", \"verbose\", \"use verbose output\");\n \n     let matches = match opts.parse(env::args().skip(1).take_while(|a| a != \"--\")) {\n         Ok(m) => m,\n@@ -36,10 +38,17 @@ fn main() {\n         }\n     };\n \n+    let (verbose, quiet) = (matches.opt_present(\"v\"), matches.opt_present(\"q\"));\n+\n+    if verbose && quiet {\n+        print_usage(&opts, \"quiet mode and verbose mode are not compatible\");\n+        return;\n+    }\n+\n     if matches.opt_present(\"h\") {\n         print_usage(&opts, \"\");\n     } else {\n-        format_crate(&opts);\n+        format_crate(&opts, verbose, quiet);\n     }\n }\n \n@@ -50,7 +59,7 @@ fn print_usage(opts: &Options, reason: &str) {\n              opts.usage(&msg));\n }\n \n-fn format_crate(opts: &Options) {\n+fn format_crate(opts: &Options, verbose: bool, quiet: bool) {\n     let targets = match get_targets() {\n         Ok(t) => t,\n         Err(e) => {\n@@ -62,10 +71,16 @@ fn format_crate(opts: &Options) {\n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets.into_iter()\n                                .filter(|t| t.kind.is_lib() | t.kind.is_bin())\n+                               .inspect(|t| {\n+                                   if verbose {\n+                                       println!(\"[{:?}] {:?}\", t.kind, t.path)\n+                                   }\n+                               })\n                                .map(|t| t.path)\n                                .collect();\n \n-    format_files(&files, &get_fmt_args()).unwrap_or_else(|e| print_usage(opts, &e.to_string()));\n+    format_files(&files, &get_fmt_args(), verbose, quiet)\n+        .unwrap_or_else(|e| print_usage(opts, &e.to_string()));\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -97,7 +112,7 @@ impl TargetKind {\n }\n \n #[derive(Debug)]\n-struct Target {\n+pub struct Target {\n     path: PathBuf,\n     kind: TargetKind,\n }\n@@ -139,8 +154,28 @@ fn target_from_json(jtarget: &Json) -> Target {\n     }\n }\n \n-fn format_files(files: &Vec<PathBuf>, fmt_args: &Vec<String>) -> Result<(), std::io::Error> {\n+fn format_files(files: &Vec<PathBuf>,\n+                fmt_args: &Vec<String>,\n+                verbose: bool,\n+                quiet: bool)\n+                -> Result<(), std::io::Error> {\n+    let stdout = if quiet {\n+        std::process::Stdio::null()\n+    } else {\n+        std::process::Stdio::inherit()\n+    };\n+    if verbose {\n+        print!(\"rustfmt\");\n+        for a in fmt_args.iter() {\n+            print!(\" {}\", a);\n+        }\n+        for f in files.iter() {\n+            print!(\" {}\", f.display());\n+        }\n+        println!(\"\");\n+    }\n     let mut command = try!(Command::new(\"rustfmt\")\n+                               .stdout(stdout)\n                                .args(files)\n                                .args(fmt_args)\n                                .spawn());"}]}