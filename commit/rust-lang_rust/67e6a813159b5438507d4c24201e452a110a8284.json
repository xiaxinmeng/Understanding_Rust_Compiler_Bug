{"sha": "67e6a813159b5438507d4c24201e452a110a8284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTZhODEzMTU5YjU0Mzg1MDdkNGMyNDIwMWU0NTJhMTEwYTgyODQ=", "commit": {"author": {"name": "Bernhard Schuster", "email": "bernhard@ahoi.io", "date": "2021-04-09T14:35:40Z"}, "committer": {"name": "Bernhard Schuster", "email": "bernhard@ahoi.io", "date": "2021-07-02T05:13:19Z"}, "message": "add track_path::path fn for proc-macro usage\n\nRef #73921", "tree": {"sha": "96e3c9b9a7b60a9fda5701c0b2c46561484f8c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e3c9b9a7b60a9fda5701c0b2c46561484f8c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e6a813159b5438507d4c24201e452a110a8284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e6a813159b5438507d4c24201e452a110a8284", "html_url": "https://github.com/rust-lang/rust/commit/67e6a813159b5438507d4c24201e452a110a8284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e6a813159b5438507d4c24201e452a110a8284/comments", "author": {"login": "drahnr", "id": 667047, "node_id": "MDQ6VXNlcjY2NzA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/667047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drahnr", "html_url": "https://github.com/drahnr", "followers_url": "https://api.github.com/users/drahnr/followers", "following_url": "https://api.github.com/users/drahnr/following{/other_user}", "gists_url": "https://api.github.com/users/drahnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/drahnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drahnr/subscriptions", "organizations_url": "https://api.github.com/users/drahnr/orgs", "repos_url": "https://api.github.com/users/drahnr/repos", "events_url": "https://api.github.com/users/drahnr/events{/privacy}", "received_events_url": "https://api.github.com/users/drahnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "drahnr", "id": 667047, "node_id": "MDQ6VXNlcjY2NzA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/667047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drahnr", "html_url": "https://github.com/drahnr", "followers_url": "https://api.github.com/users/drahnr/followers", "following_url": "https://api.github.com/users/drahnr/following{/other_user}", "gists_url": "https://api.github.com/users/drahnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/drahnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drahnr/subscriptions", "organizations_url": "https://api.github.com/users/drahnr/orgs", "repos_url": "https://api.github.com/users/drahnr/repos", "events_url": "https://api.github.com/users/drahnr/events{/privacy}", "received_events_url": "https://api.github.com/users/drahnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1034282bca4402b2a9d913c981002c45dc3e2425", "url": "https://api.github.com/repos/rust-lang/rust/commits/1034282bca4402b2a9d913c981002c45dc3e2425", "html_url": "https://github.com/rust-lang/rust/commit/1034282bca4402b2a9d913c981002c45dc3e2425"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "1d73002710d381b3b74a3c477cffabf3e1619610", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -411,6 +411,10 @@ impl server::FreeFunctions for Rustc<'_> {\n     fn track_env_var(&mut self, var: &str, value: Option<&str>) {\n         self.sess.env_depinfo.borrow_mut().insert((Symbol::intern(var), value.map(Symbol::intern)));\n     }\n+\n+    fn track_path(&mut self, path: &str) {\n+        self.sess.file_depinfo.borrow_mut().insert(Symbol::intern(path));\n+    }\n }\n \n impl server::TokenStream for Rustc<'_> {"}, {"sha": "c0f7ea8df49e465813b18446417fac926ef3b475", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -28,18 +28,18 @@ use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_serialize::json;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n-use tracing::{info, warn};\n-\n-use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n+use tracing::{info, warn};\n \n use std::any::Any;\n use std::cell::RefCell;\n@@ -594,6 +594,16 @@ fn write_out_deps(\n             .map(|fmap| escape_dep_filename(&fmap.name.prefer_local().to_string()))\n             .collect();\n \n+        // Account for explicitly marked-to-track files\n+        // (e.g. accessed in proc macros).\n+        let file_depinfo = sess.parse_sess.file_depinfo.borrow();\n+        let extra_tracked_files = file_depinfo.iter().map(|path_sym| {\n+            let path = PathBuf::from(&*path_sym.as_str());\n+            let file = FileName::from(path);\n+            escape_dep_filename(&file.prefer_local().to_string())\n+        });\n+        files.extend(extra_tracked_files);\n+\n         if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {\n             files.push(backend.to_string());\n         }"}, {"sha": "226fde2343aab1a6d757466dc234e1521fe9a489", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -133,6 +133,8 @@ pub struct ParseSess {\n     pub reached_eof: Lock<bool>,\n     /// Environment variables accessed during the build and their values when they exist.\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n+    /// File paths accessed during the build.\n+    pub file_depinfo: Lock<FxHashSet<Symbol>>,\n     /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n     pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n     /// Whether cfg(version) should treat the current release as incomplete\n@@ -165,6 +167,7 @@ impl ParseSess {\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n             env_depinfo: Default::default(),\n+            file_depinfo: Default::default(),\n             type_ascription_path_suggestions: Default::default(),\n             assume_incomplete_release: false,\n             proc_macro_quoted_spans: Default::default(),"}, {"sha": "b968d44fe488d4d573b021d54f7c2bb57dac428c", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -55,6 +55,7 @@ macro_rules! with_api {\n             FreeFunctions {\n                 fn drop($self: $S::FreeFunctions);\n                 fn track_env_var(var: &str, value: Option<&str>);\n+                fn track_path(path: &str);\n             },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);"}, {"sha": "7fbd5c6a69914586de20052a2728f6542937523d", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -1235,3 +1235,17 @@ pub mod tracked_env {\n         value\n     }\n }\n+\n+/// Tracked access to additional files.\n+#[unstable(feature = \"track_path\", issue = \"73921\")]\n+pub mod tracked_path {\n+\n+    /// Track a file explicitly.\n+    ///\n+    /// Commonly used for tracking asset preprocessing.\n+    #[unstable(feature = \"track_path\", issue = \"73921\")]\n+    pub fn path<P: AsRef<str>>(path: P) {\n+        let path: &str = path.as_ref();\n+        crate::bridge::client::FreeFunctions::track_path(path);\n+    }\n+}"}, {"sha": "465d3744789b07b8ec8fb5beacece0d449e848b9", "filename": "src/test/run-make/track-path-dep-info/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -0,0 +1,13 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# FIXME(eddyb) provide `HOST_RUSTC` and `TARGET_RUSTC`\n+# instead of hardcoding them everywhere they're needed.\n+ifeq ($(IS_MUSL_HOST),1)\n+ADDITIONAL_ARGS := $(RUSTFLAGS)\n+endif\n+\n+all:\n+\t# Proc macro\n+\t$(BARE_RUSTC) $(ADDITIONAL_ARGS) --out-dir $(TMPDIR) macro_def.rs\n+\tEXISTING_PROC_MACRO_ENV=1 $(RUSTC) --emit dep-info macro_use.rs\n+\t$(CGREP) \"emojis.txt:\" < $(TMPDIR)/macro_use.d"}, {"sha": "e1a728461f3c37997362d898b4704fc01a1e7e80", "filename": "src/test/run-make/track-path-dep-info/emojis.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -0,0 +1 @@\n+\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e"}, {"sha": "8777ce21f8b8234c888b469edd469f6a72c62521", "filename": "src/test/run-make/track-path-dep-info/macro_def.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -0,0 +1,11 @@\n+#![feature(track_path)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn access_tracked_paths(_: TokenStream) -> TokenStream {\n+    tracked_path::path(\"emojis.txt\");\n+    TokenStream::new()\n+}"}, {"sha": "3c49fd05dd9e0115dd44bc736b1e7b46ea720e32", "filename": "src/test/run-make/track-path-dep-info/macro_use.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e6a813159b5438507d4c24201e452a110a8284/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs?ref=67e6a813159b5438507d4c24201e452a110a8284", "patch": "@@ -0,0 +1,6 @@\n+#[macro_use]\n+extern crate macro_def;\n+\n+access_tracked_paths!();\n+\n+fn main() {}"}]}