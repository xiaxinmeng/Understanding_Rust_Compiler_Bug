{"sha": "b4450b1043dd1a4baf0930efcaa897183b5720ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDUwYjEwNDNkZDFhNGJhZjA5MzBlZmNhYTg5NzE4M2I1NzIwZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T22:52:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T22:52:53Z"}, "message": "Cleanup imports", "tree": {"sha": "d7e650e4bbd80457bf4f7b3765ceae7745ec9aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e650e4bbd80457bf4f7b3765ceae7745ec9aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4450b1043dd1a4baf0930efcaa897183b5720ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4450b1043dd1a4baf0930efcaa897183b5720ef", "html_url": "https://github.com/rust-lang/rust/commit/b4450b1043dd1a4baf0930efcaa897183b5720ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4450b1043dd1a4baf0930efcaa897183b5720ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03404f6813e9651244aab87d22a137e5219ea0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03404f6813e9651244aab87d22a137e5219ea0b", "html_url": "https://github.com/rust-lang/rust/commit/f03404f6813e9651244aab87d22a137e5219ea0b"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "8e793e47944f0103928ccde809b4ab3a74e43607", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b4450b1043dd1a4baf0930efcaa897183b5720ef/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4450b1043dd1a4baf0930efcaa897183b5720ef/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=b4450b1043dd1a4baf0930efcaa897183b5720ef", "patch": "@@ -1,7 +1,5 @@\n //! FIXME: write short doc here\n \n-use rustc_hash::FxHashMap;\n-\n use hir::{HirFileId, InFile, Name, SourceAnalyzer, SourceBinder};\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n@@ -10,13 +8,11 @@ use ra_syntax::{\n     ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n     WalkEvent, T,\n };\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     expand::descend_into_macros_with_analyzer,\n-    references::{\n-        classify_name, classify_name_ref,\n-        NameKind::{self, *},\n-    },\n+    references::{classify_name, classify_name_ref, NameKind},\n     FileId,\n };\n \n@@ -193,7 +189,7 @@ fn highlight_node(\n             let name_kind = classify_name_ref(sb, node.with_value(&name_ref)).map(|d| d.kind);\n             match name_kind {\n                 Some(name_kind) => {\n-                    if let Local(local) = &name_kind {\n+                    if let NameKind::Local(local) = &name_kind {\n                         if let Some(name) = local.name(db) {\n                             let shadow_count =\n                                 bindings_shadow_count.entry(name.clone()).or_default();\n@@ -211,7 +207,7 @@ fn highlight_node(\n             let name = node.value.as_node().cloned().and_then(ast::Name::cast).unwrap();\n             let name_kind = classify_name(sb, node.with_value(&name)).map(|d| d.kind);\n \n-            if let Some(Local(local)) = &name_kind {\n+            if let Some(NameKind::Local(local)) = &name_kind {\n                 if let Some(name) = local.name(db) {\n                     let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n                     *shadow_count += 1;\n@@ -316,20 +312,20 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n-        Macro(_) => tags::MACRO,\n-        StructField(_) => tags::FIELD,\n-        ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n-        ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n-        ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n-        ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n-        ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n-        ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n-        ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n-        ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n-        ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n-        SelfType(_) => tags::TYPE_SELF,\n-        TypeParam(_) => tags::TYPE_PARAM,\n-        Local(local) => {\n+        NameKind::Macro(_) => tags::MACRO,\n+        NameKind::StructField(_) => tags::FIELD,\n+        NameKind::ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        NameKind::ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        NameKind::ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        NameKind::ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        NameKind::ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        NameKind::ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        NameKind::ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        NameKind::ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        NameKind::ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        NameKind::SelfType(_) => tags::TYPE_SELF,\n+        NameKind::TypeParam(_) => tags::TYPE_PARAM,\n+        NameKind::Local(local) => {\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 tags::VARIABLE_MUT\n             } else {"}]}