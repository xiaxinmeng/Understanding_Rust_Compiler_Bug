{"sha": "dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNzg4Mzk0MzJlMGFkM2FiMWQ4MGJkNTAwN2Q0NzM1OGI3NmJmYzM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-22T19:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T19:44:52Z"}, "message": "Rollup merge of #71289 - xliiv:70802-intra-self, r=GuillaumeGomez\n\nAllow using `Self::` in doc\n\nCloses #70802", "tree": {"sha": "8b31fd12986aac5add1cf2b11641383da1a44e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b31fd12986aac5add1cf2b11641383da1a44e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyCu0CRBK7hj4Ov3rIwAAdHIIAEljo6zgmsDUCWCdIRUSCmCz\n76gsxTSJMZYOcPrGspJP71JFVjF4fJiKl/l1Gg2KaqNSb2e/kqBMamJL9V/Fd5Tz\ndwb5Y9OUTXDCPLgscGfIZVV6bhAPAPNymHeq9bBMSDB9b8v8bgyCCWlr53X7blRU\nHbb2C4JWYuzES2tpvqkybPC7GmVUbFP336Arbqfd815ORP9LPMr7iBY7zQ0jjQWb\nZ5Kx7hZDAgPK2sLEkF6oRzlt59f91wPRl1qwbQTDt78/y3FO/mEsd0OvcZ1xqrGq\n6QvsNMbmAKLRkfuvx5/uN59JXstH5Xvus18Y2w51TXAPSZKFLER82/m7/9I76gU=\n=7M8u\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b31fd12986aac5add1cf2b11641383da1a44e08\nparent 215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d\nparent fc0675bf7508e4b2bb48ccf01ad2ecbd924d7b3b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590176692 +0200\ncommitter GitHub <noreply@github.com> 1590176692 +0200\n\nRollup merge of #71289 - xliiv:70802-intra-self, r=GuillaumeGomez\n\nAllow using `Self::` in doc\n\nCloses #70802\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "html_url": "https://github.com/rust-lang/rust/commit/dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd78839432e0ad3ab1d80bd5007d47358b76bfc3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}, {"sha": "fc0675bf7508e4b2bb48ccf01ad2ecbd924d7b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0675bf7508e4b2bb48ccf01ad2ecbd924d7b3b", "html_url": "https://github.com/rust-lang/rust/commit/fc0675bf7508e4b2bb48ccf01ad2ecbd924d7b3b"}], "stats": {"total": 142, "additions": 138, "deletions": 4}, "files": [{"sha": "adb7fc3eb9cff8f827a51acfb34061fc2ee4b156", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dd78839432e0ad3ab1d80bd5007d47358b76bfc3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78839432e0ad3ab1d80bd5007d47358b76bfc3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "patch": "@@ -431,6 +431,43 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n         look_for_tests(&cx, &dox, &item, true);\n \n+        // find item's parent to resolve `Self` in item's docs below\n+        let parent_name = self.cx.as_local_hir_id(item.def_id).and_then(|item_hir| {\n+            let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);\n+            let item_parent = self.cx.tcx.hir().find(parent_hir);\n+            match item_parent {\n+                Some(hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Impl {\n+                            self_ty:\n+                                hir::Ty {\n+                                    kind:\n+                                        hir::TyKind::Path(hir::QPath::Resolved(\n+                                            _,\n+                                            hir::Path { segments, .. },\n+                                        )),\n+                                    ..\n+                                },\n+                            ..\n+                        },\n+                    ..\n+                })) => segments.first().and_then(|seg| Some(seg.ident.to_string())),\n+                Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Enum(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Struct(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Union(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Trait(..), ..\n+                })) => Some(ident.to_string()),\n+                _ => None,\n+            }\n+        });\n+\n         for (ori_link, link_range) in markdown_links(&dox) {\n             // Bail early for real links.\n             if ori_link.contains('/') {\n@@ -467,7 +504,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             };\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let path_str = if let Some(prefix) =\n+                let mut path_str = if let Some(prefix) =\n                     [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n                         .iter()\n                         .find(|p| link.starts_with(**p))\n@@ -521,6 +558,15 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 let base_node =\n                     if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n \n+                let resolved_self;\n+                // replace `Self` with suitable item's parent name\n+                if path_str.starts_with(\"Self::\") {\n+                    if let Some(ref name) = parent_name {\n+                        resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n+                        path_str = &resolved_self;\n+                    }\n+                }\n+\n                 match kind {\n                     Some(ns @ ValueNS) => {\n                         match self.resolve(\n@@ -529,7 +575,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             &current_item,\n                             base_node,\n                             &extra_fragment,\n-                            None,\n+                            Some(&item),\n                         ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n@@ -552,7 +598,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             &current_item,\n                             base_node,\n                             &extra_fragment,\n-                            None,\n+                            Some(&item),\n                         ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n@@ -577,7 +623,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n-                                None,\n+                                Some(&item),\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);"}, {"sha": "97752d5cfcb5c96d29e81fc020c4231d70102594", "filename": "src/test/rustdoc/intra-link-self.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/dd78839432e0ad3ab1d80bd5007d47358b76bfc3/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78839432e0ad3ab1d80bd5007d47358b76bfc3/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-self.rs?ref=dd78839432e0ad3ab1d80bd5007d47358b76bfc3", "patch": "@@ -1,5 +1,7 @@\n #![crate_name = \"foo\"]\n \n+// ignore-tidy-linelength\n+\n // @has foo/index.html '//a/@href' '../foo/struct.Foo.html#method.new'\n // @has foo/struct.Foo.html '//a/@href' '../foo/struct.Foo.html#method.new'\n \n@@ -27,3 +29,89 @@ impl Bar {\n         unimplemented!()\n     }\n }\n+\n+pub struct MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#structfield.struct_field'\n+\n+    /// [`struct_field`]\n+    ///\n+    /// [`struct_field`]: Self::struct_field\n+    pub struct_field: u8,\n+}\n+\n+pub enum MyEnum {\n+    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#EnumVariant.v'\n+\n+    /// [`EnumVariant`]\n+    ///\n+    /// [`EnumVariant`]: Self::EnumVariant\n+    EnumVariant,\n+}\n+\n+pub union MyUnion {\n+    // @has foo/union.MyUnion.html '//a/@href' '../foo/union.MyUnion.html#structfield.union_field'\n+\n+    /// [`union_field`]\n+    ///\n+    /// [`union_field`]: Self::union_field\n+    pub union_field: f32,\n+}\n+\n+pub trait MyTrait {\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: Self::AssoType\n+    type AssoType;\n+\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: Self::ASSO_CONST\n+    const ASSO_CONST: i32 = 1;\n+\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#method.asso_fn'\n+\n+    /// [`asso_fn`]\n+    ///\n+    /// [`asso_fn`]: Self::asso_fn\n+    fn asso_fn() {}\n+}\n+\n+impl MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.for_impl'\n+\n+    /// [`for_impl`]\n+    ///\n+    /// [`for_impl`]: Self::for_impl\n+    pub fn for_impl() {\n+        unimplemented!()\n+    }\n+}\n+\n+impl MyTrait for MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: Self::AssoType\n+    type AssoType = u32;\n+\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: Self::ASSO_CONST\n+    const ASSO_CONST: i32 = 10;\n+\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.asso_fn'\n+\n+    /// [`asso_fn`]\n+    ///\n+    /// [`asso_fn`]: Self::asso_fn\n+    fn asso_fn() {\n+        unimplemented!()\n+    }\n+}"}]}