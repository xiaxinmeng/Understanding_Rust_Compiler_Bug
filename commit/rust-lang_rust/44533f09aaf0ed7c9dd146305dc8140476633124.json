{"sha": "44533f09aaf0ed7c9dd146305dc8140476633124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTMzZjA5YWFmMGVkN2M5ZGQxNDYzMDVkYzgxNDA0NzY2MzMxMjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T08:45:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T08:45:24Z"}, "message": "rustfmt round n", "tree": {"sha": "67edbea838945599ad68473ced113062feec72a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67edbea838945599ad68473ced113062feec72a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44533f09aaf0ed7c9dd146305dc8140476633124", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWkEkAAoJEFbW7qD8Z6xGrjMP/AggHvcC3NFTWwGnYCIsQgR7\nPAvdc1GLmLWb4JBWITaYMcweCXKoRSkKBkzYmaz6ik1YPsnIlAJrVgSgG1EmNUsw\ngLVijTEcqDN2sDAbR+/bAnTqb9VR+QDMbSKeump2pzGj1v+7vk/6/5/2Xuu7AMbH\nGU+ngR4/IY0G7T4MQPg6/zcte3KEFh4DusSzjiznblQluuHOFsXJhT7wMxBEMvv3\nxKSAp73nC9BGuFWNhzsViZ4xUHHA5n4ssdi+g3G5Reoiu+xgSqAqX5Ggi5mrVhy0\nPFIK7ZNqQ7HWZWBR//Qvxp9ug0kKbtyQ0enQYBr4oMHKJmfuFdVs52G6AXmxDqYn\nH7ZZf41WB1xlWkjBHmBcivU29QB+XTgyjslnOf5cfDy+329rIgq2zlqhVAV1g/ID\n2YA3HdperxFTT2RFQjN4m2NCGwnZuFyN0Xr58M+7jmruZVtx0lTf633m1IXJSnn5\nGZ0vXuS8H16mlr9TW4h7W3G/IZn9r+eadGTHRDcxDPuNrm36fkhDZQSebcI7fH6w\nQ/qWJIe6Ol0B7adGuLKkqC77f379ZgM98tvxbSSGEuHCny2V1dS1rJJjetxo9kIT\n2mP4M15Hb26tWMRby+ob54fHyG0COHg3PWf12zid2PK95zBkkk/lkaIH8yympOx0\nq0QbekpvAbQTl7tK/Jsn\n=Wlep\n-----END PGP SIGNATURE-----", "payload": "tree 67edbea838945599ad68473ced113062feec72a1\nparent 4a4e1ea2c55b27b84a83fb2951ca6f192c55fc35\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482309924 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482309924 +0100\n\nrustfmt round n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44533f09aaf0ed7c9dd146305dc8140476633124", "html_url": "https://github.com/rust-lang/rust/commit/44533f09aaf0ed7c9dd146305dc8140476633124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44533f09aaf0ed7c9dd146305dc8140476633124/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4e1ea2c55b27b84a83fb2951ca6f192c55fc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4e1ea2c55b27b84a83fb2951ca6f192c55fc35", "html_url": "https://github.com/rust-lang/rust/commit/4a4e1ea2c55b27b84a83fb2951ca6f192c55fc35"}], "stats": {"total": 117, "additions": 59, "deletions": 58}, "files": [{"sha": "7131e609715b0020f77897482db339c8b91084b6", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -85,7 +85,9 @@ fn check_known_consts(cx: &LateContext, e: &Expr, s: &symbol::Symbol, module: &s\n                           APPROX_CONSTANT,\n                           e.span,\n                           &format!(\"approximate value of `{}::consts::{}` found. \\\n-                                    Consider using it directly\", module, &name));\n+                                    Consider using it directly\",\n+                                   module,\n+                                   &name));\n                 return;\n             }\n         }"}, {"sha": "e85d0f40c4b5ac478e3c3e65c6ed467f6f64ec05", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -473,10 +473,10 @@ fn check_for_loop_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, ar\n                                        expr.span,\n                                        &format!(\"the loop variable `{}` is used to index `{}`\", ident.node, indexed),\n                                        |db| {\n-                                           multispan_sugg(db, \"consider using an iterator\".to_string(), &[\n-                            (pat.span, &format!(\"({}, <item>)\", ident.node)),\n-                            (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip)),\n-                        ]);\n+                                           multispan_sugg(db,\n+                                       \"consider using an iterator\".to_string(),\n+                                       &[(pat.span, &format!(\"({}, <item>)\", ident.node)),\n+                                         (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n                                        });\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n@@ -488,13 +488,14 @@ fn check_for_loop_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, ar\n                     span_lint_and_then(cx,\n                                        NEEDLESS_RANGE_LOOP,\n                                        expr.span,\n-                                       &format!(\"the loop variable `{}` is only used to index `{}`.\", ident.node, indexed),\n+                                       &format!(\"the loop variable `{}` is only used to index `{}`.\",\n+                                                ident.node,\n+                                                indexed),\n                                        |db| {\n-                        multispan_sugg(db, \"consider using an iterator\".to_string(), &[\n-                            (pat.span, \"<item>\"),\n-                            (arg.span, &repl),\n-                        ]);\n-                    });\n+                                           multispan_sugg(db,\n+                                                          \"consider using an iterator\".to_string(),\n+                                                          &[(pat.span, \"<item>\"), (arg.span, &repl)]);\n+                                       });\n                 }\n             }\n         }\n@@ -551,9 +552,9 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                                            \"consider using the following if you are attempting to iterate over this \\\n                                             range in reverse\",\n                                            format!(\"({end}{dots}{start}).rev()\",\n-                                                                      end=end_snippet,\n-                                                                      dots=dots,\n-                                                                      start=start_snippet));\n+                                                   end = end_snippet,\n+                                                   dots = dots,\n+                                                   start = start_snippet));\n                     });\n                 } else if eq && limits != ast::RangeLimits::Closed {\n                     // if they are equal, it's also problematic - this loop\n@@ -597,9 +598,9 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                           EXPLICIT_INTO_ITER_LOOP,\n                           expr.span,\n                           &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n-                                       object,\n-                                       object,\n-                                       method_name));\n+                                   object,\n+                                   object,\n+                                   method_name));\n \n             } else if &*method_name.as_str() == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n                 span_lint(cx,"}, {"sha": "5ecd1c06a5d8d589feba3ca0a61b019b92a559ee", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -776,10 +776,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n                            span,\n                            &format!(\"use of `{}` followed by a function call\", name),\n                            |db| {\n-            db.span_suggestion(span,\n+                               db.span_suggestion(span,\n                                \"try this\",\n                                format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg));\n-        });\n+                           });\n     }\n \n     if args.len() == 2 {\n@@ -836,10 +836,10 @@ fn lint_vec_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n                            expr.span,\n                            \"use of `extend` to extend a Vec by a slice\",\n                            |db| {\n-            db.span_suggestion(expr.span,\n+                               db.span_suggestion(expr.span,\n                                \"try this\",\n                                format!(\"{}.extend_from_slice({})\", snippet(cx, args[0].span, \"_\"), slice));\n-        });\n+                           });\n     }\n }\n "}, {"sha": "f796207a22392e0f4c0b6d454014b974f2c85dff", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -159,7 +159,12 @@ pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(TOPLEVEL_REF_ARG, CMP_NAN, FLOAT_CMP, CMP_OWNED, MODULO_ONE, REDUNDANT_PATTERN,\n+        lint_array!(TOPLEVEL_REF_ARG,\n+                    CMP_NAN,\n+                    FLOAT_CMP,\n+                    CMP_OWNED,\n+                    MODULO_ONE,\n+                    REDUNDANT_PATTERN,\n                     USED_UNDERSCORE_BINDING)\n     }\n }\n@@ -285,7 +290,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                       USED_UNDERSCORE_BINDING,\n                       expr.span,\n                       &format!(\"used binding `{}` which is prefixed with an underscore. A leading \\\n-                                underscore signals that a binding will not be used.\", binding));\n+                                underscore signals that a binding will not be used.\",\n+                               binding));\n         }\n     }\n \n@@ -295,9 +301,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 span_lint(cx,\n                           REDUNDANT_PATTERN,\n                           pat.span,\n-                          &format!(\"the `{} @ _` pattern can be written as just `{}`\",\n-                                   ident.node,\n-                                   ident.node));\n+                          &format!(\"the `{} @ _` pattern can be written as just `{}`\", ident.node, ident.node));\n             }\n         }\n     }"}, {"sha": "fd8ffb36d4629f934d0b7f0fa0d56fffec6ce7de", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -210,8 +210,8 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n                     diag.span_help(span,\n                                    &format!(\"separate the discriminating character by an \\\n                                                                 underscore like: `{}_{}`\",\n-                                                               &interned_name[..split],\n-                                                               &interned_name[split..]));\n+                                            &interned_name[..split],\n+                                            &interned_name[split..]));\n                 }\n             });\n             return;"}, {"sha": "31ac194ca7bf20999ed6844390b5fb74caa08117", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -219,8 +219,7 @@ fn check_regex(cx: &LateContext, expr: &Expr, utf8: bool) {\n                     span_lint(cx,\n                               INVALID_REGEX,\n                               str_span(expr.span, r, e.position()),\n-                              &format!(\"regex syntax error: {}\",\n-                                       e.description()));\n+                              &format!(\"regex syntax error: {}\", e.description()));\n                 },\n             }\n         }\n@@ -239,9 +238,7 @@ fn check_regex(cx: &LateContext, expr: &Expr, utf8: bool) {\n                 span_lint(cx,\n                           INVALID_REGEX,\n                           expr.span,\n-                          &format!(\"regex syntax error on position {}: {}\",\n-                                   e.position(),\n-                                   e.description()));\n+                          &format!(\"regex syntax error on position {}: {}\", e.position(), e.description()));\n             },\n         }\n     }"}, {"sha": "5e01f891eb1739bf79b5d55d672a838504c18747", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -144,25 +144,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                       CROSSPOINTER_TRANSMUTE,\n                                       e.span,\n                                       &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n-                                     from_ty,\n-                                     to_ty))\n+                                               from_ty,\n+                                               to_ty))\n                         },\n                         (_, &TyRawPtr(to_ptr)) if to_ptr.ty == from_ty => {\n                             span_lint(cx,\n                                       CROSSPOINTER_TRANSMUTE,\n                                       e.span,\n                                       &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n-                                     from_ty,\n-                                     to_ty))\n+                                               from_ty,\n+                                               to_ty))\n                         },\n-                        (&TyRawPtr(from_pty), &TyRef(_, to_rty)) => span_lint_and_then(\n-                            cx,\n-                            TRANSMUTE_PTR_TO_REF,\n-                            e.span,\n-                            &format!(\"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n-                                    from_ty,\n-                                    to_ty),\n-                            |db| {\n+                        (&TyRawPtr(from_pty), &TyRef(_, to_rty)) => {\n+                            span_lint_and_then(cx,\n+                                               TRANSMUTE_PTR_TO_REF,\n+                                               e.span,\n+                                               &format!(\"transmute from a pointer type (`{}`) to a reference type \\\n+                                                         (`{}`)\",\n+                                                        from_ty,\n+                                                        to_ty),\n+                                               |db| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n                                     (\"&mut *\", \"*mut\")\n@@ -177,8 +178,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 };\n \n                                 db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n-                            },\n-                        ),\n+                            })\n+                        },\n                         _ => return,\n                     };\n                 }"}, {"sha": "2ef66cf7644785ffe26058e8b098c43edd891985", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -352,11 +352,7 @@ fn span_precision_loss_lint(cx: &LateContext, expr: &Expr, cast_from: &ty::TyS,\n               &format!(\"casting {0} to {1} causes a loss of precision {2}({0} is {3} bits wide, but {1}'s mantissa \\\n                         is only {4} bits wide)\",\n                        cast_from,\n-                       if cast_to_f64 {\n-                           \"f64\"\n-                       } else {\n-                           \"f32\"\n-                       },\n+                       if cast_to_f64 { \"f64\" } else { \"f32\" },\n                        if arch_dependent {\n                            arch_dependent_str\n                        } else {\n@@ -687,9 +683,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n                         let msg = \"casting character literal to u8. `char`s \\\n                                    are 4 bytes wide in rust, so casting to u8 \\\n                                    truncates them\";\n-                        let help = format!(\"Consider using a byte literal \\\n-                                            instead:\\nb{}\",\n-                                           snippet(cx, e.span, \"'x'\"));\n+                        let help = format!(\"Consider using a byte literal instead:\\nb{}\", snippet(cx, e.span, \"'x'\"));\n                         span_help_and_lint(cx, CHAR_LIT_AS_U8, expr.span, msg, &help);\n                     }\n                 }"}, {"sha": "e56574c9ba93ab478b00462e6b94b6709d9ac7a5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -500,7 +500,7 @@ impl<'a> DiagnosticWrapper<'a> {\n     fn wiki_link(&mut self, lint: &'static Lint) {\n         if env::var(\"CLIPPY_DISABLE_WIKI_LINKS\").is_err() {\n             self.0.help(&format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n-                               lint.name_lower()));\n+                                 lint.name_lower()));\n         }\n     }\n }\n@@ -780,7 +780,8 @@ pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, env: Node\n /// Return whether a pattern is refutable.\n pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n     fn is_enum_variant(cx: &LateContext, qpath: &QPath, did: NodeId) -> bool {\n-        matches!(cx.tcx.tables().qpath_def(qpath, did), def::Def::Variant(..) | def::Def::VariantCtor(..))\n+        matches!(cx.tcx.tables().qpath_def(qpath, did),\n+                 def::Def::Variant(..) | def::Def::VariantCtor(..))\n     }\n \n     fn are_refutable<'a, I: Iterator<Item = &'a Pat>>(cx: &LateContext, mut i: I) -> bool {"}, {"sha": "f3f0337a017d1dcb60ab8dda3d6dddc416633e74", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44533f09aaf0ed7c9dd146305dc8140476633124/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=44533f09aaf0ed7c9dd146305dc8140476633124", "patch": "@@ -249,7 +249,8 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n \n     /// Whether the operator is a arithmetic operator (`+`, `-`, `*`, `/`, `%`).\n     fn is_arith(op: &AssocOp) -> bool {\n-        matches!(*op, AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide | AssocOp::Modulus)\n+        matches!(*op,\n+                 AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide | AssocOp::Modulus)\n     }\n \n     /// Whether the operator `op` needs parenthesis with the operator `other` in the direction"}]}