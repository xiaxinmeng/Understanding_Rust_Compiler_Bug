{"sha": "a7fa2a6fa88477ab2542bb15347e3085d9547f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZmEyYTZmYTg4NDc3YWIyNTQyYmIxNTM0N2UzMDg1ZDk1NDdmOTU=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-01T21:31:04Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-16T16:13:46Z"}, "message": "Add suggestion to `write_literal` and `print_literal`\nDon't lint on a mixture of raw and regular strings\nFix spans in format strings", "tree": {"sha": "d285c45ffabcf00104c6b7d9b62c3b42103618ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d285c45ffabcf00104c6b7d9b62c3b42103618ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7fa2a6fa88477ab2542bb15347e3085d9547f95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBQ2T4ACgkQ2lnoZDo37QaO9wD6A3uInsp/2qUy1GeHGGKlULuL\nPM0ZMIKkLSzdLHSxYAgA/jzGaZnqAUEHffieqD124Qi6IfMn8uVp+sVvR9vUJw8N\n=NknA\n-----END PGP SIGNATURE-----", "payload": "tree d285c45ffabcf00104c6b7d9b62c3b42103618ae\nparent 4c1047167d20460dcb84e3d947787ce91d5fd0d4\nauthor Jason Newcomb <jsnewcomb@pm.me> 1614634264 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1615911226 -0400\n\nAdd suggestion to `write_literal` and `print_literal`\nDon't lint on a mixture of raw and regular strings\nFix spans in format strings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fa2a6fa88477ab2542bb15347e3085d9547f95", "html_url": "https://github.com/rust-lang/rust/commit/a7fa2a6fa88477ab2542bb15347e3085d9547f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7fa2a6fa88477ab2542bb15347e3085d9547f95/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c1047167d20460dcb84e3d947787ce91d5fd0d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1047167d20460dcb84e3d947787ce91d5fd0d4", "html_url": "https://github.com/rust-lang/rust/commit/4c1047167d20460dcb84e3d947787ce91d5fd0d4"}], "stats": {"total": 335, "additions": 305, "deletions": 30}, "files": [{"sha": "e416eab791418aae808343a01e5262180c83ebce", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a7fa2a6fa88477ab2542bb15347e3085d9547f95/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fa2a6fa88477ab2542bb15347e3085d9547f95/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=a7fa2a6fa88477ab2542bb15347e3085d9547f95", "patch": "@@ -1,10 +1,11 @@\n use std::borrow::Cow;\n-use std::ops::Range;\n+use std::iter;\n+use std::ops::{Deref, Range};\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n-use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, Path, StrLit, StrStyle};\n-use rustc_ast::token;\n+use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n+use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n use rustc_lexer::unescape::{self, EscapeError};\n@@ -438,7 +439,7 @@ impl Write {\n     fn parse_fmt_string(&self, cx: &EarlyContext<'_>, str: &StrLit) -> Option<SimpleFormatArgs> {\n         use rustc_parse_format::{ParseMode, Parser, Piece};\n \n-        let str_sym = str.symbol.as_str();\n+        let str_sym = str.symbol_unescaped.as_str();\n         let style = match str.style {\n             StrStyle::Cooked => None,\n             StrStyle::Raw(n) => Some(n as usize),\n@@ -514,21 +515,17 @@ impl Write {\n             if !parser.eat(&token::Comma) {\n                 return (Some(fmtstr), expr);\n             }\n+\n+            let comma_span = parser.prev_token.span;\n             let token_expr = if let Ok(expr) = parser.parse_expr().map_err(|mut err| err.cancel()) {\n                 expr\n             } else {\n                 return (Some(fmtstr), None);\n             };\n-            let (fmt_spans, span) = match &token_expr.kind {\n-                ExprKind::Lit(lit) if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) => {\n-                    (unnamed_args.next().unwrap_or(&[]), token_expr.span)\n-                },\n+            let (fmt_spans, lit) = match &token_expr.kind {\n+                ExprKind::Lit(lit) => (unnamed_args.next().unwrap_or(&[]), lit),\n                 ExprKind::Assign(lhs, rhs, _) => match (&lhs.kind, &rhs.kind) {\n-                    (ExprKind::Path(_, p), ExprKind::Lit(lit))\n-                        if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) =>\n-                    {\n-                        (args.get_named(p), rhs.span)\n-                    },\n+                    (ExprKind::Path(_, p), ExprKind::Lit(lit)) => (args.get_named(p), lit),\n                     _ => continue,\n                 },\n                 _ => {\n@@ -537,8 +534,45 @@ impl Write {\n                 },\n             };\n \n+            let replacement: String = match lit.token.kind {\n+                LitKind::Integer | LitKind::Float | LitKind::Err => continue,\n+                LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n+                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                },\n+                LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n+                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                },\n+                LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n+                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str().deref() {\n+                    \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n+                    \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n+                    \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n+                    \"\\\\'\" => \"'\",\n+                    \"{\" => \"{{\",\n+                    \"}\" => \"}}\",\n+                    x if matches!(fmtstr.style, StrStyle::Raw(_)) && x.starts_with(\"\\\\\") => continue,\n+                    x => x,\n+                }\n+                .into(),\n+                LitKind::Bool => lit.token.symbol.as_str().deref().into(),\n+            };\n+\n             if !fmt_spans.is_empty() {\n-                span_lint(cx, lint, span, \"literal with an empty format string\");\n+                span_lint_and_then(\n+                    cx,\n+                    lint,\n+                    token_expr.span,\n+                    \"literal with an empty format string\",\n+                    |diag| {\n+                        diag.multipart_suggestion(\n+                            \"try this\",\n+                            iter::once((comma_span.to(token_expr.span), String::new()))\n+                                .chain(fmt_spans.iter().cloned().zip(iter::repeat(replacement)))\n+                                .collect(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n             }\n         }\n     }"}, {"sha": "54a4084c89e116f1e532c9ac76c8e5bd63d11f47", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=a7fa2a6fa88477ab2542bb15347e3085d9547f95", "patch": "@@ -5,66 +5,120 @@ LL |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n    |\n    = note: `-D clippy::print-literal` implied by `-D warnings`\n+help: try this\n+   |\n+LL |     print!(\"Hello world\");\n+   |                   ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:26:36\n    |\n LL |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"Hello {} world\", world);\n+   |                        ^^^^^       --\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:27:26\n    |\n LL |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"Hello world\");\n+   |                     ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:25\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"hello {1}\", \"world\");\n+   |               ^^^^^    --\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:34\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"{0} world\", \"hello\");\n+   |                   ^^^^^         --\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:25\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"{1} hello\", \"world\");\n+   |                   ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:34\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"world {0}\", \"hello\");\n+   |               ^^^^^             --\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:35\n+  --> $DIR/print_literal.rs:36:29\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                   ^^^^^^^\n+   |                             ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"hello {bar}\", bar = \"world\");\n+   |               ^^^^^      --\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:50\n+  --> $DIR/print_literal.rs:36:44\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                                  ^^^^^^^\n+   |                                            ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"{foo} world\", foo = \"hello\");\n+   |                     ^^^^^               --\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:35\n+  --> $DIR/print_literal.rs:37:29\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                   ^^^^^^^\n+   |                             ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"{bar} hello\", bar = \"world\");\n+   |                     ^^^^^--\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:50\n+  --> $DIR/print_literal.rs:37:44\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                                  ^^^^^^^\n+   |                                            ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     println!(\"world {foo}\", foo = \"hello\");\n+   |               ^^^^^                     --\n \n error: aborting due to 11 previous errors\n "}, {"sha": "507a78e82805030cf9ae9b34be7b0228c57b3f27", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=a7fa2a6fa88477ab2542bb15347e3085d9547f95", "patch": "@@ -5,66 +5,120 @@ LL |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n    |\n    = note: `-D clippy::write-literal` implied by `-D warnings`\n+help: try this\n+   |\n+LL |     write!(&mut v, \"Hello world\");\n+   |                           ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:31:44\n    |\n LL |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"Hello {} world\", world);\n+   |                                ^^^^^       --\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:32:34\n    |\n LL |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"Hello world\");\n+   |                             ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:33\n    |\n LL |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"hello {1}\", \"world\");\n+   |                       ^^^^^    --\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:42\n    |\n LL |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"{0} world\", \"hello\");\n+   |                           ^^^^^         --\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:33\n    |\n LL |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"{1} hello\", \"world\");\n+   |                           ^^^^^--\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:42\n    |\n LL |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"world {0}\", \"hello\");\n+   |                       ^^^^^             --\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:43\n+  --> $DIR/write_literal.rs:41:37\n    |\n LL |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                           ^^^^^^^\n+   |                                     ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"hello {bar}\", bar = \"world\");\n+   |                       ^^^^^      --\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:58\n+  --> $DIR/write_literal.rs:41:52\n    |\n LL |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                                          ^^^^^^^\n+   |                                                    ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"{foo} world\", foo = \"hello\");\n+   |                             ^^^^^               --\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:43\n+  --> $DIR/write_literal.rs:42:37\n    |\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                           ^^^^^^^\n+   |                                     ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"{bar} hello\", bar = \"world\");\n+   |                             ^^^^^--\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:58\n+  --> $DIR/write_literal.rs:42:52\n    |\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                                          ^^^^^^^\n+   |                                                    ^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"world {foo}\", foo = \"hello\");\n+   |                       ^^^^^                     --\n \n error: aborting due to 11 previous errors\n "}, {"sha": "f341e8215e1caff9491c8963b2275b63cf4d9a1b", "filename": "tests/ui/write_literal_2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal_2.rs?ref=a7fa2a6fa88477ab2542bb15347e3085d9547f95", "patch": "@@ -0,0 +1,27 @@\n+#![allow(unused_must_use)]\n+#![warn(clippy::write_literal)]\n+\n+use std::io::Write;\n+\n+fn main() {\n+    let mut v = Vec::new();\n+\n+    writeln!(&mut v, \"{}\", \"{hello}\");\n+    writeln!(&mut v, r\"{}\", r\"{hello}\");\n+    writeln!(&mut v, \"{}\", '\\'');\n+    writeln!(&mut v, \"{}\", '\"');\n+    writeln!(&mut v, r\"{}\", '\"'); // don't lint\n+    writeln!(&mut v, r\"{}\", '\\'');\n+    writeln!(\n+        &mut v,\n+        \"some {}\",\n+        \"hello \\\n+        world!\"\n+    );\n+    writeln!(\n+        &mut v,\n+        \"some {}\\\n+        {} \\\\ {}\",\n+        \"1\", \"2\", \"3\",\n+    );\n+}"}, {"sha": "5b4883580111b1d1cb76cdc253ec6fcd19ef7406", "filename": "tests/ui/write_literal_2.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7fa2a6fa88477ab2542bb15347e3085d9547f95/tests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal_2.stderr?ref=a7fa2a6fa88477ab2542bb15347e3085d9547f95", "patch": "@@ -0,0 +1,106 @@\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:9:28\n+   |\n+LL |     writeln!(&mut v, \"{}\", \"{hello}\");\n+   |                            ^^^^^^^^^\n+   |\n+   = note: `-D clippy::write-literal` implied by `-D warnings`\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"{{hello}}\");\n+   |                       ^^^^^^^^^--\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:10:29\n+   |\n+LL |     writeln!(&mut v, r\"{}\", r\"{hello}\");\n+   |                             ^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, r\"{{hello}}\");\n+   |                        ^^^^^^^^^--\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:11:28\n+   |\n+LL |     writeln!(&mut v, \"{}\", '/'');\n+   |                            ^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"'\");\n+   |                       ^--\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:12:28\n+   |\n+LL |     writeln!(&mut v, \"{}\", '\"');\n+   |                            ^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, \"/\"\");\n+   |                       ^^--\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:14:29\n+   |\n+LL |     writeln!(&mut v, r\"{}\", '/'');\n+   |                             ^^^^\n+   |\n+help: try this\n+   |\n+LL |     writeln!(&mut v, r\"'\");\n+   |                        ^--\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:18:9\n+   |\n+LL | /         \"hello /\n+LL | |         world!\"\n+   | |_______________^\n+   |\n+help: try this\n+   |\n+LL |         \"some hello /\n+LL |         world!\"\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:25:9\n+   |\n+LL |         \"1\", \"2\", \"3\",\n+   |         ^^^\n+   |\n+help: try this\n+   |\n+LL |         \"some 1{} / {}\", \"2\", \"3\",\n+   |               ^        --\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:25:14\n+   |\n+LL |         \"1\", \"2\", \"3\",\n+   |              ^^^\n+   |\n+help: try this\n+   |\n+LL |         2 / {}\",\n+LL |         \"1\", \"3\",\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:25:19\n+   |\n+LL |         \"1\", \"2\", \"3\",\n+   |                   ^^^\n+   |\n+help: try this\n+   |\n+LL |         {} / 3\",\n+LL |         \"1\", \"2\",\n+   |\n+\n+error: aborting due to 9 previous errors\n+"}]}