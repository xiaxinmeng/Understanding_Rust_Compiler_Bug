{"sha": "2647a4812c87c1fd9535d0c26db2b5f6433075d0", "node_id": "C_kwDOAAsO6NoAKDI2NDdhNDgxMmM4N2MxZmQ5NTM1ZDBjMjZkYjJiNWY2NDMzMDc1ZDA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-27T03:28:21Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-29T01:12:10Z"}, "message": "macros: reuse `SetOnce` trait in diagnostic derive\n\n`SetOnce` trait was introduced in the subdiagnostic derive to simplify\nthe code a little bit, re-use it in the diagnostic derive too.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "2e8119e48ccda1d4f2714bd084faf80e7d16a523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8119e48ccda1d4f2714bd084faf80e7d16a523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2647a4812c87c1fd9535d0c26db2b5f6433075d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2647a4812c87c1fd9535d0c26db2b5f6433075d0", "html_url": "https://github.com/rust-lang/rust/commit/2647a4812c87c1fd9535d0c26db2b5f6433075d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2647a4812c87c1fd9535d0c26db2b5f6433075d0/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "html_url": "https://github.com/rust-lang/rust/commit/36a396ce51391ff6b0c41898a4c21fc6d303c4a4"}], "stats": {"total": 198, "additions": 102, "deletions": 96}, "files": [{"sha": "78e273ef823cccf92a2360ce280a029eeaa8873b", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 60, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2647a4812c87c1fd9535d0c26db2b5f6433075d0/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2647a4812c87c1fd9535d0c26db2b5f6433075d0/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=2647a4812c87c1fd9535d0c26db2b5f6433075d0", "patch": "@@ -5,7 +5,8 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, FieldInfo, HasFieldMap,\n+    option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, FieldInfo,\n+    HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -240,7 +241,7 @@ struct SessionDiagnosticDeriveBuilder {\n     slug: Option<(String, proc_macro::Span)>,\n     /// Error codes are a optional part of the struct attribute - this is only set to detect\n     /// multiple specifications.\n-    code: Option<proc_macro::Span>,\n+    code: Option<(String, proc_macro::Span)>,\n }\n \n impl HasFieldMap for SessionDiagnosticDeriveBuilder {\n@@ -306,7 +307,7 @@ impl SessionDiagnosticDeriveBuilder {\n                 diag.help(\"only `error` and `warning` are valid attributes\")\n             }),\n         };\n-        self.set_kind_once(kind, span)?;\n+        self.kind.set_once((kind, span));\n \n         let mut tokens = Vec::new();\n         for nested_attr in nested {\n@@ -321,12 +322,17 @@ impl SessionDiagnosticDeriveBuilder {\n                 // Struct attributes are only allowed to be applied once, and the diagnostic\n                 // changes will be set in the initialisation code.\n                 Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n+                    let span = s.span().unwrap();\n                     match nested_name.as_str() {\n                         \"slug\" => {\n-                            self.set_slug_once(s.value(), s.span().unwrap());\n+                            self.slug.set_once((s.value(), span));\n                         }\n                         \"code\" => {\n-                            tokens.push(self.set_code_once(s.value(), s.span().unwrap()));\n+                            self.code.set_once((s.value(), span));\n+                            let (diag, code) = (&self.diag, &self.code.as_ref().map(|(v, _)| v));\n+                            tokens.push(quote! {\n+                                #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n+                            });\n                         }\n                         _ => invalid_nested_attr(attr, &nested_attr)\n                             .help(\"only `slug` and `code` are valid nested attributes\")\n@@ -340,61 +346,6 @@ impl SessionDiagnosticDeriveBuilder {\n         Ok(tokens.drain(..).collect())\n     }\n \n-    #[must_use]\n-    fn set_kind_once(\n-        &mut self,\n-        kind: SessionDiagnosticKind,\n-        span: proc_macro::Span,\n-    ) -> Result<(), SessionDiagnosticDeriveError> {\n-        match self.kind {\n-            None => {\n-                self.kind = Some((kind, span));\n-                Ok(())\n-            }\n-            Some((prev_kind, prev_span)) => {\n-                let existing = prev_kind.descr();\n-                let current = kind.descr();\n-\n-                let msg = if current == existing {\n-                    format!(\"`{}` specified multiple times\", existing)\n-                } else {\n-                    format!(\"`{}` specified when `{}` was already specified\", current, existing)\n-                };\n-                throw_span_err!(span, &msg, |diag| diag\n-                    .span_note(prev_span, \"previously specified here\"));\n-            }\n-        }\n-    }\n-\n-    fn set_code_once(&mut self, code: String, span: proc_macro::Span) -> TokenStream {\n-        match self.code {\n-            None => {\n-                self.code = Some(span);\n-            }\n-            Some(prev_span) => {\n-                span_err(span, \"`code` specified multiple times\")\n-                    .span_note(prev_span, \"previously specified here\")\n-                    .emit();\n-            }\n-        }\n-\n-        let diag = &self.diag;\n-        quote! { #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string())); }\n-    }\n-\n-    fn set_slug_once(&mut self, slug: String, span: proc_macro::Span) {\n-        match self.slug {\n-            None => {\n-                self.slug = Some((slug, span));\n-            }\n-            Some((_, prev_span)) => {\n-                span_err(span, \"`slug` specified multiple times\")\n-                    .span_note(prev_span, \"previously specified here\")\n-                    .emit();\n-            }\n-        }\n-    }\n-\n     fn generate_field_attr_code(\n         &mut self,\n         attr: &syn::Attribute,"}, {"sha": "df57a9f183fa5b00ff8b4da46087b21407094fe2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2647a4812c87c1fd9535d0c26db2b5f6433075d0/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2647a4812c87c1fd9535d0c26db2b5f6433075d0/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=2647a4812c87c1fd9535d0c26db2b5f6433075d0", "patch": "@@ -90,21 +90,28 @@ struct WrongPlaceField {\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n-#[error(code = \"E0456\", slug = \"bar\")] //~ ERROR `error` specified multiple times\n+#[error(code = \"E0456\", slug = \"bar\")]\n+//~^ ERROR specified multiple times\n+//~^^ ERROR specified multiple times\n+//~^^^ ERROR specified multiple times\n struct ErrorSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n #[warning(code = \"E0293\", slug = \"bar\")]\n-//~^ ERROR `warning` specified when `error` was already specified\n+//~^ ERROR specified multiple times\n+//~^^ ERROR specified multiple times\n+//~^^^ ERROR specified multiple times\n struct WarnSpecifiedAfterError {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")] //~ ERROR `code` specified multiple times\n+#[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n+//~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")] //~ ERROR `slug` specified multiple times\n+#[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n+//~^ ERROR specified multiple times\n struct SlugSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]"}, {"sha": "5a685ae43be32fbef82d599b5b4ceb75da4800a2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 80, "deletions": 32, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2647a4812c87c1fd9535d0c26db2b5f6433075d0/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2647a4812c87c1fd9535d0c26db2b5f6433075d0/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=2647a4812c87c1fd9535d0c26db2b5f6433075d0", "patch": "@@ -86,7 +86,7 @@ LL |     #[suggestion = \"bar\"]\n    |\n    = help: only `label`, `note` and `help` are valid field attributes\n \n-error: `error` specified multiple times\n+error: specified multiple times\n   --> $DIR/diagnostic-derive.rs:93:1\n    |\n LL | #[error(code = \"E0456\", slug = \"bar\")]\n@@ -98,52 +98,100 @@ note: previously specified here\n LL | #[error(code = \"E0123\", slug = \"foo\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `warning` specified when `error` was already specified\n-  --> $DIR/diagnostic-derive.rs:98:1\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:93:16\n+   |\n+LL | #[error(code = \"E0456\", slug = \"bar\")]\n+   |                ^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:92:16\n+   |\n+LL | #[error(code = \"E0123\", slug = \"foo\")]\n+   |                ^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:93:32\n+   |\n+LL | #[error(code = \"E0456\", slug = \"bar\")]\n+   |                                ^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:92:32\n+   |\n+LL | #[error(code = \"E0123\", slug = \"foo\")]\n+   |                                ^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:101:1\n    |\n LL | #[warning(code = \"E0293\", slug = \"bar\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:97:1\n+  --> $DIR/diagnostic-derive.rs:100:1\n    |\n LL | #[error(code = \"E0123\", slug = \"foo\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `code` specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:32\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:101:18\n+   |\n+LL | #[warning(code = \"E0293\", slug = \"bar\")]\n+   |                  ^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:100:16\n+   |\n+LL | #[error(code = \"E0123\", slug = \"foo\")]\n+   |                ^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:101:34\n+   |\n+LL | #[warning(code = \"E0293\", slug = \"bar\")]\n+   |                                  ^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:100:32\n+   |\n+LL | #[error(code = \"E0123\", slug = \"foo\")]\n+   |                                ^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:108:32\n    |\n LL | #[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n    |                                ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:103:16\n+  --> $DIR/diagnostic-derive.rs:108:16\n    |\n LL | #[error(code = \"E0456\", code = \"E0457\", slug = \"bar\")]\n    |                ^^^^^^^\n \n-error: `slug` specified multiple times\n-  --> $DIR/diagnostic-derive.rs:107:46\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:113:46\n    |\n LL | #[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n    |                                              ^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:107:32\n+  --> $DIR/diagnostic-derive.rs:113:32\n    |\n LL | #[error(code = \"E0456\", slug = \"foo\", slug = \"bar\")]\n    |                                ^^^^^\n \n error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:111:1\n+  --> $DIR/diagnostic-derive.rs:118:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the `#[error(...)]` attribute to create an error\n \n error: `slug` not specified\n-  --> $DIR/diagnostic-derive.rs:114:1\n+  --> $DIR/diagnostic-derive.rs:121:1\n    |\n LL | / #[error(code = \"E0456\")]\n LL | | struct SlugNotProvided {}\n@@ -152,33 +200,33 @@ LL | | struct SlugNotProvided {}\n    = help: use the `#[error(slug = \"...\")]` attribute to set this diagnostic's slug\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:124:5\n+  --> $DIR/diagnostic-derive.rs:131:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:132:5\n+  --> $DIR/diagnostic-derive.rs:139:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n    |\n    = help: only `skip_arg`, `primary_span`, `label`, `note` and `help` are valid field attributes\n \n error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:149:5\n+  --> $DIR/diagnostic-derive.rs:156:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:157:42\n+  --> $DIR/diagnostic-derive.rs:164:42\n    |\n LL |     #[suggestion(message = \"bar\", code = \"{name}\")]\n    |                                          ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:162:16\n+  --> $DIR/diagnostic-derive.rs:169:16\n    |\n LL | #[derive(SessionDiagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -189,7 +237,7 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:172:15\n+  --> $DIR/diagnostic-derive.rs:179:15\n    |\n LL | #[derive(SessionDiagnostic)]\n    |               ^ unmatched `}` in format string\n@@ -198,29 +246,29 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:192:5\n+  --> $DIR/diagnostic-derive.rs:199:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:217:18\n+  --> $DIR/diagnostic-derive.rs:224:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `message` and `code` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:225:18\n+  --> $DIR/diagnostic-derive.rs:232:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `message` and `code` are valid field attributes\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:247:5\n+  --> $DIR/diagnostic-derive.rs:254:5\n    |\n LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n@@ -230,49 +278,49 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:262:5\n+  --> $DIR/diagnostic-derive.rs:269:5\n    |\n LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:270:5\n+  --> $DIR/diagnostic-derive.rs:277:5\n    |\n LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:278:5\n+  --> $DIR/diagnostic-derive.rs:285:5\n    |\n LL |     #[label(\"bar\")]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\n \n error: `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:399:1\n+  --> $DIR/diagnostic-derive.rs:406:1\n    |\n LL | #[help]\n    | ^^^^^^^\n \n error: `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:407:1\n+  --> $DIR/diagnostic-derive.rs:414:1\n    |\n LL | #[help = \"bar\"]\n    | ^^^^^^^^^^^^^^^\n \n error: `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:415:1\n+  --> $DIR/diagnostic-derive.rs:422:1\n    |\n LL | #[note]\n    | ^^^^^^^\n \n error: `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:423:1\n+  --> $DIR/diagnostic-derive.rs:430:1\n    |\n LL | #[note = \"bar\"]\n    | ^^^^^^^^^^^^^^^\n@@ -284,13 +332,13 @@ LL | #[nonsense(code = \"E0123\", slug = \"foo\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:132:7\n+  --> $DIR/diagnostic-derive.rs:139:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error[E0599]: no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n-  --> $DIR/diagnostic-derive.rs:322:10\n+  --> $DIR/diagnostic-derive.rs:329:10\n    |\n LL | struct Hello {}\n    | ------------ method `into_diagnostic_arg` not found for this\n@@ -300,6 +348,6 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 41 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}