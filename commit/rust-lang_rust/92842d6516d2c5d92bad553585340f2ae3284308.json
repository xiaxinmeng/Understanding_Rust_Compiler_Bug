{"sha": "92842d6516d2c5d92bad553585340f2ae3284308", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODQyZDY1MTZkMmM1ZDkyYmFkNTUzNTg1MzQwZjJhZTMyODQzMDg=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-10T01:49:32Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-11T13:54:35Z"}, "message": "dlist: Expose ListInsertion trait with insert_before and peek_next\n\nAn iterator that allows mutating the list is very useful but needs care\nto not be unsound. ListIteration exposes only insert_before (used for\ninsert_ordered) and peek_next so far.", "tree": {"sha": "222a26de158a9b1043a2ab3b703209b928d3107b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222a26de158a9b1043a2ab3b703209b928d3107b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92842d6516d2c5d92bad553585340f2ae3284308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92842d6516d2c5d92bad553585340f2ae3284308", "html_url": "https://github.com/rust-lang/rust/commit/92842d6516d2c5d92bad553585340f2ae3284308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92842d6516d2c5d92bad553585340f2ae3284308/comments", "author": null, "committer": null, "parents": [{"sha": "4fa69ab97ca4a5d570eec28c0ef979cd829686c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa69ab97ca4a5d570eec28c0ef979cd829686c6", "html_url": "https://github.com/rust-lang/rust/commit/4fa69ab97ca4a5d570eec28c0ef979cd829686c6"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "5722e39eb0f5c888bb6f4225cd2a40e1ab6c3a3d", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/92842d6516d2c5d92bad553585340f2ae3284308/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92842d6516d2c5d92bad553585340f2ae3284308/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=92842d6516d2c5d92bad553585340f2ae3284308", "patch": "@@ -272,7 +272,7 @@ impl<T> List<T> {\n     ///\n     /// O(N)\n     #[inline]\n-    pub fn insert_before(&mut self, elt: T, f: &fn(&T, &T) -> bool) {\n+    pub fn insert_when(&mut self, elt: T, f: &fn(&T, &T) -> bool) {\n         {\n             let mut it = self.mut_iter();\n             loop {\n@@ -341,7 +341,7 @@ impl<T> List<T> {\n /// O(N)\n impl<T: cmp::TotalOrd> List<T> {\n     fn insert_ordered(&mut self, elt: T) {\n-        self.insert_before(elt, |a, b| a.cmp(b) != cmp::Less);\n+        self.insert_when(elt, |a, b| a.cmp(b) != cmp::Less);\n     }\n }\n \n@@ -363,7 +363,7 @@ impl<'self, A> Iterator<&'self A> for ForwardIterator<'self, A> {\n     }\n }\n \n-// MutForwardIterator is different because it implements ListInsertCursor,\n+// MutForwardIterator is different because it implements ListInsertion,\n // and can modify the list during traversal, used in insert_when and merge.\n impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n     #[inline]\n@@ -433,19 +433,22 @@ impl<'self, A> Iterator<&'self mut A> for MutReverseIterator<'self, A> {\n     }\n }\n \n-// XXX: Should this be `pub`?\n-trait ListInsertCursor<A> {\n+/// Allow mutating the List while iterating\n+pub trait ListInsertion<A> {\n     /// Insert `elt` just previous to the most recently yielded element\n     fn insert_before(&mut self, elt: A);\n+\n+    /// Provide a reference to the next element, without changing the iterator\n+    fn peek_next<'a>(&'a mut self) -> Option<&'a mut A>;\n }\n \n-impl<'self, A> ListInsertCursor<A> for MutForwardIterator<'self, A> {\n+impl<'self, A> ListInsertion<A> for MutForwardIterator<'self, A> {\n     fn insert_before(&mut self, elt: A) {\n         match self.curs.resolve() {\n-            None => self.list.push_front(elt),\n+            None => { self.list.push_front(elt); self.next(); }\n             Some(node) => {\n                 let prev_node = match node.prev.resolve() {\n-                    None => return self.list.push_front(elt),  // at head\n+                    None => return self.list.push_front(elt),\n                     Some(prev) => prev,\n                 };\n                 let mut ins_node = ~Node{value: elt, next: None, prev: Rawlink::none()};\n@@ -456,6 +459,16 @@ impl<'self, A> ListInsertCursor<A> for MutForwardIterator<'self, A> {\n             }\n         }\n     }\n+\n+    fn peek_next<'a>(&'a mut self) -> Option<&'a mut A> {\n+        match self.curs.resolve() {\n+            None => self.list.peek_front_mut(),\n+            Some(curs) => match curs.next {\n+                None => None,\n+                Some(ref mut node) => Some(&mut node.value),\n+            }\n+        }\n+    }\n }\n \n impl<A> Iterator<A> for ConsumeIterator<A> {\n@@ -695,20 +708,30 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_list_cursor() {\n-        let mut m = generate_test();\n+    fn test_insert_prev() {\n+        let mut m = list_from(&[0,2,4,6,8]);\n         let len = m.len();\n         {\n             let mut it = m.mut_iter();\n+            it.insert_before(-2);\n             loop {\n                 match it.next() {\n                     None => break,\n-                    Some(elt) => it.insert_before(*elt * 2),\n+                    Some(elt) => {\n+                        it.insert_before(*elt + 1);\n+                        match it.peek_next() {\n+                            Some(x) => assert_eq!(*x, *elt + 2),\n+                            None => assert_eq!(8, *elt),\n+                        }\n+                    }\n                 }\n             }\n+            it.insert_before(0);\n+            it.insert_before(1);\n         }\n-        assert_eq!(m.len(), len * 2);\n         check_links(&m);\n+        assert_eq!(m.len(), 3 + len * 2);\n+        assert_eq!(m.consume_iter().collect::<~[int]>(), ~[-2,1,0,3,2,5,4,7,6,9,0,1,8]);\n     }\n \n     #[test]"}]}