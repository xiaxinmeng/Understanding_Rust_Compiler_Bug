{"sha": "48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "node_id": "C_kwDOAAsO6NoAKDQ4YzVlMGMyNjJjNGI0NTRlYzFjNDUyOGI1YTlkODFkM2ZjNmJkZTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-19T08:35:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T08:35:52Z"}, "message": "Rollup merge of #103034 - nathanwhit:let-chains-rhs-temporaries, r=wesleywiser\n\nLet expressions on RHS shouldn't be terminating scopes\n\nFixes #100276.\n\nBefore this PR, we were unconditionally marking the RHS of short-circuiting binary expressions as a terminating scope.\n\nIn the case of a let chain where the `let` expression was on the RHS, this meant that temporaries within the `let` expr would only live until the end of the expression. Since this only affected the RHS, this led to surprising behavior ([example](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d1b0a5d1f01882f9c89c2194a75eb19f)).\n\nAfter this PR, we only mark the RHS as a terminating scope if it is not a `let` expression.", "tree": {"sha": "e08004f9f2b1021ca95997f0ce432656f06ddf5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08004f9f2b1021ca95997f0ce432656f06ddf5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjT7boCRBK7hj4Ov3rIwAAEpYIADRgVYo99/elE4LSBGrGdQKU\n0MWwPDwg1aws2VnOnr3jocZzlMjoYwTiW7BRNJNPlXSrFMf4WIn2fXLeHLFoeRs9\noQijD/QKwcGvGrp+7/kqf4WmbTRQ9QoptEkFqwdpKRW6S3Rt5POR6cD1vupIZZcD\newABY2fA+WWl5dMmKGDYOqUam4rT+M/77ankD1aUM0Kbafg922nDui0zULXLLt28\nTxeUx6RLYo4Ps6CUikW9vXmY0/0E750gDvi/7RZrVWDkin2MGlrE3HF/8OjP/nOA\nm507QhNBIovM5XEgeo9DpXMlgwbQJSNy29JJ9Jd3tucgnoC69iEWnwmo4Woywi4=\n=XSLZ\n-----END PGP SIGNATURE-----\n", "payload": "tree e08004f9f2b1021ca95997f0ce432656f06ddf5f\nparent 5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3\nparent 3041bc9e71355eea71a5070b7939439fd3cf7e01\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666168552 +0530\ncommitter GitHub <noreply@github.com> 1666168552 +0530\n\nRollup merge of #103034 - nathanwhit:let-chains-rhs-temporaries, r=wesleywiser\n\nLet expressions on RHS shouldn't be terminating scopes\n\nFixes #100276.\n\nBefore this PR, we were unconditionally marking the RHS of short-circuiting binary expressions as a terminating scope.\n\nIn the case of a let chain where the `let` expression was on the RHS, this meant that temporaries within the `let` expr would only live until the end of the expression. Since this only affected the RHS, this led to surprising behavior ([example](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d1b0a5d1f01882f9c89c2194a75eb19f)).\n\nAfter this PR, we only mark the RHS as a terminating scope if it is not a `let` expression.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "html_url": "https://github.com/rust-lang/rust/commit/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "html_url": "https://github.com/rust-lang/rust/commit/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3"}, {"sha": "3041bc9e71355eea71a5070b7939439fd3cf7e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/3041bc9e71355eea71a5070b7939439fd3cf7e01", "html_url": "https://github.com/rust-lang/rust/commit/3041bc9e71355eea71a5070b7939439fd3cf7e01"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "ff32329e431b699eccdd4b7c393a0b9de36de9e5", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "patch": "@@ -252,9 +252,13 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             ) => {\n                 // For shortcircuiting operators, mark the RHS as a terminating\n                 // scope since it only executes conditionally.\n-                terminating(r.hir_id.local_id);\n-            }\n \n+                // `Let` expressions (in a let-chain) shouldn't be terminating, as their temporaries\n+                // should live beyond the immediate expression\n+                if !matches!(r.kind, hir::ExprKind::Let(_)) {\n+                    terminating(r.hir_id.local_id);\n+                }\n+            }\n             hir::ExprKind::If(_, ref then, Some(ref otherwise)) => {\n                 terminating(then.hir_id.local_id);\n                 terminating(otherwise.hir_id.local_id);"}, {"sha": "42385216ae7656d1f135c0a33013b7ab451180ad", "filename": "src/test/ui/drop/drop_order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs?ref=48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "patch": "@@ -129,10 +129,10 @@ impl DropOrderCollector {\n         // take the \"else\" branch\n         if self.option_loud_drop(6).is_some() // 2\n             && self.option_loud_drop(5).is_some() // 1\n-            && let None = self.option_loud_drop(7) { // 3\n+            && let None = self.option_loud_drop(8) { // 4\n             unreachable!();\n         } else {\n-            self.print(8); // 4\n+            self.print(7); // 3\n         }\n \n         // let exprs interspersed"}, {"sha": "6401a8d14810005df90692b2486d8b7fffa0e435", "filename": "src/test/ui/drop/issue-100276.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fdrop%2Fissue-100276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fdrop%2Fissue-100276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fissue-100276.rs?ref=48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// compile-flags: -Z validate-mir\n+#![feature(let_chains)]\n+\n+fn let_chains(entry: std::io::Result<std::fs::DirEntry>) {\n+    if let Ok(entry) = entry\n+        && let Some(s) = entry.file_name().to_str()\n+        && s.contains(\"\")\n+    {}\n+}\n+\n+fn main() {}"}, {"sha": "6471553e93fd1168ecac4a52a49e608eb3ae041c", "filename": "src/test/ui/mir/mir_let_chains_drop_order.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs?ref=48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "patch": "@@ -12,7 +12,7 @@ use std::panic;\n pub struct DropLogger<'a, T> {\n     extra: T,\n     id: usize,\n-    log: &'a panic::AssertUnwindSafe<RefCell<Vec<usize>>>\n+    log: &'a panic::AssertUnwindSafe<RefCell<Vec<usize>>>,\n }\n \n impl<'a, T> Drop for DropLogger<'a, T> {\n@@ -55,9 +55,9 @@ fn main() {\n             else {\n                 // 10 is not constructed\n                 d(10, None)\n-            }\n+            },\n         );\n-        assert_eq!(get(), vec![3, 8, 7, 1, 2]);\n+        assert_eq!(get(), vec![8, 7, 1, 3, 2]);\n     }\n     assert_eq!(get(), vec![0, 4, 6, 9, 5]);\n \n@@ -89,5 +89,5 @@ fn main() {\n             panic::panic_any(InjectedFailure)\n         );\n     });\n-    assert_eq!(get(), vec![14, 19, 20, 17, 15, 11, 18, 16, 12, 13]);\n+    assert_eq!(get(), vec![20, 17, 15, 11, 19, 18, 16, 12, 14, 13]);\n }"}]}