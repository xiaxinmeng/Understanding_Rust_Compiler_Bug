{"sha": "c2595539e7fd3e8b1986d30c25d8bf8717402bec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTk1NTM5ZTdmZDNlOGIxOTg2ZDMwYzI1ZDhiZjg3MTc0MDJiZWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-05T16:47:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T16:47:45Z"}, "message": "Rollup merge of #70777 - faern:use-assoc-int-consts2, r=dtolnay\n\nDon't import integer and float modules, use assoc consts\n\nStop importing the standard library integer and float modules to reach the `MIN`, `MAX` and other constants. They are available directly on the primitive types now.\n\nThis PR is a follow up of #69860 which made sure we use the new constants in documentation.\n\nThis type of change touches a lot of files, and previously all my assoc int consts PRs had collisions and were accepted only after a long delay. So I'd prefer to do it in smaller steps now. Just removing these imports seem like a good next step.\n\nr? @dtolnay", "tree": {"sha": "e55ef7c5a7087789f63b6ec958b1315ac02df93f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55ef7c5a7087789f63b6ec958b1315ac02df93f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2595539e7fd3e8b1986d30c25d8bf8717402bec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeiguxCRBK7hj4Ov3rIwAAdHIIAIb3H0NGfIAkzP8ZdTrYDBA+\nvGtPnZIDEk6axP+oz8Ad7iiRh3DkBeTPGXdwASCHuop1sk+S/VDDypo9gGLp86PW\n6LoywUNowOKb+5ZC0fuRldEgK2s7nCW9tKFptGzXFh+KRayEwKtKRtdHfaFYfS70\ndnZ4pJKSv9JwHSTguWu1rgWztRm5y3asRNndensBRK3dhIg2zOG546R6WgVkUF5K\nxizuj4M1RFtdA0QSBYtMRrhTZmwyvYedOwcfbw27A+/6k9zvU5U4DkW6yLmTShbE\nGIXr4wPN0/W2/tH8M59ZZrGsARd7Dd2rkG9MIf41inYTTKKgKIcpYIX9OsE6sMY=\n=iFwg\n-----END PGP SIGNATURE-----\n", "payload": "tree e55ef7c5a7087789f63b6ec958b1315ac02df93f\nparent 829154f9807801b55317c4c4eea887829434c758\nparent 101085ad9fd26a5e18f4c76dcc72b34d8edbdbe6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586105265 +0200\ncommitter GitHub <noreply@github.com> 1586105265 +0200\n\nRollup merge of #70777 - faern:use-assoc-int-consts2, r=dtolnay\n\nDon't import integer and float modules, use assoc consts\n\nStop importing the standard library integer and float modules to reach the `MIN`, `MAX` and other constants. They are available directly on the primitive types now.\n\nThis PR is a follow up of #69860 which made sure we use the new constants in documentation.\n\nThis type of change touches a lot of files, and previously all my assoc int consts PRs had collisions and were accepted only after a long delay. So I'd prefer to do it in smaller steps now. Just removing these imports seem like a good next step.\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2595539e7fd3e8b1986d30c25d8bf8717402bec", "html_url": "https://github.com/rust-lang/rust/commit/c2595539e7fd3e8b1986d30c25d8bf8717402bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2595539e7fd3e8b1986d30c25d8bf8717402bec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "829154f9807801b55317c4c4eea887829434c758", "url": "https://api.github.com/repos/rust-lang/rust/commits/829154f9807801b55317c4c4eea887829434c758", "html_url": "https://github.com/rust-lang/rust/commit/829154f9807801b55317c4c4eea887829434c758"}, {"sha": "101085ad9fd26a5e18f4c76dcc72b34d8edbdbe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/101085ad9fd26a5e18f4c76dcc72b34d8edbdbe6", "html_url": "https://github.com/rust-lang/rust/commit/101085ad9fd26a5e18f4c76dcc72b34d8edbdbe6"}], "stats": {"total": 102, "additions": 27, "deletions": 75}, "files": [{"sha": "7e67e2b1246ef2f4798fcb374c6cec67b1a31edc", "filename": "src/etc/test-float-parse/u64-pow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,7 +1,6 @@\n mod _common;\n \n use _common::validate;\n-use std::u64;\n \n fn main() {\n     for exp in 19..64 {"}, {"sha": "d31c73cc1bd8d576e3e2492d46bce1e0c3e34f36", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -4,7 +4,6 @@\n \n use core::intrinsics::{self, min_align_of_val, size_of_val};\n use core::ptr::{NonNull, Unique};\n-use core::usize;\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]"}, {"sha": "a01e9b25dd6c8715f2611efb53ce03a940bb8ccf", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -20,7 +20,6 @@\n //! ```\n //! use std::cmp::Ordering;\n //! use std::collections::BinaryHeap;\n-//! use std::usize;\n //!\n //! #[derive(Copy, Clone, Eq, PartialEq)]\n //! struct State {"}, {"sha": "9db997e864170f2d9028668c1c72de150508e6a3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -250,7 +250,6 @@ use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n-use core::usize;\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n use crate::string::String;"}, {"sha": "a3d9c78b7f58cd978db8cc716acbc56899545556", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -90,7 +90,6 @@ use core::borrow::{Borrow, BorrowMut};\n use core::cmp::Ordering::{self, Less};\n use core::mem::{self, size_of};\n use core::ptr;\n-use core::{u16, u32, u8};\n \n use crate::borrow::ToOwned;\n use crate::boxed::Box;"}, {"sha": "1cfb26eb35a113097a6d7200251c99763f520b74", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -23,7 +23,6 @@ use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n-use core::{isize, usize};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n use crate::boxed::Box;"}, {"sha": "bddaab0c761887a80e99eca5a2bb4e6f94a6acd7", "filename": "src/liballoc/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -3,8 +3,6 @@\n use core::any::Any;\n use core::clone::Clone;\n use core::convert::TryInto;\n-use core::f64;\n-use core::i64;\n use core::ops::Deref;\n use core::result::Result::{Err, Ok};\n "}, {"sha": "6e2a5abe90d7006dc1ba93bf9fd579293f0c2ab1", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,7 +1,6 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n use std::mem::size_of;\n-use std::{isize, usize};\n \n pub trait IntoCow<'a, B: ?Sized>\n where"}, {"sha": "b63d81796f9d2eb7b46f9889cb106927efedd41d", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -3,7 +3,6 @@ use std::collections::TryReserveError::*;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n-use std::{isize, usize};\n \n struct DropCounter<'a> {\n     count: &'a mut u32,"}, {"sha": "c287d56fa5353dceab5f32b09355f51c23c817c6", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -3,7 +3,6 @@ use std::collections::{vec_deque::Drain, VecDeque};\n use std::fmt::Debug;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n-use std::{isize, usize};\n \n use crate::hash;\n "}, {"sha": "4e1fd8bf753cad249414eaa1d2acc32ff202c864", "filename": "src/libcore/benches/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::dragon::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n #[bench]"}, {"sha": "77ca901a90af39890588491cf122386eca0c763c", "filename": "src/libcore/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {"}, {"sha": "275a1d062cafbb06d8c1c9186ae1d01728465918", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -104,7 +104,6 @@ fn test_format_int() {\n \n #[test]\n fn test_format_int_exp_limits() {\n-    use core::{i128, i16, i32, i64, i8, u128, u16, u32, u64, u8};\n     assert_eq!(format!(\"{:e}\", i8::MIN), \"-1.28e2\");\n     assert_eq!(format!(\"{:e}\", i8::MAX), \"1.27e2\");\n     assert_eq!(format!(\"{:e}\", i16::MIN), \"-3.2768e4\");\n@@ -125,8 +124,6 @@ fn test_format_int_exp_limits() {\n \n #[test]\n fn test_format_int_exp_precision() {\n-    use core::{i128, i16, i32, i64, i8};\n-\n     //test that float and integer match\n     let big_int: u32 = 314_159_265;\n     assert_eq!(format!(\"{:.1e}\", big_int), format!(\"{:.1e}\", f64::from(big_int)));\n@@ -214,7 +211,6 @@ fn test_format_int_sign_padding() {\n \n #[test]\n fn test_format_int_twos_complement() {\n-    use core::{i16, i32, i64, i8};\n     assert_eq!(format!(\"{}\", i8::MIN), \"-128\");\n     assert_eq!(format!(\"{}\", i16::MIN), \"-32768\");\n     assert_eq!(format!(\"{}\", i32::MIN), \"-2147483648\");"}, {"sha": "e0954a661c8d9f401201b8be514ad1bb1612f416", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -3,8 +3,6 @@\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n-use core::usize;\n-use core::{i16, i8, isize};\n \n #[test]\n fn test_lt() {\n@@ -2251,62 +2249,58 @@ fn test_range_inclusive_folds() {\n \n #[test]\n fn test_range_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((0..0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..100usize).size_hint(), (100, Some(100)));\n-    assert_eq!((0..UMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((0..0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..100u128).size_hint(), (100, Some(100)));\n-    assert_eq!((0..umax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..umax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..0isize).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100isize).size_hint(), (200, Some(200)));\n-    assert_eq!((IMIN..IMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((isize::MIN..isize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..0i128).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100i128).size_hint(), (200, Some(200)));\n-    assert_eq!((imin..imax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..imax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]\n fn test_range_inclusive_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((1..=0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0usize).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100usize).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=UMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=UMAX).size_hint(), (UMAX, None));\n+    assert_eq!((0..=usize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=usize::MAX).size_hint(), (usize::MAX, None));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((1..=0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0u128).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100u128).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=umax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=umax).size_hint(), (UMAX, None));\n-    assert_eq!((0..=umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..=umax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=umax).size_hint(), (usize::MAX, None));\n+    assert_eq!((0..=umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..=-1isize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0isize).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100isize).size_hint(), (201, Some(201)));\n-    assert_eq!((IMIN..=IMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((IMIN..=IMAX).size_hint(), (UMAX, None));\n+    assert_eq!((isize::MIN..=isize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((isize::MIN..=isize::MAX).size_hint(), (usize::MAX, None));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..=-1i128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0i128).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100i128).size_hint(), (201, Some(201)));\n-    assert_eq!((imin..=imax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..=imax).size_hint(), (UMAX, None));\n-    assert_eq!((imin..=imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..=imax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..=imax).size_hint(), (usize::MAX, None));\n+    assert_eq!((imin..=imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]"}, {"sha": "1c172f49c279c726fc73a69968ec5fdf6fd1521e", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,7 +1,5 @@\n #![allow(overflowing_literals)]\n \n-use std::{f32, f64, i64};\n-\n mod parse;\n mod rawfp;\n "}, {"sha": "ae892e3b0bfbfb7bec345fb7d3b82c1df3c38bf0", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,4 +1,4 @@\n-use std::{f32, f64, fmt, i16, str};\n+use std::{fmt, str};\n \n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use core::num::flt2dec::{round_up, Formatted, Part, Sign, MAX_SIG_DIGITS};"}, {"sha": "5b050a2c3563156edc48c0af5707694428d1385b", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,6 +1,5 @@\n #![cfg(not(target_arch = \"wasm32\"))]\n \n-use std::i16;\n use std::str;\n \n use core::num::flt2dec::strategy::grisu::format_exact_opt;"}, {"sha": "8396a0dd62db91ad3fdb3c8f0ffcc30264d8d67a", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -2,7 +2,6 @@ macro_rules! int_module {\n     ($T:ident, $T_i:ident) => {\n         #[cfg(test)]\n         mod tests {\n-            use core::isize;\n             use core::mem;\n             use core::ops::{BitAnd, BitOr, BitXor, Not, Shl, Shr};\n             use core::$T_i::*;"}, {"sha": "5f5d4810cb5701e4c53102deaaeb610076055279", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -5,7 +5,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos};\n \n use log::debug;\n-use std::usize;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "63730c56f0ed2bb7d2202b4d1433b1be6f2901ad", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -25,7 +25,7 @@ use rustc_span::Span;\n use rustc_target::abi::{self, HasDataLayout, LayoutOf, Primitive};\n \n use std::cmp::Ordering;\n-use std::{i128, iter, u128};\n+use std::iter;\n \n fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Value> {\n     let llvm_name = match name {"}, {"sha": "57fe7b0da6ff28ae38ffb574eed99eb088529515", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -17,8 +17,6 @@ use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::sym;\n use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n \n-use std::{i128, u128};\n-\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_rvalue(\n         &mut self,"}, {"sha": "1aa7ac024d94e239d2acd5275dadd2515585e6e0", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -23,7 +23,6 @@\n use crate::snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n use rustc_index::bit_set::BitSet;\n use std::fmt::Debug;\n-use std::usize;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "23f3558cbdfa33ba38a32abc1b976ce96a490e68", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -93,7 +93,6 @@ use std::path::Path;\n use std::process;\n use std::sync::Arc;\n use std::time::{Duration, Instant};\n-use std::u32;\n \n use measureme::{EventId, EventIdBuilder, SerializableString, StringId};\n use parking_lot::RwLock;"}, {"sha": "a84f89c7cd950040cbb23086fee06d55a98b2769", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -7,7 +7,6 @@ use std::iter::{self, FromIterator};\n use std::marker::PhantomData;\n use std::ops::{Index, IndexMut, Range, RangeBounds};\n use std::slice;\n-use std::u32;\n use std::vec;\n \n /// Represents some newtyped `usize` wrapper."}, {"sha": "1de820cdb6209be8b403974d8cbc928d721b74b2", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -8,7 +8,6 @@ use rustc_data_structures::unify as ut;\n use std::cmp;\n use std::marker::PhantomData;\n use std::ops::Range;\n-use std::u32;\n \n pub struct TypeVariableTable<'tcx> {\n     values: sv::SnapshotVec<Delegate>,"}, {"sha": "aa805a2f2dbc07bcf762cd59355688f55791d0be", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -21,7 +21,6 @@ use rustc_target::spec::abi::Abi;\n \n use log::debug;\n use std::cmp;\n-use std::{f32, f64, i16, i32, i64, i8, u16, u32, u64, u8};\n \n declare_lint! {\n     UNUSED_COMPARISONS,"}, {"sha": "29a4254d9eec6eb74f13269a76384623986ecbdd", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -42,7 +42,6 @@ use std::io;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use std::u32;\n \n pub use cstore_impl::{provide, provide_extern};\n "}, {"sha": "d75298fae0032eb7bfd3a665aaf8e5d842c3866f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -39,7 +39,6 @@ use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use std::u32;\n \n struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,"}, {"sha": "b82008f429fa4a37e32010e23b28d94bcc81f267", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -33,7 +33,7 @@ use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::Index;\n use std::slice;\n-use std::{iter, mem, option, u32};\n+use std::{iter, mem, option};\n \n pub use self::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n pub use self::query::*;"}, {"sha": "ec0b89ebb4d0aa7a8194a314312b7434f1eab7e5", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -27,7 +27,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n-use std::{cmp, iter, mem, usize};\n+use std::{cmp, iter, mem};\n \n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstKind, Item};"}, {"sha": "393af108a6e461983cdecd65607aa5558ab7c736", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty;\n use smallvec::SmallVec;\n use std::convert::TryInto;\n-use std::u32;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     crate fn field_match_pairs<'pat>("}, {"sha": "04cb509d44e4b32b337a53640d969b04fd5f07f4", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -17,7 +17,6 @@ use rustc_span::symbol::kw;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::PanicStrategy;\n-use std::u32;\n \n use super::lints;\n "}, {"sha": "51ba84416d64d21cc9b13024e6d605d43e42fdc0", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -256,7 +256,6 @@ use std::convert::TryInto;\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n use std::ops::RangeInclusive;\n-use std::u128;\n \n crate fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> Pat<'tcx> {\n     LiteralExpander { tcx: cx.tcx, param_env: cx.param_env }.fold_pattern(&pat)"}, {"sha": "ee71d09cb21e92dc329b93a3c6c1a814b6d4d6ad", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -112,10 +112,10 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use std::collections::VecDeque;\n+use std::fmt;\n use std::io;\n use std::io::prelude::*;\n use std::rc::Rc;\n-use std::{fmt, u32};\n \n #[derive(Copy, Clone, PartialEq)]\n struct Variable(u32);"}, {"sha": "73b46d753d7872aef84aa8a698221f511ed99774", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -7,7 +7,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decoder, Encoder};\n use std::borrow::Borrow;\n use std::fmt;\n-use std::{u32, u64};\n \n rustc_index::newtype_index! {\n     pub struct CrateId {"}, {"sha": "f41114839020e5765a8834dfa8a1fb94fed1d564", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -32,7 +32,6 @@ use std::collections::hash_map::Entry;\n use std::default::Default;\n use std::hash::Hash;\n use std::rc::Rc;\n-use std::u32;\n use std::{mem, vec};\n \n use crate::core::{self, DocContext, ImplTraitParam};"}, {"sha": "5604a9c2dc163bf5565e6b1d5aa0a70d25f34929", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -1,6 +1,5 @@\n use std::cmp;\n use std::string::String;\n-use std::usize;\n \n use crate::clean::{self, DocFragment, Item};\n use crate::core::DocContext;"}, {"sha": "688bddc2baf461cd6fabde0d1499e5f4678d817c", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -17,7 +17,6 @@ use rustc_serialize::{Decodable, Encodable};\n use std::collections::BTreeMap;\n use std::io::prelude::*;\n use std::string;\n-use std::{f32, f64, i64, u64};\n use Animal::*;\n \n #[derive(RustcDecodable, Eq, PartialEq, Debug)]"}, {"sha": "c4e929624d7a4c846c852dab19a18ebd440476c1", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -12,7 +12,6 @@ use self::StartResult::*;\n \n use core::cmp;\n use core::intrinsics::abort;\n-use core::isize;\n \n use crate::cell::UnsafeCell;\n use crate::ptr;"}, {"sha": "f33493ee0c9c90ca0049e6a6893b86b4144d255a", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -11,7 +11,6 @@ use self::Message::*;\n pub use self::UpgradeResult::*;\n \n use core::cmp;\n-use core::isize;\n \n use crate::cell::UnsafeCell;\n use crate::ptr;"}, {"sha": "3e2050799ccb436b791813fac5d7ff4fdc194566", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -26,7 +26,6 @@ use self::Blocker::*;\n pub use self::Failure::*;\n \n use core::intrinsics::abort;\n-use core::isize;\n use core::mem;\n use core::ptr;\n "}, {"sha": "34f88eea0d7c39d2859831dc614498cf07f4ab29", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2595539e7fd3e8b1986d30c25d8bf8717402bec/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=c2595539e7fd3e8b1986d30c25d8bf8717402bec", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n use crate::time::Duration;\n-use core::u32;\n \n pub type Tid = abi::Tid;\n "}]}