{"sha": "492b169224fae427294abca7710776e2c3784b27", "node_id": "C_kwDOAAsO6NoAKDQ5MmIxNjkyMjRmYWU0MjcyOTRhYmNhNzcxMDc3NmUyYzM3ODRiMjc", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-30T03:09:38Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-30T03:09:38Z"}, "message": "pr feedbacks", "tree": {"sha": "59e6f71db6072b3786d560c039f00619bdcbdf6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e6f71db6072b3786d560c039f00619bdcbdf6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/492b169224fae427294abca7710776e2c3784b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/492b169224fae427294abca7710776e2c3784b27", "html_url": "https://github.com/rust-lang/rust/commit/492b169224fae427294abca7710776e2c3784b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/492b169224fae427294abca7710776e2c3784b27/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0abf236445325d5aafe655067252235846bd1c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0abf236445325d5aafe655067252235846bd1c3c", "html_url": "https://github.com/rust-lang/rust/commit/0abf236445325d5aafe655067252235846bd1c3c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1434aa81c26a4bfc0a032e4d5f68db1f7e6ed536", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/492b169224fae427294abca7710776e2c3784b27/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492b169224fae427294abca7710776e2c3784b27/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=492b169224fae427294abca7710776e2c3784b27", "patch": "@@ -185,7 +185,7 @@ impl<DB> std::ops::Deref for Snap<DB> {\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"world_symbols\").detail(|| query.query.clone());\n \n-    let indices = if query.libs {\n+    let indices: Vec<_> = if query.libs {\n         db.library_roots()\n             .par_iter()\n             .map_with(Snap::new(db), |snap, &root| snap.library_symbols(root))\n@@ -206,7 +206,7 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n             .collect()\n     };\n \n-    query.search(indices)\n+    query.search(&indices)\n }\n \n pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<FileSymbol> {\n@@ -218,7 +218,7 @@ pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<Fil\n         .map_with(Snap::new(db), |snap, &module_id| snap.module_symbols(module_id))\n         .collect();\n \n-    query.search(indices)\n+    query.search(&indices)\n }\n \n fn module_ids_for_crate(db: &dyn DefDatabase, krate: CrateId) -> Vec<ModuleId> {\n@@ -317,10 +317,10 @@ impl SymbolIndex {\n }\n \n impl Query {\n-    pub(crate) fn search(self, indices: Vec<Arc<SymbolIndex>>) -> Vec<FileSymbol> {\n+    pub(crate) fn search(self, indices: &[Arc<SymbolIndex>]) -> Vec<FileSymbol> {\n         let _p = profile::span(\"symbol_index::Query::search\");\n         let mut op = fst::map::OpBuilder::new();\n-        for file_symbols in &indices {\n+        for file_symbols in indices.iter() {\n             let automaton = fst::automaton::Subsequence::new(&self.lowercased);\n             op = op.add(file_symbols.map.search(automaton))\n         }\n@@ -443,7 +443,7 @@ struct SymbolCollector<'a> {\n     db: &'a dyn SymbolsDatabase,\n     symbols: Vec<FileSymbol>,\n     work: Vec<SymbolCollectorWork>,\n-    container_name_stack: Vec<SmolStr>,\n+    current_container_name: Option<SmolStr>,\n }\n \n /// Given a [`ModuleId`] and a [`SymbolsDatabase`], use the DefMap for the module's crate to collect all symbols that should be\n@@ -453,7 +453,7 @@ impl<'a> SymbolCollector<'a> {\n         let mut symbol_collector = SymbolCollector {\n             db,\n             symbols: Default::default(),\n-            container_name_stack: Default::default(),\n+            current_container_name: None,\n             // The initial work is the root module we're collecting, additional work will\n             // be populated as we traverse the module's definitions.\n             work: vec![SymbolCollectorWork { module_id, parent: None }],\n@@ -557,16 +557,16 @@ impl<'a> SymbolCollector<'a> {\n \n     fn with_container_name(&mut self, container_name: Option<SmolStr>, f: impl FnOnce(&mut Self)) {\n         if let Some(container_name) = container_name {\n-            self.container_name_stack.push(container_name);\n+            let prev = self.current_container_name.replace(container_name);\n             f(self);\n-            self.container_name_stack.pop();\n+            self.current_container_name = prev;\n         } else {\n             f(self);\n         }\n     }\n \n     fn current_container_name(&self) -> Option<SmolStr> {\n-        self.container_name_stack.last().cloned()\n+        self.current_container_name.clone()\n     }\n \n     fn def_with_body_id_name(&self, body_id: DefWithBodyId) -> Option<SmolStr> {"}]}