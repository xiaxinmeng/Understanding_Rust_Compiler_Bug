{"sha": "4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDVjYmU4M2UwYjMyOTliZmU3ZjdmMzA1Yjk3NWMzYzA5ZjkyZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T06:42:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T06:42:49Z"}, "message": "Auto merge of #75205 - Aaron1011:fix/auto-trait-proj-ice, r=nikomatsakis\n\nHandle projection predicates in the param env for auto-trait docs\n\nFixes #72213\n\nAny predicates in the param env are guaranteed to hold, so we don't need\nto do any additional processing of them if we come across them as\nsub-obligations of a different predicate. This allows us to avoid adding\nthe same predicate to the computed ParamEnv multiple times (but with\ndifferent regions each time), which causes an ambiguity error during\nfulfillment.", "tree": {"sha": "cb2e5e7bd66527c2b564a6144dda36b7ca4a6c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2e5e7bd66527c2b564a6144dda36b7ca4a6c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "html_url": "https://github.com/rust-lang/rust/commit/4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4745cbe83e0b3299bfe7f7f305b975c3c09f92db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "html_url": "https://github.com/rust-lang/rust/commit/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3"}, {"sha": "ab766f0511fa0a735997b2a442744af71d8e6be0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab766f0511fa0a735997b2a442744af71d8e6be0", "html_url": "https://github.com/rust-lang/rust/commit/ab766f0511fa0a735997b2a442744af71d8e6be0"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "820f8716f05d1960309228734cff4d993288f755", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4745cbe83e0b3299bfe7f7f305b975c3c09f92db/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4745cbe83e0b3299bfe7f7f305b975c3c09f92db/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "patch": "@@ -270,6 +270,13 @@ impl AutoTraitFinder<'tcx> {\n     ) -> Option<(ty::ParamEnv<'tcx>, ty::ParamEnv<'tcx>)> {\n         let tcx = infcx.tcx;\n \n+        // Don't try to proess any nested obligations involving predicates\n+        // that are already in the `ParamEnv` (modulo regions): we already\n+        // know that they must hold.\n+        for predicate in param_env.caller_bounds() {\n+            fresh_preds.insert(self.clean_pred(infcx, predicate));\n+        }\n+\n         let mut select = SelectionContext::with_negative(&infcx, true);\n \n         let mut already_visited = FxHashSet::default();"}, {"sha": "6f66b8e556388d5392498c35f0721e6c9979913b", "filename": "src/test/rustdoc/synthetic_auto/issue-72213-projection-lifetime.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4745cbe83e0b3299bfe7f7f305b975c3c09f92db/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fissue-72213-projection-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4745cbe83e0b3299bfe7f7f305b975c3c09f92db/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fissue-72213-projection-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fissue-72213-projection-lifetime.rs?ref=4745cbe83e0b3299bfe7f7f305b975c3c09f92db", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for issue #72213\n+// Tests that we don't ICE when we have projection predicates\n+// in our initial ParamEnv\n+\n+pub struct Lines<'a, L>\n+where\n+    L: Iterator<Item = &'a ()>,\n+{\n+    words: std::iter::Peekable<Words<'a, L>>,\n+}\n+\n+pub struct Words<'a, L> {\n+    _m: std::marker::PhantomData<&'a L>,\n+}\n+\n+impl<'a, L> Iterator for Words<'a, L>\n+where\n+    L: Iterator<Item = &'a ()>,\n+{\n+    type Item = ();\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unimplemented!()\n+    }\n+}"}]}