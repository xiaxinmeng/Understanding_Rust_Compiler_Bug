{"sha": "d4c994e670dbf97b2f0858f54c5a75d64863f866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0Yzk5NGU2NzBkYmY5N2IyZjA4NThmNTRjNWE3NWQ2NDg2M2Y4NjY=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-15T16:28:51Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-09-20T12:38:47Z"}, "message": "Supplement DiagnosticBuilderExt with Applicability", "tree": {"sha": "4569c3e34d5ff89f7b53e710df2b447aa386b52d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4569c3e34d5ff89f7b53e710df2b447aa386b52d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c994e670dbf97b2f0858f54c5a75d64863f866", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlujlNcACgkQnxhOEWSD\nEYEK8Q/3ZJEF/3fHZcahVo/pf1MjNY/66HGkMbgOqjzXfNEd/tTpKGasGroRkwQF\n7427fIXR2vez5Uk/QdQ3FsAwNcN7KxoEqGpHQE5/nIanoqtiVmzordwJ0+BLYCYn\nyVGgosyXi0Iz8rg7SGmYUlAmSUXQnBRndzxQeqeR40ElaFcwk3TT/hCtMzY4Z1k9\nXOO2Uzb3MjFWhasJj8AKHjvDz2S4jZ63BBoog1rr/0ilPauMP/eZ/D0NSlYP7GG9\nRkRtBH/rLrRe787E1phinnBAagBqfDmLXfTCGRp6dmVMVIco6xupfYYwQqXTlkS9\nwwJZjnxcl8iOb5h6HswB3uxcrUcnoZRTElGnO+jecwUggBZxWuPSrpZA9rWzLJ/A\nUDE1mOzffMP+piB2YTjMZ1UXGaOaNOWFBP+e+RCtFelVIWowruYYOuah62Y7oZP7\nCVH3pLAMIpM3hG22zWIn6SLjk+3uXkyhZN2NPwQVAt5zB1aixKNkG/yL61cfylqU\n2nU0A+p1Jsx7PvkJry66Irixp0X3Ovc5FVBIkK5A6iyiFiUZ+Rx3i0KrltmTDQ0o\nNctWp03ynG6kjpdaG/zVGimSXk8NzYkkMyEwlxebRlbaoNVfKsAIkBXg/yRbcBrP\nnb8kZsDIodPw00Eb5JakccNcKEz8W64w4/GwBWe++wFV0B+4IQ==\n=jeJS\n-----END PGP SIGNATURE-----", "payload": "tree 4569c3e34d5ff89f7b53e710df2b447aa386b52d\nparent 92034e20c86bf3497b855dc3a756bfadae8ec006\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537028931 +0300\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1537447127 +0200\n\nSupplement DiagnosticBuilderExt with Applicability\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c994e670dbf97b2f0858f54c5a75d64863f866", "html_url": "https://github.com/rust-lang/rust/commit/d4c994e670dbf97b2f0858f54c5a75d64863f866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c994e670dbf97b2f0858f54c5a75d64863f866/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92034e20c86bf3497b855dc3a756bfadae8ec006", "url": "https://api.github.com/repos/rust-lang/rust/commits/92034e20c86bf3497b855dc3a756bfadae8ec006", "html_url": "https://github.com/rust-lang/rust/commit/92034e20c86bf3497b855dc3a756bfadae8ec006"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "cedcdec1062fe49cda47efe4bb1778ae0367fe08", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=d4c994e670dbf97b2f0858f54c5a75d64863f866", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::hir::*;\n use crate::syntax::ast::{Attribute, Name};\n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n ///\n@@ -56,7 +57,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n             attr.span,\n             &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n             |db| {\n-                db.suggest_remove_item(cx, attr.span, \"remove\");\n+                db.suggest_remove_item(cx, attr.span, \"remove\", Applicability::Unspecified);\n             },\n         );\n     }"}, {"sha": "0163849dd229aa17a54af1d7f83488878a53b142", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=d4c994e670dbf97b2f0858f54c5a75d64863f866", "patch": "@@ -8,6 +8,7 @@ use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n /// implementation of\n@@ -129,7 +130,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                             impl_item.span,\n                                             &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n                                             |db| {\n-                                                db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n+                                                db.suggest_item_with_attr(\n+                                                        cx,\n+                                                        sp,\n+                                                        \"try this\",\n+                                                        \"#[derive(Default)]\",\n+                                                        Applicability::Unspecified,\n+                                                        );\n                                             });\n                                     } else {\n                                         span_lint_and_then(\n@@ -143,6 +150,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                     item.span,\n                                                     \"try this\",\n                                                     &create_new_without_default_suggest_msg(self_ty),\n+                                                    Applicability::Unspecified,\n                                                 );\n                                             },\n                                         );"}, {"sha": "0cdfd623f45e2f4674f5d9c525bfedfc9f4b9c4e", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c994e670dbf97b2f0858f54c5a75d64863f866/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=d4c994e670dbf97b2f0858f54c5a75d64863f866", "patch": "@@ -462,7 +462,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// ```rust,ignore\n     /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n     /// ```\n-    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D);\n+    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D, applicability: Applicability);\n \n     /// Suggest to add an item before another.\n     ///\n@@ -476,7 +476,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     ///     bar();\n     /// }\");\n     /// ```\n-    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str, applicability: Applicability);\n \n     /// Suggest to completely remove an item.\n     ///\n@@ -489,24 +489,24 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// ```rust,ignore\n     /// db.suggest_remove_item(cx, item, \"remove this\")\n     /// ```\n-    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str);\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n-    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D) {\n+    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D, applicability: Applicability) {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n             self.span_suggestion_with_applicability(\n                         span,\n                         msg,\n                         format!(\"{}\\n{}\", attr, indent),\n-                        Applicability::Unspecified,\n+                        applicability,\n                         );\n         }\n     }\n \n-    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str) {\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str, applicability: Applicability) {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n@@ -527,12 +527,12 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                         span,\n                         msg,\n                         format!(\"{}\\n{}\", new_item, indent),\n-                        Applicability::Unspecified,\n+                        applicability,\n                         );\n         }\n     }\n \n-    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str) {\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability) {\n         let mut remove_span = item;\n         let hi = cx.sess().source_map().next_point(remove_span).hi();\n         let fmpos = cx.sess().source_map().lookup_byte_offset(hi);\n@@ -549,7 +549,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                     remove_span,\n                     msg,\n                     String::new(),\n-                    Applicability::Unspecified,\n+                    applicability,\n                     );\n     }\n }"}]}