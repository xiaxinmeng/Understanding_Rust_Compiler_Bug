{"sha": "3975d55d9888392cd738708b914442de9ac2bff5", "node_id": "C_kwDOAAsO6NoAKDM5NzVkNTVkOTg4ODM5MmNkNzM4NzA4YjkxNDQ0MmRlOWFjMmJmZjU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-09-20T13:41:42Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-09-26T08:14:45Z"}, "message": "remove cfg(bootstrap)", "tree": {"sha": "079e73a5cbc2fcbacfd332833442fe99c10942ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079e73a5cbc2fcbacfd332833442fe99c10942ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3975d55d9888392cd738708b914442de9ac2bff5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmMxX3cACgkQzXazX3c0\ndp5HhA//UaOCsNhkRsHknmko80zDKImCHW0EZQQZNkXmWKZecvy4oPR1llSRsEYk\nV0O+gUqbQ4Z0a3pMicO5vdBrHcM0WlzmpvjGUEFAz7jy0ZMFgDv/Cx0TEQYtmMlT\n6QT2iRPRKNFu3M1+o9ek6GSgHXBOqGoXO2Avnu1fdzHwPK6jxzxVx2twzSDhccKE\nHdUwgNwrWbJkaHTp6ceTzaVL6y/lza5DMPtEh0IxsdB2JGj4B5TfNxdRI38tYKN0\n45C/3u3kvEAOc+WKduQxkOUxxwMyVCvnV2bnLrKAUC6PmF1cNMprkTMzk1M0k64/\nw58eKhDZlHdKTLg6K9zvKt8pKc4cx2CLbGZWhPA0dkd5kOy8FbwHUDPqO4jZv3Zy\nqdJ4akx4CvKRwSp2YHgP8breVG94RIhbk/SaKrwEpvFSwhEHofBT++Fe1T0llu7u\nQLM3lH5Kh7nCTHHLNpe6YN26QFjjw0wNdyDGAx+J/AoSqMJW7A/DSx+bhuvfcSlm\nUozC+NyOt0cbsf9OhLXS24CBv7FcPo6Nv8TCQSfud/aKxvLrJSoumEMeKgcsF0yQ\nnMZ/FH6w9Sp5wZcXuRRTLPp/ogXh6wu3nA9GsBrfrTFW0osutC5f8r7y0JeWplOM\n6H4dDSNp5oJ2BcqePCGqUtdN4JT6CzklusMCARaXdgrAQ/5oA/U=\n=KJ56\n-----END PGP SIGNATURE-----", "payload": "tree 079e73a5cbc2fcbacfd332833442fe99c10942ba\nparent 317cab9bef9097eb2b1be8f24d3ee6c44742a8a8\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1663681302 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1664180085 +0200\n\nremove cfg(bootstrap)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3975d55d9888392cd738708b914442de9ac2bff5", "html_url": "https://github.com/rust-lang/rust/commit/3975d55d9888392cd738708b914442de9ac2bff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3975d55d9888392cd738708b914442de9ac2bff5/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317cab9bef9097eb2b1be8f24d3ee6c44742a8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/317cab9bef9097eb2b1be8f24d3ee6c44742a8a8", "html_url": "https://github.com/rust-lang/rust/commit/317cab9bef9097eb2b1be8f24d3ee6c44742a8a8"}], "stats": {"total": 1323, "additions": 15, "deletions": 1308}, "files": [{"sha": "0efde1e7b212443f1879d998d795628437f759b0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3046,7 +3046,6 @@ mod size_asserts {\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 104);\n     static_assert_size!(ExprKind, 72);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Fn, 184);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);"}, {"sha": "eeb7e56e2b12448e3b465fd29cfd6c716a76b468", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -13,9 +13,7 @@\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "275ceed30d7da0cb70f93eaccb4c388ef9adb06c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -32,7 +32,6 @@\n \n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "f58fffc917200a2bcd1d605c02c58f7622b8cbf1", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -9,7 +9,6 @@\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "4580ffcc6d8be694004fcdcf3c1a673be14ee02e", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -5,7 +5,6 @@\n //! to this crate.\n \n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "a83840e10998ae594aa6f3294d53d655581644bc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "0de27d3d4070e70d83f7e784251ab15a4ec382f6", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -9,7 +9,6 @@\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "15bfa8430460fb338e0fbbc6f6bbe4759ca68ef6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(extern_types)]\n #![feature(once_cell)]\n #![feature(iter_intersperse)]"}, {"sha": "3ef9a634e18576b822989808706a069bf1f950d6", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(associated_type_bounds)]\n #![feature(strict_provenance)]"}, {"sha": "510adde62962bac35727514cbf9a57902c969865", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -784,7 +784,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\", not(bootstrap)))]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;"}, {"sha": "7a01b85381a3fc3c9866083267bf056ec29af385", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -890,8 +890,6 @@ mod size_asserts {\n     static_assert_size!(MemPlaceMeta, 24);\n     static_assert_size!(MemPlace, 40);\n     static_assert_size!(MPlaceTy<'_>, 64);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Place, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(PlaceTy<'_>, 64);\n }"}, {"sha": "7c4c7db1035b411cf29d6d832a721f1bb4fa835a", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -10,7 +10,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]"}, {"sha": "467ac401d086b3f35b21506bf2ec05167b47b548", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -13,7 +13,6 @@\n #![feature(cell_leak)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "fcd49f5d01567e8ff106784879055a26a8c3d0d3", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -5,7 +5,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "4d262ae0f5ec8ccc29e45567b6c7f1b22377332b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -7,7 +7,6 @@\n #![feature(if_let_guard)]\n #![feature(adt_const_params)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n@@ -69,7 +68,7 @@ pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n // (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\", not(bootstrap)))]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, Encodable, Decodable)]"}, {"sha": "b34de94fb7db4a43579cf08200ccf1b0399d012b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "c1948052e3c513ca31bc0db03de9e7a7f5cf4550", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3520,14 +3520,11 @@ mod size_asserts {\n     static_assert_size!(FnDecl<'_>, 40);\n     static_assert_size!(ForeignItem<'_>, 72);\n     static_assert_size!(ForeignItemKind<'_>, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(GenericArg<'_>, 24);\n     static_assert_size!(GenericBound<'_>, 48);\n     static_assert_size!(Generics<'_>, 56);\n     static_assert_size!(Impl<'_>, 80);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(ImplItem<'_>, 80);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(ImplItemKind<'_>, 32);\n     static_assert_size!(Item<'_>, 80);\n     static_assert_size!(ItemKind<'_>, 48);\n@@ -3540,9 +3537,7 @@ mod size_asserts {\n     static_assert_size!(QPath<'_>, 24);\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItem<'_>, 88);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItemKind<'_>, 48);\n     static_assert_size!(Ty<'_>, 48);\n     static_assert_size!(TyKind<'_>, 32);"}, {"sha": "1c4aa420c9bf9bb59d116b0b8efa10ec484c846e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -5,7 +5,6 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_len)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "83dd9a67e61bc0f9b22325b38e6314366cb744fa", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "9753fb355308c2a0a829be4ba3224d569a8bfe7e", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(new_uninit)]\n #![feature(step_trait)]"}, {"sha": "b91c098ab03db2828718a7294dc0de51d773c5df", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -17,9 +17,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "a41a749ee68e5f240c49bbfd129301c49f4d4ab9", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(once_cell)]"}, {"sha": "4408f68dd63f3d4738363870baa6ec8507db7a70", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -34,7 +34,7 @@\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n+#![feature(min_specialization)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "36bda3e0f6bb26a115bd05db5889f8b781a9688c", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,5 +1,4 @@\n #![feature(allow_internal_unstable)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]"}, {"sha": "98cf6fef54a8ff7de77cae06948cba0318a2525b", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2,10 +2,8 @@\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(generators)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(macro_metavar_expr)]"}, {"sha": "a180706e1cf0f55d2cabdcd7a39263f8574d47b8", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -31,7 +31,6 @@\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(if_let_guard)]\n #![feature(map_first_last)]\n #![feature(negative_impls)]\n@@ -40,7 +39,6 @@\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "ee8377d1987c1ff7e54d4fab7b17f382626f7238", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1242,7 +1242,6 @@ pub enum BinOp {\n mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(AggregateKind<'_>, 40);\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);"}, {"sha": "84374a25ed85ea0128a41ef14009c5d94f870fd0", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -852,12 +852,8 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Pat<'_>, 72);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(PatKind<'_>, 56);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Stmt<'_>, 48);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(StmtKind<'_>, 40);\n }"}, {"sha": "8236b1528c0ec1a6a586e27f8c1a7ebad5bd44f8", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -6,7 +6,6 @@\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "b471d04fd606f815bea91545683a9dedfad501ee", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n #![feature(associated_type_defaults)]\n #![feature(box_patterns)]\n #![feature(exact_size_is_empty)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "2230c3399f0f8f5022afbdc9aac1a0b3d073917c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "42781bd25f05beb0a56e31f00fa0f49434780915", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,6 +1,5 @@\n #![feature(array_windows)]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "06245380927c36c70839706e3548a845524249c9", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]"}, {"sha": "6e621b7eb5eb09c3d41870b7f5c04170100499a3", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -8,7 +8,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(try_blocks)]"}, {"sha": "41d5f54b3664f7072b619c58df5bc84e5bce6685", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]"}, {"sha": "8f6da73d1f2d205fc0d3917629bf159d53d08625", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n #![feature(assert_matches)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "583030b0e5048038f78da81bb9177992312848b1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -12,7 +12,6 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]"}, {"sha": "ad7aca3cb94947d7e8a2f4253f5df814f3a63182", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![feature(never_type)]"}, {"sha": "1f8d2336c4e58bb93ad92ec1592dad49e5f1a26c", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -14,7 +14,6 @@ Core encoding and decoding interfaces.\n #![feature(min_specialization)]\n #![feature(core_intrinsics)]\n #![feature(maybe_uninit_slice)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(new_uninit)]\n #![feature(allocator_api)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "39e871f532c4975c231de9445ff2f895cb6faf04", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,6 +1,5 @@\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "f8df4169715939695359c8d72c2c01dd23b2520e", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -15,7 +15,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(negative_impls)]\n #![feature(min_specialization)]"}, {"sha": "aaba0d7f093ae0c33b1e3f11078b157f5beffd43", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -11,7 +11,6 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "5d52aa07523012329dada901b8e2e2cebf978a0c", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -16,9 +16,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(never_type)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "0da28737f69bc9487344981c88cbd817e075fb28", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n \n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "10c18789f7476b731385062b831273932638613b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "1859473166a7890f1920edc626e78453a8115db4", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -64,9 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "f651cb02176986ef3dce8f14362e33bdab6bfe2e", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -151,7 +151,6 @@ use core::async_iter::AsyncIterator;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt;\n use core::future::Future;\n@@ -176,7 +175,6 @@ use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n #[cfg(not(no_global_oom_handling))]\n use crate::str::from_boxed_utf8_unchecked;\n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n use crate::string::String;\n #[cfg(not(no_global_oom_handling))]\n@@ -2090,7 +2088,6 @@ impl<S: ?Sized + AsyncIterator + Unpin> AsyncIterator for Box<S> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2108,7 +2105,6 @@ impl dyn Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error + Send {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2123,7 +2119,6 @@ impl dyn Error + Send {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error + Send + Sync {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2138,7 +2133,6 @@ impl dyn Error + Send + Sync {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n@@ -2172,7 +2166,6 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2212,7 +2205,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n@@ -2257,7 +2249,6 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n@@ -2280,7 +2271,6 @@ impl From<String> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2305,7 +2295,6 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<&str> for Box<dyn Error> {\n@@ -2328,7 +2317,6 @@ impl From<&str> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2351,7 +2339,6 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n@@ -2373,7 +2360,6 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: core::error::Error> core::error::Error for Box<T> {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "c477c44906c97abce7164af4da82caf1a19ef295", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2,7 +2,6 @@\n // https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs\n // by matthieu-m\n use crate::alloc::{self, Layout, LayoutError};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt::{self, Debug, Display, Formatter};\n use core::marker::PhantomData;\n@@ -274,7 +273,6 @@ impl<H> WithHeader<H> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n impl<T: ?Sized + Error> Error for ThinBox<T> {\n     fn source(&self) -> Option<&(dyn Error + 'static)> {"}, {"sha": "370b58864af8f3f4f9d1d2c3af7bd054331f3c79", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -133,7 +133,6 @@ impl<'a, K: Debug + Ord, V: Debug, A: Allocator + Clone> fmt::Display\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: core::fmt::Debug + Ord, V: core::fmt::Debug> core::error::Error\n     for crate::collections::btree_map::OccupiedError<'a, K, V>"}, {"sha": "161a375736c65438e77b9e015448ec722594d436", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -153,6 +153,5 @@ trait SpecExtend<I: IntoIterator> {\n     fn spec_extend(&mut self, iter: I);\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl core::error::Error for TryReserveError {}"}, {"sha": "11bd4c4dc1ba88efbfce8199b73f48868caed155", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1122,7 +1122,6 @@ impl CStr {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl core::error::Error for NulError {\n     #[allow(deprecated)]\n@@ -1131,11 +1130,9 @@ impl core::error::Error for NulError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl core::error::Error for FromVecWithNulError {}\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl core::error::Error for IntoStringError {\n     #[allow(deprecated)]"}, {"sha": "7fde8f670a231a7cdb6bcf896776b60ebb7fb453", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -114,8 +114,8 @@\n #![feature(const_waker)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n-#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n-#![cfg_attr(not(bootstrap), feature(error_in_core))]\n+#![feature(error_generic_member_access)]\n+#![feature(error_in_core)]\n #![feature(exact_size_is_empty)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n@@ -132,7 +132,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]\n #![feature(pointer_byte_offsets)]\n-#![cfg_attr(not(bootstrap), feature(provide_any))]\n+#![feature(provide_any)]\n #![feature(ptr_internals)]\n #![feature(ptr_metadata)]\n #![feature(ptr_sub_ptr)]\n@@ -173,7 +173,6 @@\n #![cfg_attr(not(test), feature(generator_trait))]\n #![feature(hashmap_internals)]\n #![feature(lang_items)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "983376a282be585b90726739f4538c65945e5ddb", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -44,7 +44,6 @@\n \n #[cfg(not(no_global_oom_handling))]\n use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt;\n use core::hash;\n@@ -1941,7 +1940,6 @@ impl fmt::Display for FromUtf16Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for FromUtf8Error {\n     #[allow(deprecated)]\n@@ -1950,7 +1948,6 @@ impl Error for FromUtf8Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for FromUtf16Error {\n     #[allow(deprecated)]"}, {"sha": "a5322953d49217e98cc95797f6e2be3f44f64ec7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2764,7 +2764,6 @@ fn data_offset_align(align: usize) -> usize {\n     layout.size() + layout.padding_needed_for(align)\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"arc_error\", since = \"1.52.0\")]\n impl<T: core::error::Error + ?Sized> core::error::Error for Arc<T> {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "5bb44b4085962d9dfd3ad499b3e2163cb4fcc584", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -5,7 +5,6 @@\n // Your performance intuition is useless. Run perf.\n \n use crate::cmp;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::mem::{self, ValidAlign};\n@@ -463,7 +462,6 @@ pub type LayoutErr = LayoutError;\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LayoutError;\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl Error for LayoutError {}\n "}, {"sha": "a4bf6a853a65022bc0f9863e2d351838c69ee8e9", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -21,7 +21,6 @@ pub use self::layout::LayoutErr;\n #[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n pub use self::layout::LayoutError;\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::ptr::{self, NonNull};\n@@ -34,7 +33,6 @@ use crate::ptr::{self, NonNull};\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct AllocError;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\","}, {"sha": "b82bbf2267a963a02d470c5d03608e7bbd1cdb8d", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -7,7 +7,6 @@\n use crate::borrow::{Borrow, BorrowMut};\n use crate::cmp::Ordering;\n use crate::convert::{Infallible, TryFrom};\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::hash::{self, Hash};\n@@ -121,7 +120,6 @@ impl fmt::Display for TryFromSliceError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for TryFromSliceError {\n     #[allow(deprecated)]"}, {"sha": "11f1c30f6d55979752622d066b917c7356ef596f", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,6 +1,5 @@\n //! UTF-8 and UTF-16 decoding iterators\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -124,7 +123,6 @@ impl fmt::Display for DecodeUtf16Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for DecodeUtf16Error {\n     #[allow(deprecated)]"}, {"sha": "b34a7121631c176ecab7fd7ec4ff64b91ab10384", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -38,7 +38,6 @@ pub use self::methods::encode_utf16_raw;\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n pub use self::methods::encode_utf8_raw;\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n@@ -587,6 +586,5 @@ impl fmt::Display for TryFromCharError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n impl Error for TryFromCharError {}"}, {"sha": "c42adda8da5455e07e560add10b72e875c2def30", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -34,7 +34,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n@@ -724,7 +723,6 @@ impl fmt::Display for Infallible {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n impl Error for Infallible {\n     fn description(&self) -> &str {"}, {"sha": "12b43da5a428037bf4c39f2bdf21723ee241aedf", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -54,8 +54,6 @@\n )]\n #![allow(missing_docs)]\n \n-#[cfg(bootstrap)]\n-use crate::marker::Destruct;\n use crate::marker::DiscriminantKind;\n use crate::mem;\n \n@@ -1297,7 +1295,6 @@ extern \"rust-intrinsic\" {\n     /// any safety invariants.\n     ///\n     /// Consider using [`pointer::mask`] instead.\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n@@ -2022,17 +2019,8 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8;\n \n-    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(bootstrap)]\n-    pub fn ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;\n-\n-    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(bootstrap)]\n-    pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n-\n     /// Allocates a block of memory at compile time.\n     /// At runtime, just returns a null pointer.\n     ///\n@@ -2143,7 +2131,6 @@ extern \"rust-intrinsic\" {\n     /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n     /// which violates the principle that a `const fn` must behave the same at\n     /// compile-time and at run-time. The unsafe code in crate B is fine.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n     pub fn const_eval_select<ARG, F, G, RET>(arg: ARG, called_in_const: F, called_at_rt: G) -> RET\n     where\n@@ -2216,16 +2203,6 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n     diff >= size\n }\n \n-#[cfg(bootstrap)]\n-pub const fn ptr_guaranteed_cmp(a: *const (), b: *const ()) -> u8 {\n-    match (ptr_guaranteed_eq(a, b), ptr_guaranteed_ne(a, b)) {\n-        (false, false) => 2,\n-        (true, false) => 1,\n-        (false, true) => 0,\n-        (true, true) => unreachable!(),\n-    }\n-}\n-\n /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n /// and destination must *not* overlap.\n ///\n@@ -2484,45 +2461,3 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n         write_bytes(dst, val, count)\n     }\n }\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"const_eval_select\",\n-    issue = \"none\",\n-    reason = \"const_eval_select will never be stable\"\n-)]\n-#[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n-#[lang = \"const_eval_select\"]\n-#[rustc_do_not_const_check]\n-#[inline]\n-pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n-    arg: ARG,\n-    _called_in_const: F,\n-    called_at_rt: G,\n-) -> RET\n-where\n-    F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n-{\n-    called_at_rt.call_once(arg)\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"const_eval_select\",\n-    issue = \"none\",\n-    reason = \"const_eval_select will never be stable\"\n-)]\n-#[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n-#[lang = \"const_eval_select_ct\"]\n-pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n-    arg: ARG,\n-    called_in_const: F,\n-    _called_at_rt: G,\n-) -> RET\n-where\n-    F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n-{\n-    called_in_const.call_once(arg)\n-}"}, {"sha": "5690b5256e88c835293553d2d52f28f74758b316", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -310,7 +310,6 @@ pub mod clone;\n pub mod cmp;\n pub mod convert;\n pub mod default;\n-#[cfg(not(bootstrap))]\n pub mod error;\n pub mod marker;\n pub mod ops;"}, {"sha": "5cb5e4458cc68a18c16577d48bb16d5bd984196e", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -806,7 +806,7 @@ pub trait Destruct {}\n /// The implementation of this trait is built-in and cannot be implemented\n /// for any user type.\n #[unstable(feature = \"tuple_trait\", issue = \"none\")]\n-#[cfg_attr(not(bootstrap), lang = \"tuple_trait\")]\n+#[lang = \"tuple_trait\"]\n #[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n pub trait Tuple {}\n "}, {"sha": "3b98efff2938a104c2507aa0cfb999ac79d29b20", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -4,7 +4,7 @@\n /// any value of type `Self` are safely transmutable into a value of type `Dst`, in a given `Context`,\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[cfg_attr(not(bootstrap), lang = \"transmute_trait\")]\n+#[lang = \"transmute_trait\"]\n #[rustc_on_unimplemented(\n     message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n     label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n@@ -17,7 +17,7 @@ where\n \n /// What transmutation safety conditions shall the compiler assume that *you* are checking?\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[cfg_attr(not(bootstrap), lang = \"transmute_opts\")]\n+#[lang = \"transmute_opts\"]\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub struct Assume {\n     /// When `true`, the compiler assumes that *you* are ensuring (either dynamically or statically) that"}, {"sha": "768dd87816df763b6a1dada38760a5b10016f7d7", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n //! Error types for conversion to integral types.\n \n use crate::convert::Infallible;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -147,7 +146,6 @@ impl fmt::Display for ParseIntError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseIntError {\n     #[allow(deprecated)]\n@@ -156,7 +154,6 @@ impl Error for ParseIntError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for TryFromIntError {\n     #[allow(deprecated)]"}, {"sha": "c0be235c120bf6d65c5d22d7f60a6b9e584aa70c", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::intrinsics;\n use crate::mem;\n@@ -59,7 +58,6 @@ pub use wrapping::Wrapping;\n #[cfg(not(no_fp_fmt_parse))]\n pub use dec2flt::ParseFloatError;\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_fp_fmt_parse))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseFloatError {"}, {"sha": "fee4beb1e84bb029bf3a8a4c9b0573fe6ee16772", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -83,7 +83,6 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[cfg_attr(bootstrap, lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "33df9e6c5cd48658868149e9a7804dd494bb4e7a", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -223,7 +223,7 @@ pub trait Try: ~const FromResidual {\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n-#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+#[rustc_on_unimplemented(\n     on(\n         all(\n             from_desugaring = \"QuestionMark\",\n@@ -302,87 +302,7 @@ pub trait Try: ~const FromResidual {\n         label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n         parent_label = \"this function should return `Result` or `Option` to accept `?`\"\n     ),\n-))]\n-#[cfg_attr(bootstrap, rustc_on_unimplemented(\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::result::Result<T, E>\",\n-            R = \"std::option::Option<std::convert::Infallible>\"\n-        ),\n-        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n-            in {ItemContext} that returns `Result`\",\n-        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `Result`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::result::Result<T, E>\",\n-        ),\n-        // There's a special error message in the trait selection code for\n-        // `From` in `?`, so this is not shown for result-in-result errors,\n-        // and thus it can be phrased more strongly than `ControlFlow`'s.\n-        message = \"the `?` operator can only be used on `Result`s \\\n-            in {ItemContext} that returns `Result`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `Result`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::option::Option<T>\",\n-            R = \"std::result::Result<T, E>\",\n-        ),\n-        message = \"the `?` operator can only be used on `Option`s, not `Result`s, \\\n-            in {ItemContext} that returns `Option`\",\n-        label = \"use `.ok()?` if you want to discard the `{R}` error information\",\n-        enclosing_scope = \"this function returns an `Option`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::option::Option<T>\",\n-        ),\n-        // `Option`-in-`Option` always works, as there's only one possible\n-        // residual, so this can also be phrased strongly.\n-        message = \"the `?` operator can only be used on `Option`s \\\n-            in {ItemContext} that returns `Option`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns an `Option`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::ops::ControlFlow<B, C>\",\n-            R = \"std::ops::ControlFlow<B, C>\",\n-        ),\n-        message = \"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n-            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `ControlFlow`\",\n-        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::ops::ControlFlow<B, C>\",\n-            // `R` is not a `ControlFlow`, as that case was matched previously\n-        ),\n-        message = \"the `?` operator can only be used on `ControlFlow`s \\\n-            in {ItemContext} that returns `ControlFlow`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `ControlFlow`\",\n-    ),\n-    on(\n-        all(from_desugaring = \"QuestionMark\"),\n-        message = \"the `?` operator can only be used in {ItemContext} \\\n-                    that returns `Result` or `Option` \\\n-                    (or another type that implements `{FromResidual}`)\",\n-        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n-        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n-    ),\n-))]\n+)]\n #[rustc_diagnostic_item = \"FromResidual\"]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n #[const_trait]"}, {"sha": "d898108be580f3864499f9fdf2726fdca88a49e3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -568,7 +568,6 @@ impl<T: ?Sized> *const T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "543ab826c4eb90247bbf99a3641b7fc5dd3062e5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -584,7 +584,6 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "a11b5add42ebf06d29cd6e92908927e2e28e95d9", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,6 +1,5 @@\n //! Defines utf8 error type.\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -124,7 +123,6 @@ impl fmt::Display for Utf8Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for Utf8Error {\n     #[allow(deprecated)]\n@@ -148,7 +146,6 @@ impl fmt::Display for ParseBoolError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseBoolError {\n     #[allow(deprecated)]"}, {"sha": "fbc0fc397a5dfd0b1c41a546ba05af96bef6f970", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2642,5 +2642,4 @@ impl_fn_for_zst! {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(bootstrap))]\n impl !crate::error::Error for &str {}"}, {"sha": "d2db4bb7a46f5b0700aee34040ccce6c57d06d81", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -9,7 +9,6 @@ use crate::borrow::Borrow;\n use crate::cell::Cell;\n use crate::collections::TryReserveError;\n use crate::collections::TryReserveErrorKind;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n@@ -2160,7 +2159,6 @@ impl<'a, K: Debug, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: fmt::Debug, V: fmt::Debug> Error for OccupiedError<'a, K, V> {\n     #[allow(deprecated)]"}, {"sha": "05f8fd8de327f2afa0444b858d3ca35085e79252", "filename": "library/std/src/error.rs", "status": "modified", "additions": 0, "deletions": 1023, "changes": 1023, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -4,242 +4,12 @@\n #[cfg(test)]\n mod tests;\n \n-#[cfg(bootstrap)]\n-use core::array;\n-#[cfg(bootstrap)]\n-use core::convert::Infallible;\n-\n-#[cfg(bootstrap)]\n-use crate::alloc::{AllocError, LayoutError};\n-#[cfg(bootstrap)]\n-use crate::any::Demand;\n-#[cfg(bootstrap)]\n-use crate::any::{Provider, TypeId};\n use crate::backtrace::Backtrace;\n-#[cfg(bootstrap)]\n-use crate::borrow::Cow;\n-#[cfg(bootstrap)]\n-use crate::cell;\n-#[cfg(bootstrap)]\n-use crate::char;\n-#[cfg(bootstrap)]\n-use crate::fmt::Debug;\n-#[cfg(bootstrap)]\n-use crate::fmt::Display;\n use crate::fmt::{self, Write};\n-#[cfg(bootstrap)]\n-use crate::io;\n-#[cfg(bootstrap)]\n-use crate::mem::transmute;\n-#[cfg(bootstrap)]\n-use crate::num;\n-#[cfg(bootstrap)]\n-use crate::str;\n-#[cfg(bootstrap)]\n-use crate::string;\n-#[cfg(bootstrap)]\n-use crate::sync::Arc;\n-#[cfg(bootstrap)]\n-use crate::time;\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::error::Error;\n \n-/// `Error` is a trait representing the basic expectations for error values,\n-/// i.e., values of type `E` in [`Result<T, E>`].\n-///\n-/// Errors must describe themselves through the [`Display`] and [`Debug`]\n-/// traits. Error messages are typically concise lowercase sentences without\n-/// trailing punctuation:\n-///\n-/// ```\n-/// let err = \"NaN\".parse::<u32>().unwrap_err();\n-/// assert_eq!(err.to_string(), \"invalid digit found in string\");\n-/// ```\n-///\n-/// Errors may provide cause information. [`Error::source()`] is generally\n-/// used when errors cross \"abstraction boundaries\". If one module must report\n-/// an error that is caused by an error from a lower-level module, it can allow\n-/// accessing that error via [`Error::source()`]. This makes it possible for the\n-/// high-level module to provide its own errors while also revealing some of the\n-/// implementation for debugging.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n-#[cfg(bootstrap)]\n-pub trait Error: Debug + Display {\n-    /// The lower-level source of this error, if any.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperError {\n-    ///     source: SuperErrorSideKick,\n-    /// }\n-    ///\n-    /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperError is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperError {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         Some(&self.source)\n-    ///     }\n-    /// }\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperErrorSideKick;\n-    ///\n-    /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperErrorSideKick is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperErrorSideKick {}\n-    ///\n-    /// fn get_super_error() -> Result<(), SuperError> {\n-    ///     Err(SuperError { source: SuperErrorSideKick })\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     match get_super_error() {\n-    ///         Err(e) => {\n-    ///             println!(\"Error: {e}\");\n-    ///             println!(\"Caused by: {}\", e.source().unwrap());\n-    ///         }\n-    ///         _ => println!(\"No error\"),\n-    ///     }\n-    /// }\n-    /// ```\n-    #[stable(feature = \"error_source\", since = \"1.30.0\")]\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        None\n-    }\n-\n-    /// Gets the `TypeId` of `self`.\n-    #[doc(hidden)]\n-    #[unstable(\n-        feature = \"error_type_id\",\n-        reason = \"this is memory-unsafe to override in user code\",\n-        issue = \"60784\"\n-    )]\n-    fn type_id(&self, _: private::Internal) -> TypeId\n-    where\n-        Self: 'static,\n-    {\n-        TypeId::of::<Self>()\n-    }\n-\n-    /// ```\n-    /// if let Err(e) = \"xc\".parse::<u32>() {\n-    ///     // Print `e` itself, no need for description().\n-    ///     eprintln!(\"Error: {e}\");\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]\n-    fn description(&self) -> &str {\n-        \"description() is deprecated; use Display\"\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(\n-        since = \"1.33.0\",\n-        note = \"replaced by Error::source, which can support downcasting\"\n-    )]\n-    #[allow(missing_docs)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        self.source()\n-    }\n-\n-    /// Provides type based access to context intended for error reports.\n-    ///\n-    /// Used in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\n-    /// references to member variables from `dyn Error` trait objects.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// #![feature(provide_any)]\n-    /// #![feature(error_generic_member_access)]\n-    /// use core::fmt;\n-    /// use core::any::Demand;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct MyBacktrace {\n-    ///     // ...\n-    /// }\n-    ///\n-    /// impl MyBacktrace {\n-    ///     fn new() -> MyBacktrace {\n-    ///         // ...\n-    ///         # MyBacktrace {}\n-    ///     }\n-    /// }\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SourceError {\n-    ///     // ...\n-    /// }\n-    ///\n-    /// impl fmt::Display for SourceError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"Example Source Error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl std::error::Error for SourceError {}\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct Error {\n-    ///     source: SourceError,\n-    ///     backtrace: MyBacktrace,\n-    /// }\n-    ///\n-    /// impl fmt::Display for Error {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"Example Error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl std::error::Error for Error {\n-    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand\n-    ///             .provide_ref::<MyBacktrace>(&self.backtrace)\n-    ///             .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n-    ///     }\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     let backtrace = MyBacktrace::new();\n-    ///     let source = SourceError {};\n-    ///     let error = Error { source, backtrace };\n-    ///     let dyn_error = &error as &dyn std::error::Error;\n-    ///     let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n-    ///\n-    ///     assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    #[allow(unused_variables)]\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {}\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-impl<'b> Provider for dyn Error + 'b {\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-        self.provide(demand)\n-    }\n-}\n-\n mod private {\n     // This is a hack to prevent `type_id` from being overridden by `Error`\n     // implementations, since that can enable unsound downcasting.\n@@ -248,799 +18,6 @@ mod private {\n     pub struct Internal;\n }\n \n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n-    /// Converts a type of [`Error`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    /// use std::mem;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct AnError;\n-    ///\n-    /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"An error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for AnError {}\n-    ///\n-    /// let an_error = AnError;\n-    /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<dyn Error>::from(an_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: E) -> Box<dyn Error + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n-    /// dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    /// use std::mem;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct AnError;\n-    ///\n-    /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"An error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for AnError {}\n-    ///\n-    /// unsafe impl Send for AnError {}\n-    ///\n-    /// unsafe impl Sync for AnError {}\n-    ///\n-    /// let an_error = AnError;\n-    /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<String> for Box<dyn Error + Send + Sync> {\n-    /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    #[inline]\n-    fn from(err: String) -> Box<dyn Error + Send + Sync> {\n-        struct StringError(String);\n-\n-        impl Error for StringError {\n-            #[allow(deprecated)]\n-            fn description(&self) -> &str {\n-                &self.0\n-            }\n-        }\n-\n-        impl Display for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                Display::fmt(&self.0, f)\n-            }\n-        }\n-\n-        // Purposefully skip printing \"StringError(..)\"\n-        impl Debug for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                Debug::fmt(&self.0, f)\n-            }\n-        }\n-\n-        Box::new(StringError(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<String> for Box<dyn Error> {\n-    /// Converts a [`String`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_string_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(str_err: String) -> Box<dyn Error> {\n-        let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n-        let err2: Box<dyn Error> = err1;\n-        err2\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// [`str`]: prim@str\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    #[inline]\n-    fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<&str> for Box<dyn Error> {\n-    /// Converts a [`str`] into a box of dyn [`Error`].\n-    ///\n-    /// [`str`]: prim@str\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_str_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: &str) -> Box<dyn Error> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    /// use std::borrow::Cow;\n-    ///\n-    /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n-    /// Converts a [`Cow`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    /// use std::borrow::Cow;\n-    ///\n-    /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n-impl Error for ! {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"allocator_api\",\n-    reason = \"the precise API and guarantees it provides may be tweaked.\",\n-    issue = \"32838\"\n-)]\n-impl Error for AllocError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-impl Error for LayoutError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for str::ParseBoolError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"failed to parse bool\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for str::Utf8Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-8: corrupt contents\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for num::ParseIntError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for num::TryFromIntError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for array::TryFromSliceError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for num::ParseFloatError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for string::FromUtf8Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-8\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for string::FromUtf16Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-16\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl Error for Infallible {\n-    fn description(&self) -> &str {\n-        match *self {}\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n-impl Error for char::DecodeUtf16Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"unpaired surrogate found\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n-impl Error for char::TryFromCharError {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n-impl<'a, K: Debug + Ord, V: Debug> Error\n-    for crate::collections::btree_map::OccupiedError<'a, K, V>\n-{\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"key already exists\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n-impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedError<'a, K, V> {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"key already exists\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"box_error\", since = \"1.8.0\")]\n-impl<T: Error> Error for Box<T> {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"thin_box\", issue = \"92791\")]\n-impl<T: ?Sized + crate::error::Error> crate::error::Error for crate::boxed::ThinBox<T> {\n-    fn source(&self) -> Option<&(dyn crate::error::Error + 'static)> {\n-        use core::ops::Deref;\n-        self.deref().source()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n-impl<'a, T: Error + ?Sized> Error for &'a T {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-\n-    fn provide<'b>(&'b self, demand: &mut Demand<'b>) {\n-        Error::provide(&**self, demand);\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"arc_error\", since = \"1.52.0\")]\n-impl<T: Error + ?Sized> Error for Arc<T> {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-        Error::provide(&**self, demand);\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n-impl Error for fmt::Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"an error occurred when formatting an argument\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n-impl Error for cell::BorrowError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"already mutably borrowed\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n-impl Error for cell::BorrowMutError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"already borrowed\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for char::CharTryFromError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"converted integer out of range for `char`\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n-impl Error for char::ParseCharError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n-impl Error for alloc::collections::TryReserveError {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-impl Error for time::FromFloatSecsError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for alloc::ffi::NulError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"nul byte found in data\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<alloc::ffi::NulError> for io::Error {\n-    /// Converts a [`alloc::ffi::NulError`] into a [`io::Error`].\n-    fn from(_: alloc::ffi::NulError) -> io::Error {\n-        io::const_io_error!(io::ErrorKind::InvalidInput, \"data provided contains a nul byte\")\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n-impl Error for core::ffi::FromBytesWithNulError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-impl Error for core::ffi::FromBytesUntilNulError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n-impl Error for alloc::ffi::FromVecWithNulError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n-impl Error for alloc::ffi::IntoStringError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"C string contained non-utf8 bytes\"\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Some(self.__source())\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl<'a> dyn Error + 'a {\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&'a self) -> Option<&'a T> {\n-        core::any::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&'a self) -> Option<T> {\n-        core::any::request_value(self)\n-    }\n-}\n-\n-// Copied from `any.rs`.\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static {\n-    /// Returns `true` if the inner type is the same as `T`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        // Get `TypeId` of the type this function is instantiated with.\n-        let t = TypeId::of::<T>();\n-\n-        // Get `TypeId` of the type in the trait object (`self`).\n-        let concrete = self.type_id(private::Internal);\n-\n-        // Compare both `TypeId`s on equality.\n-        t == concrete\n-    }\n-\n-    /// Returns some reference to the inner value if it is of type `T`, or\n-    /// `None` if it isn't.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        if self.is::<T>() {\n-            unsafe { Some(&*(self as *const dyn Error as *const T)) }\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Returns some mutable reference to the inner value if it is of type `T`, or\n-    /// `None` if it isn't.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        if self.is::<T>() {\n-            unsafe { Some(&mut *(self as *mut dyn Error as *mut T)) }\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static + Send {\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        <dyn Error + 'static>::is::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::downcast_ref::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <dyn Error + 'static>::downcast_mut::<T>(self)\n-    }\n-\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error>::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error>::request_value(self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static + Send + Sync {\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        <dyn Error + 'static>::is::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::downcast_ref::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <dyn Error + 'static>::downcast_mut::<T>(self)\n-    }\n-\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error>::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error>::request_value(self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                let raw: *mut dyn Error = Box::into_raw(self);\n-                Ok(Box::from_raw(raw as *mut T))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-\n-    /// Returns an iterator starting with the current error and continuing with\n-    /// recursively calling [`Error::source`].\n-    ///\n-    /// If you want to omit the current error and only use its sources,\n-    /// use `skip(1)`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(error_iter)]\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct A;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct B(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"A\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"B\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for A {}\n-    ///\n-    /// impl Error for B {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// let b = B(Some(Box::new(A)));\n-    ///\n-    /// // let err : Box<Error> = b.into(); // or\n-    /// let err = &b as &(dyn Error);\n-    ///\n-    /// let mut iter = err.sources();\n-    ///\n-    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n-    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n-    /// assert!(iter.next().is_none());\n-    /// assert!(iter.next().is_none());\n-    /// ```\n-    #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-    #[inline]\n-    pub fn sources(&self) -> Sources<'_> {\n-        // You may think this method would be better in the Error trait, and you'd be right.\n-        // Unfortunately that doesn't work, not because of the object safety rules but because we\n-        // save a reference to self in Sources below as a trait object. If this method was\n-        // declared in Error, then self would have the type &T where T is some concrete type which\n-        // implements Error. We would need to coerce self to have type &dyn Error, but that requires\n-        // that Self has a known size (i.e., Self: Sized). We can't put that bound on Error\n-        // since that would forbid Error trait objects, and we can't put that bound on the method\n-        // because that means the method can't be called on trait objects (we'd also need the\n-        // 'static bound, but that isn't allowed because methods with bounds on Self other than\n-        // Sized are not object-safe). Requiring an Unsize bound is not backwards compatible.\n-\n-        Sources { current: Some(self) }\n-    }\n-}\n-\n-/// An iterator over an [`Error`] and its sources.\n-///\n-/// If you want to omit the initial error and only process\n-/// its sources, use `skip(1)`.\n-#[unstable(feature = \"error_iter\", issue = \"58520\")]\n-#[derive(Clone, Debug)]\n-#[cfg(bootstrap)]\n-pub struct Sources<'a> {\n-    current: Option<&'a (dyn Error + 'static)>,\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"error_iter\", issue = \"58520\")]\n-impl<'a> Iterator for Sources<'a> {\n-    type Item = &'a (dyn Error + 'static);\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        let current = self.current;\n-        self.current = self.current.and_then(Error::source);\n-        current\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + Send {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error + Send>> {\n-        let err: Box<dyn Error> = self;\n-        <dyn Error>::downcast(err).map_err(|s| unsafe {\n-            // Reapply the `Send` marker.\n-            transmute::<Box<dyn Error>, Box<dyn Error + Send>>(s)\n-        })\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + Send + Sync {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Self>> {\n-        let err: Box<dyn Error> = self;\n-        <dyn Error>::downcast(err).map_err(|s| unsafe {\n-            // Reapply the `Send + Sync` marker.\n-            transmute::<Box<dyn Error>, Box<dyn Error + Send + Sync>>(s)\n-        })\n-    }\n-}\n-\n /// An error reporter that prints an error and its sources.\n ///\n /// Report also exposes configuration options for formatting the error sources, either entirely on a"}, {"sha": "feb3fb989a7ac80621c1543900a1b28b1b3de319", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -76,7 +76,6 @@ impl fmt::Debug for Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<alloc::ffi::NulError> for Error {\n     /// Converts a [`alloc::ffi::NulError`] into a [`Error`]."}, {"sha": "c2b7a4d8648d06ae060a0ed2708c391bf4c161f6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -252,10 +252,8 @@\n #![feature(dropck_eyepatch)]\n #![feature(exhaustive_patterns)]\n #![feature(intra_doc_pointers)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(lang_items)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(linkage)]\n #![feature(link_cfg)]\n #![feature(min_specialization)]\n@@ -282,9 +280,9 @@\n #![feature(cstr_internals)]\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]\n-#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n-#![cfg_attr(not(bootstrap), feature(error_in_core))]\n-#![cfg_attr(not(bootstrap), feature(error_iter))]\n+#![feature(error_generic_member_access)]\n+#![feature(error_in_core)]\n+#![feature(error_iter)]\n #![feature(exact_size_is_empty)]\n #![feature(exclusive_wrapper)]\n #![feature(extend_one)]"}, {"sha": "b8bcdbece0af3d0ed522626b4333173367cc602c", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -160,15 +160,12 @@ fn lang_start<T: crate::process::Termination + 'static>(\n     main: fn() -> T,\n     argc: isize,\n     argv: *const *const u8,\n-    #[cfg(not(bootstrap))] sigpipe: u8,\n+    sigpipe: u8,\n ) -> isize {\n     let Ok(v) = lang_start_internal(\n         &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report().to_i32(),\n         argc,\n         argv,\n-        #[cfg(bootstrap)]\n-        2, // Temporary inlining of sigpipe::DEFAULT until bootstrap stops being special\n-        #[cfg(not(bootstrap))]\n         sigpipe,\n     );\n     v"}, {"sha": "f06d2cf108de30c05527bb4a1f6285ab16a6caa1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -2535,7 +2535,6 @@ mod size_asserts {\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(GenericArg, 56);\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);"}, {"sha": "23e3de45fa5106f322b0963057110f594f9309d1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -9,14 +9,12 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(test)]\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "fcbe5a2b90a97d64d2b3a046a72996a4c8af3727", "filename": "src/test/mir-opt/issue-101867.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftest%2Fmir-opt%2Fissue-101867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftest%2Fmir-opt%2Fissue-101867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-101867.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(bootstrap, feature(let_else))]\n \n // EMIT_MIR issue_101867.main.mir_map.0.mir\n fn main() {"}, {"sha": "a3921b8033fc01d3bdd45c79ab2bc1fb7a9f00bd", "filename": "src/test/ui/let-else/const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // issue #101932\n \n-#![cfg_attr(bootstrap, feature(let_else))]\n \n const fn foo(a: Option<i32>) -> i32 {\n     let Some(a) = a else {"}, {"sha": "80bb83af43b19106469fbee7523e575bf7e9543d", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -1,5 +1,4 @@\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]"}, {"sha": "00bf6445c12d2fea1f489d73c0f49568339a3dbb", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -5,7 +5,6 @@\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "b1abd3b04c92996c1fbcee585f04df9e7dc40b00", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975d55d9888392cd738708b914442de9ac2bff5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=3975d55d9888392cd738708b914442de9ac2bff5", "patch": "@@ -3,7 +3,6 @@\n #![feature(control_flow_enum)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]"}]}