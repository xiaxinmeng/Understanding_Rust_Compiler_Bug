{"sha": "25320da099e375be22706b641eba35b7e35299e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzIwZGEwOTllMzc1YmUyMjcwNmI2NDFlYmEzNWI3ZTM1Mjk5ZTA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-07T16:12:21Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-07T16:12:21Z"}, "message": "Run optimizations.\n\nIt is always on for now just to make sure the bots are happy. If they\nare, I will add a -O option and update the makefile.", "tree": {"sha": "3da6433605ad2267391cf2546f1c4bdfbfb30823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da6433605ad2267391cf2546f1c4bdfbfb30823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25320da099e375be22706b641eba35b7e35299e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25320da099e375be22706b641eba35b7e35299e0", "html_url": "https://github.com/rust-lang/rust/commit/25320da099e375be22706b641eba35b7e35299e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25320da099e375be22706b641eba35b7e35299e0/comments", "author": null, "committer": null, "parents": [{"sha": "2e90bd94de32c739733966bfac96cf35e9a08655", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e90bd94de32c739733966bfac96cf35e9a08655", "html_url": "https://github.com/rust-lang/rust/commit/2e90bd94de32c739733966bfac96cf35e9a08655"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "047059240b3a4a2282a4eec29e4aada2c02f2060", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25320da099e375be22706b641eba35b7e35299e0/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25320da099e375be22706b641eba35b7e35299e0/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=25320da099e375be22706b641eba35b7e35299e0", "patch": "@@ -741,6 +741,40 @@ native mod llvm = llvm_lib {\n     /** Adds a verification pass. */\n     fn LLVMAddVerifierPass(PassManagerRef PM);\n \n+    fn LLVMAddGlobalOptimizerPass(PassManagerRef PM);\n+    fn LLVMAddIPSCCPPass(PassManagerRef PM);\n+    fn LLVMAddDeadArgEliminationPass(PassManagerRef PM);\n+    fn LLVMAddInstructionCombiningPass(PassManagerRef PM);\n+    fn LLVMAddCFGSimplificationPass(PassManagerRef PM);\n+    fn LLVMAddFunctionInliningPass(PassManagerRef PM);\n+    fn LLVMAddFunctionAttrsPass(PassManagerRef PM);\n+    fn LLVMAddScalarReplAggregatesPass(PassManagerRef PM);\n+    // fn LLVMAddScalarReplAggregatesPassSSA(PassManagerRef PM);\n+    fn LLVMAddJumpThreadingPass(PassManagerRef PM);\n+    fn LLVMAddConstantPropagationPass(PassManagerRef PM);\n+    fn LLVMAddReassociatePass(PassManagerRef PM);\n+    fn LLVMAddLoopRotatePass(PassManagerRef PM);\n+    fn LLVMAddLICMPass(PassManagerRef PM);\n+    fn LLVMAddLoopUnswitchPass(PassManagerRef PM);\n+    fn LLVMAddLoopDeletionPass(PassManagerRef PM);\n+    fn LLVMAddLoopUnrollPass(PassManagerRef PM);\n+    fn LLVMAddGVNPass(PassManagerRef PM);\n+    fn LLVMAddMemCpyOptPass(PassManagerRef PM);\n+    fn LLVMAddSCCPPass(PassManagerRef PM);\n+    fn LLVMAddDeadStoreEliminationPass(PassManagerRef PM);\n+    fn LLVMAddStripDeadPrototypesPass(PassManagerRef PM);\n+    fn LLVMAddDeadTypeEliminationPass(PassManagerRef PM);\n+    fn LLVMAddConstantMergePass(PassManagerRef PM);\n+    fn LLVMAddArgumentPromotionPass(PassManagerRef PM);\n+    fn LLVMAddTailCallEliminationPass(PassManagerRef PM);\n+    fn LLVMAddIndVarSimplifyPass(PassManagerRef PM);\n+    fn LLVMAddAggressiveDCEPass(PassManagerRef PM);\n+    fn LLVMAddGlobalDCEPass(PassManagerRef PM);\n+    // fn LLVMAddCorrelatedValuePropagationPass(PassManagerRef PM);\n+    fn LLVMAddPruneEHPass(PassManagerRef PM);\n+    fn LLVMAddSimplifyLibCallsPass(PassManagerRef PM);\n+    // fn LLVMAddLoopIdiomPass(PassManagerRef PM);\n+\n     /** Destroys a memory buffer. */\n     fn LLVMDisposeMemoryBuffer(MemoryBufferRef MemBuf);\n "}, {"sha": "c5375a9f8bbd2ec4e9b21d26104079fc32781f53", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/25320da099e375be22706b641eba35b7e35299e0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25320da099e375be22706b641eba35b7e35299e0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=25320da099e375be22706b641eba35b7e35299e0", "patch": "@@ -6599,12 +6599,71 @@ fn trap(@block_ctxt bcx) {\n     bcx.build.Call(bcx.fcx.ccx.intrinsics.get(\"llvm.trap\"), v);\n }\n \n-fn check_module(ModuleRef llmod) {\n+fn run_passes(ModuleRef llmod, bool opt) {\n     auto pm = mk_pass_manager();\n-    llvm.LLVMAddVerifierPass(pm.llpm);\n-    llvm.LLVMRunPassManager(pm.llpm, llmod);\n \n     // TODO: run the linter here also, once there are llvm-c bindings for it.\n+\n+    // FIXME: This is mostly a copy of the bits of opt's -O2 that are\n+    // available in the C api.\n+    // FIXME2: We might want to add optmization levels like -O1, -O2, -Os, etc\n+    // FIXME3: Should we expose and use the pass lists used by the opt tool?\n+    if (opt) {\n+        auto fpm = mk_pass_manager();\n+\n+        // createStandardFunctionPasses\n+        llvm.LLVMAddCFGSimplificationPass(fpm.llpm);\n+        llvm.LLVMAddScalarReplAggregatesPass(fpm.llpm);\n+        //llvm.LLVMAddEarlyCSEPass(fpm.llpm);\n+\n+        llvm.LLVMRunPassManager(fpm.llpm, llmod);\n+\n+        // createStandardModulePasses\n+        llvm.LLVMAddGlobalOptimizerPass(pm.llpm);\n+        llvm.LLVMAddIPSCCPPass(pm.llpm);\n+        llvm.LLVMAddDeadArgEliminationPass(pm.llpm);\n+        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+        llvm.LLVMAddPruneEHPass(pm.llpm);\n+        llvm.LLVMAddFunctionInliningPass(pm.llpm);\n+\n+        // FIXME: crashes!\n+        // llvm.LLVMAddFunctionAttrsPass(pm.llpm);\n+\n+        // llvm.LLVMAddScalarReplAggregatesPassSSA(pm.llpm);\n+        // llvm.LLVMAddEarlyCSEPass(pm.llpm);\n+        llvm.LLVMAddSimplifyLibCallsPass(pm.llpm);\n+        llvm.LLVMAddJumpThreadingPass(pm.llpm);\n+        // llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n+        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+        llvm.LLVMAddTailCallEliminationPass(pm.llpm);\n+        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+        llvm.LLVMAddReassociatePass(pm.llpm);\n+        llvm.LLVMAddLoopRotatePass(pm.llpm);\n+        llvm.LLVMAddLICMPass(pm.llpm);\n+        llvm.LLVMAddLoopUnswitchPass(pm.llpm);\n+        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+        llvm.LLVMAddIndVarSimplifyPass(pm.llpm);\n+        // llvm.LLVMAddLoopIdiomPass(pm.llpm);\n+        llvm.LLVMAddLoopDeletionPass(pm.llpm);\n+        llvm.LLVMAddLoopUnrollPass(pm.llpm);\n+        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+        llvm.LLVMAddGVNPass(pm.llpm);\n+        llvm.LLVMAddMemCpyOptPass(pm.llpm);\n+        llvm.LLVMAddSCCPPass(pm.llpm);\n+        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+        llvm.LLVMAddJumpThreadingPass(pm.llpm);\n+        // llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n+        llvm.LLVMAddDeadStoreEliminationPass(pm.llpm);\n+        llvm.LLVMAddAggressiveDCEPass(pm.llpm);\n+        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+        llvm.LLVMAddStripDeadPrototypesPass(pm.llpm);\n+        llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n+        llvm.LLVMAddConstantMergePass(pm.llpm);\n+    }\n+    llvm.LLVMAddVerifierPass(pm.llpm);\n+    llvm.LLVMRunPassManager(pm.llpm, llmod);\n }\n \n fn decl_no_op_type_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n@@ -6962,7 +7021,8 @@ fn make_common_glue(str output) {\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    check_module(llmod);\n+    run_passes(llmod, true);\n+\n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);\n }\n@@ -7031,7 +7091,8 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     // Translate the metadata.\n     middle.metadata.write_metadata(cx, crate);\n \n-    check_module(llmod);\n+    // FIXME: Add an -O option\n+    run_passes(llmod, true);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);"}]}