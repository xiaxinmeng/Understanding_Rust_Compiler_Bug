{"sha": "4f3062c88e588211cb6ca109b22941f921938c3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzA2MmM4OGU1ODgyMTFjYjZjYTEwOWIyMjk0MWY5MjE5MzhjM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-02T03:39:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-02T03:39:27Z"}, "message": "Auto merge of #43603 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #43389, #43423, #43581, #43585, #43597, #43598\n- Failed merges:", "tree": {"sha": "9474f536d78ed831c100d783ff0cbbf8f9ed4349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9474f536d78ed831c100d783ff0cbbf8f9ed4349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3062c88e588211cb6ca109b22941f921938c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3062c88e588211cb6ca109b22941f921938c3e", "html_url": "https://github.com/rust-lang/rust/commit/4f3062c88e588211cb6ca109b22941f921938c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3062c88e588211cb6ca109b22941f921938c3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f58d0298506004ad0e6b0df748cad52d0fd24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f58d0298506004ad0e6b0df748cad52d0fd24c", "html_url": "https://github.com/rust-lang/rust/commit/f5f58d0298506004ad0e6b0df748cad52d0fd24c"}, {"sha": "368f1a8e9366274585a3fa8373e7945a24996a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/368f1a8e9366274585a3fa8373e7945a24996a77", "html_url": "https://github.com/rust-lang/rust/commit/368f1a8e9366274585a3fa8373e7945a24996a77"}], "stats": {"total": 120, "additions": 89, "deletions": 31}, "files": [{"sha": "21b5557db99f27325ee83a82ce0f2afba123cd14", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -188,6 +188,34 @@ use ptr;\n \n /// A mutable memory location.\n ///\n+/// # Examples\n+///\n+/// Here you can see how using `Cell<T>` allows to use mutable field inside\n+/// immutable struct (which is also called 'interior mutability').\n+///\n+/// ```\n+/// use std::cell::Cell;\n+///\n+/// struct SomeStruct {\n+///     regular_field: u8,\n+///     special_field: Cell<u8>,\n+/// }\n+///\n+/// let my_struct = SomeStruct {\n+///     regular_field: 0,\n+///     special_field: Cell::new(1),\n+/// };\n+///\n+/// let new_value = 100;\n+///\n+/// // ERROR, because my_struct is immutable\n+/// // my_struct.regular_field = new_value;\n+///\n+/// // WORKS, although `my_struct` is immutable, field `special_field` is mutable because it is Cell\n+/// my_struct.special_field.set(new_value);\n+/// assert_eq!(my_struct.special_field.get(), new_value);\n+/// ```\n+///\n /// See the [module-level documentation](index.html) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cell<T> {"}, {"sha": "f245b1503dab8dc214c6bf72c6d54d8db45cb980", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -174,7 +174,7 @@ pub struct AssociatedItem {\n     pub method_has_self_argument: bool,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, RustcEncodable, RustcDecodable)]\n pub enum AssociatedKind {\n     Const,\n     Method,"}, {"sha": "f74af6ee1632e793f8f6fef0922f9262443e2eb1", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -134,9 +134,11 @@ pub trait BitwiseOperator {\n \n pub struct Union;\n impl BitwiseOperator for Union {\n+    #[inline]\n     fn join(&self, a: usize, b: usize) -> usize { a | b }\n }\n pub struct Subtract;\n impl BitwiseOperator for Subtract {\n+    #[inline]\n     fn join(&self, a: usize, b: usize) -> usize { a & !b }\n }"}, {"sha": "0b24e55541b07269f52f3f41d5e924c834d6cb74", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -39,14 +39,14 @@ impl ArchiveRO {\n     ///\n     /// If this archive is used with a mutable method, then an error will be\n     /// raised.\n-    pub fn open(dst: &Path) -> Option<ArchiveRO> {\n+    pub fn open(dst: &Path) -> Result<ArchiveRO, String> {\n         return unsafe {\n             let s = path2cstr(dst);\n             let ar = ::LLVMRustOpenArchive(s.as_ptr());\n             if ar.is_null() {\n-                None\n+                Err(::last_error().unwrap_or(\"failed to open archive\".to_string()))\n             } else {\n-                Some(ArchiveRO { ptr: ar })\n+                Ok(ArchiveRO { ptr: ar })\n             }\n         };\n "}, {"sha": "6ec40bd689c23eb963a6ee93679d0d710a2d5c33", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -126,7 +126,7 @@ impl<'a> ArchiveBuilder<'a> {\n             Some(ref src) => src,\n             None => return None,\n         };\n-        self.src_archive = Some(ArchiveRO::open(src));\n+        self.src_archive = Some(ArchiveRO::open(src).ok());\n         self.src_archive.as_ref().unwrap().as_ref()\n     }\n \n@@ -186,9 +186,8 @@ impl<'a> ArchiveBuilder<'a> {\n         where F: FnMut(&str) -> bool + 'static\n     {\n         let archive = match ArchiveRO::open(archive) {\n-            Some(ar) => ar,\n-            None => return Err(io::Error::new(io::ErrorKind::Other,\n-                                              \"failed to open archive\")),\n+            Ok(ar) => ar,\n+            Err(e) => return Err(io::Error::new(io::ErrorKind::Other, e)),\n         };\n         self.additions.push(Addition::Archive {\n             archive: archive,"}, {"sha": "883808c59091a02d60e45f7308fc41af46d6ce08", "filename": "src/librustc_trans/metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_trans%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibrustc_trans%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmetadata.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -31,21 +31,21 @@ impl MetadataLoader for LlvmMetadataLoader {\n         // just keeping the archive along while the metadata is in use.\n         let archive = ArchiveRO::open(filename)\n             .map(|ar| OwningRef::new(box ar))\n-            .ok_or_else(|| {\n-                            debug!(\"llvm didn't like `{}`\", filename.display());\n-                            format!(\"failed to read rlib metadata: '{}'\", filename.display())\n-                        })?;\n+            .map_err(|e| {\n+                debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n+                format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n+            })?;\n         let buf: OwningRef<_, [u8]> = archive\n             .try_map(|ar| {\n                 ar.iter()\n                     .filter_map(|s| s.ok())\n                     .find(|sect| sect.name() == Some(METADATA_FILENAME))\n                     .map(|s| s.data())\n                     .ok_or_else(|| {\n-                                    debug!(\"didn't find '{}' in the archive\", METADATA_FILENAME);\n-                                    format!(\"failed to read rlib metadata: '{}'\",\n-                                            filename.display())\n-                                })\n+                        debug!(\"didn't find '{}' in the archive\", METADATA_FILENAME);\n+                        format!(\"failed to read rlib metadata: '{}'\",\n+                                filename.display())\n+                    })\n             })?;\n         Ok(buf.erase_owner())\n     }"}, {"sha": "80a223c7d74eaae6dcf72231c747749c063afe4b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -123,13 +123,13 @@ pub struct HashSet<T, S = RandomState> {\n }\n \n impl<T: Hash + Eq> HashSet<T, RandomState> {\n-    /// Creates an empty HashSet.\n+    /// Creates an empty `HashSet`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let mut set: HashSet<i32> = HashSet::new();\n+    /// let set: HashSet<i32> = HashSet::new();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -146,7 +146,8 @@ impl<T: Hash + Eq> HashSet<T, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let mut set: HashSet<i32> = HashSet::with_capacity(10);\n+    /// let set: HashSet<i32> = HashSet::with_capacity(10);\n+    /// assert!(set.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -215,6 +216,17 @@ impl<T, S> HashSet<T, S>\n     /// Returns a reference to the set's [`BuildHasher`].\n     ///\n     /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let hasher = RandomState::new();\n+    /// let set: HashSet<i32> = HashSet::with_hasher(hasher);\n+    /// let hasher: &RandomState = set.hasher();\n+    /// ```\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n@@ -249,6 +261,7 @@ impl<T, S> HashSet<T, S>\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<i32> = HashSet::new();\n     /// set.reserve(10);\n+    /// assert!(set.capacity() >= 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n@@ -312,13 +325,13 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x); // Print 1\n     /// }\n     ///\n-    /// let diff: HashSet<_> = a.difference(&b).cloned().collect();\n-    /// assert_eq!(diff, [1].iter().cloned().collect());\n+    /// let diff: HashSet<_> = a.difference(&b).collect();\n+    /// assert_eq!(diff, [1].iter().collect());\n     ///\n     /// // Note that difference is not symmetric,\n     /// // and `b - a` means something else:\n-    /// let diff: HashSet<_> = b.difference(&a).cloned().collect();\n-    /// assert_eq!(diff, [4].iter().cloned().collect());\n+    /// let diff: HashSet<_> = b.difference(&a).collect();\n+    /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n@@ -343,11 +356,11 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let diff1: HashSet<_> = a.symmetric_difference(&b).cloned().collect();\n-    /// let diff2: HashSet<_> = b.symmetric_difference(&a).cloned().collect();\n+    /// let diff1: HashSet<_> = a.symmetric_difference(&b).collect();\n+    /// let diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n     ///\n     /// assert_eq!(diff1, diff2);\n-    /// assert_eq!(diff1, [1, 4].iter().cloned().collect());\n+    /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(&'a self,\n@@ -371,8 +384,8 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let intersection: HashSet<_> = a.intersection(&b).cloned().collect();\n-    /// assert_eq!(intersection, [2, 3].iter().cloned().collect());\n+    /// let intersection: HashSet<_> = a.intersection(&b).collect();\n+    /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n@@ -397,8 +410,8 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let union: HashSet<_> = a.union(&b).cloned().collect();\n-    /// assert_eq!(union, [1, 2, 3, 4].iter().cloned().collect());\n+    /// let union: HashSet<_> = a.union(&b).collect();\n+    /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n@@ -440,6 +453,22 @@ impl<T, S> HashSet<T, S>\n     }\n \n     /// Clears the set, returning all elements in an iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert!(!set.is_empty());\n+    ///\n+    /// // print 1, 2, 3 in an arbitrary order\n+    /// for i in set.drain() {\n+    ///     println!(\"{}\", i);\n+    /// }\n+    ///\n+    /// assert!(set.is_empty());\n+    /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {"}, {"sha": "5a813c5c76bcaea3a24f2e1f0e0339f956799995", "filename": "src/libstd/os/solaris/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3062c88e588211cb6ca109b22941f921938c3e/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=4f3062c88e588211cb6ca109b22941f921938c3e", "patch": "@@ -32,7 +32,7 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub type pthread_t = usize;\n+pub type pthread_t = u32;\n \n #[repr(C)]\n #[derive(Clone)]"}]}