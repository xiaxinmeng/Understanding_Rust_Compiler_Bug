{"sha": "8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZGRlNmRiNzEzOGNmMjM2NWRkOWNlYjViODgxNGU5MmE5MjJlZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T08:33:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T08:33:23Z"}, "message": "Auto merge of #47012 - kennytm:rollup, r=kennytm\n\nRollup of 8 pull requests\n\n- Successful merges: #46928, #46930, #46933, #46939, #46940, #46943, #46979, #46986\n- Failed merges:", "tree": {"sha": "aad9e413ba076d65f76caa417f60d1e601238d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad9e413ba076d65f76caa417f60d1e601238d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "html_url": "https://github.com/rust-lang/rust/commit/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e83f3c968a3c3e4c2e3d0150cfef7d9a97413c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e83f3c968a3c3e4c2e3d0150cfef7d9a97413c2", "html_url": "https://github.com/rust-lang/rust/commit/2e83f3c968a3c3e4c2e3d0150cfef7d9a97413c2"}, {"sha": "6b1aa5301ff53be75cc4924f7a5f8b10feb5d698", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1aa5301ff53be75cc4924f7a5f8b10feb5d698", "html_url": "https://github.com/rust-lang/rust/commit/6b1aa5301ff53be75cc4924f7a5f8b10feb5d698"}], "stats": {"total": 226, "additions": 212, "deletions": 14}, "files": [{"sha": "cec891b4ee50291d36ee1aa86e4be4330a6105c9", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -12,13 +12,13 @@ A version of this document [can be found online](https://www.rust-lang.org/condu\n * Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n * Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n * We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behaviour. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n-* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team](/team.html#Moderation) immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n+* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n * Likewise any spamming, trolling, flaming, baiting or other attention-stealing behaviour is not welcome.\n \n ## Moderation\n \n \n-These are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Rust moderation team](/team.html#Moderation).\n+These are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Rust moderation team][mod_team].\n \n 1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n 2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n@@ -36,3 +36,5 @@ And if someone takes issue with something you said or did, resist the urge to be\n The enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n \n *Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](http://contributor-covenant.org/version/1/3/0/).*\n+\n+[mod_team]: https://www.rust-lang.org/team.html#Moderation-team"}, {"sha": "dc055b583c568d01c1cb456f783e69ffd8d1ebbd", "filename": "src/etc/platform-intrinsics/x86/avx2.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -174,7 +174,7 @@\n             \"intrinsic\": \"256_sad_epu8\",\n             \"width\": [256],\n             \"llvm\": \"psad.bw\",\n-            \"ret\": \"u8\",\n+            \"ret\": \"u64\",\n             \"args\": [\"0\", \"0\"]\n         },\n         {"}, {"sha": "ab574c9f7e769cb5d61864d751cf176a15cc40e3", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -699,7 +699,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_at(self, mid)\n     }\n \n-    /// Divides one `&mut` into two at an index.\n+    /// Divides one mutable slice into two at an index.\n     ///\n     /// The first will contain all indices from `[0, mid)` (excluding\n     /// the index `mid` itself) and the second will contain all"}, {"sha": "7f758f2a23b19144b6faf54af535542a1c18ad4f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for 32-bits floats (`f32` type)\n+//! This module provides constants which are specific to the implementation\n+//! of the `f32` floating point data type.\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "b9db4990a7e5f4c655a83cbed43c7fb7eb159a07", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for 64-bits floats (`f64` type)\n+//! This module provides constants which are specific to the implementation\n+//! of the `f64` floating point data type.\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "b89aa134e7344cf0b67586bb1f0e325b17291d02", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -103,6 +103,8 @@ macro_rules! int_impl {\n         ///\n         /// # Examples\n         ///\n+        /// Basic usage:\n+        ///\n         /// ```\n         /// assert_eq!(i8::min_value(), -128);\n         /// ```\n@@ -116,6 +118,8 @@ macro_rules! int_impl {\n         ///\n         /// # Examples\n         ///\n+        /// Basic usage:\n+        ///\n         /// ```\n         /// assert_eq!(i8::max_value(), 127);\n         /// ```\n@@ -1252,6 +1256,8 @@ macro_rules! uint_impl {\n         ///\n         /// # Examples\n         ///\n+        /// Basic usage:\n+        ///\n         /// ```\n         /// assert_eq!(u8::min_value(), 0);\n         /// ```\n@@ -1263,6 +1269,8 @@ macro_rules! uint_impl {\n         ///\n         /// # Examples\n         ///\n+        /// Basic usage:\n+        ///\n         /// ```\n         /// assert_eq!(u8::max_value(), 255);\n         /// ```"}, {"sha": "68f8098709c439aa9873d786559227372264b1e3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -1896,7 +1896,7 @@ pub struct GeneratorLayout<'tcx> {\n ///\n /// Example: If type check produces a closure with the closure substs:\n ///\n-/// ```\n+/// ```text\n /// ClosureSubsts = [\n ///     i8,                                  // the \"closure kind\"\n ///     for<'x> fn(&'a &'x u32) -> &'x u32,  // the \"closure signature\"\n@@ -1907,7 +1907,7 @@ pub struct GeneratorLayout<'tcx> {\n /// here, there is one unique free region (`'a`) but it appears\n /// twice. We would \"renumber\" each occurence to a unique vid, as follows:\n ///\n-/// ```\n+/// ```text\n /// ClosureSubsts = [\n ///     i8,                                  // the \"closure kind\"\n ///     for<'x> fn(&'1 &'x u32) -> &'x u32,  // the \"closure signature\""}, {"sha": "d5e8194c3f79b9bda698b9ce04e9eb90a489552d", "filename": "src/librustc_back/target/aarch64_unknown_cloudabi.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::cloudabi_base::opts();\n+    base.max_atomic_width = Some(128);\n+    base.abi_blacklist = super::arm_base::abi_blacklist();\n+\n+    Ok(Target {\n+        llvm_target: \"aarch64-unknown-cloudabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"cloudabi\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "4dad8e1713b432811570a0764d0566b1f6764286", "filename": "src/librustc_back/target/armv7_unknown_cloudabi_eabihf.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::cloudabi_base::opts();\n+    base.cpu = \"cortex-a8\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.features = \"+v7,+vfp3,+neon\".to_string();\n+    base.abi_blacklist = super::arm_base::abi_blacklist();\n+\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"cloudabi\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "c29130bdf8e9619955432a33dad24230264ed552", "filename": "src/librustc_back/target/cloudabi_base.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        \"-Wl,-Bstatic\".to_string(),\n+        \"-Wl,--no-dynamic-linker\".to_string(),\n+        \"-Wl,--eh-frame-hdr\".to_string(),\n+        \"-Wl,--gc-sections\".to_string(),\n+    ]);\n+\n+    TargetOptions {\n+        executables: true,\n+        target_family: Some(\"unix\".to_string()),\n+        linker_is_gnu: true,\n+        pre_link_args: args,\n+        position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n+        exe_allocation_crate: super::maybe_jemalloc(),\n+        .. Default::default()\n+    }\n+}"}, {"sha": "b9aa6176d87687d8f73d3f734b23cd36dc95fed6", "filename": "src/librustc_back/target/i686_unknown_cloudabi.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::cloudabi_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n+\n+    Ok(Target {\n+        llvm_target: \"i686-unknown-cloudabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"cloudabi\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "5c18e82fe3a92dd8eff693938bd9b3dc02f4fa38", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -57,6 +57,7 @@ mod apple_base;\n mod apple_ios_base;\n mod arm_base;\n mod bitrig_base;\n+mod cloudabi_base;\n mod dragonfly_base;\n mod emscripten_base;\n mod freebsd_base;\n@@ -227,6 +228,11 @@ supported_targets! {\n     (\"thumbv7em-none-eabihf\", thumbv7em_none_eabihf),\n \n     (\"msp430-none-elf\", msp430_none_elf),\n+\n+    (\"aarch64-unknown-cloudabi\", aarch64_unknown_cloudabi),\n+    (\"armv7-unknown-cloudabi-eabihf\", armv7_unknown_cloudabi_eabihf),\n+    (\"i686-unknown-cloudabi\", i686_unknown_cloudabi),\n+    (\"x86_64-unknown-cloudabi\", x86_64_unknown_cloudabi),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "f9a563174d4a96c7f90d960db5a48c7e0f8741c4", "filename": "src/librustc_back/target/x86_64_unknown_cloudabi.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::cloudabi_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-cloudabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"cloudabi\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "e23222ad50b80f18313b7be0964360203b03779e", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -354,7 +354,7 @@ pub fn find(name: &str) -> Option<Intrinsic> {\n         },\n         \"_mm256_sad_epu8\" => Intrinsic {\n             inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n+            output: &::U64x4,\n             definition: Named(\"llvm.x86.avx2.psad.bw\")\n         },\n         \"_mm256_shuffle_epi8\" => Intrinsic {"}, {"sha": "6d76c7e722c459b9253a0601578fdba5f2d58c9e", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -13,7 +13,7 @@\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! *[See also the `f32` primitive type](../primitive.f32.html).*\n+//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "dee9566f1fc688f3dcd49992103088be67c1048b", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -13,7 +13,7 @@\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! *[See also the `f64` primitive type](../primitive.f64.html).*\n+//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "c3d1e82bc3fe150510f9e4ccab27a642fac98f83", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -1584,7 +1584,7 @@ mod tests {\n              = if cfg!(target_os = \"windows\") {\n                  Command::new(\"cmd\").args(&[\"/C\", \"mkdir .\"]).output().unwrap()\n              } else {\n-                 Command::new(\"mkdir\").arg(\".\").output().unwrap()\n+                 Command::new(\"mkdir\").arg(\"./\").output().unwrap()\n              };\n \n         assert!(status.code() == Some(1));"}, {"sha": "fc2759df447482fba908c843103c049366df1b7d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdde6db7138cf2365dd9ceb5b8814e92a922ed4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8cdde6db7138cf2365dd9ceb5b8814e92a922ed4", "patch": "@@ -46,8 +46,9 @@ static HOSTS: &'static [&'static str] = &[\n \n static TARGETS: &'static [&'static str] = &[\n     \"aarch64-apple-ios\",\n-    \"aarch64-unknown-fuchsia\",\n     \"aarch64-linux-android\",\n+    \"aarch64-unknown-cloudabi\",\n+    \"aarch64-unknown-fuchsia\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\",\n     \"arm-linux-androideabi\",\n@@ -58,6 +59,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"armv5te-unknown-linux-gnueabi\",\n     \"armv7-apple-ios\",\n     \"armv7-linux-androideabi\",\n+    \"armv7-unknown-cloudabi-eabihf\",\n     \"armv7-unknown-linux-gnueabihf\",\n     \"armv7-unknown-linux-musleabihf\",\n     \"armv7s-apple-ios\",\n@@ -69,6 +71,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"i686-linux-android\",\n     \"i686-pc-windows-gnu\",\n     \"i686-pc-windows-msvc\",\n+    \"i686-unknown-cloudabi\",\n     \"i686-unknown-freebsd\",\n     \"i686-unknown-linux-gnu\",\n     \"i686-unknown-linux-musl\",\n@@ -86,13 +89,14 @@ static TARGETS: &'static [&'static str] = &[\n     \"sparcv9-sun-solaris\",\n     \"wasm32-unknown-emscripten\",\n     \"wasm32-unknown-unknown\",\n-    \"x86_64-linux-android\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-apple-ios\",\n+    \"x86_64-linux-android\",\n     \"x86_64-pc-windows-gnu\",\n     \"x86_64-pc-windows-msvc\",\n     \"x86_64-rumprun-netbsd\",\n     \"x86_64-sun-solaris\",\n+    \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-fuchsia\",\n     \"x86_64-unknown-linux-gnu\","}]}