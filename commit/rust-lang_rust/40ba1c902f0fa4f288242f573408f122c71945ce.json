{"sha": "40ba1c902f0fa4f288242f573408f122c71945ce", "node_id": "C_kwDOAAsO6NoAKDQwYmExYzkwMmYwZmE0ZjI4ODI0MmY1NzM0MDhmMTIyYzcxOTQ1Y2U", "commit": {"author": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2022-12-08T20:42:15Z"}, "committer": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2022-12-09T11:15:51Z"}, "message": "Illegal sized bounds: only suggest mutability change if needed\n\nIn a scenario like\n\n```\nstruct Type;\n\npub trait Trait {\n    fn function(&mut self)\n    where\n        Self: Sized;\n}\n\nimpl Trait for Type {\n    fn function(&mut self) {}\n}\n\nfn main() {\n    (&mut Type as &mut dyn Trait).function();\n}\n```\n\nthe problem is Sized, not the mutability of self. Thus don't emit the\n\"you need &T instead of &mut T\" note, or the other way around, as all\nit does is just invert the mutability of whatever was supplied.\n\nFixes #103622.", "tree": {"sha": "c19d8902e35f50ba66b08173dd63bae44accc366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19d8902e35f50ba66b08173dd63bae44accc366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ba1c902f0fa4f288242f573408f122c71945ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEv1TxOhn3wIfLNaL12sndJk0dKYoFAmOTGQkACgkQ2sndJk0d\nKYo/vQ/8DCu+MHvL20aa3rduxKCfFznAoZG2A9fVsljJ1koYP6vX7OUNqwIILMJa\nQESZDisxNqg+IvqGvwZh1SQaqW/RboxP/p5AD8RBk699juIbCJfbTNvt0GqMZGd/\nXKO98+CUIZyHUt3Tk85bkBj9eCDBRZoPK6/Wd8Npv+oBOmk+RL3osXYzHaIiEuZT\ni9Fzb95YOtxjHRKg2dRGqilvyNK7DXBvmyj3b83Lo0qnIiRqzgqgDM9/XFd/sPkT\n2q7cHCSfZPG2zpSCFyqd7EfPCc892WxhgafxnUOtwkU9w+r68FjYApoAjaeRxHP4\nUsvhbhPXS1A7DKD/Auw2nAhmCLH7MVVXbOhQm9IUoT6L0Gf/30pWNIHW27vJo7lR\nPCxduBTcr0/4MNAHUcoZDDSkE6cg/XIGmKVu4W+5sp9xwPumxxbtyLxI2wO7xima\n1ZnAW711PsbOtRJRVB7GOb7F56CUTydH5Oz781fi9NDj9HsCRxTd2GCwjunEHZtV\n9HaBHeyLlfBx9/wXZyoGNfKG5mANk3RYl/u4ycIEdO9Yt6EPBKT/oB3esFduaMW1\nvzhxwCdDpYdF2WdJIFP6JyY3ASr5dOT4+3eCs6Kf/afzDaJgZoA0lDp7Rciewi07\nWQ6+Qwpi3T2187MtyMfAo60KZs5fbuv+wG/BCkdmaUH5nvJBPys=\n=JiLY\n-----END PGP SIGNATURE-----", "payload": "tree c19d8902e35f50ba66b08173dd63bae44accc366\nparent 7632db0e87d8adccc9a83a47795c9411b1455855\nauthor Robin Schroer <git@sulami.xyz> 1670532135 +0100\ncommitter Robin Schroer <git@sulami.xyz> 1670584551 +0100\n\nIllegal sized bounds: only suggest mutability change if needed\n\nIn a scenario like\n\n```\nstruct Type;\n\npub trait Trait {\n    fn function(&mut self)\n    where\n        Self: Sized;\n}\n\nimpl Trait for Type {\n    fn function(&mut self) {}\n}\n\nfn main() {\n    (&mut Type as &mut dyn Trait).function();\n}\n```\n\nthe problem is Sized, not the mutability of self. Thus don't emit the\n\"you need &T instead of &mut T\" note, or the other way around, as all\nit does is just invert the mutability of whatever was supplied.\n\nFixes #103622.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ba1c902f0fa4f288242f573408f122c71945ce", "html_url": "https://github.com/rust-lang/rust/commit/40ba1c902f0fa4f288242f573408f122c71945ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ba1c902f0fa4f288242f573408f122c71945ce/comments", "author": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7632db0e87d8adccc9a83a47795c9411b1455855", "url": "https://api.github.com/repos/rust-lang/rust/commits/7632db0e87d8adccc9a83a47795c9411b1455855", "html_url": "https://github.com/rust-lang/rust/commit/7632db0e87d8adccc9a83a47795c9411b1455855"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "5d76e17b9f4d0d7d0dca187d6a4a0dd478641aba", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ba1c902f0fa4f288242f573408f122c71945ce/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ba1c902f0fa4f288242f573408f122c71945ce/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=40ba1c902f0fa4f288242f573408f122c71945ce", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ProbeScope::TraitsInScope,\n                 ) {\n                     Ok(ref new_pick) if pick.differs_from(new_pick) => {\n-                        needs_mut = true;\n+                        needs_mut = new_pick.self_ty.ref_mutability() != self_ty.ref_mutability();\n                     }\n                     _ => {}\n                 }"}, {"sha": "deb84f6fe97cfd5d4d2560ec586c2d16f772847b", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs?ref=40ba1c902f0fa4f288242f573408f122c71945ce", "patch": "@@ -0,0 +1,34 @@\n+struct MutType;\n+\n+pub trait MutTrait {\n+    fn function(&mut self)\n+    where\n+        Self: Sized;\n+    //~^ this has a `Sized` requirement\n+}\n+\n+impl MutTrait for MutType {\n+    fn function(&mut self) {}\n+}\n+\n+struct Type;\n+\n+pub trait Trait {\n+    fn function(&self)\n+    where\n+        Self: Sized;\n+    //~^ this has a `Sized` requirement\n+}\n+\n+impl Trait for Type {\n+    fn function(&self) {}\n+}\n+\n+fn main() {\n+    (&MutType as &dyn MutTrait).function();\n+    //~^ ERROR the `function` method cannot be invoked on a trait object\n+    //~| NOTE you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+    (&mut Type as &mut dyn Trait).function();\n+    //~^ ERROR the `function` method cannot be invoked on a trait object\n+    //~| NOTE you need `&dyn Trait` instead of `&mut dyn Trait`\n+}"}, {"sha": "dbbf79a4f1a034f08b771dc12e1af7b34e0b7532", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr?ref=40ba1c902f0fa4f288242f573408f122c71945ce", "patch": "@@ -0,0 +1,24 @@\n+error: the `function` method cannot be invoked on a trait object\n+  --> $DIR/mutability-mismatch.rs:28:33\n+   |\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n+...\n+LL |     (&MutType as &dyn MutTrait).function();\n+   |                                 ^^^^^^^^\n+   |\n+   = note: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+\n+error: the `function` method cannot be invoked on a trait object\n+  --> $DIR/mutability-mismatch.rs:31:35\n+   |\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n+...\n+LL |     (&mut Type as &mut dyn Trait).function();\n+   |                                   ^^^^^^^^\n+   |\n+   = note: you need `&dyn Trait` instead of `&mut dyn Trait`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7abd27ef98318b1117790aebf4f486c53937e930", "filename": "src/test/ui/illegal-sized-bound/regular.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.rs?ref=40ba1c902f0fa4f288242f573408f122c71945ce", "patch": "@@ -0,0 +1,32 @@\n+struct MutType;\n+\n+pub trait MutTrait {\n+    fn function(&mut self)\n+    where\n+        Self: Sized;\n+    //~^ this has a `Sized` requirement\n+}\n+\n+impl MutTrait for MutType {\n+    fn function(&mut self) {}\n+}\n+\n+struct Type;\n+\n+pub trait Trait {\n+    fn function(&self)\n+    where\n+        Self: Sized;\n+    //~^ this has a `Sized` requirement\n+}\n+\n+impl Trait for Type {\n+    fn function(&self) {}\n+}\n+\n+fn main() {\n+    (&mut MutType as &mut dyn MutTrait).function();\n+    //~^ ERROR the `function` method cannot be invoked on a trait object\n+    (&Type as &dyn Trait).function();\n+    //~^ ERROR the `function` method cannot be invoked on a trait object\n+}"}, {"sha": "7f3744145d92723c22d903d4cb097c6a98b9a6bb", "filename": "src/test/ui/illegal-sized-bound/regular.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ba1c902f0fa4f288242f573408f122c71945ce/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fregular.stderr?ref=40ba1c902f0fa4f288242f573408f122c71945ce", "patch": "@@ -0,0 +1,20 @@\n+error: the `function` method cannot be invoked on a trait object\n+  --> $DIR/regular.rs:28:41\n+   |\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n+...\n+LL |     (&mut MutType as &mut dyn MutTrait).function();\n+   |                                         ^^^^^^^^\n+\n+error: the `function` method cannot be invoked on a trait object\n+  --> $DIR/regular.rs:30:27\n+   |\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n+...\n+LL |     (&Type as &dyn Trait).function();\n+   |                           ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}