{"sha": "56b3e7b4c2308be84ce4eed18f03743cc592b780", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YjNlN2I0YzIzMDhiZTg0Y2U0ZWVkMThmMDM3NDNjYzU5MmI3ODA=", "commit": {"author": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T19:10:22Z"}, "committer": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T19:10:22Z"}, "message": "lint comparison to bool (e.g. `y == true`)\n\nAddresses #630", "tree": {"sha": "3f1c72c637986d4ce1e2bce43cb6c9cc169b02dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1c72c637986d4ce1e2bce43cb6c9cc169b02dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b3e7b4c2308be84ce4eed18f03743cc592b780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b3e7b4c2308be84ce4eed18f03743cc592b780", "html_url": "https://github.com/rust-lang/rust/commit/56b3e7b4c2308be84ce4eed18f03743cc592b780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b3e7b4c2308be84ce4eed18f03743cc592b780/comments", "author": null, "committer": null, "parents": [{"sha": "8c886f1e752558e95d086deff4c1ccc61924873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c886f1e752558e95d086deff4c1ccc61924873d", "html_url": "https://github.com/rust-lang/rust/commit/8c886f1e752558e95d086deff4c1ccc61924873d"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "c1e8c3c9f01b87351dc54c33d626d35997920258", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56b3e7b4c2308be84ce4eed18f03743cc592b780/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b3e7b4c2308be84ce4eed18f03743cc592b780/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=56b3e7b4c2308be84ce4eed18f03743cc592b780", "patch": "@@ -105,6 +105,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box bit_mask::BitMask);\n     reg.register_late_lint_pass(box ptr_arg::PtrArg);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n+    reg.register_late_lint_pass(box needless_bool::BoolComparison);\n     reg.register_late_lint_pass(box approx_const::ApproxConstant);\n     reg.register_late_lint_pass(box misc::FloatCmp);\n     reg.register_early_lint_pass(box precedence::Precedence);\n@@ -253,6 +254,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::NEEDLESS_BOOL,\n+        needless_bool::BOOL_COMPARISON,\n         needless_features::UNSTABLE_AS_MUT_SLICE,\n         needless_features::UNSTABLE_AS_SLICE,\n         needless_update::NEEDLESS_UPDATE,"}, {"sha": "a2a0d13e17c55e471b6a32ca96e19ca5f10ac77f", "filename": "src/needless_bool.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/56b3e7b4c2308be84ce4eed18f03743cc592b780/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b3e7b4c2308be84ce4eed18f03743cc592b780/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=56b3e7b4c2308be84ce4eed18f03743cc592b780", "patch": "@@ -6,6 +6,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n \n use syntax::ast::Lit_;\n+use syntax::codemap::Spanned;\n \n use utils::{span_lint, snippet};\n \n@@ -23,6 +24,20 @@ declare_lint! {\n      `if p { true } else { false }`\"\n }\n \n+/// **What it does:** This lint checks for expressions of the form `x == true` (or vice versa) and suggest using the variable directly.\n+///\n+/// **Why is this bad?** Unnecessary code.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `if x == true { }` could be `if x { }`\n+declare_lint! {\n+    pub BOOL_COMPARISON,\n+    Warn,\n+    \"comparing a variable to a boolean, e.g. \\\n+     `if x == true`\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct NeedlessBool;\n \n@@ -78,6 +93,57 @@ impl LateLintPass for NeedlessBool {\n     }\n }\n \n+#[derive(Copy,Clone)]\n+pub struct BoolComparison;\n+\n+impl LintPass for BoolComparison {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(BOOL_COMPARISON)\n+    }\n+}\n+\n+impl LateLintPass for BoolComparison {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprBinary(Spanned{ node: BiEq, .. }, ref left_side, ref right_side) = e.node {\n+            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+                (Some(true), None) => {\n+                    let side_snip = snippet(cx, right_side.span, \"..\");\n+                    let hint = format!(\"`{}`\", side_snip);\n+                    span_lint(cx,\n+                              BOOL_COMPARISON,\n+                              e.span,\n+                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                }\n+                (None, Some(true)) => {\n+                    let side_snip = snippet(cx, left_side.span, \"..\");\n+                    let hint = format!(\"`{}`\", side_snip);\n+                    span_lint(cx,\n+                              BOOL_COMPARISON,\n+                              e.span,\n+                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                }\n+                (Some(false), None) => {\n+                    let side_snip = snippet(cx, right_side.span, \"..\");\n+                    let hint = format!(\"`!{}`\", side_snip);\n+                    span_lint(cx,\n+                              BOOL_COMPARISON,\n+                              e.span,\n+                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                }\n+                (None, Some(false)) => {\n+                    let side_snip = snippet(cx, left_side.span, \"..\");\n+                    let hint = format!(\"`!{}`\", side_snip);\n+                    span_lint(cx,\n+                              BOOL_COMPARISON,\n+                              e.span,\n+                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n fn fetch_bool_block(block: &Block) -> Option<bool> {\n     if block.stmts.is_empty() {\n         block.expr.as_ref().and_then(|e| fetch_bool_expr(e))"}, {"sha": "d2a362af2f47338f45e76cea184dc3217fcab557", "filename": "tests/compile-fail/bool_comparison.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56b3e7b4c2308be84ce4eed18f03743cc592b780/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b3e7b4c2308be84ce4eed18f03743cc592b780/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=56b3e7b4c2308be84ce4eed18f03743cc592b780", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(needless_bool)]\n+#[deny(bool_comparison)]\n+fn main() {\n+    let x = true;\n+    if x == true { true } else { false }; //~ERROR you can simplify this boolean comparison to `x`\n+    if x == false { true } else { false }; //~ERROR you can simplify this boolean comparison to `!x`\n+    if true == x { true } else { false }; //~ERROR you can simplify this boolean comparison to `x`\n+    if false == x { true } else { false }; //~ERROR you can simplify this boolean comparison to `!x`\n+}"}]}