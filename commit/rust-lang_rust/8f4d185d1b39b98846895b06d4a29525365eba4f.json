{"sha": "8f4d185d1b39b98846895b06d4a29525365eba4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNGQxODVkMWIzOWI5ODg0Njg5NWIwNmQ0YTI5NTI1MzY1ZWJhNGY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-10T20:41:32Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:39:31Z"}, "message": "Move time related functions to its own module", "tree": {"sha": "7530ae514efe21f31e30f4c264d68acf6d7f7504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7530ae514efe21f31e30f4c264d68acf6d7f7504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f4d185d1b39b98846895b06d4a29525365eba4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4d185d1b39b98846895b06d4a29525365eba4f", "html_url": "https://github.com/rust-lang/rust/commit/8f4d185d1b39b98846895b06d4a29525365eba4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f4d185d1b39b98846895b06d4a29525365eba4f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ee90d22eff95f02d78f628e4f2c3b71e265f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ee90d22eff95f02d78f628e4f2c3b71e265f1a", "html_url": "https://github.com/rust-lang/rust/commit/b8ee90d22eff95f02d78f628e4f2c3b71e265f1a"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "06ec33a914bf751f232d2b04cee2cfb60e880eb8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8f4d185d1b39b98846895b06d4a29525365eba4f", "patch": "@@ -32,6 +32,7 @@ pub use crate::shims::{EvalContextExt as ShimsEvalContextExt};\n pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n+pub use crate::shims::time::{EvalContextExt as TimeEvalContextExt};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n pub use crate::shims::fs::{FileHandler, EvalContextExt as FileEvalContextExt};"}, {"sha": "f6195961ba0640525ce763510818a6ff3bf0a1d3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 58, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8f4d185d1b39b98846895b06d4a29525365eba4f", "patch": "@@ -508,67 +508,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"clock_gettime\" => {\n-                if !this.machine.communicate {\n-                    throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n-                } else {\n-                    let clk_id = this.read_scalar(args[0])?.to_i32()?;\n-\n-                    if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n-                        let einval = this.eval_libc(\"EINVAL\")?;\n-                        this.set_last_error(einval)?;\n-                        this.write_scalar(Scalar::from_int(-1i32, dest.layout.size), dest)?;\n-                    } else {\n-                        let tp = this.force_ptr(this.read_scalar(args[1])?.not_undef()?)?;\n-\n-                        let mut sign = 1;\n-\n-                        let duration = std::time::SystemTime::now()\n-                            .duration_since(std::time::SystemTime::UNIX_EPOCH)\n-                            .unwrap_or_else(|e| {\n-                                sign = -1;\n-                                e.duration()\n-                            });\n-\n-                        let tv_sec = sign * (duration.as_secs() as i128);\n-                        let tv_nsec = duration.subsec_nanos() as i128;\n-\n-                        this.write_c_ints(&tp, &[tv_sec, tv_nsec], &[\"time_t\", \"c_long\"])?;\n-\n-                        this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n-                    }\n-                }\n+                let result = this.clock_gettime(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n             \"gettimeofday\" => {\n-                if !this.machine.communicate {\n-                    throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n-                } else {\n-                    let tz = this.read_scalar(args[1])?.not_undef()?;\n-                    // Using tz is obsolete and should always be null\n-                    if !this.is_null(tz)? {\n-                        let einval = this.eval_libc(\"EINVAL\")?;\n-                        this.set_last_error(einval)?;\n-                        this.write_scalar(Scalar::from_int(-1i32, dest.layout.size), dest)?;\n-                    } else {\n-                        let tv = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n-\n-                        let mut sign = 1;\n-\n-                        let duration = std::time::SystemTime::now()\n-                            .duration_since(std::time::SystemTime::UNIX_EPOCH)\n-                            .unwrap_or_else(|e| {\n-                                sign = -1;\n-                                e.duration()\n-                            });\n-\n-                        let tv_sec = sign * (duration.as_secs() as i128);\n-                        let tv_usec = duration.subsec_micros() as i128;\n-\n-                        this.write_c_ints(&tv, &[tv_sec, tv_usec], &[\"time_t\", \"suseconds_t\"])?;\n-\n-                        this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n-                    }\n-                }\n+                let result = this.gettimeofday(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n             \"strlen\" => {"}, {"sha": "95bb8b70370f1dfcb02b4b5f70e96cae87cc5b4e", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=8f4d185d1b39b98846895b06d4a29525365eba4f", "patch": "@@ -4,6 +4,7 @@ pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n pub mod fs;\n+pub mod time;\n \n use rustc::{mir, ty};\n "}, {"sha": "97b74542d8091bacb93bfbaf50c96b2f8171fa0b", "filename": "src/shims/time.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4d185d1b39b98846895b06d4a29525365eba4f/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=8f4d185d1b39b98846895b06d4a29525365eba4f", "patch": "@@ -0,0 +1,75 @@\n+use crate::stacked_borrows::Tag;\n+use crate::*;\n+\n+use std::time::{Duration, SystemTime};\n+\n+fn get_time() -> (Duration, i128) {\n+    let mut sign = 1;\n+    let duration = SystemTime::now()\n+        .duration_since(SystemTime::UNIX_EPOCH)\n+        .unwrap_or_else(|e| {\n+            sign = -1;\n+            e.duration()\n+        });\n+    (duration, sign)\n+}\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn clock_gettime(\n+        &mut self,\n+        clk_id_op: OpTy<'tcx, Tag>,\n+        tp_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n+        }\n+\n+        let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n+        if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n+        let tp = this.force_ptr(this.read_scalar(tp_op)?.not_undef()?)?;\n+\n+        let (duration, sign) = get_time();\n+        let tv_sec = sign * (duration.as_secs() as i128);\n+        let tv_nsec = duration.subsec_nanos() as i128;\n+        this.write_c_ints(&tp, &[tv_sec, tv_nsec], &[\"time_t\", \"c_long\"])?;\n+\n+        Ok(0)\n+    }\n+\n+    fn gettimeofday(\n+        &mut self,\n+        tv_op: OpTy<'tcx, Tag>,\n+        tz_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n+        }\n+        // Using tz is obsolete and should always be null\n+        let tz = this.read_scalar(tz_op)?.not_undef()?;\n+        if !this.is_null(tz)? {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n+        let tv = this.force_ptr(this.read_scalar(tv_op)?.not_undef()?)?;\n+\n+        let (duration, sign) = get_time();\n+        let tv_sec = sign * (duration.as_secs() as i128);\n+        let tv_usec = duration.subsec_micros() as i128;\n+\n+        this.write_c_ints(&tv, &[tv_sec, tv_usec], &[\"time_t\", \"suseconds_t\"])?;\n+\n+        Ok(0)\n+    }\n+}"}]}