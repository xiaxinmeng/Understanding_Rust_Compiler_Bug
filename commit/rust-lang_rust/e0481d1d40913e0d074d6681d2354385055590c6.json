{"sha": "e0481d1d40913e0d074d6681d2354385055590c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDgxZDFkNDA5MTNlMGQwNzRkNjY4MWQyMzU0Mzg1MDU1NTkwYzY=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-09T18:16:48Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-10T10:44:44Z"}, "message": "add polonius activities to -Z self-profile\n\n- \"polonius_fact_generation\" is dedicated to profiling the Polonius fact generation, from the MIR and NLL constraints\n- \"polonius_analysis\" is dedicated to profiling the duration of the Polonius computations themselves: move/init analysis, liveness, borrowck-ing", "tree": {"sha": "4b38552121ca39a8715c7b6be382757943927221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b38552121ca39a8715c7b6be382757943927221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0481d1d40913e0d074d6681d2354385055590c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0481d1d40913e0d074d6681d2354385055590c6", "html_url": "https://github.com/rust-lang/rust/commit/e0481d1d40913e0d074d6681d2354385055590c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0481d1d40913e0d074d6681d2354385055590c6/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72579c944446465f0f6042725f112485d04b9f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72579c944446465f0f6042725f112485d04b9f6d", "html_url": "https://github.com/rust-lang/rust/commit/72579c944446465f0f6042725f112485d04b9f6d"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "dbeccab966bbb15566f6ff694d456e27bc67ecd0", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=e0481d1d40913e0d074d6681d2354385055590c6", "patch": "@@ -97,6 +97,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         location: Location,\n     ) {\n         if let Some(all_facts) = self.all_facts {\n+            let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             all_facts.cfg_edge.push((\n                 self.location_table.start_index(location),\n                 self.location_table.mid_index(location),\n@@ -142,6 +143,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         location: Location,\n     ) {\n         if let Some(all_facts) = self.all_facts {\n+            let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             all_facts.cfg_edge.push((\n                 self.location_table.start_index(location),\n                 self.location_table.mid_index(location),\n@@ -205,6 +207,8 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n     /// as `killed`. For example, when assigning to a local, or on a call's return destination.\n     fn record_killed_borrows_for_place(&mut self, place: &Place<'tcx>, location: Location) {\n         if let Some(all_facts) = self.all_facts {\n+            let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n+\n             // Depending on the `Place` we're killing:\n             // - if it's a local, or a single deref of a local,\n             //   we kill all the borrows on the local."}, {"sha": "e442f9c9e322fed252a628c21b18328de61c964f", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=e0481d1d40913e0d074d6681d2354385055590c6", "patch": "@@ -31,6 +31,7 @@ pub(super) fn generate_invalidates<'tcx>(\n     }\n \n     if let Some(all_facts) = all_facts {\n+        let _prof_timer = tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let dominators = body.dominators();\n         let mut ig = InvalidationGenerator {\n             all_facts,"}, {"sha": "9ea3bd8899b9d59fdec568b50ab9b989a674c1a2", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e0481d1d40913e0d074d6681d2354385055590c6", "patch": "@@ -201,6 +201,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     );\n \n     if let Some(all_facts) = &mut all_facts {\n+        let _prof_timer = infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         all_facts\n             .universal_region\n             .extend(universal_regions.universal_regions());\n@@ -302,6 +303,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n                 .unwrap_or_else(|_| String::from(\"Naive\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();\n             debug!(\"compute_regions: using polonius algorithm {:?}\", algorithm);\n+            let _prof_timer = infcx.tcx.prof.generic_activity(\"polonius_analysis\");\n             Some(Rc::new(Output::compute(\n                 &all_facts,\n                 algorithm,"}, {"sha": "0354b0d6b92c525b52d153a55ab41dd06275fdfd", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=e0481d1d40913e0d074d6681d2354385055590c6", "patch": "@@ -109,6 +109,7 @@ pub(super) fn populate_access_facts(\n \n         for (local, local_decl) in body.local_decls.iter_enumerated() {\n             debug!(\"add var_uses_regions facts - local={:?}, type={:?}\", local, local_decl.ty);\n+            let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             let universal_regions = &typeck.borrowck_context.universal_regions;\n             typeck.infcx.tcx.for_each_free_region(&local_decl.ty, |region| {\n                 let region_vid = universal_regions.to_region_vid(region);\n@@ -127,6 +128,7 @@ pub(super) fn add_var_drops_regions(\n ) {\n     debug!(\"add_var_drops_region(local={:?}, kind={:?}\", local, kind);\n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n+        let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let universal_regions = &typeck.borrowck_context.universal_regions;\n         typeck.infcx.tcx.for_each_free_region(kind, |drop_live_region| {\n             let region_vid = universal_regions.to_region_vid(drop_live_region);"}, {"sha": "cddc3b4a271d4de64c76c73a0c02e551348eff3e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0481d1d40913e0d074d6681d2354385055590c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e0481d1d40913e0d074d6681d2354385055590c6", "patch": "@@ -182,7 +182,7 @@ pub(crate) fn type_check<'tcx>(\n                 move_data,\n                 location_table);\n \n-            translate_outlives_facts(cx.borrowck_context);\n+            translate_outlives_facts(&mut cx);\n         },\n     );\n \n@@ -228,8 +228,10 @@ fn type_check_internal<'a, 'tcx, R>(\n     extra(&mut checker)\n }\n \n-fn translate_outlives_facts(cx: &mut BorrowCheckContext<'_, '_>) {\n+fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {\n+    let cx = &mut typeck.borrowck_context;\n     if let Some(facts) = cx.all_facts {\n+        let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let location_table = cx.location_table;\n         facts\n             .outlives\n@@ -2489,6 +2491,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // that occurs when we are borrowing an unsafe place, for\n         // example).\n         if let Some(all_facts) = all_facts {\n+            let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             if let Some(borrow_index) = borrow_set.location_map.get(&location) {\n                 let region_vid = borrow_region.to_region_vid();\n                 all_facts.borrow_region.push(("}]}