{"sha": "207c80f105282245d93024c95ac408c622f70114", "node_id": "C_kwDOAAsO6NoAKDIwN2M4MGYxMDUyODIyNDVkOTMwMjRjOTVhYzQwOGM2MjJmNzAxMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T13:52:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T13:52:38Z"}, "message": "Auto merge of #91352 - nnethercote:RawVec-reserve_for_push, r=dtolnay\n\nIntroduce `RawVec::reserve_for_push`.\n\nIf `Vec::push`'s capacity check fails it calls `RawVec::reserve`, which\nthen also does a capacity check.\n\nThis commit introduces `reserve_for_push` which skips the redundant\ncapacity check, for some slight compile time speed-ups.\n\nI tried lots of minor variations on this, e.g. different inlining\nattributes. This was the best one I could find.\n\nr? `@ghost`", "tree": {"sha": "e05bfbe67697f3d435a8243c1c1921151ecd6bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05bfbe67697f3d435a8243c1c1921151ecd6bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207c80f105282245d93024c95ac408c622f70114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207c80f105282245d93024c95ac408c622f70114", "html_url": "https://github.com/rust-lang/rust/commit/207c80f105282245d93024c95ac408c622f70114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207c80f105282245d93024c95ac408c622f70114/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0287830e0fb3c4007afea2819ba03766da6e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0287830e0fb3c4007afea2819ba03766da6e9c", "html_url": "https://github.com/rust-lang/rust/commit/1c0287830e0fb3c4007afea2819ba03766da6e9c"}, {"sha": "6a83352aa3cb80eb83cb57aba30aad32d3881af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a83352aa3cb80eb83cb57aba30aad32d3881af7", "html_url": "https://github.com/rust-lang/rust/commit/6a83352aa3cb80eb83cb57aba30aad32d3881af7"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "3d38e73305a37a577667e03a2cfc5491e4080bd4", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207c80f105282245d93024c95ac408c622f70114/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207c80f105282245d93024c95ac408c622f70114/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=207c80f105282245d93024c95ac408c622f70114", "patch": "@@ -289,6 +289,14 @@ impl<T, A: Allocator> RawVec<T, A> {\n         }\n     }\n \n+    /// A specialized version of `reserve()` used only by the hot and\n+    /// oft-instantiated `Vec::push()`, which does its own capacity check.\n+    #[cfg(not(no_global_oom_handling))]\n+    #[inline(never)]\n+    pub fn reserve_for_push(&mut self, len: usize) {\n+        handle_reserve(self.grow_amortized(len, 1));\n+    }\n+\n     /// The same as `reserve`, but returns on errors instead of panicking or aborting.\n     pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {\n         if self.needs_to_grow(len, additional) {"}, {"sha": "88bde6e8ce48152f1aad625911bc91e2578663e8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207c80f105282245d93024c95ac408c622f70114/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207c80f105282245d93024c95ac408c622f70114/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=207c80f105282245d93024c95ac408c622f70114", "patch": "@@ -1726,7 +1726,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         // This will panic or abort if we would allocate > isize::MAX bytes\n         // or if the length increment would overflow for zero-sized types.\n         if self.len == self.buf.capacity() {\n-            self.reserve(1);\n+            self.buf.reserve_for_push(self.len);\n         }\n         unsafe {\n             let end = self.as_mut_ptr().add(self.len);"}]}