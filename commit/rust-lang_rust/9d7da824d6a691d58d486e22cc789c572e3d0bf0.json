{"sha": "9d7da824d6a691d58d486e22cc789c572e3d0bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkN2RhODI0ZDZhNjkxZDU4ZDQ4NmUyMmNjNzg5YzU3MmUzZDBiZjA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-13T16:10:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-21T15:46:32Z"}, "message": "Introduce `ArgSource` for diagnostics.\n\nThis commit introduces an `ArgSource` enum that is lowered into the HIR\nso that diagnostics can correctly refer to the argument pattern's\noriginal name rather than the generated pattern.", "tree": {"sha": "efd08de2dcfbfbf790fd4f3beb989c7d7eba7da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd08de2dcfbfbf790fd4f3beb989c7d7eba7da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7da824d6a691d58d486e22cc789c572e3d0bf0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAly8kFgACgkQAXYLT59T\n8VTUMw/3UyNaD7J2/TVUUT4oPlceWo2lAAaFcEzQR4w0p+A/9v8Yu55wy0trIDxl\n1zf2FxAUFSZMqTPBVLZasNRTOCcG8a/tKbYkqWbSrR9S/FdwS058/vZVjmoI0x5G\nn5HeIJraVOFollo2yw8rZf9qHXlJRKc8SZBivHH3DgxPa0nv/aw8W1gECYGpYnT7\nyQlzi1IneBGLTa4DuYOS0sMKOcQl9W8UbBIhOttsiSJDgtXRDehqL1BUP+uGcA86\ns4F+Mx3G92NORViXj8Dpfhl9r0ZqmepUMlIK/AkCGAkcw13gR8G6hz1QT+7UJiZH\npo3njpNwzLUtrPoS2HSD4cWyZHLrreXleorzkINVK0MzOPmd0E3ETKGkn1q3yofF\nYWi8XLBetWG5UZQVFNZp8RD7jXmwvwcUawS7Ln1oUWsWsKlurAE2t/tEqC2x3j9b\niHpvyLnelKS5fqS+bhLU6lHtT8KoROJ5O07Kp+z222P0xJFjeCPJFp6NhwRJg6PD\n4uJpqXgLfk0HuN7bkSZk14Ji39VeBeofwm6YCK5hSXfh+5pEnat51UTgrNklPJWT\nDHYzoF+ttXcjMnpwQbBT6AtnfgUxJ5Ui6+iUN45DrsW6DYOKBmcdCDOfGPzL0QB0\nGXtqjGGWJfBni424Wl8xKBjQo0sPGc49cz7rQCj0KG6BwaCzkA==\n=I/uK\n-----END PGP SIGNATURE-----", "payload": "tree efd08de2dcfbfbf790fd4f3beb989c7d7eba7da7\nparent 92e72df2c1402d3d8fceac81e650b633c555a523\nauthor David Wood <david@davidtw.co> 1552493427 +0100\ncommitter David Wood <david@davidtw.co> 1555861592 +0100\n\nIntroduce `ArgSource` for diagnostics.\n\nThis commit introduces an `ArgSource` enum that is lowered into the HIR\nso that diagnostics can correctly refer to the argument pattern's\noriginal name rather than the generated pattern.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7da824d6a691d58d486e22cc789c572e3d0bf0", "html_url": "https://github.com/rust-lang/rust/commit/9d7da824d6a691d58d486e22cc789c572e3d0bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7da824d6a691d58d486e22cc789c572e3d0bf0/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e72df2c1402d3d8fceac81e650b633c555a523", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e72df2c1402d3d8fceac81e650b633c555a523", "html_url": "https://github.com/rust-lang/rust/commit/92e72df2c1402d3d8fceac81e650b633c555a523"}], "stats": {"total": 149, "additions": 128, "deletions": 21}, "files": [{"sha": "a0c9e5983a1d7dae5e25a0a35df0d3c37c181880", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -262,6 +262,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_pat(&mut self, p: &'v Pat) {\n         walk_pat(self, p)\n     }\n+    fn visit_argument_source(&mut self, s: &'v ArgSource) {\n+        walk_argument_source(self, s)\n+    }\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n@@ -399,10 +402,17 @@ pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body) {\n     for argument in &body.arguments {\n         visitor.visit_id(argument.hir_id);\n         visitor.visit_pat(&argument.pat);\n+        visitor.visit_argument_source(&argument.source);\n     }\n     visitor.visit_expr(&body.value);\n }\n \n+pub fn walk_argument_source<'v, V: Visitor<'v>>(visitor: &mut V, source: &'v ArgSource) {\n+    if let ArgSource::AsyncFn(pat) = source {\n+        visitor.visit_pat(pat);\n+    }\n+}\n+\n pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     // Intentionally visiting the expr first - the initialization expr\n     // dominates the local's definition."}, {"sha": "28899af629bee62fec82d2255f930548ab47f1f6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -465,6 +465,7 @@ impl<'a> LoweringContext<'a> {\n                     // Don't visit the original pattern for async functions as it will be\n                     // replaced.\n                     for arg in &fd.inputs {\n+                        if let ArgSource::AsyncFn(pat) = &arg.source { self.visit_pat(pat); }\n                         self.visit_ty(&arg.ty)\n                     }\n                     self.visit_fn_ret_ty(&fd.output);\n@@ -2271,6 +2272,14 @@ impl<'a> LoweringContext<'a> {\n         hir::Arg {\n             hir_id,\n             pat: self.lower_pat(&arg.pat),\n+            source: self.lower_arg_source(&arg.source),\n+        }\n+    }\n+\n+    fn lower_arg_source(&mut self, source: &ArgSource) -> hir::ArgSource {\n+        match source {\n+            ArgSource::Normal => hir::ArgSource::Normal,\n+            ArgSource::AsyncFn(pat) => hir::ArgSource::AsyncFn(self.lower_pat(pat)),\n         }\n     }\n "}, {"sha": "1ebaa60fc885a829519c11566c6fec84791f4ac6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -1894,6 +1894,26 @@ pub struct InlineAsm {\n pub struct Arg {\n     pub pat: P<Pat>,\n     pub hir_id: HirId,\n+    pub source: ArgSource,\n+}\n+\n+impl Arg {\n+    /// Returns the pattern representing the original binding for this argument.\n+    pub fn original_pat(&self) -> &P<Pat> {\n+        match &self.source {\n+            ArgSource::Normal => &self.pat,\n+            ArgSource::AsyncFn(pat) => &pat,\n+        }\n+    }\n+}\n+\n+/// Represents the source of an argument in a function header.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum ArgSource {\n+    /// Argument as specified by the user.\n+    Normal,\n+    /// Generated argument from `async fn` lowering, contains the original binding pattern.\n+    AsyncFn(P<Pat>),\n }\n \n /// Represents the header (not the body) of a function declaration."}, {"sha": "944cc8a8b1999b0112ca47b95ea4ede49cb825fc", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -86,19 +86,16 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let sub_is_ret_type =\n             self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n-        let span_label_var1 = if let Some(simple_ident) = anon_arg_sup.pat.simple_ident() {\n-            format!(\" from `{}`\", simple_ident)\n-        } else {\n-            String::new()\n+        let span_label_var1 = match anon_arg_sup.original_pat().simple_ident() {\n+            Some(simple_ident) => format!(\" from `{}`\", simple_ident),\n+            None => String::new(),\n         };\n \n-        let span_label_var2 = if let Some(simple_ident) = anon_arg_sub.pat.simple_ident() {\n-            format!(\" into `{}`\", simple_ident)\n-        } else {\n-            String::new()\n+        let span_label_var2 = match anon_arg_sub.original_pat().simple_ident() {\n+            Some(simple_ident) => format!(\" into `{}`\", simple_ident),\n+            None => String::new(),\n         };\n \n-\n         let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n             (None, None) => {\n                 let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {"}, {"sha": "2d7587b11b6f8e51ea905ddc5c3f0cedfcf9fd2d", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -95,13 +95,12 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let (error_var, span_label_var) = if let Some(simple_ident) = arg.pat.simple_ident() {\n-            (\n+        let (error_var, span_label_var) = match arg.original_pat().simple_ident() {\n+            Some(simple_ident) => (\n                 format!(\"the type of `{}`\", simple_ident),\n                 format!(\"the type of `{}`\", simple_ident),\n-            )\n-        } else {\n-            (\"parameter type\".to_owned(), \"type\".to_owned())\n+            ),\n+            None => (\"parameter type\".to_owned(), \"type\".to_owned()),\n         };\n \n         let mut diag = struct_span_err!("}, {"sha": "d7f97f7a58eac989f9aff9223cf206699afbdbfc", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -1337,6 +1337,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             for a in arguments {\n                 // Visit the argument..\n                 self.visit_pat(&a.arg.pat);\n+                if let ast::ArgSource::AsyncFn(pat) = &a.arg.source {\n+                    self.visit_pat(pat);\n+                }\n                 self.visit_ty(&a.arg.ty);\n \n                 // ..and the statement."}, {"sha": "814776c21bd2afd9edda1e8aa07b4da005070fbd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -2421,7 +2421,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             let help_name = if let Some(body) = parent {\n                 let arg = &self.tcx.hir().body(body).arguments[index];\n-                format!(\"`{}`\", self.tcx.hir().hir_to_pretty_string(arg.pat.hir_id))\n+                format!(\"`{}`\", self.tcx.hir().hir_to_pretty_string(arg.original_pat().hir_id))\n             } else {\n                 format!(\"argument {}\", index + 1)\n             };"}, {"sha": "57e17eb6878e1a08544147686131dc7d753a1ce5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -948,6 +948,16 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n \n         intravisit::walk_pat(self, pat);\n     }\n+\n+    fn visit_argument_source(&mut self, s: &'tcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////////////////\n@@ -1133,6 +1143,16 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         intravisit::walk_pat(self, pattern);\n     }\n \n+    fn visit_argument_source(&mut self, s: &'tcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n+\n     fn visit_local(&mut self, local: &'tcx hir::Local) {\n         if let Some(ref init) = local.init {\n             if self.check_expr_pat_type(init.hir_id, init.span) {"}, {"sha": "79477b6fea87dbe6ce72b7641802a8bffdf6e447", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -1005,6 +1005,16 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // Don't descend into the bodies of nested closures\n     fn visit_fn(&mut self, _: intravisit::FnKind<'gcx>, _: &'gcx hir::FnDecl,\n                 _: hir::BodyId, _: Span, _: hir::HirId) { }\n+\n+    fn visit_argument_source(&mut self, s: &'gcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n /// When `check_fn` is invoked on a generator (i.e., a body that"}, {"sha": "efff08f66969023dec04864237e20303c7fec56f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -297,6 +297,16 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n         let ty = self.resolve(&ty, &hir_ty.span);\n         self.write_ty_to_tables(hir_ty.hir_id, ty);\n     }\n+\n+    fn visit_argument_source(&mut self, s: &'gcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {"}, {"sha": "81d8cfd8622799e141457925c53dfa4b2e025761", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -1736,6 +1736,16 @@ pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n     pub id: NodeId,\n+    pub source: ArgSource,\n+}\n+\n+/// The source of an argument in a function header.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum ArgSource {\n+    /// Argument as written by the user.\n+    Normal,\n+    /// Argument from `async fn` lowering, contains the original binding pattern.\n+    AsyncFn(P<Pat>),\n }\n \n /// Alternative representation for `Arg`s describing `self` parameter of methods.\n@@ -1795,6 +1805,7 @@ impl Arg {\n             }),\n             ty,\n             id: DUMMY_NODE_ID,\n+            source: ArgSource::Normal,\n         };\n         match eself.node {\n             SelfKind::Explicit(ty, mutbl) => arg(mutbl, ty),"}, {"sha": "40dd187ed28a7e5560ee7eeb26e0a226dc16bfd9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -979,7 +979,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::Arg {\n             ty,\n             pat: arg_pat,\n-            id: ast::DUMMY_NODE_ID\n+            id: ast::DUMMY_NODE_ID,\n+            source: ast::ArgSource::Normal,\n         }\n     }\n "}, {"sha": "d3441a2039b175e7ab1bf488d58b567fa2e58e16", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -235,6 +235,10 @@ pub trait MutVisitor: Sized {\n         noop_visit_arg(a, self);\n     }\n \n+    fn visit_arg_source(&mut self, a: &mut ArgSource) {\n+        noop_visit_arg_source(a, self);\n+    }\n+\n     fn visit_generics(&mut self, generics: &mut Generics) {\n         noop_visit_generics(generics, self);\n     }\n@@ -564,10 +568,18 @@ pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty }: &mut Arg, vis: &mut T) {\n+pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty, source }: &mut Arg, vis: &mut T) {\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     vis.visit_ty(ty);\n+    vis.visit_arg_source(source);\n+}\n+\n+pub fn noop_visit_arg_source<T: MutVisitor>(source: &mut ArgSource, vis: &mut T) {\n+    match source {\n+        ArgSource::Normal => {},\n+        ArgSource::AsyncFn(pat) => vis.visit_pat(pat),\n+    }\n }\n \n pub fn noop_visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {"}, {"sha": "d7330ff55adafb17516e6e9997d0814937290729", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -1,7 +1,7 @@\n use crate::ast::{AngleBracketedArgs, AsyncArgument, ParenthesizedArgs, AttrStyle, BareFnTy};\n use crate::ast::{GenericBound, TraitBoundModifier};\n use crate::ast::Unsafety;\n-use crate::ast::{Mod, AnonConst, Arg, Arm, Guard, Attribute, BindingMode, TraitItemKind};\n+use crate::ast::{Mod, AnonConst, Arg, ArgSource, Arm, Guard, Attribute, BindingMode, TraitItemKind};\n use crate::ast::Block;\n use crate::ast::{BlockCheckMode, CaptureBy, Movability};\n use crate::ast::{Constness, Crate};\n@@ -550,7 +550,7 @@ fn dummy_arg(span: Span) -> Arg {\n         span,\n         id: ast::DUMMY_NODE_ID\n     };\n-    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n+    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal }\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -2126,7 +2126,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID })\n+        Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal })\n     }\n \n     /// Parses a single function argument.\n@@ -2149,7 +2149,8 @@ impl<'a> Parser<'a> {\n         Ok(Arg {\n             ty: t,\n             pat,\n-            id: ast::DUMMY_NODE_ID\n+            id: ast::DUMMY_NODE_ID,\n+            source: ast::ArgSource::Normal,\n         })\n     }\n \n@@ -8856,6 +8857,7 @@ impl<'a> Parser<'a> {\n                         ),\n                         span,\n                     }),\n+                    source: ArgSource::AsyncFn(input.pat.clone()),\n                 };\n \n                 // Construct a `let <pat> = __argN;` statement to insert at the top of the"}, {"sha": "fc99d10b0b6c613cb76f4ec67b8f9522a2dc8ead", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7da824d6a691d58d486e22cc789c572e3d0bf0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9d7da824d6a691d58d486e22cc789c572e3d0bf0", "patch": "@@ -544,6 +544,9 @@ pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FunctionR\n pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &'a FnDecl) {\n     for argument in &function_declaration.inputs {\n         visitor.visit_pat(&argument.pat);\n+        if let ArgSource::AsyncFn(pat) = &argument.source {\n+            visitor.visit_pat(pat);\n+        }\n         visitor.visit_ty(&argument.ty)\n     }\n     visitor.visit_fn_ret_ty(&function_declaration.output)"}]}