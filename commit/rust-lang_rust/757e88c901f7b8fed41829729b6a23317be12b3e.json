{"sha": "757e88c901f7b8fed41829729b6a23317be12b3e", "node_id": "C_kwDOAAsO6NoAKDc1N2U4OGM5MDFmN2I4ZmVkNDE4Mjk3MjliNmEyMzMxN2JlMTJiM2U", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:59:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:59:33Z"}, "message": "use ui_test regex capabilities", "tree": {"sha": "ea8ce7e26b27fbf44fc0d244bb1310ea3d76d444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8ce7e26b27fbf44fc0d244bb1310ea3d76d444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757e88c901f7b8fed41829729b6a23317be12b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757e88c901f7b8fed41829729b6a23317be12b3e", "html_url": "https://github.com/rust-lang/rust/commit/757e88c901f7b8fed41829729b6a23317be12b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757e88c901f7b8fed41829729b6a23317be12b3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9de3117458aa5b7e249e1aaa2e3757eaad7834", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9de3117458aa5b7e249e1aaa2e3757eaad7834", "html_url": "https://github.com/rust-lang/rust/commit/4e9de3117458aa5b7e249e1aaa2e3757eaad7834"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "47b098c71a2bfb3da889734235bcab4962962042", "filename": "tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -1,6 +1,6 @@\n // Make sure we detect when the `Global` and `System` allocators are mixed\n // (even when the default `Global` uses `System`).\n-//@error-pattern: which is Rust heap memory, using\n+//@error-pattern: /deallocating .*, which is Rust heap memory, using .* heap deallocation operation/\n \n //@normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\""}, {"sha": "baf53decc4413874d71f192bbfea5cce14a0178a", "filename": "tests/fail/alloc/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Falloc%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Falloc%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fstack_free.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-//@error-pattern: which is stack variable memory, using Rust heap deallocation operation\n+//@error-pattern: /deallocating .*, which is stack variable memory, using Rust heap deallocation operation/\n \n fn main() {\n     let x = 42;"}, {"sha": "07de41d10a038a05806942b8d20711028f469326", "filename": "tests/fail/provenance/ptr_int_unexposed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let x_usize: usize = x_ptr.addr();\n     // Cast back an address that did *not* get exposed.\n     let ptr = std::ptr::from_exposed_addr::<i32>(x_usize);\n-    assert_eq!(unsafe { *ptr }, 3); //~ ERROR: Undefined Behavior: dereferencing pointer failed\n+    assert_eq!(unsafe { *ptr }, 3); //~ ERROR: is a dangling pointer\n }"}, {"sha": "73095bb2fc94bf6551cda25f984bbdcfd16aa8a4", "filename": "tests/fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     retarget(&mut target_alias, target);\n     // now `target_alias` points to the same thing as `target`\n     *target = 13;\n-    let _val = *target_alias; //~ ERROR: borrow stack\n+    let _val = *target_alias; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n }"}, {"sha": "87a6b7bbd67ecd9af9d340c9903c24e38bb51d0d", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -1,4 +1,4 @@\n-fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n+fn demo_box_advanced_unique(mut our: Box<i32>) -> i32 {\n     unknown_code_1(&*our);\n \n     // This \"re-asserts\" uniqueness of the reference: After writing, we know\n@@ -24,10 +24,10 @@ fn unknown_code_1(x: &i32) {\n \n fn unknown_code_2() {\n     unsafe {\n-        *LEAK = 7; //~ ERROR: borrow stack\n+        *LEAK = 7; //~ ERROR: /write access .* tag does not exist in the borrow stack/\n     }\n }\n \n fn main() {\n-    demo_mut_advanced_unique(Box::new(0));\n+    demo_box_advanced_unique(Box::new(0));\n }"}, {"sha": "7214ef27be33cc4f32d740c0e2d5f82388ae4a7c", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -21,15 +21,15 @@ LL |     *our = 5;\n    |     ^^^^^^^^\n    = note: backtrace:\n    = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n-note: inside `demo_mut_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n+note: inside `demo_box_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL |     unknown_code_2();\n    |     ^^^^^^^^^^^^^^^^\n note: inside `main` at $DIR/box_exclusive_violation1.rs:LL:CC\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n-LL |     demo_mut_advanced_unique(Box::new(0));\n+LL |     demo_box_advanced_unique(Box::new(0));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8615a9a58ad965585fb85140d3fc33237b7aec3e", "filename": "tests/fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let v1 = safe::as_mut_slice(&v);\n     let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /write access .* tag does not exist in the borrow stack/\n }"}, {"sha": "db64d559c517cdcc42ca7a7f375522831a5e9472", "filename": "tests/fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -19,7 +19,7 @@ mod safe {\n fn main() {\n     let mut array = [1, 2, 3, 4];\n     let (a, b) = safe::split_at_mut(&mut array, 0);\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /reborrow .* tag does not exist in the borrow stack/\n     a[1] = 5;\n     b[1] = 6;\n }"}, {"sha": "0b4fb0ccd33bdb32b38dc7d0f2f1909bcff3de44", "filename": "tests/fail/stacked_borrows/exposed_only_ro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let _fool = &mut x as *mut i32; // this would have fooled the old untagged pointer logic\n     let addr = (&x as *const i32).expose_addr();\n     let ptr = std::ptr::from_exposed_addr_mut::<i32>(addr);\n-    unsafe { *ptr = 0 }; //~ ERROR: borrow stack\n+    unsafe { *ptr = 0 }; //~ ERROR: /write access using <wildcard> .* no exposed tags have suitable permission in the borrow stack/\n }"}, {"sha": "1dea282739ce1e8543fec8a126cd15d13c5134ff", "filename": "tests/fail/stacked_borrows/illegal_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /read access .* tag does not exist in the borrow stack/\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "b765b4d9ce99d28b7c3d1b58cb7b19f2e707d687", "filename": "tests/fail/stacked_borrows/illegal_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /read access .* tag does not exist in the borrow stack/\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "43ea0a0e84da5969f188dd59444f64987de50f4b", "filename": "tests/fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     callee(xref1_sneaky);\n     // ... though any use of it will invalidate our ref.\n     let _val = *xref2;\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /read access .* tag does not exist in the borrow stack/\n }\n \n fn callee(xref1: HiddenRef) {"}, {"sha": "a9ecb88d3520baea85d3e766ef5e9a79cd594b13", "filename": "tests/fail/stacked_borrows/illegal_read4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xraw = xref1 as *mut _;\n     let xref2 = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n-    let _illegal = *xref2; //~ ERROR: borrow stack\n+    let _illegal = *xref2; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n }"}, {"sha": "228c15f72e17331dee6f0e761757c97fddb77424", "filename": "tests/fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /read access .* tag does not exist in the borrow stack/\n }"}, {"sha": "4af22580ab64fd968838811cd8dc44ef3ca8ebf9", "filename": "tests/fail/stacked_borrows/illegal_read6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         let raw = x as *mut _;\n         let x = &mut *x; // kill `raw`\n         let _y = &*x; // this should not activate `raw` again\n-        let _val = *raw; //~ ERROR: borrow stack\n+        let _val = *raw; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "c0d3816f4475b6690503ec661922763f487cc952", "filename": "tests/fail/stacked_borrows/illegal_read7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -17,6 +17,6 @@ fn main() {\n         // without invalidating `x`.  That would be bad!  It would mean that creating `shr`\n         // leaked `x` to `raw`.\n         let _val = ptr::read(raw);\n-        let _val = *x.get_mut(); //~ ERROR: borrow stack\n+        let _val = *x.get_mut(); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "f0a1658a5a23a4b9659eaad4a0d621b85d739b4f", "filename": "tests/fail/stacked_borrows/illegal_read8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -10,6 +10,6 @@ fn main() {\n         let _val = *y2;\n         let _val = *y1;\n         *y2 += 1;\n-        let _fail = *y1; //~ ERROR: borrow stack\n+        let _fail = *y1; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "76516b7d924be07e4e779ba3d663f7d1f36bf224", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         // And we test that it has uniqueness by doing a conflicting write.\n         *exposed_ptr = 0;\n         // Stack: Unknown(<N)\n-        let _val = *root2; //~ ERROR: borrow stack\n+        let _val = *root2; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "97e0bf40c0dd3075c293be9786795d2ab2f1a29d", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         // Stack: Unknown(<N), Disabled(N)\n         // collapsed to Unknown(<N)\n         // Stack if _fool existed: Unknown(<N), Disabled(N), SRW(N+1); collapsed to Unknown(<N+2) which would not cause an ERROR\n-        let _val = *root2; //~ ERROR: borrow stack\n+        let _val = *root2; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "f28401938a925e150f09d28de6eae2b8ba56c3cd", "filename": "tests/fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let xref = &*target;\n     {\n         let x: *mut u32 = xref as *const _ as *mut _;\n-        unsafe { *x = 42 }; //~ ERROR: only grants SharedReadOnly permission\n+        unsafe { *x = 42 }; //~ ERROR: /write access .* tag only grants SharedReadOnly permission/\n     }\n     let _x = *xref;\n }"}, {"sha": "70c51e671fe8499a1b0601700c6f5eeebaf45462", "filename": "tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13 }; //~ ERROR: borrow stack\n+    unsafe { *target2 = 13 }; //~ ERROR: /write access .* tag does not exist in the borrow stack/\n     let _val = *target;\n }"}, {"sha": "6f55b63cb5c647b85347ff2f2ddf435c8e738d3b", "filename": "tests/fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42 }; //~ ERROR: only grants SharedReadOnly permission\n+    unsafe { *ptr = 42 }; //~ ERROR: /write access .* only grants SharedReadOnly permission/\n     let _val = *r#ref;\n }"}, {"sha": "4c5d5a4f66577ddd1219b6150b1a2b5f3f40cddc", "filename": "tests/fail/stacked_borrows/illegal_write4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let _ptr = reference as *const _ as *mut i32; // raw ptr, with raw tag\n     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n     // Now we retag, making our ref top-of-stack -- and, in particular, unfreezing.\n-    let _val = *reference; //~ ERROR: borrow stack\n+    let _val = *reference; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n }"}, {"sha": "1c655dc0a0fb430304173edf3f4a3430c0ba193b", "filename": "tests/fail/stacked_borrows/illegal_write5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     callee(xraw);\n     // ... though any use of raw value will invalidate our ref.\n     let _val = *xref;\n-    //~^ ERROR: borrow stack\n+    //~^ ERROR: /read access .* tag does not exist in the borrow stack/\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "1e032840917eb18b32022dbeec53c839678f0187", "filename": "tests/fail/stacked_borrows/illegal_write6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -7,6 +7,6 @@ fn main() {\n fn foo(a: &mut u32, y: *mut u32) -> u32 {\n     *a = 1;\n     let _b = &*a;\n-    unsafe { *y = 2 }; //~ ERROR: not granting access to tag\n+    unsafe { *y = 2 }; //~ ERROR: /not granting access .* because incompatible item .* is protected/\n     return *a;\n }"}, {"sha": "0e34c5c98fc1f6c2645d9b98749fe4a6083abd9d", "filename": "tests/fail/stacked_borrows/illegal_write_despite_exposed1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -9,8 +9,9 @@ fn main() {\n         let root2 = &*exposed_ptr;\n         // Stack: Unknown(<N), SRO(N), SRO(N+1)\n         // And we test that it is read-only by doing a conflicting write.\n+        // (The write is still fine, using the `root as *mut i32` provenance which got exposed.)\n         *exposed_ptr = 0;\n         // Stack: Unknown(<N)\n-        let _val = *root2; //~ ERROR: borrow stack\n+        let _val = *root2; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "fda203910a4439e90893d04d00cb2987464c435f", "filename": "tests/fail/stacked_borrows/interior_mut1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n         // stack: [c: SharedReadWrite]\n \n-        let _val = *inner_shr.get(); //~ ERROR: borrow stack\n+        let _val = *inner_shr.get(); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "7f8c16c488e795d9f60d19e8e58901d4b9c569fc", "filename": "tests/fail/stacked_borrows/interior_mut2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -25,6 +25,6 @@ fn main() {\n         // stack: [c: SharedReadWrite]\n \n         // now this does not work any more\n-        let _val = *inner_shr.get(); //~ ERROR: borrow stack\n+        let _val = *inner_shr.get(); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "4e3a16b96d0254cd7252ffc8c02792b91c75486a", "filename": "tests/fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let xref = unsafe { &mut *xraw };\n     let xref_in_mem = Box::new(xref);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    let _val = *xref_in_mem; //~ ERROR: borrow stack\n+    let _val = *xref_in_mem; //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "fb279e4710d124a4cde1c5909d0d196f39baaf50", "filename": "tests/fail/stacked_borrows/load_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let xref = unsafe { &*xraw };\n     let xref_in_mem = Box::new(xref);\n     unsafe { *xraw = 42 }; // unfreeze\n-    let _val = *xref_in_mem; //~ ERROR: borrow stack\n+    let _val = *xref_in_mem; //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "f6fcdf1acdd2a1c9d97eb1cc0b847536c3d5d3ac", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -24,7 +24,7 @@ fn unknown_code_1(x: &i32) {\n \n fn unknown_code_2() {\n     unsafe {\n-        *LEAK = 7; //~ ERROR: borrow stack\n+        *LEAK = 7; //~ ERROR: /write access .* tag does not exist in the borrow stack/\n     }\n }\n "}, {"sha": "2305ce746512afcdda5c74dd9a8f22b08578d7c2", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let mut ptr2 = ptr1.clone();\n         let raw1 = ptr1.as_mut();\n         let _raw2 = ptr2.as_mut();\n-        let _val = *raw1; //~ ERROR: borrow stack\n+        let _val = *raw1; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "4262157d1e3df9ac50df1272a4e04a062795fec1", "filename": "tests/fail/stacked_borrows/outdated_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let y: *const i32 = &x;\n     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n \n-    assert_eq!(unsafe { *y }, 1); //~ ERROR: borrow stack\n+    assert_eq!(unsafe { *y }, 1); //~ ERROR: /read access .* tag does not exist in the borrow stack/\n \n     assert_eq!(x, 1);\n }"}, {"sha": "55c93981e3cd9c8859e635c7c3131df804ab4025", "filename": "tests/fail/stacked_borrows/pass_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    foo(xref); //~ ERROR: borrow stack\n+    foo(xref); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "db8e6681e0de732986a4df2c17b30f2a02b43412", "filename": "tests/fail/stacked_borrows/pass_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &*xraw };\n     unsafe { *xraw = 42 }; // unfreeze\n-    foo(xref); //~ ERROR: borrow stack\n+    foo(xref); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "e1c3ff4928983b1985aa80258671c9cdb10bc4eb", "filename": "tests/fail/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,7 +8,7 @@ fn fun1(x: &mut u8) {\n \n fn fun2() {\n     // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR: borrow stack\n+    let _x = unsafe { *PTR }; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n }\n \n fn main() {"}, {"sha": "15306e0825b22ffbeb77b017b0551af33f90c137", "filename": "tests/fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let raw2 = &mut l as *mut _; // invalidates raw1\n     // Without raw pointer tracking, Stacked Borrows cannot distinguish raw1 and raw2, and thus\n     // fails to realize that raw1 should not be used any more.\n-    unsafe { *raw1 = 13 }; //~ ERROR: does not exist in the borrow stack\n+    unsafe { *raw1 = 13 }; //~ ERROR: /write access .* tag does not exist in the borrow stack/\n     unsafe { *raw2 = 13 };\n }"}, {"sha": "1f379d4a77e7ad31fbf3565a81cd87b8a8d3bcf0", "filename": "tests/fail/stacked_borrows/return_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &mut i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &mut (*xraw).1 };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR: borrow stack\n+    ret //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }\n \n fn main() {"}, {"sha": "da3401260e1e9b94d89efa54763f59490d6cf45a", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -10,7 +10,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {} //~ ERROR: borrow stack\n+        Some(_x) => {} //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n         None => {}\n     }\n }"}, {"sha": "2184d20b1cfaf57d93c3cbef435786238e86003a", "filename": "tests/fail/stacked_borrows/return_invalid_mut_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn foo(x: &mut (i32, i32)) -> (&mut i32,) {\n }\n \n fn main() {\n-    foo(&mut (1, 2)).0; //~ ERROR: borrow stack\n+    foo(&mut (1, 2)).0; //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "b1d16c025ebf0bb8d2d15ec0078d0ed09a438773", "filename": "tests/fail/stacked_borrows/return_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &(*xraw).1 };\n     unsafe { *xraw = (42, 23) }; // unfreeze\n-    ret //~ ERROR: borrow stack\n+    ret //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }\n \n fn main() {"}, {"sha": "e9faa945206eb45df9980f62a46dba8fb6f076df", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -9,7 +9,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {} //~ ERROR: borrow stack\n+        Some(_x) => {} //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n         None => {}\n     }\n }"}, {"sha": "11eb4de56c9fcade16c9783e144e59dd6c4d746e", "filename": "tests/fail/stacked_borrows/return_invalid_shr_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -8,5 +8,5 @@ fn foo(x: &mut (i32, i32)) -> (&i32,) {\n }\n \n fn main() {\n-    foo(&mut (1, 2)).0; //~ ERROR: borrow stack\n+    foo(&mut (1, 2)).0; //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n }"}, {"sha": "01b2775d9d3636bebd0a929e556fed954e07e848", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n         let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n         shr_rw.set(1);\n-        y.get_mut(); //~ ERROR: borrow stack\n+        y.get_mut(); //~ ERROR: /reborrow .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "012e9561ca8487fc0da6037246fb0b51a5a73a1d", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n         let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n         shr_rw.replace(1);\n-        let _val = *y; //~ ERROR: borrow stack\n+        let _val = *y; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n     }\n }"}, {"sha": "d1322dc6e57bbf3605c204bea87eac1b21584fa1", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -10,6 +10,6 @@ fn main() {\n \n fn unknown_code(x: &i32) {\n     unsafe {\n-        *(x as *const i32 as *mut i32) = 7; //~ ERROR: only grants SharedReadOnly permission\n+        *(x as *const i32 as *mut i32) = 7; //~ ERROR: /write access .* only grants SharedReadOnly permission/\n     }\n }"}, {"sha": "233b927dfc7ee73554ed53d434f1603ca2ef2b8c", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13 }; //~ ERROR: borrow stack\n+    unsafe { *raw = 13 }; //~ ERROR: /write access .* tag does not exist in the borrow stack/\n }"}, {"sha": "49c0e66d857010846fe384c501909eac927219e5", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n     unsafe {\n-        *raw = 13; //~ ERROR: borrow stack\n+        *raw = 13; //~ ERROR: /write access .* no exposed tags/\n     }\n }"}, {"sha": "a25d9b5162ec8df7c638abb7333808b4e01a9a31", "filename": "tests/fail/stacked_borrows/unescaped_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -3,5 +3,5 @@ static ARRAY: [u8; 2] = [0, 1];\n fn main() {\n     let ptr_to_first = &ARRAY[0] as *const u8;\n     // Illegally use this to access the 2nd element.\n-    let _val = unsafe { *ptr_to_first.add(1) }; //~ ERROR: borrow stack\n+    let _val = unsafe { *ptr_to_first.add(1) }; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n }"}, {"sha": "11065186fc495ced58f0233dbeb849fa5f314030", "filename": "tests/fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757e88c901f7b8fed41829729b6a23317be12b3e/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs?ref=757e88c901f7b8fed41829729b6a23317be12b3e", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-strict-provenance\n-//@error-pattern: does not exist in the borrow stack\n+//@error-pattern: /reborrow .* tag does not exist in the borrow stack/\n \n fn main() {\n     unsafe {"}]}