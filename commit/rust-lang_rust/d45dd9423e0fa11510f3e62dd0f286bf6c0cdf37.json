{"sha": "d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWRkOTQyM2UwZmExMTUxMGYzZTYyZGQwZjI4NmJmNmMwY2RmMzc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-11-21T19:39:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:21:17Z"}, "message": "make CrateStore a trait object\n\nrustdoc still broken", "tree": {"sha": "4c37217cfff610906c14faf3b6ae2448c2b2d001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c37217cfff610906c14faf3b6ae2448c2b2d001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "html_url": "https://github.com/rust-lang/rust/commit/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11dbb69bd14f52940d54981b883814d52153dc57", "url": "https://api.github.com/repos/rust-lang/rust/commits/11dbb69bd14f52940d54981b883814d52153dc57", "html_url": "https://github.com/rust-lang/rust/commit/11dbb69bd14f52940d54981b883814d52153dc57"}], "stats": {"total": 343, "additions": 200, "deletions": 143}, "files": [{"sha": "191b1705371ccce1f6da7233e7548f6fc3927cf2", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -43,12 +43,14 @@ use log;\n \n pub struct LocalCrateReader<'a, 'b:'a> {\n     sess: &'a Session,\n+    cstore: &'a CStore,\n     creader: CrateReader<'a>,\n     ast_map: &'a hir_map::Map<'b>,\n }\n \n pub struct CrateReader<'a> {\n     sess: &'a Session,\n+    cstore: &'a CStore,\n     next_crate_num: ast::CrateNum,\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n }\n@@ -113,6 +115,7 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n \n \n fn register_native_lib(sess: &Session,\n+                       cstore: &CStore,\n                        span: Option<Span>,\n                        name: String,\n                        kind: cstore::NativeLibraryKind) {\n@@ -139,7 +142,7 @@ fn register_native_lib(sess: &Session,\n             None => sess.err(msg),\n         }\n     }\n-    sess.cstore.add_used_library(name, kind);\n+    cstore.add_used_library(name, kind);\n }\n \n // Extra info about a crate loaded for plugins or exported macros.\n@@ -164,10 +167,11 @@ impl PMDSource {\n }\n \n impl<'a> CrateReader<'a> {\n-    pub fn new(sess: &'a Session) -> CrateReader<'a> {\n+    pub fn new(sess: &'a Session, cstore: &'a CStore) -> CrateReader<'a> {\n         CrateReader {\n             sess: sess,\n-            next_crate_num: sess.cstore.next_crate_num(),\n+            cstore: cstore,\n+            next_crate_num: cstore.next_crate_num(),\n             foreign_item_map: FnvHashMap(),\n         }\n     }\n@@ -224,7 +228,7 @@ impl<'a> CrateReader<'a> {\n     fn existing_match(&self, name: &str, hash: Option<&Svh>, kind: PathKind)\n                       -> Option<ast::CrateNum> {\n         let mut ret = None;\n-        self.sess.cstore.iter_crate_data(|cnum, data| {\n+        self.cstore.iter_crate_data(|cnum, data| {\n             if data.name != name { return }\n \n             match hash {\n@@ -242,7 +246,7 @@ impl<'a> CrateReader<'a> {\n             // We're also sure to compare *paths*, not actual byte slices. The\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n-            let source = self.sess.cstore.do_get_used_crate_source(cnum).unwrap();\n+            let source = self.cstore.do_get_used_crate_source(cnum).unwrap();\n             if let Some(locs) = self.sess.opts.externs.get(name) {\n                 let found = locs.iter().any(|l| {\n                     let l = fs::canonicalize(l).ok();\n@@ -342,8 +346,8 @@ impl<'a> CrateReader<'a> {\n             cnum: cnum,\n         };\n \n-        self.sess.cstore.set_crate_data(cnum, cmeta.clone());\n-        self.sess.cstore.add_used_crate_source(source.clone());\n+        self.cstore.set_crate_data(cnum, cmeta.clone());\n+        self.cstore.add_used_crate_source(source.clone());\n         (cnum, cmeta, source)\n     }\n \n@@ -398,7 +402,7 @@ impl<'a> CrateReader<'a> {\n                 let meta_hash = decoder::get_crate_hash(library.metadata\n                                                                .as_slice());\n                 let mut result = LookupResult::Loaded(library);\n-                self.sess.cstore.iter_crate_data(|cnum, data| {\n+                self.cstore.iter_crate_data(|cnum, data| {\n                     if data.name() == name && meta_hash == data.hash() {\n                         assert!(hash.is_none());\n                         result = LookupResult::Previous(cnum);\n@@ -410,11 +414,11 @@ impl<'a> CrateReader<'a> {\n \n         match result {\n             LookupResult::Previous(cnum) => {\n-                let data = self.sess.cstore.get_crate_data(cnum);\n+                let data = self.cstore.get_crate_data(cnum);\n                 if explicitly_linked && !data.explicitly_linked.get() {\n                     data.explicitly_linked.set(explicitly_linked);\n                 }\n-                (cnum, data, self.sess.cstore.do_get_used_crate_source(cnum).unwrap())\n+                (cnum, data, self.cstore.do_get_used_crate_source(cnum).unwrap())\n             }\n             LookupResult::Loaded(library) => {\n                 self.register_crate(root, ident, name, span, library,\n@@ -512,7 +516,7 @@ impl<'a> CrateReader<'a> {\n         let source_name = format!(\"<{} macros>\", item.ident);\n         let mut macros = vec![];\n         decoder::each_exported_macro(ekrate.metadata.as_slice(),\n-                                     &*self.sess.cstore.intr,\n+                                     &*self.cstore.intr,\n             |name, attrs, body| {\n                 // NB: Don't use parse::parse_tts_from_source_str because it parses with\n                 // quote_depth > 0.\n@@ -593,14 +597,14 @@ impl<'a> CrateReader<'a> {\n     }\n \n     fn register_statically_included_foreign_items(&mut self) {\n-        let libs = self.sess.cstore.get_used_libraries();\n+        let libs = self.cstore.get_used_libraries();\n         for (lib, list) in self.foreign_item_map.iter() {\n             let is_static = libs.borrow().iter().any(|&(ref name, kind)| {\n                 lib == name && kind == cstore::NativeStatic\n             });\n             if is_static {\n                 for id in list {\n-                    self.sess.cstore.add_statically_included_foreign_item(*id);\n+                    self.cstore.add_statically_included_foreign_item(*id);\n                 }\n             }\n         }\n@@ -614,7 +618,7 @@ impl<'a> CrateReader<'a> {\n         // also bail out as we don't need to implicitly inject one.\n         let mut needs_allocator = false;\n         let mut found_required_allocator = false;\n-        self.sess.cstore.iter_crate_data(|cnum, data| {\n+        self.cstore.iter_crate_data(|cnum, data| {\n             needs_allocator = needs_allocator || data.needs_allocator();\n             if data.is_allocator() {\n                 debug!(\"{} required by rlib and is an allocator\", data.name());\n@@ -693,7 +697,7 @@ impl<'a> CrateReader<'a> {\n         //\n         // Here we inject a dependency from all crates with #![needs_allocator]\n         // to the crate tagged with #![allocator] for this compilation unit.\n-        self.sess.cstore.iter_crate_data(|cnum, data| {\n+        self.cstore.iter_crate_data(|cnum, data| {\n             if !data.needs_allocator() {\n                 return\n             }\n@@ -707,10 +711,10 @@ impl<'a> CrateReader<'a> {\n \n         fn validate(me: &CrateReader, krate: ast::CrateNum,\n                     allocator: ast::CrateNum) {\n-            let data = me.sess.cstore.get_crate_data(krate);\n+            let data = me.cstore.get_crate_data(krate);\n             if data.needs_allocator() {\n                 let krate_name = data.name();\n-                let data = me.sess.cstore.get_crate_data(allocator);\n+                let data = me.cstore.get_crate_data(allocator);\n                 let alloc_name = data.name();\n                 me.sess.err(&format!(\"the allocator crate `{}` cannot depend \\\n                                       on a crate that needs an allocator, but \\\n@@ -726,10 +730,11 @@ impl<'a> CrateReader<'a> {\n }\n \n impl<'a, 'b> LocalCrateReader<'a, 'b> {\n-    pub fn new(sess: &'a Session, map: &'a hir_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n+    pub fn new(sess: &'a Session, cstore: &'a CStore, map: &'a hir_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n         LocalCrateReader {\n             sess: sess,\n-            creader: CrateReader::new(sess),\n+            cstore: cstore,\n+            creader: CrateReader::new(sess, cstore),\n             ast_map: map,\n         }\n     }\n@@ -743,19 +748,19 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n         self.creader.inject_allocator_crate();\n \n         if log_enabled!(log::INFO) {\n-            dump_crates(&self.sess.cstore);\n+            dump_crates(&self.cstore);\n         }\n \n         for &(ref name, kind) in &self.sess.opts.libs {\n-            register_native_lib(self.sess, None, name.clone(), kind);\n+            register_native_lib(self.sess, self.cstore, None, name.clone(), kind);\n         }\n         self.creader.register_statically_included_foreign_items();\n     }\n \n     fn process_crate(&self, c: &hir::Crate) {\n         for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             match a.value_str() {\n-                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n+                Some(ref linkarg) => self.cstore.add_used_link_args(&linkarg),\n                 None => { /* fallthrough */ }\n             }\n         }\n@@ -783,7 +788,7 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n                         self.ast_map.with_path(i.id, |path| {\n                             cmeta.update_local_path(path)\n                         });\n-                        self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+                        self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n                     }\n                     None => ()\n                 }\n@@ -801,7 +806,7 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n         // First, add all of the custom #[link_args] attributes\n         for m in i.attrs.iter().filter(|a| a.check_name(\"link_args\")) {\n             if let Some(linkarg) = m.value_str() {\n-                self.sess.cstore.add_used_link_args(&linkarg);\n+                self.cstore.add_used_link_args(&linkarg);\n             }\n         }\n \n@@ -836,7 +841,7 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n                     InternedString::new(\"foo\")\n                 }\n             };\n-            register_native_lib(self.sess, Some(m.span), n.to_string(), kind);\n+            register_native_lib(self.sess, self.cstore, Some(m.span), n.to_string(), kind);\n         }\n \n         // Finally, process the #[linked_from = \"...\"] attribute"}, {"sha": "706033f815c38b9dd7a08e6ebdfead66f702e88e", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -94,7 +94,7 @@ enum_from_u32! {\n \n // Where a crate came from on the local filesystem. One of these two options\n // must be non-None.\n-#[derive(PartialEq, Clone)]\n+#[derive(PartialEq, Clone, Debug)]\n pub struct CrateSource {\n     pub dylib: Option<(PathBuf, PathKind)>,\n     pub rlib: Option<(PathBuf, PathKind)>,\n@@ -266,7 +266,7 @@ impl CStore {\n         self.statically_included_foreign_items.borrow_mut().insert(id);\n     }\n \n-    pub fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool {\n+    pub fn do_is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool {\n         self.statically_included_foreign_items.borrow().contains(&id)\n     }\n }"}, {"sha": "84a95f047951a6cb3468f932f6f65d7083254525", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -22,13 +22,12 @@ use back::svh::Svh;\n use metadata::cstore::crate_metadata;\n use metadata::cstore::LOCAL_CRATE;\n use metadata::common::*;\n-use metadata::csearch::MethodInfo;\n-use metadata::csearch;\n use metadata::cstore;\n use metadata::encoder::def_to_u64;\n use metadata::index;\n use metadata::inline::InlinedItem;\n use metadata::tydecode::TyDecoder;\n+use metadata::util::FoundAst;\n use middle::def;\n use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n@@ -771,24 +770,24 @@ pub type DecodeInlinedItem<'a> =\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: DefIndex,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n-                                -> csearch::FoundAst<'tcx> {\n+                                -> FoundAst<'tcx> {\n     debug!(\"Looking up item: {:?}\", id);\n     let item_doc = cdata.lookup_item(id);\n     let item_did = item_def_id(item_doc, cdata);\n     let path = item_path(item_doc).split_last().unwrap().1.to_vec();\n     let def_path = def_path(cdata, id);\n     match decode_inlined_item(cdata, tcx, path, def_path, item_doc, item_did) {\n-        Ok(ii) => csearch::FoundAst::Found(ii),\n+        Ok(ii) => FoundAst::Found(ii),\n         Err((path, def_path)) => {\n             match item_parent_item(cdata, item_doc) {\n                 Some(did) => {\n                     let parent_item = cdata.lookup_item(did.index);\n                     match decode_inlined_item(cdata, tcx, path, def_path, parent_item, did) {\n-                        Ok(ii) => csearch::FoundAst::FoundParent(did, ii),\n-                        Err(_) => csearch::FoundAst::NotFound\n+                        Ok(ii) => FoundAst::FoundParent(did, ii),\n+                        Err(_) => FoundAst::NotFound\n                     }\n                 }\n-                None => csearch::FoundAst::NotFound\n+                None => FoundAst::NotFound\n             }\n         }\n     }\n@@ -997,42 +996,6 @@ pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,\n     }).collect()\n }\n \n-pub fn get_methods_if_impl(intr: Rc<IdentInterner>,\n-                                  cdata: Cmd,\n-                                  node_id: DefIndex)\n-                               -> Option<Vec<MethodInfo> > {\n-    let item = cdata.lookup_item(node_id);\n-    if item_family(item) != Impl {\n-        return None;\n-    }\n-\n-    // If this impl implements a trait, don't consider it.\n-    if reader::tagged_docs(item, tag_item_trait_ref).next().is_some() {\n-        return None;\n-    }\n-\n-    let impl_method_ids = reader::tagged_docs(item, tag_item_impl_item)\n-        .map(|impl_method_doc| item_def_id(impl_method_doc, cdata));\n-\n-    let mut impl_methods = Vec::new();\n-    for impl_method_id in impl_method_ids {\n-        let impl_method_doc = cdata.lookup_item(impl_method_id.index);\n-        let family = item_family(impl_method_doc);\n-        match family {\n-            StaticMethod | Method => {\n-                impl_methods.push(MethodInfo {\n-                    name: item_name(&*intr, impl_method_doc),\n-                    def_id: item_def_id(impl_method_doc, cdata),\n-                    vis: item_visibility(impl_method_doc),\n-                });\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    return Some(impl_methods);\n-}\n-\n /// If node_id is the constructor of a tuple struct, retrieve the NodeId of\n /// the actual type definition, otherwise, return None\n pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,"}, {"sha": "d86d6c25cce02d29c75bb669bbf8eada2d776150", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -22,6 +22,7 @@ use metadata::decoder;\n use metadata::tyencode;\n use metadata::index::{self, IndexData};\n use metadata::inline::InlinedItemRef;\n+use metadata::util::CrateStore;\n use middle::def;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n@@ -1652,8 +1653,7 @@ fn encode_lang_items(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n fn encode_native_libraries(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n     rbml_w.start_tag(tag_native_libraries);\n \n-    for &(ref lib, kind) in ecx.tcx.sess.cstore.get_used_libraries()\n-                               .borrow().iter() {\n+    for &(ref lib, kind) in ecx.tcx.sess.cstore.used_libraries().iter() {\n         match kind {\n             cstore::NativeStatic => {} // these libraries are not propagated\n             cstore::NativeFramework | cstore::NativeUnknown => {"}, {"sha": "b08f5d0640eb384ffd88f7d27fea0d5b2e2ce541", "filename": "src/librustc/metadata/macro_import.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -12,6 +12,7 @@\n \n use session::Session;\n use metadata::creader::CrateReader;\n+use metadata::cstore::CStore;\n \n use std::collections::{HashSet, HashMap};\n use syntax::codemap::Span;\n@@ -30,11 +31,11 @@ struct MacroLoader<'a> {\n }\n \n impl<'a> MacroLoader<'a> {\n-    fn new(sess: &'a Session) -> MacroLoader<'a> {\n+    fn new(sess: &'a Session, cstore: &'a CStore) -> MacroLoader<'a> {\n         MacroLoader {\n             sess: sess,\n             span_whitelist: HashSet::new(),\n-            reader: CrateReader::new(sess),\n+            reader: CrateReader::new(sess, cstore),\n             macros: vec![],\n         }\n     }\n@@ -45,8 +46,10 @@ pub fn call_bad_macro_reexport(a: &Session, b: Span) {\n }\n \n /// Read exported macros.\n-pub fn read_macro_defs(sess: &Session, krate: &ast::Crate) -> Vec<ast::MacroDef> {\n-    let mut loader = MacroLoader::new(sess);\n+pub fn read_macro_defs(sess: &Session, cstore: &CStore, krate: &ast::Crate)\n+                       -> Vec<ast::MacroDef>\n+{\n+    let mut loader = MacroLoader::new(sess, cstore);\n \n     // We need to error on `#[macro_use] extern crate` when it isn't at the\n     // crate root, because `$crate` won't work properly. Identify these by"}, {"sha": "052ed81394b05cbca580fd379ab75dc39babfd6c", "filename": "src/librustc/metadata/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmod.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -15,7 +15,6 @@ pub mod encoder;\n pub mod decoder;\n pub mod creader;\n pub mod cstore;\n-pub mod csearch;\n pub mod index;\n pub mod loader;\n pub mod filesearch;"}, {"sha": "4618bd46ffa328cc77cda9532cf0c78203990cdb", "filename": "src/librustc/metadata/util.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmetadata%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Futil.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back::svh::Svh;\n use front::map as ast_map;\n use metadata::cstore;\n use metadata::decoder;\n@@ -31,7 +32,6 @@ use rustc_front::hir;\n \n pub use metadata::common::LinkMeta;\n pub use metadata::creader::validate_crate_name;\n-pub use metadata::csearch::FoundAst;\n pub use metadata::cstore::CrateSource;\n pub use metadata::cstore::LinkagePreference;\n pub use metadata::cstore::NativeLibraryKind;\n@@ -48,6 +48,12 @@ pub struct ChildItem {\n     pub vis: hir::Visibility\n }\n \n+pub enum FoundAst<'ast> {\n+    Found(&'ast InlinedItem),\n+    FoundParent(DefId, &'ast InlinedItem),\n+    NotFound,\n+}\n+\n pub trait CrateStore<'tcx> : Any {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n@@ -101,6 +107,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn is_static_method(&self, did: DefId) -> bool;\n     fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n     fn is_static(&self, did: DefId) -> bool;\n+    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n@@ -111,6 +118,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;\n     fn is_allocator(&self, cnum: ast::CrateNum) -> bool;\n     fn crate_name(&self, cnum: ast::CrateNum) -> String;\n+    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;\n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n     fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>;\n     fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;\n@@ -125,13 +133,19 @@ pub trait CrateStore<'tcx> : Any {\n     // misc. metadata\n     fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>;\n+    // This is basically a 1-based range of ints, which is a little\n+    // silly - I may fix that.\n+    fn crates(&self) -> Vec<ast::CrateNum>;\n+    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>;\n+    fn used_link_args(&self) -> Vec<String>;\n \n     // utility functions\n     fn metadata_filename(&self) -> &str;\n     fn metadata_section_name(&self, target: &Target) -> &str;\n     fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;\n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;\n+    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n     fn encode_metadata(&self,\n                        tcx: &ty::ctxt<'tcx>,\n                        reexports: &def::ExportMap,\n@@ -356,6 +370,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::is_static(&*cdata, did.index)\n     }\n \n+    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool\n+    {\n+        self.do_is_statically_included_foreign_item(id)\n+    }\n+\n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n                                 -> Vec<(ast::CrateNum, LinkagePreference)>\n     {\n@@ -400,6 +419,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).name.clone()\n     }\n \n+    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh\n+    {\n+        let cdata = self.get_crate_data(cnum);\n+        decoder::get_crate_hash(cdata.data())\n+    }\n+\n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>\n     {\n         let cdata = self.get_crate_data(cnum);\n@@ -480,6 +505,23 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::maybe_get_item_ast(&*cdata, tcx, def.index, decode_inlined_item)\n     }\n \n+    fn crates(&self) -> Vec<ast::CrateNum>\n+    {\n+        let mut result = vec![];\n+        self.iter_crate_data(|cnum, _| result.push(cnum));\n+        result\n+    }\n+\n+    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>\n+    {\n+        self.get_used_libraries().borrow().clone()\n+    }\n+\n+    fn used_link_args(&self) -> Vec<String>\n+    {\n+        self.get_used_link_args().borrow().clone()\n+    }\n+\n     fn metadata_filename(&self) -> &str\n     {\n         loader::METADATA_FILENAME\n@@ -504,6 +546,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.do_get_used_crate_source(cnum).unwrap()\n     }\n \n+    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>\n+    {\n+        self.find_extern_mod_stmt_cnum(emod_id)\n+    }\n+\n     fn encode_metadata(&self,\n                        tcx: &ty::ctxt<'tcx>,\n                        reexports: &def::ExportMap,"}, {"sha": "229ed5984b06e047c925ba6e7cbf3d2988d028a1", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -123,12 +123,12 @@ fn calculate_type(sess: &session::Session,\n                 Some(v) => return v,\n                 None => {}\n             }\n-            sess.cstore.iter_crate_data(|cnum, data| {\n+            for cnum in sess.cstore.crates() {\n                 let src = sess.cstore.used_crate_source(cnum);\n-                if src.rlib.is_some() { return }\n+                if src.rlib.is_some() { continue }\n                 sess.err(&format!(\"dependency `{}` not found in rlib format\",\n-                                 data.name));\n-            });\n+                                  sess.cstore.crate_name(cnum)));\n+            }\n             return Vec::new();\n         }\n \n@@ -151,10 +151,11 @@ fn calculate_type(sess: &session::Session,\n     // Sweep all crates for found dylibs. Add all dylibs, as well as their\n     // dependencies, ensuring there are no conflicts. The only valid case for a\n     // dependency to be relied upon twice is for both cases to rely on a dylib.\n-    sess.cstore.iter_crate_data(|cnum, data| {\n+    for cnum in sess.cstore.crates() {\n+        let name = sess.cstore.crate_name(cnum);\n         let src = sess.cstore.used_crate_source(cnum);\n         if src.dylib.is_some() {\n-            info!(\"adding dylib: {}\", data.name);\n+            info!(\"adding dylib: {}\", name);\n             add_library(sess, cnum, RequireDynamic, &mut formats);\n             let deps = sess.cstore.dylib_dependency_formats(cnum);\n             for &(depnum, style) in &deps {\n@@ -163,11 +164,12 @@ fn calculate_type(sess: &session::Session,\n                 add_library(sess, depnum, style, &mut formats);\n             }\n         }\n-    });\n+    }\n \n     // Collect what we've got so far in the return vector.\n-    let mut ret = (1..sess.cstore.next_crate_num()).map(|i| {\n-        match formats.get(&i) {\n+    let last_crate = sess.cstore.crates().len() as ast::CrateNum;\n+    let mut ret = (1..last_crate+1).map(|cnum| {\n+        match formats.get(&cnum) {\n             Some(&RequireDynamic) => Linkage::Dynamic,\n             Some(&RequireStatic) => Linkage::IncludedFromDylib,\n             None => Linkage::NotLinked,\n@@ -179,17 +181,17 @@ fn calculate_type(sess: &session::Session,\n     //\n     // If the crate hasn't been included yet and it's not actually required\n     // (e.g. it's an allocator) then we skip it here as well.\n-    sess.cstore.iter_crate_data(|cnum, data| {\n+    for cnum in sess.cstore.crates() {\n         let src = sess.cstore.used_crate_source(cnum);\n         if src.dylib.is_none() &&\n            !formats.contains_key(&cnum) &&\n-           data.explicitly_linked.get() {\n+           sess.cstore.is_explicitly_linked(cnum) {\n             assert!(src.rlib.is_some());\n-            info!(\"adding staticlib: {}\", data.name);\n+            info!(\"adding staticlib: {}\", sess.cstore.crate_name(cnum));\n             add_library(sess, cnum, RequireStatic, &mut formats);\n             ret[cnum as usize - 1] = Linkage::Static;\n         }\n-    });\n+    }\n \n     // We've gotten this far because we're emitting some form of a final\n     // artifact which means that we're going to need an allocator of some form.\n@@ -259,7 +261,8 @@ fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n \n     // All crates are available in an rlib format, so we're just going to link\n     // everything in explicitly so long as it's actually required.\n-    let mut ret = (1..sess.cstore.next_crate_num()).map(|cnum| {\n+    let last_crate = sess.cstore.crates().len() as ast::CrateNum;\n+    let mut ret = (1..last_crate+1).map(|cnum| {\n         if sess.cstore.is_explicitly_linked(cnum) {\n             Linkage::Static\n         } else {"}, {"sha": "c9be73892e40d635557aa96b991c3c826336038e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -203,13 +203,13 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     }\n \n     pub fn collect_external_language_items(&mut self) {\n-        let crate_store = &self.session.cstore;\n-        crate_store.iter_crate_data(|crate_number, _crate_metadata| {\n-            for (index, item_index) in crate_store.lang_items(crate_number) {\n-                let def_id = DefId { krate: crate_number, index: index };\n+        let cstore = &self.session.cstore;\n+        for cnum in cstore.crates() {\n+            for (index, item_index) in cstore.lang_items(cnum) {\n+                let def_id = DefId { krate: cnum, index: index };\n                 self.collect_item(item_index, def_id, DUMMY_SP);\n             }\n-        })\n+        }\n     }\n \n     pub fn collect(&mut self, krate: &hir::Crate) {"}, {"sha": "f70dce90fed112992b214ac8ae6f395ffb2a251c", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -448,7 +448,7 @@ pub fn check_item(tcx: &ty::ctxt, item: &hir::Item, warn_about_defns: bool,\n             // compiler-generated `extern crate` items have a dummy span.\n             if item.span == DUMMY_SP { return }\n \n-            let cnum = match tcx.sess.cstore.find_extern_mod_stmt_cnum(item.id) {\n+            let cnum = match tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n                 Some(cnum) => cnum,\n                 None => return,\n             };"}, {"sha": "0517769356f7511936eaee116cc1b2e7e6b59981", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -458,7 +458,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                 let h = if did.is_local() {\n                     svh.clone()\n                 } else {\n-                    tcx.sess.cstore.get_crate_hash(did.krate)\n+                    tcx.sess.cstore.crate_hash(did.krate)\n                 };\n                 h.as_str().hash(state);\n                 did.index.hash(state);"}, {"sha": "a6c2fd08e8705c6352a26c612c44e8c276100639", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -79,11 +79,11 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n     if !needs_check { return }\n \n     let mut missing = HashSet::new();\n-    sess.cstore.iter_crate_data(|cnum, _| {\n+    for cnum in sess.cstore.crates() {\n         for item in sess.cstore.missing_lang_items(cnum) {\n             missing.insert(item);\n         }\n-    });\n+    }\n \n     $(\n         if missing.contains(&lang_items::$item) && items.$name().is_none() {"}, {"sha": "ed721b6dab01e16c4a478c8905640c402933e34b", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -12,6 +12,7 @@\n \n use session::Session;\n use metadata::creader::CrateReader;\n+use metadata::cstore::CStore;\n use plugin::registry::Registry;\n \n use std::borrow::ToOwned;\n@@ -43,9 +44,9 @@ fn call_malformed_plugin_attribute(a: &Session, b: Span) {\n }\n \n /// Read plugin metadata and dynamically load registrar functions.\n-pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n+pub fn load_plugins(sess: &Session, cstore: &CStore, krate: &ast::Crate,\n                     addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader::new(sess);\n+    let mut loader = PluginLoader::new(sess, cstore);\n \n     for attr in &krate.attrs {\n         if !attr.check_name(\"plugin\") {\n@@ -81,10 +82,10 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n }\n \n impl<'a> PluginLoader<'a> {\n-    fn new(sess: &'a Session) -> PluginLoader<'a> {\n+    fn new(sess: &'a Session, cstore: &'a CStore) -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess),\n+            reader: CrateReader::new(sess, cstore),\n             plugins: vec![],\n         }\n     }"}, {"sha": "bf9c4c8bca627d18e2f233fe8709cef51b71f275", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use lint;\n-use metadata::cstore::CStore;\n use metadata::filesearch;\n+use metadata::util::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeMap, FnvHashMap};\n@@ -21,7 +21,6 @@ use syntax::diagnostic::{self, Emitter};\n use syntax::diagnostics;\n use syntax::feature_gate;\n use syntax::parse;\n-use syntax::parse::token;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n@@ -32,6 +31,7 @@ use std::path::{Path, PathBuf};\n use std::cell::{Cell, RefCell};\n use std::collections::HashSet;\n use std::env;\n+use std::rc::Rc;\n \n pub mod config;\n pub mod search_paths;\n@@ -42,7 +42,7 @@ pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n-    pub cstore: CStore,\n+    pub cstore: Rc<for<'a> CrateStore<'a>>,\n     pub parse_sess: ParseSess,\n     // For a library crate, this is always none\n     pub entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n@@ -392,7 +392,8 @@ fn split_msg_into_multilines(msg: &str) -> Option<String> {\n \n pub fn build_session(sopts: config::Options,\n                      local_crate_source_file: Option<PathBuf>,\n-                     registry: diagnostics::registry::Registry)\n+                     registry: diagnostics::registry::Registry,\n+                     cstore: Rc<for<'a> CrateStore<'a>>)\n                      -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -410,12 +411,13 @@ pub fn build_session(sopts: config::Options,\n     let span_diagnostic_handler =\n         diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n-    build_session_(sopts, local_crate_source_file, span_diagnostic_handler)\n+    build_session_(sopts, local_crate_source_file, span_diagnostic_handler, cstore)\n }\n \n pub fn build_session_(sopts: config::Options,\n                       local_crate_source_file: Option<PathBuf>,\n-                      span_diagnostic: diagnostic::SpanHandler)\n+                      span_diagnostic: diagnostic::SpanHandler,\n+                      cstore: Rc<for<'a> CrateStore<'a>>)\n                       -> Session {\n     let host = match Target::search(config::host_triple()) {\n         Ok(t) => t,\n@@ -451,7 +453,7 @@ pub fn build_session_(sopts: config::Options,\n         target: target_cfg,\n         host: host,\n         opts: sopts,\n-        cstore: CStore::new(token::get_ident_interner()),\n+        cstore: cstore,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: RefCell::new(None),"}, {"sha": "8d7e97440dd469d1753875be6a6faba8ec2cb8ab", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -18,6 +18,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::metadata;\n use rustc::metadata::creader::LocalCrateReader;\n+use rustc::metadata::cstore::CStore;\n use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n@@ -57,6 +58,7 @@ use syntax::visit;\n use syntax;\n \n pub fn compile_input(sess: Session,\n+                     cstore: &CStore,\n                      cfg: ast::CrateConfig,\n                      input: &Input,\n                      outdir: &Option<PathBuf>,\n@@ -87,6 +89,7 @@ pub fn compile_input(sess: Session,\n             let outputs = build_output_filenames(input, outdir, output, &krate.attrs, &sess);\n             let id = link::find_crate_name(Some(&sess), &krate.attrs, input);\n             let expanded_crate = match phase_2_configure_and_expand(&sess,\n+                                                                    &cstore,\n                                                                     krate,\n                                                                     &id[..],\n                                                                     addl_plugins) {\n@@ -136,6 +139,7 @@ pub fn compile_input(sess: Session,\n              || lint::check_ast_crate(&sess, &expanded_crate));\n \n         phase_3_run_analysis_passes(&sess,\n+                                    &cstore,\n                                     ast_map,\n                                     &arenas,\n                                     &id,\n@@ -434,6 +438,7 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n ///\n /// Returns `None` if we're aborting after handling -W help.\n pub fn phase_2_configure_and_expand(sess: &Session,\n+                                    cstore: &CStore,\n                                     mut krate: ast::Crate,\n                                     crate_name: &str,\n                                     addl_plugins: Option<Vec<String>>)\n@@ -477,11 +482,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let macros = time(time_passes,\n                       \"macro loading\",\n-                      || metadata::macro_import::read_macro_defs(sess, &krate));\n+                      || metadata::macro_import::read_macro_defs(sess, &cstore, &krate));\n \n     let mut addl_plugins = Some(addl_plugins);\n     let registrars = time(time_passes, \"plugin loading\", || {\n-        plugin::load::load_plugins(sess, &krate, addl_plugins.take().unwrap())\n+        plugin::load::load_plugins(sess, &cstore, &krate, addl_plugins.take().unwrap())\n     });\n \n     let mut registry = Registry::new(sess, &krate);\n@@ -670,6 +675,7 @@ pub fn make_map<'ast>(sess: &Session,\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n+                                               cstore: &CStore,\n                                                ast_map: front::map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                name: &str,\n@@ -683,7 +689,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     time(time_passes,\n          \"external crate/lib resolution\",\n-         || LocalCrateReader::new(sess, &ast_map).read_crates(krate));\n+         || LocalCrateReader::new(sess, cstore, &ast_map).read_crates(krate));\n \n     let lang_items = time(time_passes,\n                           \"language item collection\","}, {"sha": "d28bd5b511d669fcd2b94da84284737efbc2005a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -33,6 +33,7 @@\n #![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(vec_push_all)]\n+#![feature(raw)] // remove after snapshot\n \n extern crate arena;\n extern crate flate;\n@@ -69,6 +70,8 @@ use rustc::session::config::{Input, PrintRequest, OutputType};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n+use rustc::metadata::cstore::CStore;\n+use rustc::metadata::util::CrateStore;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;\n@@ -77,6 +80,7 @@ use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n use std::process;\n+use std::rc::Rc;\n use std::str;\n use std::sync::{Arc, Mutex};\n use std::thread;\n@@ -87,6 +91,7 @@ use syntax::ast;\n use syntax::parse;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostics;\n+use syntax::parse::token;\n \n #[cfg(test)]\n pub mod test;\n@@ -99,6 +104,20 @@ pub mod target_features;\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n+// [stage0]: kill this\n+pub fn cstore_to_cratestore(a: Rc<CStore>) -> Rc<for<'s> CrateStore<'s>>\n+{\n+    use std::mem;\n+    use std::raw::TraitObject;\n+    unsafe {\n+        let TraitObject { vtable, .. } =\n+            mem::transmute::<&for<'s> CrateStore<'s>, TraitObject>(&*a);\n+        mem::transmute(TraitObject {\n+            data: mem::transmute(a),\n+            vtable: vtable\n+        })\n+    }\n+}\n \n pub fn run(args: Vec<String>) -> isize {\n     monitor(move || run_compiler(&args, &mut RustcDefaultCalls));\n@@ -135,7 +154,9 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n         },\n     };\n \n-    let mut sess = build_session(sopts, input_file_path, descriptions);\n+    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n+    let cstore_ = cstore_to_cratestore(cstore.clone());\n+    let mut sess = build_session(sopts, input_file_path, descriptions, cstore_);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     if sess.unstable_options() {\n         sess.opts.show_span = matches.opt_str(\"show-span\");\n@@ -150,7 +171,7 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n     let pretty = callbacks.parse_pretty(&sess, &matches);\n     match pretty {\n         Some((ppm, opt_uii)) => {\n-            pretty::pretty_print_input(sess, cfg, &input, ppm, opt_uii, ofile);\n+            pretty::pretty_print_input(sess, &cstore, cfg, &input, ppm, opt_uii, ofile);\n             return;\n         }\n         None => {\n@@ -160,7 +181,8 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n \n     let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n     let control = callbacks.build_controller(&sess);\n-    driver::compile_input(sess, cfg, &input, &odir, &ofile, Some(plugins), control);\n+    driver::compile_input(sess, &cstore, cfg, &input, &odir, &ofile,\n+                          Some(plugins), control);\n }\n \n // Extract output directory and file from matches.\n@@ -329,7 +351,9 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     describe_lints(&ls, false);\n                     return None;\n                 }\n-                let sess = build_session(sopts.clone(), None, descriptions.clone());\n+                let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n+                let cstore_ = cstore_to_cratestore(cstore.clone());\n+                let sess = build_session(sopts.clone(), None, descriptions.clone(), cstore_);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let should_stop = RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile);\n                 if should_stop == Compilation::Stop {"}, {"sha": "ddd5f931a80e97b09901b11ec4c235db9cbafb82", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -19,6 +19,7 @@ use rustc_trans::back::link;\n \n use driver;\n \n+use rustc::metadata::cstore::CStore;\n use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n@@ -167,6 +168,7 @@ impl PpSourceMode {\n     }\n     fn call_with_pp_support_hir<'tcx, A, B, F>(&self,\n                                                sess: &'tcx Session,\n+                                               cstore: &CStore,\n                                                ast_map: &hir_map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                id: &str,\n@@ -193,6 +195,7 @@ impl PpSourceMode {\n             }\n             PpmTyped => {\n                 driver::phase_3_run_analysis_passes(sess,\n+                                                    cstore,\n                                                     ast_map.clone(),\n                                                     arenas,\n                                                     id,\n@@ -668,6 +671,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n }\n \n pub fn pretty_print_input(sess: Session,\n+                          cstore: &CStore,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n                           ppm: PpMode,\n@@ -687,7 +691,7 @@ pub fn pretty_print_input(sess: Session,\n     let is_expanded = needs_expansion(&ppm);\n     let compute_ast_map = needs_ast_map(&ppm, &opt_uii);\n     let krate = if compute_ast_map {\n-        match driver::phase_2_configure_and_expand(&sess, krate, &id[..], None) {\n+        match driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id[..], None) {\n             None => return,\n             Some(k) => driver::assign_node_ids(&sess, k),\n         }\n@@ -741,6 +745,7 @@ pub fn pretty_print_input(sess: Session,\n         (PpmHir(s), None) => {\n             let out: &mut Write = &mut out;\n             s.call_with_pp_support_hir(&sess,\n+                                       cstore,\n                                        &ast_map.unwrap(),\n                                        &arenas,\n                                        &id,\n@@ -762,6 +767,7 @@ pub fn pretty_print_input(sess: Session,\n         (PpmHir(s), Some(uii)) => {\n             let out: &mut Write = &mut out;\n             s.call_with_pp_support_hir(&sess,\n+                                       cstore,\n                                        &ast_map.unwrap(),\n                                        &arenas,\n                                        &id,\n@@ -811,6 +817,7 @@ pub fn pretty_print_input(sess: Session,\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(&sess);\n                     driver::phase_3_run_analysis_passes(&sess,\n+                                                        &cstore,\n                                                         ast_map,\n                                                         &arenas,\n                                                         &id,"}, {"sha": "7af301bec77654275f990223ba4bb56b3f4244d3", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -107,7 +107,9 @@ fn test_env<F>(source_string: &str,\n     let diagnostic_handler = diagnostic::Handler::with_emitter(true, emitter);\n     let span_diagnostic_handler = diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n-    let sess = session::build_session_(options, None, span_diagnostic_handler);\n+    let cstore = ::rustc::metadata::cstore::CStore::new(token::get_ident_interner());\n+    let sess = session::build_session_(options, None, span_diagnostic_handler,\n+                                       Box::new(cstore));\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let krate_config = Vec::new();\n     let input = config::Input::Str(source_string.to_string());"}, {"sha": "7327170c52bde1af0dc10d7136299df73cab7e51", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -936,7 +936,7 @@ impl LateLintPass for PluginAsLibrary {\n             _ => return,\n         };\n \n-        let prfn = match cx.sess().cstore.find_extern_mod_stmt_cnum(it.id) {\n+        let prfn = match cx.sess().cstore.extern_mod_stmt_cnum(it.id) {\n             Some(cnum) => cx.sess().cstore.plugin_registrar_fn(cnum),\n             None => {\n                 // Probably means we aren't linking the crate for some reason."}, {"sha": "752e7e55f5505ac3e9eca050fc514d1c862f4b0f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             ItemExternCrate(_) => {\n                 // n.b. we don't need to look at the path option here, because cstore already\n                 // did\n-                if let Some(crate_id) = self.session.cstore.find_extern_mod_stmt_cnum(item.id) {\n+                if let Some(crate_id) = self.session.cstore.extern_mod_stmt_cnum(item.id) {\n                     let def_id = DefId {\n                         krate: crate_id,\n                         index: CRATE_DEF_INDEX,"}, {"sha": "7f740f9c03335a26d127c2b22096ef298f774ce2", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n \n         match item.node {\n             hir::ItemExternCrate(_) => {\n-                if let Some(crate_num) = self.session.cstore.find_extern_mod_stmt_cnum(item.id) {\n+                if let Some(crate_num) = self.session.cstore.extern_mod_stmt_cnum(item.id) {\n                     if !self.used_crates.contains(&crate_num) {\n                         self.session.add_lint(lint::builtin::UNUSED_EXTERN_CRATES,\n                                               item.id,"}, {"sha": "cefe04f5e35ebc56372070842987d4d0a20ede7f", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -622,7 +622,7 @@ fn link_rlib<'a>(sess: &'a Session,\n         ab.add_file(obj);\n     }\n \n-    for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n+    for (l, kind) in sess.cstore.used_libraries() {\n         match kind {\n             NativeLibraryKind::NativeStatic => ab.add_native_library(&l),\n             NativeLibraryKind::NativeFramework |\n@@ -970,7 +970,7 @@ fn link_args(cmd: &mut Linker,\n     // sections if possible. See more comments in linker.rs\n     cmd.gc_sections(dylib);\n \n-    let used_link_args = sess.cstore.get_used_link_args().borrow();\n+    let used_link_args = sess.cstore.used_link_args();\n \n     if !dylib && t.options.position_independent_executables {\n         let empty_vec = Vec::new();\n@@ -1087,8 +1087,7 @@ fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) {\n         }\n     });\n \n-    let libs = sess.cstore.get_used_libraries();\n-    let libs = libs.borrow();\n+    let libs = sess.cstore.used_libraries();\n \n     let staticlibs = libs.iter().filter_map(|&(ref l, kind)| {\n         if kind == NativeLibraryKind::NativeStatic {Some(l)} else {None}"}, {"sha": "67a7f3efb27718d8f4b59b06e5482d86ab5a2a62", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -65,7 +65,6 @@ pub use rustc::session;\n pub use rustc::metadata;\n pub use rustc::middle;\n pub use rustc::lint;\n-pub use rustc::plugin;\n pub use rustc::util;\n \n pub mod back {"}, {"sha": "2964d87ec1c0987c16b165a46e2bc1c3f589ca64", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -909,7 +909,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                     None => item.ident.to_string(),\n                 };\n                 let alias_span = self.span.span_for_last_ident(item.span);\n-                let cnum = match self.sess.cstore.find_extern_mod_stmt_cnum(item.id) {\n+                let cnum = match self.sess.cstore.extern_mod_stmt_cnum(item.id) {\n                     Some(cnum) => cnum,\n                     None => 0,\n                 };\n@@ -1216,4 +1216,3 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n         walk_list!(self, visit_expr, &l.init);\n     }\n }\n-"}, {"sha": "cc5322d7f9f46c04484caee61af584fae6606507", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -199,12 +199,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_external_crates(&self) -> Vec<CrateData> {\n         let mut result = Vec::new();\n \n-        self.tcx.sess.cstore.iter_crate_data(|n, cmd| {\n+        for n in self.tcx.sess.cstore.crates() {\n             result.push(CrateData {\n-                name: cmd.name.clone(),\n+                name: self.tcx.sess.cstore.crate_name(n),\n                 number: n,\n             });\n-        });\n+        }\n \n         result\n     }"}, {"sha": "30ec1e662b028a78e9eda37fd3a9b1ea69396efe", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -3087,15 +3087,15 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // reachable extern fns. These functions are all part of the public ABI of\n     // the final product, so LTO needs to preserve them.\n     if sess.lto() {\n-        sess.cstore.iter_crate_data(|cnum, _| {\n+        for cnum in sess.cstore.crates() {\n             let syms = sess.cstore.reachable_ids(cnum);\n             reachable_symbols.extend(syms.into_iter().filter(|did| {\n                 sess.cstore.is_extern_fn(shared_ccx.tcx(), *did) ||\n                 sess.cstore.is_static(*did)\n             }).map(|did| {\n                 sess.cstore.item_symbol(did)\n             }));\n-        });\n+        }\n     }\n \n     if codegen_units > 1 {"}, {"sha": "9eed014ac73a4c89165a4e0ded42a66629f8c343", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -343,7 +343,7 @@ impl<'tcx> TypeMap<'tcx> {\n             let crate_hash = if source_def_id.is_local() {\n                 cx.link_meta().crate_hash.clone()\n             } else {\n-                cx.sess().cstore.get_crate_hash(source_def_id.krate)\n+                cx.sess().cstore.crate_hash(source_def_id.krate)\n             };\n \n             output.push_str(crate_hash.as_str());"}, {"sha": "5be4892484b53a82d3f8d599a446a27de00d5175", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -17,7 +17,6 @@ use trans::common::*;\n \n use rustc_front::hir;\n \n-\n fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n     -> Option<DefId> {\n     debug!(\"instantiate_inline({:?})\", fn_id);"}, {"sha": "f4f4dc90feb9d6d96f8c81872037e6ad5162e59f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d45dd9423e0fa11510f3e62dd0f286bf6c0cdf37", "patch": "@@ -418,7 +418,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         fn handle_external_def(traits: &mut AllTraitsVec,\n                                external_mods: &mut FnvHashSet<DefId>,\n                                ccx: &CrateCtxt,\n-                               cstore: &mdutil::CrateStore,\n+                               cstore: &for<'a> mdutil::CrateStore<'a>,\n                                dl: mdutil::DefLike) {\n             match dl {\n                 mdutil::DlDef(def::DefTrait(did)) => {\n@@ -436,15 +436,14 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                 _ => {}\n             }\n         }\n-        let cstore: &mdutil::CrateStore = &ccx.tcx.sess.cstore;\n+        let cstore = &*ccx.tcx.sess.cstore;\n \n-        // FIXME: privatize this\n-        ccx.tcx.sess.cstore.iter_crate_data(|cnum, _| {\n+        for cnum in ccx.tcx.sess.cstore.crates() {\n             for child in cstore.crate_top_level_items(cnum) {\n                 handle_external_def(&mut traits, &mut external_mods,\n                                     ccx, cstore, child.def)\n             }\n-        });\n+        }\n \n         *ccx.all_traits.borrow_mut() = Some(traits);\n     }"}]}