{"sha": "b21e956f2733cce6304926cc51ee542c036c1c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWU5NTZmMjczM2NjZTYzMDQ5MjZjYzUxZWU1NDJjMDM2YzFjOWU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-20T17:20:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:51:40Z"}, "message": "Rollup merge of #53393 - BurntPizza:serialize-inlines, r=alexcrichton\n\nMark libserialize functions as inline\n\nGot to thinking: \"what if that big pile of tiny functions isn't inlining as it should?\"\nSo a few `replace-regex` later the local perf run says this:\n<details>\n\n![](https://i.imgur.com/gvdJEgG.png)\n</details>\nNot huge, but still a win, which is interesting. Want to verify with the real perf run, but I understand there's a backlog.\n\nI didn't notice any increase in compile time or binary sizes for rustc/libs.", "tree": {"sha": "0e210789213a5d5e6f1f54f0dd43fcd6f46e24fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e210789213a5d5e6f1f54f0dd43fcd6f46e24fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21e956f2733cce6304926cc51ee542c036c1c9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlt74KwACgkQ/vbIBR0O\nATyXexAAtoBxbmlc0PIU/W1EkxVW57BhmOdMzyvvLHz7WplXgHKuZNIW6PSKg94u\nPcehYOt88FPzKlShj2+2piy11YI/7pBfD/YWNoWEs7vHK5lQsD3IuKOOB0iMg/aQ\n9mixZH4nyD2x286ruSe1YpA+eiKIzMCMVFl38IEyd+z9EOSfGKUVUUUWz54l9LlF\nrWM4bC3KCAfpp9tuO4m/n18S4yH/ffQXXdhU0HPj/mTjTMtZHP+zsDaxJGzG96xO\nMndpDb4XbODUqI4TWf5w08mxk+CbIuJU1mUfiaYn9pmZRuDPSy7R5wHMFkO/PbQL\nEPvw9ZQ4dYkYPN/e1j3aZht3N3CgLG9FSeBjkWFRstqEG+BfUv7bHJkR1oqJiS+M\nQiMZJTsAKFEVpUjzwbDROh9inSD9chL8KalNWXE/iKTcSUeyIRThZTsCBbsTFL0z\nRUuOBf6v5vXhIU6TQkXVlHs4ngjXX7p3FMUFFntgonPNErRhHjbCIh9EXEqTD16d\ntymmscnEgJa7Ode6iIbefPaiQ5BBjNhfmrvjHgrvYM6ppOyzfLu34BbDJQ7+pej1\nRPgFwNCTu/ts/zy+CUnirSm2+KPHxAAvyhB/3pBbRkDW3xtZjrW+TnZGmQXFXWd6\nG9wxxtBU3t7hDOw9nVd5hZBWYs5CaDJ9VcnGvzvtGib/mjOw3Ow=\n=6wkN\n-----END PGP SIGNATURE-----", "payload": "tree 0e210789213a5d5e6f1f54f0dd43fcd6f46e24fc\nparent f9e3af7439f3b8363e23ffd7e9a900d7a16f1f62\nparent 1540e8cac0a7723a79a0601004f58574367c7eca\nauthor kennytm <kennytm@gmail.com> 1534785616 +0800\ncommitter kennytm <kennytm@gmail.com> 1534845100 +0800\n\nRollup merge of #53393 - BurntPizza:serialize-inlines, r=alexcrichton\n\nMark libserialize functions as inline\n\nGot to thinking: \"what if that big pile of tiny functions isn't inlining as it should?\"\nSo a few `replace-regex` later the local perf run says this:\n<details>\n\n![](https://i.imgur.com/gvdJEgG.png)\n</details>\nNot huge, but still a win, which is interesting. Want to verify with the real perf run, but I understand there's a backlog.\n\nI didn't notice any increase in compile time or binary sizes for rustc/libs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21e956f2733cce6304926cc51ee542c036c1c9e", "html_url": "https://github.com/rust-lang/rust/commit/b21e956f2733cce6304926cc51ee542c036c1c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21e956f2733cce6304926cc51ee542c036c1c9e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e3af7439f3b8363e23ffd7e9a900d7a16f1f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e3af7439f3b8363e23ffd7e9a900d7a16f1f62", "html_url": "https://github.com/rust-lang/rust/commit/f9e3af7439f3b8363e23ffd7e9a900d7a16f1f62"}, {"sha": "1540e8cac0a7723a79a0601004f58574367c7eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1540e8cac0a7723a79a0601004f58574367c7eca", "html_url": "https://github.com/rust-lang/rust/commit/1540e8cac0a7723a79a0601004f58574367c7eca"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "9748a5063925bc8d86a9dc2656ca7dfe531d2ac3", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=b21e956f2733cce6304926cc51ee542c036c1c9e", "patch": "@@ -17,9 +17,7 @@ use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSe\n use std::rc::Rc;\n use std::sync::Arc;\n \n-impl<\n-    T: Encodable\n-> Encodable for LinkedList<T> {\n+impl<T: Encodable> Encodable for LinkedList<T> {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n             for (i, e) in self.iter().enumerate() {\n@@ -65,10 +63,10 @@ impl<T:Decodable> Decodable for VecDeque<T> {\n     }\n }\n \n-impl<\n-    K: Encodable + PartialEq + Ord,\n-    V: Encodable\n-> Encodable for BTreeMap<K, V> {\n+impl<K, V> Encodable for BTreeMap<K, V>\n+    where K: Encodable + PartialEq + Ord,\n+          V: Encodable\n+{\n     fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {\n         e.emit_map(self.len(), |e| {\n             let mut i = 0;\n@@ -82,10 +80,10 @@ impl<\n     }\n }\n \n-impl<\n-    K: Decodable + PartialEq + Ord,\n-    V: Decodable\n-> Decodable for BTreeMap<K, V> {\n+impl<K, V> Decodable for BTreeMap<K, V>\n+    where K: Decodable + PartialEq + Ord,\n+          V: Decodable\n+{\n     fn decode<D: Decoder>(d: &mut D) -> Result<BTreeMap<K, V>, D::Error> {\n         d.read_map(|d, len| {\n             let mut map = BTreeMap::new();\n@@ -99,9 +97,9 @@ impl<\n     }\n }\n \n-impl<\n-    T: Encodable + PartialEq + Ord\n-> Encodable for BTreeSet<T> {\n+impl<T> Encodable for BTreeSet<T>\n+    where T: Encodable + PartialEq + Ord\n+{\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n             let mut i = 0;\n@@ -114,9 +112,9 @@ impl<\n     }\n }\n \n-impl<\n-    T: Decodable + PartialEq + Ord\n-> Decodable for BTreeSet<T> {\n+impl<T> Decodable for BTreeSet<T>\n+    where T: Decodable + PartialEq + Ord\n+{\n     fn decode<D: Decoder>(d: &mut D) -> Result<BTreeSet<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut set = BTreeSet::new();"}, {"sha": "e02bc5e1025fd6d9ceffaaff3aaa4d0101ea27b3", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=b21e956f2733cce6304926cc51ee542c036c1c9e", "patch": "@@ -118,6 +118,7 @@ pub fn write_signed_leb128_to<W>(mut value: i128, mut write: W)\n     }\n }\n \n+#[inline]\n pub fn write_signed_leb128(out: &mut Vec<u8>, value: i128) {\n     write_signed_leb128_to(value, |v| write_to_vec(out, v))\n }"}, {"sha": "c71f474891131dede6617e443b15b3efd4da1e17", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=b21e956f2733cce6304926cc51ee542c036c1c9e", "patch": "@@ -31,6 +31,7 @@ impl Encoder {\n         self.data\n     }\n \n+    #[inline]\n     pub fn emit_raw_bytes(&mut self, s: &[u8]) {\n         self.data.extend_from_slice(s);\n     }\n@@ -193,6 +194,7 @@ impl<'a> Decoder<'a> {\n         self.position += bytes;\n     }\n \n+    #[inline]\n     pub fn read_raw_bytes(&mut self, s: &mut [u8]) -> Result<(), String> {\n         let start = self.position;\n         let end = start + s.len();\n@@ -326,6 +328,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n         Ok(Cow::Borrowed(s))\n     }\n \n+    #[inline]\n     fn error(&mut self, err: &str) -> Self::Error {\n         err.to_string()\n     }"}, {"sha": "60bb5a0fec2cdba8f5b8822af8631cd5f6113205", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e956f2733cce6304926cc51ee542c036c1c9e/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=b21e956f2733cce6304926cc51ee542c036c1c9e", "patch": "@@ -119,6 +119,7 @@ pub trait Encoder {\n         self.emit_enum(\"Option\", f)\n     }\n \n+    #[inline]\n     fn emit_option_none(&mut self) -> Result<(), Self::Error> {\n         self.emit_enum_variant(\"None\", 0, 0, |_| Ok(()))\n     }\n@@ -560,14 +561,12 @@ impl< T: Decodable> Decodable for Box<[T]> {\n }\n \n impl<T:Encodable> Encodable for Rc<T> {\n-    #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         (**self).encode(s)\n     }\n }\n \n impl<T:Decodable> Decodable for Rc<T> {\n-    #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Rc<T>, D::Error> {\n         Ok(Rc::new(Decodable::decode(d)?))\n     }\n@@ -618,7 +617,9 @@ impl<'a, T:Encodable> Encodable for Cow<'a, [T]> where [T]: ToOwned<Owned = Vec<\n     }\n }\n \n-impl<T:Decodable+ToOwned> Decodable for Cow<'static, [T]> where [T]: ToOwned<Owned = Vec<T>> {\n+impl<T:Decodable+ToOwned> Decodable for Cow<'static, [T]>\n+    where [T]: ToOwned<Owned = Vec<T>>\n+{\n     fn decode<D: Decoder>(d: &mut D) -> Result<Cow<'static, [T]>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut v = Vec::with_capacity(len);"}]}