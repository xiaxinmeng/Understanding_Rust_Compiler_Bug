{"sha": "b0eb55a092506aa4cfe34969c56adfeca9616750", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZWI1NWEwOTI1MDZhYTRjZmUzNDk2OWM1NmFkZmVjYTk2MTY3NTA=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-15T03:18:54Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-17T16:01:04Z"}, "message": "Add test demonstrating the issue.", "tree": {"sha": "e0d959fafd8019b4fb9b0b87da72e972204adbdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d959fafd8019b4fb9b0b87da72e972204adbdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0eb55a092506aa4cfe34969c56adfeca9616750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0eb55a092506aa4cfe34969c56adfeca9616750", "html_url": "https://github.com/rust-lang/rust/commit/b0eb55a092506aa4cfe34969c56adfeca9616750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0eb55a092506aa4cfe34969c56adfeca9616750/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "html_url": "https://github.com/rust-lang/rust/commit/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "51bfd2032838cadceb22d533410c78e5c6921329", "filename": "src/test/ui/lint/clashing-extern-fn-recursion.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b0eb55a092506aa4cfe34969c56adfeca9616750/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0eb55a092506aa4cfe34969c56adfeca9616750/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs?ref=b0eb55a092506aa4cfe34969c56adfeca9616750", "patch": "@@ -0,0 +1,117 @@\n+// check-pass\n+//\n+// This tests checks that clashing_extern_declarations handles types that are recursive through a\n+// pointer or ref argument. See #75512.\n+\n+#![crate_type = \"lib\"]\n+\n+mod raw_ptr_recursion {\n+    mod a {\n+        #[repr(C)]\n+        struct Pointy {\n+            pointy: *const Pointy,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy(pointy: Pointy);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Pointy {\n+            pointy: *const Pointy,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy(pointy: Pointy);\n+        }\n+    }\n+}\n+\n+mod raw_ptr_recursion_once_removed {\n+    mod a {\n+        #[repr(C)]\n+        struct Pointy1 {\n+            pointy_two: *const Pointy2,\n+        }\n+\n+        #[repr(C)]\n+        struct Pointy2 {\n+            pointy_one: *const Pointy1,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy2(pointy: Pointy2);\n+        }\n+    }\n+\n+    mod b {\n+        #[repr(C)]\n+        struct Pointy1 {\n+            pointy_two: *const Pointy2,\n+        }\n+\n+        #[repr(C)]\n+        struct Pointy2 {\n+            pointy_one: *const Pointy1,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy2(pointy: Pointy2);\n+        }\n+    }\n+}\n+\n+mod ref_recursion {\n+    mod a {\n+        #[repr(C)]\n+        struct Reffy<'a> {\n+            reffy: &'a Reffy<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_recursion(reffy: Reffy);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Reffy<'a> {\n+            reffy: &'a Reffy<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_recursion(reffy: Reffy);\n+        }\n+    }\n+}\n+\n+mod ref_recursion_once_removed {\n+    mod a {\n+        #[repr(C)]\n+        struct Reffy1<'a> {\n+            reffy: &'a Reffy1<'a>,\n+        }\n+\n+        struct Reffy2<'a> {\n+            reffy: &'a Reffy2<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_once_removed(reffy: Reffy1);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Reffy1<'a> {\n+            reffy: &'a Reffy1<'a>,\n+        }\n+\n+        struct Reffy2<'a> {\n+            reffy: &'a Reffy2<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_once_removed(reffy: Reffy1);\n+        }\n+    }\n+}"}]}