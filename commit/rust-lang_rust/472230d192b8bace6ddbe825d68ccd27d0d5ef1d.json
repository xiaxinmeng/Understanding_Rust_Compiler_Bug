{"sha": "472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "node_id": "C_kwDOAAsO6NoAKDQ3MjIzMGQxOTJiOGJhY2U2ZGRiZTgyNWQ2OGNjZDI3ZDBkNWVmMWQ", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-05-30T07:34:50Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-05-30T07:40:39Z"}, "message": "Remove array_zip\n\n`[T; N]::zip` is \"eager\" but most zips are mapped.\nThis causes poor optimization in generated code.\nThis is a fundamental design issue and \"zip\" is\n\"prime real estate\" in terms of function names,\nso let's free it up again.", "tree": {"sha": "a4f10140d7833692e52bf4425f417fdff61ca256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f10140d7833692e52bf4425f417fdff61ca256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "html_url": "https://github.com/rust-lang/rust/commit/472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165cddafe9449e090fdef2686045385b55a87329", "url": "https://api.github.com/repos/rust-lang/rust/commits/165cddafe9449e090fdef2686045385b55a87329", "html_url": "https://github.com/rust-lang/rust/commit/165cddafe9449e090fdef2686045385b55a87329"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "76b3589b9e4b3c4223c043b0d3afc6d95dc9191b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "patch": "@@ -538,29 +538,6 @@ impl<T, const N: usize> [T; N] {\n         drain_array_with(self, |iter| try_from_trusted_iterator(iter.map(f)))\n     }\n \n-    /// 'Zips up' two arrays into a single array of pairs.\n-    ///\n-    /// `zip()` returns a new array where every element is a tuple where the\n-    /// first element comes from the first array, and the second element comes\n-    /// from the second array. In other words, it zips two arrays together,\n-    /// into a single one.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(array_zip)]\n-    /// let x = [1, 2, 3];\n-    /// let y = [4, 5, 6];\n-    /// let z = x.zip(y);\n-    /// assert_eq!(z, [(1, 4), (2, 5), (3, 6)]);\n-    /// ```\n-    #[unstable(feature = \"array_zip\", issue = \"80094\")]\n-    pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n-        drain_array_with(self, |lhs| {\n-            drain_array_with(rhs, |rhs| from_trusted_iterator(crate::iter::zip(lhs, rhs)))\n-        })\n-    }\n-\n     /// Returns a slice containing the entire array. Equivalent to `&s[..]`.\n     #[stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n     #[rustc_const_stable(feature = \"array_as_slice\", since = \"1.57.0\")]"}, {"sha": "24f3f43d0787444157b3082985f7c679454141a4", "filename": "tests/codegen/array-map.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/tests%2Fcodegen%2Farray-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/tests%2Fcodegen%2Farray-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Farray-map.rs?ref=472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "patch": "@@ -4,7 +4,6 @@\n // ignore-debug (the extra assertions get in the way)\n \n #![crate_type = \"lib\"]\n-#![feature(array_zip)]\n \n // CHECK-LABEL: @short_integer_map\n #[no_mangle]\n@@ -16,16 +15,6 @@ pub fn short_integer_map(x: [u32; 8]) -> [u32; 8] {\n     x.map(|x| 2 * x + 1)\n }\n \n-// CHECK-LABEL: @short_integer_zip_map\n-#[no_mangle]\n-pub fn short_integer_zip_map(x: [u32; 8], y: [u32; 8]) -> [u32; 8] {\n-    // CHECK: %[[A:.+]] = load <8 x i32>\n-    // CHECK: %[[B:.+]] = load <8 x i32>\n-    // CHECK: sub <8 x i32> %[[B]], %[[A]]\n-    // CHECK: store <8 x i32>\n-    x.zip(y).map(|(x, y)| x - y)\n-}\n-\n // This test is checking that LLVM can SRoA away a bunch of the overhead,\n // like fully moving the iterators to registers.  Notably, previous implementations\n // of `map` ended up `alloca`ing the whole `array::IntoIterator`, meaning both a"}, {"sha": "474ff1c4e91b9d20563ffcf5bc662d0386ee6475", "filename": "tests/codegen/autovectorize-f32x4.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/tests%2Fcodegen%2Fautovectorize-f32x4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472230d192b8bace6ddbe825d68ccd27d0d5ef1d/tests%2Fcodegen%2Fautovectorize-f32x4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fautovectorize-f32x4.rs?ref=472230d192b8bace6ddbe825d68ccd27d0d5ef1d", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C opt-level=3 -Z merge-functions=disabled\n // only-x86_64\n #![crate_type = \"lib\"]\n-#![feature(array_zip)]\n \n // CHECK-LABEL: @auto_vectorize_direct\n #[no_mangle]\n@@ -31,13 +30,3 @@ pub fn auto_vectorize_loop(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n     }\n     c\n }\n-\n-// CHECK-LABEL: @auto_vectorize_array_zip_map\n-#[no_mangle]\n-pub fn auto_vectorize_array_zip_map(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n-// CHECK: load <4 x float>\n-// CHECK: load <4 x float>\n-// CHECK: fadd <4 x float>\n-// CHECK: store <4 x float>\n-    a.zip(b).map(|(a, b)| a + b)\n-}"}]}