{"sha": "87f5b1f043c4184ee504de4d384213b57ada912d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjViMWYwNDNjNDE4NGVlNTA0ZGU0ZDM4NDIxM2I1N2FkYTkxMmQ=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-16T21:20:17Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-16T21:20:17Z"}, "message": "Remove the union type.", "tree": {"sha": "188725c7b0562541b2bb0ac9b28e47c66bbf79c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/188725c7b0562541b2bb0ac9b28e47c66bbf79c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f5b1f043c4184ee504de4d384213b57ada912d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f5b1f043c4184ee504de4d384213b57ada912d", "html_url": "https://github.com/rust-lang/rust/commit/87f5b1f043c4184ee504de4d384213b57ada912d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f5b1f043c4184ee504de4d384213b57ada912d/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e44af6b14d6912e1ea7c5e2d10dd830cf1b42ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44af6b14d6912e1ea7c5e2d10dd830cf1b42ed7", "html_url": "https://github.com/rust-lang/rust/commit/e44af6b14d6912e1ea7c5e2d10dd830cf1b42ed7"}], "stats": {"total": 39, "additions": 7, "deletions": 32}, "files": [{"sha": "58c2376c3a1b24f2f5168163cce546fc07722ee9", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/87f5b1f043c4184ee504de4d384213b57ada912d/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f5b1f043c4184ee504de4d384213b57ada912d/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=87f5b1f043c4184ee504de4d384213b57ada912d", "patch": "@@ -159,51 +159,26 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n-// A very simple expression type used for straightforward simplifications.\n-enum BinaryOrCall<'a> {\n-    Binary(&'a str, &'a Expr, &'a Expr),\n-    MethodCall(&'a str, &'a Expr),\n-}\n-\n-impl<'a> BinaryOrCall<'a> {\n-    fn to_string(&self, cx: &LateContext, s: &mut String) {\n-        let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n-        match *self {\n-            BinaryOrCall::Binary(op, lhs, rhs) => {\n-                s.push_str(&snip(lhs));\n-                s.push_str(op);\n-                s.push_str(&snip(rhs));\n-            }\n-            BinaryOrCall::MethodCall(method, arg) => {\n-                s.push_str(&snip(arg));\n-                s.push('.');\n-                s.push_str(method);\n-                s.push_str(\"()\");\n-            }\n-        }\n-    }\n-}\n-\n-fn simplify_not(expr: &Expr) -> Option<BinaryOrCall> {\n+fn simplify_not(expr: &Expr, cx: &LateContext) -> Option<String> {\n+    let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n     match expr.node {\n         ExprBinary(binop, ref lhs, ref rhs) => {\n-            let neg_op = match binop.node {\n+            match binop.node {\n                 BiEq => Some(\" != \"),\n                 BiNe => Some(\" == \"),\n                 BiLt => Some(\" >= \"),\n                 BiGt => Some(\" <= \"),\n                 BiLe => Some(\" > \"),\n                 BiGe => Some(\" < \"),\n                 _ => None,\n-            };\n-            neg_op.map(|op| BinaryOrCall::Binary(op,  lhs, rhs))\n+            }.map(|op| format!(\"{}{}{}\", &snip(lhs), op, &snip(rhs)))\n         },\n         ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n             METHODS_WITH_NEGATION\n                 .iter().cloned()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| a == path.name.as_str())\n-                .map(|(_, neg_method)| BinaryOrCall::MethodCall(neg_method, &args[0]))\n+                .map(|(_, neg_method)| format!(\"{}.{}()\", &snip(&args[0]), neg_method))\n         },\n         _ => None,\n     }\n@@ -234,9 +209,9 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String,\n                     recurse(true, cx, inner, terminals, s, simplified)\n                 },\n                 Term(n) => {\n-                    if let Some(binary_or_call) = simplify_not(terminals[n as usize]) {\n+                    if let Some(str) = simplify_not(terminals[n as usize], cx) {\n                         *simplified = true;\n-                        binary_or_call.to_string(cx, s)\n+                        s.push_str(&str)\n                     } else {\n                         s.push('!');\n                         recurse(false, cx, inner, terminals, s, simplified)"}]}