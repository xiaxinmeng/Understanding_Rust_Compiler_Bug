{"sha": "22144c02c2d790c2e3b74dc0363000511284f6d8", "node_id": "C_kwDOAAsO6NoAKDIyMTQ0YzAyYzJkNzkwYzJlM2I3NGRjMDM2MzAwMDUxMTI4NGY2ZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T21:30:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T21:30:16Z"}, "message": "Auto merge of #7789 - flip1995:double_semi_if_nothing_returned, r=camsteffen\n\nDon't trigger semicolon_if_nothing_returned in expanded code\n\nFixes #7768\n\nBefore, this lint didn't trigger on macros. With rust-lang/rust#88175\nthis isn't enough anymore. In this PR a `WhileLoop` desugaring kind was\nintroduced. This overrides the span of expanded expressions when\nlowering the while loop. So if a while loop is in a macro, the\nexpressions that it expands to are no longer marked with\n`ExpnKind::Macro`, but with `ExpnKind::Desugaring`. In general, this is\nthe correct behavior and the same that is done for `ForLoop`s. It just\ntripped up this lint.\n\nr? `@camsteffen`\n\nchangelog: [`semicolon_if_nothing_returned`]: Fix regression on macros containing while loops", "tree": {"sha": "b7adcb3469429666e4d9dbb72271a889d272cd59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7adcb3469429666e4d9dbb72271a889d272cd59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22144c02c2d790c2e3b74dc0363000511284f6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22144c02c2d790c2e3b74dc0363000511284f6d8", "html_url": "https://github.com/rust-lang/rust/commit/22144c02c2d790c2e3b74dc0363000511284f6d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22144c02c2d790c2e3b74dc0363000511284f6d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e73129baf65f4095002422303157d5e64e9479", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e73129baf65f4095002422303157d5e64e9479", "html_url": "https://github.com/rust-lang/rust/commit/78e73129baf65f4095002422303157d5e64e9479"}, {"sha": "b423b85ca99c2a085797e228ec405038bbd3308f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b423b85ca99c2a085797e228ec405038bbd3308f", "html_url": "https://github.com/rust-lang/rust/commit/b423b85ca99c2a085797e228ec405038bbd3308f"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "c0e4914efe0bd1778a8ba68d4505c65048bdb310", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22144c02c2d790c2e3b74dc0363000511284f6d8/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22144c02c2d790c2e3b74dc0363000511284f6d8/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=22144c02c2d790c2e3b74dc0363000511284f6d8", "patch": "@@ -1,7 +1,7 @@\n use crate::rustc_lint::LintContext;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{in_macro, sugg};\n+use clippy_utils::sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, ExprKind};\n@@ -39,7 +39,7 @@ declare_lint_pass!(SemicolonIfNothingReturned => [SEMICOLON_IF_NOTHING_RETURNED]\n impl LateLintPass<'_> for SemicolonIfNothingReturned {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n         if_chain! {\n-            if !in_macro(block.span);\n+            if !block.span.from_expansion();\n             if let Some(expr) = block.expr;\n             let t_expr = cx.typeck_results().expr_ty(expr);\n             if t_expr.is_unit();"}, {"sha": "7a45f1b18d4af2c8d920676b4f96b755083867d1", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22144c02c2d790c2e3b74dc0363000511284f6d8/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22144c02c2d790c2e3b74dc0363000511284f6d8/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=22144c02c2d790c2e3b74dc0363000511284f6d8", "patch": "@@ -98,3 +98,15 @@ fn unsafe_checks() {\n     let mut s = MaybeUninit::<String>::uninit();\n     let _d = || unsafe { ptr::drop_in_place(s.as_mut_ptr()) };\n }\n+\n+// Issue #7768\n+#[rustfmt::skip]\n+fn macro_with_semicolon() {\n+    macro_rules! repro {\n+        () => {\n+            while false {\n+            }\n+        };\n+    }\n+    repro!();\n+}"}]}