{"sha": "51152ccf9dd5830c323ec4e9047c277d1b9292d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMTUyY2NmOWRkNTgzMGMzMjNlYzRlOTA0N2MyNzdkMWI5MjkyZDE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:41:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:41:29Z"}, "message": "De-export private and unicode. Part of #3583.", "tree": {"sha": "1ea2a73fd79263272d24d360c62d9ae352cb55b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea2a73fd79263272d24d360c62d9ae352cb55b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51152ccf9dd5830c323ec4e9047c277d1b9292d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51152ccf9dd5830c323ec4e9047c277d1b9292d1", "html_url": "https://github.com/rust-lang/rust/commit/51152ccf9dd5830c323ec4e9047c277d1b9292d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51152ccf9dd5830c323ec4e9047c277d1b9292d1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda1d35251b687d7d077c151567fccaae843f157", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda1d35251b687d7d077c151567fccaae843f157", "html_url": "https://github.com/rust-lang/rust/commit/cda1d35251b687d7d077c151567fccaae843f157"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "8394db054ed3d44fa51e2ab373dc5c5a64702978", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51152ccf9dd5830c323ec4e9047c277d1b9292d1/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/51152ccf9dd5830c323ec4e9047c277d1b9292d1/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=51152ccf9dd5830c323ec4e9047c277d1b9292d1", "patch": "@@ -341,9 +341,7 @@ mod rt;\n \n // For internal use, not exported\n \n-#[legacy_exports]\n mod unicode;\n-#[legacy_exports]\n mod private;\n mod cmath;\n mod stackwalk;"}, {"sha": "9341ef7cef432116343d4ff14388be14ce54cf81", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/51152ccf9dd5830c323ec4e9047c277d1b9292d1/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51152ccf9dd5830c323ec4e9047c277d1b9292d1/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=51152ccf9dd5830c323ec4e9047c277d1b9292d1", "patch": "@@ -3,17 +3,16 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-mod general_category {\n-    #[legacy_exports];\n-    pure fn Cc(c: char) -> bool {\n+pub mod general_category {\n+    pub pure fn Cc(c: char) -> bool {\n         return match c {\n               '\\x00' .. '\\x1f'\n             | '\\x7f' .. '\\x9f' => true,\n             _ => false\n         };\n     }\n \n-    pure fn Cf(c: char) -> bool {\n+    pub pure fn Cf(c: char) -> bool {\n         return match c {\n               '\\xad'\n             | '\\u0600' .. '\\u0603'\n@@ -32,21 +31,21 @@ mod general_category {\n         };\n     }\n \n-    pure fn Co(c: char) -> bool {\n+    pub pure fn Co(c: char) -> bool {\n         return match c {\n           '\\ue000' .. '\\uf8ff' => true,\n           _ => false\n         };\n     }\n \n-    pure fn Cs(c: char) -> bool {\n+    pub pure fn Cs(c: char) -> bool {\n         return match c {\n               '\\ud800' .. '\\udfff' => true,\n             _ => false\n         };\n     }\n \n-    pure fn Ll(c: char) -> bool {\n+    pub pure fn Ll(c: char) -> bool {\n         return match c {\n               '\\x61' .. '\\x7a'\n             | '\\xaa'\n@@ -651,7 +650,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Lm(c: char) -> bool {\n+    pub pure fn Lm(c: char) -> bool {\n         return match c {\n               '\\u02b0' .. '\\u02c1'\n             | '\\u02c6' .. '\\u02d1'\n@@ -707,7 +706,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Lo(c: char) -> bool {\n+    pub pure fn Lo(c: char) -> bool {\n         return match c {\n               '\\u01bb'\n             | '\\u01c0' .. '\\u01c3'\n@@ -893,7 +892,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Lt(c: char) -> bool {\n+    pub pure fn Lt(c: char) -> bool {\n         return match c {\n               '\\u01c5'\n             | '\\u01c8'\n@@ -910,7 +909,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Lu(c: char) -> bool {\n+    pub pure fn Lu(c: char) -> bool {\n         return match c {\n               '\\x41' .. '\\x5a'\n             | '\\xc0' .. '\\xd6'\n@@ -1502,7 +1501,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Mc(c: char) -> bool {\n+    pub pure fn Mc(c: char) -> bool {\n         return match c {\n               '\\u0903'\n             | '\\u093b'\n@@ -1613,7 +1612,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Me(c: char) -> bool {\n+    pub pure fn Me(c: char) -> bool {\n         return match c {\n               '\\u0488' .. '\\u0489'\n             | '\\u20dd' .. '\\u20e0'\n@@ -1624,7 +1623,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Mn(c: char) -> bool {\n+    pub pure fn Mn(c: char) -> bool {\n         return match c {\n               '\\u0300' .. '\\u036f'\n             | '\\u0483' .. '\\u0487'\n@@ -1817,7 +1816,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Nd(c: char) -> bool {\n+    pub pure fn Nd(c: char) -> bool {\n         return match c {\n               '\\x30' .. '\\x39'\n             | '\\u0660' .. '\\u0669'\n@@ -1861,7 +1860,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Nl(c: char) -> bool {\n+    pub pure fn Nl(c: char) -> bool {\n         return match c {\n               '\\u16ee' .. '\\u16f0'\n             | '\\u2160' .. '\\u2182'\n@@ -1880,7 +1879,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn No(c: char) -> bool {\n+    pub pure fn No(c: char) -> bool {\n         return match c {\n               '\\xb2' .. '\\xb3'\n             | '\\xb9'\n@@ -1928,7 +1927,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Pc(c: char) -> bool {\n+    pub pure fn Pc(c: char) -> bool {\n         return match c {\n               '\\x5f'\n             | '\\u203f' .. '\\u2040'\n@@ -1941,7 +1940,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Pd(c: char) -> bool {\n+    pub pure fn Pd(c: char) -> bool {\n         return match c {\n               '\\x2d'\n             | '\\u058a'\n@@ -1963,7 +1962,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Pe(c: char) -> bool {\n+    pub pure fn Pe(c: char) -> bool {\n         return match c {\n               '\\x29'\n             | '\\x5d'\n@@ -2040,7 +2039,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Pf(c: char) -> bool {\n+    pub pure fn Pf(c: char) -> bool {\n         return match c {\n               '\\xbb'\n             | '\\u2019'\n@@ -2057,7 +2056,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Pi(c: char) -> bool {\n+    pub pure fn Pi(c: char) -> bool {\n         return match c {\n               '\\xab'\n             | '\\u2018'\n@@ -2075,7 +2074,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Po(c: char) -> bool {\n+    pub pure fn Po(c: char) -> bool {\n         return match c {\n               '\\x21' .. '\\x23'\n             | '\\x25' .. '\\x27'\n@@ -2208,7 +2207,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Ps(c: char) -> bool {\n+    pub pure fn Ps(c: char) -> bool {\n         return match c {\n               '\\x28'\n             | '\\x5b'\n@@ -2287,7 +2286,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Sc(c: char) -> bool {\n+    pub pure fn Sc(c: char) -> bool {\n         return match c {\n               '\\x24'\n             | '\\xa2' .. '\\xa5'\n@@ -2310,7 +2309,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Sk(c: char) -> bool {\n+    pub pure fn Sk(c: char) -> bool {\n         return match c {\n               '\\x5e'\n             | '\\x60'\n@@ -2344,7 +2343,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn Sm(c: char) -> bool {\n+    pub pure fn Sm(c: char) -> bool {\n         return match c {\n               '\\x2b'\n             | '\\x3c' .. '\\x3e'\n@@ -2415,7 +2414,7 @@ mod general_category {\n         };\n     }\n \n-    pure fn So(c: char) -> bool {\n+    pub pure fn So(c: char) -> bool {\n         return match c {\n               '\\xa6' .. '\\xa7'\n             | '\\xa9'\n@@ -2534,21 +2533,21 @@ mod general_category {\n         };\n     }\n \n-    pure fn Zl(c: char) -> bool {\n+    pub pure fn Zl(c: char) -> bool {\n         return match c {\n           '\\u2028' => true,\n           _ => false\n         };\n     }\n \n-    pure fn Zp(c: char) -> bool {\n+    pub pure fn Zp(c: char) -> bool {\n         return match c {\n           '\\u2029' => true,\n           _ => false\n         };\n     }\n \n-    pure fn Zs(c: char) -> bool {\n+    pub pure fn Zs(c: char) -> bool {\n         return match c {\n               '\\x20'\n             | '\\xa0'\n@@ -2567,7 +2566,7 @@ mod general_category {\n mod derived_property {\n     #[legacy_exports];\n     /// Check if a character has the alphabetic unicode property\n-    pure fn Alphabetic(c: char) -> bool {\n+    pub pure fn Alphabetic(c: char) -> bool {\n         return match c {\n               '\\x41' .. '\\x5a'\n             | '\\x61' .. '\\x7a'\n@@ -3305,7 +3304,7 @@ mod derived_property {\n         };\n     }\n \n-    pure fn XID_Continue(c: char) -> bool {\n+    pub pure fn XID_Continue(c: char) -> bool {\n         return match c {\n               '\\x30' .. '\\x39'\n             | '\\x41' .. '\\x5a'\n@@ -4176,7 +4175,7 @@ mod derived_property {\n         };\n     }\n \n-    pure fn XID_Start(c: char) -> bool {\n+    pub pure fn XID_Start(c: char) -> bool {\n         return match c {\n               '\\x41' .. '\\x5a'\n             | '\\x61' .. '\\x7a'"}]}