{"sha": "06ea89d3de66538a1d2352eb23ca57c03aa51713", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWE4OWQzZGU2NjUzOGExZDIzNTJlYjIzY2E1N2MwM2FhNTE3MTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-19T17:01:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T17:01:23Z"}, "message": "Merge #10290\n\n10290: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e77542d2a746105eb0ea6ec4e2b538df4c818052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77542d2a746105eb0ea6ec4e2b538df4c818052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ea89d3de66538a1d2352eb23ca57c03aa51713", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhR2zjCRBK7hj4Ov3rIwAAiF8IAByvWwa1wfQZOL8LQe4PVRf2\n9/1eNjLRd3dIgYV7YpuSkHbXM6GZpo7j9fYRPdC8xgJZww7rorTC2KpoWkSB/OeT\nV8XqOpsg59q+MlRPANENZhabLEVDxdMSQFDZ1l6QoONx9Ap1ScoOmar3PnPaHEQg\nYGGnIFuaQT3/L/YEILNTK/d/NSMBfsqD35k7lVbe5UvL5NRPBLZcyT+Ciutwfgaj\nONeD+sPBJoPf9rbD6gw1gkpoYZJcfZQ14SubSfig+XNKY/5XE4g7Qq5xf/TqthjY\nJzC3+91w7r2YGG5qMuJcMCbdHgCsWCbBTxtaV7olvSxsusyDk3MRYpqHUO0dFmo=\n=pcmi\n-----END PGP SIGNATURE-----\n", "payload": "tree e77542d2a746105eb0ea6ec4e2b538df4c818052\nparent b02027d4fe0c347f0451ae6b0771e1520d574b17\nparent 3987bf5d6f2b4ebdb04bd8d62d7120b80a77fa30\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632070883 +0000\ncommitter GitHub <noreply@github.com> 1632070883 +0000\n\nMerge #10290\n\n10290: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ea89d3de66538a1d2352eb23ca57c03aa51713", "html_url": "https://github.com/rust-lang/rust/commit/06ea89d3de66538a1d2352eb23ca57c03aa51713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ea89d3de66538a1d2352eb23ca57c03aa51713/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02027d4fe0c347f0451ae6b0771e1520d574b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02027d4fe0c347f0451ae6b0771e1520d574b17", "html_url": "https://github.com/rust-lang/rust/commit/b02027d4fe0c347f0451ae6b0771e1520d574b17"}, {"sha": "3987bf5d6f2b4ebdb04bd8d62d7120b80a77fa30", "url": "https://api.github.com/repos/rust-lang/rust/commits/3987bf5d6f2b4ebdb04bd8d62d7120b80a77fa30", "html_url": "https://github.com/rust-lang/rust/commit/3987bf5d6f2b4ebdb04bd8d62d7120b80a77fa30"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "1417ac2fa1d1b0f357768b8175d1a7ead90f8730", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -106,7 +106,7 @@ impl CargoConfig {\n             UnsetTestCrates::Only(unset_test_crates) => CfgOverrides::Selective(\n                 unset_test_crates\n                     .iter()\n-                    .map(|name| name.clone())\n+                    .cloned()\n                     .zip(iter::repeat_with(|| {\n                         cfg::CfgDiff::new(Vec::new(), vec![cfg::CfgAtom::Flag(\"test\".into())])\n                             .unwrap()"}, {"sha": "0e37624f314d5177e3cc9d040e21b8dd61f4fd6b", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -47,13 +47,12 @@ fn get_test_json_file<T: DeserializeOwned>(file: &str) -> T {\n     fixup_paths(&mut json);\n     return serde_json::from_value(json).unwrap();\n \n-    fn fixup_paths(val: &mut serde_json::Value) -> () {\n+    fn fixup_paths(val: &mut serde_json::Value) {\n         match val {\n             serde_json::Value::String(s) => replace_root(s, true),\n             serde_json::Value::Array(vals) => vals.iter_mut().for_each(fixup_paths),\n             serde_json::Value::Object(kvals) => kvals.values_mut().for_each(fixup_paths),\n             serde_json::Value::Null | serde_json::Value::Bool(_) | serde_json::Value::Number(_) => {\n-                ()\n             }\n         }\n     }"}, {"sha": "282116c297dc5971fab7ab62ca96bc15cf7ecb72", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -189,7 +189,7 @@ impl ProjectWorkspace {\n                     Some(rustc_dir) => Some({\n                         let meta = CargoWorkspace::fetch_metadata(&rustc_dir, config, progress)\n                             .with_context(|| {\n-                                format!(\"Failed to read Cargo metadata for Rust sources\")\n+                                \"Failed to read Cargo metadata for Rust sources\".to_string()\n                             })?;\n                         CargoWorkspace::new(meta)\n                     }),\n@@ -328,12 +328,12 @@ impl ProjectWorkspace {\n                         }\n                         PackageRoot { is_local, include, exclude }\n                     })\n-                    .chain(sysroot.into_iter().map(|sysroot| PackageRoot {\n+                    .chain(sysroot.iter().map(|sysroot| PackageRoot {\n                         is_local: false,\n                         include: vec![sysroot.root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n-                    .chain(rustc.into_iter().flat_map(|rustc| {\n+                    .chain(rustc.iter().flat_map(|rustc| {\n                         rustc.packages().map(move |krate| PackageRoot {\n                             is_local: false,\n                             include: vec![rustc[krate].manifest.parent().to_path_buf()],\n@@ -343,7 +343,7 @@ impl ProjectWorkspace {\n                     .collect()\n             }\n             ProjectWorkspace::DetachedFiles { files, sysroot, .. } => files\n-                .into_iter()\n+                .iter()\n                 .map(|detached_file| PackageRoot {\n                     is_local: true,\n                     include: vec![detached_file.clone()],\n@@ -553,7 +553,7 @@ fn cargo_to_crate_graph(\n                     &mut crate_graph,\n                     &cargo[pkg],\n                     build_scripts.outputs.get(pkg),\n-                    &cfg_options,\n+                    cfg_options,\n                     load_proc_macro,\n                     file_id,\n                     &cargo[tgt].name,\n@@ -815,17 +815,15 @@ fn add_target_crate_root(\n             .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n     );\n \n-    let crate_id = crate_graph.add_crate_root(\n+    crate_graph.add_crate_root(\n         file_id,\n         edition,\n         Some(display_name),\n         cfg_options,\n         potential_cfg_options,\n         env,\n         proc_macro,\n-    );\n-\n-    crate_id\n+    )\n }\n \n fn sysroot_to_crate_graph(\n@@ -893,27 +891,27 @@ fn inject_cargo_env(package: &PackageData, env: &mut Env) {\n     // CARGO_BIN_NAME, CARGO_BIN_EXE_<name>\n \n     let manifest_dir = package.manifest.parent();\n-    env.set(\"CARGO_MANIFEST_DIR\".into(), manifest_dir.as_os_str().to_string_lossy().into_owned());\n+    env.set(\"CARGO_MANIFEST_DIR\", manifest_dir.as_os_str().to_string_lossy().into_owned());\n \n     // Not always right, but works for common cases.\n-    env.set(\"CARGO\".into(), \"cargo\".into());\n+    env.set(\"CARGO\", \"cargo\".into());\n \n-    env.set(\"CARGO_PKG_VERSION\".into(), package.version.to_string());\n-    env.set(\"CARGO_PKG_VERSION_MAJOR\".into(), package.version.major.to_string());\n-    env.set(\"CARGO_PKG_VERSION_MINOR\".into(), package.version.minor.to_string());\n-    env.set(\"CARGO_PKG_VERSION_PATCH\".into(), package.version.patch.to_string());\n-    env.set(\"CARGO_PKG_VERSION_PRE\".into(), package.version.pre.to_string());\n+    env.set(\"CARGO_PKG_VERSION\", package.version.to_string());\n+    env.set(\"CARGO_PKG_VERSION_MAJOR\", package.version.major.to_string());\n+    env.set(\"CARGO_PKG_VERSION_MINOR\", package.version.minor.to_string());\n+    env.set(\"CARGO_PKG_VERSION_PATCH\", package.version.patch.to_string());\n+    env.set(\"CARGO_PKG_VERSION_PRE\", package.version.pre.to_string());\n \n-    env.set(\"CARGO_PKG_AUTHORS\".into(), String::new());\n+    env.set(\"CARGO_PKG_AUTHORS\", String::new());\n \n-    env.set(\"CARGO_PKG_NAME\".into(), package.name.clone());\n+    env.set(\"CARGO_PKG_NAME\", package.name.clone());\n     // FIXME: This isn't really correct (a package can have many crates with different names), but\n     // it's better than leaving the variable unset.\n-    env.set(\"CARGO_CRATE_NAME\".into(), CrateName::normalize_dashes(&package.name).to_string());\n-    env.set(\"CARGO_PKG_DESCRIPTION\".into(), String::new());\n-    env.set(\"CARGO_PKG_HOMEPAGE\".into(), String::new());\n-    env.set(\"CARGO_PKG_REPOSITORY\".into(), String::new());\n-    env.set(\"CARGO_PKG_LICENSE\".into(), String::new());\n+    env.set(\"CARGO_CRATE_NAME\", CrateName::normalize_dashes(&package.name).to_string());\n+    env.set(\"CARGO_PKG_DESCRIPTION\", String::new());\n+    env.set(\"CARGO_PKG_HOMEPAGE\", String::new());\n+    env.set(\"CARGO_PKG_REPOSITORY\", String::new());\n+    env.set(\"CARGO_PKG_LICENSE\", String::new());\n \n-    env.set(\"CARGO_PKG_LICENSE_FILE\".into(), String::new());\n+    env.set(\"CARGO_PKG_LICENSE_FILE\", String::new());\n }"}, {"sha": "9c7f93e130637ba5b305e64ed566cde9c793bb2e", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -212,7 +212,7 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                     look_ahead_scratch.push(rhs_ele.clone());\n                     let mut rhs_children_clone = rhs_children.clone();\n                     let mut insert = false;\n-                    while let Some(rhs_child) = rhs_children_clone.next() {\n+                    for rhs_child in &mut rhs_children_clone {\n                         if syntax_element_eq(&lhs_ele, &rhs_child) {\n                             cov_mark::hit!(diff_insertions);\n                             insert = true;"}, {"sha": "b01befebea120264f2793cd459c7883b6099e9be", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -556,7 +556,7 @@ pub fn param(pat: ast::Pat, ty: ast::Type) -> ast::Param {\n }\n \n pub fn self_param() -> ast::SelfParam {\n-    ast_from_text(&format!(\"fn f(&self) {{ }}\"))\n+    ast_from_text(\"fn f(&self) { }\")\n }\n \n pub fn ret_type(ty: ast::Type) -> ast::RetType {"}, {"sha": "71cc67a9ca3212f8b614cbab004759e1c03de632", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea89d3de66538a1d2352eb23ca57c03aa51713/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=06ea89d3de66538a1d2352eb23ca57c03aa51713", "patch": "@@ -346,7 +346,6 @@ impl MiniCore {\n                 panic!(\"unused minicore flag: {:?}\", flag);\n             }\n         }\n-        format!(\"{}\", buf);\n         buf\n     }\n }"}]}