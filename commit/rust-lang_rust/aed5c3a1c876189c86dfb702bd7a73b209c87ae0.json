{"sha": "aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDVjM2ExYzg3NjE4OWM4NmRmYjcwMmJkN2E3M2IyMDljODdhZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-20T13:39:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-20T13:39:57Z"}, "message": "Auto merge of #28532 - Eljay:misc-fixes, r=bluss\n\nAs the title says, just cleaning up some old stuff.", "tree": {"sha": "48326cc61cd362530e319a93e81d17720572b39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48326cc61cd362530e319a93e81d17720572b39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "html_url": "https://github.com/rust-lang/rust/commit/aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25aaeb40b11a5983ed6000a8e466c08a701dfb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/25aaeb40b11a5983ed6000a8e466c08a701dfb99", "html_url": "https://github.com/rust-lang/rust/commit/25aaeb40b11a5983ed6000a8e466c08a701dfb99"}, {"sha": "140e2d3a092ebbeea5e110222bea3b37bc49abb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/140e2d3a092ebbeea5e110222bea3b37bc49abb8", "html_url": "https://github.com/rust-lang/rust/commit/140e2d3a092ebbeea5e110222bea3b37bc49abb8"}], "stats": {"total": 152, "additions": 44, "deletions": 108}, "files": [{"sha": "8fcfe97f42afcb2fcc029c8f1a1e418139a7a05d", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -148,15 +148,9 @@ fn test_zip() {\n     let y = y;\n     let mut z = x.iter().zip(&y);\n \n-    // FIXME: #5801: this needs a type hint to compile...\n-    let result: Option<(&usize, & &'static str)> = z.next();\n-    assert_eq!(result.unwrap(), (&5, &(\"bar\")));\n-\n-    let result: Option<(&usize, & &'static str)> = z.next();\n-    assert_eq!(result.unwrap(), (&11, &(\"foo\")));\n-\n-    let result: Option<(&usize, & &'static str)> = z.next();\n-    assert!(result.is_none());\n+    assert_eq!(z.next().unwrap(), (&5, &(\"bar\")));\n+    assert_eq!(z.next().unwrap(), (&11, &(\"foo\")));\n+    assert!(z.next().is_none());\n }\n \n #[test]"}, {"sha": "309a3d51c7602856c4d59f8dc2a4b9d6702463da", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -248,15 +248,14 @@ fn unsafe_cell_unsized() {\n     assert_eq!(unsafe { &mut *cell.get() }, comp);\n }\n \n-// FIXME(#25351) needs deeply nested coercions of DST structs.\n-// #[test]\n-// fn refcell_unsized() {\n-//     let cell: &RefCell<[i32]> = &RefCell::new([1, 2, 3]);\n-//     {\n-//         let b = &mut *cell.borrow_mut();\n-//         b[0] = 4;\n-//         b[2] = 5;\n-//     }\n-//     let comp: &mut [i32] = &mut [4, 2, 5];\n-//     assert_eq!(&*cell.borrow(), comp);\n-// }\n+#[test]\n+fn refcell_unsized() {\n+    let cell: &RefCell<[i32]> = &RefCell::new([1, 2, 3]);\n+    {\n+        let b = &mut *cell.borrow_mut();\n+        b[0] = 4;\n+        b[2] = 5;\n+    }\n+    let comp: &mut [i32] = &mut [4, 2, 5];\n+    assert_eq!(&*cell.borrow(), comp);\n+}"}, {"sha": "4295652b04e59f35500d4e911c3d508c94bbca23", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -89,7 +89,6 @@ macro_rules! lint_initializer {\n /// Declare a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {\n-    // FIXME(#14660): deduplicate\n     (pub $name:ident, $level:ident, $desc:expr) => (\n         pub static $name: &'static ::rustc::lint::Lint\n             = &lint_initializer!($name, $level, $desc);"}, {"sha": "b311ddc4f4515cd1a73bd4010cddda6f7cf48e96", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -211,7 +211,7 @@ pub fn main_args(args: &[String]) -> isize {\n         for &(name, _, description) in PASSES {\n             println!(\"{:>20} - {}\", name, description);\n         }\n-        println!(\"{}\", \"\\nDefault passes for rustdoc:\"); // FIXME: #9970\n+        println!(\"\\nDefault passes for rustdoc:\");\n         for &name in DEFAULT_PASSES {\n             println!(\"{:>20}\", name);\n         }"}, {"sha": "452feed3cdb4effa751e10616edabbd5867e9e98", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -76,8 +76,7 @@\n //! Create a struct called `TestStruct` and serialize and deserialize it to and from JSON using the\n //! serialization API, using the derived serialization code.\n //!\n-//! ```notrust\n-//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n+//! ```rust\n //! extern crate serialize;\n //! use serialize::json;\n //!\n@@ -111,8 +110,7 @@\n //!\n //! ### Simple example of `ToJson` usage\n //!\n-//! ```notrust\n-//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n+//! ```rust\n //! extern crate serialize;\n //! use serialize::json::{self, ToJson, Json};\n //!\n@@ -151,8 +149,7 @@\n //!\n //! ### Verbose example of `ToJson` usage\n //!\n-//! ```notrust\n-//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n+//! ```rust\n //! extern crate serialize;\n //! use std::collections::BTreeMap;\n //! use serialize::json::{self, Json, ToJson};"}, {"sha": "f1d264b38a0c7b18245cb46af66cfc66b351e6a5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -536,16 +536,15 @@ mod tests {\n         assert_eq!(*lock, 2);\n     }\n \n-    // FIXME(#25351) needs deeply nested coercions of DST structs.\n-    // #[test]\n-    // fn test_mutex_unsized() {\n-    //     let mutex: &Mutex<[i32]> = &Mutex::new([1, 2, 3]);\n-    //     {\n-    //         let b = &mut *mutex.lock().unwrap();\n-    //         b[0] = 4;\n-    //         b[2] = 5;\n-    //     }\n-    //     let comp: &[i32] = &[4, 2, 5];\n-    //     assert_eq!(&*mutex.lock().unwrap(), comp);\n-    // }\n+    #[test]\n+    fn test_mutex_unsized() {\n+        let mutex: &Mutex<[i32]> = &Mutex::new([1, 2, 3]);\n+        {\n+            let b = &mut *mutex.lock().unwrap();\n+            b[0] = 4;\n+            b[2] = 5;\n+        }\n+        let comp: &[i32] = &[4, 2, 5];\n+        assert_eq!(&*mutex.lock().unwrap(), comp);\n+    }\n }"}, {"sha": "04ad47082464ec133e8f8e11ed8f180118db08e1", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -578,18 +578,17 @@ mod tests {\n         assert_eq!(*lock, 2);\n     }\n \n-    // FIXME(#25351) needs deeply nested coercions of DST structs.\n-    // #[test]\n-    // fn test_rwlock_unsized() {\n-    //     let rw: &RwLock<[i32]> = &RwLock::new([1, 2, 3]);\n-    //     {\n-    //         let b = &mut *rw.write().unwrap();\n-    //         b[0] = 4;\n-    //         b[2] = 5;\n-    //     }\n-    //     let comp: &[i32] = &[4, 2, 5];\n-    //     assert_eq!(&*rw.read().unwrap(), comp);\n-    // }\n+    #[test]\n+    fn test_rwlock_unsized() {\n+        let rw: &RwLock<[i32]> = &RwLock::new([1, 2, 3]);\n+        {\n+            let b = &mut *rw.write().unwrap();\n+            b[0] = 4;\n+            b[2] = 5;\n+        }\n+        let comp: &[i32] = &[4, 2, 5];\n+        assert_eq!(&*rw.read().unwrap(), comp);\n+    }\n \n     #[test]\n     fn test_rwlock_try_write() {"}, {"sha": "10f77d0207cd22374d0d0a5c8a773c1530e89c55", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -31,7 +31,6 @@ use core::str::next_code_point;\n use ascii::*;\n use borrow::Cow;\n use char;\n-use cmp;\n use fmt;\n use hash::{Hash, Hasher};\n use iter::FromIterator;\n@@ -375,6 +374,7 @@ impl Extend<CodePoint> for Wtf8Buf {\n ///\n /// Similar to `&str`, but can additionally contain surrogate code points\n /// if they\u2019re not in a surrogate pair.\n+#[derive(Eq, Ord, PartialEq, PartialOrd)]\n pub struct Wtf8 {\n     bytes: [u8]\n }\n@@ -383,36 +383,6 @@ impl AsInner<[u8]> for Wtf8 {\n     fn as_inner(&self) -> &[u8] { &self.bytes }\n }\n \n-// FIXME: https://github.com/rust-lang/rust/issues/18805\n-impl PartialEq for Wtf8 {\n-    fn eq(&self, other: &Wtf8) -> bool { self.bytes.eq(&other.bytes) }\n-}\n-\n-// FIXME: https://github.com/rust-lang/rust/issues/18805\n-impl Eq for Wtf8 {}\n-\n-// FIXME: https://github.com/rust-lang/rust/issues/18738\n-impl PartialOrd for Wtf8 {\n-    #[inline]\n-    fn partial_cmp(&self, other: &Wtf8) -> Option<cmp::Ordering> {\n-        self.bytes.partial_cmp(&other.bytes)\n-    }\n-    #[inline]\n-    fn lt(&self, other: &Wtf8) -> bool { self.bytes.lt(&other.bytes) }\n-    #[inline]\n-    fn le(&self, other: &Wtf8) -> bool { self.bytes.le(&other.bytes) }\n-    #[inline]\n-    fn gt(&self, other: &Wtf8) -> bool { self.bytes.gt(&other.bytes) }\n-    #[inline]\n-    fn ge(&self, other: &Wtf8) -> bool { self.bytes.ge(&other.bytes) }\n-}\n-\n-// FIXME: https://github.com/rust-lang/rust/issues/18738\n-impl Ord for Wtf8 {\n-    #[inline]\n-    fn cmp(&self, other: &Wtf8) -> cmp::Ordering { self.bytes.cmp(&other.bytes) }\n-}\n-\n /// Format the slice with double quotes,\n /// and surrogates as `\\u` followed by four hexadecimal digits.\n /// Example: `\"a\\u{D800}\"` for a slice with code points [U+0061, U+D800]"}, {"sha": "17a34cdc611a2757e87d7be39e00f0ee8586f258", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -39,7 +39,6 @@ mod javascript;\n \n static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n \n-#[cfg(not(test))] // thanks #12327\n fn main() {\n     let mut term = Term::new();\n     let cmd: Vec<_> = env::args().collect();"}, {"sha": "a72e348c7201865a43c4fa25e9ce3612a271291c", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -126,8 +126,7 @@ fn main() {\n \n     println!(\"{} keys\", n_keys);\n \n-    // FIXME: #9970\n-    println!(\"{}\", \"\\nBTreeMap:\");\n+    println!(\"\\nBTreeMap:\");\n \n     {\n         let mut map: BTreeMap<usize,usize> = BTreeMap::new();\n@@ -145,8 +144,7 @@ fn main() {\n         vector(&mut map, n_keys, &rand);\n     }\n \n-    // FIXME: #9970\n-    println!(\"{}\", \"\\nHashMap:\");\n+    println!(\"\\nHashMap:\");\n \n     {\n         let mut map: HashMap<usize,usize> = HashMap::new();"}, {"sha": "497b0e63edfc149516456355062e256c767a7a1c", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -111,12 +111,9 @@ fn assign_field4<'a>(x: &'a mut Own<Point>) {\n     x.y = 3; //~ ERROR cannot borrow\n }\n \n-// FIXME(eddyb) #12825 This shouldn't attempt to call deref_mut.\n-/*\n fn deref_imm_method(x: Own<Point>) {\n     let __isize = x.get();\n }\n-*/\n \n fn deref_mut_method1(x: Own<Point>) {\n     x.set(0, 0); //~ ERROR cannot borrow"}, {"sha": "ae342af4a52afe427af59236a375ba86a67e8e47", "filename": "src/test/compile-fail/feature-gated-feature-in-macro-arg.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -8,14 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME #20661: format_args! emits calls to the unstable std::fmt::rt\n-// module, so the compiler has some hacks to make that possible\n-// (in span_is_internal). Unnfortunately those hacks defeat this\n-// particular scenario of checking feature gates in arguments to\n-// println!().\n-\n-// ignore-test\n-\n // tests that input to a macro is checked for use of gated features. If this\n // test succeeds due to the acceptance of a feature, pick a new feature to\n // test. Not ideal, but oh well :("}, {"sha": "21e3343f445869d81915c517deb06d3d72c084f8", "filename": "src/test/run-pass/issue-5060.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5060.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -16,8 +16,7 @@ macro_rules! print_hd_tl {\n             print!(\"{}\", stringify!($field_tl));\n             print!(\", \");\n         )+\n-        // FIXME: #9970\n-        print!(\"{}\", \"]\\n\");\n+        print!(\"]\\n\");\n     })\n }\n "}, {"sha": "ae5bf71d15fe4a59b293f88e5c1a79212235958b", "filename": "src/test/run-pass/lambda-var-hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frun-pass%2Flambda-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frun-pass%2Flambda-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-var-hygiene.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #9383\n-\n // shouldn't affect evaluation of $ex:\n macro_rules! bad_macro {\n     ($ex:expr) => ({(|_x| { $ex }) (9) })"}, {"sha": "e05d51c2bac58464a26601b5b2852fc2f95b0078", "filename": "src/test/rustdoc/hidden-line.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5c3a1c876189c86dfb702bd7a73b209c87ae0/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-line.rs?ref=aed5c3a1c876189c86dfb702bd7a73b209c87ae0", "patch": "@@ -12,8 +12,6 @@\n /// retained.\n ///\n /// ```rust\n-/// mod to_make_deriving_work { // FIXME #4913\n-///\n /// # #[derive(PartialEq)] // invisible\n /// # struct Foo; // invisible\n ///\n@@ -24,8 +22,6 @@\n ///     let x = Bar(Foo);\n ///     assert_eq!(x, x); // check that the derivings worked\n /// }\n-///\n-/// }\n /// ```\n pub fn foo() {}\n "}]}