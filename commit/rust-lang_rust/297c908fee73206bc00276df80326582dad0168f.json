{"sha": "297c908fee73206bc00276df80326582dad0168f", "node_id": "C_kwDOAAsO6NoAKDI5N2M5MDhmZWU3MzIwNmJjMDAyNzZkZjgwMzI2NTgyZGFkMDE2OGY", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-09-28T21:50:58Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-09-28T21:50:58Z"}, "message": "Change `declare_cfn` to use the C visibility for all C ABI functions.", "tree": {"sha": "13554678bbe8dccad8d6e097fdcd1608ed7c51db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13554678bbe8dccad8d6e097fdcd1608ed7c51db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/297c908fee73206bc00276df80326582dad0168f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/297c908fee73206bc00276df80326582dad0168f", "html_url": "https://github.com/rust-lang/rust/commit/297c908fee73206bc00276df80326582dad0168f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/297c908fee73206bc00276df80326582dad0168f/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5443a603efd83c0eacaac0bf5383280c81a6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5443a603efd83c0eacaac0bf5383280c81a6eb", "html_url": "https://github.com/rust-lang/rust/commit/bc5443a603efd83c0eacaac0bf5383280c81a6eb"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "59b1c7fb5dbd040feb5405184e4cd7dd49d8802d", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=297c908fee73206bc00276df80326582dad0168f", "patch": "@@ -1458,12 +1458,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n         } else {\n             format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n         };\n-        let f = self.declare_cfn(\n-            &name,\n-            llvm::UnnamedAddr::No,\n-            llvm::Visibility::Default,\n-            self.type_func(&[src_ty], dest_ty),\n-        );\n+        let f = self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n         self.call(self.type_func(&[src_ty], dest_ty), f, &[val], None)\n     }\n "}, {"sha": "67ffc7cb9511f3939ca94d7e951e1b0c16805bc8", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=297c908fee73206bc00276df80326582dad0168f", "patch": "@@ -528,12 +528,7 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     llfn\n                 } else {\n                     let fty = self.type_variadic_func(&[], self.type_i32());\n-                    let llfn = self.declare_cfn(\n-                        name,\n-                        llvm::UnnamedAddr::Global,\n-                        llvm::Visibility::Default,\n-                        fty,\n-                    );\n+                    let llfn = self.declare_cfn(name, llvm::UnnamedAddr::Global, fty);\n                     let target_cpu = attributes::target_cpu_attr(self);\n                     attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[target_cpu]);\n                     llfn\n@@ -590,13 +585,7 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n         if self.get_declared_value(\"main\").is_none() {\n-            let visibility = if self.sess().target.default_hidden_visibility {\n-                llvm::Visibility::Hidden\n-            } else {\n-                llvm::Visibility::Default\n-            };\n-\n-            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, visibility, fn_type))\n+            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))\n         } else {\n             // If the symbol already exists, it is an error: for example, the user wrote\n             // #[no_mangle] extern \"C\" fn main(..) {..}\n@@ -626,7 +615,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n         } else {\n             self.type_variadic_func(&[], ret)\n         };\n-        let f = self.declare_cfn(name, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n+        let f = self.declare_cfn(name, llvm::UnnamedAddr::No, fn_ty);\n         self.intrinsics.borrow_mut().insert(name, (fn_ty, f));\n         (fn_ty, f)\n     }"}, {"sha": "f79ef11720df9b4436d83dd50674065b7e12a988", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=297c908fee73206bc00276df80326582dad0168f", "patch": "@@ -78,9 +78,15 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         &self,\n         name: &str,\n         unnamed: llvm::UnnamedAddr,\n-        visibility: llvm::Visibility,\n         fn_type: &'ll Type,\n     ) -> &'ll Value {\n+        // Declare C ABI functions with the visibility used by C by default.\n+        let visibility = if self.tcx.sess.target.default_hidden_visibility {\n+            llvm::Visibility::Hidden\n+        } else {\n+            llvm::Visibility::Default\n+        };\n+\n         declare_raw_fn(self, name, llvm::CCallConv, unnamed, visibility, fn_type)\n     }\n "}, {"sha": "a640de42a6a86a3df51a5e5c3f48f7ae56acad91", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297c908fee73206bc00276df80326582dad0168f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=297c908fee73206bc00276df80326582dad0168f", "patch": "@@ -1216,7 +1216,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n         };\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n-        let f = bx.declare_cfn(llvm_name, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n+        let f = bx.declare_cfn(llvm_name, llvm::UnnamedAddr::No, fn_ty);\n         let c =\n             bx.call(fn_ty, f, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n         Ok(c)\n@@ -1416,12 +1416,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             &[llvm_pointer_vec_ty, alignment_ty, mask_ty, llvm_elem_vec_ty],\n             llvm_elem_vec_ty,\n         );\n-        let f = bx.declare_cfn(\n-            &llvm_intrinsic,\n-            llvm::UnnamedAddr::No,\n-            llvm::Visibility::Default,\n-            fn_ty,\n-        );\n+        let f = bx.declare_cfn(&llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n         let v =\n             bx.call(fn_ty, f, &[args[1].immediate(), alignment, mask, args[0].immediate()], None);\n         return Ok(v);\n@@ -1547,12 +1542,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             format!(\"llvm.masked.scatter.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n         let fn_ty =\n             bx.type_func(&[llvm_elem_vec_ty, llvm_pointer_vec_ty, alignment_ty, mask_ty], ret_t);\n-        let f = bx.declare_cfn(\n-            &llvm_intrinsic,\n-            llvm::UnnamedAddr::No,\n-            llvm::Visibility::Default,\n-            fn_ty,\n-        );\n+        let f = bx.declare_cfn(&llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n         let v =\n             bx.call(fn_ty, f, &[args[0].immediate(), args[1].immediate(), alignment, mask], None);\n         return Ok(v);\n@@ -2001,8 +1991,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let fn_ty = bx.type_func(&[vec_ty, vec_ty], vec_ty);\n-        let f =\n-            bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n+        let f = bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n         let v = bx.call(fn_ty, f, &[lhs, rhs], None);\n         return Ok(v);\n     }"}]}