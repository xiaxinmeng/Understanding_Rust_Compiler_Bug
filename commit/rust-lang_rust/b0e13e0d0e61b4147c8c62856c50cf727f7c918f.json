{"sha": "b0e13e0d0e61b4147c8c62856c50cf727f7c918f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZTEzZTBkMGU2MWI0MTQ3YzhjNjI4NTZjNTBjZjcyN2Y3YzkxOGY=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-09-10T22:39:26Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-09-11T14:57:15Z"}, "message": "Add HashSet::with_capacity_and_keys() function\n\nThis function can be use to create HashSets before the tls is\ninitialized.", "tree": {"sha": "bbe5ba14522ff90048821c3ac5f255859442391b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe5ba14522ff90048821c3ac5f255859442391b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e13e0d0e61b4147c8c62856c50cf727f7c918f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e13e0d0e61b4147c8c62856c50cf727f7c918f", "html_url": "https://github.com/rust-lang/rust/commit/b0e13e0d0e61b4147c8c62856c50cf727f7c918f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e13e0d0e61b4147c8c62856c50cf727f7c918f/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ed30cd5eab9af1976a994c50d146a3dbeccad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ed30cd5eab9af1976a994c50d146a3dbeccad4", "html_url": "https://github.com/rust-lang/rust/commit/67ed30cd5eab9af1976a994c50d146a3dbeccad4"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "09f0af00417f2e2182b7e0ab6d412fee4b685a79", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0e13e0d0e61b4147c8c62856c50cf727f7c918f/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e13e0d0e61b4147c8c62856c50cf727f7c918f/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=b0e13e0d0e61b4147c8c62856c50cf727f7c918f", "patch": "@@ -687,6 +687,17 @@ impl<T:Hash + Eq> HashSet<T> {\n         HashSet { map: HashMap::with_capacity(capacity) }\n     }\n \n+    /// Create an empty HashSet with space for at least `capacity`\n+    /// elements in the hash table, using `k0` and `k1` as the keys.\n+    ///\n+    /// Warning: `k0` and `k1` are normally randomly generated, and\n+    /// are designed to allow HashSets to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting them\n+    /// manually using this function can expose a DoS attack vector.\n+    pub fn with_capacity_and_keys(k0: u64, k1: u64, capacity: uint) -> HashSet<T> {\n+        HashSet { map: HashMap::with_capacity_and_keys(k0, k1, capacity) }\n+    }\n+\n     /// Reserve space for at least `n` elements in the hash table.\n     pub fn reserve_at_least(&mut self, n: uint) {\n         self.map.reserve_at_least(n)"}]}