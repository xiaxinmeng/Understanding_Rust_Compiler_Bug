{"sha": "44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTJkYzI3ODlhOGIzYTE5MDI0ZWM2N2UyNWY4YmQ0ZDI4YWZkY2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T22:29:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T22:29:17Z"}, "message": "Improve mutability checking. Closes #118.", "tree": {"sha": "ef2c5effdfa8ce4a1efce2ab8c3a142a574acbf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2c5effdfa8ce4a1efce2ab8c3a142a574acbf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "html_url": "https://github.com/rust-lang/rust/commit/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd8413906ab2e22a152bac8cb53f0884b63f111", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd8413906ab2e22a152bac8cb53f0884b63f111", "html_url": "https://github.com/rust-lang/rust/commit/8bd8413906ab2e22a152bac8cb53f0884b63f111"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "c55e1d12b30d7e184099f7694c8dd884aa9aa638", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -51,7 +51,7 @@ let mutability_checking_visitor\n       if (is_mutable or is_init)\n       then ()\n       else err (Some s.id)\n-        \"writing to non-mutable slot of type %a in statement %a\"\n+        \"writing to immutable type %a in statement %a\"\n         Ast.sprintf_ty dst_ty Ast.sprintf_stmt s\n   in\n     (* FIXME (issue #75): enforce the no-write-alias-to-immutable-slot"}, {"sha": "7943e88bb80f0e63144e109aa7b039a5de439023", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -45,7 +45,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n \n   let get_slot_ty (slot:Ast.slot) : Ast.ty =\n     match slot.Ast.slot_ty with\n-        Some ty -> ty \n+        Some ty -> ty\n       | None -> Common.bug () \"get_slot_ty: no type in slot\"\n   in\n \n@@ -62,7 +62,11 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   in\n \n   let maybe_mutable (mutability:Ast.mutability) (ty:Ast.ty) : Ast.ty =\n-    if mutability = Ast.MUT_mutable then Ast.TY_mutable ty else ty\n+    let res =\n+      if mutability = Ast.MUT_mutable then Ast.TY_mutable ty else ty\n+    in\n+      log cx \"maybe_mutable: %a -> %a\" Ast.sprintf_ty ty Ast.sprintf_ty res;\n+      res\n   in\n \n   (*\n@@ -229,7 +233,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             ()\n             \"internal_check_slot: supplied defn wasn't a slot at all\"\n     in\n-    match infer, slot.Ast.slot_ty with \n+    match infer, slot.Ast.slot_ty with\n         Some expected, Some actual ->\n           demand expected actual;\n           actual\n@@ -301,6 +305,10 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         | `Module items -> Ast.sprintf_mod_items chan items\n     in\n \n+    let _ = log cx \"base lval %a, base type %a\"\n+      Ast.sprintf_lval base sprintf_itype ()\n+    in\n+\n     let rec typecheck base_ity =\n       match base_ity, comp with\n           `Type (Ast.TY_rec ty_rec), Ast.COMP_named (Ast.COMP_ident id) ->\n@@ -455,14 +463,14 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       : (Ast.ty * int) =\n     let yield_ty ty =\n       let (ty, n_boxes) = if deref then unbox ty else (ty, 0) in\n-      (maybe_mutable mut ty, n_boxes)\n+        (maybe_mutable mut ty, n_boxes)\n     in\n     match infer, internal_check_lval infer lval with\n       | None, LTYPE_mono ty -> yield_ty ty\n       | Some expected, LTYPE_mono actual ->\n           demand expected actual;\n           yield_ty actual\n-      | None, (LTYPE_poly _ as lty) -> \n+      | None, (LTYPE_poly _ as lty) ->\n           Common.err\n             None\n             \"not enough context to automatically instantiate the polymorphic \\\n@@ -487,9 +495,21 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n      * Get the real one. *)\n     let lval_id = Semant.lval_base_id lval in\n     let lval = Hashtbl.find cx.Semant.ctxt_all_lvals lval_id in\n+    let _ = log cx \"generic_check_lval %a mut=%s deref=%s infer=%s\"\n+      Ast.sprintf_lval lval\n+      (if mut = Ast.MUT_mutable then \"mutable\" else \"immutable\")\n+      (if deref then \"true\" else \"false\")\n+      (match infer with\n+           None -> \"<none>\"\n+         | Some t -> Fmt.fmt_to_str Ast.fmt_ty t)\n+    in\n     let (lval_ty, n_boxes) =\n       internal_check_outer_lval ~mut:mut ~deref:deref infer lval\n     in\n+    let _ = log cx \"checked lval %a with type %a\"\n+      Ast.sprintf_lval lval\n+      Ast.sprintf_ty lval_ty\n+    in\n \n     if Hashtbl.mem cx.Semant.ctxt_all_lval_types lval_id then\n       assert ((Hashtbl.find cx.Semant.ctxt_all_lval_types lval_id) = lval_ty)\n@@ -514,8 +534,8 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         implemented; please add explicit dereference operators\";\n     Hashtbl.replace cx.Semant.ctxt_auto_deref_lval lval_id (n_boxes > 0);\n \n-    (* Before demoting the lval to a value, strip off mutability. *)\n-    fundamental_ty lval_ty\n+      (* Before demoting the lval to a value, strip off mutability. *)\n+      fundamental_ty lval_ty\n \n   (* Note that this function should be avoided when possible, because it\n    * cannot perform type inference. In general you should prefer\n@@ -538,11 +558,12 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   in\n \n   let infer_lval\n-      ?mut:(mut=Ast.MUT_mutable)\n+      ?mut:(mut=Ast.MUT_immutable)\n       (ty:Ast.ty)\n       (lval:Ast.lval)\n       : unit =\n-    ignore (generic_check_lval ?mut:mut ~deref:false (Some ty) lval)\n+    ignore (generic_check_lval ?mut:mut ~deref:false\n+              (Some (Ast.TY_mutable ty)) lval)\n   in\n \n   (*\n@@ -574,7 +595,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | Ast.EXPR_binary (binop, lhs, rhs) ->\n           let operand_ty = check_atom ~deref:true lhs in\n           demand operand_ty (check_atom ~deref:true rhs);\n-          check_binop binop operand_ty \n+          check_binop binop operand_ty\n       | Ast.EXPR_unary (Ast.UNOP_not, atom) ->\n           demand Ast.TY_bool (check_atom ~deref:true atom);\n           Ast.TY_bool\n@@ -596,7 +617,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   let check_fn (callee:Ast.lval) (args:Ast.atom array) : Ast.ty =\n     let arg_tys = Array.map check_atom args in\n     let callee_ty = check_lval callee in\n-    demand_fn (Array.map (fun ty -> Some ty) arg_tys) callee_ty \n+    demand_fn (Array.map (fun ty -> Some ty) arg_tys) callee_ty\n   in\n \n   let rec check_pat (expected:Ast.ty) (pat:Ast.pat) : unit ="}, {"sha": "2a8ec11eaf3a78d16f8e7b0f2bf292f86224d998", "filename": "src/test/compile-fail/writing-through-read-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-// error-pattern: writing to non-mutable slot\n+// error-pattern: writing to immutable type\n \n type point = rec(int x, int y, int z);\n "}, {"sha": "ffa2cebe2fd801559e1fea4153247faf5406db45", "filename": "src/test/compile-fail/writing-to-immutable-obj.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: writing to immutable type\n+obj objy(int x) {\n+    fn foo() -> () {\n+        x = 5;\n+    }\n+}\n+fn main() {\n+}"}, {"sha": "42206fe4124ef91328c2836ca9faf152e657a89b", "filename": "src/test/compile-fail/writing-to-immutable-rec.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: writing to immutable type\n+fn main() {\n+  let rec(int x) r = rec(x=1);\n+  r.x = 6;\n+}"}, {"sha": "bd974dcc786aa6fd19c4a06ccd53a7ef1e07d560", "filename": "src/test/compile-fail/writing-to-immutable-tup.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: writing to immutable type\n+fn main() {\n+  let tup(int) t = tup(1);\n+  t._0 = 5;\n+}"}, {"sha": "341037c346c2ae0b0bd061d74480d9036366dbed", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: writing to immutable type\n+fn main() {\n+  let vec[int] v = vec(1, 2, 3);\n+  v.(1) = 4;\n+}\n\\ No newline at end of file"}, {"sha": "d8d67c141b0c13f636b35948bfaf65bfe75f8d37", "filename": "src/test/run-pass/foreach-nested-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -14,7 +14,8 @@ iter range(int start, int stop) -> int {\n }\n \n fn main() {\n-    let vec[int] a = vec(-1, -1, -1, -1, -1, -1, -1, -1);\n+    let vec[mutable int] a =\n+      vec[mutable](-1, -1, -1, -1, -1, -1, -1, -1);\n     let int p = 0;\n \n     for each (int i in two()) {"}, {"sha": "6287477ab93f212aad8f14f07d3d2c74d1ec4be4", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2dc2789a8b3a19024ec67e25f8bd4d28afdce/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=44e2dc2789a8b3a19024ec67e25f8bd4d28afdce", "patch": "@@ -6,7 +6,7 @@ iter two() -> int {\n }\n \n fn main() {\n-    let vec[int] a = vec(-1, -1, -1, -1);\n+    let vec[mutable int] a = vec[mutable](-1, -1, -1, -1);\n     let int p = 0;\n \n     for each (int i in two()) {"}]}