{"sha": "540a50df0fb23127edf0b35b0e497748e24bba1a", "node_id": "C_kwDOAAsO6NoAKDU0MGE1MGRmMGZiMjMxMjdlZGYwYjM1YjBlNDk3NzQ4ZTI0YmJhMWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T16:39:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T16:39:26Z"}, "message": "Auto merge of #109941 - compiler-errors:rollup-5lsst2u, r=compiler-errors\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #109723 (Pull some tuple variant fields out into their own struct)\n - #109838 (Fix `non_exhaustive_omitted_patterns` lint span)\n - #109901 (Enforce VarDebugInfo::Place in MIR validation.)\n - #109913 (Doc-comment  `IndexVec::from_elem` and use it in a few more places)\n - #109914 (Emit feature error for parenthesized generics in associated type bounds)\n - #109919 (rustdoc: escape GAT args in more cases)\n - #109937 (Don't collect return-position impl traits for documentation)\n - #109938 (Move a const-prop-lint specific hack from mir interpret to const-prop-lint and make it fallible)\n - #109940 (Add regression test for #93911)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3c9c994e0515892b6f6e112fc251edbb9986466a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9c994e0515892b6f6e112fc251edbb9986466a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540a50df0fb23127edf0b35b0e497748e24bba1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540a50df0fb23127edf0b35b0e497748e24bba1a", "html_url": "https://github.com/rust-lang/rust/commit/540a50df0fb23127edf0b35b0e497748e24bba1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540a50df0fb23127edf0b35b0e497748e24bba1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "html_url": "https://github.com/rust-lang/rust/commit/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3"}, {"sha": "678d7c505d26a0e969c6a49e18a642f7d7de9a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/678d7c505d26a0e969c6a49e18a642f7d7de9a98", "html_url": "https://github.com/rust-lang/rust/commit/678d7c505d26a0e969c6a49e18a642f7d7de9a98"}], "stats": {"total": 768, "additions": 533, "deletions": 235}, "files": [{"sha": "fb9d71b52a8a612d2fa7ae4c1d91e9382d3bfd41", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -2890,6 +2890,20 @@ pub struct Fn {\n     pub body: Option<P<Block>>,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct StaticItem {\n+    pub ty: P<Ty>,\n+    pub mutability: Mutability,\n+    pub expr: Option<P<Expr>>,\n+}\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct ConstItem {\n+    pub defaultness: Defaultness,\n+    pub ty: P<Ty>,\n+    pub expr: Option<P<Expr>>,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n@@ -2903,11 +2917,11 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(P<Ty>, Mutability, Option<P<Expr>>),\n+    Static(Box<StaticItem>),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(Box<ConstItem>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n@@ -3023,7 +3037,7 @@ pub type AssocItem = Item<AssocItemKind>;\n pub enum AssocItemKind {\n     /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(Box<ConstItem>),\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n@@ -3035,7 +3049,7 @@ pub enum AssocItemKind {\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(defaultness, ..)\n+            Self::Const(box ConstItem { defaultness, .. })\n             | Self::Fn(box Fn { defaultness, .. })\n             | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n@@ -3046,7 +3060,7 @@ impl AssocItemKind {\n impl From<AssocItemKind> for ItemKind {\n     fn from(assoc_item_kind: AssocItemKind) -> ItemKind {\n         match assoc_item_kind {\n-            AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n+            AssocItemKind::Const(item) => ItemKind::Const(item),\n             AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             AssocItemKind::Type(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3059,7 +3073,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+            ItemKind::Const(item) => AssocItemKind::Const(item),\n             ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_kind) => AssocItemKind::Type(ty_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n@@ -3084,7 +3098,9 @@ pub enum ForeignItemKind {\n impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n-            ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n+            ForeignItemKind::Static(a, b, c) => {\n+                ItemKind::Static(StaticItem { ty: a, mutability: b, expr: c }.into())\n+            }\n             ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3097,7 +3113,9 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+            ItemKind::Static(box StaticItem { ty: a, mutability: b, expr: c }) => {\n+                ForeignItemKind::Static(a, b, c)\n+            }\n             ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_alias_kind) => ForeignItemKind::TyAlias(ty_alias_kind),\n             ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),\n@@ -3114,8 +3132,8 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n-    static_assert_size!(AssocItem, 104);\n-    static_assert_size!(AssocItemKind, 32);\n+    static_assert_size!(AssocItem, 88);\n+    static_assert_size!(AssocItemKind, 16);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 32);\n     static_assert_size!(Expr, 72);"}, {"sha": "2424073ae53adae2bfb9b7f034e25f8ec70432dd", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -7,10 +7,10 @@\n //! a `MutVisitor` renaming item names in a module will miss all of those\n //! that are created by the expansion of a macro.\n \n-use crate::ast::*;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n+use crate::{ast::*, StaticItem};\n \n use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,14 +1030,12 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) => {\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, vis);\n-            vis.visit_ty(ty);\n-            visit_opt(expr, |expr| vis.visit_expr(expr));\n+        ItemKind::Const(item) => {\n+            visit_const_item(item, vis);\n         }\n         ItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, vis);\n@@ -1120,10 +1118,8 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, visitor);\n-            visitor.visit_ty(ty);\n-            visit_opt(expr, |expr| visitor.visit_expr(expr));\n+        AssocItemKind::Const(item) => {\n+            visit_const_item(item, visitor);\n         }\n         AssocItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, visitor);\n@@ -1153,6 +1149,15 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     smallvec![item]\n }\n \n+fn visit_const_item<T: MutVisitor>(\n+    ConstItem { defaultness, ty, expr }: &mut ConstItem,\n+    visitor: &mut T,\n+) {\n+    visit_defaultness(defaultness, visitor);\n+    visitor.visit_ty(ty);\n+    visit_opt(expr, |expr| visitor.visit_expr(expr));\n+}\n+\n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety, asyncness, constness, ext: _ } = header;\n     visit_constness(constness, vis);"}, {"sha": "3b08467fde2bf6b8a7a598e7066589785245d305", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -13,7 +13,7 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use crate::ast::*;\n+use crate::{ast::*, StaticItem};\n \n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -305,8 +305,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(typ, _, expr) | ItemKind::Const(_, typ, expr) => {\n-            visitor.visit_ty(typ);\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr })\n+        | ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n+            visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n         ItemKind::Fn(box Fn { defaultness: _, generics, sig, body }) => {\n@@ -674,7 +675,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) => {\n+        AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "f89e254a2f54dc248bc61e192cc7f4e175a9f10a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -229,12 +229,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n-            ItemKind::Static(t, m, e) => {\n+            ItemKind::Static(box ast::StaticItem { ty: t, mutability: m, expr: e }) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }\n-            ItemKind::Const(_, t, e) => {\n-                let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n+            ItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n+                let (ty, body_id) = self.lower_const_item(ty, span, expr.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(box Fn {\n@@ -708,10 +708,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n-                let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n+                let body = expr.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { sig, generics, body: None, .. }) => {\n@@ -809,7 +809,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n \n         let (generics, kind) = match &i.kind {\n-            AssocItemKind::Const(_, ty, expr) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 ("}, {"sha": "236ebd04ae88d9f3be07df343455107c7513f4ab", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -9,8 +9,8 @@\n use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n-use rustc_ast::walk_list;\n use rustc_ast::*;\n+use rustc_ast::{walk_list, StaticItem};\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_macros::Subdiagnostic;\n@@ -983,14 +983,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().emit_err(errors::FieldlessUnion { span: item.span });\n                 }\n             }\n-            ItemKind::Const(def, .., None) => {\n-                self.check_defaultness(item.span, *def);\n+            ItemKind::Const(box ConstItem { defaultness, expr: None, .. }) => {\n+                self.check_defaultness(item.span, *defaultness);\n                 self.session.emit_err(errors::ConstWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n                 });\n             }\n-            ItemKind::Static(.., None) => {\n+            ItemKind::Static(box StaticItem { expr: None, .. }) => {\n                 self.session.emit_err(errors::StaticWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n@@ -1259,13 +1259,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(_, _, body) => {\n-                    if body.is_none() {\n-                        self.session.emit_err(errors::AssocConstWithoutBody {\n-                            span: item.span,\n-                            replace_span: self.ending_semi_or_hi(item.span),\n-                        });\n-                    }\n+                AssocItemKind::Const(box ConstItem { expr: None, .. }) => {\n+                    self.session.emit_err(errors::AssocConstWithoutBody {\n+                        span: item.span,\n+                        replace_span: self.ending_semi_or_hi(item.span),\n+                    });\n                 }\n                 AssocItemKind::Fn(box Fn { body, .. }) => {\n                     if body.is_none() {"}, {"sha": "b3923b651eb3bc1c8e1dc6598e59a81968b5ec1b", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -485,17 +485,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             if let Some(args) = constraint.gen_args.as_ref()\n                 && matches!(\n                     args,\n-                    ast::GenericArgs::ReturnTypeNotation(..) | ast::GenericArgs::Parenthesized(..)\n+                    ast::GenericArgs::ReturnTypeNotation(..)\n                 )\n             {\n-                // RTN is gated elsewhere, and parenthesized args will turn into\n-                // another error.\n-                if matches!(args, ast::GenericArgs::Parenthesized(..)) {\n-                    self.sess.delay_span_bug(\n-                        constraint.span,\n-                        \"should have emitted a parenthesized generics error\",\n-                    );\n-                }\n+                // RTN is gated below with a `gate_all`.\n             } else {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "c465f8c948a801ee468f3b6927d371fdd8218e26", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -2,6 +2,7 @@ use crate::pp::Breaks::Inconsistent;\n use crate::pprust::state::delimited::IterDelimited;\n use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n+use ast::StaticItem;\n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n use rustc_ast::ModKind;\n@@ -156,7 +157,7 @@ impl<'a> State<'a> {\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n             }\n-            ast::ItemKind::Static(ty, mutbl, body) => {\n+            ast::ItemKind::Static(box StaticItem { ty, mutability: mutbl, expr: body }) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(\n                     item.ident,\n@@ -167,8 +168,15 @@ impl<'a> State<'a> {\n                     def,\n                 );\n             }\n-            ast::ItemKind::Const(def, ty, body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, *def);\n+            ast::ItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(\n+                    item.ident,\n+                    None,\n+                    ty,\n+                    expr.as_deref(),\n+                    &item.vis,\n+                    *defaultness,\n+                );\n             }\n             ast::ItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(\n@@ -507,8 +515,8 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n-            ast::AssocItemKind::Const(def, ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n+            ast::AssocItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(ident, None, ty, expr.as_deref(), vis, *defaultness);\n             }\n             ast::AssocItemKind::Type(box ast::TyAlias {\n                 defaultness,"}, {"sha": "2c387edfef073cf0df2bb4a4f6a34e79445f9d37", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -63,7 +63,7 @@ impl LocalUseMap {\n         elements: &RegionValueElements,\n         body: &Body<'_>,\n     ) -> Self {\n-        let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n+        let nones = IndexVec::from_elem(None, &body.local_decls);\n         let mut local_use_map = LocalUseMap {\n             first_def_at: nones.clone(),\n             first_use_at: nones.clone(),\n@@ -76,7 +76,7 @@ impl LocalUseMap {\n         }\n \n         let mut locals_with_use_data: IndexVec<Local, bool> =\n-            IndexVec::from_elem_n(false, body.local_decls.len());\n+            IndexVec::from_elem(false, &body.local_decls);\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n \n         LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }"}, {"sha": "866cc5adbf3b15b4b40a6029d15cdaf0e9414278", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -25,12 +25,12 @@ pub fn expand(\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n     let (item, is_stmt, ty_span) =\n         if let Annotatable::Item(item) = &item\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, false, ecx.with_def_site_ctxt(ty.span))\n         } else if let Annotatable::Stmt(stmt) = &item\n             && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, true, ecx.with_def_site_ctxt(ty.span))\n         } else {"}, {"sha": "a76ed4ee6cee35727467db0f5f5cbf6f563e5e0f", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -254,25 +254,27 @@ pub fn expand_test_or_bench(\n \n     let location_info = get_location_info(cx, &item);\n \n-    let mut test_const = cx.item(\n-        sp,\n-        Ident::new(item.ident.name, sp),\n-        thin_vec![\n-            // #[cfg(test)]\n-            cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n-            // #[rustc_test_marker = \"test_case_sort_key\"]\n-            cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n-        ],\n-        // const $ident: test::TestDescAndFn =\n-        ast::ItemKind::Const(\n-            ast::Defaultness::Final,\n-            cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n-            // test::TestDescAndFn {\n-            Some(\n-                cx.expr_struct(\n-                    sp,\n-                    test_path(\"TestDescAndFn\"),\n-                    thin_vec![\n+    let mut test_const =\n+        cx.item(\n+            sp,\n+            Ident::new(item.ident.name, sp),\n+            thin_vec![\n+                // #[cfg(test)]\n+                cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n+                // #[rustc_test_marker = \"test_case_sort_key\"]\n+                cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n+            ],\n+            // const $ident: test::TestDescAndFn =\n+            ast::ItemKind::Const(\n+                ast::ConstItem {\n+                    defaultness: ast::Defaultness::Final,\n+                    ty: cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n+                    // test::TestDescAndFn {\n+                    expr: Some(\n+                        cx.expr_struct(\n+                            sp,\n+                            test_path(\"TestDescAndFn\"),\n+                            thin_vec![\n                         // desc: test::TestDesc {\n                         field(\n                             \"desc\",\n@@ -359,10 +361,12 @@ pub fn expand_test_or_bench(\n                         // testfn: test::StaticTestFn(...) | test::StaticBenchFn(...)\n                         field(\"testfn\", test_fn), // }\n                     ],\n-                ), // }\n+                        ), // }\n+                    ),\n+                }\n+                .into(),\n             ),\n-        ),\n-    );\n+        );\n     test_const = test_const.map(|mut tc| {\n         tc.vis.kind = ast::VisibilityKind::Public;\n         tc"}, {"sha": "280f0207116f3208c9ddf8ac32288de46fdc8730", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -165,11 +165,15 @@ fn calculate_debuginfo_offset<\n             mir::ProjectionElem::Downcast(_, variant) => {\n                 place = place.downcast(bx, variant);\n             }\n-            _ => span_bug!(\n-                var.source_info.span,\n-                \"unsupported var debuginfo place `{:?}`\",\n-                mir::Place { local, projection: var.projection },\n-            ),\n+            _ => {\n+                // Sanity check for `can_use_in_debuginfo`.\n+                debug_assert!(!elem.can_use_in_debuginfo());\n+                span_bug!(\n+                    var.source_info.span,\n+                    \"unsupported var debuginfo place `{:?}`\",\n+                    mir::Place { local, projection: var.projection },\n+                )\n+            }\n         }\n     }\n "}, {"sha": "5310ef0bb3ed0e076b82331dc33a2be2f5d484c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -612,14 +612,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         span: Option<Span>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        // FIXME(const_prop): normalization needed b/c const prop lint in\n-        // `mir_drops_elaborated_and_const_checked`, which happens before\n-        // optimized MIR. Only after optimizing the MIR can we guarantee\n-        // that the `RevealAll` pass has happened and that the body's consts\n-        // are normalized, so any call to resolve before that needs to be\n-        // manually normalized.\n-        let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n-        match val {\n+        match *val {\n             mir::ConstantKind::Ty(ct) => {\n                 let ty = ct.ty();\n                 let valtree = self.eval_ty_constant(ct, span)?;"}, {"sha": "e798c9d236e1a0a68aa1bb08b8187f4768e08cd3", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -5,13 +5,12 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::traits::Reveal;\n use rustc_middle::mir::interpret::Scalar;\n-use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{\n     traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n     MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, START_BLOCK,\n+    TerminatorKind, UnOp, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -419,13 +418,49 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         self.super_projection_elem(local, proj_base, elem, context, location);\n     }\n \n+    fn visit_var_debug_info(&mut self, debuginfo: &VarDebugInfo<'tcx>) {\n+        let check_place = |place: Place<'_>| {\n+            if place.projection.iter().any(|p| !p.can_use_in_debuginfo()) {\n+                self.fail(\n+                    START_BLOCK.start_location(),\n+                    format!(\"illegal place {:?} in debuginfo for {:?}\", place, debuginfo.name),\n+                );\n+            }\n+        };\n+        match debuginfo.value {\n+            VarDebugInfoContents::Const(_) => {}\n+            VarDebugInfoContents::Place(place) => check_place(place),\n+            VarDebugInfoContents::Composite { ty, ref fragments } => {\n+                for f in fragments {\n+                    check_place(f.contents);\n+                    if ty.is_union() || ty.is_enum() {\n+                        self.fail(\n+                            START_BLOCK.start_location(),\n+                            format!(\"invalid type {:?} for composite debuginfo\", ty),\n+                        );\n+                    }\n+                    if f.projection.iter().any(|p| !matches!(p, PlaceElem::Field(..))) {\n+                        self.fail(\n+                            START_BLOCK.start_location(),\n+                            format!(\n+                                \"illegal projection {:?} in debuginfo for {:?}\",\n+                                f.projection, debuginfo.name\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        self.super_var_debug_info(debuginfo);\n+    }\n+\n     fn visit_place(&mut self, place: &Place<'tcx>, cntxt: PlaceContext, location: Location) {\n         // Set off any `bug!`s in the type computation code\n         let _ = place.ty(&self.body.local_decls, self.tcx);\n \n         if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial)\n             && place.projection.len() > 1\n-            && cntxt != PlaceContext::NonUse(VarDebugInfo)\n+            && cntxt != PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n             && place.projection[1..].contains(&ProjectionElem::Deref)\n         {\n             self.fail(location, format!(\"{:?}, has deref at the wrong place\", place));"}, {"sha": "264f30fb10a124305e8fad61f49e357c757c6d86", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -620,10 +620,15 @@ impl<'a> ExtCtxt<'a> {\n         span: Span,\n         name: Ident,\n         ty: P<ast::Ty>,\n-        mutbl: ast::Mutability,\n+        mutability: ast::Mutability,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Static(ty, mutbl, Some(expr)))\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Static(ast::StaticItem { ty, mutability, expr: Some(expr) }.into()),\n+        )\n     }\n \n     pub fn item_const(\n@@ -633,8 +638,13 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        let def = ast::Defaultness::Final;\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Const(def, ty, Some(expr)))\n+        let defaultness = ast::Defaultness::Final;\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr: Some(expr) }.into()),\n+        )\n     }\n \n     // Builds `#[name]`."}, {"sha": "16cf9ae5cfc287e4a5e9b2c18d1e259073dfa522", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -129,6 +129,17 @@ impl<I: Idx, T> IndexVec<I, T> {\n         IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }\n     }\n \n+    /// Creates a new vector with a copy of `elem` for each index in `universe`.\n+    ///\n+    /// Thus `IndexVec::from_elem(elem, &universe)` is equivalent to\n+    /// `IndexVec::<I, _>::from_elem_n(elem, universe.len())`. That can help\n+    /// type inference as it ensures that the resulting vector uses the same\n+    /// index type as `universe`, rather than something potentially surprising.\n+    ///\n+    /// For example, if you want to store data for each local in a MIR body,\n+    /// using `let mut uses = IndexVec::from_elem(vec![], &body.local_decls);`\n+    /// ensures that `uses` is an `IndexVec<Local, _>`, and thus can give\n+    /// better error messages later if one accidentally mismatches indices.\n     #[inline]\n     pub fn from_elem<S>(elem: T, universe: &IndexSlice<I, S>) -> Self\n     where"}, {"sha": "f298b95ca35b180d9843f49aa9152a01d4a7c2db", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -203,7 +203,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n         // Tracks the `VarSubVar` constraints generated for each region vid. We\n         // later use this to expand across vids.\n-        let mut constraints = IndexVec::from_elem_n(Vec::new(), var_values.values.len());\n+        let mut constraints = IndexVec::from_elem(Vec::new(), &var_values.values);\n         // Tracks the changed region vids.\n         let mut changes = Vec::new();\n         for constraint in self.data.constraints.keys() {"}, {"sha": "ad328006051f1e3e7c4e5db3b091989352ce5c74", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -805,7 +805,9 @@ trait UnusedDelimLint {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(.., Some(expr)) | Static(.., Some(expr)) = &item.kind {\n+        if let Const(box ast::ConstItem { expr: Some(expr), .. })\n+        | Static(box ast::StaticItem { expr: Some(expr), .. }) = &item.kind\n+        {\n             self.check_unused_delims_expr(\n                 cx,\n                 expr,"}, {"sha": "b88a315cec132e2ace5203364e795f6aeb8b17c5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1036,8 +1036,7 @@ impl<'tcx> LocalDecl<'tcx> {\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum VarDebugInfoContents<'tcx> {\n-    /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n-    /// based on a `Local`, not a `Static`, and contains no indexing.\n+    /// This `Place` only contains projection which satisfy `can_use_in_debuginfo`.\n     Place(Place<'tcx>),\n     Const(Constant<'tcx>),\n     /// The user variable's data is split across several fragments,\n@@ -1047,6 +1046,7 @@ pub enum VarDebugInfoContents<'tcx> {\n     /// the underlying debuginfo feature this relies on.\n     Composite {\n         /// Type of the original user variable.\n+        /// This cannot contain a union or an enum.\n         ty: Ty<'tcx>,\n         /// All the parts of the original user variable, which ended\n         /// up in disjoint places, due to optimizations.\n@@ -1075,17 +1075,16 @@ pub struct VarDebugInfoFragment<'tcx> {\n     /// Where in the composite user variable this fragment is,\n     /// represented as a \"projection\" into the composite variable.\n     /// At lower levels, this corresponds to a byte/bit range.\n-    // NOTE(eddyb) there's an unenforced invariant that this contains\n-    // only `Field`s, and not into `enum` variants or `union`s.\n-    // FIXME(eddyb) support this for `enum`s by either using DWARF's\n+    ///\n+    /// This can only contain `PlaceElem::Field`.\n+    // FIXME support this for `enum`s by either using DWARF's\n     // more advanced control-flow features (unsupported by LLVM?)\n     // to match on the discriminant, or by using custom type debuginfo\n     // with non-overlapping variants for the composite variable.\n     pub projection: Vec<PlaceElem<'tcx>>,\n \n     /// Where the data for this fragment can be found.\n-    // NOTE(eddyb) There's an unenforced invariant that this `Place` is\n-    // contains no indexing (with a non-constant index).\n+    /// This `Place` only contains projection which satisfy `can_use_in_debuginfo`.\n     pub contents: Place<'tcx>,\n }\n \n@@ -1538,6 +1537,17 @@ impl<V, T> ProjectionElem<V, T> {\n     pub fn is_field_to(&self, f: FieldIdx) -> bool {\n         matches!(*self, Self::Field(x, _) if x == f)\n     }\n+\n+    /// Returns `true` if this is accepted inside `VarDebugInfoContents::Place`.\n+    pub fn can_use_in_debuginfo(&self) -> bool {\n+        match self {\n+            Self::Deref | Self::Downcast(_, _) | Self::Field(_, _) => true,\n+            Self::ConstantIndex { .. }\n+            | Self::Index(_)\n+            | Self::OpaqueCast(_)\n+            | Self::Subslice { .. } => false,\n+        }\n+    }\n }\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we"}, {"sha": "7c59879a187feb960570509010630f3387ea61da", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -193,9 +193,9 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(arg);\n \n         self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n-                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n-                arg.value\n-            ))\n+            \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n+            arg.value\n+        ))\n     }\n }\n "}, {"sha": "29f7cae3d3fec17f88d228d2f21296e1a1891e31", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1154,8 +1154,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n     fn wildcards_from_tys(\n         cx: &MatchCheckCtxt<'p, 'tcx>,\n         tys: impl IntoIterator<Item = Ty<'tcx>>,\n+        span: Span,\n     ) -> Self {\n-        Fields::from_iter(cx, tys.into_iter().map(DeconstructedPat::wildcard))\n+        Fields::from_iter(cx, tys.into_iter().map(|ty| DeconstructedPat::wildcard(ty, span)))\n     }\n \n     // In the cases of either a `#[non_exhaustive]` field list or a non-public field, we hide\n@@ -1191,26 +1192,26 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n     pub(super) fn wildcards(pcx: &PatCtxt<'_, 'p, 'tcx>, constructor: &Constructor<'tcx>) -> Self {\n         let ret = match constructor {\n             Single | Variant(_) => match pcx.ty.kind() {\n-                ty::Tuple(fs) => Fields::wildcards_from_tys(pcx.cx, fs.iter()),\n-                ty::Ref(_, rty, _) => Fields::wildcards_from_tys(pcx.cx, once(*rty)),\n+                ty::Tuple(fs) => Fields::wildcards_from_tys(pcx.cx, fs.iter(), pcx.span),\n+                ty::Ref(_, rty, _) => Fields::wildcards_from_tys(pcx.cx, once(*rty), pcx.span),\n                 ty::Adt(adt, substs) => {\n                     if adt.is_box() {\n                         // The only legal patterns of type `Box` (outside `std`) are `_` and box\n                         // patterns. If we're here we can assume this is a box pattern.\n-                        Fields::wildcards_from_tys(pcx.cx, once(substs.type_at(0)))\n+                        Fields::wildcards_from_tys(pcx.cx, once(substs.type_at(0)), pcx.span)\n                     } else {\n                         let variant = &adt.variant(constructor.variant_index_for_adt(*adt));\n                         let tys = Fields::list_variant_nonhidden_fields(pcx.cx, pcx.ty, variant)\n                             .map(|(_, ty)| ty);\n-                        Fields::wildcards_from_tys(pcx.cx, tys)\n+                        Fields::wildcards_from_tys(pcx.cx, tys, pcx.span)\n                     }\n                 }\n                 _ => bug!(\"Unexpected type for `Single` constructor: {:?}\", pcx),\n             },\n             Slice(slice) => match *pcx.ty.kind() {\n                 ty::Slice(ty) | ty::Array(ty, _) => {\n                     let arity = slice.arity();\n-                    Fields::wildcards_from_tys(pcx.cx, (0..arity).map(|_| ty))\n+                    Fields::wildcards_from_tys(pcx.cx, (0..arity).map(|_| ty), pcx.span)\n                 }\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", constructor, pcx),\n             },\n@@ -1251,8 +1252,8 @@ pub(crate) struct DeconstructedPat<'p, 'tcx> {\n }\n \n impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n-    pub(super) fn wildcard(ty: Ty<'tcx>) -> Self {\n-        Self::new(Wildcard, Fields::empty(), ty, DUMMY_SP)\n+    pub(super) fn wildcard(ty: Ty<'tcx>, span: Span) -> Self {\n+        Self::new(Wildcard, Fields::empty(), ty, span)\n     }\n \n     pub(super) fn new(\n@@ -1269,7 +1270,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n     /// `Some(_)`.\n     pub(super) fn wild_from_ctor(pcx: &PatCtxt<'_, 'p, 'tcx>, ctor: Constructor<'tcx>) -> Self {\n         let fields = Fields::wildcards(pcx, &ctor);\n-        DeconstructedPat::new(ctor, fields, pcx.ty, DUMMY_SP)\n+        DeconstructedPat::new(ctor, fields, pcx.ty, pcx.span)\n     }\n \n     /// Clone this value. This method emphasizes that cloning loses reachability information and\n@@ -1298,7 +1299,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                     ty::Tuple(fs) => {\n                         ctor = Single;\n                         let mut wilds: SmallVec<[_; 2]> =\n-                            fs.iter().map(DeconstructedPat::wildcard).collect();\n+                            fs.iter().map(|ty| DeconstructedPat::wildcard(ty, pat.span)).collect();\n                         for pat in subpatterns {\n                             wilds[pat.field.index()] = mkpat(&pat.pattern);\n                         }\n@@ -1317,11 +1318,11 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                         // normally or through box-patterns. We'll have to figure out a proper\n                         // solution when we introduce generalized deref patterns. Also need to\n                         // prevent mixing of those two options.\n-                        let pat = subpatterns.into_iter().find(|pat| pat.field.index() == 0);\n-                        let pat = if let Some(pat) = pat {\n+                        let pattern = subpatterns.into_iter().find(|pat| pat.field.index() == 0);\n+                        let pat = if let Some(pat) = pattern {\n                             mkpat(&pat.pattern)\n                         } else {\n-                            DeconstructedPat::wildcard(substs.type_at(0))\n+                            DeconstructedPat::wildcard(substs.type_at(0), pat.span)\n                         };\n                         ctor = Single;\n                         fields = Fields::singleton(cx, pat);\n@@ -1343,7 +1344,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                                 ty\n                             });\n                         let mut wilds: SmallVec<[_; 2]> =\n-                            tys.map(DeconstructedPat::wildcard).collect();\n+                            tys.map(|ty| DeconstructedPat::wildcard(ty, pat.span)).collect();\n                         for pat in subpatterns {\n                             if let Some(i) = field_id_to_id[pat.field.index()] {\n                                 wilds[i] = mkpat(&pat.pattern);\n@@ -1566,8 +1567,10 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                         };\n                         let prefix = &self.fields.fields[..prefix];\n                         let suffix = &self.fields.fields[self_slice.arity() - suffix..];\n-                        let wildcard: &_ =\n-                            pcx.cx.pattern_arena.alloc(DeconstructedPat::wildcard(inner_ty));\n+                        let wildcard: &_ = pcx\n+                            .cx\n+                            .pattern_arena\n+                            .alloc(DeconstructedPat::wildcard(inner_ty, pcx.span));\n                         let extra_wildcards = other_slice.arity() - self_slice.arity();\n                         let extra_wildcards = (0..extra_wildcards).map(|_| wildcard);\n                         prefix.iter().chain(extra_wildcards).chain(suffix).collect()"}, {"sha": "a324c3a6228064c8021adf326f4bee5107d93355", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -604,7 +604,7 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n                     let new_patterns = if pcx.is_non_exhaustive {\n                         // Here we don't want the user to try to list all variants, we want them to add\n                         // a wildcard, so we only suggest that.\n-                        vec![DeconstructedPat::wildcard(pcx.ty)]\n+                        vec![DeconstructedPat::wildcard(pcx.ty, pcx.span)]\n                     } else {\n                         let mut split_wildcard = SplitWildcard::new(pcx);\n                         split_wildcard.split(pcx, matrix.heads().map(DeconstructedPat::ctor));\n@@ -631,7 +631,7 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n                             .collect();\n \n                         if hide_variant_show_wild {\n-                            new.push(DeconstructedPat::wildcard(pcx.ty));\n+                            new.push(DeconstructedPat::wildcard(pcx.ty, pcx.span));\n                         }\n \n                         new\n@@ -734,7 +734,7 @@ impl<'p, 'tcx> Witness<'p, 'tcx> {\n             let arity = ctor.arity(pcx);\n             let pats = self.0.drain((len - arity)..).rev();\n             let fields = Fields::from_iter(pcx.cx, pats);\n-            DeconstructedPat::new(ctor.clone(), fields, pcx.ty, DUMMY_SP)\n+            DeconstructedPat::new(ctor.clone(), fields, pcx.ty, pcx.span)\n         };\n \n         self.0.push(pat);\n@@ -977,7 +977,7 @@ pub(crate) fn compute_match_usefulness<'p, 'tcx>(\n         })\n         .collect();\n \n-    let wild_pattern = cx.pattern_arena.alloc(DeconstructedPat::wildcard(scrut_ty));\n+    let wild_pattern = cx.pattern_arena.alloc(DeconstructedPat::wildcard(scrut_ty, DUMMY_SP));\n     let v = PatStack::from_pattern(wild_pattern);\n     let usefulness = is_useful(cx, &matrix, &v, FakeExtraWildcard, scrut_hir_id, false, true);\n     let non_exhaustiveness_witnesses = match usefulness {"}, {"sha": "176027b3b93e4fe23608522b748d4a44ef848dff", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -284,7 +284,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&c.literal, Some(c.span), None))\n+        // Normalization needed b/c const prop lint runs in\n+        // `mir_drops_elaborated_and_const_checked`, which happens before\n+        // optimized MIR. Only after optimizing the MIR can we guarantee\n+        // that the `RevealAll` pass has happened and that the body's consts\n+        // are normalized, so any call to resolve before that needs to be\n+        // manually normalized.\n+        let val = self.tcx.try_normalize_erasing_regions(self.param_env, c.literal).ok()?;\n+\n+        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&val, Some(c.span), None))\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "6a73f2a6578135772ad53e348642d914e5397bd9", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -37,8 +37,7 @@ impl CoverageGraph {\n         // `SwitchInt` to have multiple targets to the same destination `BasicBlock`, so\n         // de-duplication is required. This is done without reordering the successors.\n \n-        let bcbs_len = bcbs.len();\n-        let mut seen = IndexVec::from_elem_n(false, bcbs_len);\n+        let mut seen = IndexVec::from_elem(false, &bcbs);\n         let successors = IndexVec::from_fn_n(\n             |bcb| {\n                 for b in seen.iter_mut() {\n@@ -60,7 +59,7 @@ impl CoverageGraph {\n             bcbs.len(),\n         );\n \n-        let mut predecessors = IndexVec::from_elem_n(Vec::new(), bcbs.len());\n+        let mut predecessors = IndexVec::from_elem(Vec::new(), &bcbs);\n         for (bcb, bcb_successors) in successors.iter_enumerated() {\n             for &successor in bcb_successors {\n                 predecessors[successor].push(bcb);"}, {"sha": "6422b8ac1ba458d58a4036865429451378923ed2", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -3,6 +3,7 @@ use crate::errors;\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n+use ast::StaticItem;\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -227,7 +228,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n-            (ident, ItemKind::Static(ty, m, expr))\n+            (ident, ItemKind::Static(Box::new(StaticItem { ty, mutability: m, expr })))\n         } else if let Const::Yes(const_span) = self.parse_constness(Case::Sensitive) {\n             // CONST ITEM\n             if self.token.is_keyword(kw::Impl) {\n@@ -236,7 +237,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.recover_const_mut(const_span);\n                 let (ident, ty, expr) = self.parse_item_global(None)?;\n-                (ident, ItemKind::Const(def_(), ty, expr))\n+                (ident, ItemKind::Const(Box::new(ConstItem { defaultness: def_(), ty, expr })))\n             }\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n@@ -862,9 +863,13 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(a, _, b) => {\n+                        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n-                            AssocItemKind::Const(Defaultness::Final, a, b)\n+                            AssocItemKind::Const(Box::new(ConstItem {\n+                                defaultness: Defaultness::Final,\n+                                ty,\n+                                expr,\n+                            }))\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n                     },\n@@ -1114,12 +1119,12 @@ impl<'a> Parser<'a> {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Const(_, a, b) => {\n+                        ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                             self.sess.emit_err(errors::ExternItemCannotBeConst {\n                                 ident_span: ident.span,\n                                 const_span: span.with_hi(ident.span.lo()),\n                             });\n-                            ForeignItemKind::Static(a, Mutability::Not, b)\n+                            ForeignItemKind::Static(ty, Mutability::Not, expr)\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n                     },"}, {"sha": "49c41470a1514c6174034c949e4ccd84d91d12e0", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -688,8 +688,8 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(_, mt, _) => {\n-                let res = Res::Def(DefKind::Static(mt), def_id);\n+            ItemKind::Static(box ast::StaticItem { mutability, .. }) => {\n+                let res = Res::Def(DefKind::Static(mutability), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {"}, {"sha": "19f46d45af678e8b8fa07194461239750085b77a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -2346,7 +2346,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 });\n             }\n \n-            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n+            ItemKind::Static(box ast::StaticItem { ref ty, ref expr, .. })\n+            | ItemKind::Const(box ast::ConstItem { ref ty, ref expr, .. }) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n@@ -2624,11 +2625,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for item in trait_items {\n             self.resolve_doc_links(&item.attrs, MaybeExported::Ok(item.id));\n             match &item.kind {\n-                AssocItemKind::Const(_, ty, default) => {\n+                AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                     self.visit_ty(ty);\n                     // Only impose the restrictions of `ConstRibKind` for an\n                     // actual constant expression in a provided default.\n-                    if let Some(expr) = default {\n+                    if let Some(expr) = expr {\n                         // We allow arbitrary const expressions inside of associated consts,\n                         // even if they are potentially not const evaluatable.\n                         //\n@@ -2799,7 +2800,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         use crate::ResolutionError::*;\n         self.resolve_doc_links(&item.attrs, MaybeExported::ImplItem(trait_id.ok_or(&item.vis)));\n         match &item.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                 debug!(\"resolve_implementation AssocItemKind::Const\");\n                 // If this is a trait impl, ensure the const\n                 // exists in trait\n@@ -2814,7 +2815,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 );\n \n                 self.visit_ty(ty);\n-                if let Some(expr) = default {\n+                if let Some(expr) = expr {\n                     // We allow arbitrary const expressions inside of associated consts,\n                     // even if they are potentially not const evaluatable.\n                     //"}, {"sha": "e8155520c9b78c5a1953d95f09cb7ebd0c2d1c07", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -522,7 +522,7 @@ fn generator_saved_local_eligibility(\n     use SavedLocalEligibility::*;\n \n     let mut assignments: IndexVec<GeneratorSavedLocal, SavedLocalEligibility> =\n-        IndexVec::from_elem_n(Unassigned, info.field_tys.len());\n+        IndexVec::from_elem(Unassigned, &info.field_tys);\n \n     // The saved locals not eligible for overlap. These will get\n     // \"promoted\" to the prefix of our generator."}, {"sha": "02b358e863b66eb808a4d76ce8a2f017a6147677", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1142,22 +1142,21 @@ fn fmt_type<'cx>(\n             //        the ugliness comes from inlining across crates where\n             //        everything comes in as a fully resolved QPath (hard to\n             //        look at).\n-            match href(trait_.def_id(), cx) {\n-                Ok((ref url, _, ref path)) if !f.alternate() => {\n-                    write!(\n-                        f,\n-                        \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n-                                    title=\\\"type {path}::{name}\\\">{name}</a>{args}\",\n-                        url = url,\n-                        shortty = ItemType::AssocType,\n-                        name = assoc.name,\n-                        path = join_with_double_colon(path),\n-                        args = assoc.args.print(cx),\n-                    )?;\n-                }\n-                _ => write!(f, \"{}{:#}\", assoc.name, assoc.args.print(cx))?,\n-            }\n-            Ok(())\n+            if !f.alternate() && let Ok((url, _, path)) = href(trait_.def_id(), cx) {\n+                write!(\n+                    f,\n+                    \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                                title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                    shortty = ItemType::AssocType,\n+                    name = assoc.name,\n+                    path = join_with_double_colon(&path),\n+                )\n+            } else {\n+                write!(f, \"{}\", assoc.name)\n+            }?;\n+\n+            // Carry `f.alternate()` into this display w/o branching manually.\n+            fmt::Display::fmt(&assoc.args.print(cx), f)\n         }\n     }\n }"}, {"sha": "c959bb3701ab561a10b11d8d3f22c2bc11ef0ebb", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -421,12 +421,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::TyAlias(..)\n-            | hir::ItemKind::OpaqueTy(..)\n+            | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+            })\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n                 self.add_to_current_mod(item, renamed, import_id);\n             }\n+            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::AsyncFn(_) | hir::OpaqueTyOrigin::FnReturn(_),\n+                ..\n+            }) => {\n+                // return-position impl traits are never nameable, and should never be documented.\n+            }\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation."}, {"sha": "11b908e7e53d1c3a79c7f7c92ffa3cafb4767928", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, StaticItem, ConstItem};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -100,13 +100,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(_, ref var_type, _) = item.kind {\n+            if let ItemKind::Const(box ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(ref var_type, _, _) = item.kind {\n+            if let ItemKind::Static(box StaticItem { ty: ref var_type,.. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "c5b58b0c060c0b32d812d78308d1d841209a28a1", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -286,8 +286,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(box ast::StaticItem { ty: lt, mutability: lm, expr: le}), Static(box ast::StaticItem { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +451,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "43779cfaecd3a7f1625d816e4f56da5983528dd1", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1804,13 +1804,15 @@ pub(crate) struct StaticParts<'a> {\n \n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (defaultness, prefix, ty, mutability, expr) = match item.kind {\n-            ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n-                (None, \"static\", ty, mutability, expr)\n-            }\n-            ast::ItemKind::Const(defaultness, ref ty, ref expr) => {\n-                (Some(defaultness), \"const\", ty, ast::Mutability::Not, expr)\n-            }\n+        let (defaultness, prefix, ty, mutability, expr) = match &item.kind {\n+            ast::ItemKind::Static(s) => (None, \"static\", &s.ty, s.mutability, &s.expr),\n+            ast::ItemKind::Const(c) => (\n+                Some(c.defaultness),\n+                \"const\",\n+                &c.ty,\n+                ast::Mutability::Not,\n+                &c.expr,\n+            ),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1826,10 +1828,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr_opt) = match ti.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr_opt) => {\n-                (defaultness, ty, expr_opt)\n-            }\n+        let (defaultness, ty, expr_opt) = match &ti.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1845,8 +1845,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr) = match ii.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr) => (defaultness, ty, expr),\n+        let (defaultness, ty, expr) = match &ii.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {"}, {"sha": "a73e84f3fdc4ebee85b2492f42313351c2334b25", "filename": "tests/rustdoc/async-fn-opaque-item.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Frustdoc%2Fasync-fn-opaque-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Frustdoc%2Fasync-fn-opaque-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn-opaque-item.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: --document-private-items --crate-type=lib\n+// edition: 2021\n+\n+// Issue 109931 -- test against accidentally documenting the `impl Future`\n+// that comes from an async fn desugaring.\n+\n+// Check that we don't document an unnamed opaque type\n+// @!has async_fn_opaque_item/opaque..html\n+\n+// Checking there is only a \"Functions\" header and no \"Opaque types\".\n+// @has async_fn_opaque_item/index.html\n+// @count - '//*[@class=\"small-section-header\"]' 1\n+// @has - '//*[@class=\"small-section-header\"]' 'Functions'\n+\n+pub async fn test() {}"}, {"sha": "99ae8a6c36c5203555d16b5752c9b5f7560bea79", "filename": "tests/rustdoc/generic-associated-types/issue-109488.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,18 @@\n+// Make sure that we escape the arguments of the GAT projection even if we fail to compute\n+// the href of the corresponding trait (in this case it is private).\n+// Further, test that we also linkify the GAT arguments.\n+\n+// @has 'issue_109488/type.A.html'\n+// @has - '//pre[@class=\"rust item-decl\"]' '<S as Tr>::P<Option<i32>>'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@class=\"enum\"]/@href' '{{channel}}/core/option/enum.Option.html'\n+pub type A = <S as Tr>::P<Option<i32>>;\n+\n+/*private*/ trait Tr {\n+    type P<T>;\n+}\n+\n+pub struct S;\n+\n+impl Tr for S {\n+    type P<T> = ();\n+}"}, {"sha": "2f9a1d1c76e068eda6d0aca25c0efa2b34345e39", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -10,11 +10,13 @@ trait Trait {\n \n fn foo<T: Trait<method(i32): Send>>() {}\n //~^ ERROR argument types not allowed with return type notation\n+//~| ERROR associated type bounds are unstable\n \n fn bar<T: Trait<method(..) -> (): Send>>() {}\n //~^ ERROR return type not allowed with return type notation\n \n fn baz<T: Trait<method(): Send>>() {}\n //~^ ERROR return type notation arguments must be elided with `..`\n+//~| ERROR associated type bounds are unstable\n \n fn main() {}"}, {"sha": "b354a6805d6e5bb2a8dd2faeb77c316cdc162c45", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -1,9 +1,27 @@\n error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:14:28\n+  --> $DIR/bad-inputs-and-output.rs:15:28\n    |\n LL | fn bar<T: Trait<method(..) -> (): Send>>() {}\n    |                            ^^^^^ help: remove the return type\n \n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/bad-inputs-and-output.rs:11:17\n+   |\n+LL | fn foo<T: Trait<method(i32): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/bad-inputs-and-output.rs:18:17\n+   |\n+LL | fn baz<T: Trait<method(): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bad-inputs-and-output.rs:3:12\n    |\n@@ -28,10 +46,11 @@ LL | fn foo<T: Trait<method(i32): Send>>() {}\n    |                       ^^^^^ help: remove the input types: `(..)`\n \n error: return type notation arguments must be elided with `..`\n-  --> $DIR/bad-inputs-and-output.rs:17:23\n+  --> $DIR/bad-inputs-and-output.rs:18:23\n    |\n LL | fn baz<T: Trait<method(): Send>>() {}\n    |                       ^^ help: add `..`: `(..)`\n \n-error: aborting due to 3 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors; 2 warnings emitted\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9129f37e0c6b6c227ffacabadceec6297f2c62b1", "filename": "tests/ui/associated-type-bounds/return-type-notation/unpretty-parenthesized.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+// compile-flags: -Zunpretty=expanded\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn foo<T: Trait<method(i32): Send>>() {}\n+//~^ ERROR associated type bounds are unstable\n+\n+fn main() {}"}, {"sha": "77e015b4160bb64a42cdff9d6312dec215feaec3", "filename": "tests/ui/associated-type-bounds/return-type-notation/unpretty-parenthesized.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stderr?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/unpretty-parenthesized.rs:8:17\n+   |\n+LL | fn foo<T: Trait<method(i32): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b3dea8f6eca71fdc3c50ade6d942d9f1520de33b", "filename": "tests/ui/associated-type-bounds/return-type-notation/unpretty-parenthesized.stdout", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Funpretty-parenthesized.stdout?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,15 @@\n+#![feature(prelude_import)]\n+#[prelude_import]\n+use std::prelude::rust_2021::*;\n+#[macro_use]\n+extern crate std;\n+// edition: 2021\n+// compile-flags: -Zunpretty=expanded\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn foo<T: Trait<method(i32) : Send>>() {}\n+\n+fn main() {}"}, {"sha": "b7ccac1ee521c05ca6d938b4b3029f1b660f1313", "filename": "tests/ui/lifetimes/issue-93911.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Flifetimes%2Fissue-93911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Flifetimes%2Fissue-93911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-93911.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+struct Foo<'a>(&'a u32);\n+\n+impl<'a> Foo<'a> {\n+    async fn foo() {\n+        struct Bar<'b>(&'b u32);\n+\n+        impl<'b> Bar<'b> {\n+            async fn bar() {}\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "73f3405e3ad764c825cd7fe8c811a7166eeea7ec", "filename": "tests/ui/mir/issue-109743.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fmir%2Fissue-109743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fmir%2Fissue-109743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-109743.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -0,0 +1,51 @@\n+// build-pass\n+// compile-flags: --crate-type=lib\n+\n+use std::marker::PhantomData;\n+\n+pub trait StreamOnce {\n+    type Token;\n+}\n+\n+impl StreamOnce for &str {\n+    type Token = ();\n+}\n+\n+pub trait Parser<Input: StreamOnce> {\n+    type PartialState: Default;\n+    fn parse_mode(&self, _state: &Self::PartialState) {}\n+    fn parse_mode_impl() {}\n+}\n+\n+pub fn parse_bool<'a>() -> impl Parser<&'a str> {\n+    pub struct TokensCmp<C, Input>\n+    where\n+        Input: StreamOnce,\n+    {\n+        _cmp: C,\n+        _marker: PhantomData<Input>,\n+    }\n+\n+    impl<Input, C> Parser<Input> for TokensCmp<C, Input>\n+    where\n+        C: FnMut(Input::Token),\n+        Input: StreamOnce,\n+    {\n+        type PartialState = ();\n+    }\n+\n+    TokensCmp { _cmp: |_| (), _marker: PhantomData }\n+}\n+\n+pub struct ParseBool;\n+\n+impl<'a> Parser<&'a str> for ParseBool\n+where\n+    &'a str: StreamOnce,\n+{\n+    type PartialState = ();\n+\n+    fn parse_mode_impl() {\n+        parse_bool().parse_mode(&Default::default())\n+    }\n+}"}, {"sha": "3482af74752f821982f0aad2973d91a791079beb", "filename": "tests/ui/rfc-2008-non-exhaustive/omitted-patterns.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -194,6 +194,14 @@ fn main() {\n     let local_refutable @ NonExhaustiveEnum::Unit = NonExhaustiveEnum::Unit;\n     //~^ refutable pattern in local binding\n \n+    // Check that matching on a reference results in a correctly spanned diagnostic\n+    #[deny(non_exhaustive_omitted_patterns)]\n+    match &non_enum {\n+        NonExhaustiveEnum::Unit => {}\n+        NonExhaustiveEnum::Tuple(_) => {}\n+        _ => {}\n+    }\n+    //~^^ some variants are not matched explicitly\n }\n \n #[deny(non_exhaustive_omitted_patterns)]"}, {"sha": "520a90322c1ca8dd2263ce7dbeb956c0c4fb27dc", "filename": "tests/ui/rfc-2008-non-exhaustive/omitted-patterns.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -198,6 +198,20 @@ help: you might want to use `let else` to handle the variant that isn't matched\n LL |     let local_refutable @ NonExhaustiveEnum::Unit = NonExhaustiveEnum::Unit else { todo!() };\n    |                                                                             ++++++++++++++++\n \n-error: aborting due to 9 previous errors; 6 warnings emitted\n+error: some variants are not matched explicitly\n+  --> $DIR/omitted-patterns.rs:202:9\n+   |\n+LL |         _ => {}\n+   |         ^ pattern `NonExhaustiveEnum::Struct { .. }` not covered\n+   |\n+   = help: ensure that all variants are matched explicitly by adding the suggested match arms\n+   = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n+note: the lint level is defined here\n+  --> $DIR/omitted-patterns.rs:198:12\n+   |\n+LL |     #[deny(non_exhaustive_omitted_patterns)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors; 6 warnings emitted\n \n For more information about this error, try `rustc --explain E0005`."}, {"sha": "d723ff538a8867bdf58781380e7c4700c19c2a3f", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/540a50df0fb23127edf0b35b0e497748e24bba1a/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=540a50df0fb23127edf0b35b0e497748e24bba1a", "patch": "@@ -15,45 +15,45 @@ ast-stats-1 Arm                       96 ( 1.5%)             2            48\n ast-stats-1 ForeignItem               96 ( 1.5%)             1            96\n ast-stats-1 - Fn                        96 ( 1.5%)             1\n ast-stats-1 FnDecl                   120 ( 1.8%)             5            24\n-ast-stats-1 FieldDef                 160 ( 2.4%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.4%)             5            32\n+ast-stats-1 FieldDef                 160 ( 2.5%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.5%)             5            32\n ast-stats-1 - Local                     32 ( 0.5%)             1\n ast-stats-1 - MacCall                   32 ( 0.5%)             1\n ast-stats-1 - Expr                      96 ( 1.5%)             3\n-ast-stats-1 Param                    160 ( 2.4%)             4            40\n-ast-stats-1 Block                    192 ( 2.9%)             6            32\n+ast-stats-1 Param                    160 ( 2.5%)             4            40\n+ast-stats-1 Block                    192 ( 3.0%)             6            32\n ast-stats-1 Variant                  208 ( 3.2%)             2           104\n-ast-stats-1 GenericBound             224 ( 3.4%)             4            56\n-ast-stats-1 - Trait                    224 ( 3.4%)             4\n-ast-stats-1 AssocItem                416 ( 6.3%)             4           104\n-ast-stats-1 - Type                     208 ( 3.2%)             2\n-ast-stats-1 - Fn                       208 ( 3.2%)             2\n-ast-stats-1 GenericParam             480 ( 7.3%)             5            96\n-ast-stats-1 Pat                      504 ( 7.7%)             7            72\n+ast-stats-1 GenericBound             224 ( 3.5%)             4            56\n+ast-stats-1 - Trait                    224 ( 3.5%)             4\n+ast-stats-1 AssocItem                352 ( 5.4%)             4            88\n+ast-stats-1 - Type                     176 ( 2.7%)             2\n+ast-stats-1 - Fn                       176 ( 2.7%)             2\n+ast-stats-1 GenericParam             480 ( 7.4%)             5            96\n+ast-stats-1 Pat                      504 ( 7.8%)             7            72\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Wild                      72 ( 1.1%)             1\n ast-stats-1 - Ident                    360 ( 5.5%)             5\n-ast-stats-1 Expr                     576 ( 8.8%)             8            72\n+ast-stats-1 Expr                     576 ( 8.9%)             8            72\n ast-stats-1 - Path                      72 ( 1.1%)             1\n ast-stats-1 - Match                     72 ( 1.1%)             1\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Lit                      144 ( 2.2%)             2\n ast-stats-1 - Block                    216 ( 3.3%)             3\n-ast-stats-1 PathSegment              720 (11.0%)            30            24\n-ast-stats-1 Ty                       896 (13.7%)            14            64\n+ast-stats-1 PathSegment              720 (11.1%)            30            24\n+ast-stats-1 Ty                       896 (13.8%)            14            64\n ast-stats-1 - Ptr                       64 ( 1.0%)             1\n ast-stats-1 - Ref                       64 ( 1.0%)             1\n ast-stats-1 - ImplicitSelf             128 ( 2.0%)             2\n-ast-stats-1 - Path                     640 ( 9.8%)            10\n-ast-stats-1 Item                   1_224 (18.7%)             9           136\n+ast-stats-1 - Path                     640 ( 9.9%)            10\n+ast-stats-1 Item                   1_224 (18.9%)             9           136\n ast-stats-1 - Trait                    136 ( 2.1%)             1\n ast-stats-1 - Enum                     136 ( 2.1%)             1\n ast-stats-1 - ForeignMod               136 ( 2.1%)             1\n ast-stats-1 - Impl                     136 ( 2.1%)             1\n ast-stats-1 - Fn                       272 ( 4.2%)             2\n-ast-stats-1 - Use                      408 ( 6.2%)             3\n+ast-stats-1 - Use                      408 ( 6.3%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  6_552\n+ast-stats-1 Total                  6_488\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n@@ -65,55 +65,55 @@ ast-stats-2 ExprField                 48 ( 0.7%)             1            48\n ast-stats-2 WherePredicate            56 ( 0.8%)             1            56\n ast-stats-2 - BoundPredicate            56 ( 0.8%)             1\n ast-stats-2 Local                     72 ( 1.0%)             1            72\n-ast-stats-2 Arm                       96 ( 1.3%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.3%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.3%)             1\n+ast-stats-2 Arm                       96 ( 1.4%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.4%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.4%)             1\n ast-stats-2 InlineAsm                120 ( 1.7%)             1           120\n ast-stats-2 FnDecl                   120 ( 1.7%)             5            24\n ast-stats-2 Attribute                128 ( 1.8%)             4            32\n-ast-stats-2 - DocComment                32 ( 0.4%)             1\n-ast-stats-2 - Normal                    96 ( 1.3%)             3\n-ast-stats-2 FieldDef                 160 ( 2.2%)             2            80\n-ast-stats-2 Stmt                     160 ( 2.2%)             5            32\n-ast-stats-2 - Local                     32 ( 0.4%)             1\n-ast-stats-2 - Semi                      32 ( 0.4%)             1\n-ast-stats-2 - Expr                      96 ( 1.3%)             3\n-ast-stats-2 Param                    160 ( 2.2%)             4            40\n+ast-stats-2 - DocComment                32 ( 0.5%)             1\n+ast-stats-2 - Normal                    96 ( 1.4%)             3\n+ast-stats-2 FieldDef                 160 ( 2.3%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.3%)             5            32\n+ast-stats-2 - Local                     32 ( 0.5%)             1\n+ast-stats-2 - Semi                      32 ( 0.5%)             1\n+ast-stats-2 - Expr                      96 ( 1.4%)             3\n+ast-stats-2 Param                    160 ( 2.3%)             4            40\n ast-stats-2 Block                    192 ( 2.7%)             6            32\n ast-stats-2 Variant                  208 ( 2.9%)             2           104\n-ast-stats-2 GenericBound             224 ( 3.1%)             4            56\n-ast-stats-2 - Trait                    224 ( 3.1%)             4\n-ast-stats-2 AssocItem                416 ( 5.8%)             4           104\n-ast-stats-2 - Type                     208 ( 2.9%)             2\n-ast-stats-2 - Fn                       208 ( 2.9%)             2\n-ast-stats-2 GenericParam             480 ( 6.7%)             5            96\n-ast-stats-2 Pat                      504 ( 7.0%)             7            72\n+ast-stats-2 GenericBound             224 ( 3.2%)             4            56\n+ast-stats-2 - Trait                    224 ( 3.2%)             4\n+ast-stats-2 AssocItem                352 ( 5.0%)             4            88\n+ast-stats-2 - Type                     176 ( 2.5%)             2\n+ast-stats-2 - Fn                       176 ( 2.5%)             2\n+ast-stats-2 GenericParam             480 ( 6.8%)             5            96\n+ast-stats-2 Pat                      504 ( 7.1%)             7            72\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - Wild                      72 ( 1.0%)             1\n-ast-stats-2 - Ident                    360 ( 5.0%)             5\n+ast-stats-2 - Ident                    360 ( 5.1%)             5\n ast-stats-2 Expr                     648 ( 9.1%)             9            72\n ast-stats-2 - Path                      72 ( 1.0%)             1\n ast-stats-2 - Match                     72 ( 1.0%)             1\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - InlineAsm                 72 ( 1.0%)             1\n ast-stats-2 - Lit                      144 ( 2.0%)             2\n ast-stats-2 - Block                    216 ( 3.0%)             3\n-ast-stats-2 PathSegment              792 (11.1%)            33            24\n-ast-stats-2 Ty                       896 (12.5%)            14            64\n+ast-stats-2 PathSegment              792 (11.2%)            33            24\n+ast-stats-2 Ty                       896 (12.6%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.9%)             1\n ast-stats-2 - Ref                       64 ( 0.9%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.8%)             2\n-ast-stats-2 - Path                     640 ( 8.9%)            10\n-ast-stats-2 Item                   1_496 (20.9%)            11           136\n+ast-stats-2 - Path                     640 ( 9.0%)            10\n+ast-stats-2 Item                   1_496 (21.1%)            11           136\n ast-stats-2 - Trait                    136 ( 1.9%)             1\n ast-stats-2 - Enum                     136 ( 1.9%)             1\n ast-stats-2 - ExternCrate              136 ( 1.9%)             1\n ast-stats-2 - ForeignMod               136 ( 1.9%)             1\n ast-stats-2 - Impl                     136 ( 1.9%)             1\n ast-stats-2 - Fn                       272 ( 3.8%)             2\n-ast-stats-2 - Use                      544 ( 7.6%)             4\n+ast-stats-2 - Use                      544 ( 7.7%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_152\n+ast-stats-2 Total                  7_088\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}