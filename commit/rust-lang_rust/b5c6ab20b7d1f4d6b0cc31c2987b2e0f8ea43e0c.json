{"sha": "b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzZhYjIwYjdkMWY0ZDZiMGNjMzFjMjk4N2IyZTBmOGVhNDNlMGM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-04T07:05:38Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-05T13:18:29Z"}, "message": "Run feature-gating on the final AST passed to the compiler.\n\nThis ensures we catch everything; previously, an unknown attribute\ninserted by #[cfg_attr(...)] in a macro expansion would not be detected.", "tree": {"sha": "977a0b867f0a2f095919b455e720a676535542ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/977a0b867f0a2f095919b455e720a676535542ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "html_url": "https://github.com/rust-lang/rust/commit/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10426f69dac38186c7bb8946743023729d65e1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/10426f69dac38186c7bb8946743023729d65e1e6", "html_url": "https://github.com/rust-lang/rust/commit/10426f69dac38186c7bb8946743023729d65e1e6"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "6ec36886252f0b250eb170da77ed9eec96132caa", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "patch": "@@ -493,12 +493,16 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     );\n \n-    // Needs to go *after* expansion to be able to check the results of macro expansion.\n-    time(time_passes, \"complete gated feature checking\", (), |_| {\n+    // Needs to go *after* expansion to be able to check the results\n+    // of macro expansion.  This runs before #[cfg] to try to catch as\n+    // much as possible (e.g. help the programmer avoid platform\n+    // specific differences)\n+    time(time_passes, \"complete gated feature checking 1\", (), |_| {\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n-                                          &sess.parse_sess.span_diagnostic,\n-                                          &krate);\n+                                              &sess.parse_sess.span_diagnostic,\n+                                              &krate,\n+                                              true);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n@@ -521,6 +525,19 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     time(time_passes, \"checking that all macro invocations are gone\", &krate, |krate|\n          syntax::ext::expand::check_for_macros(&sess.parse_sess, krate));\n \n+    // One final feature gating of the true AST that gets compiled\n+    // later, to make sure we've got everything (e.g. configuration\n+    // can insert new attributes via `cfg_attr`)\n+    time(time_passes, \"complete gated feature checking 2\", (), |_| {\n+        let features =\n+            syntax::feature_gate::check_crate(sess.codemap(),\n+                                              &sess.parse_sess.span_diagnostic,\n+                                              &krate,\n+                                              false);\n+        *sess.features.borrow_mut() = features;\n+        sess.abort_if_errors();\n+    });\n+\n     Some(krate)\n }\n "}, {"sha": "fcfc14604843b07b3af67cc26174d0f78eef8d98", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "patch": "@@ -349,6 +349,7 @@ struct Context<'a> {\n     features: Vec<&'static str>,\n     span_handler: &'a SpanHandler,\n     cm: &'a CodeMap,\n+    do_warnings: bool,\n }\n \n impl<'a> Context<'a> {\n@@ -361,7 +362,7 @@ impl<'a> Context<'a> {\n     }\n \n     fn warn_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.has_feature(feature) {\n+        if !self.has_feature(feature) && self.do_warnings {\n             emit_feature_warn(self.span_handler, feature, span, explain);\n         }\n     }\n@@ -700,13 +701,15 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n }\n \n fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n+                        do_warnings: bool,\n                         check: F)\n                        -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n {\n     let mut cx = Context {\n         features: Vec::new(),\n         span_handler: span_handler,\n+        do_warnings: do_warnings,\n         cm: cm,\n     };\n \n@@ -786,13 +789,14 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n -> Features {\n-    check_crate_inner(cm, span_handler, krate,\n+    check_crate_inner(cm, span_handler, krate, true,\n                       |ctx, krate| visit::walk_crate(&mut MacroVisitor { context: ctx }, krate))\n }\n \n-pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n--> Features {\n-    check_crate_inner(cm, span_handler, krate,\n+pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n+                   do_warnings: bool) -> Features\n+{\n+    check_crate_inner(cm, span_handler, krate, do_warnings,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }"}, {"sha": "afcb896b43c2a52e426a5dda4223d48a2515236c", "filename": "src/test/compile-fail/cfg-attr-unknown-attribute-macro-expansion.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs?ref=b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    () => {\n+        #[cfg_attr(all(), unknown)] //~ ERROR `unknown` is currently unknown\n+        fn foo() {}\n+    }\n+}\n+\n+foo!();\n+\n+fn main() {}"}]}