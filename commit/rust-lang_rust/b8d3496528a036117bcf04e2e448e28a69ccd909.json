{"sha": "b8d3496528a036117bcf04e2e448e28a69ccd909", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDM0OTY1MjhhMDM2MTE3YmNmMDRlMmU0NDhlMjhhNjljY2Q5MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T11:15:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T11:15:56Z"}, "message": "auto merge of #9264 : ben0x539/rust/pp-work, r=alexcrichton\n\nSince 3b6314c the pretty printer seems to only print trait bounds for `ast::ty_path(...)`s that have a generics arguments list. That seems wrong, so let's always print them.\r\n\r\nCloses #9253, un-xfails test for #7673.", "tree": {"sha": "31662da894ae7f6baee63d32791ec93d9450ce80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31662da894ae7f6baee63d32791ec93d9450ce80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d3496528a036117bcf04e2e448e28a69ccd909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d3496528a036117bcf04e2e448e28a69ccd909", "html_url": "https://github.com/rust-lang/rust/commit/b8d3496528a036117bcf04e2e448e28a69ccd909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d3496528a036117bcf04e2e448e28a69ccd909/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427", "html_url": "https://github.com/rust-lang/rust/commit/adb638f54d7d9a3bf2f66fa654a5dcd816a4b427"}, {"sha": "823ebb14ba6ed99df1198c6d1b47c5d2964196da", "url": "https://api.github.com/repos/rust-lang/rust/commits/823ebb14ba6ed99df1198c6d1b47c5d2964196da", "html_url": "https://github.com/rust-lang/rust/commit/823ebb14ba6ed99df1198c6d1b47c5d2964196da"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "615f33013736fc566c5d4f89d38dba2ec87d7f8c", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=b8d3496528a036117bcf04e2e448e28a69ccd909", "patch": "@@ -243,7 +243,7 @@ pub fn mk_printer(out: @io::Writer, linewidth: uint) -> @mut Printer {\n  * the entire buffered window, but can't output anything until the size is >=\n  * 0 (sizes are set to negative while they're pending calculation).\n  *\n- * So SCAN takeks input and buffers tokens and pending calculations, while\n+ * So SCAN takes input and buffers tokens and pending calculations, while\n  * PRINT gobbles up completed calculations and tokens from the buffer. The\n  * theory is that the two can never get more than 3N tokens apart, because\n  * once there's \"obviously\" too much data to fit on a line, in a size"}, {"sha": "b5868cbc63db09a0b16135f4b9c9be3eba91e193", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b8d3496528a036117bcf04e2e448e28a69ccd909", "patch": "@@ -1535,15 +1535,15 @@ fn print_path_(s: @ps,\n \n         print_ident(s, segment.identifier);\n \n-        if segment.lifetime.is_some() || !segment.types.is_empty() {\n-            // If this is the last segment, print the bounds.\n-            if i == path.segments.len() - 1 {\n-                match *opt_bounds {\n-                    None => {}\n-                    Some(ref bounds) => print_bounds(s, bounds, true),\n-                }\n+        // If this is the last segment, print the bounds.\n+        if i == path.segments.len() - 1 {\n+            match *opt_bounds {\n+                None => {}\n+                Some(ref bounds) => print_bounds(s, bounds, true),\n             }\n+        }\n \n+        if segment.lifetime.is_some() || !segment.types.is_empty() {\n             if colons_before_params {\n                 word(s.s, \"::\")\n             }"}, {"sha": "a62fbdeeb185f830ed4fbe3b8411b8a5f31dd6e8", "filename": "src/test/pretty/path-type-bounds.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=b8d3496528a036117bcf04e2e448e28a69ccd909", "patch": "@@ -0,0 +1,13 @@\n+// pp-exact\n+\n+trait Tr { }\n+impl Tr for int;\n+\n+fn foo(x: ~Tr: Freeze) -> ~Tr: Freeze { x }\n+\n+fn main() {\n+    let x: ~Tr: Freeze;\n+\n+    ~1 as ~Tr: Freeze;\n+}\n+"}, {"sha": "2f2b736294a5e115c3349c5fc1339f2d60d51e6a", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d3496528a036117bcf04e2e448e28a69ccd909/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=b8d3496528a036117bcf04e2e448e28a69ccd909", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-pretty #9253 pretty printer doesn't preserve the bounds on trait objects\n-\n /*\n \n #7673 Polymorphically creating traits barely works"}]}