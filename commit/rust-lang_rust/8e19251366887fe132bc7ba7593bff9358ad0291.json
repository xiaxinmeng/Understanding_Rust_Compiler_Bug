{"sha": "8e19251366887fe132bc7ba7593bff9358ad0291", "node_id": "C_kwDOAAsO6NoAKDhlMTkyNTEzNjY4ODdmZTEzMmJjN2JhNzU5M2JmZjkzNThhZDAyOTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T09:29:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T09:29:09Z"}, "message": "Auto merge of #9738 - kraktus:bool_to_int_with_if, r=xFrednet\n\n[`bool_to_int_with_if`] do not lint in const context\n\nchangelog: [`bool_to_int_with_if`] do not lint in const context\n\nfix https://github.com/rust-lang/rust-clippy/issues/9737", "tree": {"sha": "7f95a854c0f4e72fccf3f0fe5811c054a3404f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f95a854c0f4e72fccf3f0fe5811c054a3404f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e19251366887fe132bc7ba7593bff9358ad0291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e19251366887fe132bc7ba7593bff9358ad0291", "html_url": "https://github.com/rust-lang/rust/commit/8e19251366887fe132bc7ba7593bff9358ad0291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e19251366887fe132bc7ba7593bff9358ad0291/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "html_url": "https://github.com/rust-lang/rust/commit/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347"}, {"sha": "fa6850d888ce44d3381451aa484743289029dccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6850d888ce44d3381451aa484743289029dccc", "html_url": "https://github.com/rust-lang/rust/commit/fa6850d888ce44d3381451aa484743289029dccc"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "88bdfefddf7301e9cd33d9ef429420de4246b9f3", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e19251366887fe132bc7ba7593bff9358ad0291/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e19251366887fe132bc7ba7593bff9358ad0291/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=8e19251366887fe132bc7ba7593bff9358ad0291", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, is_integer_literal, sugg::Sugg};\n+use clippy_utils::{diagnostics::span_lint_and_then, in_constant, is_else_clause, is_integer_literal, sugg::Sugg};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -44,14 +44,14 @@ declare_clippy_lint! {\n declare_lint_pass!(BoolToIntWithIf => [BOOL_TO_INT_WITH_IF]);\n \n impl<'tcx> LateLintPass<'tcx> for BoolToIntWithIf {\n-    fn check_expr(&mut self, ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n-        if !expr.span.from_expansion() {\n-            check_if_else(ctx, expr);\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n+        if !expr.span.from_expansion() && !in_constant(cx, expr.hir_id) {\n+            check_if_else(cx, expr);\n         }\n     }\n }\n \n-fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n+fn check_if_else<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n     if let ExprKind::If(check, then, Some(else_)) = expr.kind\n         && let Some(then_lit) = int_literal(then)\n         && let Some(else_lit) = int_literal(else_)\n@@ -66,17 +66,17 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n         };\n         let mut applicability = Applicability::MachineApplicable;\n         let snippet = {\n-            let mut sugg = Sugg::hir_with_applicability(ctx, check, \"..\", &mut applicability);\n+            let mut sugg = Sugg::hir_with_applicability(cx, check, \"..\", &mut applicability);\n             if inverted {\n                 sugg = !sugg;\n             }\n             sugg\n         };\n \n-        let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n+        let ty = cx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n \n         let suggestion = {\n-            let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n+            let wrap_in_curly = is_else_clause(cx.tcx, expr);\n             let mut s = Sugg::NonParen(format!(\"{ty}::from({snippet})\").into());\n             if wrap_in_curly {\n                 s = s.blockify();\n@@ -87,7 +87,7 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n         let into_snippet = snippet.clone().maybe_par();\n         let as_snippet = snippet.as_ty(ty);\n \n-        span_lint_and_then(ctx,\n+        span_lint_and_then(cx,\n             BOOL_TO_INT_WITH_IF,\n             expr.span,\n             \"boolean to int conversion using if\","}, {"sha": "6e0ff053ff2e3f9aaa4cab78500f4ea71179ef68", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=8e19251366887fe132bc7ba7593bff9358ad0291", "patch": "@@ -76,6 +76,8 @@ fn main() {\n         123\n     };\n \n+    pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n+\n     some_fn(a);\n }\n "}, {"sha": "90ad5aa64da036a75b69f3af83289fb307725f79", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=8e19251366887fe132bc7ba7593bff9358ad0291", "patch": "@@ -108,6 +108,8 @@ fn main() {\n         123\n     };\n \n+    pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n+\n     some_fn(a);\n }\n "}, {"sha": "1f447c9bfd1b8b20a1916cb387a2e0a80552b95d", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e19251366887fe132bc7ba7593bff9358ad0291/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=8e19251366887fe132bc7ba7593bff9358ad0291", "patch": "@@ -98,7 +98,7 @@ LL | |     };\n    = note: `!b as i32` or `(!b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:116:5\n+  --> $DIR/bool_to_int_with_if.rs:118:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`"}]}