{"sha": "b1a866012def324a47408d9130ea6c25cc5d0fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYTg2NjAxMmRlZjMyNGE0NzQwOGQ5MTMwZWE2YzI1Y2M1ZDBmYzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T23:05:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T23:05:00Z"}, "message": "Rollup merge of #62814 - androm3da:hexagon_19jul_2019, r=alexcrichton\n\nadd support for hexagon-unknown-linux-musl", "tree": {"sha": "81d9539132433fe87a3d154d7cc6f0923be090b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d9539132433fe87a3d154d7cc6f0923be090b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1a866012def324a47408d9130ea6c25cc5d0fc8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOOQcCRBK7hj4Ov3rIwAAdHIIABX6dYy5qs0q9qqZwBREUDq1\nGP5q5rjMQ/MqdkdcKhSUY+DizynLqU3HPWljkuMmDJ3VBQ4MBG6NIuMW6bux185Y\nrGFmvxLKoAWh6MRVeWQbGaKFtanIXeO2aSxCRArALsHYLSPL9QnKjOsbkCJo7j85\nV7BUjf5yPbbRGYVTlz62SnUtG3LoVoh8htjl63AcHZSp9sJi/LrCgilS00k0ey5Z\n/K6kz+4GO1tnXbDNvqQwN9P1yeqkXkqk15xCvERhLWn7Uu0QY09XZia11D3pSHtK\nuq8z0xWhGn59ES7iFy/yauTXhxAaKonzZcWxjD+HwJfM9FNO/i3dLRsXewWJ7is=\n=DhtZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 81d9539132433fe87a3d154d7cc6f0923be090b3\nparent 8d9000d38ca359cf7cb13cc456745897a87516ce\nparent 4b339688b5b49e38545336b27845b7d1e31a5b80\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564009500 +0200\ncommitter GitHub <noreply@github.com> 1564009500 +0200\n\nRollup merge of #62814 - androm3da:hexagon_19jul_2019, r=alexcrichton\n\nadd support for hexagon-unknown-linux-musl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a866012def324a47408d9130ea6c25cc5d0fc8", "html_url": "https://github.com/rust-lang/rust/commit/b1a866012def324a47408d9130ea6c25cc5d0fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1a866012def324a47408d9130ea6c25cc5d0fc8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9000d38ca359cf7cb13cc456745897a87516ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9000d38ca359cf7cb13cc456745897a87516ce", "html_url": "https://github.com/rust-lang/rust/commit/8d9000d38ca359cf7cb13cc456745897a87516ce"}, {"sha": "4b339688b5b49e38545336b27845b7d1e31a5b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b339688b5b49e38545336b27845b7d1e31a5b80", "html_url": "https://github.com/rust-lang/rust/commit/4b339688b5b49e38545336b27845b7d1e31a5b80"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "2b3bad8894e60f6ef03fdb7819e72a3a793fdb61", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -120,6 +120,7 @@\n #![feature(cmpxchg16b_target_feature)]\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n+#![feature(hexagon_target_feature)]\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]"}, {"sha": "236ed15050571e63877944c994afc788b1627f56", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -126,6 +126,9 @@ const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n #[cfg(target_arch = \"sparc64\")]\n const UNWIND_DATA_REG: (i32, i32) = (24, 25); // I0, I1\n \n+#[cfg(target_arch = \"hexagon\")]\n+const UNWIND_DATA_REG: (i32, i32) = (0, 1); // R0, R1\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "541d3d98b79bda83cbc591d2273b8f48a32b6a81", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -174,7 +174,7 @@ const X86_WHITELIST: &[(&str, Option<Symbol>)] = &[\n \n const HEXAGON_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n-    (\"hvx-double\", Some(sym::hexagon_target_feature)),\n+    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n ];\n \n const POWERPC_WHITELIST: &[(&str, Option<Symbol>)] = &["}, {"sha": "1d3b13d488366b1fb116f455441aa3200c1097e1", "filename": "src/librustc_target/spec/hexagon_unknown_linux_musl.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -0,0 +1,36 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult, LinkArgs};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"hexagonv60\".to_string();\n+    base.max_atomic_width = Some(32);\n+        // FIXME: HVX length defaults are per-CPU\n+    base.features = \"-small-data,+hvx-length128b\".to_string();\n+\n+    base.crt_static_default = false;\n+    base.atomic_cas = true;\n+    base.has_rpath = true;\n+    base.linker_is_gnu = false;\n+    base.dynamic_linking = true;\n+    base.executables = true;\n+\n+    base.pre_link_args = LinkArgs::new();\n+    base.post_link_args = LinkArgs::new();\n+\n+    Ok(Target {\n+        llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: concat!(\"e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32\",\n+                     \":32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32\",\n+                     \":32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048\",\n+                     \":2048:2048\").to_string(),\n+        arch: \"hexagon\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "ed62eb0dd20fcafc3cf776a551ec9e21abe3c270", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -368,6 +368,7 @@ supported_targets! {\n     (\"i586-unknown-linux-musl\", i586_unknown_linux_musl),\n     (\"mips-unknown-linux-musl\", mips_unknown_linux_musl),\n     (\"mipsel-unknown-linux-musl\", mipsel_unknown_linux_musl),\n+    (\"hexagon-unknown-linux-musl\", hexagon_unknown_linux_musl),\n \n     (\"mips-unknown-linux-uclibc\", mips_unknown_linux_uclibc),\n     (\"mipsel-unknown-linux-uclibc\", mipsel_unknown_linux_uclibc),"}, {"sha": "1f5de25b65c909bde60b9518160d739be13ef66d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -975,6 +975,11 @@ mod arch {\n     pub const ARCH: &str = \"wasm32\";\n }\n \n+#[cfg(target_arch = \"hexagon\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"hexagon\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "21e1cf8a22b4b18d36999995433f0f91b6a327bc", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -147,6 +147,62 @@ mod arch {\n     }\n }\n \n+#[cfg(target_arch = \"hexagon\")]\n+mod arch {\n+    use crate::os::raw::{c_long, c_int, c_longlong, culonglong};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = c_long;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = c_ulonglong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = c_uint;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: ::dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: ::c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: ::c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: ::c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: ::c_longlong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: ::blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: ::c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: ::blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad3: [::c_int;2],\n+    }\n+}\n+\n #[cfg(any(target_arch = \"mips64\",\n           target_arch = \"s390x\",\n           target_arch = \"sparc64\"))]"}, {"sha": "cf8be393a4049560ce14b19cb82c17b5a1cc0593", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -11,6 +11,7 @@\n #[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n+                                       target_arch = \"hexagon\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\",\n                                        target_arch = \"s390x\")),\n@@ -34,6 +35,7 @@\n #[doc(include = \"os/raw/char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n+                                           target_arch = \"hexagon\",\n                                            target_arch = \"powerpc\",\n                                            target_arch = \"powerpc64\",\n                                            target_arch = \"s390x\")),"}, {"sha": "1cfc7ed17f2e4e1804a1b5c9370eca2f908aaed4", "filename": "src/libstd/sys_common/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fsys_common%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibstd%2Fsys_common%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Falloc.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -12,7 +12,8 @@ use crate::ptr;\n               target_arch = \"powerpc\",\n               target_arch = \"powerpc64\",\n               target_arch = \"asmjs\",\n-              target_arch = \"wasm32\")))]\n+              target_arch = \"wasm32\",\n+              target_arch = \"hexagon\")))]\n pub const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\","}, {"sha": "aacbfc547d472115a878e9b02e4d88a1cd6a0efc", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a866012def324a47408d9130ea6c25cc5d0fc8/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=b1a866012def324a47408d9130ea6c25cc5d0fc8", "patch": "@@ -56,6 +56,9 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_os = \"emscripten\")]\n pub const unwinder_private_data_size: usize = 20;\n \n+#[cfg(all(target_arch = \"hexagon\", target_os = \"linux\"))]\n+pub const unwinder_private_data_size: usize = 35;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}]}