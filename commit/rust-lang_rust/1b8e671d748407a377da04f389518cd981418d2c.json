{"sha": "1b8e671d748407a377da04f389518cd981418d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGU2NzFkNzQ4NDA3YTM3N2RhMDRmMzg5NTE4Y2Q5ODE0MThkMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-09T23:51:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-09T23:51:27Z"}, "message": "auto merge of #15514 : luqmana/rust/die-advance-die, r=cmr\n\nCloses #15492.", "tree": {"sha": "27d36b78119308f4095479684be5db5188f7a576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d36b78119308f4095479684be5db5188f7a576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8e671d748407a377da04f389518cd981418d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8e671d748407a377da04f389518cd981418d2c", "html_url": "https://github.com/rust-lang/rust/commit/1b8e671d748407a377da04f389518cd981418d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8e671d748407a377da04f389518cd981418d2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942c72e1179bc2d3d351ea97235d65b39160cc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/942c72e1179bc2d3d351ea97235d65b39160cc18", "html_url": "https://github.com/rust-lang/rust/commit/942c72e1179bc2d3d351ea97235d65b39160cc18"}, {"sha": "5d39d0befaa567e1a438d6b0151390052931094c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d39d0befaa567e1a438d6b0151390052931094c", "html_url": "https://github.com/rust-lang/rust/commit/5d39d0befaa567e1a438d6b0151390052931094c"}], "stats": {"total": 102, "additions": 32, "deletions": 70}, "files": [{"sha": "23be65cc4e21e8077fdc899e2b762cd6119b142b", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -1426,18 +1426,14 @@ mod tests {\n     fn test_small_clear() {\n         let mut b = Bitv::with_capacity(14, true);\n         b.clear();\n-        BitvSet::from_bitv(b).iter().advance(|i| {\n-            fail!(\"found 1 at {:?}\", i)\n-        });\n+        assert!(b.none());\n     }\n \n     #[test]\n     fn test_big_clear() {\n         let mut b = Bitv::with_capacity(140, true);\n         b.clear();\n-        BitvSet::from_bitv(b).iter().advance(|i| {\n-            fail!(\"found 1 at {:?}\", i)\n-        });\n+        assert!(b.none());\n     }\n \n     #[test]\n@@ -1494,14 +1490,9 @@ mod tests {\n         assert!(b.insert(5));\n         assert!(b.insert(3));\n \n-        let mut i = 0;\n         let expected = [3, 5, 11, 77];\n-        a.intersection(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.intersection(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1518,14 +1509,9 @@ mod tests {\n         assert!(b.insert(3));\n         assert!(b.insert(200));\n \n-        let mut i = 0;\n         let expected = [1, 5, 500];\n-        a.difference(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.difference(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1544,14 +1530,9 @@ mod tests {\n         assert!(b.insert(14));\n         assert!(b.insert(220));\n \n-        let mut i = 0;\n         let expected = [1, 5, 11, 14, 220];\n-        a.symmetric_difference(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.symmetric_difference(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1573,14 +1554,9 @@ mod tests {\n         assert!(b.insert(13));\n         assert!(b.insert(19));\n \n-        let mut i = 0;\n         let expected = [1, 3, 5, 9, 11, 13, 19, 24, 160];\n-        a.union(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.union(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]"}, {"sha": "1451bf9d7c7bcedd84b306f518d5494af50286e0", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -1770,7 +1770,7 @@ mod test_set {\n     #[test]\n     fn test_intersection() {\n         fn check_intersection(a: &[int], b: &[int], expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.intersection(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.intersection(y).all(f))\n         }\n \n         check_intersection([], [], []);\n@@ -1786,7 +1786,7 @@ mod test_set {\n     #[test]\n     fn test_difference() {\n         fn check_difference(a: &[int], b: &[int], expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.difference(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.difference(y).all(f))\n         }\n \n         check_difference([], [], []);\n@@ -1804,7 +1804,7 @@ mod test_set {\n     fn test_symmetric_difference() {\n         fn check_symmetric_difference(a: &[int], b: &[int],\n                                       expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.symmetric_difference(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.symmetric_difference(y).all(f))\n         }\n \n         check_symmetric_difference([], [], []);\n@@ -1819,7 +1819,7 @@ mod test_set {\n     fn test_union() {\n         fn check_union(a: &[int], b: &[int],\n                                       expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.union(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.union(y).all(f))\n         }\n \n         check_union([], [], []);"}, {"sha": "77795a333523791f5200d197ca16e7d56c9cfc18", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -435,9 +435,10 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// range(0u, 5).advance(|x| {print!(\"{} \", x); true});\n     /// ```\n+    #[deprecated = \"use the `all` method instead\"]\n     #[inline]\n     fn advance(&mut self, f: |A| -> bool) -> bool {\n         loop {"}, {"sha": "23f16be1659f40fb1f1cda4e1c5f60f95ae5f402", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -896,7 +896,7 @@ fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n         *cont\n     };\n \n-    ss.char_indices().advance(|x| machine(&mut cont, x));\n+    ss.char_indices().all(|x| machine(&mut cont, x));\n \n     // Let the automaton 'run out' by supplying trailing whitespace\n     while cont && match state { B | C => true, A => false } {"}, {"sha": "78eeb26997d5148a2d74d6986d57e5a34db08ae5", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -207,12 +207,12 @@ impl<N,E> Graph<N,E> {\n \n     pub fn each_node<'a>(&'a self, f: |NodeIndex, &'a Node<N>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n-        self.nodes.iter().enumerate().advance(|(i, node)| f(NodeIndex(i), node))\n+        self.nodes.iter().enumerate().all(|(i, node)| f(NodeIndex(i), node))\n     }\n \n     pub fn each_edge<'a>(&'a self, f: |EdgeIndex, &'a Edge<E>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph\n-        self.edges.iter().enumerate().advance(|(i, edge)| f(EdgeIndex(i), edge))\n+        self.edges.iter().enumerate().all(|(i, edge)| f(EdgeIndex(i), edge))\n     }\n \n     pub fn each_outgoing_edge<'a>(&'a self,"}, {"sha": "4655507f5d1a755c0544e557aeff5b8049acfa4d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -5149,7 +5149,7 @@ impl<'a> Resolver<'a> {\n                             }\n                             _ => {\n                                 let mut method_scope = false;\n-                                self.value_ribs.borrow().iter().rev().advance(|rib| {\n+                                self.value_ribs.borrow().iter().rev().all(|rib| {\n                                     let res = match *rib {\n                                         Rib { bindings: _, kind: MethodRibKind(_, _) } => true,\n                                         Rib { bindings: _, kind: ItemRibKind } => false,"}, {"sha": "eee53b79763be9b023825311b25d24963bf5bdfe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -3887,13 +3887,13 @@ pub fn lookup_trait_def(cx: &ctxt, did: ast::DefId) -> Rc<ty::TraitDef> {\n pub fn each_attr(tcx: &ctxt, did: DefId, f: |&ast::Attribute| -> bool) -> bool {\n     if is_local(did) {\n         let item = tcx.map.expect_item(did.node);\n-        item.attrs.iter().advance(|attr| f(attr))\n+        item.attrs.iter().all(|attr| f(attr))\n     } else {\n         info!(\"getting foreign attrs\");\n         let mut cont = true;\n         csearch::get_item_attrs(&tcx.sess.cstore, did, |attrs| {\n             if cont {\n-                cont = attrs.iter().advance(|attr| f(attr));\n+                cont = attrs.iter().all(|attr| f(attr));\n             }\n         });\n         info!(\"done\");"}, {"sha": "8b01002831b7e69634dbd6b53bc0e8c23acdf0b3", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -87,24 +87,9 @@ static AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: RustIntrinsic, name: \"rust-intrinsic\", abi_arch: RustArch},\n ];\n \n-/// Iterates through each of the defined ABIs.\n-fn each_abi(op: |abi: Abi| -> bool) -> bool {\n-    AbiDatas.iter().advance(|abi_data| op(abi_data.abi))\n-}\n-\n /// Returns the ABI with the given name (if any).\n pub fn lookup(name: &str) -> Option<Abi> {\n-    let mut res = None;\n-\n-    each_abi(|abi| {\n-        if name == abi.data().name {\n-            res = Some(abi);\n-            false\n-        } else {\n-            true\n-        }\n-    });\n-    res\n+    AbiDatas.iter().find(|abi_data| name == abi_data.name).map(|&x| x.abi)\n }\n \n pub fn all_names() -> Vec<&'static str> {"}, {"sha": "cd38c9b3e98c1aa22bbf75c52eeef7cae6f47fb2", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -611,18 +611,18 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n     match pat.node {\n         PatIdent(_, _, Some(ref p)) => walk_pat(&**p, it),\n         PatStruct(_, ref fields, _) => {\n-            fields.iter().advance(|f| walk_pat(&*f.pat, |p| it(p)))\n+            fields.iter().all(|field| walk_pat(&*field.pat, |p| it(p)))\n         }\n         PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n-            s.iter().advance(|p| walk_pat(&**p, |p| it(p)))\n+            s.iter().all(|p| walk_pat(&**p, |p| it(p)))\n         }\n         PatBox(ref s) | PatRegion(ref s) => {\n             walk_pat(&**s, it)\n         }\n         PatVec(ref before, ref slice, ref after) => {\n-            before.iter().advance(|p| walk_pat(&**p, |p| it(p))) &&\n-                slice.iter().advance(|p| walk_pat(&**p, |p| it(p))) &&\n-                after.iter().advance(|p| walk_pat(&**p, |p| it(p)))\n+            before.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n+            slice.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n+            after.iter().all(|p| walk_pat(&**p, |p| it(p)))\n         }\n         PatMac(_) => fail!(\"attempted to analyze unexpanded pattern\"),\n         PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |"}, {"sha": "e46d00c4ab9f65a73a612bb933d99da819decccb", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -12,7 +12,7 @@ use std::vec::Vec;\n \n fn main() {\n     let a: Vec<int> = Vec::new();\n-    a.iter().advance(|_| -> bool {\n+    a.iter().all(|_| -> bool {\n         //~^ ERROR mismatched types\n     });\n }"}, {"sha": "1ffee6aad7603c8e0bf1f9d870ddf31bb20296d8", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -19,13 +19,13 @@ trait iterable<A> {\n \n impl<'a,A> iterable<A> for &'a [A] {\n     fn iterate(&self, f: |x: &A| -> bool) -> bool {\n-        self.iter().advance(f)\n+        self.iter().all(f)\n     }\n }\n \n impl<A> iterable<A> for Vec<A> {\n     fn iterate(&self, f: |x: &A| -> bool) -> bool {\n-        self.iter().advance(f)\n+        self.iter().all(f)\n     }\n }\n "}, {"sha": "c0be4abafbe9a2f28c22d0919ed40bf81f4f79f1", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8e671d748407a377da04f389518cd981418d2c/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=1b8e671d748407a377da04f389518cd981418d2c", "patch": "@@ -24,7 +24,7 @@ fn add_int(x: &mut Ints, v: int) {\n \n fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n     let l = x.values.len();\n-    range(0u, l).advance(|i| f(x.values.get(i)))\n+    range(0u, l).all(|i| f(x.values.get(i)))\n }\n \n pub fn main() {"}]}