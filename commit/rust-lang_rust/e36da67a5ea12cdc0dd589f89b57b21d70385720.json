{"sha": "e36da67a5ea12cdc0dd589f89b57b21d70385720", "node_id": "C_kwDOAAsO6NoAKGUzNmRhNjdhNWVhMTJjZGMwZGQ1ODlmODliNTdiMjFkNzAzODU3MjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-09T00:05:31Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-09T00:14:01Z"}, "message": "rustdoc: Show type layout for type aliases\n\nAt first, you might think, \"Why not just click through to the aliased\ntype?\" But, if a type alias instantiates all of the generic parameters\nof the aliased type, then it can show layout info even though the\naliased type cannot (because we can't compute layout for generic types).\nSo, I think it's useful to show layout info for type aliases.\n\nThis is a followup of 78d4b453ad2e19d44011b26fc55c949bff5dba3d\n(originally part of #83501).", "tree": {"sha": "6f3d83eb35402fcc37bf2507a4531838f941ed1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3d83eb35402fcc37bf2507a4531838f941ed1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36da67a5ea12cdc0dd589f89b57b21d70385720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36da67a5ea12cdc0dd589f89b57b21d70385720", "html_url": "https://github.com/rust-lang/rust/commit/e36da67a5ea12cdc0dd589f89b57b21d70385720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36da67a5ea12cdc0dd589f89b57b21d70385720/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "2fae5495b0af13d57a25dcf3cc863df6b78eae15", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36da67a5ea12cdc0dd589f89b57b21d70385720/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36da67a5ea12cdc0dd589f89b57b21d70385720/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=e36da67a5ea12cdc0dd589f89b57b21d70385720", "patch": "@@ -976,6 +976,7 @@ fn item_typedef(\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {"}, {"sha": "4eea9809ac58f66e19e5bab3f29307c6a6c19d6d", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36da67a5ea12cdc0dd589f89b57b21d70385720/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36da67a5ea12cdc0dd589f89b57b21d70385720/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=e36da67a5ea12cdc0dd589f89b57b21d70385720", "patch": "@@ -50,6 +50,18 @@ pub struct GenericLifetimes<'a>(&'a str);\n // @has - '(unsized)'\n pub struct Unsized([u8]);\n \n+// @has type_layout/type.TypeAlias.html 'Size: '\n+// @has - ' bytes'\n+pub type TypeAlias = X;\n+\n+// @has type_layout/type.GenericTypeAlias.html 'Size: '\n+// @has - '8 bytes'\n+pub type GenericTypeAlias = (Generic<(u32, ())>, Generic<u32>);\n+\n+// Regression test for the rustdoc equivalent of #85103.\n+// @has type_layout/type.Edges.html 'Encountered an error during type layout; the type failed to be normalized.'\n+pub type Edges<'a, E> = std::borrow::Cow<'a, [E]>;\n+\n // @!has type_layout/trait.MyTrait.html 'Size: '\n pub trait MyTrait {}\n "}]}