{"sha": "1ca6777c014813e3bdb98d155562fc3d111d86dd", "node_id": "C_kwDOAAsO6NoAKDFjYTY3NzdjMDE0ODEzZTNiZGI5OGQxNTU1NjJmYzNkMTExZDg2ZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T15:00:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T15:00:31Z"}, "message": "Auto merge of #101403 - bjorn3:dylib_lto, r=Mark-Simulacrum\n\nEnable LTO for rustc_driver.so\n\nAlternative to https://github.com/rust-lang/rust/pull/97154\n\nThis enables LTO'ing dylibs behind a feature flag and uses this feature for compiling rustc_driver.so.", "tree": {"sha": "279c021f9e28f8e9848d9a78df0ca74a3662f4f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279c021f9e28f8e9848d9a78df0ca74a3662f4f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ca6777c014813e3bdb98d155562fc3d111d86dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca6777c014813e3bdb98d155562fc3d111d86dd", "html_url": "https://github.com/rust-lang/rust/commit/1ca6777c014813e3bdb98d155562fc3d111d86dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ca6777c014813e3bdb98d155562fc3d111d86dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}, {"sha": "565b7e0db170ab964b0ee7f1e53e880e5e528112", "url": "https://api.github.com/repos/rust-lang/rust/commits/565b7e0db170ab964b0ee7f1e53e880e5e528112", "html_url": "https://github.com/rust-lang/rust/commit/565b7e0db170ab964b0ee7f1e53e880e5e528112"}], "stats": {"total": 164, "additions": 136, "deletions": 28}, "files": [{"sha": "a49cc7f8d662ddd427334895ca2a13e2eb582e78", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -32,8 +32,8 @@ pub const THIN_LTO_KEYS_INCR_COMP_FILE_NAME: &str = \"thin-lto-past-keys.bin\";\n \n pub fn crate_type_allows_lto(crate_type: CrateType) -> bool {\n     match crate_type {\n-        CrateType::Executable | CrateType::Staticlib | CrateType::Cdylib => true,\n-        CrateType::Dylib | CrateType::Rlib | CrateType::ProcMacro => false,\n+        CrateType::Executable | CrateType::Dylib | CrateType::Staticlib | CrateType::Cdylib => true,\n+        CrateType::Rlib | CrateType::ProcMacro => false,\n     }\n }\n \n@@ -73,17 +73,6 @@ fn prepare_lto(\n     // with either fat or thin LTO\n     let mut upstream_modules = Vec::new();\n     if cgcx.lto != Lto::ThinLocal {\n-        if cgcx.opts.cg.prefer_dynamic {\n-            diag_handler\n-                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n-                .note(\n-                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n-                               supported with LTO\",\n-                )\n-                .emit();\n-            return Err(FatalError);\n-        }\n-\n         // Make sure we actually can run LTO\n         for crate_type in cgcx.crate_types.iter() {\n             if !crate_type_allows_lto(*crate_type) {\n@@ -92,9 +81,25 @@ fn prepare_lto(\n                                             static library outputs\",\n                 );\n                 return Err(e);\n+            } else if *crate_type == CrateType::Dylib {\n+                if !cgcx.opts.unstable_opts.dylib_lto {\n+                    return Err(diag_handler\n+                        .fatal(\"lto cannot be used for `dylib` crate type without `-Zdylib-lto`\"));\n+                }\n             }\n         }\n \n+        if cgcx.opts.cg.prefer_dynamic && !cgcx.opts.unstable_opts.dylib_lto {\n+            diag_handler\n+                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n+                .note(\n+                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n+                               supported with LTO\",\n+                )\n+                .emit();\n+            return Err(FatalError);\n+        }\n+\n         for &(cnum, ref path) in cgcx.each_linked_rlib_for_lto.iter() {\n             let exported_symbols =\n                 cgcx.exported_symbols.as_ref().expect(\"needs exported symbols for LTO\");"}, {"sha": "a0b5e3b6daf44ee9e364d9896a76d50b872e6798", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -11,7 +11,7 @@ use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{emit_metadata, METADATA_FILENAME};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Lto, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SplitDwarfKind};\n use rustc_session::cstore::DllImport;\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n@@ -39,6 +39,7 @@ use cc::windows_registry;\n use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n+use itertools::Itertools;\n use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n@@ -208,11 +209,29 @@ pub fn link_binary<'a>(\n }\n \n pub fn each_linked_rlib(\n+    sess: &Session,\n     info: &CrateInfo,\n     f: &mut dyn FnMut(CrateNum, &Path),\n ) -> Result<(), errors::LinkRlibError> {\n     let crates = info.used_crates.iter();\n     let mut fmts = None;\n+\n+    let lto_active = matches!(sess.lto(), Lto::Fat | Lto::Thin);\n+    if lto_active {\n+        for combination in info.dependency_formats.iter().combinations(2) {\n+            let (ty1, list1) = &combination[0];\n+            let (ty2, list2) = &combination[1];\n+            if list1 != list2 {\n+                return Err(errors::LinkRlibError::IncompatibleDependencyFormats {\n+                    ty1: format!(\"{ty1:?}\"),\n+                    ty2: format!(\"{ty2:?}\"),\n+                    list1: format!(\"{list1:?}\"),\n+                    list2: format!(\"{list2:?}\"),\n+                });\n+            }\n+        }\n+    }\n+\n     for (ty, list) in info.dependency_formats.iter() {\n         match ty {\n             CrateType::Executable\n@@ -222,6 +241,10 @@ pub fn each_linked_rlib(\n                 fmts = Some(list);\n                 break;\n             }\n+            CrateType::Dylib if lto_active => {\n+                fmts = Some(list);\n+                break;\n+            }\n             _ => {}\n         }\n     }\n@@ -490,7 +513,7 @@ fn link_staticlib<'a>(\n     )?;\n     let mut all_native_libs = vec![];\n \n-    let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n+    let res = each_linked_rlib(sess, &codegen_results.crate_info, &mut |cnum, path| {\n         let name = codegen_results.crate_info.crate_name[&cnum];\n         let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n "}, {"sha": "c2ecc41601c8c92bdddacb5b6fa592881d7946f3", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, SymbolName, TyCtxt};\n-use rustc_session::config::CrateType;\n+use rustc_session::config::{CrateType, OomStrategy};\n use rustc_target::spec::SanitizerSet;\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n@@ -206,6 +206,15 @@ fn exported_symbols_provider_local<'tcx>(\n                 },\n             ));\n         }\n+\n+        symbols.push((\n+            ExportedSymbol::NoDefId(SymbolName::new(tcx, OomStrategy::SYMBOL)),\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::Rust,\n+                kind: SymbolExportKind::Text,\n+                used: false,\n+            },\n+        ));\n     }\n \n     if tcx.sess.instrument_coverage() || tcx.sess.opts.cg.profile_generate.enabled() {"}, {"sha": "d0ac016b02e151863d263c9223c7c26dba6f2889", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -999,6 +999,14 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     let coordinator_send = tx_to_llvm_workers;\n     let sess = tcx.sess;\n \n+    let mut each_linked_rlib_for_lto = Vec::new();\n+    drop(link::each_linked_rlib(sess, crate_info, &mut |cnum, path| {\n+        if link::ignored_for_lto(sess, crate_info, cnum) {\n+            return;\n+        }\n+        each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n+    }));\n+\n     // Compute the set of symbols we need to retain when doing LTO (if we need to)\n     let exported_symbols = {\n         let mut exported_symbols = FxHashMap::default();\n@@ -1020,7 +1028,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n             }\n             Lto::Fat | Lto::Thin => {\n                 exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n-                for &cnum in tcx.crates(()).iter() {\n+                for &(cnum, ref _path) in &each_linked_rlib_for_lto {\n                     exported_symbols.insert(cnum, copy_symbols(cnum));\n                 }\n                 Some(Arc::new(exported_symbols))\n@@ -1040,14 +1048,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         })\n         .expect(\"failed to spawn helper thread\");\n \n-    let mut each_linked_rlib_for_lto = Vec::new();\n-    drop(link::each_linked_rlib(crate_info, &mut |cnum, path| {\n-        if link::ignored_for_lto(sess, crate_info, cnum) {\n-            return;\n-        }\n-        each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n-    }));\n-\n     let ol =\n         if tcx.sess.opts.unstable_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n             // If we know that we won\u2019t be doing codegen, create target machines without optimisation."}, {"sha": "ebb531f1c43a5e21e9d89c04bd1fc150ec6cbeba", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -127,6 +127,9 @@ pub enum LinkRlibError {\n \n     #[diag(codegen_ssa_rlib_not_found)]\n     NotFound { crate_name: Symbol },\n+\n+    #[diag(codegen_ssa_rlib_incompatible_dependency_formats)]\n+    IncompatibleDependencyFormats { ty1: String, ty2: String, list1: String, list2: String },\n }\n \n pub struct ThorinErrorWrapper(pub thorin::Error);"}, {"sha": "966a421bcf08c38fb06637a3837cfc78faa211eb", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -34,6 +34,8 @@ codegen_ssa_rlib_only_rmeta_found = could not find rlib for: `{$crate_name}`, fo\n \n codegen_ssa_rlib_not_found = could not find rlib for: `{$crate_name}`\n \n+codegen_ssa_rlib_incompatible_dependency_formats = `{$ty1}` and `{$ty2}` do not have equivalent dependency formats (`{$list1}` vs `{$list2}`)\n+\n codegen_ssa_linking_failed = linking with `{$linker_path}` failed: {$exit_status}\n \n codegen_ssa_extern_funcs_not_found = some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified"}, {"sha": "eb8e65a6d59d38819736f8ee02df36b805116711", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -648,6 +648,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(dump_mir_dir, String::from(\"abc\"));\n     untracked!(dump_mir_exclude_pass_number, true);\n     untracked!(dump_mir_graphviz, true);\n+    untracked!(dylib_lto, true);\n     untracked!(emit_stack_sizes, true);\n     untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);"}, {"sha": "3f234a47a3d86bdacdc7c108ffb7070bf42814c9", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -1295,6 +1295,8 @@ options! {\n         an additional `.html` file showing the computed coverage spans.\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n+    dylib_lto: bool = (false, parse_bool, [UNTRACKED],\n+        \"enables LTO for dylib crate type\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n     emit_thin_lto: bool = (true, parse_bool, [TRACKED],"}, {"sha": "a46813e4d7a3b825475b743466ee5650ab0174d5", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -638,6 +638,11 @@ changelog-seen = 2\n # If an explicit setting is given, it will be used for all parts of the codebase.\n #new-symbol-mangling = true|false (see comment)\n \n+# Select LTO mode that will be used for compiling rustc. By default, thin local LTO\n+# (LTO within a single crate) is used (like for any Rust crate). You can also select\n+# \"thin\" or \"fat\" to apply Thin/Fat LTO to the `rustc_driver` dylib.\n+#lto = \"thin-local\"\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "9cc119d3301ac89da60d61fe8435c43218ba7434", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -21,7 +21,7 @@ use serde::Deserialize;\n use crate::builder::Cargo;\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n-use crate::config::{LlvmLibunwind, TargetSelection};\n+use crate::config::{LlvmLibunwind, RustcLto, TargetSelection};\n use crate::dist;\n use crate::native;\n use crate::tool::SourceType;\n@@ -701,6 +701,28 @@ impl Step for Rustc {\n             ));\n         }\n \n+        // cfg(bootstrap): remove if condition once the bootstrap compiler supports dylib LTO\n+        if compiler.stage != 0 {\n+            match builder.config.rust_lto {\n+                RustcLto::Thin | RustcLto::Fat => {\n+                    // Since using LTO for optimizing dylibs is currently experimental,\n+                    // we need to pass -Zdylib-lto.\n+                    cargo.rustflag(\"-Zdylib-lto\");\n+                    // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n+                    // compiling dylibs (and their dependencies), even when LTO is enabled for the\n+                    // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n+                    let lto_type = match builder.config.rust_lto {\n+                        RustcLto::Thin => \"thin\",\n+                        RustcLto::Fat => \"fat\",\n+                        _ => unreachable!(),\n+                    };\n+                    cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n+                    cargo.rustflag(\"-Cembed-bitcode=yes\");\n+                }\n+                RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n+            }\n+        }\n+\n         builder.info(&format!(\n             \"Building stage{} compiler artifacts ({} -> {})\",\n             compiler.stage, &compiler.host, target"}, {"sha": "a8c403675d82197d618728a179e4e5f3e3a662f1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -158,6 +158,7 @@ pub struct Config {\n     pub rust_new_symbol_mangling: Option<bool>,\n     pub rust_profile_use: Option<String>,\n     pub rust_profile_generate: Option<String>,\n+    pub rust_lto: RustcLto,\n     pub llvm_profile_use: Option<String>,\n     pub llvm_profile_generate: bool,\n     pub llvm_libunwind_default: Option<LlvmLibunwind>,\n@@ -319,6 +320,28 @@ impl SplitDebuginfo {\n     }\n }\n \n+/// LTO mode used for compiling rustc itself.\n+#[derive(Default, Clone)]\n+pub enum RustcLto {\n+    #[default]\n+    ThinLocal,\n+    Thin,\n+    Fat,\n+}\n+\n+impl std::str::FromStr for RustcLto {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"thin-local\" => Ok(RustcLto::ThinLocal),\n+            \"thin\" => Ok(RustcLto::Thin),\n+            \"fat\" => Ok(RustcLto::Fat),\n+            _ => Err(format!(\"Invalid value for rustc LTO: {}\", s)),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n@@ -726,6 +749,7 @@ define_config! {\n         profile_use: Option<String> = \"profile-use\",\n         // ignored; this is set from an env var set by bootstrap.py\n         download_rustc: Option<StringOrBool> = \"download-rustc\",\n+        lto: Option<String> = \"lto\",\n     }\n }\n \n@@ -1173,6 +1197,12 @@ impl Config {\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n             config.download_rustc_commit = download_ci_rustc_commit(&config, rust.download_rustc);\n+\n+            config.rust_lto = rust\n+                .lto\n+                .as_deref()\n+                .map(|value| RustcLto::from_str(value).unwrap())\n+                .unwrap_or_default();\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;"}, {"sha": "423aba06ccaff770963f392024b994368997a59d", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -78,7 +78,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set llvm.thin-lto=true \\\n       --set llvm.ninja=false \\\n       --set rust.jemalloc \\\n-      --set rust.use-lld=true\n+      --set rust.use-lld=true \\\n+      --set rust.lto=thin\n ENV SCRIPT ../src/ci/pgo.sh python3 ../x.py dist \\\n     --host $HOSTS --target $HOSTS \\\n     --include-default-paths \\"}, {"sha": "f69ea334f5a3af071ab80b122e4a334e16e5f1aa", "filename": "src/doc/unstable-book/src/compiler-flags/dylib-lto.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -0,0 +1,4 @@\n+## `dylib-lto`\n+\n+This option enables using LTO for the `dylib` crate type. This is currently only used for compiling\n+`rustc` itself (more specifically, the `librustc_driver` dylib)."}, {"sha": "4b85255772114ca4946d95fe591933dae7d61991", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -1 +1 @@\n-Subproject commit 9567f08afc94332d59025744f3a8198104949d3c\n+Subproject commit 4b85255772114ca4946d95fe591933dae7d61991"}, {"sha": "46f11d2e5d1ebc6baa3b8046d67905b1d5f7e7ad", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -36,6 +36,7 @@\n     -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n+    -Z                               dylib-lto=val -- enables LTO for dylib crate type\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n     -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries"}]}