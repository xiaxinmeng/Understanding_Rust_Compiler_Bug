{"sha": "9b46e875cc1a26dd899011559445cdce4ee99678", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDZlODc1Y2MxYTI2ZGQ4OTkwMTE1NTk0NDVjZGNlNGVlOTk2Nzg=", "commit": {"author": {"name": "Ted Horst", "email": "ted.horst@earthlink.net", "date": "2012-02-04T04:43:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-04T04:49:14Z"}, "message": "add third arg for output path, default to no output", "tree": {"sha": "bef497a5ea9ab84b813982d461091688f0f9362c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef497a5ea9ab84b813982d461091688f0f9362c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b46e875cc1a26dd899011559445cdce4ee99678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b46e875cc1a26dd899011559445cdce4ee99678", "html_url": "https://github.com/rust-lang/rust/commit/9b46e875cc1a26dd899011559445cdce4ee99678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b46e875cc1a26dd899011559445cdce4ee99678/comments", "author": {"login": "tedhorst", "id": 113629, "node_id": "MDQ6VXNlcjExMzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/113629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedhorst", "html_url": "https://github.com/tedhorst", "followers_url": "https://api.github.com/users/tedhorst/followers", "following_url": "https://api.github.com/users/tedhorst/following{/other_user}", "gists_url": "https://api.github.com/users/tedhorst/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedhorst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedhorst/subscriptions", "organizations_url": "https://api.github.com/users/tedhorst/orgs", "repos_url": "https://api.github.com/users/tedhorst/repos", "events_url": "https://api.github.com/users/tedhorst/events{/privacy}", "received_events_url": "https://api.github.com/users/tedhorst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ae16f7527391c6b1c6168f0f4d46857ce6ec2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ae16f7527391c6b1c6168f0f4d46857ce6ec2d", "html_url": "https://github.com/rust-lang/rust/commit/63ae16f7527391c6b1c6168f0f4d46857ce6ec2d"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "985b2e8250458737ed651ea56bd76587390046b3", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9b46e875cc1a26dd899011559445cdce4ee99678/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b46e875cc1a26dd899011559445cdce4ee99678/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=9b46e875cc1a26dd899011559445cdce4ee99678", "patch": "@@ -2,11 +2,15 @@\n //  http://shootout.alioth.debian.org/\n //   u64q/program.php?test=mandelbrot&lang=python3&id=2\n //\n-//  takes 2 optional numeric args: square image size and yield frequency\n+//  takes 3 optional args:\n+//   square image size, defaults to 80_u\n+//   yield frequency, defaults to 10_u (yield every 10 spawns)\n+//   output path, default is \"\" (no output), \"-\" means stdout\n+//\n //  in the shootout, they use 16000 as image size\n //  yield frequency doesn't seem to have much effect\n //\n-//  writes pbm image to stdout\n+//  writes pbm image to output path\n \n use std;\n import std::io::writer_util;\n@@ -72,12 +76,33 @@ fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n     comm::send(ch, {i:i, b:crv});\n }\n \n-fn writer(writech: comm::chan<comm::chan<line>>, size: uint)\n+type devnull = {dn: int};\n+\n+impl of std::io::writer for devnull {\n+    fn write(_b: [const u8]) {}\n+    fn seek(_i: int, _s: std::io::seek_style) {}\n+    fn tell() -> uint {0_u}\n+    fn flush() -> int {0}\n+}\n+\n+fn writer(path: str, writech: comm::chan<comm::chan<line>>, size: uint)\n {\n     let p: comm::port<line> = comm::port();\n     let ch = comm::chan(p);\n     comm::send(writech, ch);\n-    let cout = std::io::stdout();\n+    let cout: std::io::writer = alt path {\n+        \"\" {\n+            {dn: 0} as std::io::writer\n+        }\n+        \"-\" {\n+            std::io::stdout()\n+        }\n+        _ {\n+            result::get(\n+                std::io::file_writer(path,\n+                [std::io::create, std::io::truncate]))\n+        }\n+    };\n     cout.write_line(\"P4\");\n     cout.write_line(#fmt(\"%u %u\", size, size));\n     let lines = std::map::new_uint_hash();\n@@ -125,10 +150,16 @@ fn main(argv: [str])\n     else {\n         uint::from_str(argv[2])\n     };\n+    let path = if vec::len(argv) < 4_u {\n+        \"\"\n+    }\n+    else {\n+        argv[3]\n+    };\n     let writep = comm::port();\n     let writech = comm::chan(writep);\n     task::spawn {\n-        || writer(writech, size);\n+        || writer(path, writech, size);\n     };\n     let ch = comm::recv(writep);\n     uint::range(0_u, size) {"}]}