{"sha": "43e1cdbaf9230cc36b18f9ab41079449c5cac375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTFjZGJhZjkyMzBjYzM2YjE4ZjlhYjQxMDc5NDQ5YzVjYWMzNzU=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-26T11:52:31Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-07-05T17:49:43Z"}, "message": "rustdoc: Replace `FakeDefId` with new `ItemId` type", "tree": {"sha": "1a5f04870a89cc7ab9d9fc209878a8d4285cb8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5f04870a89cc7ab9d9fc209878a8d4285cb8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e1cdbaf9230cc36b18f9ab41079449c5cac375", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDjRjoACgkQjGL+mKYv\nxGJoQRAAkMe45S9AsdrHwHfAaQZgbcfS4xBGh/CYoi176h+EOm/T2ZUSscWiSXEN\ncsUhKA6qDSvAw0M17SJXx/DgqGRIBBdW3bh/VpUiJXmkXXFWQ/auRdTYOqrbtQq+\nyxZXJ4I+B0SctEfbegpiU2bAIExCyRqTKAeQYQc2qpfySXrjahXHqLPzxIgWq7Kl\n9UfB712ZY/8T79S7RR3Ylvab6lTnw2f9OpPC7b7F8BmBe+I+wZt+sHyYteXaHLqS\n3m7Z4khsIxxM8LCs2mlMU7b00v1zpBVyZosvODAH+IZgug5iorsstXwOCJX953DZ\nBqKlBKzscDhIUfAjoV8eBUXDd3IY3UkVx2HSmC2nbcEKEkvv2B73xrPSxiTbI56v\n+Y0vtefUU1uNPKj4AA1MIvfS3cjWxkieek8XO+dqQLiqhY3WrRCMHZbQ92NSVGAI\nvZUeTzU/R9EVksaY/b/mwVuRtQGP91ZAFdJm+9hB+Vu+lWUXmH9M2sBN/Gj3laTp\nxy/WVGB5bth1bBWBDDjaWyHTevmld4MdsiyA2cu1VvG8x8fJ/mjwiw5OUdtU8MhT\nPqdl4FhgWFkYoK0GCET1ICtDLOUPjREqCf58xxrdoMJfUrYZh7bmCX7kB+wkOzGz\nMuX5cIFbNSIrU7yn7PsJRKbFRcZn9td1B4fpDOFR6TWIRys0VDQ=\n=MqxN\n-----END PGP SIGNATURE-----", "payload": "tree 1a5f04870a89cc7ab9d9fc209878a8d4285cb8ef\nparent 6e9b3696d494a32d493585f96f0671123066cd58\nauthor Justus K <justus.k@protonmail.com> 1624708351 +0200\ncommitter Justus K <justus.k@protonmail.com> 1625507383 +0200\n\nrustdoc: Replace `FakeDefId` with new `ItemId` type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e1cdbaf9230cc36b18f9ab41079449c5cac375", "html_url": "https://github.com/rust-lang/rust/commit/43e1cdbaf9230cc36b18f9ab41079449c5cac375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e1cdbaf9230cc36b18f9ab41079449c5cac375/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9b3696d494a32d493585f96f0671123066cd58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9b3696d494a32d493585f96f0671123066cd58", "html_url": "https://github.com/rust-lang/rust/commit/6e9b3696d494a32d493585f96f0671123066cd58"}], "stats": {"total": 167, "additions": 81, "deletions": 86}, "files": [{"sha": "e479d162b8ffb85419057c7e8a562f4a1f28ad62", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             name: None,\n             attrs: Default::default(),\n             visibility: Inherited,\n-            def_id: FakeDefId::new_fake(item_def_id.krate),\n+            def_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n             kind: box ImplItem(Impl {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,"}, {"sha": "59fefee5ee4ed9381aff87732f7e1ab1ac6597e8", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,\n-                    def_id: FakeDefId::new_fake(item_def_id.krate),\n+                    def_id: ItemId::Blanket { trait_: trait_def_id, for_: item_def_id },\n                     kind: box ImplItem(Impl {\n                         span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                         unsafety: hir::Unsafety::Normal,"}, {"sha": "ce4c1a76b5b808135fd12ca14b8e9a868f561081", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -15,7 +15,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, utils, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, Type,\n+    self, utils, Attributes, AttributesExt, GetDefId, ItemId, NestedAttributesExt, Type,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -486,7 +486,7 @@ fn build_module(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: box clean::Attributes::default(),\n-                    def_id: FakeDefId::new_fake(did.krate),\n+                    def_id: ItemId::Primitive(did.krate),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,"}, {"sha": "fe78548bc3189c3939a55899531a5dfe8368ebc7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -1,4 +1,4 @@\n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n use std::default::Default;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n@@ -18,7 +18,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_index::vec::IndexVec;\n@@ -48,73 +48,68 @@ use self::ItemKind::*;\n use self::SelfTy::*;\n use self::Type::*;\n \n-crate type FakeDefIdSet = FxHashSet<FakeDefId>;\n+crate type ItemIdSet = FxHashSet<ItemId>;\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n-crate enum FakeDefId {\n-    Real(DefId),\n-    Fake(DefIndex, CrateNum),\n-}\n-\n-impl FakeDefId {\n-    #[cfg(parallel_compiler)]\n-    crate fn new_fake(crate: CrateNum) -> Self {\n-        unimplemented!(\"\")\n-    }\n-\n-    #[cfg(not(parallel_compiler))]\n-    crate fn new_fake(krate: CrateNum) -> Self {\n-        thread_local!(static FAKE_DEF_ID_COUNTER: Cell<usize> = Cell::new(0));\n-        let id = FAKE_DEF_ID_COUNTER.with(|id| {\n-            let tmp = id.get();\n-            id.set(tmp + 1);\n-            tmp\n-        });\n-        Self::Fake(DefIndex::from(id), krate)\n-    }\n-\n+crate enum ItemId {\n+    /// A \"normal\" item that uses a [`DefId`] for identification.\n+    DefId(DefId),\n+    /// Identifier that is used for auto traits.\n+    Auto { trait_: DefId, for_: DefId },\n+    /// Identifier that is used for blanket implementations.\n+    Blanket { trait_: DefId, for_: DefId },\n+    /// Identifier for primitive types.\n+    Primitive(CrateNum),\n+}\n+\n+impl ItemId {\n     #[inline]\n     crate fn is_local(self) -> bool {\n         match self {\n-            FakeDefId::Real(id) => id.is_local(),\n-            FakeDefId::Fake(_, krate) => krate == LOCAL_CRATE,\n+            ItemId::DefId(id) => id.is_local(),\n+            _ => false,\n         }\n     }\n \n     #[inline]\n     #[track_caller]\n     crate fn expect_real(self) -> rustc_hir::def_id::DefId {\n-        self.as_real().unwrap_or_else(|| panic!(\"FakeDefId::expect_real: `{:?}` isn't real\", self))\n+        self.as_real()\n+            .unwrap_or_else(|| panic!(\"ItemId::expect_real: `{:?}` isn't a real ItemId\", self))\n     }\n \n     #[inline]\n     crate fn as_real(self) -> Option<DefId> {\n         match self {\n-            FakeDefId::Real(id) => Some(id),\n-            FakeDefId::Fake(_, _) => None,\n+            ItemId::DefId(id) => Some(id),\n+            _ => None,\n         }\n     }\n \n     #[inline]\n     crate fn krate(self) -> CrateNum {\n         match self {\n-            FakeDefId::Real(id) => id.krate,\n-            FakeDefId::Fake(_, krate) => krate,\n+            ItemId::DefId(id) => id.krate,\n+            ItemId::Auto { trait_, .. } => trait_.krate,\n+            ItemId::Blanket { trait_, .. } => trait_.krate,\n+            ItemId::Primitive(krate) => krate,\n         }\n     }\n \n     #[inline]\n     crate fn index(self) -> Option<DefIndex> {\n         match self {\n-            FakeDefId::Real(id) => Some(id.index),\n-            FakeDefId::Fake(_, _) => None,\n+            ItemId::DefId(id) => Some(id.index),\n+            ItemId::Auto { trait_, .. } => Some(trait_.index),\n+            ItemId::Blanket { trait_, .. } => Some(trait_.index),\n+            ItemId::Primitive(..) => None,\n         }\n     }\n }\n \n-impl From<DefId> for FakeDefId {\n+impl From<DefId> for ItemId {\n     fn from(id: DefId) -> Self {\n-        Self::Real(id)\n+        Self::DefId(id)\n     }\n }\n \n@@ -338,14 +333,14 @@ crate struct Item {\n     /// Information about this item that is specific to what kind of item it is.\n     /// E.g., struct vs enum vs function.\n     crate kind: Box<ItemKind>,\n-    crate def_id: FakeDefId,\n+    crate def_id: ItemId,\n \n     crate cfg: Option<Arc<Cfg>>,\n }\n \n // `Item` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Item, 48);\n+rustc_data_structures::static_assert_size!(Item, 56);\n \n crate fn rustc_span(def_id: DefId, tcx: TyCtxt<'_>) -> Span {\n     Span::from_rustc_span(def_id.as_local().map_or_else(\n@@ -664,7 +659,8 @@ impl Item {\n     }\n \n     crate fn is_fake(&self) -> bool {\n-        matches!(self.def_id, FakeDefId::Fake(_, _))\n+        // FIXME: Find a better way to handle this\n+        !matches!(self.def_id, ItemId::DefId(..))\n     }\n }\n "}, {"sha": "0689d72e4e0cf7187f19059995b839bd5071f541", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -30,7 +30,7 @@ use std::mem;\n use std::rc::Rc;\n \n use crate::clean::inline::build_external_trait;\n-use crate::clean::{self, FakeDefId, TraitWithExtraInfo};\n+use crate::clean::{self, ItemId, TraitWithExtraInfo};\n use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::{self, Condition::*, ConditionalPass};\n@@ -78,7 +78,7 @@ crate struct DocContext<'tcx> {\n     /// This same cache is used throughout rustdoc, including in [`crate::html::render`].\n     crate cache: Cache,\n     /// Used by [`clean::inline`] to tell if an item has already been inlined.\n-    crate inlined: FxHashSet<FakeDefId>,\n+    crate inlined: FxHashSet<ItemId>,\n     /// Used by `calculate_doc_coverage`.\n     crate output_format: OutputFormat,\n }\n@@ -128,12 +128,13 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Like `hir().local_def_id_to_hir_id()`, but skips calling it on fake DefIds.\n     /// (This avoids a slice-index-out-of-bounds panic.)\n-    crate fn as_local_hir_id(tcx: TyCtxt<'_>, def_id: FakeDefId) -> Option<HirId> {\n+    crate fn as_local_hir_id(tcx: TyCtxt<'_>, def_id: ItemId) -> Option<HirId> {\n         match def_id {\n-            FakeDefId::Real(real_id) => {\n+            ItemId::DefId(real_id) => {\n                 real_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n             }\n-            FakeDefId::Fake(_, _) => None,\n+            // FIXME: Can this be `Some` for `Auto` or `Blanket`?\n+            _ => None,\n         }\n     }\n }"}, {"sha": "913566657a9aaec474f182142d8143b80531ed89", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n-use crate::clean::{self, FakeDefId, GetDefId};\n+use crate::clean::{self, GetDefId, ItemId};\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n@@ -122,7 +122,7 @@ crate struct Cache {\n     /// All intra-doc links resolved so far.\n     ///\n     /// Links are indexed by the DefId of the item they document.\n-    crate intra_doc_links: BTreeMap<FakeDefId, Vec<clean::ItemLink>>,\n+    crate intra_doc_links: BTreeMap<ItemId, Vec<clean::ItemLink>>,\n }\n \n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`."}, {"sha": "4465c9c95cc030780aa29b9594fa612b5042607a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -19,7 +19,7 @@ use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{\n-    self, utils::find_nearest_parent_module, ExternalCrate, FakeDefId, GetDefId, PrimitiveType,\n+    self, utils::find_nearest_parent_module, ExternalCrate, GetDefId, ItemId, PrimitiveType,\n };\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n@@ -1181,7 +1181,7 @@ impl clean::FnDecl {\n impl clean::Visibility {\n     crate fn print_with_space<'a, 'tcx: 'a>(\n         self,\n-        item_did: FakeDefId,\n+        item_did: ItemId,\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         let to_print = match self {"}, {"sha": "5beb75d2e9e00187489013dea2f538e56ed01084", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -53,7 +53,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n-use crate::clean::{self, FakeDefId, GetDefId, RenderedLink, SelfTy};\n+use crate::clean::{self, GetDefId, ItemId, RenderedLink, SelfTy};\n use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -987,7 +987,7 @@ fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n #[derive(Copy, Clone)]\n enum AssocItemLink<'a> {\n     Anchor(Option<&'a str>),\n-    GotoSource(FakeDefId, &'a FxHashSet<Symbol>),\n+    GotoSource(ItemId, &'a FxHashSet<Symbol>),\n }\n \n impl<'a> AssocItemLink<'a> {"}, {"sha": "d4549a78f215e58cab23be846f87e6ce746a00c0", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -15,7 +15,7 @@ use rustc_span::Pos;\n use rustdoc_json_types::*;\n \n use crate::clean::utils::print_const_expr;\n-use crate::clean::{self, FakeDefId};\n+use crate::clean::{self, ItemId};\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n use std::collections::HashSet;\n@@ -30,7 +30,7 @@ impl JsonRenderer<'_> {\n             .into_iter()\n             .flatten()\n             .filter_map(|clean::ItemLink { link, did, .. }| {\n-                did.map(|did| (link.clone(), from_def_id(did.into())))\n+                did.map(|did| (link.clone(), from_item_id(did.into())))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n@@ -47,7 +47,7 @@ impl JsonRenderer<'_> {\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n-            id: from_def_id(def_id),\n+            id: from_item_id(def_id),\n             crate_id: def_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n             span: self.convert_span(span),\n@@ -86,7 +86,7 @@ impl JsonRenderer<'_> {\n             Inherited => Visibility::Default,\n             Restricted(did) if did.index == CRATE_DEF_INDEX => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n-                parent: from_def_id(did.into()),\n+                parent: from_item_id(did.into()),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -170,12 +170,10 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n-crate fn from_def_id(did: FakeDefId) -> Id {\n+crate fn from_item_id(did: ItemId) -> Id {\n     match did {\n-        FakeDefId::Real(did) => Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index))),\n-        // We need to differentiate real and fake ids, because the indices might overlap for fake\n-        // and real DefId's, which would cause two different Id's treated as they were the same.\n-        FakeDefId::Fake(idx, krate) => Id(format!(\"F{}:{}\", krate.as_u32(), u32::from(idx))),\n+        ItemId::DefId(did) => Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index))),\n+        _ => todo!(\"how should json ItemId's be represented?\"),\n     }\n }\n \n@@ -375,7 +373,7 @@ impl FromWithTcx<clean::Type> for Type {\n         match ty {\n             ResolvedPath { path, did, is_generic: _ } => Type::ResolvedPath {\n                 name: path.whole_name(),\n-                id: from_def_id(did.into()),\n+                id: from_item_id(did.into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n@@ -387,7 +385,7 @@ impl FromWithTcx<clean::Type> for Type {\n \n                 Type::ResolvedPath {\n                     name: path.whole_name(),\n-                    id: from_def_id(id.into()),\n+                    id: from_item_id(id.into()),\n                     args: path\n                         .segments\n                         .last()\n@@ -568,13 +566,13 @@ impl FromWithTcx<clean::Import> for Import {\n             Simple(s) => Import {\n                 source: import.source.path.whole_name(),\n                 name: s.to_string(),\n-                id: import.source.did.map(FakeDefId::from).map(from_def_id),\n+                id: import.source.did.map(ItemId::from).map(from_item_id),\n                 glob: false,\n             },\n             Glob => Import {\n                 source: import.source.path.whole_name(),\n                 name: import.source.path.last_name().to_string(),\n-                id: import.source.did.map(FakeDefId::from).map(from_def_id),\n+                id: import.source.did.map(ItemId::from).map(from_item_id),\n                 glob: true,\n             },\n         }\n@@ -668,5 +666,5 @@ impl FromWithTcx<ItemType> for ItemKind {\n }\n \n fn ids(items: impl IntoIterator<Item = clean::Item>) -> Vec<Id> {\n-    items.into_iter().filter(|x| !x.is_stripped()).map(|i| from_def_id(i.def_id)).collect()\n+    items.into_iter().filter(|x| !x.is_stripped()).map(|i| from_item_id(i.def_id)).collect()\n }"}, {"sha": "c7d910093ce4f00d611ebab450d156be98efe647", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -25,7 +25,7 @@ use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n use crate::html::render::cache::ExternalLocation;\n-use crate::json::conversions::{from_def_id, IntoWithTcx};\n+use crate::json::conversions::{from_item_id, IntoWithTcx};\n \n #[derive(Clone)]\n crate struct JsonRenderer<'tcx> {\n@@ -53,7 +53,7 @@ impl JsonRenderer<'tcx> {\n                     .map(|i| {\n                         let item = &i.impl_item;\n                         self.item(item.clone()).unwrap();\n-                        from_def_id(item.def_id)\n+                        from_item_id(item.def_id)\n                     })\n                     .collect()\n             })\n@@ -71,7 +71,7 @@ impl JsonRenderer<'tcx> {\n                         let item = &i.impl_item;\n                         if item.def_id.is_local() {\n                             self.item(item.clone()).unwrap();\n-                            Some(from_def_id(item.def_id))\n+                            Some(from_item_id(item.def_id))\n                         } else {\n                             None\n                         }\n@@ -91,9 +91,9 @@ impl JsonRenderer<'tcx> {\n                     let trait_item = &trait_item.trait_;\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n                     Some((\n-                        from_def_id(id.into()),\n+                        from_item_id(id.into()),\n                         types::Item {\n-                            id: from_def_id(id.into()),\n+                            id: from_item_id(id.into()),\n                             crate_id: id.krate.as_u32(),\n                             name: self\n                                 .cache\n@@ -170,7 +170,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n                 e.impls = self.get_impls(id.expect_real())\n             }\n-            let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());\n+            let removed = self.index.borrow_mut().insert(from_item_id(id), new_item.clone());\n \n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n             // to make sure the items are unique. The main place this happens is when an item, is\n@@ -207,7 +207,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(self.cache.external_paths.clone().into_iter())\n                 .map(|(k, (path, kind))| {\n                     (\n-                        from_def_id(k.into()),\n+                        from_item_id(k.into()),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path,"}, {"sha": "85b883f118819c5db3b585780940e3b6c8f6fa5f", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n \n #[derive(Default)]\n struct ItemCollector {\n-    items: FxHashSet<FakeDefId>,\n+    items: FxHashSet<ItemId>,\n }\n \n impl ItemCollector {\n@@ -168,7 +168,7 @@ impl DocFolder for ItemCollector {\n \n struct BadImplStripper {\n     prims: FxHashSet<PrimitiveType>,\n-    items: FxHashSet<FakeDefId>,\n+    items: FxHashSet<ItemId>,\n }\n \n impl BadImplStripper {\n@@ -185,7 +185,7 @@ impl BadImplStripper {\n         }\n     }\n \n-    fn keep_impl_with_def_id(&self, did: FakeDefId) -> bool {\n+    fn keep_impl_with_def_id(&self, did: ItemId) -> bool {\n         self.items.contains(&did)\n     }\n }"}, {"sha": "0aedbda35e9a8ce26512c8d93056108d811ab4c9", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -2,7 +2,7 @@ use rustc_span::symbol::sym;\n use std::mem;\n \n use crate::clean;\n-use crate::clean::{FakeDefIdSet, Item, NestedAttributesExt};\n+use crate::clean::{Item, ItemIdSet, NestedAttributesExt};\n use crate::core::DocContext;\n use crate::fold::{strip_item, DocFolder};\n use crate::passes::{ImplStripper, Pass};\n@@ -15,7 +15,7 @@ crate const STRIP_HIDDEN: Pass = Pass {\n \n /// Strip items marked `#[doc(hidden)]`\n crate fn strip_hidden(krate: clean::Crate, _: &mut DocContext<'_>) -> clean::Crate {\n-    let mut retained = FakeDefIdSet::default();\n+    let mut retained = ItemIdSet::default();\n \n     // strip all #[doc(hidden)] items\n     let krate = {\n@@ -29,7 +29,7 @@ crate fn strip_hidden(krate: clean::Crate, _: &mut DocContext<'_>) -> clean::Cra\n }\n \n struct Stripper<'a> {\n-    retained: &'a mut FakeDefIdSet,\n+    retained: &'a mut ItemIdSet,\n     update_retained: bool,\n }\n "}, {"sha": "dfdba2a4b36664712b11e9b9815e1b00c3c02f6f", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -1,4 +1,4 @@\n-use crate::clean::{self, FakeDefIdSet};\n+use crate::clean::{self, ItemIdSet};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::{ImplStripper, ImportStripper, Pass, Stripper};\n@@ -14,7 +14,7 @@ crate const STRIP_PRIVATE: Pass = Pass {\n /// crate, specified by the `xcrate` flag.\n crate fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n-    let mut retained = FakeDefIdSet::default();\n+    let mut retained = ItemIdSet::default();\n \n     // strip all private items\n     {"}, {"sha": "d7717001cebf5e2d1940fffd3b6dd21f2e156c8e", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e1cdbaf9230cc36b18f9ab41079449c5cac375/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=43e1cdbaf9230cc36b18f9ab41079449c5cac375", "patch": "@@ -2,11 +2,11 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::privacy::AccessLevels;\n use std::mem;\n \n-use crate::clean::{self, FakeDefIdSet, GetDefId, Item};\n+use crate::clean::{self, GetDefId, Item, ItemIdSet};\n use crate::fold::{strip_item, DocFolder};\n \n crate struct Stripper<'a> {\n-    crate retained: &'a mut FakeDefIdSet,\n+    crate retained: &'a mut ItemIdSet,\n     crate access_levels: &'a AccessLevels<DefId>,\n     crate update_retained: bool,\n }\n@@ -116,7 +116,7 @@ impl<'a> DocFolder for Stripper<'a> {\n \n /// This stripper discards all impls which reference stripped items\n crate struct ImplStripper<'a> {\n-    crate retained: &'a FakeDefIdSet,\n+    crate retained: &'a ItemIdSet,\n }\n \n impl<'a> DocFolder for ImplStripper<'a> {"}]}