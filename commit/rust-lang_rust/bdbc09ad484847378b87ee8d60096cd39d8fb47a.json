{"sha": "bdbc09ad484847378b87ee8d60096cd39d8fb47a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYmMwOWFkNDg0ODQ3Mzc4Yjg3ZWU4ZDYwMDk2Y2QzOWQ4ZmI0N2E=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-16T06:03:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-19T04:07:58Z"}, "message": "libs: stabilize most numerics after RFC changes\n\nThis commit adds stability markers for the APIs that have recently been\naligned with [numerics\nreform](https://github.com/rust-lang/rfcs/pull/369). For APIs that were\nchanged as part of that reform, `#[unstable]` is used to reflect the\nrecency, but the APIs will become `#[stable]` in a follow-up pass.\n\nIn addition, a few aspects of the APIs not explicitly covered by the RFC\nare marked here -- in particular, constants for floats.\n\nThis commit does not mark the `uint` or `int` modules as `#[stable]`,\ngiven the ongoing debate out the names and roles of these types.\n\nDue to some deprecation (see the RFC for details), this is a:\n\n[breaking-change]", "tree": {"sha": "b56e9cd604bd377d24ac9ec3c307359f8b987ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b56e9cd604bd377d24ac9ec3c307359f8b987ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdbc09ad484847378b87ee8d60096cd39d8fb47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbc09ad484847378b87ee8d60096cd39d8fb47a", "html_url": "https://github.com/rust-lang/rust/commit/bdbc09ad484847378b87ee8d60096cd39d8fb47a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdbc09ad484847378b87ee8d60096cd39d8fb47a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "html_url": "https://github.com/rust-lang/rust/commit/e09d98603e608c9e47d4c89f7b4dca87a4b56da3"}], "stats": {"total": 156, "additions": 122, "deletions": 34}, "files": [{"sha": "8092aa67b8fa45b5ce2cd0a8fe061fb809cf2e16", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -14,44 +14,57 @@\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n #![allow(overflowing_literals)]\n \n+#![stable]\n+\n use intrinsics;\n use mem;\n use num::{Float, FPNormal, FPCategory, FPZero, FPSubnormal, FPInfinite, FPNaN};\n use num::from_str_radix;\n use option::Option;\n \n+#[stable]\n pub const RADIX: uint = 2u;\n \n+#[stable]\n pub const MANTISSA_DIGITS: uint = 24u;\n+#[stable]\n pub const DIGITS: uint = 6u;\n \n+#[stable]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n /// Smallest finite f32 value\n+#[stable]\n pub const MIN_VALUE: f32 = -3.40282347e+38_f32;\n /// Smallest positive, normalized f32 value\n+#[stable]\n pub const MIN_POS_VALUE: f32 = 1.17549435e-38_f32;\n /// Largest finite f32 value\n+#[stable]\n pub const MAX_VALUE: f32 = 3.40282347e+38_f32;\n \n+#[stable]\n pub const MIN_EXP: int = -125;\n+#[stable]\n pub const MAX_EXP: int = 128;\n \n+#[stable]\n pub const MIN_10_EXP: int = -37;\n+#[stable]\n pub const MAX_10_EXP: int = 38;\n \n+#[stable]\n pub const NAN: f32 = 0.0_f32/0.0_f32;\n+#[stable]\n pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n+#[stable]\n pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n /// Various useful constants.\n+#[unstable = \"naming scheme needs to be revisited\"]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    // FIXME(#5527): These constants should be deprecated once associated\n-    // constants are implemented in favour of referencing the respective members\n-    // of `Float`.\n-\n     /// Archimedes' constant\n     pub const PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n@@ -104,6 +117,7 @@ pub mod consts {\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n+#[unstable = \"trait is unstable\"]\n impl Float for f32 {\n     #[inline]\n     fn nan() -> f32 { NAN }"}, {"sha": "3ecedac732d8b70024988e0f37d9c7ed5ae92211", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -14,6 +14,8 @@\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n #![allow(overflowing_literals)]\n \n+#![stable]\n+\n use intrinsics;\n use mem;\n use num::{Float, FPNormal, FPCategory, FPZero, FPSubnormal, FPInfinite, FPNaN};\n@@ -24,33 +26,46 @@ use option::Option;\n // constants are implemented in favour of referencing the respective\n // members of `Bounded` and `Float`.\n \n+#[stable]\n pub const RADIX: uint = 2u;\n \n+#[stable]\n pub const MANTISSA_DIGITS: uint = 53u;\n+#[stable]\n pub const DIGITS: uint = 15u;\n \n+#[stable]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n /// Smallest finite f64 value\n+#[stable]\n pub const MIN_VALUE: f64 = -1.7976931348623157e+308_f64;\n /// Smallest positive, normalized f64 value\n+#[stable]\n pub const MIN_POS_VALUE: f64 = 2.2250738585072014e-308_f64;\n /// Largest finite f64 value\n+#[stable]\n pub const MAX_VALUE: f64 = 1.7976931348623157e+308_f64;\n \n+#[stable]\n pub const MIN_EXP: int = -1021;\n+#[stable]\n pub const MAX_EXP: int = 1024;\n \n+#[stable]\n pub const MIN_10_EXP: int = -307;\n+#[stable]\n pub const MAX_10_EXP: int = 308;\n \n+#[stable]\n pub const NAN: f64 = 0.0_f64/0.0_f64;\n-\n+#[stable]\n pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n-\n+#[stable]\n pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n /// Various useful constants.\n+#[unstable = \"naming scheme needs to be revisited\"]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n@@ -110,6 +125,7 @@ pub mod consts {\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n+#[unstable = \"trait is unstable\"]\n impl Float for f64 {\n     #[inline]\n     fn nan() -> f64 { NAN }"}, {"sha": "00c8dc5b68d5f0542f1dfa2d2696456eb8b10895", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i16\")]\n \n int_module!(i16, 16)\n-"}, {"sha": "1879ce1ac86fb257e0b0d593346c8852bf12bb21", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i32\")]\n \n int_module!(i32, 32)\n-"}, {"sha": "5832b2fdc0317ed81686c6826c9ca7f3760e46b7", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i64\")]\n \n int_module!(i64, 64)\n-"}, {"sha": "65cf5d2b1c14149bce61978b2939b7a8d0845056", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i8\")]\n \n int_module!(i8, 8)\n-"}, {"sha": "07f2e154c768e6cc03bebb7cf5013a0a045af6a7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -12,6 +12,7 @@\n \n //! Numeric traits and functions for the built-in numeric types.\n \n+#![stable]\n #![allow(missing_docs)]\n \n pub use self::FPCategory::*;\n@@ -34,6 +35,7 @@ use str::{FromStr, from_str, StrPrelude};\n \n /// Simultaneous division and remainder\n #[inline]\n+#[deprecated = \"use division and remainder directly\"]\n pub fn div_rem<T: Div<T, T> + Rem<T, T>>(x: T, y: T) -> (T, T) {\n     (x / y, x % y)\n }\n@@ -46,6 +48,7 @@ pub fn pow<T: Int>(base: T, exp: uint) -> T {\n }\n \n /// A built-in signed or unsigned integer.\n+#[unstable = \"recently settled as part of numerics reform\"]\n pub trait Int\n     : Copy + Clone\n     + NumCast\n@@ -384,6 +387,7 @@ macro_rules! uint_impl {\n      $add_with_overflow:path,\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n+        #[unstable = \"trait is unstable\"]\n         impl Int for $T {\n             #[inline]\n             fn zero() -> $T { 0 }\n@@ -514,6 +518,7 @@ macro_rules! int_impl {\n      $add_with_overflow:path,\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n+        #[unstable = \"trait is unstable\"]\n         impl Int for $T {\n             #[inline]\n             fn zero() -> $T { 0 }\n@@ -606,6 +611,7 @@ int_impl!(int = i64, u64, 64,\n     intrinsics::i64_mul_with_overflow)\n \n /// A built-in two's complement integer.\n+#[unstable = \"recently settled as part of numerics reform\"]\n pub trait SignedInt\n     : Int\n     + Neg<Self>\n@@ -663,6 +669,7 @@ signed_int_impl!(i64)\n signed_int_impl!(int)\n \n /// A built-in unsigned integer.\n+#[unstable = \"recently settled as part of numerics reform\"]\n pub trait UnsignedInt: Int {\n     /// Returns `true` iff `self == 2^k` for some `k`.\n     fn is_power_of_two(self) -> bool {\n@@ -697,13 +704,23 @@ pub trait UnsignedInt: Int {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl UnsignedInt for uint {}\n+\n+#[unstable = \"trait is unstable\"]\n impl UnsignedInt for u8 {}\n+\n+#[unstable = \"trait is unstable\"]\n impl UnsignedInt for u16 {}\n+\n+#[unstable = \"trait is unstable\"]\n impl UnsignedInt for u32 {}\n+\n+#[unstable = \"trait is unstable\"]\n impl UnsignedInt for u64 {}\n \n /// A generic trait for converting a value to a number.\n+#[experimental = \"trait is likely to be removed\"]\n pub trait ToPrimitive {\n     /// Converts the value of `self` to an `int`.\n     #[inline]\n@@ -968,6 +985,7 @@ impl_to_primitive_float!(f32)\n impl_to_primitive_float!(f64)\n \n /// A generic trait for converting a number to a value.\n+#[experimental = \"trait is likely to be removed\"]\n pub trait FromPrimitive {\n     /// Convert an `int` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n@@ -1049,61 +1067,73 @@ pub trait FromPrimitive {\n }\n \n /// A utility function that just calls `FromPrimitive::from_int`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_int<A: FromPrimitive>(n: int) -> Option<A> {\n     FromPrimitive::from_int(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i8`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_i8<A: FromPrimitive>(n: i8) -> Option<A> {\n     FromPrimitive::from_i8(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i16`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_i16<A: FromPrimitive>(n: i16) -> Option<A> {\n     FromPrimitive::from_i16(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i32`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_i32<A: FromPrimitive>(n: i32) -> Option<A> {\n     FromPrimitive::from_i32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i64`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_i64<A: FromPrimitive>(n: i64) -> Option<A> {\n     FromPrimitive::from_i64(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_uint`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_uint<A: FromPrimitive>(n: uint) -> Option<A> {\n     FromPrimitive::from_uint(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u8`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_u8<A: FromPrimitive>(n: u8) -> Option<A> {\n     FromPrimitive::from_u8(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u16`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_u16<A: FromPrimitive>(n: u16) -> Option<A> {\n     FromPrimitive::from_u16(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u32`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_u32<A: FromPrimitive>(n: u32) -> Option<A> {\n     FromPrimitive::from_u32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u64`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_u64<A: FromPrimitive>(n: u64) -> Option<A> {\n     FromPrimitive::from_u64(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_f32`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_f32<A: FromPrimitive>(n: f32) -> Option<A> {\n     FromPrimitive::from_f32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_f64`.\n+#[experimental = \"likely to be removed\"]\n pub fn from_f64<A: FromPrimitive>(n: f64) -> Option<A> {\n     FromPrimitive::from_f64(n)\n }\n@@ -1154,11 +1184,13 @@ impl_from_primitive!(f64, to_f64)\n /// ```\n ///\n #[inline]\n+#[experimental = \"likely to be removed\"]\n pub fn cast<T: NumCast,U: NumCast>(n: T) -> Option<U> {\n     NumCast::from(n)\n }\n \n /// An interface for casting between machine scalars.\n+#[experimental = \"trait is likely to be removed\"]\n pub trait NumCast: ToPrimitive {\n     /// Creates a number from another value that can be converted into a primitive via the\n     /// `ToPrimitive` trait.\n@@ -1193,6 +1225,7 @@ impl_num_cast!(f64,   to_f64)\n \n /// Used for representing the classification of floating point numbers\n #[deriving(PartialEq, Show)]\n+#[unstable = \"may be renamed\"]\n pub enum FPCategory {\n     /// \"Not a Number\", often obtained by dividing by zero\n     FPNaN,\n@@ -1212,6 +1245,7 @@ pub enum FPCategory {\n //\n // FIXME(#8888): Several of these functions have a parameter named\n //               `unused_self`. Removing it requires #8888 to be fixed.\n+#[unstable = \"recently settled as part of numerics reform\"]\n pub trait Float\n     : Copy + Clone\n     + NumCast\n@@ -1329,38 +1363,51 @@ pub trait Float\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(self) -> Self;\n \n-    // FIXME (#5527): These should be associated constants\n-\n     /// Archimedes' constant.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn pi() -> Self;\n     /// 2.0 * pi.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn two_pi() -> Self;\n     /// pi / 2.0.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_pi_2() -> Self;\n     /// pi / 3.0.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_pi_3() -> Self;\n     /// pi / 4.0.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_pi_4() -> Self;\n     /// pi / 6.0.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_pi_6() -> Self;\n     /// pi / 8.0.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_pi_8() -> Self;\n     /// 1.0 / pi.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_1_pi() -> Self;\n     /// 2.0 / pi.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_2_pi() -> Self;\n     /// 2.0 / sqrt(pi).\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn frac_2_sqrtpi() -> Self;\n \n     /// Euler's number.\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn e() -> Self;\n     /// log2(e).\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn log2_e() -> Self;\n     /// log10(e).\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn log10_e() -> Self;\n     /// ln(2.0).\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn ln_2() -> Self;\n     /// ln(10.0).\n+    #[deprecated = \"use f32::consts or f64::consts instead\"]\n     fn ln_10() -> Self;\n \n     /// Returns `e^(self)`, (the exponential function)."}, {"sha": "6971de279faefaf86c65e44ff92e89c3e811e48a", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u16\")]\n \n uint_module!(u16, i16, 16)"}, {"sha": "26affc3f7904c480d95b7cc014fed30d582302d2", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u32\")]\n \n uint_module!(u32, i32, 32)\n-"}, {"sha": "3b50d03300174f358f85359c587c15cd285b5a7c", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u64\")]\n \n uint_module!(u64, i64, 64)\n-"}, {"sha": "ce7d767aee499ada42b40ff20109ae8d4cb95ff2", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u8\")]\n \n uint_module!(u8, i8, 8)\n-"}, {"sha": "9aac857bb6501572bbb974448115a90d80ae8835", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-#![experimental]\n+#![stable]\n #![allow(missing_docs)]\n #![allow(unsigned_negation)]\n #![doc(primitive = \"f32\")]\n@@ -68,6 +68,7 @@ mod cmath {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl FloatMath for f32 {\n     /// Constructs a floating point number by multiplying `x` by 2 raised to the\n     /// power of `exp`\n@@ -248,6 +249,7 @@ impl FloatMath for f32 {\n ///\n /// * num - The float value\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_string(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n@@ -260,6 +262,7 @@ pub fn to_string(num: f32) -> String {\n ///\n /// * num - The float value\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 16u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n@@ -274,6 +277,7 @@ pub fn to_str_hex(num: f32) -> String {\n /// * num - The float value\n /// * radix - The base to use\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true,\n                            strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false)\n@@ -287,6 +291,7 @@ pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpNone, false);\n@@ -301,6 +306,7 @@ pub fn to_str_exact(num: f32, dig: uint) -> String {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpNone, false);\n@@ -316,6 +322,7 @@ pub fn to_str_digits(num: f32, dig: uint) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n@@ -331,6 +338,7 @@ pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);"}, {"sha": "29ccfe512b9d0c4dfd2aec748c9eb73d1912612a", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n-#![experimental]\n+#![stable]\n #![allow(missing_docs)]\n #![doc(primitive = \"f64\")]\n \n@@ -76,6 +76,7 @@ mod cmath {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl FloatMath for f64 {\n     /// Constructs a floating point number by multiplying `x` by 2 raised to the\n     /// power of `exp`\n@@ -256,6 +257,7 @@ impl FloatMath for f64 {\n ///\n /// * num - The float value\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_string(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n@@ -268,6 +270,7 @@ pub fn to_string(num: f64) -> String {\n ///\n /// * num - The float value\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 16u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n@@ -282,6 +285,7 @@ pub fn to_str_hex(num: f64) -> String {\n /// * num - The float value\n /// * radix - The base to use\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true,\n                            strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false)\n@@ -295,6 +299,7 @@ pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpNone, false);\n@@ -309,6 +314,7 @@ pub fn to_str_exact(num: f64, dig: uint) -> String {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpNone, false);\n@@ -324,6 +330,7 @@ pub fn to_str_digits(num: f64, dig: uint) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n@@ -339,6 +346,7 @@ pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n+#[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);"}, {"sha": "333d1d7df0b5c25163441f752a2636bd39c2b354", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i16\")]\n \n pub use core::i16::{BITS, BYTES, MIN, MAX};"}, {"sha": "44b5397bf74e59a0402d4b519333f1627be4c855", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i32\")]\n \n pub use core::i32::{BITS, BYTES, MIN, MAX};"}, {"sha": "de6fa0d3ef841b4efd119c7032aeef5ad1ccdd66", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i64\")]\n \n pub use core::i64::{BITS, BYTES, MIN, MAX};"}, {"sha": "3b9fbcb768beec29c3d5706730c495ec4d92e835", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"i8\")]\n \n pub use core::i8::{BITS, BYTES, MIN, MAX};"}, {"sha": "a15e71b4a2a88305456c5d599083a599ecacc6ca", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -13,7 +13,7 @@\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n //! u32, u64, uint, i8, i16, i32, i64, int, f32, f64}`.\n \n-#![experimental]\n+#![stable]\n #![allow(missing_docs)]\n \n #[cfg(test)] use cmp::PartialEq;\n@@ -33,9 +33,11 @@ pub use core::num::{FromStrRadix, from_str_radix};\n pub use core::num::{FPCategory, FPNaN, FPInfinite, FPZero, FPSubnormal};\n pub use core::num::{FPNormal, Float};\n \n+#[experimental = \"may be removed or relocated\"]\n pub mod strconv;\n \n /// Mathematical operations on primitive floating point numbers.\n+#[unstable = \"may be altered to inline the Float trait\"]\n pub trait FloatMath: Float {\n     /// Constructs a floating point number created by multiplying `x` by 2\n     /// raised to the power of `exp`."}, {"sha": "a83a66c23a526a851091b9c2406cb08856ed29dd", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u16\")]\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};"}, {"sha": "7271203b23b6c505e90cd6cb85eb21a38dd6f52b", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u32\")]\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};"}, {"sha": "25de2f3b255659cdebdbda824a888108f67622e6", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u64\")]\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};"}, {"sha": "22dedeecf3b109101c9c575cc78c1b978a4c710e", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbc09ad484847378b87ee8d60096cd39d8fb47a/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=bdbc09ad484847378b87ee8d60096cd39d8fb47a", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n-#![unstable]\n+#![stable]\n #![doc(primitive = \"u8\")]\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};"}]}