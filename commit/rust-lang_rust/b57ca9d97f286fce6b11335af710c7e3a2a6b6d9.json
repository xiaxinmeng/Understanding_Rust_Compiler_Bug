{"sha": "b57ca9d97f286fce6b11335af710c7e3a2a6b6d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1N2NhOWQ5N2YyODZmY2U2YjExMzM1YWY3MTBjN2UzYTJhNmI2ZDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-27T01:13:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-27T01:13:51Z"}, "message": "change from `dirty_bit_vec` to `clean_bit_vec`\n\nOtherwise the vector is initially out of sync", "tree": {"sha": "14b114425c63ab6f23a41e698a9d87519fde1981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b114425c63ab6f23a41e698a9d87519fde1981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaa9JPCRBK7hj4Ov3rIwAAdHIIAI1dZFm9r2hk9ox+ydakbJKf\nRBZKv+KpxUdH3izVMVwoy8F581BhuR85ZjCUTKwWMf3D3o5TLE0ahY2UNzg+bVib\nricbyV4KGB3OQ+JM0L6PyQ8fLv8ZPGdBbDcajMWevz6Mh2MJ+hdQBtiO4MeWSI0S\niPcKUZcF+RhpbibZqYSZc2k/oBOrLpnoQ2EUOS3MP0nGabRUsM9zHDsROAjwwVVH\nisN2g6+Ct7asoS8KuoDKl4j6BmZX0G0gnczYQC0PCk3UC6W6IPr0WoWLqJTcS7LY\nnoDwkgVbMkVafA/VCU98e/YUBlgY2KXMazjB+4IXiaVfepEhWD1YgHOncxrXFk0=\n=N1fD\n-----END PGP SIGNATURE-----\n", "payload": "tree 14b114425c63ab6f23a41e698a9d87519fde1981\nparent 44b666816b7b027b358843080f11232c53a8b929\nauthor Niko Matsakis <niko@alum.mit.edu> 1517015631 -0500\ncommitter GitHub <noreply@github.com> 1517015631 -0500\n\nchange from `dirty_bit_vec` to `clean_bit_vec`\n\nOtherwise the vector is initially out of sync"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9", "html_url": "https://github.com/rust-lang/rust/commit/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44b666816b7b027b358843080f11232c53a8b929", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b666816b7b027b358843080f11232c53a8b929", "html_url": "https://github.com/rust-lang/rust/commit/44b666816b7b027b358843080f11232c53a8b929"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "b8258c76676628e6a1b946e60ffb8209a130e251", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b57ca9d97f286fce6b11335af710c7e3a2a6b6d9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=b57ca9d97f286fce6b11335af710c7e3a2a6b6d9", "patch": "@@ -467,12 +467,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mut inferred_values = self.liveness_constraints.clone();\n \n         let dependency_map = self.build_dependency_map();\n+      \n+        // Constraints that may need to be repropagated (initially all):\n         let mut dirty_list: Vec<_> = (0..self.constraints.len()).collect();\n-        let mut dirty_bit_vec = BitVector::new(dirty_list.len());\n+      \n+        // Set to 0 for each constraint that is on the dirty list:\n+        let mut clean_bit_vec = BitVector::new(dirty_list.len());\n \n         debug!(\"propagate_constraints: --------------------\");\n         while let Some(constraint_idx) = dirty_list.pop() {\n-            dirty_bit_vec.remove(constraint_idx);\n+            clean_bit_vec.insert(constraint_idx);\n \n             let constraint = &self.constraints[constraint_idx];\n             debug!(\"propagate_constraints: constraint={:?}\", constraint);\n@@ -495,7 +499,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"propagate_constraints:   sup={:?}\", constraint.sup);\n \n                 for &dep_idx in dependency_map.get(&constraint.sup).unwrap_or(&vec![]) {\n-                    if dirty_bit_vec.insert(dep_idx) {\n+                    if clean_bit_vec.remove(dep_idx) {\n                         dirty_list.push(dep_idx);\n                     }\n                 }"}]}