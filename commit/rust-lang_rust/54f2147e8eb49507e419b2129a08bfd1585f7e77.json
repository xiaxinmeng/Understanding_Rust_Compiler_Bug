{"sha": "54f2147e8eb49507e419b2129a08bfd1585f7e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjIxNDdlOGViNDk1MDdlNDE5YjIxMjlhMDhiZmQxNTg1ZjdlNzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-13T22:19:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-14T18:11:07Z"}, "message": "Get unit tests for rusti working\n\n* They didn't work before, because the location of the tests caused the\n  'sysroot' option to crate lookup to be wrong for finding the correct stage's\n  core/std libraries. This moves the compiled tests from the $host/test\n  directory into a $host/$stage/test directory. This means that the sysroot will\n  be correct and the core/std libraries can actually be found\n* The LLVM bindings apparently aren't threadsafe, so we can't run multiple tests\n  in parallel.", "tree": {"sha": "44922443c8c7e3e3ce83e7a525f3fe869f2e04c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44922443c8c7e3e3ce83e7a525f3fe869f2e04c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f2147e8eb49507e419b2129a08bfd1585f7e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f2147e8eb49507e419b2129a08bfd1585f7e77", "html_url": "https://github.com/rust-lang/rust/commit/54f2147e8eb49507e419b2129a08bfd1585f7e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f2147e8eb49507e419b2129a08bfd1585f7e77/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767e3ae86cba26437a60009d79ac2a295b41768e", "url": "https://api.github.com/repos/rust-lang/rust/commits/767e3ae86cba26437a60009d79ac2a295b41768e", "html_url": "https://github.com/rust-lang/rust/commit/767e3ae86cba26437a60009d79ac2a295b41768e"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "e4ca72737db9ec498bfeb5ec77cd79893022d9b9", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54f2147e8eb49507e419b2129a08bfd1585f7e77/configure", "raw_url": "https://github.com/rust-lang/rust/raw/54f2147e8eb49507e419b2129a08bfd1585f7e77/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=54f2147e8eb49507e419b2129a08bfd1585f7e77", "patch": "@@ -695,6 +695,9 @@ do\n             # host lib dir\n             make_dir $h/stage$i/$CFG_LIBDIR\n \n+            # host test dir\n+            make_dir $h/stage$i/test\n+\n             # target bin dir\n             make_dir $h/stage$i/$CFG_LIBDIR/rustc/$t/bin\n "}, {"sha": "5cdd900d65f9c46781b925d39eb1b674d9e7b741", "filename": "mk/tests.mk", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/54f2147e8eb49507e419b2129a08bfd1585f7e77/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/54f2147e8eb49507e419b2129a08bfd1585f7e77/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=54f2147e8eb49507e419b2129a08bfd1585f7e77", "patch": "@@ -289,50 +289,50 @@ else\n STDTESTDEP_$(1)_$(2)_$(3) =\n endif\n \n-$(3)/test/coretest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/coretest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/stdtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/stdtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/syntaxtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n+$(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM_$(2)) \\\n                 $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustpkgtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustpkgtest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustitest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustitest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rusttest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rusttest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustdoctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n+$(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n@@ -349,7 +349,7 @@ define DEF_TEST_CRATE_RULES\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n@@ -360,7 +360,7 @@ define DEF_TEST_CRATE_RULES_arm-linux-androideabi\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: $$< via adb)\n \t@$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n \t@$(CFG_ADB) shell LD_LIBRARY_PATH=$(CFG_ADB_TEST_DIR) \\\n@@ -385,7 +385,7 @@ define DEF_TEST_CRATE_RULES_null\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: skipped $$< )\n \t@touch $$@\n endef"}, {"sha": "65cd50e4b7f501a46272c2e34144615655462f0f", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/54f2147e8eb49507e419b2129a08bfd1585f7e77/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/54f2147e8eb49507e419b2129a08bfd1585f7e77/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=54f2147e8eb49507e419b2129a08bfd1585f7e77", "patch": "@@ -35,7 +35,7 @@ use std::rl;\n  * A structure shared across REPL instances for storing history\n  * such as statements and view items. I wish the AST was sendable.\n  */\n-struct Repl {\n+pub struct Repl {\n     prompt: ~str,\n     binary: ~str,\n     running: bool,\n@@ -328,8 +328,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n \n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n-fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n-            use_rl: bool)\n+pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n+                use_rl: bool)\n     -> Option<Repl> {\n     if line.starts_with(\":\") {\n         let full = line.substr(1, line.len() - 1);\n@@ -421,3 +421,50 @@ pub fn main() {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    fn repl() -> Repl {\n+        Repl {\n+            prompt: ~\"rusti> \",\n+            binary: ~\"rusti\",\n+            running: true,\n+            view_items: ~\"\",\n+            lib_search_paths: ~[],\n+            stmts: ~\"\"\n+        }\n+    }\n+\n+    fn super_simple() {\n+        let mut r = repl();\n+        let result = run_line(&mut r, io::stdin(), io::stdout(), ~\"\", false);\n+        result.expect(\"empty input shouldn't fail in rusti\");\n+    }\n+\n+    fn use_does_not_crash() {\n+        let mut r = repl();\n+        let result = run_line(&mut r, io::stdin(), io::stdout(),\n+                              ~\"use core::util::with;\", false);\n+        r = result.expect(\"use statements should't fail in rusti\");\n+        let result = run_line(&mut r, io::stdin(), io::stdout(),\n+                              ~\"\", false);\n+        result.expect(\"something should be able to happen after a use statement\");\n+    }\n+\n+    #[test]\n+    fn run_all() {\n+        // By default, unit tests are run in parallel. Rusti, on the other hand,\n+        // does not enjoy doing this. I suspect that it is because the LLVM\n+        // bindings are not thread-safe (when running parallel tests, some tests\n+        // were triggering assertions in LLVM (or segfaults). Hence, this\n+        // function exists to run everything serially (sadface).\n+        //\n+        // To get some interesting output, run with RUST_LOG=rusti::tests\n+\n+        debug!(\"super_simple\");       super_simple();\n+        debug!(\"use_does_not_crash\"); use_does_not_crash();\n+\n+    }\n+}"}]}