{"sha": "144227dae949fb98896a2ba077d8fe7f36c3238e", "node_id": "C_kwDOAAsO6NoAKDE0NDIyN2RhZTk0OWZiOTg4OTZhMmJhMDc3ZDhmZTdmMzZjMzIzOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T13:59:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T13:59:05Z"}, "message": "Auto merge of #99232 - lcnr:no-bound-vars-check, r=jackh726\n\n`replace_bound_vars` fast path: check predicates, don't check consts\n\nsplit out from #98900\n\n`ty::Const` doesn't have precomputed type flags, so\ncomputing `has_vars_bound_at_or_above` for constants\nrequires us to visit the const and its contained types\nand constants. A noop fold should be pretty much equally as\nfast so removing it prevents us from walking the constant twice\nin case it contains bound vars.\n\nr? `@jackh726`", "tree": {"sha": "6e95287aa9fc1ea8fbf1b787f86b768e296932c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e95287aa9fc1ea8fbf1b787f86b768e296932c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144227dae949fb98896a2ba077d8fe7f36c3238e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144227dae949fb98896a2ba077d8fe7f36c3238e", "html_url": "https://github.com/rust-lang/rust/commit/144227dae949fb98896a2ba077d8fe7f36c3238e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144227dae949fb98896a2ba077d8fe7f36c3238e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed0bf9f2bd63933785fb8a380c177d2d70e88ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed0bf9f2bd63933785fb8a380c177d2d70e88ec", "html_url": "https://github.com/rust-lang/rust/commit/9ed0bf9f2bd63933785fb8a380c177d2d70e88ec"}, {"sha": "864d2f35280aadeaf63f6e7efa483e173ebd62f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/864d2f35280aadeaf63f6e7efa483e173ebd62f6", "html_url": "https://github.com/rust-lang/rust/commit/864d2f35280aadeaf63f6e7efa483e173ebd62f6"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "878f31af00f07e867493bd2748a10243b9bb425a", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/144227dae949fb98896a2ba077d8fe7f36c3238e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144227dae949fb98896a2ba077d8fe7f36c3238e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=144227dae949fb98896a2ba077d8fe7f36c3238e", "patch": "@@ -445,10 +445,13 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n                 let ct = (self.fld_c)(bound_const, ct.ty());\n                 ty::fold::shift_vars(self.tcx, ct, self.current_index.as_u32())\n             }\n-            _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),\n-            _ => ct,\n+            _ => ct.super_fold_with(self),\n         }\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if p.has_vars_bound_at_or_above(self.current_index) { p.super_fold_with(self) } else { p }\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "9de4d3a646cb306e2264b6e4179a75336b6600df", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/144227dae949fb98896a2ba077d8fe7f36c3238e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144227dae949fb98896a2ba077d8fe7f36c3238e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=144227dae949fb98896a2ba077d8fe7f36c3238e", "patch": "@@ -753,10 +753,13 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                     .tcx\n                     .mk_const(ty::ConstS { kind: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n             }\n-            _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),\n-            _ => ct,\n+            _ => ct.super_fold_with(self),\n         }\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if p.has_vars_bound_at_or_above(self.current_index) { p.super_fold_with(self) } else { p }\n+    }\n }\n \n // The inverse of `BoundVarReplacer`: replaces placeholders with the bound vars from which they came."}]}