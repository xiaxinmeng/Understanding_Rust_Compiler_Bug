{"sha": "fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjI1YWU4M2QxZjZiZDcyMzJkNzRlYzVjMWY0ZjFjNjQyZWM1YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-09T06:01:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-09T06:01:40Z"}, "message": "auto merge of #14019 : brson/rust/docs, r=alexcrichton\n\nJust small bits of polish.", "tree": {"sha": "d68d09fde5ff5d9e9875d23506c682ab88579fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d68d09fde5ff5d9e9875d23506c682ab88579fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "html_url": "https://github.com/rust-lang/rust/commit/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a990920c6fff9b762c3d0968ff0a5fdcce6d2b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a990920c6fff9b762c3d0968ff0a5fdcce6d2b39", "html_url": "https://github.com/rust-lang/rust/commit/a990920c6fff9b762c3d0968ff0a5fdcce6d2b39"}, {"sha": "2aa42533772a6b3cd406c34f0de12327320cb875", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa42533772a6b3cd406c34f0de12327320cb875", "html_url": "https://github.com/rust-lang/rust/commit/2aa42533772a6b3cd406c34f0de12327320cb875"}], "stats": {"total": 75, "additions": 28, "deletions": 47}, "files": [{"sha": "cf99fdbd5d4c229739d746f424e4e9bb51fbcef6", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 21, "deletions": 43, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "patch": "@@ -14,32 +14,6 @@ use mem;\n use intrinsics;\n use ptr::copy_nonoverlapping_memory;\n \n-/// Casts the value at `src` to U. The two types must have the same length.\n-#[inline]\n-pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    let mut dest: U = mem::uninit();\n-    let dest_ptr: *mut u8 = transmute(&mut dest);\n-    let src_ptr: *u8 = transmute(src);\n-    copy_nonoverlapping_memory(dest_ptr, src_ptr, mem::size_of::<U>());\n-    dest\n-}\n-\n-/**\n- * Move a thing into the void\n- *\n- * The forget function will take ownership of the provided value but neglect\n- * to run any required cleanup or memory-management operations on it.\n- */\n-#[inline]\n-pub unsafe fn forget<T>(thing: T) { intrinsics::forget(thing); }\n-\n-/**\n- * Force-increment the reference count on a shared box. If used\n- * carelessly, this can leak the box.\n- */\n-#[inline]\n-pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n-\n /**\n  * Transform a value of one type into a value of another type.\n  * Both types must have the same size and alignment.\n@@ -54,10 +28,29 @@ pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n  * ```\n  */\n #[inline]\n-pub unsafe fn transmute<L, G>(thing: L) -> G {\n+pub unsafe fn transmute<T, U>(thing: T) -> U {\n     intrinsics::transmute(thing)\n }\n \n+/**\n+ * Move a thing into the void\n+ *\n+ * The forget function will take ownership of the provided value but neglect\n+ * to run any required cleanup or memory-management operations on it.\n+ */\n+#[inline]\n+pub unsafe fn forget<T>(thing: T) { intrinsics::forget(thing); }\n+\n+/// Casts the value at `src` to U. The two types must have the same length.\n+#[inline]\n+pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    let mut dest: U = mem::uninit();\n+    let dest_ptr: *mut u8 = transmute(&mut dest);\n+    let src_ptr: *u8 = transmute(src);\n+    copy_nonoverlapping_memory(dest_ptr, src_ptr, mem::size_of::<U>());\n+    dest\n+}\n+\n /// Coerce an immutable reference to be mutable.\n #[inline]\n #[deprecated=\"casting &T to &mut T is undefined behaviour: use Cell<T>, RefCell<T> or Unsafe<T>\"]\n@@ -106,7 +99,7 @@ pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n \n #[cfg(test)]\n mod tests {\n-    use cast::{bump_box_refcount, transmute};\n+    use cast::transmute;\n     use raw;\n     use realstd::str::StrAllocating;\n \n@@ -115,21 +108,6 @@ mod tests {\n         assert_eq!(1u, unsafe { ::cast::transmute_copy(&1) });\n     }\n \n-    #[test]\n-    fn test_bump_managed_refcount() {\n-        unsafe {\n-            let managed = @\"box box box\".to_owned();      // refcount 1\n-            bump_box_refcount(managed);     // refcount 2\n-            let ptr: *int = transmute(managed); // refcount 2\n-            let _box1: @~str = ::cast::transmute_copy(&ptr);\n-            let _box2: @~str = ::cast::transmute_copy(&ptr);\n-            assert!(*_box1 == \"box box box\".to_owned());\n-            assert!(*_box2 == \"box box box\".to_owned());\n-            // Will destroy _box1 and _box2. Without the bump, this would\n-            // use-after-free. With too many bumps, it would leak.\n-        }\n-    }\n-\n     #[test]\n     fn test_transmute() {\n         unsafe {"}, {"sha": "0413b31e8b76efa1694e3204a4db420fe9983150", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Types dealing with dynamic mutability\n+//! Types that provide interior mutability.\n \n use clone::Clone;\n use cmp::Eq;"}, {"sha": "bb587c0e42d03cd186e70b82b7d4db1f5ae9e38d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n+\n //! Conveniences for working with unsafe pointers, the `*T`, and `*mut T` types.\n //!\n //! Working with unsafe pointers in Rust is fairly uncommon,"}, {"sha": "dae28777867793ef0e6566f8d9e0a601ce60282b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fcf25ae83d1f6bd7232d74ec5c1f4f1c642ec5b2", "patch": "@@ -81,7 +81,7 @@\n //! memory types, including [`atomics`](sync/atomics/index.html).\n //!\n //! Common types of I/O, including files, TCP, UPD, pipes, Unix domain sockets,\n-//! timers, and process spawning, are defined in the [`io`](io/index.html).\n+//! timers, and process spawning, are defined in the [`io`](io/index.html) module.\n //!\n //! Rust's I/O and concurrency depends on a small runtime interface\n //! that lives, along with its support code, in mod [`rt`](rt/index.html).\n@@ -90,10 +90,11 @@\n //!\n //! ## The Rust prelude and macros\n //!\n-//! Finally, the [`prelude`](prelude/index.html) defines a set of\n+//! Finally, the [`prelude`](prelude/index.html) defines a\n //! common set of traits, types, and functions that are made available\n //! to all code by default. [`macros`](macros/index.html) contains\n-//! all the standard macros, such as `assert!`, `fail!`, `println!`.\n+//! all the standard macros, such as `assert!`, `fail!`, `println!`,\n+//! and `format!`, also available to all Rust code.\n \n #![crate_id = \"std#0.11-pre\"]\n #![comment = \"The Rust standard library\"]"}]}