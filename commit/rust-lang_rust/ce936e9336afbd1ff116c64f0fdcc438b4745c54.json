{"sha": "ce936e9336afbd1ff116c64f0fdcc438b4745c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTM2ZTkzMzZhZmJkMWZmMTE2YzY0ZjBmZGNjNDM4YjQ3NDVjNTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-11T21:14:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-18T23:37:08Z"}, "message": "Do not emit note for projected derived obligations", "tree": {"sha": "5f982f9f0187e0b5f7757e3af8e34c18e366ba4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f982f9f0187e0b5f7757e3af8e34c18e366ba4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce936e9336afbd1ff116c64f0fdcc438b4745c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce936e9336afbd1ff116c64f0fdcc438b4745c54", "html_url": "https://github.com/rust-lang/rust/commit/ce936e9336afbd1ff116c64f0fdcc438b4745c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce936e9336afbd1ff116c64f0fdcc438b4745c54/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc55c701f50ccdc8605b37cdf62d02ec596b108", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc55c701f50ccdc8605b37cdf62d02ec596b108", "html_url": "https://github.com/rust-lang/rust/commit/6bc55c701f50ccdc8605b37cdf62d02ec596b108"}], "stats": {"total": 70, "additions": 22, "deletions": 48}, "files": [{"sha": "d22a4ac298efeff2e8a8926f7ba1ea59f89dba9f", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -191,6 +191,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n \n+    DerivedObligation(DerivedObligationCause<'tcx>),\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,\n@@ -263,7 +265,10 @@ impl ObligationCauseCode<'_> {\n     // Return the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n         let mut base_cause = self;\n-        while let BuiltinDerivedObligation(cause) | ImplDerivedObligation(cause) = base_cause {\n+        while let BuiltinDerivedObligation(cause)\n+        | ImplDerivedObligation(cause)\n+        | DerivedObligation(cause) = base_cause\n+        {\n             base_cause = &cause.parent_code;\n         }\n         base_cause"}, {"sha": "5831cb3859f81773f85f58496157c23d3cf8bcd7", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -456,6 +456,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ImplDerivedObligation(ref cause) => {\n                 tcx.lift(cause).map(super::ImplDerivedObligation)\n             }\n+            super::DerivedObligation(ref cause) => tcx.lift(cause).map(super::DerivedObligation),\n             super::CompareImplMethodObligation {\n                 item_name,\n                 impl_item_def_id,"}, {"sha": "e9f55c24256c718b8143bf1cc08abfd0a7236433", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -134,7 +134,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..)\n-            | ObligationCauseCode::ImplDerivedObligation(..) => {}\n+            | ObligationCauseCode::ImplDerivedObligation(..)\n+            | ObligationCauseCode::DerivedObligation(..) => {}\n             _ => {\n                 // this is a \"direct\", user-specified, rather than derived,\n                 // obligation."}, {"sha": "9a6a6fefa7c7150b3f9e2f71579242dc8d8b048d", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -1135,7 +1135,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         while let Some(code) = next_code {\n             debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n             match code {\n-                ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n+                ObligationCauseCode::DerivedObligation(derived_obligation)\n+                | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n                 | ObligationCauseCode::ImplDerivedObligation(derived_obligation) => {\n                     let ty = derived_obligation.parent_trait_ref.self_ty();\n                     debug!(\n@@ -1661,6 +1662,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     obligated_types,\n                 );\n             }\n+            ObligationCauseCode::DerivedObligation(ref data) => {\n+                let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n+                let parent_predicate = parent_trait_ref.without_const().to_predicate();\n+                self.note_obligation_cause_code(\n+                    err,\n+                    &parent_predicate,\n+                    &data.parent_code,\n+                    obligated_types,\n+                );\n+            }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!(\n                     \"the requirement `{}` appears on the impl method \\"}, {"sha": "f6953971ef5bcbbc74e618caa43caedd597f5585", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         parent_trait_ref,\n                         parent_code: Rc::new(obligation.cause.code.clone()),\n                     };\n-                    cause.code = traits::ObligationCauseCode::ImplDerivedObligation(derived_cause);\n+                    cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n                 }\n                 extend_cause_with_original_assoc_item_obligation(\n                     tcx,"}, {"sha": "96e690631894dfc5c5884f516a470f857d0f9bf2", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -11,7 +11,6 @@ LL | impl Case1 for S1 {\n    |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n-   = note: required because of the requirements on the impl of `for<'a> std::fmt::Debug` for `<<<<S1 as Case1>::C as std::iter::Iterator>::Item as std::iter::Iterator>::Item as Lam<&'a u8>>::App`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20"}, {"sha": "7bf75f3839c0ebab1e19b60d6434fd6f39c328bc", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -53,7 +53,6 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: required because of the requirements on the impl of `std::fmt::Display` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n@@ -71,7 +70,6 @@ LL |     + Deref<Target = str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::ops::Deref` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n@@ -90,7 +88,6 @@ LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-   = note: required because of the requirements on the impl of `std::ops::AddAssign<&'static str>` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n@@ -108,7 +105,6 @@ LL |     type Output: Copy\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UncheckedCopy for T {}"}, {"sha": "b6d889515b6fbe6408ab1b854176488757c7b0a0", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -53,7 +53,6 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: required because of the requirements on the impl of `std::fmt::Display` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n@@ -71,7 +70,6 @@ LL |     + Deref<Target = str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::ops::Deref` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n@@ -90,7 +88,6 @@ LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-   = note: required because of the requirements on the impl of `std::ops::AddAssign<&'static str>` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n@@ -108,7 +105,6 @@ LL |     type Output: Copy\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as UncheckedCopy>::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UncheckedCopy for T {}"}, {"sha": "58f71b8b14ed291fa313ef8a8bfa5f6b852c98f9", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -16,8 +16,6 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n ...\n LL | impl Foo<u32> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n-   |\n-   = note: required because of the requirements on the impl of `std::default::Default` for `<() as Foo<u32>>::Out`\n \n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:11:6\n@@ -29,8 +27,6 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n ...\n LL | impl Foo<u64> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n-   |\n-   = note: required because of the requirements on the impl of `std::default::Default` for `<() as Foo<u64>>::Out`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2e5a1ebf19afa698afa322b4f0212b7bcbebd6ae", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -16,8 +16,6 @@ LL |     type MpuConfig: MyDisplay = T;\n ...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n-   |\n-   = note: required because of the requirements on the impl of `MyDisplay` for `<S as MPU>::MpuConfig`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b3986407bc4c82029fafb99eaf2e9fc013d91b8", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -16,8 +16,6 @@ LL |     type MpuConfig: MyDisplay = T;\n ...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n-   |\n-   = note: required because of the requirements on the impl of `MyDisplay` for `<S as MPU>::MpuConfig`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dac713567b5e27f5129131775010d56913a863cd", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -8,8 +8,6 @@ LL |     type Assoc: Bar;\n ...\n LL |     type Assoc = bool;\n    |                  ^^^^ the trait `Bar` is not implemented for `bool`\n-   |\n-   = note: required because of the requirements on the impl of `Bar` for `<() as Foo>::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:16:18\n@@ -19,8 +17,6 @@ LL | trait Baz where Self::Assoc: Bar {\n ...\n LL |     type Assoc = bool;\n    |                  ^^^^ the trait `Bar` is not implemented for `bool`\n-   |\n-   = note: required because of the requirements on the impl of `Bar` for `<() as Baz>::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:24:18\n@@ -30,8 +26,6 @@ LL | trait Bat where <Self as Bat>::Assoc: Bar {\n ...\n LL |     type Assoc = bool;\n    |                  ^^^^ the trait `Bar` is not implemented for `bool`\n-   |\n-   = note: required because of the requirements on the impl of `Bar` for `<() as Bat>::Assoc`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4e7b513629d0512fdab25ab6c6d3eda8ff43ae90", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -9,7 +9,6 @@ LL | impl <T: Sync+'static> Foo for (T,) { }\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `(T,)`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `(T,)`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n@@ -26,7 +25,6 @@ LL | impl <T: Send> Foo for (T,T) { }\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because it appears within the type `(T, T)`\n-   = note: required because of the requirements on the impl of `std::marker::Sync` for `(T, T)`\n help: consider further restricting this bound\n    |\n LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }"}, {"sha": "3fb1af3a67cc225b4149642fd4a65250fbe99a2f", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -11,7 +11,6 @@ LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `X<T>`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `X<T>`\n help: consider further restricting this bound\n    |\n LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }"}, {"sha": "592cc3b1c4ec1e747fd53b4e1560802c6b5a42aa", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -8,7 +8,6 @@ LL | impl Foo for std::rc::Rc<i8> { }\n    |      ^^^ `std::rc::Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<i8>`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `std::rc::Rc<i8>`\n \n error: aborting due to previous error\n "}, {"sha": "9c5073a1e49d73b94468cb47c4981f9a1450571b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -8,7 +8,6 @@ LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `T`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }"}, {"sha": "749d569b9aedc46d487c3ab5a54284133a5ae0a0", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -9,7 +9,6 @@ LL | impl Foo<[isize]> for usize { }\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `[isize]`\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n@@ -22,7 +21,6 @@ LL | impl Foo<isize> for [usize] { }\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `[usize]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95f4aa9e6dbaa749c272752699726ce9c8189d19", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -9,7 +9,6 @@ LL | impl Tsized for () {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[()]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `[()]`\n \n error: aborting due to previous error\n "}, {"sha": "8698ed6e875f306f1a4227c789b7eedab51d3351", "filename": "src/test/ui/impl-bounds-checking.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -6,8 +6,6 @@ LL | trait Getter<T: Clone2> {\n ...\n LL | impl Getter<isize> for isize {\n    |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n-   |\n-   = note: required because of the requirements on the impl of `Clone2` for `isize`\n \n error: aborting due to previous error\n "}, {"sha": "888576c43365f912ab2f2c4b307def62e05476e1", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -57,7 +57,6 @@ LL | impl<'self> Serializable<str> for &'self str {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `str`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "d8e9110fbbd1d66a02984dc0761bfaf89f559c03", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -4,7 +4,6 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |     type Assoc = T;\n    |                  ^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as Complete>::Assoc`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {"}, {"sha": "2fb0583ee7d593ae16fe4c96793ee8d2da5f0498", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -4,7 +4,6 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | impl<T> Complete for T {}\n    |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::marker::Copy` for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {}"}, {"sha": "6778ab8bfe4f29550a6ee6f30d6253a8cb191a8b", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -11,7 +11,6 @@ LL |     type Ctx = dyn Alias<T>;\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `<T as WithType>::Ctx`\n \n error: aborting due to previous error\n "}, {"sha": "2c45a498240efccda7a64f401eecf09844c72766", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -27,7 +27,6 @@ LL | #[derive(Copy(Bad))]\n LL | pub trait Copy: Clone {\n    |                 ----- required by this bound in `std::marker::Copy`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `Test1`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Test2: std::clone::Clone` is not satisfied\n@@ -41,7 +40,6 @@ LL | #[derive(Copy=\"bad\")]\n LL | pub trait Copy: Clone {\n    |                 ----- required by this bound in `std::marker::Copy`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `Test2`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors"}, {"sha": "f499c1f5698595e1de2a708386d8d5605265e67a", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -7,7 +7,6 @@ LL |\n LL | default impl<U> Foo<'static, U> for () {}\n    |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n    |\n-   = note: required because of the requirements on the impl of `std::cmp::Eq` for `U`\n help: consider restricting type parameter `U`\n    |\n LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}"}, {"sha": "c5510bfa3f2fed9a678ae0fa43386fc482c4567e", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -28,7 +28,6 @@ LL |     type Assoc = ChildWrapper<T::Assoc>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n    |\n    = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n-   = note: required because of the requirements on the impl of `Child<<ParentWrapper<T> as Parent>::Ty>` for `<ParentWrapper<T> as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5"}, {"sha": "356b90d0646236512e4117ce462362045621bebc", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -21,7 +21,6 @@ LL |     type Storage = SalsaStorage;\n    = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n    = note: required because it appears within the type `SalsaStorage`\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `<RootDatabase as Database>::Storage`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4cf054d177f6624476794b56deec67457a3ba9ca", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -11,7 +11,6 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `X`\n \n error: aborting due to previous error\n "}, {"sha": "d18644f005a887d4742b3c0ca5c39116256191fb", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce936e9336afbd1ff116c64f0fdcc438b4745c54/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=ce936e9336afbd1ff116c64f0fdcc438b4745c54", "patch": "@@ -11,7 +11,6 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required because of the requirements on the impl of `std::marker::Sized` for `X`\n \n error: aborting due to previous error\n "}]}