{"sha": "69ab6f2995cf445df7016f89f54220e7438f4f37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWI2ZjI5OTVjZjQ0NWRmNzAxNmY4OWY1NDIyMGU3NDM4ZjRmMzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-25T13:06:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T18:25:55Z"}, "message": "introduce `shifted_in`, `shifted_out` and friends\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "0ff02fd43923b69d70ab0a971f8c18ec94e944d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff02fd43923b69d70ab0a971f8c18ec94e944d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ab6f2995cf445df7016f89f54220e7438f4f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ab6f2995cf445df7016f89f54220e7438f4f37", "html_url": "https://github.com/rust-lang/rust/commit/69ab6f2995cf445df7016f89f54220e7438f4f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ab6f2995cf445df7016f89f54220e7438f4f37/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c4d4e2f05b7fcca62eef7cf5ce83d51907a6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c4d4e2f05b7fcca62eef7cf5ce83d51907a6ec", "html_url": "https://github.com/rust-lang/rust/commit/a2c4d4e2f05b7fcca62eef7cf5ce83d51907a6ec"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "da6340b5f615f11d20fd4afb1aa280925d1b8f44", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=69ab6f2995cf445df7016f89f54220e7438f4f37", "patch": "@@ -71,6 +71,7 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n+#![feature(inclusive_range_methods)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "37e8b1bae83458b9800700b6ad78e920e68709b2", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=69ab6f2995cf445df7016f89f54220e7438f4f37", "patch": "@@ -123,11 +123,11 @@ impl Region {\n \n     fn shifted(self, amount: u32) -> Region {\n         match self {\n-            Region::LateBound(depth, id, origin) => {\n-                Region::LateBound(depth.shifted(amount), id, origin)\n+            Region::LateBound(debruijn, id, origin) => {\n+                Region::LateBound(debruijn.shifted_in(amount), id, origin)\n             }\n-            Region::LateBoundAnon(depth, index) => {\n-                Region::LateBoundAnon(depth.shifted(amount), index)\n+            Region::LateBoundAnon(debruijn, index) => {\n+                Region::LateBoundAnon(debruijn.shifted_in(amount), index)\n             }\n             _ => self,\n         }"}, {"sha": "4cd12bfe5f45f67abd2054a48f8e4f3da2f6f3d8", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=69ab6f2995cf445df7016f89f54220e7438f4f37", "patch": "@@ -515,7 +515,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n pub fn shift_region(region: ty::RegionKind, amount: u32) -> ty::RegionKind {\n     match region {\n         ty::ReLateBound(debruijn, br) => {\n-            ty::ReLateBound(debruijn.shifted(amount), br)\n+            ty::ReLateBound(debruijn.shifted_in(amount), br)\n         }\n         _ => {\n             region\n@@ -531,7 +531,7 @@ pub fn shift_region_ref<'a, 'gcx, 'tcx>(\n {\n     match region {\n         &ty::ReLateBound(debruijn, br) if amount > 0 => {\n-            tcx.mk_region(ty::ReLateBound(debruijn.shifted(amount), br))\n+            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), br))\n         }\n         _ => {\n             region"}, {"sha": "591786049965acfc9d4a4c35ba382f378f5dfa36", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ab6f2995cf445df7016f89f54220e7438f4f37/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=69ab6f2995cf445df7016f89f54220e7438f4f37", "patch": "@@ -1264,9 +1264,38 @@ impl DebruijnIndex {\n         DebruijnIndex { depth: depth }\n     }\n \n-    pub fn shifted(&self, amount: u32) -> DebruijnIndex {\n+    /// Returns the resulting index when this value is moved into\n+    /// `amount` number of new binders. So e.g. if you had\n+    ///\n+    ///    for<'a> fn(&'a x)\n+    ///\n+    /// and you wanted to change to\n+    ///\n+    ///    for<'a> fn(for<'b> fn(&'a x))\n+    ///\n+    /// you would need to shift the index for `'a` into 1 new binder.\n+    #[must_use]\n+    pub fn shifted_in(self, amount: u32) -> DebruijnIndex {\n         DebruijnIndex { depth: self.depth + amount }\n     }\n+\n+    /// Update this index in place by shifting it \"in\" through\n+    /// `amount` number of binders.\n+    pub fn shift_in(&mut self, amount: u32) {\n+        *self = self.shifted_in(amount);\n+    }\n+\n+    /// Returns the resulting index when this value is moved out from\n+    /// `amount` number of new binders.\n+    #[must_use]\n+    pub fn shifted_out(self, amount: u32) -> DebruijnIndex {\n+        DebruijnIndex { depth: self.depth - amount }\n+    }\n+\n+    /// Update in place by shifting out from `amount` binders.\n+    pub fn shift_out(&mut self, amount: u32) {\n+        *self = self.shifted_out(amount);\n+    }\n }\n \n /// Region utilities"}]}