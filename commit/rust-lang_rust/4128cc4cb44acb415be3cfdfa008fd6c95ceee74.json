{"sha": "4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMjhjYzRjYjQ0YWNiNDE1YmUzY2ZkZmEwMDhmZDZjOTVjZWVlNzQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-30T19:54:50Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-31T23:21:47Z"}, "message": "Make utility funs in core::int, core::uint, etc. not by-reference\n\nCloses #3302", "tree": {"sha": "321c8c7ed1c28247377bf4122365c047d69f891f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321c8c7ed1c28247377bf4122365c047d69f891f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "html_url": "https://github.com/rust-lang/rust/commit/4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638db28c472c1edadc3c37f900df28f14cca7665", "url": "https://api.github.com/repos/rust-lang/rust/commits/638db28c472c1edadc3c37f900df28f14cca7665", "html_url": "https://github.com/rust-lang/rust/commit/638db28c472c1edadc3c37f900df28f14cca7665"}], "stats": {"total": 205, "additions": 103, "deletions": 102}, "files": [{"sha": "dae1540daffa753a2417d1c44bf46c00b90fc7f5", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -249,18 +249,18 @@ fn check_variants_T<T: copy>(\n   cx: context\n   ) {\n     error!(\"%s contains %u %s objects\", filename.to_str(),\n-           vec::len(things), thing_label);\n+           things.len(), thing_label);\n \n     // Assuming we're not generating any token_trees\n     let intr = syntax::parse::token::mk_fake_ident_interner();\n \n-    let L = vec::len(things);\n+    let L = things.len();\n \n-    if L < 100u {\n-        do under(uint::min(&L, &20u)) |i| {\n+    if L < 100 {\n+        do under(uint::min(L, 20)) |i| {\n             log(error, ~\"Replacing... #\" + uint::str(i));\n             let fname = str::from_slice(filename.to_str());\n-            do under(uint::min(&L, &30u)) |j| {\n+            do under(uint::min(L, 30)) |j| {\n                 log(error, ~\"With... \" + stringifier(@things[j], intr));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but"}, {"sha": "bc080ac0d6301e8668b7f081e5f76bd5c14cf123", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -25,21 +25,21 @@ const bytes : uint = (inst::bits / 8);\n const min_value: T = (-1 as T) << (bits - 1);\n const max_value: T = min_value - 1 as T;\n \n-pure fn min(x: &T, y: &T) -> T { if *x < *y { *x } else { *y } }\n-pure fn max(x: &T, y: &T) -> T { if *x > *y { *x } else { *y } }\n-\n-pure fn add(x: &T, y: &T) -> T { *x + *y }\n-pure fn sub(x: &T, y: &T) -> T { *x - *y }\n-pure fn mul(x: &T, y: &T) -> T { *x * *y }\n-pure fn div(x: &T, y: &T) -> T { *x / *y }\n-pure fn rem(x: &T, y: &T) -> T { *x % *y }\n-\n-pure fn lt(x: &T, y: &T) -> bool { *x < *y }\n-pure fn le(x: &T, y: &T) -> bool { *x <= *y }\n-pure fn eq(x: &T, y: &T) -> bool { *x == *y }\n-pure fn ne(x: &T, y: &T) -> bool { *x != *y }\n-pure fn ge(x: &T, y: &T) -> bool { *x >= *y }\n-pure fn gt(x: &T, y: &T) -> bool { *x > *y }\n+pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n+pure fn max(x: T, y: T) -> T { if x > y { x } else { y } }\n+\n+pure fn add(x: T, y: T) -> T { x + y }\n+pure fn sub(x: T, y: T) -> T { x - y }\n+pure fn mul(x: T, y: T) -> T { x * y }\n+pure fn div(x: T, y: T) -> T { x / y }\n+pure fn rem(x: T, y: T) -> T { x % y }\n+\n+pure fn lt(x: T, y: T) -> bool { x < y }\n+pure fn le(x: T, y: T) -> bool { x <= y }\n+pure fn eq(x: T, y: T) -> bool { x == y }\n+pure fn ne(x: T, y: T) -> bool { x != y }\n+pure fn ge(x: T, y: T) -> bool { x >= y }\n+pure fn gt(x: T, y: T) -> bool { x > y }\n \n pure fn is_positive(x: T) -> bool { x > 0 as T }\n pure fn is_negative(x: T) -> bool { x < 0 as T }"}, {"sha": "d990ba97afae0286d3d0b376f4fcf8ad6b5b39fe", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -2,9 +2,9 @@ type T = int;\n const bits: uint = uint::bits;\n \n /// Produce a uint suitable for use in a hash table\n-pure fn hash(x: &int) -> uint {\n-    let u : uint = *x as uint;\n-    uint::hash(&u)\n+pure fn hash(x: int) -> uint {\n+    let u : uint = x as uint;\n+    uint::hash(u)\n }\n \n /// Returns `base` raised to the power of `exponent`"}, {"sha": "f351ee77caab695677bfdc548955877b64ef665c", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -285,7 +285,7 @@ type ByteBuf = {buf: &[const u8], mut pos: uint};\n \n impl ByteBuf: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n-        let count = uint::min(&len, &(self.buf.len() - self.pos));\n+        let count = uint::min(len, self.buf.len() - self.pos);\n \n         vec::u8::memcpy(buf,\n                         vec::const_view(self.buf, self.pos, self.buf.len()),\n@@ -668,7 +668,7 @@ impl MemBuffer: Writer {\n             let v_len = v.len();\n             let buf_len = buf.len();\n \n-            let count = uint::max(&buf_len, &(self.pos + v_len));\n+            let count = uint::max(buf_len, self.pos + v_len);\n             vec::reserve(buf, count);\n             unsafe { vec::unsafe::set_len(buf, count); }\n "}, {"sha": "d2c9a07319a7d35eef5632168209a4f23f18f2d4", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -682,7 +682,7 @@ pure fn eq(a: &~str, b: &~str) -> bool {\n /// Bytewise slice less than\n pure fn lt(a: &str, b: &str) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(&a_len, &b_len);\n+    let mut end = uint::min(a_len, b_len);\n \n     let mut i = 0;\n     while i < end {\n@@ -698,7 +698,7 @@ pure fn lt(a: &str, b: &str) -> bool {\n /// Bytewise less than or equal\n pure fn le(a: &str, b: &str) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(&a_len, &b_len);\n+    let mut end = uint::min(a_len, b_len);\n \n     let mut i = 0;\n     while i < end {"}, {"sha": "dfab2e36096da2ade525de8104588715d210d657", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -24,21 +24,21 @@ const bytes : uint = (inst::bits / 8);\n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n \n-pure fn min(x: &T, y: &T) -> T { if *x < *y { *x } else { *y } }\n-pure fn max(x: &T, y: &T) -> T { if *x > *y { *x } else { *y } }\n-\n-pure fn add(x: &T, y: &T) -> T { *x + *y }\n-pure fn sub(x: &T, y: &T) -> T { *x - *y }\n-pure fn mul(x: &T, y: &T) -> T { *x * *y }\n-pure fn div(x: &T, y: &T) -> T { *x / *y }\n-pure fn rem(x: &T, y: &T) -> T { *x % *y }\n-\n-pure fn lt(x: &T, y: &T) -> bool { *x < *y }\n-pure fn le(x: &T, y: &T) -> bool { *x <= *y }\n-pure fn eq(x: &T, y: &T) -> bool { *x == *y }\n-pure fn ne(x: &T, y: &T) -> bool { *x != *y }\n-pure fn ge(x: &T, y: &T) -> bool { *x >= *y }\n-pure fn gt(x: &T, y: &T) -> bool { *x > *y }\n+pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n+pure fn max(x: T, y: T) -> T { if x > y { x } else { y } }\n+\n+pure fn add(x: T, y: T) -> T { x + y }\n+pure fn sub(x: T, y: T) -> T { x - y }\n+pure fn mul(x: T, y: T) -> T { x * y }\n+pure fn div(x: T, y: T) -> T { x / y }\n+pure fn rem(x: T, y: T) -> T { x % y }\n+\n+pure fn lt(x: T, y: T) -> bool { x < y }\n+pure fn le(x: T, y: T) -> bool { x <= y }\n+pure fn eq(x: T, y: T) -> bool { x == y }\n+pure fn ne(x: T, y: T) -> bool { x != y }\n+pure fn ge(x: T, y: T) -> bool { x >= y }\n+pure fn gt(x: T, y: T) -> bool { x > y }\n \n pure fn is_positive(x: T) -> bool { x > 0 as T }\n pure fn is_negative(x: T) -> bool { x < 0 as T }"}, {"sha": "8954e5c4a67d349ebf7c410ddcff1932aaf8c03f", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -61,8 +61,8 @@ pure fn div_round(x: uint, y: uint) -> uint {\n pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n /// Produce a uint suitable for use in a hash table\n-pure fn hash(x: &uint) -> uint {\n-    hash::hash_uint(*x) as uint\n+pure fn hash(x: uint) -> uint {\n+    hash::hash_uint(x) as uint\n }\n \n /**"}, {"sha": "2e93788e9ac5386e4c701817733b66735adbdf93", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -1427,7 +1427,7 @@ impl<T: Eq> @[T]: Eq {\n \n pure fn lt<T: Ord>(a: &[T], b: &[T]) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(&a_len, &b_len);\n+    let mut end = uint::min(a_len, b_len);\n \n     let mut i = 0;\n     while i < end {\n@@ -1841,7 +1841,7 @@ mod u8 {\n     pure fn cmp(a: &~[u8], b: &~[u8]) -> int {\n         let a_len = len(*a);\n         let b_len = len(*b);\n-        let n = uint::min(&a_len, &b_len) as libc::size_t;\n+        let n = uint::min(a_len, b_len) as libc::size_t;\n         let r = unsafe {\n             libc::memcmp(unsafe::to_ptr(*a) as *libc::c_void,\n                          unsafe::to_ptr(*b) as *libc::c_void, n) as int"}, {"sha": "7609fa704546de3ff272b008c9e2f3bac298b8f7", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -135,7 +135,7 @@ impl &Arena {\n     fn alloc_pod_grow(n_bytes: uint, align: uint) -> *u8 {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.pod_head.data);\n-        let new_min_chunk_size = uint::max(&n_bytes, &chunk_size);\n+        let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n         self.chunks = @cons(copy self.pod_head, self.chunks);\n         self.pod_head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), true);\n@@ -177,7 +177,7 @@ impl &Arena {\n     fn alloc_nonpod_grow(n_bytes: uint, align: uint) -> (*u8, *u8) {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.head.data);\n-        let new_min_chunk_size = uint::max(&n_bytes, &chunk_size);\n+        let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n         self.chunks = @cons(copy self.head, self.chunks);\n         self.head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), false);"}, {"sha": "f2dfb3200f3ca5404af11744f70d2179dfae3b23", "filename": "src/libstd/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -426,12 +426,12 @@ fn bytes_hash<V: copy>() -> hashmap<~[u8], V> {\n \n /// Construct a hashmap for int keys\n fn int_hash<V: copy>() -> hashmap<int, V> {\n-    return hashmap(int::hash, int::eq);\n+   return hashmap(|x| { int::hash(*x) }, |x, y| { int::eq(*x, *y)});\n }\n \n /// Construct a hashmap for uint keys\n fn uint_hash<V: copy>() -> hashmap<uint, V> {\n-    return hashmap(uint::hash, uint::eq);\n+   return hashmap(|x| { uint::hash(*x) }, |x, y| { uint::eq(*x, *y) } );\n }\n \n /// Convenience function for adding keys to a hashmap with nil type keys\n@@ -473,15 +473,15 @@ fn hash_from_bytes<V: copy>(items: &[(~[u8], V)]) -> hashmap<~[u8], V> {\n \n /// Construct a hashmap from a vector with int keys\n fn hash_from_ints<V: copy>(items: &[(int, V)]) -> hashmap<int, V> {\n-    hash_from_vec(int::hash, int::eq, items)\n+    hash_from_vec(|x| { int::hash(*x) }, |x, y| { int::eq(*x, *y) }, items)\n }\n \n /// Construct a hashmap from a vector with uint keys\n fn hash_from_uints<V: copy>(items: &[(uint, V)]) -> hashmap<uint, V> {\n-    hash_from_vec(uint::hash, uint::eq, items)\n+    hash_from_vec(|x| { uint::hash(*x) }, |x, y| { uint::eq(*x, *y) } , items)\n }\n \n-// XXX Transitionary\n+// XXX Transitional\n impl<K: Eq IterBytes Hash copy, V: copy> Managed<LinearMap<K, V>>:\n     map<K, V> {\n     pure fn size() -> uint {"}, {"sha": "255ce96e986f14cad8f7375074503e0365cdc286", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -772,7 +772,7 @@ impl TcpSocketBuf: io::Reader {\n             }\n         }\n \n-        let count = uint::min(&len, &self.data.buf.len());\n+        let count = uint::min(len, self.data.buf.len());\n \n         let mut data = ~[];\n         self.data.buf <-> data;"}, {"sha": "34ea2433bedbb64122838e919e1a9f42b3502b3e", "filename": "src/libstd/par.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -30,15 +30,15 @@ fn map_slices<A: copy send, B: copy send>(\n         ~[f()(0u, xs)]\n     }\n     else {\n-        let num_tasks = uint::min(&max_tasks, &(len / min_granularity));\n+        let num_tasks = uint::min(max_tasks, len / min_granularity);\n \n         let items_per_task = len / num_tasks;\n \n         let mut futures = ~[];\n         let mut base = 0u;\n         log(info, ~\"spawning tasks\");\n         while base < len {\n-            let end = uint::min(&len, &(base + items_per_task));\n+            let end = uint::min(len, base + items_per_task);\n             // FIXME: why is the ::<A, ()> annotation required here? (#2617)\n             do vec::as_buf::<A, ()>(xs) |p, _len| {\n                 let f = f();"}, {"sha": "23f33a79c5367bc8f41f6df6cd3da4fd3fe343fb", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -1004,7 +1004,7 @@ mod node {\n                      right   : right,\n              char_len: char_len(left) + char_len(right),\n                      byte_len: byte_len(left) + byte_len(right),\n-             height: uint::max(&height(left), &height(right)) + 1u\n+             height: uint::max(height(left), height(right)) + 1u\n                     })\n     }\n "}, {"sha": "33e6feb8427bbdb5b387b2b36ef8ab15d5388dea", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -242,7 +242,7 @@ mod test_qsort {\n \n         let expected = ~[1, 2, 3];\n \n-        sort::quick_sort(int::le, names);\n+        sort::quick_sort(|x, y| { int::le(*x, *y) }, names);\n \n         let immut_names = vec::from_mut(names);\n "}, {"sha": "f89b1607a70b64f32201363ece2cdd51c81d7703", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -568,8 +568,8 @@ fn compute_id_range(visit_ids_fn: fn(fn@(node_id))) -> id_range {\n     let min = @mut int::max_value;\n     let max = @mut int::min_value;\n     do visit_ids_fn |id| {\n-        *min = int::min(min, &id);\n-        *max = int::max(max, &(id + 1));\n+        *min = int::min(*min, id);\n+        *max = int::max(*max, id + 1);\n     }\n     return {min:*min, max:*max};\n }"}, {"sha": "7b18ca532e06d912f28ffec1219a842de14ff8fc", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -182,7 +182,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n                                         s: ~str, col: uint) unsafe {\n     let mut s1;\n     let len = str::len(s);\n-    if all_whitespace(s, 0u, uint::min(&len, &col)) {\n+    if all_whitespace(s, 0u, uint::min(len, col)) {\n         if col < len {\n             s1 = str::slice(s, col, len);\n         } else { s1 = ~\"\"; }"}, {"sha": "032eb6342e1d501512e7272667237b550f4cb04c", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -125,20 +125,20 @@ fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n     let split2 = abs2.components;\n     let len1 = vec::len(split1);\n     let len2 = vec::len(split2);\n-    assert len1 > 0u;\n-    assert len2 > 0u;\n+    assert len1 > 0;\n+    assert len2 > 0;\n \n-    let max_common_path = uint::min(&len1, &len2) - 1u;\n-    let mut start_idx = 0u;\n+    let max_common_path = uint::min(len1, len2) - 1;\n+    let mut start_idx = 0;\n     while start_idx < max_common_path\n         && split1[start_idx] == split2[start_idx] {\n-        start_idx += 1u;\n+        start_idx += 1;\n     }\n \n     let mut path = ~[];\n-    for uint::range(start_idx, len1 - 1u) |_i| { vec::push(path, ~\"..\"); };\n+    for uint::range(start_idx, len1 - 1) |_i| { vec::push(path, ~\"..\"); };\n \n-    vec::push_all(path, vec::view(split2, start_idx, len2 - 1u));\n+    vec::push_all(path, vec::view(split2, start_idx, len2 - 1));\n \n     if vec::is_not_empty(path) {\n         return Path(\"\").push_many(path);"}, {"sha": "f55688bd234dbe4bcc26bf2ee1397bee5fd0e1cc", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -81,8 +81,8 @@ Options:\n \n fn describe_warnings() {\n     let lint_dict = lint::get_lint_dict();\n-    let mut max_key = 0u;\n-    for lint_dict.each_key |k| { max_key = uint::max(&k.len(), &max_key); }\n+    let mut max_key = 0;\n+    for lint_dict.each_key |k| { max_key = uint::max(k.len(), max_key); }\n     fn padded(max: uint, s: ~str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }"}, {"sha": "c2f7bd2ae2902941d72032f616187753477a0a26", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -304,7 +304,7 @@ fn Atom(n: uint) -> Atom {\n \n /// Creates a hash table of atoms.\n fn atom_hashmap<V:copy>() -> hashmap<Atom,V> {\n-    hashmap::<Atom,V>(uint::hash, uint::eq)\n+  hashmap::<Atom,V>(|x| { uint::hash(*x) }, |x, y| { uint::eq(*x, *y) })\n }\n \n /// One local scope."}, {"sha": "8291fbe91af7d082b869393efc3b0a727533429a", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -5,11 +5,10 @@ import driver::session::{session, arch_x86_64};\n import syntax::codemap::span;\n import libc::c_uint;\n import syntax::{attr, ast_map};\n-import lib::llvm::{ llvm, TypeRef, ValueRef,\n-                    ModuleRef, CallConv, Attribute,\n-                    StructRetAttribute, ByValAttribute,\n-                   SequentiallyConsistent, Acquire, Release,\n-                   Xchg };\n+import lib::llvm::{ llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double,\n+    Struct, Array, ModuleRef, CallConv, Attribute,\n+    StructRetAttribute, ByValAttribute,\n+    SequentiallyConsistent, Acquire, Release, Xchg };\n import syntax::{ast, ast_util};\n import back::{link, abi};\n import common::*;\n@@ -79,19 +78,19 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn ty_align(ty: TypeRef) -> uint {\n-        return match llvm::LLVMGetTypeKind(ty) as int {\n-            8 /* integer */ => {\n-                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7u) / 8u\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n             }\n-            12 /* pointer */ => 8u,\n-            2 /* float */ => 4u,\n-            3 /* double */ => 8u,\n-            10 /* struct */ => {\n-              do vec::foldl(0u, struct_tys(ty)) |a, t| {\n-                    uint::max(&a, &ty_align(t))\n+            Pointer => 8,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+              do vec::foldl(0, struct_tys(ty)) |a, t| {\n+                    uint::max(a, ty_align(t))\n                 }\n             }\n-            11 /* array */ => {\n+            Array => {\n                 let elt = llvm::LLVMGetElementType(ty);\n                 ty_align(elt)\n             }\n@@ -100,19 +99,19 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn ty_size(ty: TypeRef) -> uint {\n-        return match llvm::LLVMGetTypeKind(ty) as int {\n-            8 /* integer */ => {\n-                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7u) / 8u\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n             }\n-            12 /* pointer */ => 8u,\n-            2 /* float */ => 4u,\n-            3 /* double */ => 8u,\n-            10 /* struct */ => {\n-              do vec::foldl(0u, struct_tys(ty)) |s, t| {\n+            Pointer => 8,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+              do vec::foldl(0, struct_tys(ty)) |s, t| {\n                     s + ty_size(t)\n                 }\n             }\n-            11 /* array */ => {\n+            Array => {\n               let len = llvm::LLVMGetArrayLength(ty) as uint;\n               let elt = llvm::LLVMGetElementType(ty);\n               let eltsz = ty_size(elt);\n@@ -123,7 +122,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn all_mem(cls: ~[mut x86_64_reg_class]) {\n-        for uint::range(0u, cls.len()) |i| {\n+        for uint::range(0, cls.len()) |i| {\n             cls[i] = memory_class;\n         }\n     }"}, {"sha": "287a7582a993cfc10c79b1ccc80a8764657bf581", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -1912,9 +1912,9 @@ fn type_size(cx: ctxt, ty: t) -> uint {\n         let variants = substd_enum_variants(cx, did, substs);\n         variants.foldl( // find max size of any variant\n             0,\n-            |m, v| uint::max(&m,\n+            |m, v| uint::max(m,\n                              // find size of this variant:\n-                             &v.args.foldl(0, |s, a| s + type_size(cx, a))))\n+                             v.args.foldl(0, |s, a| s + type_size(cx, a))))\n       }\n \n       ty_param(_) | ty_self => {"}, {"sha": "31d1584e7601938f6ab8f5094595a9c80760b12e", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -45,18 +45,18 @@ fn unindent(s: ~str) -> ~str {\n             min_indent\n         } else {\n             saw_first_line = true;\n-            let mut spaces = 0u;\n+            let mut spaces = 0;\n             do str::all(line) |char| {\n                 // Only comparing against space because I wouldn't\n                 // know what to do with mixed whitespace chars\n                 if char == ' ' {\n-                    spaces += 1u;\n+                    spaces += 1;\n                     true\n                 } else {\n                     false\n                 }\n             };\n-            uint::min(&min_indent, &spaces)\n+            uint::min(min_indent, spaces)\n         }\n     };\n "}, {"sha": "f163a6775820c75fbd5f9e0ced5ee2fb3fad2e53", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128cc4cb44acb415be3cfdfa008fd6c95ceee74/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=4128cc4cb44acb415be3cfdfa008fd6c95ceee74", "patch": "@@ -4,7 +4,9 @@ import std::map::hashmap;\n import std::map;\n \n fn main() {\n-    let buggy_map :hashmap<uint, &uint> = hashmap::<uint, &uint>(uint::hash, uint::eq);\n+    let buggy_map :hashmap<uint, &uint> =\n+      hashmap::<uint, &uint>(|x| { uint::hash(*x) },\n+                             |x, y| { uint::eq(*x, *y) });\n     buggy_map.insert(42, ~1); //~ ERROR illegal borrow\n     \n     // but it is ok if we use a temporary"}]}