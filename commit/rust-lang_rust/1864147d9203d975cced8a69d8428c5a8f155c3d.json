{"sha": "1864147d9203d975cced8a69d8428c5a8f155c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjQxNDdkOTIwM2Q5NzVjY2VkOGE2OWQ4NDI4YzVhOGYxNTVjM2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-21T17:52:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T17:52:57Z"}, "message": "Merge #9666\n\n9666: minor: Fix some clippy lints in ide_completion r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "76d853d0f6921d878e82225473c962b2736ca905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d853d0f6921d878e82225473c962b2736ca905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1864147d9203d975cced8a69d8428c5a8f155c3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+F75CRBK7hj4Ov3rIwAAc54IAFrviKkm+wdVDADcSG4oujt4\n5UTBOxiJsbMegSMCzO1JaxaRp9jAnEded3sxAUd1qIYaJ7t5FLA7TVb0lVj13BAD\nxqDAlKOEQfyj3mAd5HIW4qEYLtHKEIRzv/eUaNrwfJAkb4rT8o6eIHPB0R3TAaUL\nSD11tJCmaqHZJ6CZ0FBoXG4df6VDpQy/2rQ3GIDXDg8KlIWIz1JPY/+q3crKnXvs\nDPNVjhQchyX5sW8i0NL497i29LK70KJlOmjgJZcEB8gOjMxGQq8RDz3Kyn7z6IQJ\n1HhnPX5yRmSrEpcz77DAZ1TOYCmRe6PpR+VXlbk7gp1Lc9zfbm4XkkLq+/NLYFw=\n=JqO5\n-----END PGP SIGNATURE-----\n", "payload": "tree 76d853d0f6921d878e82225473c962b2736ca905\nparent 4d457e26e15f052266d724adc33b0e934208ce10\nparent 9485d6efbaf66a90eac0d6a90faa7520ca670ee6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626889977 +0000\ncommitter GitHub <noreply@github.com> 1626889977 +0000\n\nMerge #9666\n\n9666: minor: Fix some clippy lints in ide_completion r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1864147d9203d975cced8a69d8428c5a8f155c3d", "html_url": "https://github.com/rust-lang/rust/commit/1864147d9203d975cced8a69d8428c5a8f155c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1864147d9203d975cced8a69d8428c5a8f155c3d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d457e26e15f052266d724adc33b0e934208ce10", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d457e26e15f052266d724adc33b0e934208ce10", "html_url": "https://github.com/rust-lang/rust/commit/4d457e26e15f052266d724adc33b0e934208ce10"}, {"sha": "9485d6efbaf66a90eac0d6a90faa7520ca670ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9485d6efbaf66a90eac0d6a90faa7520ca670ee6", "html_url": "https://github.com/rust-lang/rust/commit/9485d6efbaf66a90eac0d6a90faa7520ca670ee6"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "72b68f3b9f91ed3e0c4348e21d5bd83a9d177aa3", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(\"target_vendor\") => KNOWN_VENDOR.iter().for_each(add_completion),\n         Some(\"target_endian\") => [\"little\", \"big\"].iter().for_each(add_completion),\n         Some(name) => {\n-            ctx.krate.map(|krate| {\n+            if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n                     let mut item = CompletionItem::new(\n                         CompletionKind::Attribute,\n@@ -43,10 +43,10 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n \n                     acc.add(item.build());\n                 })\n-            });\n+            };\n         }\n         None => {\n-            ctx.krate.map(|krate| {\n+            if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n                     let item = CompletionItem::new(\n                         CompletionKind::Attribute,\n@@ -55,12 +55,12 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n                     );\n                     acc.add(item.build());\n                 })\n-            });\n+            }\n         }\n     };\n }\n \n-const KNOWN_ARCH: [&'static str; 19] = [\n+const KNOWN_ARCH: [&str; 19] = [\n     \"aarch64\",\n     \"arm\",\n     \"avr\",\n@@ -82,10 +82,9 @@ const KNOWN_ARCH: [&'static str; 19] = [\n     \"x86_64\",\n ];\n \n-const KNOWN_ENV: [&'static str; 7] =\n-    [\"eabihf\", \"gnu\", \"gnueabihf\", \"msvc\", \"relibc\", \"sgx\", \"uclibc\"];\n+const KNOWN_ENV: [&str; 7] = [\"eabihf\", \"gnu\", \"gnueabihf\", \"msvc\", \"relibc\", \"sgx\", \"uclibc\"];\n \n-const KNOWN_OS: [&'static str; 20] = [\n+const KNOWN_OS: [&str; 20] = [\n     \"cuda\",\n     \"dragonfly\",\n     \"emscripten\",\n@@ -108,5 +107,5 @@ const KNOWN_OS: [&'static str; 20] = [\n     \"windows\",\n ];\n \n-const KNOWN_VENDOR: [&'static str; 8] =\n+const KNOWN_VENDOR: [&str; 8] =\n     [\"apple\", \"fortanix\", \"nvidia\", \"pc\", \"sony\", \"unknown\", \"wrs\", \"uwp\"];"}, {"sha": "8b17be09b1ccbfed46a38aad5a0c22d7e5118a11", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -15,9 +15,8 @@ pub(super) fn complete_lint(\n     lints_completions: &[Lint],\n ) {\n     if let Some(existing_lints) = super::parse_comma_sep_input(derive_input) {\n-        for lint_completion in lints_completions\n-            .into_iter()\n-            .filter(|completion| !existing_lints.contains(completion.label))\n+        for lint_completion in\n+            lints_completions.iter().filter(|completion| !existing_lints.contains(completion.label))\n         {\n             let mut item = CompletionItem::new(\n                 CompletionKind::Attribute,"}, {"sha": "8ac54cc1b4a070b77627a154c9980fcb8f95d12d", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -322,8 +322,8 @@ fn postfix_snippet(\n     let mut item = CompletionItem::new(CompletionKind::Postfix, ctx.source_range(), label);\n     item.detail(detail).kind(CompletionItemKind::Snippet).snippet_edit(cap, edit);\n     if ctx.original_token.text() == label {\n-        let mut relevance = CompletionRelevance::default();\n-        relevance.exact_postfix_snippet_match = true;\n+        let relevance =\n+            CompletionRelevance { exact_postfix_snippet_match: true, ..Default::default() };\n         item.set_relevance(relevance);\n     }\n "}, {"sha": "d4061203c71d0420dd0299dbb97b1f1162556938", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn add_format_like_completions(\n \n     if parser.parse().is_ok() {\n         for (label, macro_name) in KINDS {\n-            let snippet = parser.into_suggestion(macro_name);\n+            let snippet = parser.to_suggestion(macro_name);\n \n             postfix_snippet(ctx, cap, dot_receiver, label, macro_name, &snippet).add_to(acc);\n         }\n@@ -201,7 +201,7 @@ impl FormatStrParser {\n         Ok(())\n     }\n \n-    pub(crate) fn into_suggestion(&self, macro_name: &str) -> String {\n+    pub(crate) fn to_suggestion(&self, macro_name: &str) -> String {\n         assert!(self.parsed, \"Attempt to get a suggestion from not parsed expression\");\n \n         let expressions_as_string = self.extracted_expressions.join(\", \");\n@@ -283,7 +283,7 @@ mod tests {\n             let mut parser = FormatStrParser::new((*input).to_owned());\n             parser.parse().expect(\"Parsing must succeed\");\n \n-            assert_eq!(&parser.into_suggestion(*kind), output);\n+            assert_eq!(&parser.to_suggestion(*kind), output);\n         }\n     }\n }"}, {"sha": "4609f2e967548d18ec77396a8388443e77e5ee72", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -12,10 +12,7 @@ use crate::{\n     render::RenderContext,\n };\n \n-pub(crate) fn render_const<'a>(\n-    ctx: RenderContext<'a>,\n-    const_: hir::Const,\n-) -> Option<CompletionItem> {\n+pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     ConstRender::new(ctx, const_)?.render()\n }\n \n@@ -50,7 +47,7 @@ impl<'a> ConstRender<'a> {\n         if let Some(actm) = self.const_.as_assoc_item(db) {\n             if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n                 item.trait_name(trt.name(db).to_string());\n-                item.insert_text(name.clone());\n+                item.insert_text(name);\n             }\n         }\n "}, {"sha": "44a5ceb25ad60c45cebbb584bae9218747e42518", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     CompletionRelevance,\n };\n \n-pub(crate) fn render_variant<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_variant(\n+    ctx: RenderContext<'_>,\n     import_to_add: Option<ImportEdit>,\n     local_name: Option<hir::Name>,\n     variant: hir::Variant,"}, {"sha": "87714def96710c4c81459b76139aeec130b17a2b", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -13,8 +13,8 @@ use crate::{\n     },\n };\n \n-pub(crate) fn render_fn<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_fn(\n+    ctx: RenderContext<'_>,\n     import_to_add: Option<ImportEdit>,\n     local_name: Option<hir::Name>,\n     fn_: hir::Function,\n@@ -23,8 +23,8 @@ pub(crate) fn render_fn<'a>(\n     Some(FunctionRender::new(ctx, None, local_name, fn_, false)?.render(import_to_add))\n }\n \n-pub(crate) fn render_method<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_method(\n+    ctx: RenderContext<'_>,\n     import_to_add: Option<ImportEdit>,\n     receiver: Option<hir::Name>,\n     local_name: Option<hir::Name>,"}, {"sha": "80c05273ca376e63ecdc981c6b72a3195931fc8e", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -10,8 +10,8 @@ use crate::{\n     render::RenderContext,\n };\n \n-pub(crate) fn render_macro<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_macro(\n+    ctx: RenderContext<'_>,\n     import_to_add: Option<ImportEdit>,\n     name: hir::Name,\n     macro_: hir::MacroDef,\n@@ -76,12 +76,10 @@ impl<'a> MacroRender<'a> {\n     fn label(&self) -> String {\n         if self.needs_bang() && self.ctx.snippet_cap().is_some() {\n             format!(\"{}!{}\u2026{}\", self.name, self.bra, self.ket)\n+        } else if self.macro_.kind() == hir::MacroKind::Derive {\n+            self.name.to_string()\n         } else {\n-            if self.macro_.kind() == hir::MacroKind::Derive {\n-                self.name.to_string()\n-            } else {\n-                self.banged_name()\n-            }\n+            self.banged_name()\n         }\n     }\n "}, {"sha": "17dd6662f5f436afb6b19a96af3a0990cbab034c", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -139,7 +139,7 @@ fn visible_fields(\n     let module = ctx.completion.scope.module()?;\n     let n_fields = fields.len();\n     let fields = fields\n-        .into_iter()\n+        .iter()\n         .filter(|field| field.is_visible_from(ctx.db(), module))\n         .copied()\n         .collect::<Vec<_>>();"}, {"sha": "6021448e78447dd7face3999d6fa4f6a8423ea68", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1864147d9203d975cced8a69d8428c5a8f155c3d/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=1864147d9203d975cced8a69d8428c5a8f155c3d", "patch": "@@ -12,15 +12,15 @@ use crate::{\n     render::RenderContext,\n };\n \n-pub(crate) fn render_type_alias<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_type_alias(\n+    ctx: RenderContext<'_>,\n     type_alias: hir::TypeAlias,\n ) -> Option<CompletionItem> {\n     TypeAliasRender::new(ctx, type_alias)?.render(false)\n }\n \n-pub(crate) fn render_type_alias_with_eq<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_type_alias_with_eq(\n+    ctx: RenderContext<'_>,\n     type_alias: hir::TypeAlias,\n ) -> Option<CompletionItem> {\n     TypeAliasRender::new(ctx, type_alias)?.render(true)\n@@ -63,7 +63,7 @@ impl<'a> TypeAliasRender<'a> {\n         if let Some(actm) = self.type_alias.as_assoc_item(db) {\n             if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n                 item.trait_name(trt.name(db).to_string());\n-                item.insert_text(name.clone());\n+                item.insert_text(name);\n             }\n         }\n "}]}