{"sha": "317059985a915bcbc6e7d568143a25b96c64c1ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNzA1OTk4NWE5MTViY2JjNmU3ZDU2ODE0M2EyNWI5NmM2NGMxYWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-12T07:54:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-12T07:54:56Z"}, "message": "Merge #10202\n\n10202: fix: Type param hover shows correct sized bounds. r=flodiebold a=iDawer\n\nCloses  #9949\r\n\r\nThis adds implicit `: Sized` bound to type parameters at lowering step.\r\n\r\nHovering on type parameter does not show it's `: Sized` bound be it set explicitly or implicitly. This is because it doesn't track that the bound was set implicitly.\r\n\r\n### Perf\r\n\r\n```rust\r\n./target/rust-analyzer-baseline-3dae94bf -q analysis-stats --memory-usage .\r\nDatabase loaded:     4.51s, 311minstr, 110mb (metadata 1.08s, 22minstr, 743kb; build 3.20s, 8730kinstr, -237kb)\r\n  crates: 38, mods: 770, decls: 17173, fns: 12835\r\nItem Collection:     29.63s, 85ginstr, 372mb\r\n  exprs: 353460, ??ty: 364 (0%), ?ty: 232 (0%), !ty: 144\r\nInference:           118.25s, 284ginstr, 601mb\r\nTotal:               147.88s, 370ginstr, 973mb\r\n\r\n./target/rust-analyzer-hover-ty-param-dfb15292 -q analysis-stats --memory-usage .\r\nDatabase loaded:     4.53s, 311minstr, 110mb (metadata 1.10s, 22minstr, 743kb; build 3.20s, 8672kinstr, -189kb)\r\n  crates: 38, mods: 770, decls: 17173, fns: 12835\r\nItem Collection:     29.59s, 85ginstr, 372mb\r\n  exprs: 353460, ??ty: 364 (0%), ?ty: 232 (0%), !ty: 144\r\nInference:           121.69s, 296ginstr, 601mb\r\nTotal:               151.28s, 382ginstr, 974mb\r\n\r\n```\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "0f357a8b54be8da0abe85b9c1adbf8fc8b1b205b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f357a8b54be8da0abe85b9c1adbf8fc8b1b205b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317059985a915bcbc6e7d568143a25b96c64c1ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhPbJQCRBK7hj4Ov3rIwAAasAIADXsv/sf0/ISR3HzfOp58mId\n/IXj93M+F3KoAzWXfigpviXe5Xg2mNyNVLBjrWrgjwU/B4tcHGzXSfvEjdUCE/Pg\nh0TlOnGxXgjVNbSv5tnjuf9277QphAa2/uVmUvqMkJcj6qrY+Li7xWdc2Qp/QZYX\nX64aKH1KrykTxF+u5QA1q4HbhKCqygdKzcq96w5rlRSMBWVCXpDbA9FAou7Hd6f9\nDyRc65PCoc1wwybTX4gubhWSb8fewSMOk7uCG9QhIVJo3qAT/Wbv8poH8c3kcdvd\n1omZxf4qqBgIYkCebHmbzhAS/g8P7VPTZguYehkd2hzo0bKkp7q+r0mycI+MtXg=\n=jyQB\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f357a8b54be8da0abe85b9c1adbf8fc8b1b205b\nparent d270679997eb3aaf85de5173ff3276bc3c48fa41\nparent 964c7b3211f0e317cffe9047761f46269087ddbd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631433296 +0000\ncommitter GitHub <noreply@github.com> 1631433296 +0000\n\nMerge #10202\n\n10202: fix: Type param hover shows correct sized bounds. r=flodiebold a=iDawer\n\nCloses  #9949\r\n\r\nThis adds implicit `: Sized` bound to type parameters at lowering step.\r\n\r\nHovering on type parameter does not show it's `: Sized` bound be it set explicitly or implicitly. This is because it doesn't track that the bound was set implicitly.\r\n\r\n### Perf\r\n\r\n```rust\r\n./target/rust-analyzer-baseline-3dae94bf -q analysis-stats --memory-usage .\r\nDatabase loaded:     4.51s, 311minstr, 110mb (metadata 1.08s, 22minstr, 743kb; build 3.20s, 8730kinstr, -237kb)\r\n  crates: 38, mods: 770, decls: 17173, fns: 12835\r\nItem Collection:     29.63s, 85ginstr, 372mb\r\n  exprs: 353460, ??ty: 364 (0%), ?ty: 232 (0%), !ty: 144\r\nInference:           118.25s, 284ginstr, 601mb\r\nTotal:               147.88s, 370ginstr, 973mb\r\n\r\n./target/rust-analyzer-hover-ty-param-dfb15292 -q analysis-stats --memory-usage .\r\nDatabase loaded:     4.53s, 311minstr, 110mb (metadata 1.10s, 22minstr, 743kb; build 3.20s, 8672kinstr, -189kb)\r\n  crates: 38, mods: 770, decls: 17173, fns: 12835\r\nItem Collection:     29.59s, 85ginstr, 372mb\r\n  exprs: 353460, ??ty: 364 (0%), ?ty: 232 (0%), !ty: 144\r\nInference:           121.69s, 296ginstr, 601mb\r\nTotal:               151.28s, 382ginstr, 974mb\r\n\r\n```\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317059985a915bcbc6e7d568143a25b96c64c1ae", "html_url": "https://github.com/rust-lang/rust/commit/317059985a915bcbc6e7d568143a25b96c64c1ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317059985a915bcbc6e7d568143a25b96c64c1ae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d270679997eb3aaf85de5173ff3276bc3c48fa41", "url": "https://api.github.com/repos/rust-lang/rust/commits/d270679997eb3aaf85de5173ff3276bc3c48fa41", "html_url": "https://github.com/rust-lang/rust/commit/d270679997eb3aaf85de5173ff3276bc3c48fa41"}, {"sha": "964c7b3211f0e317cffe9047761f46269087ddbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/964c7b3211f0e317cffe9047761f46269087ddbd", "html_url": "https://github.com/rust-lang/rust/commit/964c7b3211f0e317cffe9047761f46269087ddbd"}], "stats": {"total": 222, "additions": 201, "deletions": 21}, "files": [{"sha": "4ef7d399de3ec078f1d2de9c10586e203d303133", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=317059985a915bcbc6e7d568143a25b96c64c1ae", "patch": "@@ -5,16 +5,19 @@ use hir_def::{\n     type_ref::{TypeBound, TypeRef},\n     AdtId, GenericDefId,\n };\n-use hir_ty::display::{\n-    write_bounds_like_dyn_trait_with_prefix, write_visibility, HirDisplay, HirDisplayError,\n-    HirFormatter, SizedByDefault,\n+use hir_ty::{\n+    display::{\n+        write_bounds_like_dyn_trait_with_prefix, write_visibility, HirDisplay, HirDisplayError,\n+        HirFormatter, SizedByDefault,\n+    },\n+    Interner, TraitRefExt, WhereClause,\n };\n-use hir_ty::Interner;\n use syntax::ast::{self, NameOwner};\n \n use crate::{\n-    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasVisibility, LifetimeParam,\n-    Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeParam, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,\n+    LifetimeParam, Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeParam, Union,\n+    Variant,\n };\n \n impl HirDisplay for Function {\n@@ -234,12 +237,24 @@ impl HirDisplay for GenericParam {\n impl HirDisplay for TypeParam {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"{}\", self.name(f.db))?;\n+        if f.omit_verbose_types() {\n+            return Ok(());\n+        }\n+\n         let bounds = f.db.generic_predicates_for_param(self.id);\n         let substs = TyBuilder::type_params_subst(f.db, self.id.parent);\n-        let predicates =\n-            bounds.iter().cloned().map(|b| b.substitute(&Interner, &substs)).collect::<Vec<_>>();\n-        if !(predicates.is_empty() || f.omit_verbose_types()) {\n-            let default_sized = SizedByDefault::Sized { anchor: self.module(f.db).krate().id };\n+        let predicates: Vec<_> =\n+            bounds.iter().cloned().map(|b| b.substitute(&Interner, &substs)).collect();\n+        let krate = self.id.parent.krate(f.db).id;\n+        let sized_trait =\n+            f.db.lang_item(krate, \"sized\".into()).and_then(|lang_item| lang_item.as_trait());\n+        let has_only_sized_bound = predicates.iter().all(move |pred| match pred.skip_binders() {\n+            WhereClause::Implemented(it) => Some(it.hir_trait_id()) == sized_trait,\n+            _ => false,\n+        });\n+        let has_only_not_sized_bound = predicates.is_empty();\n+        if !has_only_sized_bound || has_only_not_sized_bound {\n+            let default_sized = SizedByDefault::Sized { anchor: krate };\n             write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, default_sized, f)?;\n         }\n         Ok(())"}, {"sha": "13785e3a6cdf86d550ae07b2528363bc3696ae35", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=317059985a915bcbc6e7d568143a25b96c64c1ae", "patch": "@@ -1024,7 +1024,7 @@ pub(crate) fn generic_predicates_for_param_query(\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let generics = generics(db.upcast(), param_id.parent);\n-    resolver\n+    let mut predicates: Vec<_> = resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n         .filter(|pred| match pred {\n@@ -1038,7 +1038,15 @@ pub(crate) fn generic_predicates_for_param_query(\n             WherePredicate::Lifetime { .. } => false,\n         })\n         .flat_map(|pred| ctx.lower_where_predicate(pred, true).map(|p| make_binders(&generics, p)))\n-        .collect()\n+        .collect();\n+\n+    let subst = generics.bound_vars_subst(DebruijnIndex::INNERMOST);\n+    let explicitly_unsized_tys = ctx.unsized_types.into_inner();\n+    let implicitly_sized_predicates =\n+        implicitly_sized_clauses(db, param_id.parent, &explicitly_unsized_tys, &subst, &resolver)\n+            .map(|p| make_binders(&generics, crate::wrap_empty_binders(p)));\n+    predicates.extend(implicitly_sized_predicates);\n+    predicates.into()\n }\n \n pub(crate) fn generic_predicates_for_param_recover("}, {"sha": "68b75f3ffc3f6751c9c66c2866d60e0beefe3004", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 166, "deletions": 9, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317059985a915bcbc6e7d568143a25b96c64c1ae/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=317059985a915bcbc6e7d568143a25b96c64c1ae", "patch": "@@ -3564,20 +3564,21 @@ fn foo() {\n             r#\"\n //- minicore: sized\n struct Foo<T>(T);\n-trait Copy {}\n-trait Clone {}\n-impl<T: Copy + Clone> Foo<T$0> where T: Sized {}\n+trait TraitA {}\n+trait TraitB {}\n+impl<T: TraitA + TraitB> Foo<T$0> where T: Sized {}\n \"#,\n             expect![[r#\"\n                 *T*\n \n                 ```rust\n-                T: Copy + Clone\n+                T: TraitA + TraitB\n                 ```\n             \"#]],\n         );\n         check(\n             r#\"\n+//- minicore: sized\n struct Foo<T>(T);\n impl<T> Foo<T$0> {}\n \"#,\n@@ -3592,6 +3593,7 @@ impl<T> Foo<T$0> {}\n         // lifetimes bounds arent being tracked yet\n         check(\n             r#\"\n+//- minicore: sized\n struct Foo<T>(T);\n impl<T: 'static> Foo<T$0> {}\n \"#,\n@@ -3606,25 +3608,180 @@ impl<T: 'static> Foo<T$0> {}\n     }\n \n     #[test]\n-    fn hover_type_param_not_sized() {\n+    fn hover_type_param_sized_bounds() {\n+        // implicit `: Sized` bound\n         check(\n             r#\"\n //- minicore: sized\n+trait Trait {}\n struct Foo<T>(T);\n-trait Copy {}\n-trait Clone {}\n-impl<T: Copy + Clone> Foo<T$0> where T: ?Sized {}\n+impl<T: Trait> Foo<T$0> {}\n+\"#,\n+            expect![[r#\"\n+                *T*\n+\n+                ```rust\n+                T: Trait\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- minicore: sized\n+trait Trait {}\n+struct Foo<T>(T);\n+impl<T: Trait + ?Sized> Foo<T$0> {}\n \"#,\n             expect![[r#\"\n                 *T*\n \n                 ```rust\n-                T: Copy + Clone + ?Sized\n+                T: Trait + ?Sized\n                 ```\n             \"#]],\n         );\n     }\n \n+    mod type_param_sized_bounds {\n+        use super::*;\n+\n+        #[test]\n+        fn single_implicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn single_explicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn single_relaxed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: ?Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: ?Sized\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_implicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_explicit() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait + Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn multiple_relaxed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Trait + ?Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait + ?Sized\n+                    ```\n+                \"#]],\n+            );\n+        }\n+\n+        #[test]\n+        fn mixed() {\n+            check(\n+                r#\"\n+//- minicore: sized\n+fn foo<T$0: ?Sized + Sized + Sized>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T\n+                    ```\n+                \"#]],\n+            );\n+            check(\n+                r#\"\n+//- minicore: sized\n+trait Trait {}\n+fn foo<T$0: Sized + ?Sized + Sized + Trait>() {}\n+\"#,\n+                expect![[r#\"\n+                    *T*\n+\n+                    ```rust\n+                    T: Trait\n+                    ```\n+                \"#]],\n+            );\n+        }\n+    }\n+\n     #[test]\n     fn hover_const_param() {\n         check("}]}