{"sha": "c877ff3664abea60d69b8acf8e7dce85c2ffd859", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzdmZjM2NjRhYmVhNjBkNjliOGFjZjhlN2RjZTg1YzJmZmQ4NTk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-05T02:08:40Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-05T02:35:44Z"}, "message": "Fix rustdoc warnings about invalid Rust syntax", "tree": {"sha": "e153006fa8a7b7d4c4382f8aa8b92274ed5def4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e153006fa8a7b7d4c4382f8aa8b92274ed5def4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c877ff3664abea60d69b8acf8e7dce85c2ffd859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c877ff3664abea60d69b8acf8e7dce85c2ffd859", "html_url": "https://github.com/rust-lang/rust/commit/c877ff3664abea60d69b8acf8e7dce85c2ffd859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c877ff3664abea60d69b8acf8e7dce85c2ffd859/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a835b483fe0418b48ca44afb65cd0dd6bad4eb9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a835b483fe0418b48ca44afb65cd0dd6bad4eb9b", "html_url": "https://github.com/rust-lang/rust/commit/a835b483fe0418b48ca44afb65cd0dd6bad4eb9b"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "053ca7c23d26e2b0fde7864be1873689895a9a3e", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=c877ff3664abea60d69b8acf8e7dce85c2ffd859", "patch": "@@ -1225,7 +1225,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    ///     <T as Foo<'0>>::Item: '1\n+    /// ```ignore (MIR syntax)\n+    /// <T as Foo<'0>>::Item: '1\n+    /// ```\n     ///\n     /// In particular, this routine winds up being important when\n     /// there are bounds like `where <T as Foo<'a>>::Item: 'b` in the"}, {"sha": "67bc886b9380a852e863c9e808fa8cb3248e9d6d", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=c877ff3664abea60d69b8acf8e7dce85c2ffd859", "patch": "@@ -659,7 +659,8 @@ pub fn write_allocations<'tcx>(\n /// Dumps the size and metadata and content of an allocation to the given writer.\n /// The expectation is that the caller first prints other relevant metadata, so the exact\n /// format of this function is (*without* leading or trailing newline):\n-/// ```\n+///\n+/// ```text\n /// size: {}, align: {}) {\n ///     <bytes>\n /// }"}, {"sha": "4f351ab176d415f53415811cec9e660108117ef8", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=c877ff3664abea60d69b8acf8e7dce85c2ffd859", "patch": "@@ -38,13 +38,16 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// then `substs` would be `['a, T]`.\n     pub substs: SubstsRef<'tcx>,\n \n-    /// The span of this particular definition of the opaque type.  So\n+    /// The span of this particular definition of the opaque type. So\n     /// for example:\n     ///\n     /// ```\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n-    ///             ^^^ This is the span we are looking for!\n+    /// //          ^^^ This is the span we are looking for!\n+    /// // ...\n+    /// # unimplemented!()\n+    /// }\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}, {"sha": "179e383be2e2bb9cfcf638a74493f04cd06de30e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=c877ff3664abea60d69b8acf8e7dce85c2ffd859", "patch": "@@ -1275,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are fields which aren't provided.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n     ///  --> src/main.rs:8:5\n     ///   |\n@@ -1327,7 +1327,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are no visible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n     ///  --> src/main.rs:8:5\n     ///   |"}, {"sha": "53bc2069b76ce34e08b0f192c5a306a3596f4f85", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877ff3664abea60d69b8acf8e7dce85c2ffd859/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=c877ff3664abea60d69b8acf8e7dce85c2ffd859", "patch": "@@ -1381,7 +1381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: pattern requires `..` due to inaccessible fields\n     ///   --> src/main.rs:10:9\n     ///    |\n@@ -1431,7 +1431,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n     ///   --> src/main.rs:15:9\n     ///    |"}]}