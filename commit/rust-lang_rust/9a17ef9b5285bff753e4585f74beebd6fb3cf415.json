{"sha": "9a17ef9b5285bff753e4585f74beebd6fb3cf415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTdlZjliNTI4NWJmZjc1M2U0NTg1Zjc0YmVlYmQ2ZmIzY2Y0MTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-06T22:14:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:37:57Z"}, "message": "librustc: Stop parsing `assert`.", "tree": {"sha": "0b31bf9b64d571ed64cb54efc5f8f9e2bdfbd46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b31bf9b64d571ed64cb54efc5f8f9e2bdfbd46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a17ef9b5285bff753e4585f74beebd6fb3cf415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a17ef9b5285bff753e4585f74beebd6fb3cf415", "html_url": "https://github.com/rust-lang/rust/commit/9a17ef9b5285bff753e4585f74beebd6fb3cf415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a17ef9b5285bff753e4585f74beebd6fb3cf415/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e74b5e91b0b6b6a5613f54479d2ef9fe9c392f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e74b5e91b0b6b6a5613f54479d2ef9fe9c392f", "html_url": "https://github.com/rust-lang/rust/commit/d7e74b5e91b0b6b6a5613f54479d2ef9fe9c392f"}], "stats": {"total": 115, "additions": 38, "deletions": 77}, "files": [{"sha": "19afbc4b2b7ff881e89235aacd8e8dd3509052de", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -109,8 +109,7 @@ pub pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           | ast::expr_match(*) | ast::expr_while(*)  => { false }\n \n           // https://github.com/mozilla/rust/issues/929\n-          ast::expr_cast(*) | ast::expr_assert(*) |\n-          ast::expr_binary(*) | ast::expr_assign(*) |\n+          ast::expr_cast(*) | ast::expr_binary(*) | ast::expr_assign(*) |\n           ast::expr_assign_op(*) => { false }\n \n           ast::expr_ret(option::None) => { false }"}, {"sha": "5d652571ab1b6629da49e889a42c2d81dc888f31", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -617,11 +617,11 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n       // otherwise, live nodes are not required:\n       expr_index(*) | expr_field(*) | expr_vstore(*) | expr_vec(*) |\n       expr_call(*) | expr_method_call(*) | expr_tup(*) | expr_log(*) |\n-      expr_binary(*) | expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n-      expr_loop_body(*) | expr_do_body(*) | expr_cast(*) | expr_unary(*) |\n-      expr_break(_) | expr_again(_) | expr_lit(_) | expr_ret(*) |\n-      expr_block(*) | expr_assign(*) | expr_swap(*) | expr_assign_op(*) |\n-      expr_mac(*) | expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n+      expr_binary(*) | expr_addr_of(*) | expr_copy(*) | expr_loop_body(*) |\n+      expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_break(_) |\n+      expr_again(_) | expr_lit(_) | expr_ret(*) | expr_block(*) |\n+      expr_assign(*) | expr_swap(*) | expr_assign_op(*) | expr_mac(*) |\n+      expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1332,7 +1332,6 @@ pub impl Liveness {\n             self.propagate_through_exprs(~[l, r], succ)\n           }\n \n-          expr_assert(e) |\n           expr_addr_of(_, e) |\n           expr_copy(e) |\n           expr_loop_body(e) |\n@@ -1493,8 +1492,9 @@ pub impl Liveness {\n         // repeat until fixed point is reached:\n         while self.merge_from_succ(ln, body_ln, first_merge) {\n             first_merge = false;\n-            fail_unless!(cond_ln == self.propagate_through_opt_expr(cond, ln));\n-            assert body_ln == self.with_loop_nodes(expr.id, succ, ln,\n+            fail_unless!(cond_ln == self.propagate_through_opt_expr(cond,\n+                                                                    ln));\n+            fail_unless!(body_ln == self.with_loop_nodes(expr.id, succ, ln,\n             || {\n                 self.propagate_through_block(body, cond_ln)\n             }));\n@@ -1611,11 +1611,11 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       expr_call(*) | expr_method_call(*) | expr_if(*) | expr_match(*) |\n       expr_while(*) | expr_loop(*) | expr_index(*) | expr_field(*) |\n       expr_vstore(*) | expr_vec(*) | expr_tup(*) | expr_log(*) |\n-      expr_binary(*) | expr_assert(*) | expr_copy(*) | expr_loop_body(*) |\n-      expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_ret(*) |\n-      expr_break(*) | expr_again(*) | expr_lit(_) | expr_block(*) |\n-      expr_swap(*) | expr_mac(*) | expr_addr_of(*) | expr_struct(*) |\n-      expr_repeat(*) | expr_paren(*) => {\n+      expr_binary(*) | expr_copy(*) | expr_loop_body(*) | expr_do_body(*) |\n+      expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n+      expr_again(*) | expr_lit(_) | expr_block(*) | expr_swap(*) |\n+      expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |\n+      expr_paren(*) => {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "00cab7961cada0b4238477eec5ab14b3ba682488", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -437,19 +437,17 @@ pub impl mem_categorization_ctxt {\n \n           ast::expr_paren(e) => self.cat_expr_unadjusted(e),\n \n-          ast::expr_addr_of(*) | ast::expr_call(*) |\n-          ast::expr_swap(*) | ast::expr_assign(*) |\n-          ast::expr_assign_op(*) | ast::expr_fn_block(*) |\n-          ast::expr_assert(*) | ast::expr_ret(*) |\n-          ast::expr_loop_body(*) | ast::expr_do_body(*) |\n-          ast::expr_unary(*) | ast::expr_method_call(*) |\n-          ast::expr_copy(*) | ast::expr_cast(*) |\n+          ast::expr_addr_of(*) | ast::expr_call(*) | ast::expr_swap(*) |\n+          ast::expr_assign(*) | ast::expr_assign_op(*) |\n+          ast::expr_fn_block(*) | ast::expr_ret(*) | ast::expr_loop_body(*) |\n+          ast::expr_do_body(*) | ast::expr_unary(*) |\n+          ast::expr_method_call(*) | ast::expr_copy(*) | ast::expr_cast(*) |\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n-          ast::expr_if(*) | ast::expr_log(*) |\n-          ast::expr_binary(*) | ast::expr_while(*) |\n-          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_match(*) |\n-          ast::expr_lit(*) | ast::expr_break(*) | ast::expr_mac(*) |\n-          ast::expr_again(*) | ast::expr_struct(*) | ast::expr_repeat(*) => {\n+          ast::expr_if(*) | ast::expr_log(*) | ast::expr_binary(*) |\n+          ast::expr_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n+          ast::expr_match(*) | ast::expr_lit(*) | ast::expr_break(*) |\n+          ast::expr_mac(*) | ast::expr_again(*) | ast::expr_struct(*) |\n+          ast::expr_repeat(*) => {\n             return self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "182697b290f76b029b67d2b911f2453230aea966", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -571,10 +571,6 @@ pub impl VisitContext {\n                 self.use_expr(b_expr, Read, visitor);\n             }\n \n-            expr_assert(cond_expr) => {\n-                self.consume_expr(cond_expr, visitor);\n-            }\n-\n             expr_while(cond_expr, ref blk) => {\n                 self.consume_expr(cond_expr, visitor);\n                 self.consume_block(blk, visitor);"}, {"sha": "e60223c9effb72d1d4e3162c8a0edaa9e6150f06", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -322,25 +322,6 @@ pub fn trans_ret(bcx: block, e: Option<@ast::expr>) -> block {\n     return bcx;\n }\n \n-pub fn trans_check_expr(bcx: block,\n-                        chk_expr: @ast::expr,\n-                        pred_expr: @ast::expr,\n-                        s: &str)\n-                     -> block {\n-    let _icx = bcx.insn_ctxt(\"trans_check_expr\");\n-    let expr_str = @(fmt!(\"%s %s failed\",\n-                          s, expr_to_str(pred_expr, bcx.ccx().sess.intr())));\n-    let Result {bcx, val} = {\n-        do with_scope_result(bcx, chk_expr.info(), ~\"check\") |bcx| {\n-            expr::trans_to_datum(bcx, pred_expr).to_result()\n-        }\n-    };\n-    let val = bool_to_i1(bcx, val);\n-    do with_cond(bcx, Not(bcx, val)) |bcx| {\n-        trans_fail(bcx, Some(pred_expr.span), expr_str)\n-    }\n-}\n-\n pub fn trans_fail_expr(bcx: block,\n                        sp_opt: Option<span>,\n                        fail_expr: Option<@ast::expr>)"}, {"sha": "b7942fa66dbbddac267a8a1a7add0bbcbe283d03", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -510,9 +510,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n         ast::expr_log(_, lvl, a) => {\n             return controlflow::trans_log(expr, lvl, bcx, a);\n         }\n-        ast::expr_assert(a) => {\n-            return controlflow::trans_check_expr(bcx, expr, a, ~\"Assertion\");\n-        }\n         ast::expr_while(cond, ref body) => {\n             return controlflow::trans_while(bcx, cond, body);\n         }"}, {"sha": "710bb5eb346011ae99c329fa78575f56d2336be8", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -349,11 +349,10 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         mark_for_method_call(cx, e.id, e.callee_id);\n       }\n       expr_paren(e) => mark_for_expr(cx, e),\n-      expr_match(*) | expr_block(_) | expr_if(*) |\n-      expr_while(*) | expr_break(_) | expr_again(_) |\n-      expr_unary(_, _) | expr_lit(_) | expr_assert(_) |\n-      expr_mac(_) | expr_addr_of(_, _) |\n-      expr_ret(_) | expr_loop(_, _) |\n+\n+      expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n+      expr_break(_) | expr_again(_) | expr_unary(_, _) | expr_lit(_) |\n+      expr_mac(_) | expr_addr_of(_, _) | expr_ret(_) | expr_loop(_, _) |\n       expr_loop_body(_) | expr_do_body(_) => ()\n     }\n }"}, {"sha": "082c64ced8ed7a486cb710b6855be70ce8892b7e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -3114,7 +3114,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_again(*) |\n         ast::expr_ret(*) |\n         ast::expr_log(*) |\n-        ast::expr_assert(*) |\n         ast::expr_while(*) |\n         ast::expr_loop(*) |\n         ast::expr_assign(*) |"}, {"sha": "6efa62c55cc2472c0be28e60a907689ee3604d88", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -2309,10 +2309,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         check_expr(fcx, e);\n         fcx.write_nil(id);\n       }\n-      ast::expr_assert(e) => {\n-        bot = check_expr_has_type(fcx, e, ty::mk_bool(tcx));\n-        fcx.write_nil(id);\n-      }\n       ast::expr_copy(a) => {\n         bot = check_expr_with_opt_hint(fcx, a, expected);\n         fcx.write_ty(id, fcx.expr_ty(a));"}, {"sha": "818a444a4f38c339aaf8c03d255864570dff9069", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -692,7 +692,6 @@ pub mod guarantor {\n             ast::expr_again(*) |\n             ast::expr_ret(*) |\n             ast::expr_log(*) |\n-            ast::expr_assert(*) |\n             ast::expr_while(*) |\n             ast::expr_loop(*) |\n             ast::expr_assign(*) |"}, {"sha": "a6ccd69dd06558d4506c217888f9b1fce497ea32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -599,9 +599,6 @@ pub enum expr_ {\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n \n-    /* just an assert */\n-    expr_assert(@expr),\n-\n     expr_mac(mac),\n \n     // A struct literal expression."}, {"sha": "b8371c9e8d9623918a26830b0116ab42d3548ddd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -561,7 +561,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n-        expr_assert(e) => expr_assert(fld.fold_expr(e)),\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {\n             expr_struct("}, {"sha": "6f2d2c554aa93f020e901c883393363affb6fb7a", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -51,6 +51,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteTraitImplVisibility,\n     ObsoleteRecordType,\n     ObsoleteRecordPattern,\n+    ObsoleteAssertion,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -155,6 +156,10 @@ pub impl Parser {\n                 \"structural record pattern\",\n                 \"use a structure instead\"\n             ),\n+            ObsoleteAssertion => (\n+                \"assertion\",\n+                \"use `fail_unless!()` instead\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "384cf4f0e95179ce49c7bbb38e0fb4b9b9ae4051", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -21,7 +21,7 @@ use ast::{blk_check_mode, box, by_copy, by_ref, by_val};\n use ast::{crate, crate_cfg, decl, decl_item};\n use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n-use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n+use ast::{expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n@@ -76,6 +76,7 @@ use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n+use parse::obsolete::{ObsoleteAssertion};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -1208,8 +1209,8 @@ pub impl Parser {\n             self.expect(&token::RPAREN);\n         } else if self.eat_keyword(&~\"assert\") {\n             let e = self.parse_expr();\n-            ex = expr_assert(e);\n-            hi = e.span.hi;\n+            ex = expr_copy(e);  // whatever\n+            self.obsolete(*self.last_span, ObsoleteAssertion);\n         } else if self.eat_keyword(&~\"return\") {\n             if can_begin_expr(&*self.token) {\n                 let e = self.parse_expr();"}, {"sha": "4a8176abc6f1d5a1974554c11fdc1d864a423c6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -1427,10 +1427,6 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n           }\n         }\n       }\n-      ast::expr_assert(expr) => {\n-        word_nbsp(s, ~\"assert\");\n-        print_expr(s, expr);\n-      }\n       ast::expr_mac(ref m) => print_mac(s, (*m)),\n       ast::expr_paren(e) => {\n           popen(s);"}, {"sha": "6048256b90bfeb8d6760c37fd977632d993d6fe7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a17ef9b5285bff753e4585f74beebd6fb3cf415/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9a17ef9b5285bff753e4585f74beebd6fb3cf415", "patch": "@@ -496,8 +496,7 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n             (v.visit_expr)(b, e, v);\n         }\n         expr_addr_of(_, x) | expr_unary(_, x) |\n-        expr_loop_body(x) | expr_do_body(x) |\n-        expr_assert(x) => (v.visit_expr)(x, e, v),\n+        expr_loop_body(x) | expr_do_body(x) => (v.visit_expr)(x, e, v),\n         expr_lit(_) => (),\n         expr_cast(x, t) => {\n             (v.visit_expr)(x, e, v);"}]}