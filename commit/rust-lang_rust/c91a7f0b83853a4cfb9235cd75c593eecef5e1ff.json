{"sha": "c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "node_id": "C_kwDOAAsO6NoAKGM5MWE3ZjBiODM4NTNhNGNmYjkyMzVjZDc1YzU5M2VlY2VmNWUxZmY", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-24T23:01:18Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-27T19:18:46Z"}, "message": "Address review comments", "tree": {"sha": "2eb5c25c60b73db0155acbf72b6ab16c6393692f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb5c25c60b73db0155acbf72b6ab16c6393692f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "html_url": "https://github.com/rust-lang/rust/commit/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "html_url": "https://github.com/rust-lang/rust/commit/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32"}], "stats": {"total": 700, "additions": 357, "deletions": 343}, "files": [{"sha": "18a51020e14ed672bd0ab866752d478e475f50fd", "filename": "tests/compile-test.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -165,6 +165,7 @@ fn base_config(test_dir: &str) -> compiletest::Config {\n fn run_ui() {\n     let mut config = base_config(\"ui\");\n     config.rustfix_coverage = true;\n+    // use tests/clippy.toml\n     let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", fs::canonicalize(\"tests\").unwrap());\n     let _threads = VarGuard::set(\n         \"RUST_TEST_THREADS\",\n@@ -384,13 +385,17 @@ fn check_rustfix_coverage() {\n     let missing_coverage_path = Path::new(\"target/debug/test/ui/rustfix_missing_coverage.txt\");\n \n     if let Ok(missing_coverage_contents) = std::fs::read_to_string(missing_coverage_path) {\n-        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.is_sorted());\n+        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new));\n \n         for rs_path in missing_coverage_contents.lines() {\n-            let filename = rs_path.strip_prefix(\"tests/ui/\").unwrap();\n+            let filename = Path::new(rs_path).strip_prefix(\"tests/ui/\").unwrap();\n             assert!(\n-                RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.binary_search(&filename).is_ok(),\n-                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation\",\n+                RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS\n+                    .binary_search_by_key(&filename, Path::new)\n+                    .is_ok(),\n+                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n+                Please either add `// run-rustfix` at the top of file or add the file to \\\n+                `RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS`.\",\n                 rs_path,\n             );\n         }"}, {"sha": "63ae6e389f3d111b999fe0607986530d3a303c74", "filename": "tests/ui/needless_late_init.fixed", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.fixed?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![feature(let_chains)]\n-#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value, clippy::let_and_return)]\n+#![allow(\n+    unused,\n+    clippy::assign_op_pattern,\n+    clippy::let_and_return,\n+    clippy::let_unit_value,\n+    clippy::nonminimal_bool\n+)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n@@ -230,3 +236,23 @@ fn does_not_lint() {\n     let y = SignificantDrop;\n     x = SignificantDrop;\n }\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        \n+        let a = \"zero\";\n+\n+        \n+        \n+        let b = 1;\n+        let c = 2;\n+\n+        \n+        let d: usize = 1;\n+\n+        \n+        let e = format!(\"{}\", d);\n+    }\n+}"}, {"sha": "89a85c8e053cd81496a5ec901b346f266311076b", "filename": "tests/ui/needless_late_init.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![feature(let_chains)]\n-#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value, clippy::let_and_return)]\n+#![allow(\n+    unused,\n+    clippy::assign_op_pattern,\n+    clippy::let_and_return,\n+    clippy::let_unit_value,\n+    clippy::nonminimal_bool\n+)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n@@ -230,3 +236,23 @@ fn does_not_lint() {\n     let y = SignificantDrop;\n     x = SignificantDrop;\n }\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        let a;\n+        a = \"zero\";\n+\n+        let b;\n+        let c;\n+        b = 1;\n+        c = 2;\n+\n+        let d: usize;\n+        d = 1;\n+\n+        let e;\n+        e = format!(\"{}\", d);\n+    }\n+}"}, {"sha": "d17666e03ed2012d151284c4d5c42a99448ced7b", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:16:5\n+  --> $DIR/needless_late_init.rs:22:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -21,7 +21,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:25:5\n+  --> $DIR/needless_late_init.rs:31:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -42,7 +42,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:32:5\n+  --> $DIR/needless_late_init.rs:38:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -63,7 +63,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:40:5\n+  --> $DIR/needless_late_init.rs:46:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -84,7 +84,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:47:5\n+  --> $DIR/needless_late_init.rs:53:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -100,7 +100,7 @@ LL +         1 => \"three\",\n    | \n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:53:5\n+  --> $DIR/needless_late_init.rs:59:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:61:5\n+  --> $DIR/needless_late_init.rs:67:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -134,7 +134,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:65:5\n+  --> $DIR/needless_late_init.rs:71:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -148,7 +148,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:69:5\n+  --> $DIR/needless_late_init.rs:75:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -162,7 +162,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:88:5\n+  --> $DIR/needless_late_init.rs:94:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -183,7 +183,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:105:5\n+  --> $DIR/needless_late_init.rs:111:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -203,5 +203,72 @@ help: add a semicolon after the `match` expression\n LL |     };\n    |      +\n \n-error: aborting due to 11 previous errors\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:244:9\n+   |\n+LL |         let a;\n+   |         ^^^^^^ created here\n+LL |         a = \"zero\";\n+   |         ^^^^^^^^^^ initialised here\n+   |\n+help: declare `a` here\n+   |\n+LL |         let a = \"zero\";\n+   |         ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:247:9\n+   |\n+LL |         let b;\n+   |         ^^^^^^ created here\n+LL |         let c;\n+LL |         b = 1;\n+   |         ^^^^^ initialised here\n+   |\n+help: declare `b` here\n+   |\n+LL |         let b = 1;\n+   |         ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:248:9\n+   |\n+LL |         let c;\n+   |         ^^^^^^ created here\n+LL |         b = 1;\n+LL |         c = 2;\n+   |         ^^^^^ initialised here\n+   |\n+help: declare `c` here\n+   |\n+LL |         let c = 2;\n+   |         ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:252:9\n+   |\n+LL |         let d: usize;\n+   |         ^^^^^^^^^^^^^ created here\n+LL |         d = 1;\n+   |         ^^^^^ initialised here\n+   |\n+help: declare `d` here\n+   |\n+LL |         let d: usize = 1;\n+   |         ~~~~~~~~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:255:9\n+   |\n+LL |         let e;\n+   |         ^^^^^^ created here\n+LL |         e = format!(\"{}\", d);\n+   |         ^^^^^^^^^^^^^^^^^^^^ initialised here\n+   |\n+help: declare `e` here\n+   |\n+LL |         let e = format!(\"{}\", d);\n+   |         ~~~~~\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "724477e8691df1df790fcdb3efa62cccb49da932", "filename": "tests/ui/needless_late_init_fixable.fixed", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    \n-    let a = \"zero\";\n-\n-    \n-    \n-    let b = 1;\n-    let c = 2;\n-\n-    \n-    let d: usize = 1;\n-\n-    \n-    let e = format!(\"{}\", d);\n-}"}, {"sha": "3e6bd36367275dd2f2a55118f3da9dd0fd8da22d", "filename": "tests/ui/needless_late_init_fixable.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    let a;\n-    a = \"zero\";\n-\n-    let b;\n-    let c;\n-    b = 1;\n-    c = 2;\n-\n-    let d: usize;\n-    d = 1;\n-\n-    let e;\n-    e = format!(\"{}\", d);\n-}"}, {"sha": "8c664309e3e83fe4838fbcfc12d7c5e586109c42", "filename": "tests/ui/needless_late_init_fixable.stderr", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,70 +0,0 @@\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:6:5\n-   |\n-LL |     let a;\n-   |     ^^^^^^ created here\n-LL |     a = \"zero\";\n-   |     ^^^^^^^^^^ initialised here\n-   |\n-   = note: `-D clippy::needless-late-init` implied by `-D warnings`\n-help: declare `a` here\n-   |\n-LL |     let a = \"zero\";\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:9:5\n-   |\n-LL |     let b;\n-   |     ^^^^^^ created here\n-LL |     let c;\n-LL |     b = 1;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `b` here\n-   |\n-LL |     let b = 1;\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:10:5\n-   |\n-LL |     let c;\n-   |     ^^^^^^ created here\n-LL |     b = 1;\n-LL |     c = 2;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `c` here\n-   |\n-LL |     let c = 2;\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:14:5\n-   |\n-LL |     let d: usize;\n-   |     ^^^^^^^^^^^^^ created here\n-LL |     d = 1;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `d` here\n-   |\n-LL |     let d: usize = 1;\n-   |     ~~~~~~~~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:17:5\n-   |\n-LL |     let e;\n-   |     ^^^^^^ created here\n-LL |     e = format!(\"{}\", d);\n-   |     ^^^^^^^^^^^^^^^^^^^^ initialised here\n-   |\n-help: declare `e` here\n-   |\n-LL |     let e = format!(\"{}\", d);\n-   |     ~~~~~\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "b352b285c86267f42fed1f4be2ce85d51c544afd", "filename": "tests/ui/unnecessary_cast.fixed", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.fixed?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::unnecessary_cast)]\n-#![allow(unused_must_use, clippy::no_effect)]\n+#![allow(\n+    unused_must_use,\n+    clippy::borrow_as_ptr,\n+    clippy::no_effect,\n+    clippy::nonstandard_macro_braces,\n+    clippy::unnecessary_operation\n+)]\n \n #[rustfmt::skip]\n fn main() {\n@@ -38,3 +44,48 @@ fn main() {\n }\n \n type I32Alias = i32;\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        // casting integer literal to float is unnecessary\n+        100_f32;\n+        100_f64;\n+        100_f64;\n+        let _ = -100_f32;\n+        let _ = -100_f64;\n+        let _ = -100_f64;\n+        100_f32;\n+        100_f64;\n+        // Should not trigger\n+        #[rustfmt::skip]\n+        let v = vec!(1);\n+        &v as &[i32];\n+        0x10 as f32;\n+        0o10 as f32;\n+        0b10 as f32;\n+        0x11 as f64;\n+        0o11 as f64;\n+        0b11 as f64;\n+\n+        1_u32;\n+        0x10_i32;\n+        0b10_usize;\n+        0o73_u16;\n+        1_000_000_000_u32;\n+\n+        1.0_f64;\n+        0.5_f32;\n+\n+        1.0 as u16;\n+\n+        let _ = -1_i32;\n+        let _ = -1.0_f32;\n+\n+        let _ = 1 as I32Alias;\n+        let _ = &1 as &I32Alias;\n+    }\n+\n+    type I32Alias = i32;\n+}"}, {"sha": "6c8cc3effe8fefcc9ca0cf5c806549bd0037b0f2", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::unnecessary_cast)]\n-#![allow(unused_must_use, clippy::no_effect)]\n+#![allow(\n+    unused_must_use,\n+    clippy::borrow_as_ptr,\n+    clippy::no_effect,\n+    clippy::nonstandard_macro_braces,\n+    clippy::unnecessary_operation\n+)]\n \n #[rustfmt::skip]\n fn main() {\n@@ -38,3 +44,48 @@ fn main() {\n }\n \n type I32Alias = i32;\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        // casting integer literal to float is unnecessary\n+        100 as f32;\n+        100 as f64;\n+        100_i32 as f64;\n+        let _ = -100 as f32;\n+        let _ = -100 as f64;\n+        let _ = -100_i32 as f64;\n+        100. as f32;\n+        100. as f64;\n+        // Should not trigger\n+        #[rustfmt::skip]\n+        let v = vec!(1);\n+        &v as &[i32];\n+        0x10 as f32;\n+        0o10 as f32;\n+        0b10 as f32;\n+        0x11 as f64;\n+        0o11 as f64;\n+        0b11 as f64;\n+\n+        1 as u32;\n+        0x10 as i32;\n+        0b10 as usize;\n+        0o73 as u16;\n+        1_000_000_000 as u32;\n+\n+        1.0 as f64;\n+        0.5 as f32;\n+\n+        1.0 as u16;\n+\n+        let _ = -1 as i32;\n+        let _ = -1.0 as f32;\n+\n+        let _ = 1 as I32Alias;\n+        let _ = &1 as &I32Alias;\n+    }\n+\n+    type I32Alias = i32;\n+}"}, {"sha": "bad45f0025b2292fe0360c52ec59effefac4c361", "filename": "tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 111, "deletions": 9, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c91a7f0b83853a4cfb9235cd75c593eecef5e1ff/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=c91a7f0b83853a4cfb9235cd75c593eecef5e1ff", "patch": "@@ -1,52 +1,154 @@\n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:8:5\n+  --> $DIR/unnecessary_cast.rs:14:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^ help: try: `1_i32`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:9:5\n+  --> $DIR/unnecessary_cast.rs:15:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^ help: try: `1_f32`\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/unnecessary_cast.rs:10:5\n+  --> $DIR/unnecessary_cast.rs:16:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^ help: try: `false`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:13:5\n+  --> $DIR/unnecessary_cast.rs:19:5\n    |\n LL |     -1_i32 as i32;\n    |     ^^^^^^^^^^^^^ help: try: `-1_i32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:14:5\n+  --> $DIR/unnecessary_cast.rs:20:5\n    |\n LL |     - 1_i32 as i32;\n    |     ^^^^^^^^^^^^^^ help: try: `- 1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:15:5\n+  --> $DIR/unnecessary_cast.rs:21:5\n    |\n LL |     -1f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `-1_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:16:5\n+  --> $DIR/unnecessary_cast.rs:22:5\n    |\n LL |     1_i32 as i32;\n    |     ^^^^^^^^^^^^ help: try: `1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:17:5\n+  --> $DIR/unnecessary_cast.rs:23:5\n    |\n LL |     1_f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `1_f32`\n \n-error: aborting due to 8 previous errors\n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:53:9\n+   |\n+LL |         100 as f32;\n+   |         ^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:54:9\n+   |\n+LL |         100 as f64;\n+   |         ^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:55:9\n+   |\n+LL |         100_i32 as f64;\n+   |         ^^^^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:56:17\n+   |\n+LL |         let _ = -100 as f32;\n+   |                 ^^^^^^^^^^^ help: try: `-100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:57:17\n+   |\n+LL |         let _ = -100 as f64;\n+   |                 ^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:58:17\n+   |\n+LL |         let _ = -100_i32 as f64;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:59:9\n+   |\n+LL |         100. as f32;\n+   |         ^^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:60:9\n+   |\n+LL |         100. as f64;\n+   |         ^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:72:9\n+   |\n+LL |         1 as u32;\n+   |         ^^^^^^^^ help: try: `1_u32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:73:9\n+   |\n+LL |         0x10 as i32;\n+   |         ^^^^^^^^^^^ help: try: `0x10_i32`\n+\n+error: casting integer literal to `usize` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:74:9\n+   |\n+LL |         0b10 as usize;\n+   |         ^^^^^^^^^^^^^ help: try: `0b10_usize`\n+\n+error: casting integer literal to `u16` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:75:9\n+   |\n+LL |         0o73 as u16;\n+   |         ^^^^^^^^^^^ help: try: `0o73_u16`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:76:9\n+   |\n+LL |         1_000_000_000 as u32;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:78:9\n+   |\n+LL |         1.0 as f64;\n+   |         ^^^^^^^^^^ help: try: `1.0_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:79:9\n+   |\n+LL |         0.5 as f32;\n+   |         ^^^^^^^^^^ help: try: `0.5_f32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:83:17\n+   |\n+LL |         let _ = -1 as i32;\n+   |                 ^^^^^^^^^ help: try: `-1_i32`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:84:17\n+   |\n+LL |         let _ = -1.0 as f32;\n+   |                 ^^^^^^^^^^^ help: try: `-1.0_f32`\n+\n+error: aborting due to 25 previous errors\n "}, {"sha": "36800c5340db21d665070b288040e00958bd612a", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::unnecessary_cast)]\n-#![allow(\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::nonstandard_macro_braces,\n-    clippy::borrow_as_ptr\n-)]\n-\n-fn main() {\n-    // casting integer literal to float is unnecessary\n-    100_f32;\n-    100_f64;\n-    100_f64;\n-    let _ = -100_f32;\n-    let _ = -100_f64;\n-    let _ = -100_f64;\n-    100_f32;\n-    100_f64;\n-    // Should not trigger\n-    #[rustfmt::skip]\n-    let v = vec!(1);\n-    &v as &[i32];\n-    0x10 as f32;\n-    0o10 as f32;\n-    0b10 as f32;\n-    0x11 as f64;\n-    0o11 as f64;\n-    0b11 as f64;\n-\n-    1_u32;\n-    0x10_i32;\n-    0b10_usize;\n-    0o73_u16;\n-    1_000_000_000_u32;\n-\n-    1.0_f64;\n-    0.5_f32;\n-\n-    1.0 as u16;\n-\n-    let _ = -1_i32;\n-    let _ = -1.0_f32;\n-\n-    let _ = 1 as I32Alias;\n-    let _ = &1 as &I32Alias;\n-}\n-\n-type I32Alias = i32;"}, {"sha": "d4b6bb952ab3508261198212ba394d20b5cd3d4c", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::unnecessary_cast)]\n-#![allow(\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::nonstandard_macro_braces,\n-    clippy::borrow_as_ptr\n-)]\n-\n-fn main() {\n-    // casting integer literal to float is unnecessary\n-    100 as f32;\n-    100 as f64;\n-    100_i32 as f64;\n-    let _ = -100 as f32;\n-    let _ = -100 as f64;\n-    let _ = -100_i32 as f64;\n-    100. as f32;\n-    100. as f64;\n-    // Should not trigger\n-    #[rustfmt::skip]\n-    let v = vec!(1);\n-    &v as &[i32];\n-    0x10 as f32;\n-    0o10 as f32;\n-    0b10 as f32;\n-    0x11 as f64;\n-    0o11 as f64;\n-    0b11 as f64;\n-\n-    1 as u32;\n-    0x10 as i32;\n-    0b10 as usize;\n-    0o73 as u16;\n-    1_000_000_000 as u32;\n-\n-    1.0 as f64;\n-    0.5 as f32;\n-\n-    1.0 as u16;\n-\n-    let _ = -1 as i32;\n-    let _ = -1.0 as f32;\n-\n-    let _ = 1 as I32Alias;\n-    let _ = &1 as &I32Alias;\n-}\n-\n-type I32Alias = i32;"}, {"sha": "a281143281b54fa591f29d71559da82fd7fca74f", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,106 +0,0 @@\n-error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:13:5\n-   |\n-LL |     100 as f32;\n-   |     ^^^^^^^^^^ help: try: `100_f32`\n-   |\n-   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:14:5\n-   |\n-LL |     100 as f64;\n-   |     ^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:15:5\n-   |\n-LL |     100_i32 as f64;\n-   |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:16:13\n-   |\n-LL |     let _ = -100 as f32;\n-   |             ^^^^^^^^^^^ help: try: `-100_f32`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:17:13\n-   |\n-LL |     let _ = -100 as f64;\n-   |             ^^^^^^^^^^^ help: try: `-100_f64`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:18:13\n-   |\n-LL |     let _ = -100_i32 as f64;\n-   |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:19:5\n-   |\n-LL |     100. as f32;\n-   |     ^^^^^^^^^^^ help: try: `100_f32`\n-\n-error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:20:5\n-   |\n-LL |     100. as f64;\n-   |     ^^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:32:5\n-   |\n-LL |     1 as u32;\n-   |     ^^^^^^^^ help: try: `1_u32`\n-\n-error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:33:5\n-   |\n-LL |     0x10 as i32;\n-   |     ^^^^^^^^^^^ help: try: `0x10_i32`\n-\n-error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:34:5\n-   |\n-LL |     0b10 as usize;\n-   |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n-\n-error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:35:5\n-   |\n-LL |     0o73 as u16;\n-   |     ^^^^^^^^^^^ help: try: `0o73_u16`\n-\n-error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:36:5\n-   |\n-LL |     1_000_000_000 as u32;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n-\n-error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:38:5\n-   |\n-LL |     1.0 as f64;\n-   |     ^^^^^^^^^^ help: try: `1.0_f64`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:39:5\n-   |\n-LL |     0.5 as f32;\n-   |     ^^^^^^^^^^ help: try: `0.5_f32`\n-\n-error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:43:13\n-   |\n-LL |     let _ = -1 as i32;\n-   |             ^^^^^^^^^ help: try: `-1_i32`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:44:13\n-   |\n-LL |     let _ = -1.0 as f32;\n-   |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n-\n-error: aborting due to 17 previous errors\n-"}]}