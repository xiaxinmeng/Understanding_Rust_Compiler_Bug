{"sha": "c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZDFjNjczMWMyMmEyODQwZWVjZDcyYjliZmI0ZmZjNmYwNTY0N2I=", "commit": {"author": {"name": "Simon Heath", "email": "icefoxen@gmail.com", "date": "2019-02-01T02:47:18Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-27T15:02:25Z"}, "message": "Fix a bunch of heckin' trailing whitespace", "tree": {"sha": "2c88f7a898d35129abaaac34fe3707ac34dcafcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c88f7a898d35129abaaac34fe3707ac34dcafcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "html_url": "https://github.com/rust-lang/rust/commit/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b/comments", "author": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12532277d5bde13c19d3b40d34c07ec78c79ff71", "url": "https://api.github.com/repos/rust-lang/rust/commits/12532277d5bde13c19d3b40d34c07ec78c79ff71", "html_url": "https://github.com/rust-lang/rust/commit/12532277d5bde13c19d3b40d34c07ec78c79ff71"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "f64f2fb3e9faa196b5386bc84a3db6d0529d843d", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "patch": "@@ -366,9 +366,9 @@ pub trait From<T>: Sized {\n /// provides an equivalent `TryInto` implementation for free, thanks to a\n /// blanket implementation in the standard library. For more information on this,\n /// see the documentation for [`Into`].\n-/// \n+///\n /// # Implementing `TryInto`\n-/// \n+///\n /// This suffers the same restrictions and reasoning as implementing\n /// [`Into`], see there for details.\n ///\n@@ -387,25 +387,25 @@ pub trait TryInto<T>: Sized {\n \n /// Simple and safe type conversions that may fail in a controlled\n /// way under some circumstances. It is the reciprocal of [`TryInto`].\n-/// \n-/// This is useful when you are doing a type conversion that may \n+///\n+/// This is useful when you are doing a type conversion that may\n /// trivially succeed but may also need special handling.\n /// For example, there is no way to convert an `i64` into an `i32`\n /// using the [`From`] trait, because an `i64` may contain a value\n /// that an `i32` cannot represent and so the conversion would lose data.\n /// This might be handled by truncating the `i64` to an `i32` (essentially\n-/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning \n-/// `i32::MAX`, or by some other method.  The `From` trait is intended \n-/// for lossless conversions, so the `TryFrom` trait informs the \n+/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning\n+/// `i32::MAX`, or by some other method.  The `From` trait is intended\n+/// for lossless conversions, so the `TryFrom` trait informs the\n /// programmer when a type conversion could go bad and lets them\n /// decide how to handle it.\n-/// \n+///\n /// # Generic Implementations\n ///\n /// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n-/// - [`try_from`] is reflexive, which means that `TryFrom<T> for T` \n+/// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented\n-/// \n+///\n /// # Examples\n ///\n /// As described, [`i32`] implements `TryFrom<i64>`:\n@@ -416,10 +416,10 @@ pub trait TryInto<T>: Sized {\n /// // and handling the truncation after the fact.\n /// let smaller_number = big_number as i32;\n /// assert_eq!(smaller_number, -727379968);\n-/// \n+///\n /// let try_smaller_number = i32::try_from(big_number);\n /// assert!(try_smaller_number.is_err());\n-/// \n+///\n /// let try_successful_smaller_number = i32::try_from(3);\n /// assert!(try_successful_smaller_number.is_ok());\n /// ```"}, {"sha": "d8e230abaf9b97dc184deb416b99bfeb55ac6596", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "patch": "@@ -4564,7 +4564,7 @@ macro_rules! try_from_lower_bounded {\n \n             /// Try to create a target number type from a\n             /// source type that has `source::MIN > dest::MIN`.\n-            /// Will return an error if `source` is less than \n+            /// Will return an error if `source` is less than\n             /// `dest::MIN`.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n@@ -4587,7 +4587,7 @@ macro_rules! try_from_upper_bounded {\n \n             /// Try to create a target number type from a\n             /// source type that has `source::MAX > dest::MAX`.\n-            /// Will return an error if `source` is greater than \n+            /// Will return an error if `source` is greater than\n             /// `dest::MAX`.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n@@ -4609,9 +4609,9 @@ macro_rules! try_from_both_bounded {\n             type Error = TryFromIntError;\n \n             /// Try to \"narrow\" a number from the source type\n-            /// to the target type.  Will return an error if \n-            /// the source value is either larger than the \n-            /// `MAX` value for the target type or smaller \n+            /// to the target type.  Will return an error if\n+            /// the source value is either larger than the\n+            /// `MAX` value for the target type or smaller\n             /// than the `MIN` value for it.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {"}]}