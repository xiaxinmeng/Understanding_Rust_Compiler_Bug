{"sha": "d72cb093f4ae86f37521bae8e7932403d90e8365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MmNiMDkzZjRhZTg2ZjM3NTIxYmFlOGU3OTMyNDAzZDkwZTgzNjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T13:36:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T13:36:35Z"}, "message": "Rollup merge of #63298 - RalfJung:assume_init, r=Mark-Simulacrum,Centril\n\nassume_init: warn about valid != safe\n\nWe have this warning in the type-level docs, but it seems worth repeating it on the function.", "tree": {"sha": "d6cb1ce7bb550a89bfbd9c9d2f3ec332b97a6003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6cb1ce7bb550a89bfbd9c9d2f3ec332b97a6003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72cb093f4ae86f37521bae8e7932403d90e8365", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSYJkCRBK7hj4Ov3rIwAAdHIIAI17o/H8rXPBw1Lw50aTg3WO\nvE69Dx58GQRzxLVFISAE/Ta9QVHopSVMwtVZPIms680chsev7WP0+6Q+LY5TJMef\nWv0NwaayAhL14NyEVdOcL8M/n97GyhdkHnfLUJHfvQ3LF7rHuMRePb6La54HP6LO\n3rGlphGh4kuZnmeRg0RQkDJc9UXwnAaK4wi7vXK5MtJpeiSYIFq+NVNreehxPb7E\nM0YpHEEZxO4L6zFB4YryWA+q4SgxCurMk4TC0n6UlV2L7LpwoBBEN/WK0XS0IOON\nud2A5NjxjH9i9AOtnNoEXVFhCYULNzg9u6+0svteSoB2qZwOaKJ0rv2yyTJ5xNE=\n=3HIa\n-----END PGP SIGNATURE-----\n", "payload": "tree d6cb1ce7bb550a89bfbd9c9d2f3ec332b97a6003\nparent fbf268bfd49cba66cc5836d7f31281a77bbbb1b3\nparent 1821414b7bb496545ef147644cf5691db433ab5d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565098595 +0200\ncommitter GitHub <noreply@github.com> 1565098595 +0200\n\nRollup merge of #63298 - RalfJung:assume_init, r=Mark-Simulacrum,Centril\n\nassume_init: warn about valid != safe\n\nWe have this warning in the type-level docs, but it seems worth repeating it on the function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72cb093f4ae86f37521bae8e7932403d90e8365", "html_url": "https://github.com/rust-lang/rust/commit/d72cb093f4ae86f37521bae8e7932403d90e8365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72cb093f4ae86f37521bae8e7932403d90e8365/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbf268bfd49cba66cc5836d7f31281a77bbbb1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf268bfd49cba66cc5836d7f31281a77bbbb1b3", "html_url": "https://github.com/rust-lang/rust/commit/fbf268bfd49cba66cc5836d7f31281a77bbbb1b3"}, {"sha": "1821414b7bb496545ef147644cf5691db433ab5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1821414b7bb496545ef147644cf5691db433ab5d", "html_url": "https://github.com/rust-lang/rust/commit/1821414b7bb496545ef147644cf5691db433ab5d"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "ff063759cba627a8d717899e9b35d7b6a347294e", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d72cb093f4ae86f37521bae8e7932403d90e8365/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72cb093f4ae86f37521bae8e7932403d90e8365/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=d72cb093f4ae86f37521bae8e7932403d90e8365", "patch": "@@ -51,7 +51,8 @@ use crate::mem::ManuallyDrop;\n ///\n /// On top of that, remember that most types have additional invariants beyond merely\n /// being considered initialized at the type level. For example, a `1`-initialized [`Vec<T>`]\n-/// is considered initialized because the only requirement the compiler knows about it\n+/// is considered initialized (under the current implementation; this does not constitute\n+/// a stable guarantee) because the only requirement the compiler knows about it\n /// is that the data pointer must be non-null. Creating such a `Vec<T>` does not cause\n /// *immediate* undefined behavior, but will cause undefined behavior with most\n /// safe operations (including dropping it).\n@@ -402,6 +403,14 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [inv]: #initialization-invariant\n     ///\n+    /// On top of that, remember that most types have additional invariants beyond merely\n+    /// being considered initialized at the type level. For example, a `1`-initialized [`Vec<T>`]\n+    /// is considered initialized (under the current implementation; this does not constitute\n+    /// a stable guarantee) because the only requirement the compiler knows about it\n+    /// is that the data pointer must be non-null. Creating such a `Vec<T>` does not cause\n+    /// *immediate* undefined behavior, but will cause undefined behavior with most\n+    /// safe operations (including dropping it).\n+    ///\n     /// # Examples\n     ///\n     /// Correct usage of this method:"}]}