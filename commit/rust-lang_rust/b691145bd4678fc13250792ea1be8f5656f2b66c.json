{"sha": "b691145bd4678fc13250792ea1be8f5656f2b66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTExNDViZDQ2NzhmYzEzMjUwNzkyZWExYmU4ZjU2NTZmMmI2NmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T02:05:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-17T02:05:10Z"}, "message": "Rollup merge of #69811 - petrochenkov:privdiag2, r=estebank\n\nresolve: Print import chains on privacy errors\n\nA part of https://github.com/rust-lang/rust/pull/67951 that doesn't require hacks.\nr? @estebank", "tree": {"sha": "714e5d409798c9917931c23e4d05e6925194cdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714e5d409798c9917931c23e4d05e6925194cdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b691145bd4678fc13250792ea1be8f5656f2b66c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecDBXCRBK7hj4Ov3rIwAAdHIIAGkk7aOxMOWyqnGEafrFI5Y2\nEg2ba2N4iHWYzGIU6q6XdgqOr/fJ/nEa+r5jYTvgoqL0ayM+6i5EMM6bFwXddSsH\nX+xPm1dNPICTGw9ZZ0xCgKurECmMaHKf0+33boR7pB8knwtULZQ1baJB/PW6wrEo\nwKQIz5vMNYyvejx+DMuB7TPNk9Ms7Wmo2g6UND/fBMhWYl3EZX7fYExeeZ/t6sCC\neEWDkqFvfv6QUC1AvOWx0gFVjDdNJkNIFqTOxiEvAebopK2CDE+SOypj3TwXb+gO\nd5M4bPW21uUQs4MfJyrqh3slMtsOJgP+uLjFf3L0EKSwiIOn2wCuHQFPEzOXx7Y=\n=RZVS\n-----END PGP SIGNATURE-----\n", "payload": "tree 714e5d409798c9917931c23e4d05e6925194cdec\nparent e24252a12cd2b6adf8678255939156a2d178fe2a\nparent f4083c6455ad47e0369013dba7eb716eb00223eb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584410710 +0100\ncommitter GitHub <noreply@github.com> 1584410710 +0100\n\nRollup merge of #69811 - petrochenkov:privdiag2, r=estebank\n\nresolve: Print import chains on privacy errors\n\nA part of https://github.com/rust-lang/rust/pull/67951 that doesn't require hacks.\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b691145bd4678fc13250792ea1be8f5656f2b66c", "html_url": "https://github.com/rust-lang/rust/commit/b691145bd4678fc13250792ea1be8f5656f2b66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b691145bd4678fc13250792ea1be8f5656f2b66c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24252a12cd2b6adf8678255939156a2d178fe2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24252a12cd2b6adf8678255939156a2d178fe2a", "html_url": "https://github.com/rust-lang/rust/commit/e24252a12cd2b6adf8678255939156a2d178fe2a"}, {"sha": "f4083c6455ad47e0369013dba7eb716eb00223eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4083c6455ad47e0369013dba7eb716eb00223eb", "html_url": "https://github.com/rust-lang/rust/commit/f4083c6455ad47e0369013dba7eb716eb00223eb"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "7571dabcf7ef4bcf65dca6aa2ab1adf7444d3d51", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=b691145bd4678fc13250792ea1be8f5656f2b66c", "patch": "@@ -1,4 +1,5 @@\n use std::cmp::Reverse;\n+use std::ptr;\n \n use log::debug;\n use rustc::bug;\n@@ -918,50 +919,81 @@ impl<'a> Resolver<'a> {\n         err.emit();\n     }\n \n-    crate fn report_privacy_error(&self, privacy_error: &PrivacyError<'_>) {\n-        let PrivacyError { ident, binding, .. } = *privacy_error;\n-        let session = &self.session;\n-        let mk_struct_span_error = |is_constructor| {\n-            let mut descr = binding.res().descr().to_string();\n-            if is_constructor {\n-                descr += \" constructor\";\n-            }\n-            if binding.is_import() {\n-                descr += \" import\";\n-            }\n-\n-            let mut err =\n-                struct_span_err!(session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n-\n-            err.span_label(ident.span, &format!(\"this {} is private\", descr));\n-            err.span_note(\n-                session.source_map().def_span(binding.span),\n-                &format!(\"the {} `{}` is defined here\", descr, ident),\n-            );\n-\n-            err\n-        };\n-\n-        let mut err = if let NameBindingKind::Res(\n+    /// If the binding refers to a tuple struct constructor with fields,\n+    /// returns the span of its fields.\n+    fn ctor_fields_span(&self, binding: &NameBinding<'_>) -> Option<Span> {\n+        if let NameBindingKind::Res(\n             Res::Def(DefKind::Ctor(CtorOf::Struct, CtorKind::Fn), ctor_def_id),\n             _,\n         ) = binding.kind\n         {\n             let def_id = (&*self).parent(ctor_def_id).expect(\"no parent for a constructor\");\n             if let Some(fields) = self.field_names.get(&def_id) {\n-                let mut err = mk_struct_span_error(true);\n                 let first_field = fields.first().expect(\"empty field list in the map\");\n-                err.span_label(\n-                    fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)),\n-                    \"a constructor is private if any of the fields is private\",\n-                );\n-                err\n-            } else {\n-                mk_struct_span_error(false)\n+                return Some(fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)));\n             }\n-        } else {\n-            mk_struct_span_error(false)\n-        };\n+        }\n+        None\n+    }\n+\n+    crate fn report_privacy_error(&self, privacy_error: &PrivacyError<'_>) {\n+        let PrivacyError { ident, binding, .. } = *privacy_error;\n+\n+        let res = binding.res();\n+        let ctor_fields_span = self.ctor_fields_span(binding);\n+        let plain_descr = res.descr().to_string();\n+        let nonimport_descr =\n+            if ctor_fields_span.is_some() { plain_descr + \" constructor\" } else { plain_descr };\n+        let import_descr = nonimport_descr.clone() + \" import\";\n+        let get_descr =\n+            |b: &NameBinding<'_>| if b.is_import() { &import_descr } else { &nonimport_descr };\n+\n+        // Print the primary message.\n+        let descr = get_descr(binding);\n+        let mut err =\n+            struct_span_err!(self.session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n+        err.span_label(ident.span, &format!(\"this {} is private\", descr));\n+        if let Some(span) = ctor_fields_span {\n+            err.span_label(span, \"a constructor is private if any of the fields is private\");\n+        }\n+\n+        // Print the whole import chain to make it easier to see what happens.\n+        let first_binding = binding;\n+        let mut next_binding = Some(binding);\n+        let mut next_ident = ident;\n+        while let Some(binding) = next_binding {\n+            let name = next_ident;\n+            next_binding = match binding.kind {\n+                _ if res == Res::Err => None,\n+                NameBindingKind::Import { binding, import, .. } => match import.kind {\n+                    _ if binding.span.is_dummy() => None,\n+                    ImportKind::Single { source, .. } => {\n+                        next_ident = source;\n+                        Some(binding)\n+                    }\n+                    ImportKind::Glob { .. } | ImportKind::MacroUse => Some(binding),\n+                    ImportKind::ExternCrate { .. } => None,\n+                },\n+                _ => None,\n+            };\n+\n+            let first = ptr::eq(binding, first_binding);\n+            let descr = get_descr(binding);\n+            let msg = format!(\n+                \"{and_refers_to}the {item} `{name}`{which} is defined here{dots}\",\n+                and_refers_to = if first { \"\" } else { \"...and refers to \" },\n+                item = descr,\n+                name = name,\n+                which = if first { \"\" } else { \" which\" },\n+                dots = if next_binding.is_some() { \"...\" } else { \"\" },\n+            );\n+            let def_span = self.session.source_map().def_span(binding.span);\n+            let mut note_span = MultiSpan::from_span(def_span);\n+            if !first && binding.vis == ty::Visibility::Public {\n+                note_span.push_span_label(def_span, \"consider importing it directly\".into());\n+            }\n+            err.span_note(note_span, &msg);\n+        }\n \n         err.emit();\n     }"}, {"sha": "490c08446b5a800d8d4ec4416d09b39f88466fcd", "filename": "src/test/ui/imports/issue-55884-2.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr?ref=b691145bd4678fc13250792ea1be8f5656f2b66c", "patch": "@@ -4,11 +4,26 @@ error[E0603]: struct import `ParseOptions` is private\n LL | pub use parser::ParseOptions;\n    |                 ^^^^^^^^^^^^ this struct import is private\n    |\n-note: the struct import `ParseOptions` is defined here\n+note: the struct import `ParseOptions` is defined here...\n   --> $DIR/issue-55884-2.rs:9:9\n    |\n LL |     use ParseOptions;\n    |         ^^^^^^^^^^^^\n+note: ...and refers to the struct import `ParseOptions` which is defined here...\n+  --> $DIR/issue-55884-2.rs:12:9\n+   |\n+LL | pub use parser::ParseOptions;\n+   |         ^^^^^^^^^^^^^^^^^^^^ consider importing it directly\n+note: ...and refers to the struct import `ParseOptions` which is defined here...\n+  --> $DIR/issue-55884-2.rs:6:13\n+   |\n+LL |     pub use options::*;\n+   |             ^^^^^^^^^^ consider importing it directly\n+note: ...and refers to the struct `ParseOptions` which is defined here\n+  --> $DIR/issue-55884-2.rs:2:5\n+   |\n+LL |     pub struct ParseOptions {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ consider importing it directly\n \n error: aborting due to previous error\n "}, {"sha": "d63fbc7ec6781d6c378f7e6e6a60d7dc31c734f9", "filename": "src/test/ui/imports/reexports.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.stderr?ref=b691145bd4678fc13250792ea1be8f5656f2b66c", "patch": "@@ -16,23 +16,33 @@ error[E0603]: module import `foo` is private\n LL |     use b::a::foo::S;\n    |               ^^^ this module import is private\n    |\n-note: the module import `foo` is defined here\n+note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:21:17\n    |\n LL |         pub use super::foo; // This is OK since the value `foo` is visible enough.\n    |                 ^^^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/reexports.rs:16:5\n+   |\n+LL |     mod foo {\n+   |     ^^^^^^^\n \n error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:34:15\n    |\n LL |     use b::b::foo::S as T;\n    |               ^^^ this module import is private\n    |\n-note: the module import `foo` is defined here\n+note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:26:17\n    |\n LL |         pub use super::*; // This is also OK since the value `foo` is visible enough.\n    |                 ^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/reexports.rs:16:5\n+   |\n+LL |     mod foo {\n+   |     ^^^^^^^\n \n warning: glob import doesn't reexport anything because no candidate is public enough\n   --> $DIR/reexports.rs:9:17"}, {"sha": "b10c3a5265971c6ce14fedcf765f92c267486dbf", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=b691145bd4678fc13250792ea1be8f5656f2b66c", "patch": "@@ -10,11 +10,16 @@ error[E0603]: function import `foo` is private\n LL |     use bar::glob::foo;\n    |                    ^^^ this function import is private\n    |\n-note: the function import `foo` is defined here\n+note: the function import `foo` is defined here...\n   --> $DIR/privacy2.rs:10:13\n    |\n LL |         use foo;\n    |             ^^^\n+note: ...and refers to the function `foo` which is defined here\n+  --> $DIR/privacy2.rs:14:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^ consider importing it directly\n \n error: requires `sized` lang_item\n "}, {"sha": "2244f3a46b266b3e05851f5f4da883795993863b", "filename": "src/test/ui/shadowed/shadowed-use-visibility.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b691145bd4678fc13250792ea1be8f5656f2b66c/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr?ref=b691145bd4678fc13250792ea1be8f5656f2b66c", "patch": "@@ -4,23 +4,33 @@ error[E0603]: module import `bar` is private\n LL |     use foo::bar::f as g;\n    |              ^^^ this module import is private\n    |\n-note: the module import `bar` is defined here\n+note: the module import `bar` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:4:9\n    |\n LL |     use foo as bar;\n    |         ^^^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/shadowed-use-visibility.rs:1:1\n+   |\n+LL | mod foo {\n+   | ^^^^^^^\n \n error[E0603]: module import `f` is private\n   --> $DIR/shadowed-use-visibility.rs:15:10\n    |\n LL | use bar::f::f;\n    |          ^ this module import is private\n    |\n-note: the module import `f` is defined here\n+note: the module import `f` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:11:9\n    |\n LL |     use foo as f;\n    |         ^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/shadowed-use-visibility.rs:1:1\n+   |\n+LL | mod foo {\n+   | ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}