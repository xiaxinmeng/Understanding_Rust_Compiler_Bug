{"sha": "e72ddbdc25a2696a41053832fad7d9b0428819af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MmRkYmRjMjVhMjY5NmE0MTA1MzgzMmZhZDdkOWIwNDI4ODE5YWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T07:44:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T07:49:22Z"}, "message": "Fix all code examples", "tree": {"sha": "3613c51d4d03fc5c2f9b967fe8c82b67ca3238a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3613c51d4d03fc5c2f9b967fe8c82b67ca3238a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e72ddbdc25a2696a41053832fad7d9b0428819af", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e72ddbdc25a2696a41053832fad7d9b0428819af", "html_url": "https://github.com/rust-lang/rust/commit/e72ddbdc25a2696a41053832fad7d9b0428819af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e72ddbdc25a2696a41053832fad7d9b0428819af/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6667f90292d87271204caeef451cf2a977a80fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6667f90292d87271204caeef451cf2a977a80fa4", "html_url": "https://github.com/rust-lang/rust/commit/6667f90292d87271204caeef451cf2a977a80fa4"}], "stats": {"total": 170, "additions": 103, "deletions": 67}, "files": [{"sha": "94f193eba1c2bc7b98072f5f2e746b30d68eeeb1", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -30,7 +30,7 @@ An object is a series of string keys mapping to values, in `\"key\": value` format\n Arrays are enclosed in square brackets ([ ... ]) and objects in curly brackets ({ ... }).\n A simple JSON document encoding a person, his/her age, address and phone numbers could look like:\n \n-```\n+```ignore\n {\n     \"FirstName\": \"John\",\n     \"LastName\": \"Doe\","}, {"sha": "799157f9a1a7842054f5bc4b94f344707d5c870e", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -341,7 +341,7 @@ pub fn write_5_number_summary(w: &mut io::Writer,\n /// As an example, the summary with 5-number-summary `(min=15, q1=17, med=20, q3=24, max=31)` might\n /// display as:\n ///\n-/// ~~~~\n+/// ~~~~ignore\n ///   10 |        [--****#******----------]          | 40\n /// ~~~~\n "}, {"sha": "3a93b10ad29c825756441f182c0d79c54cb8b2f5", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -67,7 +67,7 @@ pub struct Paths {\n ///\n /// The above code will print:\n ///\n-/// ```\n+/// ```ignore\n /// /media/pictures/kittens.jpg\n /// /media/pictures/puppies.jpg\n /// ```"}, {"sha": "6fc0cb71c5c9b0ebded79e9c02c5bd2247b0c797", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -61,7 +61,7 @@\n //! let (port, chan) = Chan::new();\n //! spawn(proc() {\n //!     chan.send(10);\n-//! })\n+//! });\n //! assert_eq!(port.recv(), 10);\n //!\n //! // Create a shared channel which can be sent along from many tasks"}, {"sha": "1b0b5074f53a6c18de7ebd24bc6244192d53f6c7", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -82,7 +82,7 @@ function, but the `format!` macro is a syntax extension which allows it to\n leverage named parameters. Named parameters are listed at the end of the\n argument list and have the syntax:\n \n-```\n+```ignore\n identifier '=' expression\n ```\n \n@@ -107,7 +107,7 @@ and if all references to one argument do not provide a type, then the format `?`\n is used (the type's rust-representation is printed). For example, this is an\n invalid format string:\n \n-```\n+```ignore\n {0:d} {0:s}\n ```\n \n@@ -123,7 +123,7 @@ must have the type `uint`. Although a `uint` can be printed with `{:u}`, it is\n illegal to reference an argument as such. For example, this is another invalid\n format string:\n \n-```\n+```ignore\n {:.*s} {0:u}\n ```\n \n@@ -334,7 +334,7 @@ This example is the equivalent of `{0:s}` essentially.\n The select method is a switch over a `&str` parameter, and the parameter *must*\n be of the type `&str`. An example of the syntax is:\n \n-```\n+```ignore\n {0, select, male{...} female{...} other{...}}\n ```\n \n@@ -353,7 +353,7 @@ The plural method is a switch statement over a `uint` parameter, and the\n parameter *must* be a `uint`. A plural method in its full glory can be specified\n as:\n \n-```\n+```ignore\n {0, plural, offset=1 =1{...} two{...} many{...} other{...}}\n ```\n \n@@ -381,7 +381,7 @@ should not be too alien. Arguments are formatted with python-like syntax,\n meaning that arguments are surrounded by `{}` instead of the C-like `%`. The\n actual grammar for the formatting syntax is:\n \n-```\n+```ignore\n format_string := <text> [ format <text> ] *\n format := '{' [ argument ] [ ':' format_spec ] [ ',' function_spec ] '}'\n argument := integer | identifier"}, {"sha": "10e1f88690332a04845711b0344804d33c0f9b81", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -22,12 +22,16 @@ use vec::{bytes, CloneableVector, MutableVector, ImmutableVector};\n /// # Example\n ///\n /// ```\n-/// let reader = PortReader::new(port);\n+/// use std::io::PortReader;\n+///\n+/// let (port, chan) = Chan::new();\n+/// # drop(chan);\n+/// let mut reader = PortReader::new(port);\n ///\n /// let mut buf = ~[0u8, ..100];\n /// match reader.read(buf) {\n-///     Some(nread) => println!(\"Read {} bytes\", nread),\n-///     None => println!(\"At the end of the stream!\")\n+///     Ok(nread) => println!(\"Read {} bytes\", nread),\n+///     Err(e) => println!(\"read error: {}\", e),\n /// }\n /// ```\n pub struct PortReader {\n@@ -83,7 +87,12 @@ impl Reader for PortReader {\n /// # Example\n ///\n /// ```\n-/// let writer = ChanWriter::new(chan);\n+/// # #[allow(unused_must_use)];\n+/// use std::io::ChanWriter;\n+///\n+/// let (port, chan) = Chan::new();\n+/// # drop(port);\n+/// let mut writer = ChanWriter::new(chan);\n /// writer.write(\"hello, world\".as_bytes());\n /// ```\n pub struct ChanWriter {"}, {"sha": "23c01aa635444d4675789c0e1b9e72730ed3e0f2", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -91,15 +91,18 @@ impl UnixListener {\n     /// # Example\n     ///\n     /// ```\n+    /// # fn main() {}\n+    /// # fn foo() {\n+    /// # #[allow(unused_must_use)];\n     /// use std::io::net::unix::UnixListener;\n-    /// use std::io::Listener;\n+    /// use std::io::{Listener, Acceptor};\n     ///\n-    /// let server = Path::new(\"path/to/my/socket\");\n-    /// let mut stream = UnixListener::bind(&server);\n-    /// for client in stream.incoming() {\n-    ///     let mut client = client;\n+    /// let server = Path::new(\"/path/to/my/socket\");\n+    /// let stream = UnixListener::bind(&server);\n+    /// for mut client in stream.listen().incoming() {\n     ///     client.write([1, 2, 3, 4]);\n     /// }\n+    /// # }\n     /// ```\n     pub fn bind<P: ToCStr>(path: &P) -> IoResult<UnixListener> {\n         LocalIo::maybe_raise(|io| {"}, {"sha": "61b24f67f66dff3d7dce586e4e41d05185c5c5a8", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -69,7 +69,9 @@ pub mod marker {\n     /// Given a struct `S` that includes a type parameter `T`\n     /// but does not actually *reference* that type parameter:\n     ///\n-    /// ```\n+    /// ```ignore\n+    /// use std::cast;\n+    ///\n     /// struct S<T> { x: *() }\n     /// fn get<T>(s: &S<T>) -> T {\n     ///    unsafe {\n@@ -109,6 +111,8 @@ pub mod marker {\n     /// but does not actually *reference* that type parameter:\n     ///\n     /// ```\n+    /// use std::cast;\n+    ///\n     /// struct S<T> { x: *() }\n     /// fn get<T>(s: &S<T>, v: T) {\n     ///    unsafe {\n@@ -147,7 +151,8 @@ pub mod marker {\n     /// \"interior\" mutability:\n     ///\n     /// ```\n-    /// struct Cell<T> { priv value: T }\n+    /// pub struct Cell<T> { priv value: T }\n+    /// # fn main() {}\n     /// ```\n     ///\n     /// The type system would infer that `value` is only read here and"}, {"sha": "9aa63f15def3100e2a113e69d76cbba149dd3518", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -42,7 +42,7 @@ disabled except for `error!` (a log level of 1). Logging is controlled via the\n `RUST_LOG` environment variable. The value of this environment variable is a\n comma-separated list of logging directives. A logging directive is of the form:\n \n-```\n+```ignore\n path::to::module=log_level\n ```\n \n@@ -65,7 +65,7 @@ all modules is set to this value.\n \n Some examples of valid values of `RUST_LOG` are:\n \n-```\n+```ignore\n hello                // turns on all logging for the 'hello' module\n info                 // turns on all info logging\n hello=debug          // turns on debug logging for 'hello'"}, {"sha": "fe3c18d1c4f542d224ae8bc3f6e78fff1dc11424", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -119,6 +119,8 @@ impl Rem<$T,$T> for $T {\n     /// Returns the integer remainder after division, satisfying:\n     ///\n     /// ```\n+    /// # let n = 1;\n+    /// # let d = 2;\n     /// assert!((n / d) * d + (n % d) == n)\n     /// ```\n     ///\n@@ -194,15 +196,15 @@ impl Integer for $T {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert!(( 8).div_floor( 3) ==  2);\n-    /// assert!(( 8).div_floor(-3) == -3);\n-    /// assert!((-8).div_floor( 3) == -3);\n-    /// assert!((-8).div_floor(-3) ==  2);\n-    ///\n-    /// assert!(( 1).div_floor( 2) ==  0);\n-    /// assert!(( 1).div_floor(-2) == -1);\n-    /// assert!((-1).div_floor( 2) == -1);\n-    /// assert!((-1).div_floor(-2) ==  0);\n+    /// assert!(( 8i).div_floor(& 3) ==  2);\n+    /// assert!(( 8i).div_floor(&-3) == -3);\n+    /// assert!((-8i).div_floor(& 3) == -3);\n+    /// assert!((-8i).div_floor(&-3) ==  2);\n+    ///\n+    /// assert!(( 1i).div_floor(& 2) ==  0);\n+    /// assert!(( 1i).div_floor(&-2) == -1);\n+    /// assert!((-1i).div_floor(& 2) == -1);\n+    /// assert!((-1i).div_floor(&-2) ==  0);\n     /// ```\n     ///\n     #[inline]\n@@ -220,21 +222,22 @@ impl Integer for $T {\n     /// Integer modulo, satisfying:\n     ///\n     /// ```\n-    /// assert!(n.div_floor(d) * d + n.mod_floor(d) == n)\n+    /// # let n = 1i; let d = 1i;\n+    /// assert!(n.div_floor(&d) * d + n.mod_floor(&d) == n)\n     /// ```\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// assert!(( 8).mod_floor( 3) ==  2);\n-    /// assert!(( 8).mod_floor(-3) == -1);\n-    /// assert!((-8).mod_floor( 3) ==  1);\n-    /// assert!((-8).mod_floor(-3) == -2);\n-    ///\n-    /// assert!(( 1).mod_floor( 2) ==  1);\n-    /// assert!(( 1).mod_floor(-2) == -1);\n-    /// assert!((-1).mod_floor( 2) ==  1);\n-    /// assert!((-1).mod_floor(-2) == -1);\n+    /// assert!(( 8i).mod_floor(& 3) ==  2);\n+    /// assert!(( 8i).mod_floor(&-3) == -1);\n+    /// assert!((-8i).mod_floor(& 3) ==  1);\n+    /// assert!((-8i).mod_floor(&-3) == -2);\n+    ///\n+    /// assert!(( 1i).mod_floor(& 2) ==  1);\n+    /// assert!(( 1i).mod_floor(&-2) == -1);\n+    /// assert!((-1i).mod_floor(& 2) ==  1);\n+    /// assert!((-1i).mod_floor(&-2) == -1);\n     /// ```\n     ///\n     #[inline]"}, {"sha": "493069139ef2b9d434e31f3335d810b2ba45fe33", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -45,7 +45,7 @@ pub trait Zero: Add<Self, Self> {\n     ///\n     /// # Laws\n     ///\n-    /// ~~~\n+    /// ~~~ignore\n     /// a + 0 = a       \u2200 a \u2208 Self\n     /// 0 + a = a       \u2200 a \u2208 Self\n     /// ~~~\n@@ -71,7 +71,7 @@ pub trait One: Mul<Self, Self> {\n     ///\n     /// # Laws\n     ///\n-    /// ~~~\n+    /// ~~~ignore\n     /// a * 1 = a       \u2200 a \u2208 Self\n     /// 1 * a = a       \u2200 a \u2208 Self\n     /// ~~~\n@@ -964,6 +964,8 @@ impl_from_primitive!(f64, n.to_f64())\n /// # Example\n ///\n /// ```\n+/// use std::num;\n+///\n /// let twenty: f32 = num::cast(0x14).unwrap();\n /// assert_eq!(twenty, 20f32);\n /// ```"}, {"sha": "0915d49945dc5a00835f33cf4463e710c9fd90a2", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -20,7 +20,7 @@ use super::{IndependentSample, Sample, Exp};\n ///\n /// The density function of this distribution is\n ///\n-/// ```\n+/// ```ignore\n /// f(x) =  x^(k - 1) * exp(-x / \u03b8) / (\u0393(k) * \u03b8^k)\n /// ```\n ///"}, {"sha": "023900e5d41158b9964e4f482143a6b63360bd7a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -2011,7 +2011,7 @@ pub trait StrSlice<'a> {\n     ///\n     /// ## Output\n     ///\n-    /// ```\n+    /// ```ignore\n     /// 0: \u4e2d\n     /// 3: \u534e\n     /// 6: V"}, {"sha": "acae2c0c6c5c8a0042e3e35170624c0e776e621b", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -46,7 +46,7 @@\n  *\n  * ```\n  * spawn(proc() {\n- *     log(error, \"Hello, World!\");\n+ *     println!(\"Hello, World!\");\n  * })\n  * ```\n  */"}, {"sha": "6fb8981b681c3c1dfbcbb60ef98b821425afd332", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -19,13 +19,16 @@ also be used. See that function for more details.\n \n # Example\n \n- ```\n+```\n+use std::unstable::finally::Finally;\n+# fn always_run_this() {}\n+\n (|| {\n-    ...\n+    // ...\n }).finally(|| {\n     always_run_this();\n })\n- ```\n+```\n */\n \n use ops::Drop;\n@@ -69,13 +72,16 @@ impl<T> Finally<T> for fn() -> T {\n  * # Example\n  *\n  * ```\n+ * use std::unstable::finally::try_finally;\n+ *\n  * struct State<'a> { buffer: &'a mut [u8], len: uint }\n+ * # let mut buf = [];\n  * let mut state = State { buffer: buf, len: 0 };\n  * try_finally(\n  *     &mut state, (),\n  *     |state, ()| {\n  *         // use state.buffer, state.len\n- *     }\n+ *     },\n  *     |state| {\n  *         // use state.buffer, state.len to cleanup\n  *     })"}, {"sha": "9727d57e1558d8f85f85aeb0ff4e702bf7e1912a", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -955,7 +955,7 @@ pub trait ImmutableVector<'a, T> {\n      *\n      * Equivalent to:\n      *\n-     * ```\n+     * ```ignore\n      *     if self.len() == 0 { return None }\n      *     let head = &self[0];\n      *     *self = self.slice_from(1);\n@@ -973,7 +973,7 @@ pub trait ImmutableVector<'a, T> {\n      *\n      * Equivalent to:\n      *\n-     * ```\n+     * ```ignore\n      *     if self.len() == 0 { return None; }\n      *     let tail = &self[self.len() - 1];\n      *     *self = self.slice_to(self.len() - 1);\n@@ -2075,7 +2075,7 @@ pub trait MutableVector<'a, T> {\n      *\n      * Equivalent to:\n      *\n-     * ```\n+     * ```ignore\n      *     if self.len() == 0 { return None; }\n      *     let head = &mut self[0];\n      *     *self = self.mut_slice_from(1);\n@@ -2093,7 +2093,7 @@ pub trait MutableVector<'a, T> {\n      *\n      * Equivalent to:\n      *\n-     * ```\n+     * ```ignore\n      *     if self.len() == 0 { return None; }\n      *     let tail = &mut self[self.len() - 1];\n      *     *self = self.mut_slice_to(self.len() - 1);"}, {"sha": "9e0439e5375c9834d60692c6b8209f0307530ca8", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -17,8 +17,10 @@ Decodable)].\n \n For example, a type like:\n \n+```ignore\n     #[deriving(Encodable, Decodable)]\n     struct Node {id: uint}\n+```\n \n would generate two implementations like:\n \n@@ -43,11 +45,14 @@ impl<D:Decoder> Decodable for node_id {\n Other interesting scenarios are whe the item has type parameters or\n references other non-built-in types.  A type definition like:\n \n+```ignore\n     #[deriving(Encodable, Decodable)]\n     struct spanned<T> {node: T, span: Span}\n+```\n \n would yield functions like:\n \n+```ignore\n     impl<\n         S: Encoder,\n         T: Encodable<S>\n@@ -73,6 +78,7 @@ would yield functions like:\n             })\n         }\n     }\n+```\n */\n \n use ast::{MetaItem, Item, Expr, MutMutable};"}, {"sha": "029e87afbe21223fafe958b32c8035e0f2a64a36", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72ddbdc25a2696a41053832fad7d9b0428819af/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=e72ddbdc25a2696a41053832fad7d9b0428819af", "patch": "@@ -59,7 +59,7 @@ associated with. It is only not `None` when the associated field has\n an identifier in the source code. For example, the `x`s in the\n following snippet\n \n-~~~\n+~~~ignore\n struct A { x : int }\n \n struct B(int);\n@@ -83,7 +83,7 @@ variants, it is represented as a count of 0.\n \n The following simplified `Eq` is used for in-code examples:\n \n-~~~\n+~~~ignore\n trait Eq {\n     fn eq(&self, other: &Self);\n }\n@@ -101,7 +101,7 @@ above `Eq`, `A`, `B` and `C`.\n \n When generating the `expr` for the `A` impl, the `SubstructureFields` is\n \n-~~~\n+~~~ignore\n Struct(~[FieldInfo {\n            span: <span of x>\n            name: Some(<ident of x>),\n@@ -112,7 +112,7 @@ Struct(~[FieldInfo {\n \n For the `B` impl, called with `B(a)` and `B(b)`,\n \n-~~~\n+~~~ignore\n Struct(~[FieldInfo {\n           span: <span of `int`>,\n           name: None,\n@@ -126,7 +126,7 @@ Struct(~[FieldInfo {\n When generating the `expr` for a call with `self == C0(a)` and `other\n == C0(b)`, the SubstructureFields is\n \n-~~~\n+~~~ignore\n EnumMatching(0, <ast::Variant for C0>,\n              ~[FieldInfo {\n                 span: <span of int>\n@@ -138,7 +138,7 @@ EnumMatching(0, <ast::Variant for C0>,\n \n For `C1 {x}` and `C1 {x}`,\n \n-~~~\n+~~~ignore\n EnumMatching(1, <ast::Variant for C1>,\n              ~[FieldInfo {\n                 span: <span of x>\n@@ -150,7 +150,7 @@ EnumMatching(1, <ast::Variant for C1>,\n \n For `C0(a)` and `C1 {x}` ,\n \n-~~~\n+~~~ignore\n EnumNonMatching(~[(0, <ast::Variant for B0>,\n                    ~[(<span of int>, None, <expr for &a>)]),\n                   (1, <ast::Variant for B1>,\n@@ -164,7 +164,7 @@ EnumNonMatching(~[(0, <ast::Variant for B0>,\n \n A static method on the above would result in,\n \n-~~~~\n+~~~~ignore\n StaticStruct(<ast::StructDef of A>, Named(~[(<ident of x>, <span of x>)]))\n \n StaticStruct(<ast::StructDef of B>, Unnamed(~[<span of x>]))\n@@ -346,7 +346,9 @@ impl<'a> TraitDef<'a> {\n      * Given that we are deriving a trait `Tr` for a type `T<'a, ...,\n      * 'z, A, ..., Z>`, creates an impl like:\n      *\n+     * ```ignore\n      *      impl<'a, ..., 'z, A:Tr B1 B2, ..., Z: Tr B1 B2> Tr for T<A, ..., Z> { ... }\n+     * ```\n      *\n      * where B1, B2, ... are the bounds given by `bounds_paths`.'\n      *\n@@ -620,7 +622,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /**\n-   ~~~\n+   ~~~ignore\n     #[deriving(Eq)]\n     struct A { x: int, y: int }\n \n@@ -719,7 +721,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /**\n-   ~~~\n+   ~~~ignore\n     #[deriving(Eq)]\n     enum A {\n         A1\n@@ -762,7 +764,7 @@ impl<'a> MethodDef<'a> {\n     /**\n     Creates the nested matches for an enum definition recursively, i.e.\n \n-   ~~~\n+   ~~~ignore\n     match self {\n        Variant1 => match other { Variant1 => matching, Variant2 => nonmatching, ... },\n        Variant2 => match other { Variant1 => nonmatching, Variant2 => matching, ... },\n@@ -1166,7 +1168,7 @@ pub fn cs_fold(use_foldl: bool,\n Call the method that is being derived on all the fields, and then\n process the collected results. i.e.\n \n-~~~\n+~~~ignore\n f(cx, span, ~[self_1.method(__arg_1_1, __arg_2_1),\n               self_2.method(__arg_1_2, __arg_2_2)])\n ~~~"}]}