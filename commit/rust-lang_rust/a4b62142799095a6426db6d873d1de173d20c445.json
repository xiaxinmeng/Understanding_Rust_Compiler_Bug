{"sha": "a4b62142799095a6426db6d873d1de173d20c445", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YjYyMTQyNzk5MDk1YTY0MjZkYjZkODczZDFkZTE3M2QyMGM0NDU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-24T05:49:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-24T23:14:27Z"}, "message": "Add attr_span helper function", "tree": {"sha": "87263a14b1815b2f6718ff6aeb04bf81c0b972e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87263a14b1815b2f6718ff6aeb04bf81c0b972e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b62142799095a6426db6d873d1de173d20c445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b62142799095a6426db6d873d1de173d20c445", "html_url": "https://github.com/rust-lang/rust/commit/a4b62142799095a6426db6d873d1de173d20c445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b62142799095a6426db6d873d1de173d20c445/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e11f3a8f3c1b2683125e7def0acb68a6d684f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11f3a8f3c1b2683125e7def0acb68a6d684f92", "html_url": "https://github.com/rust-lang/rust/commit/7e11f3a8f3c1b2683125e7def0acb68a6d684f92"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "e2eeacdb567a3369afddb49a3cfa80719cdd76c5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -255,6 +255,10 @@ impl Item {\n         if self.is_fake() { None } else { tcx.lookup_deprecation(self.def_id) }\n     }\n \n+    crate fn attr_span(&self, _tcx: TyCtxt<'_>) -> rustc_span::Span {\n+        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span.inner())\n+    }\n+\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n     crate fn doc_value(&self) -> Option<String> {"}, {"sha": "56ef15eb8842017b1320425fb719f4cf8390895c", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -1,4 +1,4 @@\n-use super::{span_of_attrs, Pass};\n+use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n@@ -69,8 +69,7 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n         if !dox.is_empty() {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n-                    .or_else(|| span_of_attrs(&item.attrs))\n-                    .unwrap_or(item.span.inner());\n+                    .unwrap_or_else(|| item.attr_span(cx.tcx));\n                 cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .note(\"bare URLs are not automatically turned into clickable links\")"}, {"sha": "68a66806e04765994cf30f6ef8d63dd09639e755", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -9,7 +9,7 @@ use crate::clean;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{self, RustCodeBlock};\n-use crate::passes::{span_of_attrs, Pass};\n+use crate::passes::Pass;\n \n crate const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n     name: \"check-code-block-syntax\",\n@@ -86,7 +86,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n+                    item.attr_span(self.cx.tcx),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n \n@@ -110,7 +110,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n+            let sp = item.attr_span(self.cx.tcx);\n             let extra = crate::html::markdown::ExtraInfo::new_did(self.cx.tcx, item.def_id, sp);\n             for code_block in markdown::rust_code_blocks(&dox, &extra) {\n                 self.check_rust_syntax(&item, &dox, code_block);"}, {"sha": "dad6593248dae7be9162a39297aff2e7a3e69433", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -37,8 +37,6 @@ use crate::html::markdown::{markdown_links, MarkdownLink};\n use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n-use super::span_of_attrs;\n-\n mod early;\n crate use early::IntraLinkCrateLoader;\n \n@@ -1242,7 +1240,7 @@ impl LinkCollector<'_, '_> {\n                             &ori_link.range,\n                             &item.attrs,\n                         )\n-                        .unwrap_or_else(|| span_of_attrs(&item.attrs).unwrap_or(item.span.inner()));\n+                        .unwrap_or_else(|| item.attr_span(self.cx.tcx));\n \n                         rustc_session::parse::feature_err(\n                             &self.cx.tcx.sess.parse_sess,\n@@ -1695,13 +1693,12 @@ fn report_diagnostic(\n         }\n     };\n \n-    let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.span.inner());\n+    let sp = item.attr_span(tcx);\n \n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = super::source_span_for_markdown_range(tcx, dox, link_range, attrs);\n+        let span = super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs);\n \n         if let Some(sp) = span {\n             diag.set_span(sp);"}, {"sha": "c8d2263d81d5404017d2ba2d79673b8f0b3da1b2", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -3,7 +3,7 @@\n //! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doctests\n //! - PRIVATE_DOC_TESTS: this lint is **STABLE** and looks for private items with doctests.\n \n-use super::{span_of_attrs, Pass};\n+use super::Pass;\n use crate::clean;\n use crate::clean::*;\n use crate::core::DocContext;\n@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n         if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n+            let sp = item.attr_span(cx.tcx);\n             cx.tcx.struct_span_lint_hir(\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n@@ -109,7 +109,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         cx.tcx.struct_span_lint_hir(\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n+            item.attr_span(cx.tcx),\n             |lint| lint.build(\"documentation test in private item\").emit(),\n         );\n     }"}, {"sha": "f29d38e3e078a51251edb7668d72fa0465f0a8ef", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b62142799095a6426db6d873d1de173d20c445/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=a4b62142799095a6426db6d873d1de173d20c445", "patch": "@@ -1,4 +1,4 @@\n-use super::{span_of_attrs, Pass};\n+use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n@@ -181,7 +181,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs)\n                 {\n                     Some(sp) => sp,\n-                    None => span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n+                    None => item.attr_span(tcx),\n                 };\n                 tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()"}]}