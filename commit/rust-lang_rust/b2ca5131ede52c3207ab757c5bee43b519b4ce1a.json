{"sha": "b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyY2E1MTMxZWRlNTJjMzIwN2FiNzU3YzViZWU0M2I1MTliNGNlMWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-08T23:35:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-08T23:35:15Z"}, "message": "Rollup merge of #76379 - petrochenkov:nodegen, r=Mark-Simulacrum\n\nrustbuild: Remove `Mode::Codegen`\n\nIt's no longer used.", "tree": {"sha": "78dda8ec49ab0d3198286516926149c9cac7ca9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78dda8ec49ab0d3198286516926149c9cac7ca9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWBUzCRBK7hj4Ov3rIwAAdHIIAFhe4RuDyieAqDV7bXs6g4fr\nea0mihiawKtY0mdDbu3suEByTArKyC8Jr+G+xq/EixH/yKhyPre+sGBaQDXjdKLD\nNMwog/m8E8oi73rU2Kp3cMIa6pR5bxSWJgK7sIYwo5KXiV4l57ILoQQY2fs29M41\nLkfJxYnMfLMJVpjVLcLe2/MxojPfMjXBsNdjsJj49CUI9LeCEly/mlqVXLwqxXJe\ndRlxSWe4mh6wvodqhgw9rqCNPAFj51//KU7smrtYfUljDpZELvpZWk5VnRX+bDT1\nilGx1SXBXxSpsGVTixskRTT+V92NHRRr4jZsv1aKaDjSfVVvpHiCPtHDD8UJsOg=\n=61Tl\n-----END PGP SIGNATURE-----\n", "payload": "tree 78dda8ec49ab0d3198286516926149c9cac7ca9b\nparent 3cec71e9b44f719e60e5d12cfe4c45e5c7b3b606\nparent 4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599608115 +0200\ncommitter GitHub <noreply@github.com> 1599608115 +0200\n\nRollup merge of #76379 - petrochenkov:nodegen, r=Mark-Simulacrum\n\nrustbuild: Remove `Mode::Codegen`\n\nIt's no longer used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "html_url": "https://github.com/rust-lang/rust/commit/b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2ca5131ede52c3207ab757c5bee43b519b4ce1a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cec71e9b44f719e60e5d12cfe4c45e5c7b3b606", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cec71e9b44f719e60e5d12cfe4c45e5c7b3b606", "html_url": "https://github.com/rust-lang/rust/commit/3cec71e9b44f719e60e5d12cfe4c45e5c7b3b606"}, {"sha": "4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "html_url": "https://github.com/rust-lang/rust/commit/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "01dbb48354825cc15713855fcb647e95b2dbff3f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2ca5131ede52c3207ab757c5bee43b519b4ce1a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ca5131ede52c3207ab757c5bee43b519b4ce1a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "patch": "@@ -797,7 +797,7 @@ impl<'a> Builder<'a> {\n         if cmd == \"doc\" || cmd == \"rustdoc\" {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n-                Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n+                Mode::Rustc | Mode::ToolRustc => self.compiler_doc_out(target),\n                 Mode::Std => out_dir.join(target.triple).join(\"doc\"),\n                 _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n@@ -875,7 +875,7 @@ impl<'a> Builder<'a> {\n \n         match mode {\n             Mode::Std | Mode::ToolBootstrap | Mode::ToolStd => {}\n-            Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n+            Mode::Rustc | Mode::ToolRustc => {\n                 // Build proc macros both for the host and the target\n                 if target != compiler.host && cmd != \"check\" {\n                     cargo.arg(\"-Zdual-proc-macros\");\n@@ -1060,7 +1060,7 @@ impl<'a> Builder<'a> {\n         }\n \n         let debuginfo_level = match mode {\n-            Mode::Rustc | Mode::Codegen => self.config.rust_debuginfo_level_rustc,\n+            Mode::Rustc => self.config.rust_debuginfo_level_rustc,\n             Mode::Std => self.config.rust_debuginfo_level_std,\n             Mode::ToolBootstrap | Mode::ToolStd | Mode::ToolRustc => {\n                 self.config.rust_debuginfo_level_tools\n@@ -1197,7 +1197,7 @@ impl<'a> Builder<'a> {\n             rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n         }\n \n-        if let Mode::Rustc | Mode::Codegen = mode {\n+        if mode == Mode::Rustc {\n             rustflags.arg(\"-Zunstable-options\");\n             rustflags.arg(\"-Wrustc::internal\");\n         }\n@@ -1360,7 +1360,7 @@ impl<'a> Builder<'a> {\n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n         // linking all deps statically into the dylib.\n-        if let Mode::Std | Mode::Rustc | Mode::Codegen = mode {\n+        if matches!(mode, Mode::Std | Mode::Rustc) {\n             rustflags.arg(\"-Cprefer-dynamic\");\n         }\n "}, {"sha": "c1dec8ed1813172d9a4a470421fb4cfd4f0779e7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2ca5131ede52c3207ab757c5bee43b519b4ce1a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ca5131ede52c3207ab757c5bee43b519b4ce1a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b2ca5131ede52c3207ab757c5bee43b519b4ce1a", "patch": "@@ -298,9 +298,6 @@ pub enum Mode {\n     /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n     Rustc,\n \n-    /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n-    Codegen,\n-\n     /// Build a tool, placing output in the \"stage0-bootstrap-tools\"\n     /// directory. This is for miscellaneous sets of tools that are built\n     /// using the bootstrap stage0 compiler in its entirety (target libraries\n@@ -570,7 +567,6 @@ impl Build {\n         let suffix = match mode {\n             Mode::Std => \"-std\",\n             Mode::Rustc => \"-rustc\",\n-            Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n             Mode::ToolStd | Mode::ToolRustc => \"-tools\",\n         };"}]}