{"sha": "4f1a618e5db3b17442ab076d954d3e1f0767a091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMWE2MThlNWRiM2IxNzQ0MmFiMDc2ZDk1NGQzZTFmMDc2N2EwOTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-12T14:04:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-12T14:04:12Z"}, "message": "Rollup merge of #54936 - RalfJung:layout-hash, r=oli-obk\n\nimpl Eq+Hash for TyLayout\n\nAs proposed by @eddyb at https://github.com/rust-lang/rust/pull/53671#pullrequestreview-159761136.\n\nI have an upcoming PR that would also significantly benefit from this.", "tree": {"sha": "9a810fcc665555f9a6d3829102879b6f0b2d2b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a810fcc665555f9a6d3829102879b6f0b2d2b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f1a618e5db3b17442ab076d954d3e1f0767a091", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwKncCRBK7hj4Ov3rIwAAdHIIAH1zphexEz/7xjpeLq9WCPCN\nF+1Hi2U7evnY2Qz2GNLCeafqqxL+Of4YZ5UFG2IxaNXpz1eJKQ/Qw8VLdl6SVfnD\noVAJZiC9CI0i6ox/zTZf//W9kFm+28yQDvAej0YKzDsTyM81+MdhoIeq6+qSL+xu\noxWAWiosdoVAGqxteYbYzlg/6SV2kNtXcjbvRDZj12sNvA0pe+FGFCXnbnCQQCp6\n8vp7I1sjAtks0aGU6ejW2GWNjAwQHr+9M4di1vn7b2EwCv3fdgWYIe2+w5ji9kfp\nskuKJC4SSV3OepX1rek9YvJKQsGFHA8B2w8o9yZTYbQbNcoXnq3yKpRdSRT04eo=\n=RIUQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a810fcc665555f9a6d3829102879b6f0b2d2b99\nparent fcb3ce4f539b5b20e8efed45eeac6c7b02e095ab\nparent 99db3e9bcecbd4874e71283a6285462b53e47184\nauthor kennytm <kennytm@gmail.com> 1539353052 +0800\ncommitter GitHub <noreply@github.com> 1539353052 +0800\n\nRollup merge of #54936 - RalfJung:layout-hash, r=oli-obk\n\nimpl Eq+Hash for TyLayout\n\nAs proposed by @eddyb at https://github.com/rust-lang/rust/pull/53671#pullrequestreview-159761136.\n\nI have an upcoming PR that would also significantly benefit from this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1a618e5db3b17442ab076d954d3e1f0767a091", "html_url": "https://github.com/rust-lang/rust/commit/4f1a618e5db3b17442ab076d954d3e1f0767a091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f1a618e5db3b17442ab076d954d3e1f0767a091/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb3ce4f539b5b20e8efed45eeac6c7b02e095ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb3ce4f539b5b20e8efed45eeac6c7b02e095ab", "html_url": "https://github.com/rust-lang/rust/commit/fcb3ce4f539b5b20e8efed45eeac6c7b02e095ab"}, {"sha": "99db3e9bcecbd4874e71283a6285462b53e47184", "url": "https://api.github.com/repos/rust-lang/rust/commits/99db3e9bcecbd4874e71283a6285462b53e47184", "html_url": "https://github.com/rust-lang/rust/commit/99db3e9bcecbd4874e71283a6285462b53e47184"}], "stats": {"total": 25, "additions": 2, "deletions": 23}, "files": [{"sha": "c72a5894b6ac7f54f0b83bf1f9ed7bcf70e78479", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f1a618e5db3b17442ab076d954d3e1f0767a091/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1a618e5db3b17442ab076d954d3e1f0767a091/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=4f1a618e5db3b17442ab076d954d3e1f0767a091", "patch": "@@ -11,7 +11,6 @@\n //! Functions concerning immediate values and operands, and reading from operands.\n //! All high-level functions to read from memory work on operands as sources.\n \n-use std::hash::{Hash, Hasher};\n use std::convert::TryInto;\n \n use rustc::{mir, ty};\n@@ -290,7 +289,7 @@ impl<Tag> Operand<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct OpTy<'tcx, Tag=()> {\n     crate op: Operand<Tag>, // ideally we'd make this private, but const_prop needs this\n     pub layout: TyLayout<'tcx>,\n@@ -324,26 +323,6 @@ impl<'tcx, Tag> From<ValTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n-// Validation needs to hash OpTy, but we cannot hash Layout -- so we just hash the type\n-impl<'tcx, Tag> Hash for OpTy<'tcx, Tag>\n-    where Tag: Hash\n-{\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.op.hash(state);\n-        self.layout.ty.hash(state);\n-    }\n-}\n-impl<'tcx, Tag> PartialEq for OpTy<'tcx, Tag>\n-    where Tag: PartialEq\n-{\n-    fn eq(&self, other: &Self) -> bool {\n-        self.op == other.op && self.layout.ty == other.layout.ty\n-    }\n-}\n-impl<'tcx, Tag> Eq for OpTy<'tcx, Tag>\n-    where Tag: Eq\n-{}\n-\n impl<'tcx, Tag> OpTy<'tcx, Tag>\n {\n     #[inline]"}, {"sha": "6b28fd091748f14114b21d7224e82620b5a65d55", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1a618e5db3b17442ab076d954d3e1f0767a091/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1a618e5db3b17442ab076d954d3e1f0767a091/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=4f1a618e5db3b17442ab076d954d3e1f0767a091", "patch": "@@ -874,7 +874,7 @@ impl LayoutDetails {\n /// to those obtained from `layout_of(ty)`, as we need to produce\n /// layouts for which Rust types do not exist, such as enum variants\n /// or synthetic fields of enums (i.e. discriminants) and fat pointers.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct TyLayout<'a, Ty> {\n     pub ty: Ty,\n     pub details: &'a LayoutDetails"}]}