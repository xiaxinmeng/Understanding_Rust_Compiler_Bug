{"sha": "393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5M2RlZWIwNmZmODAxN2E5M2IwZmQyNmMxZjY5NjhmZGZmMmIxNWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T16:36:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T16:36:51Z"}, "message": "Merge branch 'unwind'\n\nConflicts:\n\tsrc/comp/middle/trans.rs\n\tsrc/comp/middle/trans_build.rs\n\tsrc/lib/run_program.rs\n\tsrc/test/compiletest/runtest.rs", "tree": {"sha": "3dacb71e604095ec94a8f350f44467b7640f289d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dacb71e604095ec94a8f350f44467b7640f289d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "html_url": "https://github.com/rust-lang/rust/commit/393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edde2e0c457de6e5d17373bfa90ef319df4a1566", "url": "https://api.github.com/repos/rust-lang/rust/commits/edde2e0c457de6e5d17373bfa90ef319df4a1566", "html_url": "https://github.com/rust-lang/rust/commit/edde2e0c457de6e5d17373bfa90ef319df4a1566"}, {"sha": "6ffcfba6b990d6f27243e4dd6ddfffab141e1f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffcfba6b990d6f27243e4dd6ddfffab141e1f44", "html_url": "https://github.com/rust-lang/rust/commit/6ffcfba6b990d6f27243e4dd6ddfffab141e1f44"}], "stats": {"total": 597, "additions": 491, "deletions": 106}, "files": [{"sha": "a647e9cb3c555c2e86730b291d70115e0fff1d4a", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -114,7 +114,7 @@ ifdef CFG_UNIXY\n   endif\n   ifdef CFG_VALGRIND\n     CFG_VALGRIND += --leak-check=full \\\n-                    --error-exitcode=1 \\\n+                    --error-exitcode=100 \\\n                     --quiet --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp\n   endif\n endif"}, {"sha": "021617d1f187d853ee439330f03fd8e028215602", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -37,7 +37,8 @@ type upcalls =\n      log_type: ValueRef,\n      dynastack_mark: ValueRef,\n      dynastack_alloc: ValueRef,\n-     dynastack_free: ValueRef};\n+     dynastack_free: ValueRef,\n+     rust_personality: ValueRef};\n \n fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n                    taskptr_type: TypeRef, llmod: ModuleRef) -> @upcalls {\n@@ -89,7 +90,9 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n           dynastack_alloc:\n               d(\"dynastack_alloc_2\", [T_size_t(), T_ptr(tydesc_type)],\n                 T_ptr(T_i8())),\n-          dynastack_free: d(\"dynastack_free\", [T_ptr(T_i8())], T_void())};\n+          dynastack_free: d(\"dynastack_free\", [T_ptr(T_i8())], T_void()),\n+          rust_personality: dr(\"rust_personality\", [], T_i32())\n+         };\n }\n //\n // Local Variables:"}, {"sha": "8e00c8d63cd553087da4e23881374935ec1e08a8", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -572,6 +572,9 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n     fn LLVMBuildInvoke(B: BuilderRef, Fn: ValueRef, Args: *ValueRef,\n                        NumArgs: uint, Then: BasicBlockRef,\n                        Catch: BasicBlockRef, Name: sbuf) -> ValueRef;\n+    fn LLVMBuildLandingPad(B: BuilderRef, Ty: TypeRef, PersFn: ValueRef,\n+                           NumClauses: uint, Name: sbuf) -> ValueRef;\n+    fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n     fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n \n     /* Add a case to the switch instruction */\n@@ -580,6 +583,12 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n     /* Add a destination to the indirectbr instruction */\n     fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);\n \n+    /* Add a clause to the landing pad instruction */\n+    fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);\n+\n+    /* Set the cleanup on a landing pad instruction */\n+    fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);\n+\n     /* Arithmetic */\n     fn LLVMBuildAdd(B: BuilderRef, LHS: ValueRef, RHS: ValueRef, Name: sbuf)\n        -> ValueRef;"}, {"sha": "391d56526df04cdac59ea65060b297869c495587", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 92, "deletions": 26, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -3715,7 +3715,7 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n        for the call itself is unreachable. */\n     let retval = C_nil();\n     if !is_terminated(bcx) {\n-        FastCall(bcx, faddr, llargs);\n+        bcx = invoke_fastcall(bcx, faddr, llargs).bcx;\n         alt lliterbody {\n           none. {\n             if !ty::type_is_nil(bcx_tcx(cx), ret_ty) {\n@@ -3748,6 +3748,67 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n     ret rslt(bcx, retval);\n }\n \n+fn invoke(bcx: @block_ctxt, llfn: ValueRef,\n+          llargs: [ValueRef]) -> result {\n+    ret invoke_(bcx, llfn, llargs, Invoke);\n+}\n+\n+fn invoke_fastcall(bcx: @block_ctxt, llfn: ValueRef,\n+                   llargs: [ValueRef]) -> result {\n+    ret invoke_(bcx, llfn, llargs, FastInvoke);\n+}\n+\n+fn invoke_(bcx: @block_ctxt, llfn: ValueRef,\n+           llargs: [ValueRef],\n+           invoker: fn(@block_ctxt, ValueRef, [ValueRef],\n+                       BasicBlockRef, BasicBlockRef) -> ValueRef) -> result {\n+    // FIXME: May be worth turning this into a plain call when there are no\n+    // cleanups to run\n+    let normal_bcx = new_sub_block_ctxt(bcx, \"normal return\");\n+    let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n+    let retval = invoker(bcx, llfn, llargs,\n+                         normal_bcx.llbb,\n+                         unwind_bcx.llbb);\n+    trans_landing_pad(unwind_bcx);\n+    ret rslt(normal_bcx, retval);\n+}\n+\n+fn trans_landing_pad(bcx: @block_ctxt) {\n+    // The landing pad return type (the type being propagated). Not sure what\n+    // this represents but it's determined by the personality function and\n+    // this is what the EH proposal example uses.\n+    let llretty = T_struct([T_ptr(T_i8()), T_i32()]);\n+    // The exception handling personality function. This is the C++\n+    // personality function __gxx_personality_v0, wrapped in our naming\n+    // convention.\n+    let personality = bcx_ccx(bcx).upcalls.rust_personality;\n+    // The only landing pad clause will be 'cleanup'\n+    let clauses = 1u;\n+    let llpad = LandingPad(bcx, llretty, personality, clauses);\n+    // The landing pad result is used both for modifying the landing pad\n+    // in the C API and as the exception value\n+    let llretval = llpad;\n+    // The landing pad block is a cleanup\n+    SetCleanup(bcx, llpad);\n+\n+    // FIXME: This seems like a very naive and redundant way to generate the\n+    // landing pads, as we're re-generating all in-scope cleanups for each\n+    // function call. Probably good optimization opportunities here.\n+    let bcx = bcx;\n+    let scope_cx = bcx;\n+    while true {\n+        scope_cx = find_scope_cx(scope_cx);\n+        bcx = trans_block_cleanups(bcx, scope_cx);\n+        scope_cx = alt scope_cx.parent {\n+          parent_some(b) { b }\n+          parent_none. { break; }\n+        };\n+    }\n+\n+    // Continue unwinding\n+    Resume(bcx, llretval);\n+}\n+\n fn trans_tup(cx: @block_ctxt, elts: [@ast::expr], id: ast::node_id) ->\n    result {\n     let bcx = cx;\n@@ -4211,7 +4272,7 @@ fn trans_fail_value(cx: @block_ctxt, sp_opt: option::t<span>,\n     let V_str = PointerCast(cx, V_fail_str, T_ptr(T_i8()));\n     V_filename = PointerCast(cx, V_filename, T_ptr(T_i8()));\n     let args = [cx.fcx.lltaskptr, V_str, V_filename, C_int(V_line)];\n-    Call(cx, bcx_ccx(cx).upcalls._fail, args);\n+    let cx = invoke(cx, bcx_ccx(cx).upcalls._fail, args).bcx;\n     Unreachable(cx);\n     ret rslt(cx, C_nil());\n }\n@@ -4247,7 +4308,7 @@ fn trans_put(in_cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n         llargs += [r.val];\n       }\n     }\n-    FastCall(bcx, llcallee, llargs);\n+    bcx = invoke_fastcall(bcx, llcallee, llargs).bcx;\n     bcx = trans_block_cleanups(bcx, cx);\n     let next_cx = new_sub_block_ctxt(in_cx, \"next\");\n     Br(bcx, next_cx.llbb);\n@@ -4379,7 +4440,9 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> result {\n     // Make a note to drop this slot on the way out.\n     add_clean(bcx, llptr, ty);\n \n-    if must_zero(local) { bcx = zero_alloca(bcx, llptr, ty).bcx; }\n+    if must_zero(bcx_ccx(bcx), local) {\n+        bcx = zero_alloca(bcx, llptr, ty).bcx;\n+    }\n \n     alt local.node.init {\n       some(init) {\n@@ -4405,35 +4468,38 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> result {\n                                         bcx.fcx.lllocals, false);\n     ret rslt(bcx, llptr);\n \n-    fn must_zero(local: @ast::local) -> bool {\n+    fn must_zero(ccx: @crate_ctxt, local: @ast::local) -> bool {\n         alt local.node.init {\n-          some(init) { might_not_init(init.expr) }\n+          some(init) { might_not_init(ccx, init.expr) }\n           none. { true }\n         }\n     }\n \n-    fn might_not_init(expr: @ast::expr) -> bool {\n-        type env = @mutable bool;\n-        let e = @mutable false;\n-        // FIXME: Probably also need to account for expressions that\n-        // fail but since we don't unwind yet, it doesn't seem to be a\n-        // problem\n+    fn might_not_init(ccx: @crate_ctxt, expr: @ast::expr) -> bool {\n+        type env = {mutable mightnt: bool,\n+                    ccx: @crate_ctxt};\n+        let e = {mutable mightnt: false,\n+                 ccx: ccx};\n+        fn visit_expr(ex: @ast::expr, e: env, v: vt<env>) {\n+            let might_not_init = alt ex.node {\n+              ast::expr_ret(_) { true }\n+              ast::expr_break. { true }\n+              ast::expr_cont. { true }\n+              ast::expr_call(_, _) { true }\n+              _ {\n+                let ex_ty = ty::expr_ty(e.ccx.tcx, ex);\n+                ty::type_is_bot(e.ccx.tcx, ex_ty)\n+              }\n+            };\n+            if might_not_init {\n+                e.mightnt = true;\n+            } else { visit::visit_expr(ex, e, v); }\n+        }\n         let visitor =\n-            visit::mk_vt(@{visit_expr:\n-                               fn (ex: @ast::expr, e: env, v: vt<env>) {\n-                                   let might_not_init =\n-                                       alt ex.node {\n-                                         ast::expr_ret(_) { true }\n-                                         ast::expr_break. { true }\n-                                         ast::expr_cont. { true }\n-                                         _ { false }\n-                                       };\n-                                   if might_not_init {\n-                                       *e = true;\n-                                   } else { visit::visit_expr(ex, e, v); }\n-                               } with *visit::default_visitor()});\n+            visit::mk_vt(@{visit_expr: visit_expr\n+                           with *visit::default_visitor()});\n         visitor.visit_expr(expr, e, visitor);\n-        ret *e;\n+        ret e.mightnt;\n     }\n }\n "}, {"sha": "5c2a763603b1fc9cf04ce64d3680235cb5e063a0", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -68,6 +68,21 @@ fn Invoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n                     });\n }\n \n+fn FastInvoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n+              Then: BasicBlockRef, Catch: BasicBlockRef) -> ValueRef {\n+    assert (!cx.terminated);\n+    cx.terminated = true;\n+    let v = str::as_buf(\"\",\n+                        {|buf|\n+                            llvm::LLVMBuildInvoke(B(cx), Fn,\n+                                                  vec::to_ptr(Args),\n+                                                  vec::len(Args), Then,\n+                                                  Catch, buf)\n+                        });\n+    llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n+    ret v;\n+}\n+\n fn Unreachable(cx: @block_ctxt) -> ValueRef {\n     assert (!cx.terminated);\n     cx.terminated = true;\n@@ -527,6 +542,29 @@ fn Trap(cx: @block_ctxt) -> ValueRef {\n                     });\n }\n \n+fn LandingPad(cx: @block_ctxt, Ty: TypeRef, PersFn: ValueRef,\n+              NumClauses: uint) -> ValueRef {\n+    assert (!cx.terminated);\n+    ret str::as_buf(\"\",\n+                    {|buf|\n+                        llvm::LLVMBuildLandingPad(B(cx),\n+                                                  Ty,\n+                                                  PersFn,\n+                                                  NumClauses,\n+                                                  buf)\n+                    });\n+}\n+\n+fn SetCleanup(_cx: @block_ctxt, LandingPad: ValueRef) {\n+    llvm::LLVMSetCleanup(LandingPad, lib::llvm::True);\n+}\n+\n+fn Resume(cx: @block_ctxt, Exn: ValueRef) -> ValueRef {\n+    assert (!cx.terminated);\n+    cx.terminated = true;\n+    ret llvm::LLVMBuildResume(B(cx), Exn);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "09b80ba448ffa3a8236d6ff7f32b18d7c6c32b28", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -27,7 +27,8 @@ def scrub(b):\n         f = codecs.open(os.path.join(run_pass, t), \"r\", \"utf8\")\n         s = f.read()\n         if not (\"xfail-test\" in s or\n-                \"xfail-fast\" in s):\n+                \"xfail-fast\" in s or\n+                \"xfail-win32\" in s):\n             stage2_tests.append(t)\n             if \"main(args: [str])\" in s:\n                 take_args[t] = True"}, {"sha": "31bccf320374c093f1616e149312348c20b0b1c0", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -6,6 +6,7 @@ export run_program;\n export start_program;\n export program_output;\n export spawn_process;\n+export waitpid;\n \n native \"rust\" mod rustrt {\n     fn rust_run_program(argv: *sbuf, in_fd: int, out_fd: int, err_fd: int) ->\n@@ -33,7 +34,7 @@ fn spawn_process(prog: str, args: [str], in_fd: int, out_fd: int, err_fd: int)\n }\n \n fn run_program(prog: str, args: [str]) -> int {\n-    ret os::waitpid(spawn_process(prog, args, 0, 0, 0));\n+    ret waitpid(spawn_process(prog, args, 0, 0, 0));\n }\n \n type program =\n@@ -87,7 +88,7 @@ fn start_program(prog: str, args: [str]) -> @program_res {\n             if finished { ret 0; }\n             finished = true;\n             self.close_input();\n-            ret os::waitpid(pid);\n+            ret waitpid(pid);\n         }\n         fn destroy() {\n             self.finish();\n@@ -117,6 +118,44 @@ fn program_output(prog: str, args: [str]) ->\n          out: read_all(pr.output()),\n          err: read_all(pr.err())};\n }\n+\n+/* Returns an exit status */\n+#[cfg(target_os = \"win32\")]\n+fn waitpid(pid: int) -> int {\n+    os::waitpid(pid)\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+fn waitpid(pid: int) -> int {\n+    #[cfg(target_os = \"linux\")]\n+    fn WIFEXITED(status: int) -> bool {\n+        (status & 0xff) == 0\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    fn WIFEXITED(status: int) -> bool {\n+        (status & 0x7f) == 0\n+    }\n+\n+    #[cfg(target_os = \"linux\")]\n+    fn WEXITSTATUS(status: int) -> int {\n+        (status >> 8) & 0xff\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    fn WEXITSTATUS(status: int) -> int {\n+        status >> 8\n+    }\n+\n+    let status = os::waitpid(pid);\n+    ret if WIFEXITED(status) {\n+        WEXITSTATUS(status)\n+    } else {\n+        1\n+    };\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "70de45653652a10f587b09a76cae20e681f13db3", "filename": "src/lib/test.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -26,7 +26,6 @@ export configure_test_task;\n export joinable;\n \n native \"rust\" mod rustrt {\n-    fn hack_allow_leaks();\n     fn sched_threads() -> uint;\n }\n \n@@ -324,12 +323,6 @@ fn configure_test_task() {\n     // If this task fails we don't want that failure to propagate to the\n     // test runner or else we couldn't keep running tests\n     task::unsupervise();\n-\n-    // FIXME (236): Hack supreme - unwinding doesn't work yet so if this\n-    // task fails memory will not be freed correctly. This turns off the\n-    // sanity checks in the runtime's memory region for the task, so that\n-    // the test runner can continue.\n-    rustrt::hack_allow_leaks();\n }\n \n // Local Variables:"}, {"sha": "a55d073543d7c611c95869424818e38d38fd6bd9", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -15,13 +15,13 @@ memory_region::alloc_header *memory_region::get_header(void *mem) {\n memory_region::memory_region(rust_srv *srv, bool synchronized) :\n     _srv(srv), _parent(NULL), _live_allocations(0),\n     _detailed_leaks(srv->env->detailed_leaks),\n-    _synchronized(synchronized), _hack_allow_leaks(false) {\n+    _synchronized(synchronized) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n     _srv(parent->_srv), _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n-    _synchronized(parent->_synchronized), _hack_allow_leaks(false) {\n+    _synchronized(parent->_synchronized) {\n }\n \n void memory_region::add_alloc() {\n@@ -127,18 +127,13 @@ memory_region::~memory_region() {\n         assert(leak_count == _live_allocations);\n     }\n #endif\n-    if (!_hack_allow_leaks && _live_allocations > 0) {\n+    if (_live_allocations > 0) {\n         _srv->fatal(msg, __FILE__, __LINE__,\n                     \"%d objects\", _live_allocations);\n     }\n     if (_synchronized) { _lock.unlock(); }\n }\n \n-void\n-memory_region::hack_allow_leaks() {\n-    _hack_allow_leaks = true;\n-}\n-\n void\n memory_region::release_alloc(void *mem) {\n     alloc_header *alloc = get_header(mem);"}, {"sha": "9d2106c1eafcd7785a07ba4fddf716d3e5369617", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -32,7 +32,6 @@ class memory_region {\n     const bool _detailed_leaks;\n     const bool _synchronized;\n     lock_and_signal _lock;\n-    bool _hack_allow_leaks;\n \n     void add_alloc();\n     void dec_alloc();\n@@ -46,10 +45,6 @@ class memory_region {\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     virtual ~memory_region();\n-    // FIXME (236: This is a temporary hack to allow failing tasks that leak\n-    // to not kill the entire process, which the test runner needs. Please\n-    // kill with prejudice once unwinding works.\n-    void hack_allow_leaks();\n \n     void release_alloc(void *mem);\n     void claim_alloc(void *mem);"}, {"sha": "2499dea0328d4a5590abdcc8acaeebcdac6174fa", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -224,13 +224,6 @@ debug_opaque(rust_task *task, type_desc *t, uint8_t *front)\n     }\n }\n \n-extern \"C\" CDECL void\n-hack_allow_leaks(rust_task *task)\n-{\n-    LOG(task, stdlib, \"hack_allow_leaks\");\n-    task->local_region.hack_allow_leaks();\n-}\n-\n struct rust_box {\n     RUST_REFCOUNTED(rust_box)\n "}, {"sha": "c01fc5f3127936ed522057a7a03acd73feff5ec8", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -99,6 +99,9 @@ static size_t const TIME_SLICE_IN_MS = 10;\n \n static size_t const BUF_BYTES = 2048;\n \n+// The error status to use when the process fails\n+#define PROC_FAIL_CODE 101;\n+\n // Every reference counted object should use this macro and initialize\n // ref_count.\n "}, {"sha": "e5234b9d6f5d8487b87551dc98defe5d4819615f", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -140,7 +140,7 @@ rust_kernel::fail() {\n     // Runtime to terminate it in an unusual way\" when trying to shutdown\n     // cleanly.\n #if defined(__WIN32__)\n-    exit(1);\n+    exit(rval);\n #endif\n     for(size_t i = 0; i < num_threads; ++i) {\n         rust_scheduler *thread = threads[i];"}, {"sha": "b127ec77efad6c5c4dade4f058179426de1e360a", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -71,7 +71,7 @@ rust_scheduler::fail() {\n     log(NULL, log_err, \"domain %s @0x%\" PRIxPTR \" root task failed\",\n         name, this);\n     I(this, kernel->rval == 0);\n-    kernel->rval = 1;\n+    kernel->rval = PROC_FAIL_CODE;\n     kernel->fail();\n }\n "}, {"sha": "b861c60b5211dde937c6e5cc305719b5411283a2", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -137,18 +137,6 @@ struct rust_closure_env {\n     type_desc *td;\n };\n \n-extern \"C\" CDECL\n-void task_exit(rust_closure_env *env, int rval, rust_task *task) {\n-    LOG(task, task, \"task exited with value %d\", rval);\n-    if(env) {\n-        // free the environment.\n-        I(task->sched, 1 == env->ref_count); // the ref count better be 1\n-        //env->td->drop_glue(NULL, task, NULL, env->td->first_param, env);\n-        //env->td->free_glue(NULL, task, NULL, env->td->first_param, env);\n-        task->free(env);\n-    }\n-}\n-\n extern \"C\" CDECL\n void task_start_wrapper(spawn_args *a)\n {"}, {"sha": "0f5c11537feb70104e169ae52e5af2abfb15a149", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,6 +1,8 @@\n #include \"rust_gc.h\"\n #include \"rust_internal.h\"\n #include \"rust_upcall.h\"\n+#include <stdint.h>\n+#include <unwind.h>\n \n // Upcalls.\n \n@@ -190,6 +192,26 @@ upcall_dynastack_free(rust_task *task, void *ptr) {\n     return task->dynastack.free(ptr);\n }\n \n+extern \"C\" _Unwind_Reason_Code\n+__gxx_personality_v0(int version,\n+                     _Unwind_Action actions,\n+                     uint64_t exception_class,\n+                     _Unwind_Exception *ue_header,\n+                     _Unwind_Context *context);\n+\n+extern \"C\" _Unwind_Reason_Code\n+upcall_rust_personality(int version,\n+                        _Unwind_Action actions,\n+                        uint64_t exception_class,\n+                        _Unwind_Exception *ue_header,\n+                        _Unwind_Context *context) {\n+    return __gxx_personality_v0(version,\n+                                actions,\n+                                exception_class,\n+                                ue_header,\n+                                context);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "bf8155b7998a2333cb514192b83d3ff75b7096b6", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -28,7 +28,6 @@ get_task_id\n get_task_pointer\n get_task_trampoline\n get_time\n-hack_allow_leaks\n last_os_error\n leak\n migrate_alloc\n@@ -78,5 +77,6 @@ upcall_vec_grow\n upcall_vec_push\n upcall_log_type\n upcall_malloc\n+upcall_rust_personality\n upcall_shared_malloc\n upcall_shared_free"}, {"sha": "deac70f3495ae8f514eef503b4d08917a95a08c6", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -25,6 +25,7 @@ LLVMAddAttribute\n LLVMAddBasicAliasAnalysisPass\n LLVMAddCFGSimplificationPass\n LLVMAddCase\n+LLVMAddClause\n LLVMAddConstantMergePass\n LLVMAddConstantPropagationPass\n LLVMAddCorrelatedValuePropagationPass\n@@ -122,6 +123,7 @@ LLVMBuildIntToPtr\n LLVMBuildInvoke\n LLVMBuildIsNotNull\n LLVMBuildIsNull\n+LLVMBuildLandingPad\n LLVMBuildLShr\n LLVMBuildLoad\n LLVMBuildMalloc\n@@ -141,6 +143,7 @@ LLVMBuildPhi\n LLVMBuildPointerCast\n LLVMBuildPtrDiff\n LLVMBuildPtrToInt\n+LLVMBuildResume\n LLVMBuildRet\n LLVMBuildRetVoid\n LLVMBuildSDiv\n@@ -548,6 +551,7 @@ LLVMRunPassManager\n LLVMRunStaticConstructors\n LLVMRunStaticDestructors\n LLVMSetAlignment\n+LLVMSetCleanup\n LLVMSetCurrentDebugLocation\n LLVMSetDataLayout\n LLVMSetFunctionCallConv"}, {"sha": "aa8786f8d61720cef178499bd29d3ea6a02cee37", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,3 +1,4 @@\n+// xfail-test\n // based on:\n // http://shootout.alioth.debian.org/u32/benchmark.php?test=nbody&lang=java\n "}, {"sha": "0961191918b1ca6f1128092c1003b6a4837d345c", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -110,8 +110,9 @@ fn run_tests(config: config) {\n     let opts = test_opts(config);\n     let cx = {config: config, procsrv: procsrv::mk()};\n     let tests = make_tests(cx);\n-    test::run_tests_console_(opts, tests.tests, tests.to_task);\n+    let res = test::run_tests_console_(opts, tests.tests, tests.to_task);\n     procsrv::close(cx.procsrv);\n+    if !res { fail \"Some tests failed\"; }\n }\n \n fn test_opts(config: config) -> test::test_opts {"}, {"sha": "890818d457441683329c09d8fed42ed485590f9d", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -16,18 +16,14 @@ type test_props = {\n     compile_flags: option::t<str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: option::t<str>,\n-    // FIXME: no-valgrind is a temporary directive until all of run-fail\n-    // is valgrind-clean\n-    no_valgrind: bool\n+    pp_exact: option::t<str>\n };\n \n // Load any test directives embedded in the file\n fn load_props(testfile: str) -> test_props {\n     let error_patterns = [];\n     let compile_flags = option::none;\n     let pp_exact = option::none;\n-    let no_valgrind = false;\n     for each ln: str in iter_header(testfile) {\n         alt parse_error_pattern(ln) {\n           option::some(ep) { error_patterns += [ep]; }\n@@ -41,16 +37,11 @@ fn load_props(testfile: str) -> test_props {\n         if option::is_none(pp_exact) {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n-\n-        if no_valgrind == false {\n-            no_valgrind = parse_name_directive(ln, \"no-valgrind\");\n-        }\n     }\n     ret {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n-        pp_exact: pp_exact,\n-        no_valgrind: no_valgrind\n+        pp_exact: pp_exact\n     };\n }\n \n@@ -59,11 +50,16 @@ fn is_test_ignored(config: config, testfile: str) -> bool {\n     for each ln: str in iter_header(testfile) {\n         // FIXME: Can't return or break from iterator\n         found = found || parse_name_directive(ln, \"xfail-test\");\n+        found = found || parse_name_directive(ln, xfail_target());\n         if (config.mode == common::mode_pretty) {\n             found = found || parse_name_directive(ln, \"xfail-pretty\");\n         }\n     }\n     ret found;\n+\n+    fn xfail_target() -> str {\n+        \"xfail-\" + std::os::target_os()\n+    }\n }\n \n iter iter_header(testfile: str) -> str {"}, {"sha": "6a40aaccaf4857bbb74ec270050ef6623acaf6c4", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -66,7 +66,7 @@ fn run(handle: handle, lib_path: str, prog: str, args: [str],\n     writeclose(resp.infd, input);\n     let output = readclose(resp.outfd);\n     let errput = readclose(resp.errfd);\n-    let status = os::waitpid(resp.pid);\n+    let status = run::waitpid(resp.pid);\n     ret {status: status, out: output, err: errput};\n }\n "}, {"sha": "46b74e799f4f7caeeebd1435b554c598d6b0954d", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -51,19 +51,21 @@ fn run_rfail_test(cx: cx, props: test_props, testfile: str) {\n \n     procres = exec_compiled_test(cx, props, testfile);\n \n-    if procres.status == 0 {\n-        fatal_procres(\"run-fail test didn't produce an error!\", procres);\n-    }\n-\n-    // This is the value valgrind returns on failure\n-    // FIXME: Why is this value neither the value we pass to\n-    // valgrind as --error-exitcode (1), nor the value we see as the\n-    // exit code on the command-line (137)?\n-    const valgrind_err: int = 9;\n+    // The value our Makefile configures valgrind to return on failure\n+    const valgrind_err: int = 100;\n     if procres.status == valgrind_err {\n         fatal_procres(\"run-fail test isn't valgrind-clean!\", procres);\n     }\n \n+    // The value the rust runtime returns on failure\n+    const rust_err: int = 101;\n+    if procres.status != rust_err {\n+        fatal_procres(\n+            #fmt(\"run-fail test produced the wrong error code: %d\",\n+                 procres.status),\n+            procres);\n+    }\n+\n     check_error_patterns(props, testfile, procres);\n }\n \n@@ -251,10 +253,9 @@ fn make_exe_name(config: config, testfile: str) -> str {\n     output_base_name(config, testfile) + os::exec_suffix()\n }\n \n-fn make_run_args(config: config, props: test_props, testfile: str) ->\n+fn make_run_args(config: config, _props: test_props, testfile: str) ->\n    procargs {\n-    let toolargs =\n-        if !props.no_valgrind {\n+    let toolargs = {\n             // If we've got another tool to run under (valgrind),\n             // then split apart its command\n             let runtool =\n@@ -263,7 +264,7 @@ fn make_run_args(config: config, props: test_props, testfile: str) ->\n                   option::none. { option::none }\n                 };\n             split_maybe_args(runtool)\n-        } else { [] };\n+        };\n \n     let args = toolargs + [make_exe_name(config, testfile)];\n     ret {prog: args[0], args: vec::slice(args, 1u, vec::len(args))};"}, {"sha": "527a103e34227b7af1fe40b16a4ffcdd76ba2e13", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,3 +1,2 @@\n // error-pattern:wooooo\n-// no-valgrind\n fn main() { let a = 1; if 1 == 1 { a = 2; } fail \"woooo\" + \"o\"; }"}, {"sha": "5ca0ab7414730ec090fafcd33944bb6a03188761", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,5 +1,4 @@\n // error-pattern:meh\n-// no-valgrind\n use std;\n \n fn main() { let str_var: str = \"meh\"; fail #fmt[\"%s\", str_var]; }"}, {"sha": "24cfff6edb5c3b3dec8cc3842b13736dd80e5c3b", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,8 +1,7 @@\n // -*- rust -*-\n \n // error-pattern:1 == 2\n-// no-valgrind\n-\n+// xfail-test\n use std;\n import std::task;\n import std::comm::port;"}, {"sha": "e7aeedcf505885be12be1fe12cf8d3ec52b4693a", "filename": "src/test/run-fail/unwind-assert.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    let a = @0;\n+    assert false;\n+}\n\\ No newline at end of file"}, {"sha": "19906bda0ae7684b5bdd52306d9686e5bab6d4cd", "filename": "src/test/run-fail/unwind-box.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    @0;\n+    failfn();\n+}\n\\ No newline at end of file"}, {"sha": "e01cc969cea61764e512790b6228153def93abb1", "filename": "src/test/run-fail/unwind-check.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-check.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern:fail\n+\n+pure fn p(a: @int) -> bool { false }\n+\n+fn main() {\n+    let a = @0;\n+    check p(a);\n+}\n\\ No newline at end of file"}, {"sha": "216ae0549472d8f4620a8568051c627aafec98a1", "filename": "src/test/run-fail/unwind-closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:fail\n+\n+fn f(a: @int) {\n+    fail;\n+}\n+\n+fn main() {\n+    let g = bind f(@0);\n+    g();\n+}\n\\ No newline at end of file"}, {"sha": "2d4f138e715f2a3db12cb86368eb90c6ff4a39c9", "filename": "src/test/run-fail/unwind-fail.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    @0;\n+    fail;\n+}\n\\ No newline at end of file"}, {"sha": "726dc3d90408066028b3c446764b6bba05d5421d", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:fail\n+\n+fn f() -> @int { fail; }\n+\n+fn main() {\n+    let a: @int = f();\n+}\n\\ No newline at end of file"}, {"sha": "b3dc0d3eaeb7b5fcb022155d114a293ba4b37ee1", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    let a: @int = {\n+        fail;\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "fa64b0ad78cd07b80801d13d799643b72b0927e7", "filename": "src/test/run-fail/unwind-iter.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern:fail\n+\n+iter x() -> int {\n+    fail;\n+    put 0;\n+}\n+\n+fn main() {\n+    let a = @0;\n+    for each x in x() {\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "a924bb1361662192f9c8f16c2d6fd0232ec03fc0", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern:fail\n+\n+iter x() -> int {\n+    let a = @0;\n+    put 1;\n+}\n+\n+fn main() {\n+    for each x in x() {\n+        fail;\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "6980cc16bd1561e51e0429f7b44b2c0c95776491", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    let cheese = \"roquefort\";\n+    let carrots = @\"crunchy\";\n+\n+    fn (tasties: @str, macerate: block(str)) {\n+        macerate(*tasties);\n+    } (carrots, { |food|\n+        let mush = food + cheese;\n+        lambda() {\n+            let chew = mush + cheese;\n+            fail \"so yummy\"\n+        } ();\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "15d433ae36389694770cca8986cf01a8be0bd5eb", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,28 @@\n+// error-pattern:fail\n+\n+use std;\n+import std::map;\n+import std::uint;\n+\n+fn main() {\n+    let count = @mutable 0u;\n+    let hash = bind fn (_s: [@str], count: @mutable uint) -> uint {\n+        *count += 1u;\n+        if *count == 10u {\n+            fail;\n+        } else {\n+            ret *count;\n+        }\n+    } (_, count);\n+\n+    fn eq(s: [@str], t: [@str]) -> bool {\n+        ret s == t;\n+    }\n+\n+    let map = map::mk_hashmap(hash, eq);\n+    let arr = [];\n+    for each i in uint::range(0u, 10u) {\n+        arr += [@\"key stuff\"];\n+        map.insert(arr, arr + [@\"value stuff\"]);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "48e3063c6dde1e9d31955d08cb15a6f04d40ee1d", "filename": "src/test/run-fail/unwind-nested.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    let a = @0;\n+    {\n+        let b = @0;\n+        {\n+            fail;\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4ab8dc950850d528674093267d5521d09d223d97", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern:fail\n+// xfail-test\n+\n+resource r(i: int) {\n+    // What happens when destructors throw?\n+    fail;\n+}\n+\n+fn main() {\n+    @0;\n+    let r <- r(0);\n+}\n\\ No newline at end of file"}, {"sha": "bf5258cee7d8ad7f9f66daf1ade9327289ea6c1d", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern:fail\n+\n+fn f() {\n+    let a = @0;\n+    fail;\n+}\n+\n+fn g() {\n+    let b = @0;\n+    f();\n+}\n+\n+fn main() {\n+    let a = @0;\n+    g();\n+}\n\\ No newline at end of file"}, {"sha": "35269b3871462344ed72ca79e2c3076fd27fca66", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:fail\n+\n+fn f() {\n+    fail;\n+}\n+\n+fn main() {\n+    f();\n+    let a = @0;\n+}\n\\ No newline at end of file"}, {"sha": "7a429e08caeb903aed9e72b5b65631a937ac8261", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,7 +1,6 @@\n // -*- rust -*-\n \n // error-pattern:bounds check\n-// no-valgrind\n fn main() {\n     let v: [int] = [10];\n     let x: int = 0;"}, {"sha": "9caf82d1ae079481698c653451d594906724175e", "filename": "src/test/run-fail/vec-underrun.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-underrun.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,7 +1,6 @@\n // -*- rust -*-\n \n // error-pattern:bounds check\n-// no-valgrind\n fn main() {\n     let v: [int] = [10, 20];\n     let x: int = 0;"}, {"sha": "450f052bc6265a653eb3a34b0b7212a235d2b2d3", "filename": "src/test/run-pass/native-llvm.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Fnative-llvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Fnative-llvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-llvm.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,10 @@\n+// xfail-test\n+\n+native \"llvm\" mod llvm {\n+    fn thesqrt(n: float) -> float = \"sqrt.f64\";\n+}\n+\n+fn main() {\n+    let s = llvm::thesqrt(4.0);\n+    assert 1.9 < s && s < 2.1;\n+}\n\\ No newline at end of file"}, {"sha": "56cf41b50c3c10effb35cf1b4b9fc521070a65db", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -1,3 +1,4 @@\n+// xfail-win32\n use std;\n import std::comm;\n import std::task;"}, {"sha": "0c4f1e4616c5c592ce287d4b7445ad1862849ffb", "filename": "src/test/run-pass/unwind-box.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,14 @@\n+// xfail-win32\n+use std;\n+import std::task;\n+\n+fn f() {\n+    task::unsupervise();\n+    let a = @0;\n+    fail;\n+}\n+\n+fn main() {\n+    let g = f;\n+    task::spawn(g);\n+}\n\\ No newline at end of file"}, {"sha": "e8cf0bab44fd15bb91ad185c26d62c3c66534d65", "filename": "src/test/run-pass/unwind-resource.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,21 @@\n+// xfail-win32\n+use std;\n+import std::task;\n+import std::comm;\n+\n+resource complainer(c: comm::chan<bool>) {\n+    comm::send(c, true);\n+}\n+\n+fn f(-c: comm::chan<bool>) {\n+    task::unsupervise();\n+    let c <- complainer(c);\n+    fail;\n+}\n+\n+fn main() {\n+    let p = comm::port();\n+    let c = comm::chan(p);\n+    task::spawn(bind f(c));\n+    assert comm::recv(p);\n+}\n\\ No newline at end of file"}, {"sha": "1d7a46151fc1c00be412006213ee8f03f53cf554", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -0,0 +1,18 @@\n+// xfail-win32\n+use std;\n+import std::task;\n+import std::comm;\n+\n+resource complainer(c: @int) {\n+}\n+\n+fn f() {\n+    task::unsupervise();\n+    let c <- complainer(@0);\n+    fail;\n+}\n+\n+fn main() {\n+    let g = f;\n+    task::spawn(g);\n+}\n\\ No newline at end of file"}, {"sha": "e5c36d37041b429a3e13c9bf6aaa01629b6588f8", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393deeb06ff8017a93b0fd26c1f6968fdff2b15b/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=393deeb06ff8017a93b0fd26c1f6968fdff2b15b", "patch": "@@ -65,3 +65,10 @@ fn test_pipes() {\n         ret buf;\n     }\n }\n+\n+#[test]\n+fn waitpid() {\n+    let pid = run::spawn_process(\"false\", [], 0, 0, 0);\n+    let status = run::waitpid(pid);\n+    assert status == 1;\n+}"}]}