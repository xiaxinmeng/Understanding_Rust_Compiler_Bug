{"sha": "1846581baace12af85dfda3fffc219b9ceadc7e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDY1ODFiYWFjZTEyYWY4NWRmZGEzZmZmYzIxOWI5Y2VhZGM3ZTg=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:24:26Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:24:26Z"}, "message": "Added examples to lint descriptions.", "tree": {"sha": "bf58869de3dad4685494d15ee1b5240aa15ca4ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf58869de3dad4685494d15ee1b5240aa15ca4ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1846581baace12af85dfda3fffc219b9ceadc7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1846581baace12af85dfda3fffc219b9ceadc7e8", "html_url": "https://github.com/rust-lang/rust/commit/1846581baace12af85dfda3fffc219b9ceadc7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1846581baace12af85dfda3fffc219b9ceadc7e8/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "993239d33af2b91fcd5e6dbec30f3810c8178ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/993239d33af2b91fcd5e6dbec30f3810c8178ae3", "html_url": "https://github.com/rust-lang/rust/commit/993239d33af2b91fcd5e6dbec30f3810c8178ae3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6a264034773443ec2c733e7c155dccb4303c83e7", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1846581baace12af85dfda3fffc219b9ceadc7e8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1846581baace12af85dfda3fffc219b9ceadc7e8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1846581baace12af85dfda3fffc219b9ceadc7e8", "patch": "@@ -11,9 +11,9 @@ name                   | default | meaning\n approx_constant        | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n bad_bit_mask           | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n box_vec                | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-cast_possible_overflow | allow   | casts that may cause overflow\n-cast_precision_loss    | allow   | casts that cause loss of precision\n-cast_sign_loss         | allow   | casts from signed types to unsigned types\n+cast_possible_overflow | allow   | casts that may cause overflow, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+cast_precision_loss    | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+cast_sign_loss         | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n cmp_nan                | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n cmp_owned              | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n collapsible_if         | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`"}, {"sha": "d6081153f0105654e112e19106960c0eebaa4c27", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1846581baace12af85dfda3fffc219b9ceadc7e8/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1846581baace12af85dfda3fffc219b9ceadc7e8/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1846581baace12af85dfda3fffc219b9ceadc7e8", "patch": "@@ -140,11 +140,11 @@ impl LintPass for UnitCmp {\n pub struct CastPass;\n \n declare_lint!(pub CAST_PRECISION_LOSS, Allow,\n-              \"casts that cause loss of precision\");\n+              \"casts that cause loss of precision, e.g `x as f32` where `x: u64`\");\n declare_lint!(pub CAST_SIGN_LOSS, Allow,\n-              \"casts from signed types to unsigned types\");\n+              \"casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\");\n declare_lint!(pub CAST_POSSIBLE_OVERFLOW, Allow,\n-              \"casts that may cause overflow\");\n+              \"casts that may cause overflow, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\");\n \n impl LintPass for CastPass {\n     fn get_lints(&self) -> LintArray {"}]}