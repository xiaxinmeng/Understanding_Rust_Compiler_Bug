{"sha": "bf7afee52a2e92a509eae1e9530ee75da8f9f621", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmN2FmZWU1MmEyZTkyYTUwOWVhZTFlOTUzMGVlNzVkYThmOWY2MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-21T00:55:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-21T00:55:46Z"}, "message": "Auto merge of #52438 - ljedrz:rustc_vec_capacity, r=eddyb\n\nCalculate Vec capacities in librustc\n\nCalculate the required capacity of a few vectors in rustc based on the number of elements they are populated with.", "tree": {"sha": "43b9756cb02b5446fabc857fde11e29c15980a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b9756cb02b5446fabc857fde11e29c15980a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7afee52a2e92a509eae1e9530ee75da8f9f621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7afee52a2e92a509eae1e9530ee75da8f9f621", "html_url": "https://github.com/rust-lang/rust/commit/bf7afee52a2e92a509eae1e9530ee75da8f9f621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7afee52a2e92a509eae1e9530ee75da8f9f621/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "html_url": "https://github.com/rust-lang/rust/commit/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24"}, {"sha": "e3d14c4c564ede79383ca88a4a8a6ce590786835", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d14c4c564ede79383ca88a4a8a6ce590786835", "html_url": "https://github.com/rust-lang/rust/commit/e3d14c4c564ede79383ca88a4a8a6ce590786835"}], "stats": {"total": 108, "additions": 49, "deletions": 59}, "files": [{"sha": "9283705b7b78e89dd5f23ff88939774b1dd43c0c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=bf7afee52a2e92a509eae1e9530ee75da8f9f621", "patch": "@@ -562,36 +562,25 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n-        let mut variables = Vec::new();\n-\n-        {\n-            let mut type_variables = self.type_variables.borrow_mut();\n-            variables.extend(\n-                type_variables\n-                    .unsolved_variables()\n-                    .into_iter()\n-                    .map(|t| self.tcx.mk_var(t)));\n-        }\n-\n-        {\n-            let mut int_unification_table = self.int_unification_table.borrow_mut();\n-            variables.extend(\n+        let mut type_variables = self.type_variables.borrow_mut();\n+        let mut int_unification_table = self.int_unification_table.borrow_mut();\n+        let mut float_unification_table = self.float_unification_table.borrow_mut();\n+\n+        type_variables\n+            .unsolved_variables()\n+            .into_iter()\n+            .map(|t| self.tcx.mk_var(t))\n+            .chain(\n                 (0..int_unification_table.len())\n                     .map(|i| ty::IntVid { index: i as u32 })\n                     .filter(|&vid| int_unification_table.probe_value(vid).is_none())\n-                    .map(|v| self.tcx.mk_int_var(v)));\n-        }\n-\n-        {\n-            let mut float_unification_table = self.float_unification_table.borrow_mut();\n-            variables.extend(\n+                    .map(|v| self.tcx.mk_int_var(v))\n+            ).chain(\n                 (0..float_unification_table.len())\n                     .map(|i| ty::FloatVid { index: i as u32 })\n                     .filter(|&vid| float_unification_table.probe_value(vid).is_none())\n-                    .map(|v| self.tcx.mk_float_var(v)));\n-        }\n-\n-        return variables;\n+                    .map(|v| self.tcx.mk_float_var(v))\n+            ).collect()\n     }\n \n     fn combine_fields(&'a self, trace: TypeTrace<'tcx>, param_env: ty::ParamEnv<'tcx>)"}, {"sha": "e4fc1b09fcebc7dd475e6c6fea82cc2b1705ea06", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=bf7afee52a2e92a509eae1e9530ee75da8f9f621", "patch": "@@ -391,16 +391,12 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       access_levels: &privacy::AccessLevels,\n                                       krate: &hir::Crate)\n-                                      -> Vec<ast::NodeId> {\n-    let mut worklist = Vec::new();\n-    for (id, _) in &access_levels.map {\n-        worklist.push(*id);\n-    }\n-\n-    // Seed entry point\n-    if let Some((id, _, _)) = *tcx.sess.entry_fn.borrow() {\n-        worklist.push(id);\n-    }\n+                                      -> Vec<ast::NodeId>\n+{\n+    let worklist = access_levels.map.iter().map(|(&id, _)| id).chain(\n+        // Seed entry point\n+        tcx.sess.entry_fn.borrow().map(|(id, _, _)| id)\n+    ).collect::<Vec<_>>();\n \n     // Seed implemented trait items\n     let mut life_seeder = LifeSeeder {"}, {"sha": "f1a6e9913d6bdfc0cc81161af8a3912c32d2b2c1", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=bf7afee52a2e92a509eae1e9530ee75da8f9f621", "patch": "@@ -565,7 +565,13 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n     }\n \n     fn llvm_type(&self, cx: &CodegenCx<'a, 'tcx>) -> Type {\n-        let mut llargument_tys = Vec::new();\n+        let args_capacity: usize = self.args.iter().map(|arg|\n+            if arg.pad.is_some() { 1 } else { 0 } +\n+            if let PassMode::Pair(_, _) = arg.mode { 2 } else { 1 }\n+        ).sum();\n+        let mut llargument_tys = Vec::with_capacity(\n+            if let PassMode::Indirect(_) = self.ret.mode { 1 } else { 0 } + args_capacity\n+        );\n \n         let llreturn_ty = match self.ret.mode {\n             PassMode::Ignore => Type::void(cx),"}, {"sha": "a2dbf2aaca30e0d0e2b04696d5261932fe7dcdec", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7afee52a2e92a509eae1e9530ee75da8f9f621/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=bf7afee52a2e92a509eae1e9530ee75da8f9f621", "patch": "@@ -1473,35 +1473,34 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n     pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, param_ty: Ty<'tcx>)\n                       -> Vec<ty::Predicate<'tcx>>\n     {\n-        let mut vec = Vec::new();\n-\n         // If it could be sized, and is, add the sized predicate\n-        if self.implicitly_sized {\n-            if let Some(sized) = tcx.lang_items().sized_trait() {\n+        let sized_predicate = if self.implicitly_sized {\n+            tcx.lang_items().sized_trait().map(|sized| {\n                 let trait_ref = ty::TraitRef {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[])\n                 };\n-                vec.push(trait_ref.to_predicate());\n-            }\n-        }\n-\n-        for &region_bound in &self.region_bounds {\n-            // account for the binder being introduced below; no need to shift `param_ty`\n-            // because, at present at least, it can only refer to early-bound regions\n-            let region_bound = tcx.mk_region(ty::fold::shift_region(*region_bound, 1));\n-            vec.push(\n-                ty::Binder::dummy(ty::OutlivesPredicate(param_ty, region_bound)).to_predicate());\n-        }\n-\n-        for bound_trait_ref in &self.trait_bounds {\n-            vec.push(bound_trait_ref.to_predicate());\n-        }\n-\n-        for projection in &self.projection_bounds {\n-            vec.push(projection.to_predicate());\n-        }\n+                trait_ref.to_predicate()\n+            })\n+        } else {\n+            None\n+        };\n \n-        vec\n+        sized_predicate.into_iter().chain(\n+            self.region_bounds.iter().map(|&region_bound| {\n+                // account for the binder being introduced below; no need to shift `param_ty`\n+                // because, at present at least, it can only refer to early-bound regions\n+                let region_bound = tcx.mk_region(ty::fold::shift_region(*region_bound, 1));\n+                ty::Binder::dummy(ty::OutlivesPredicate(param_ty, region_bound)).to_predicate()\n+            }).chain(\n+                self.trait_bounds.iter().map(|bound_trait_ref| {\n+                    bound_trait_ref.to_predicate()\n+                })\n+            ).chain(\n+                self.projection_bounds.iter().map(|projection| {\n+                    projection.to_predicate()\n+                })\n+            )\n+        ).collect()\n     }\n }"}]}