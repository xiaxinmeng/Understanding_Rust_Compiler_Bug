{"sha": "b435960c4cfd3975651c7051be56d7f5d6c201ab", "node_id": "C_kwDOAAsO6NoAKGI0MzU5NjBjNGNmZDM5NzU2NTFjNzA1MWJlNTZkN2Y1ZDZjMjAxYWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T11:06:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T11:06:08Z"}, "message": "Auto merge of #95644 - WaffleLapkin:str_split_as_str_refactor_take2, r=Amanieu\n\n`Split*::as_str` refactor\n\nI've made this patch almost a year ago, so the rename and the behavior change are in one commit, sorry \ud83d\ude05\n\nThis fixes #84974, as it's required to make other changes work.\n\nThis PR\n- Renames `as_str` method of string `Split*` iterators to `remainder` (it seems like the `as_str` name was confusing to users)\n- Makes `remainder` return `Option<&str>`, to distinguish between \"the iterator is exhausted\" and \"the tail is empty\", this was [required on the tracking issue](https://github.com/rust-lang/rust/issues/77998#issuecomment-832696619)\n\nr? `@m-ou-se`", "tree": {"sha": "76104c8ea590a3bd53d9e052545db1d5f957f13c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76104c8ea590a3bd53d9e052545db1d5f957f13c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b435960c4cfd3975651c7051be56d7f5d6c201ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b435960c4cfd3975651c7051be56d7f5d6c201ab", "html_url": "https://github.com/rust-lang/rust/commit/b435960c4cfd3975651c7051be56d7f5d6c201ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b435960c4cfd3975651c7051be56d7f5d6c201ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "html_url": "https://github.com/rust-lang/rust/commit/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295"}, {"sha": "b458a49f2664c6d8079a221f0710894d96704198", "url": "https://api.github.com/repos/rust-lang/rust/commits/b458a49f2664c6d8079a221f0710894d96704198", "html_url": "https://github.com/rust-lang/rust/commit/b458a49f2664c6d8079a221f0710894d96704198"}], "stats": {"total": 188, "additions": 104, "deletions": 84}, "files": [{"sha": "9e0d7cab63e5c1d3efc36e508955cc9b8eb3dd89", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b435960c4cfd3975651c7051be56d7f5d6c201ab/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b435960c4cfd3975651c7051be56d7f5d6c201ab/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b435960c4cfd3975651c7051be56d7f5d6c201ab", "patch": "@@ -158,6 +158,7 @@\n #![feature(const_unsafecell_get_mut)]\n #![feature(const_waker)]\n #![feature(core_panic)]\n+#![feature(char_indices_offset)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_alignment_type)]\n@@ -166,6 +167,8 @@\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]\n+#![feature(str_split_remainder)]\n+#![feature(str_split_inclusive_remainder)]\n #![feature(strict_provenance)]\n #![feature(utf16_extra)]\n #![feature(utf16_extra_const)]"}, {"sha": "d969475aa484fd5a740a2f2c6895f0a24c2b7e3d", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 101, "deletions": 84, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/b435960c4cfd3975651c7051be56d7f5d6c201ab/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b435960c4cfd3975651c7051be56d7f5d6c201ab/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=b435960c4cfd3975651c7051be56d7f5d6c201ab", "patch": "@@ -585,16 +585,17 @@ where\n impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n     #[inline]\n     fn get_end(&mut self) -> Option<&'a str> {\n-        if !self.finished && (self.allow_trailing_empty || self.end - self.start > 0) {\n+        if !self.finished {\n             self.finished = true;\n-            // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n-            unsafe {\n-                let string = self.matcher.haystack().get_unchecked(self.start..self.end);\n-                Some(string)\n+\n+            if self.allow_trailing_empty || self.end - self.start > 0 {\n+                // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n+                let string = unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) };\n+                return Some(string);\n             }\n-        } else {\n-            None\n         }\n+\n+        None\n     }\n \n     #[inline]\n@@ -716,14 +717,14 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n     }\n \n     #[inline]\n-    fn as_str(&self) -> &'a str {\n+    fn remainder(&self) -> Option<&'a str> {\n         // `Self::get_end` doesn't change `self.start`\n         if self.finished {\n-            return \"\";\n+            return None;\n         }\n \n         // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n-        unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) }\n+        Some(unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) })\n     }\n }\n \n@@ -746,44 +747,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> Split<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".split(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".rsplit(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -806,44 +811,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"A..B..\".split_terminator('.');\n-    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B..\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \".B..\");\n+    /// assert_eq!(split.remainder(), Some(\".B..\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"A..B..\".rsplit_terminator('.');\n-    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B..\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"A..B\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -905,8 +914,8 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n     }\n \n     #[inline]\n-    fn as_str(&self) -> &'a str {\n-        self.iter.as_str()\n+    fn remainder(&self) -> Option<&'a str> {\n+        self.iter.remainder()\n     }\n }\n \n@@ -929,44 +938,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".splitn(3, ' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".rsplitn(3, ' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -1239,22 +1252,22 @@ impl<'a> SplitWhitespace<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_whitespace_as_str)]\n+    /// #![feature(str_split_whitespace_remainder)]\n     ///\n     /// let mut split = \"Mary had a little lamb\".split_whitespace();\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     ///\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     ///\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.inner.iter.as_str()\n+    #[unstable(feature = \"str_split_whitespace_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.inner.iter.remainder()\n     }\n }\n \n@@ -1290,32 +1303,34 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n impl<'a> SplitAsciiWhitespace<'a> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_whitespace_as_str)]\n+    /// #![feature(str_split_whitespace_remainder)]\n     ///\n     /// let mut split = \"Mary had a little lamb\".split_ascii_whitespace();\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     ///\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     ///\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n+    #[unstable(feature = \"str_split_whitespace_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n         if self.inner.iter.iter.finished {\n-            return \"\";\n+            return None;\n         }\n \n         // SAFETY: Slice is created from str.\n-        unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) }\n+        Some(unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) })\n     }\n }\n \n@@ -1358,23 +1373,25 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_inclusive_as_str)]\n+    /// #![feature(str_split_inclusive_remainder)]\n     /// let mut split = \"Mary had a little lamb\".split_inclusive(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_inclusive_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n "}]}