{"sha": "5896998e7659bf22ffb804956a3680c028ede45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTY5OThlNzY1OWJmMjJmZmI4MDQ5NTZhMzY4MGMwMjhlZGU0NWY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-06T03:32:53Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-13T10:00:55Z"}, "message": "Don't run const propagation on items with inconsistent bounds\n\nUsing `#![feature(trivial_bounds)]`, it's possible to write functions\nwith unsatisfiable 'where' clauses, making them uncallable. However, the\nuser can act as if these 'where' clauses are true inside the body of the\nfunction, leading to code that would normally be impossible to write.\n\nSince const propgation can run even without any user-written calls to a\nfunction, we need to explcitly check for these uncallable functions.", "tree": {"sha": "bed4a3d8f639992e94e1d4fb9b2b3aef5c75a6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed4a3d8f639992e94e1d4fb9b2b3aef5c75a6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5896998e7659bf22ffb804956a3680c028ede45f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl4cP9cACgkQtAh+UQ6Y\nsWTnSA/+IrrJzNe/G1b4IbxfA06vUq+9bN7oA5lXvxLw/Gp+Xst6TfCvnaPmtOyG\nlM1I3EAeI2UYg4QmzKb5u/+e0vmNnwOwLlfSefl5/Y5sdFYUF42bY/9H/d/7UXkG\nZjrFZVb7oNQ/J+Zjv4SzD1tfC+l0T/gsuZ64YespUz5QAAOu1fix2X06Le8ZX/Ps\n5nxkU8Ql3LzcNKpMfAzQ7XjA75e2f2laVMatmOn8bdaEWYxkEGAbQKKFu1bPyLXM\n+CXnhcE2Yu5UoJP3dTgDITBECkk5GAftbXzbGfK5vbDQ+H8kxWWUkDJ9JdQCkC2h\nkKqrJaJ0I/8zsbtW44doa45pWgFZjsZtDJfQ8O14WhL1G06EnO8Xe1aHssTfSMKE\nOpixm0J0zrlwKww4WkPf6HJfEUxAHB2Cg9eSINIYPyHCQjpoC0rEEpfUuu05akso\nNLVlMVOfh2GUmyuvsFD3pHR9PDVd0dT82u5akFpnmLnoXS34PrMQOkbVkgXVNx/F\njtUAZEEuNzHtc5FTjoupubBGZY8QtYW3BUnDAxbokOuGU02ofHQboSrQJIIuNH2v\nF/LkHisfYTSkrblsXTVSlceBBJN6tmEMBgqy/+1Hnp+bRXKwBawei/4pEDtoA8xI\niBAbVWWtndszo62I0CkwMwstBkZ9snavKEWFKtgt/hOsNBt7Smc=\n=aoA0\n-----END PGP SIGNATURE-----", "payload": "tree bed4a3d8f639992e94e1d4fb9b2b3aef5c75a6dc\nparent e82febc78e5a14356de5f713b904eebef1e86956\nauthor Aaron Hill <aa1ronham@gmail.com> 1578281573 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1578909655 -0500\n\nDon't run const propagation on items with inconsistent bounds\n\nUsing `#![feature(trivial_bounds)]`, it's possible to write functions\nwith unsatisfiable 'where' clauses, making them uncallable. However, the\nuser can act as if these 'where' clauses are true inside the body of the\nfunction, leading to code that would normally be impossible to write.\n\nSince const propgation can run even without any user-written calls to a\nfunction, we need to explcitly check for these uncallable functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5896998e7659bf22ffb804956a3680c028ede45f", "html_url": "https://github.com/rust-lang/rust/commit/5896998e7659bf22ffb804956a3680c028ede45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5896998e7659bf22ffb804956a3680c028ede45f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82febc78e5a14356de5f713b904eebef1e86956", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82febc78e5a14356de5f713b904eebef1e86956", "html_url": "https://github.com/rust-lang/rust/commit/e82febc78e5a14356de5f713b904eebef1e86956"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "48ab24a14c7c620b8df4efd3a74f5b32a983ee66", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5896998e7659bf22ffb804956a3680c028ede45f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5896998e7659bf22ffb804956a3680c028ede45f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5896998e7659bf22ffb804956a3680c028ede45f", "patch": "@@ -74,6 +74,31 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n+        // Check if it's even possible to satisy the 'where' clauses\n+        // for this item.\n+        // This branch will never be taken for any normal function.\n+        // However, it's possible to `#!feature(trivial_bounds)]` to write\n+        // a function with impossible to satisfy clauses, e.g.:\n+        // `fn foo() where String: Copy {}`\n+        //\n+        // We don't usually need to worry about this kind of case,\n+        // since we would get a compilation error if the user tried\n+        // to call it. However, since we can do const propagation\n+        // even without any calls to the function, we need to make\n+        // sure that it even makes sense to try to evaluate the body.\n+        // If there are unsatisfiable where clauses, then all bets are\n+        // off, and we just give up.\n+        if !tcx.substitute_normalize_and_test_predicates((\n+            source.def_id(),\n+            InternalSubsts::identity_for_item(tcx, source.def_id()),\n+        )) {\n+            trace!(\n+                \"ConstProp skipped for item with unsatisfiable predicates: {:?}\",\n+                source.def_id()\n+            );\n+            return;\n+        }\n+\n         trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n         let dummy_body = &Body::new("}, {"sha": "818be10554720818455fbfed19077aecee3f868c", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-associated-functions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5896998e7659bf22ffb804956a3680c028ede45f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5896998e7659bf22ffb804956a3680c028ede45f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs?ref=5896998e7659bf22ffb804956a3680c028ede45f", "patch": "@@ -1,4 +1,8 @@\n // run-pass\n+// Force mir to be emitted, to ensure that const\n+// propagation doesn't ICE on a function\n+// with an 'impossible' body. See issue #67696\n+// compile-flags: --emit=mir,link\n // Inconsistent bounds with trait implementations\n \n #![feature(trivial_bounds)]"}, {"sha": "0ee1e2e0ba56ab7adcfb356c87415434217b862f", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-associated-functions.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5896998e7659bf22ffb804956a3680c028ede45f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5896998e7659bf22ffb804956a3680c028ede45f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.stderr?ref=5896998e7659bf22ffb804956a3680c028ede45f", "patch": "@@ -0,0 +1,2 @@\n+warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n+"}]}