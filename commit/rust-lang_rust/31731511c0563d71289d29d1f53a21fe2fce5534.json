{"sha": "31731511c0563d71289d29d1f53a21fe2fce5534", "node_id": "C_kwDOAAsO6NoAKDMxNzMxNTExYzA1NjNkNzEyODlkMjlkMWY1M2EyMWZlMmZjZTU1MzQ", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-12-18T13:50:01Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-12-18T13:50:01Z"}, "message": "Support [x; n] expressions in concat_bytes!\n\nContributes to #87555.", "tree": {"sha": "c7144ac02269cb417c7737204759ac33d4629789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7144ac02269cb417c7737204759ac33d4629789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31731511c0563d71289d29d1f53a21fe2fce5534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31731511c0563d71289d29d1f53a21fe2fce5534", "html_url": "https://github.com/rust-lang/rust/commit/31731511c0563d71289d29d1f53a21fe2fce5534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31731511c0563d71289d29d1f53a21fe2fce5534/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7abab1efb21617ba6845fa86328dffa16cfcf1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7abab1efb21617ba6845fa86328dffa16cfcf1dc", "html_url": "https://github.com/rust-lang/rust/commit/7abab1efb21617ba6845fa86328dffa16cfcf1dc"}], "stats": {"total": 177, "additions": 135, "deletions": 42}, "files": [{"sha": "87920e51752682de97e00601487620fc8f240aa3", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 65, "deletions": 40, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/31731511c0563d71289d29d1f53a21fe2fce5534/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31731511c0563d71289d29d1f53a21fe2fce5534/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=31731511c0563d71289d29d1f53a21fe2fce5534", "patch": "@@ -72,6 +72,52 @@ fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_ne\n     }\n }\n \n+fn handle_array_element(\n+    cx: &mut base::ExtCtxt<'_>,\n+    has_errors: &mut bool,\n+    missing_literals: &mut Vec<rustc_span::Span>,\n+    expr: &P<rustc_ast::Expr>,\n+) -> Option<u8> {\n+    match expr.kind {\n+        ast::ExprKind::Array(_) | ast::ExprKind::Repeat(_, _) => {\n+            if !*has_errors {\n+                cx.span_err(expr.span, \"cannot concatenate doubly nested array\");\n+            }\n+            *has_errors = true;\n+            None\n+        }\n+        ast::ExprKind::Lit(ref lit) => match lit.kind {\n+            ast::LitKind::Int(\n+                val,\n+                ast::LitIntType::Unsuffixed | ast::LitIntType::Unsigned(ast::UintTy::U8),\n+            ) if val <= u8::MAX.into() => Some(val as u8),\n+\n+            ast::LitKind::Byte(val) => Some(val),\n+            ast::LitKind::ByteStr(_) => {\n+                if !*has_errors {\n+                    cx.struct_span_err(expr.span, \"cannot concatenate doubly nested array\")\n+                        .note(\"byte strings are treated as arrays of bytes\")\n+                        .help(\"try flattening the array\")\n+                        .emit();\n+                }\n+                *has_errors = true;\n+                None\n+            }\n+            _ => {\n+                if !*has_errors {\n+                    invalid_type_err(cx, expr, true);\n+                }\n+                *has_errors = true;\n+                None\n+            }\n+        },\n+        _ => {\n+            missing_literals.push(expr.span);\n+            None\n+        }\n+    }\n+}\n+\n pub fn expand_concat_bytes(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: rustc_span::Span,\n@@ -88,48 +134,27 @@ pub fn expand_concat_bytes(\n         match e.kind {\n             ast::ExprKind::Array(ref exprs) => {\n                 for expr in exprs {\n-                    match expr.kind {\n-                        ast::ExprKind::Array(_) => {\n-                            if !has_errors {\n-                                cx.span_err(expr.span, \"cannot concatenate doubly nested array\");\n-                            }\n-                            has_errors = true;\n-                        }\n-                        ast::ExprKind::Lit(ref lit) => match lit.kind {\n-                            ast::LitKind::Int(\n-                                val,\n-                                ast::LitIntType::Unsuffixed\n-                                | ast::LitIntType::Unsigned(ast::UintTy::U8),\n-                            ) if val <= u8::MAX.into() => {\n-                                accumulator.push(val as u8);\n-                            }\n-\n-                            ast::LitKind::Byte(val) => {\n-                                accumulator.push(val);\n-                            }\n-                            ast::LitKind::ByteStr(_) => {\n-                                if !has_errors {\n-                                    cx.struct_span_err(\n-                                        expr.span,\n-                                        \"cannot concatenate doubly nested array\",\n-                                    )\n-                                    .note(\"byte strings are treated as arrays of bytes\")\n-                                    .help(\"try flattening the array\")\n-                                    .emit();\n-                                }\n-                                has_errors = true;\n-                            }\n-                            _ => {\n-                                if !has_errors {\n-                                    invalid_type_err(cx, expr, true);\n-                                }\n-                                has_errors = true;\n-                            }\n-                        },\n-                        _ => {\n-                            missing_literals.push(expr.span);\n+                    if let Some(elem) =\n+                        handle_array_element(cx, &mut has_errors, &mut missing_literals, expr)\n+                    {\n+                        accumulator.push(elem);\n+                    }\n+                }\n+            }\n+            ast::ExprKind::Repeat(ref expr, ref count) => {\n+                if let ast::ExprKind::Lit(ast::Lit {\n+                    kind: ast::LitKind::Int(count_val, _), ..\n+                }) = count.value.kind\n+                {\n+                    if let Some(elem) =\n+                        handle_array_element(cx, &mut has_errors, &mut missing_literals, expr)\n+                    {\n+                        for _ in 0..count_val {\n+                            accumulator.push(elem);\n                         }\n                     }\n+                } else {\n+                    cx.span_err(count.value.span, \"repeat count is not a number\");\n                 }\n             }\n             ast::ExprKind::Lit(ref lit) => match lit.kind {"}, {"sha": "2c7997d5e5905969a7e565fa744c3d8571f1fda3", "filename": "src/test/ui/macros/concat-bytes-error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs?ref=31731511c0563d71289d29d1f53a21fe2fce5534", "patch": "@@ -39,4 +39,12 @@ fn main() {\n     ]);\n     concat_bytes!(5u16); //~ ERROR cannot concatenate numeric literals\n     concat_bytes!([5u16]); //~ ERROR numeric literal is not a `u8`\n+    concat_bytes!([3; ()]); //~ ERROR repeat count is not a number\n+    concat_bytes!([3; -2]); //~ ERROR repeat count is not a number\n+    concat_bytes!([pie; -2]); //~ ERROR repeat count is not a number\n+    concat_bytes!([pie; 2]); //~ ERROR expected a byte literal\n+    concat_bytes!([2.2; 0]); //~ ERROR cannot concatenate float literals\n+    concat_bytes!([5.5; ()]); //~ ERROR repeat count is not a number\n+    concat_bytes!([[1, 2, 3]; 3]); //~ ERROR cannot concatenate doubly nested array\n+    concat_bytes!([[42; 2]; 3]); //~ ERROR cannot concatenate doubly nested array\n }"}, {"sha": "f0c53839b3ad5d4cbe06d0d9e16fe047855164b6", "filename": "src/test/ui/macros/concat-bytes-error.stderr", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr?ref=31731511c0563d71289d29d1f53a21fe2fce5534", "patch": "@@ -127,5 +127,55 @@ error: numeric literal is not a `u8`\n LL |     concat_bytes!([5u16]);\n    |                    ^^^^\n \n-error: aborting due to 20 previous errors\n+error: repeat count is not a number\n+  --> $DIR/concat-bytes-error.rs:42:23\n+   |\n+LL |     concat_bytes!([3; ()]);\n+   |                       ^^\n+\n+error: repeat count is not a number\n+  --> $DIR/concat-bytes-error.rs:43:23\n+   |\n+LL |     concat_bytes!([3; -2]);\n+   |                       ^^\n+\n+error: repeat count is not a number\n+  --> $DIR/concat-bytes-error.rs:44:25\n+   |\n+LL |     concat_bytes!([pie; -2]);\n+   |                         ^^\n+\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:45:20\n+   |\n+LL |     concat_bytes!([pie; 2]);\n+   |                    ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: cannot concatenate float literals\n+  --> $DIR/concat-bytes-error.rs:46:20\n+   |\n+LL |     concat_bytes!([2.2; 0]);\n+   |                    ^^^\n+\n+error: repeat count is not a number\n+  --> $DIR/concat-bytes-error.rs:47:25\n+   |\n+LL |     concat_bytes!([5.5; ()]);\n+   |                         ^^\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:48:20\n+   |\n+LL |     concat_bytes!([[1, 2, 3]; 3]);\n+   |                    ^^^^^^^^^\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:49:20\n+   |\n+LL |     concat_bytes!([[42; 2]; 3]);\n+   |                    ^^^^^^^\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "fd8f99417ec985d548e2e02c094e1e1b447cbfde", "filename": "src/test/ui/macros/concat-bytes.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31731511c0563d71289d29d1f53a21fe2fce5534/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs?ref=31731511c0563d71289d29d1f53a21fe2fce5534", "patch": "@@ -3,5 +3,15 @@\n \n fn main() {\n     assert_eq!(concat_bytes!(), &[]);\n-    assert_eq!(concat_bytes!(b'A', b\"BC\", [68, b'E', 70]), b\"ABCDEF\");\n+    assert_eq!(\n+        concat_bytes!(b'A', b\"BC\", [68, b'E', 70], [b'G'; 1], [72; 2], [73u8; 3], [65; 0]),\n+        b\"ABCDEFGHHIII\",\n+    );\n+    assert_eq!(\n+        concat_bytes!(\n+            concat_bytes!(b\"AB\", b\"CD\"),\n+            concat_bytes!(b\"EF\", b\"GH\"),\n+        ),\n+        b\"ABCDEFGH\",\n+    );\n }"}]}