{"sha": "b8c87fd9fe649d3211bb53754fb692a825ecfdff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Yzg3ZmQ5ZmU2NDlkMzIxMWJiNTM3NTRmYjY5MmE4MjVlY2ZkZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-24T09:56:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-24T09:56:30Z"}, "message": "auto merge of #11130 : olsonjeffery/rust/master, r=alexcrichton\n\nSo that `Uuid` can be used as the key in a `HashMap` or in a `HashSet`, etc\r\n\r\nThe only question I have about this is: Is endianness an issue, here? If so, what's the correct way to proceed?", "tree": {"sha": "594c22bfd87c9852bdf562820d4e4eadb0ce9220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/594c22bfd87c9852bdf562820d4e4eadb0ce9220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c87fd9fe649d3211bb53754fb692a825ecfdff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c87fd9fe649d3211bb53754fb692a825ecfdff", "html_url": "https://github.com/rust-lang/rust/commit/b8c87fd9fe649d3211bb53754fb692a825ecfdff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c87fd9fe649d3211bb53754fb692a825ecfdff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09a8e892346ddcb917b74f0c5c678a5b477f609", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09a8e892346ddcb917b74f0c5c678a5b477f609", "html_url": "https://github.com/rust-lang/rust/commit/e09a8e892346ddcb917b74f0c5c678a5b477f609"}, {"sha": "41cbbb656a9d29305fd03fb09d261cbfa0766f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/41cbbb656a9d29305fd03fb09d261cbfa0766f7a", "html_url": "https://github.com/rust-lang/rust/commit/41cbbb656a9d29305fd03fb09d261cbfa0766f7a"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "cf40a59a8c507f6e45fce5398981e8c923ef4d54", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b8c87fd9fe649d3211bb53754fb692a825ecfdff/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c87fd9fe649d3211bb53754fb692a825ecfdff/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=b8c87fd9fe649d3211bb53754fb692a825ecfdff", "patch": "@@ -65,6 +65,7 @@ use std::rand;\n use std::rand::Rng;\n use std::cmp::Eq;\n use std::cast::{transmute,transmute_copy};\n+use std::to_bytes::{IterBytes, Cb};\n \n use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n@@ -104,6 +105,11 @@ pub struct Uuid {\n     /// The 128-bit number stored in 16 bytes\n     bytes: UuidBytes\n }\n+impl IterBytes for Uuid {\n+    fn iter_bytes(&self, _: bool, f: Cb) -> bool {\n+        f(self.bytes.slice_from(0))\n+    }\n+}\n \n /// A UUID stored as fields (identical to UUID, used only for conversions)\n struct UuidFields {\n@@ -796,6 +802,17 @@ mod test {\n         let u2 = Decodable::decode(&mut ebml::reader::Decoder(doc));\n         assert_eq!(u, u2);\n     }\n+\n+    #[test]\n+    fn test_iterbytes_impl_for_uuid() {\n+        use std::hashmap::HashSet;\n+        let mut set = HashSet::new();\n+        let id1 = Uuid::new_v4();\n+        let id2 = Uuid::new_v4();\n+        set.insert(id1);\n+        assert!(set.contains(&id1));\n+        assert!(!set.contains(&id2));\n+    }\n }\n \n #[cfg(test)]"}]}