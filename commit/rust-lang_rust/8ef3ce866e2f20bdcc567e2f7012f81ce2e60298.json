{"sha": "8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "node_id": "C_kwDOAAsO6NoAKDhlZjNjZTg2NmUyZjIwYmRjYzU2N2UyZjcwMTJmODFjZTJlNjAyOTg", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-01-07T16:04:33Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-01-07T23:57:59Z"}, "message": "Change panic::update_hook to simplify usage\n\nAnd to remove possibility of panics while changing the panic handler,\nbecause that resulted in a double panic.", "tree": {"sha": "1764db087c7b3bb38aa060ba67b985d4ec63f975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1764db087c7b3bb38aa060ba67b985d4ec63f975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "html_url": "https://github.com/rust-lang/rust/commit/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "html_url": "https://github.com/rust-lang/rust/commit/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df"}], "stats": {"total": 125, "additions": 71, "deletions": 54}, "files": [{"sha": "b93d7938bc9a5cd1e5a8db56734d4992633b2ecb", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "patch": "@@ -1783,12 +1783,10 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n fn panic_safe() {\n-    panic::update_hook(|prev| {\n-        Box::new(move |info| {\n-            if !SILENCE_PANIC.with(|s| s.get()) {\n-                prev(info);\n-            }\n-        })\n+    panic::update_hook(move |prev, info| {\n+        if !SILENCE_PANIC.with(|s| s.get()) {\n+            prev(info);\n+        }\n     });\n \n     let mut rng = thread_rng();"}, {"sha": "9e9750eb8de4031dddb7facb7fb9ec35efa75b19", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "patch": "@@ -310,16 +310,14 @@ impl Bridge<'_> {\n         // NB. the server can't do this because it may use a different libstd.\n         static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n         HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n-            panic::update_hook(|prev| {\n-                Box::new(move |info| {\n-                    let show = BridgeState::with(|state| match state {\n-                        BridgeState::NotConnected => true,\n-                        BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,\n-                    });\n-                    if show {\n-                        prev(info)\n-                    }\n-                })\n+            panic::update_hook(move |prev, info| {\n+                let show = BridgeState::with(|state| match state {\n+                    BridgeState::NotConnected => true,\n+                    BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,\n+                });\n+                if show {\n+                    prev(info)\n+                }\n             });\n         });\n "}, {"sha": "19040cb12e02ac666dbf664b54f8785d9f50075f", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "patch": "@@ -76,6 +76,12 @@ enum Hook {\n     Custom(*mut (dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send)),\n }\n \n+impl Hook {\n+    fn custom(f: impl Fn(&PanicInfo<'_>) + 'static + Sync + Send) -> Self {\n+        Self::Custom(Box::into_raw(Box::new(f)))\n+    }\n+}\n+\n static HOOK_LOCK: StaticRWLock = StaticRWLock::new();\n static mut HOOK: Hook = Hook::Default;\n \n@@ -180,7 +186,8 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     }\n }\n \n-/// Atomic combination of [`take_hook`] + [`set_hook`].\n+/// Atomic combination of [`take_hook`] and [`set_hook`]. Use this to replace the panic handler with\n+/// a new panic handler that does something and then executes the old handler.\n ///\n /// [`take_hook`]: ./fn.take_hook.html\n /// [`set_hook`]: ./fn.set_hook.html\n@@ -189,16 +196,6 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n ///\n /// Panics if called from a panicking thread.\n ///\n-/// Panics if the provided closure calls any of the functions [`panic::take_hook`],\n-/// [`panic::set_hook`], or [`panic::update_hook`].\n-///\n-/// Note: if the provided closure panics, the panic will not be able to be handled, resulting in a\n-/// double panic that aborts the process with a generic error message.\n-///\n-/// [`panic::take_hook`]: ./fn.take_hook.html\n-/// [`panic::set_hook`]: ./fn.set_hook.html\n-/// [`panic::update_hook`]: ./fn.update_hook.html\n-///\n /// # Examples\n ///\n /// The following will print the custom message, and then the normal output of panic.\n@@ -207,21 +204,26 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n /// #![feature(panic_update_hook)]\n /// use std::panic;\n ///\n-/// panic::update_hook(|prev| {\n-///     Box::new(move |panic_info| {\n-///         println!(\"Print custom message and execute panic handler as usual\");\n-///         prev(panic_info);\n-///     })\n+/// // Equivalent to\n+/// // let prev = panic::take_hook();\n+/// // panic::set_hook(move |info| {\n+/// //     println!(\"...\");\n+/// //     prev(info);\n+/// // );\n+/// panic::update_hook(move |prev, info| {\n+///     println!(\"Print custom message and execute panic handler as usual\");\n+///     prev(info);\n /// });\n ///\n /// panic!(\"Custom and then normal\");\n /// ```\n #[unstable(feature = \"panic_update_hook\", issue = \"92649\")]\n pub fn update_hook<F>(hook_fn: F)\n where\n-    F: FnOnce(\n-        Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>,\n-    ) -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>,\n+    F: Fn(&(dyn Fn(&PanicInfo<'_>) + Send + Sync + 'static), &PanicInfo<'_>)\n+        + Sync\n+        + Send\n+        + 'static,\n {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n@@ -232,13 +234,12 @@ where\n         let old_hook = HOOK;\n         HOOK = Hook::Default;\n \n-        let hook_for_fn = match old_hook {\n+        let prev = match old_hook {\n             Hook::Default => Box::new(default_hook),\n             Hook::Custom(ptr) => Box::from_raw(ptr),\n         };\n \n-        let hook = hook_fn(hook_for_fn);\n-        HOOK = Hook::Custom(Box::into_raw(hook));\n+        HOOK = Hook::custom(move |info| hook_fn(&prev, info));\n         drop(guard);\n     }\n }"}, {"sha": "4dd08ba4ad4e2f266b0d2a45d2b4acb8066c9472", "filename": "src/test/ui/panics/panic-handler-chain-update-hook.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain-update-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef3ce866e2f20bdcc567e2f7012f81ce2e60298/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain-update-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain-update-hook.rs?ref=8ef3ce866e2f20bdcc567e2f7012f81ce2e60298", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+// needs-unwind\n+#![allow(stable_features)]\n+\n+// ignore-emscripten no threads support\n+\n+#![feature(std_panic)]\n+#![feature(panic_update_hook)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::panic;\n+use std::thread;\n+\n+static A: AtomicUsize = AtomicUsize::new(0);\n+static B: AtomicUsize = AtomicUsize::new(0);\n+static C: AtomicUsize = AtomicUsize::new(0);\n+\n+fn main() {\n+    panic::set_hook(Box::new(|_| { A.fetch_add(1, Ordering::SeqCst); }));\n+    panic::update_hook(|prev, info| {\n+        B.fetch_add(1, Ordering::SeqCst);\n+        prev(info);\n+    });\n+    panic::update_hook(|prev, info| {\n+        C.fetch_add(1, Ordering::SeqCst);\n+        prev(info);\n+    });\n+\n+    let _ = thread::spawn(|| {\n+        panic!();\n+    }).join();\n+\n+    assert_eq!(1, A.load(Ordering::SeqCst));\n+    assert_eq!(1, B.load(Ordering::SeqCst));\n+    assert_eq!(1, C.load(Ordering::SeqCst));\n+}"}, {"sha": "8c95f1b8b78403966618437b806b20f4764ada01", "filename": "src/test/ui/panics/panic-while-updating-hook.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -1,16 +0,0 @@\n-// run-fail\n-// error-pattern: panicked while processing panic\n-#![allow(stable_features)]\n-\n-// ignore-emscripten no threads support\n-\n-#![feature(std_panic)]\n-#![feature(panic_update_hook)]\n-\n-use std::panic;\n-\n-fn main() {\n-    panic::update_hook(|_prev| {\n-        panic!(\"inside update_hook\");\n-    })\n-}"}]}