{"sha": "385c79379c1267b04cd614f01269f0add0eb2095", "node_id": "C_kwDOAAsO6NoAKDM4NWM3OTM3OWMxMjY3YjA0Y2Q2MTRmMDEyNjlmMGFkZDBlYjIwOTU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-01T23:48:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-07T19:15:18Z"}, "message": "Track `WellFormed` obligations with an appropriate cause, instead of `MiscObligation`", "tree": {"sha": "59896826e2b977ede30a62eb4371bbc199f96bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59896826e2b977ede30a62eb4371bbc199f96bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/385c79379c1267b04cd614f01269f0add0eb2095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/385c79379c1267b04cd614f01269f0add0eb2095", "html_url": "https://github.com/rust-lang/rust/commit/385c79379c1267b04cd614f01269f0add0eb2095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/385c79379c1267b04cd614f01269f0add0eb2095/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af10a456c19c447ff2bff585537d52a8d532bd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/af10a456c19c447ff2bff585537d52a8d532bd86", "html_url": "https://github.com/rust-lang/rust/commit/af10a456c19c447ff2bff585537d52a8d532bd86"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "d85e54a6daf03344891a8666eeaac8db0d3eca14", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     }\n \n     fn normalize(mut self) -> Vec<traits::PredicateObligation<'tcx>> {\n-        let cause = self.cause(traits::MiscObligation);\n+        let cause = self.cause(traits::WellFormed(None));\n         let infcx = &mut self.infcx;\n         let param_env = self.param_env;\n         let mut obligations = Vec::with_capacity(self.out.len());\n@@ -385,7 +385,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         self.out.extend(obligations);\n \n         let tcx = self.tcx();\n-        let cause = self.cause(traits::MiscObligation);\n+        let cause = self.cause(traits::WellFormed(None));\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n \n@@ -445,7 +445,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let predicate =\n                                 ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n                                     .to_predicate(self.tcx());\n-                            let cause = self.cause(traits::MiscObligation);\n+                            let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n                                 cause,\n                                 self.recursion_depth,\n@@ -457,7 +457,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let resolved = self.infcx.shallow_resolve(infer);\n                             // the `InferConst` changed, meaning that we made progress.\n                             if resolved != infer {\n-                                let cause = self.cause(traits::MiscObligation);\n+                                let cause = self.cause(traits::WellFormed(None));\n \n                                 let resolved_constant = self.infcx.tcx.mk_const(ty::ConstS {\n                                     kind: ty::ConstKind::Infer(resolved),\n@@ -648,7 +648,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     let defer_to_coercion = self.tcx().features().object_safe_for_dispatch;\n \n                     if !defer_to_coercion {\n-                        let cause = self.cause(traits::MiscObligation);\n+                        let cause = self.cause(traits::WellFormed(None));\n                         let component_traits = data.auto_traits().chain(data.principal_def_id());\n                         let tcx = self.tcx();\n                         self.out.extend(component_traits.map(|did| {\n@@ -679,7 +679,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     let ty = self.infcx.shallow_resolve(ty);\n                     if let ty::Infer(ty::TyVar(_)) = ty.kind() {\n                         // Not yet resolved, but we've made progress.\n-                        let cause = self.cause(traits::MiscObligation);\n+                        let cause = self.cause(traits::WellFormed(None));\n                         self.out.push(traits::Obligation::with_depth(\n                             cause,\n                             self.recursion_depth,"}, {"sha": "3af73abe5ceda24feac79b29448290cd5b6f57f6", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // we must check that return type of called functions is WF:\n-        self.register_wf_obligation(output.into(), call_expr.span, traits::MiscObligation);\n+        self.register_wf_obligation(output.into(), call_expr.span, traits::WellFormed(None));\n \n         output\n     }"}, {"sha": "cf7de1dc016c802496dea65ecbfa3988180edd1f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn to_ty(&self, ast_t: &hir::Ty<'_>) -> Ty<'tcx> {\n         let t = <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_t);\n-        self.register_wf_obligation(t.into(), ast_t.span, traits::MiscObligation);\n+        self.register_wf_obligation(t.into(), ast_t.span, traits::WellFormed(None));\n         t\n     }\n \n@@ -526,7 +526,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_wf_obligation(\n             c.into(),\n             self.tcx.hir().span(ast_c.hir_id),\n-            ObligationCauseCode::MiscObligation,\n+            ObligationCauseCode::WellFormed(None),\n         );\n         c\n     }\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_wf_obligation(\n             c.into(),\n             self.tcx.hir().span(ast_c.hir_id),\n-            ObligationCauseCode::MiscObligation,\n+            ObligationCauseCode::WellFormed(None),\n         );\n         c\n     }\n@@ -607,7 +607,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for arg in substs.iter().filter(|arg| {\n             matches!(arg.unpack(), GenericArgKind::Type(..) | GenericArgKind::Const(..))\n         }) {\n-            self.register_wf_obligation(arg, expr.span, traits::MiscObligation);\n+            self.register_wf_obligation(arg, expr.span, traits::WellFormed(None));\n         }\n     }\n "}, {"sha": "d8cdc9275f4356a87ff4412ff5d177e1ff74f156", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // the function type must also be well-formed (this is not\n         // implied by the substs being well-formed because of inherent\n         // impls and late-bound regions - see issue #28609).\n-        self.register_wf_obligation(fty.into(), self.span, traits::MiscObligation);\n+        self.register_wf_obligation(fty.into(), self.span, traits::WellFormed(None));\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "f93f567fb2054587428512281db25006a51b830c", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -1180,7 +1180,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n             fcx.register_bound(\n                 item_ty,\n                 tcx.require_lang_item(LangItem::Sized, None),\n-                traits::ObligationCause::new(ty_span, fcx.body_id, traits::MiscObligation),\n+                traits::ObligationCause::new(ty_span, fcx.body_id, traits::WellFormed(None)),\n             );\n         }\n "}, {"sha": "81108fe0a479fea98e6ec1f2255933a53f1bf960", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385c79379c1267b04cd614f01269f0add0eb2095/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=385c79379c1267b04cd614f01269f0add0eb2095", "patch": "@@ -72,7 +72,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n                 let cause = traits::ObligationCause::new(\n                     ty.span,\n                     self.hir_id,\n-                    traits::ObligationCauseCode::MiscObligation,\n+                    traits::ObligationCauseCode::WellFormed(None),\n                 );\n                 fulfill.register_predicate_obligation(\n                     &infcx,"}]}