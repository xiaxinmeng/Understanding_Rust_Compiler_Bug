{"sha": "98ce875b58a87164b763e83be82b5ed32f4398a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2U4NzViNThhODcxNjRiNzYzZTgzYmU4MmI1ZWQzMmY0Mzk4YTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-12T09:01:22Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-21T22:59:36Z"}, "message": "Refactor away variant `ast::PathListItemKind::Mod`\nand refactor `ast::PathListItemKind::Ident` -> `ast::PathListItem_`.", "tree": {"sha": "ef09b73f6cee4e6bd4d60cb2bd991b48ec669c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef09b73f6cee4e6bd4d60cb2bd991b48ec669c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ce875b58a87164b763e83be82b5ed32f4398a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ce875b58a87164b763e83be82b5ed32f4398a9", "html_url": "https://github.com/rust-lang/rust/commit/98ce875b58a87164b763e83be82b5ed32f4398a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ce875b58a87164b763e83be82b5ed32f4398a9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1576de0ce6b75fd177eca289a2826d0190e407a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1576de0ce6b75fd177eca289a2826d0190e407a5", "html_url": "https://github.com/rust-lang/rust/commit/1576de0ce6b75fd177eca289a2826d0190e407a5"}], "stats": {"total": 160, "additions": 52, "deletions": 108}, "files": [{"sha": "afb8f5de8eadded7b66fd69bdcfbe44d66b4087a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -218,16 +218,10 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_path_list_item(&mut self, path_list_ident: &PathListItem) -> hir::PathListItem {\n         Spanned {\n-            node: match path_list_ident.node {\n-                PathListItemKind::Ident { id, name, rename } => hir::PathListIdent {\n-                    id: id,\n-                    name: name.name,\n-                    rename: rename.map(|x| x.name),\n-                },\n-                PathListItemKind::Mod { id, rename } => hir::PathListMod {\n-                    id: id,\n-                    rename: rename.map(|x| x.name),\n-                },\n+            node: hir::PathListIdent {\n+                id: path_list_ident.node.id,\n+                name: path_list_ident.node.name.name,\n+                rename: path_list_ident.node.rename.map(|rename| rename.name),\n             },\n             span: path_list_ident.span,\n         }"}, {"sha": "12c55b3ac172c9351501d636f9b7234b95007f3b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -32,9 +32,9 @@ use syntax::parse::token;\n \n use syntax::ast::{Block, Crate};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n-use syntax::ast::{Mutability, PathListItemKind};\n-use syntax::ast::{StmtKind, TraitItemKind};\n+use syntax::ast::{Mutability, StmtKind, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n+use syntax::parse::token::keywords;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -130,9 +130,10 @@ impl<'b> Resolver<'b> {\n                     ViewPathList(_, ref source_items) => {\n                         // Make sure there's at most one `mod` import in the list.\n                         let mod_spans = source_items.iter().filter_map(|item| {\n-                            match item.node {\n-                                PathListItemKind::Mod { .. } => Some(item.span),\n-                                _ => None,\n+                            if item.node.name.name == keywords::SelfValue.name() {\n+                                Some(item.span)\n+                            } else {\n+                                None\n                             }\n                         }).collect::<Vec<Span>>();\n \n@@ -147,10 +148,12 @@ impl<'b> Resolver<'b> {\n                         }\n \n                         for source_item in source_items {\n-                            let (module_path, name, rename) = match source_item.node {\n-                                PathListItemKind::Ident { name, rename, .. } =>\n-                                    (module_path.clone(), name.name, rename.unwrap_or(name).name),\n-                                PathListItemKind::Mod { rename, .. } => {\n+                            let node = source_item.node;\n+                            let (module_path, name, rename) = {\n+                                if node.name.name != keywords::SelfValue.name() {\n+                                    let rename = node.rename.unwrap_or(node.name).name;\n+                                    (module_path.clone(), node.name.name, rename)\n+                                } else {\n                                     let name = match module_path.last() {\n                                         Some(name) => *name,\n                                         None => {\n@@ -164,12 +167,12 @@ impl<'b> Resolver<'b> {\n                                         }\n                                     };\n                                     let module_path = module_path.split_last().unwrap().1;\n-                                    let rename = rename.map(|i| i.name).unwrap_or(name);\n+                                    let rename = node.rename.map(|i| i.name).unwrap_or(name);\n                                     (module_path.to_vec(), name, rename)\n                                 }\n                             };\n                             let subclass = ImportDirectiveSubclass::single(rename, name);\n-                            let (span, id) = (source_item.span, source_item.node.id());\n+                            let (span, id) = (source_item.span, source_item.node.id);\n                             self.add_import_directive(module_path, subclass, span, id, vis);\n                         }\n                     }"}, {"sha": "bc923ba29ca475356bae86488580d516c736ecdc", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n \n                     ViewPathList(_, ref list) => {\n                         for i in list {\n-                            self.check_import(i.node.id(), i.span);\n+                            self.check_import(i.node.id, i.span);\n                         }\n                     }\n                     ViewPathGlob(_) => {"}, {"sha": "dbe956f021e4c3a90edc04d41231bd4fe28829ce", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -1102,18 +1102,11 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     }\n                     ast::ViewPathList(ref path, ref list) => {\n                         for plid in list {\n-                            match plid.node {\n-                                ast::PathListItemKind::Ident { id, .. } => {\n-                                    let scope = self.cur_scope;\n-                                    if let Some(def_id) = self.lookup_type_ref(id) {\n-                                        self.process_def_kind(id,\n-                                                              plid.span,\n-                                                              Some(plid.span),\n-                                                              def_id,\n-                                                              scope);\n-                                    }\n-                                }\n-                                ast::PathListItemKind::Mod { .. } => (),\n+                            let scope = self.cur_scope;\n+                            let id = plid.node.id;\n+                            if let Some(def_id) = self.lookup_type_ref(id) {\n+                                let span = plid.span;\n+                                self.process_def_kind(id, span, Some(span), def_id, scope);\n                             }\n                         }\n "}, {"sha": "8265798e796f3194ac67536adb7d03f65ca26ccf", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -1624,42 +1624,14 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PathListItemKind {\n-    Ident {\n-        name: Ident,\n-        /// renamed in list, e.g. `use foo::{bar as baz};`\n-        rename: Option<Ident>,\n-        id: NodeId\n-    },\n-    Mod {\n-        /// renamed in list, e.g. `use foo::{self as baz};`\n-        rename: Option<Ident>,\n-        id: NodeId\n-    }\n-}\n-\n-impl PathListItemKind {\n-    pub fn id(&self) -> NodeId {\n-        match *self {\n-            PathListItemKind::Ident { id, .. } | PathListItemKind::Mod { id, .. } => id\n-        }\n-    }\n-\n-    pub fn name(&self) -> Option<Ident> {\n-        match *self {\n-            PathListItemKind::Ident { name, .. } => Some(name),\n-            PathListItemKind::Mod { .. } => None,\n-        }\n-    }\n-\n-    pub fn rename(&self) -> Option<Ident> {\n-        match *self {\n-            PathListItemKind::Ident { rename, .. } | PathListItemKind::Mod { rename, .. } => rename\n-        }\n-    }\n+pub struct PathListItem_ {\n+    pub name: Ident,\n+    /// renamed in list, e.g. `use foo::{bar as baz};`\n+    pub rename: Option<Ident>,\n+    pub id: NodeId,\n }\n \n-pub type PathListItem = Spanned<PathListItemKind>;\n+pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n "}, {"sha": "5d22930c4d59c2a6fa6e9c9b302cd3fc9d348ff0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -1178,7 +1178,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item> {\n         let imports = imports.iter().map(|id| {\n-            let item = ast::PathListItemKind::Ident {\n+            let item = ast::PathListItem_ {\n                 name: *id,\n                 rename: None,\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "9eb6217e5099509f4238060493d48b3747512d5d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -307,18 +307,10 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n                 ViewPathList(fld.fold_path(path),\n                              path_list_idents.move_map(|path_list_ident| {\n                                 Spanned {\n-                                    node: match path_list_ident.node {\n-                                        PathListItemKind::Ident { id, name, rename } =>\n-                                            PathListItemKind::Ident {\n-                                                id: fld.new_id(id),\n-                                                rename: rename,\n-                                                name: name\n-                                            },\n-                                        PathListItemKind::Mod { id, rename } =>\n-                                            PathListItemKind::Mod {\n-                                                id: fld.new_id(id),\n-                                                rename: rename\n-                                            }\n+                                    node: PathListItem_ {\n+                                        id: fld.new_id(path_list_ident.node.id),\n+                                        rename: path_list_ident.node.rename,\n+                                        name: path_list_ident.node.name,\n                                     },\n                                     span: fld.new_span(path_list_ident.span)\n                                 }"}, {"sha": "63dbd325075c1b829fbc2bd9c340ad61a184aa09", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -6017,13 +6017,16 @@ impl<'a> Parser<'a> {\n                                  &token::CloseDelim(token::Brace),\n                                  SeqSep::trailing_allowed(token::Comma), |this| {\n             let lo = this.span.lo;\n-            let node = if this.eat_keyword(keywords::SelfValue) {\n-                let rename = this.parse_rename()?;\n-                ast::PathListItemKind::Mod { id: ast::DUMMY_NODE_ID, rename: rename }\n+            let ident = if this.eat_keyword(keywords::SelfValue) {\n+                keywords::SelfValue.ident()\n             } else {\n-                let ident = this.parse_ident()?;\n-                let rename = this.parse_rename()?;\n-                ast::PathListItemKind::Ident { name: ident, rename: rename, id: ast::DUMMY_NODE_ID }\n+                this.parse_ident()?\n+            };\n+            let rename = this.parse_rename()?;\n+            let node = ast::PathListItem_ {\n+                name: ident,\n+                rename: rename,\n+                id: ast::DUMMY_NODE_ID\n             };\n             let hi = this.last_span.hi;\n             Ok(spanned(lo, hi, node))"}, {"sha": "65a5e06028fea692d602e661ceb376ef45fa77f9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -2878,26 +2878,13 @@ impl<'a> State<'a> {\n                     try!(word(&mut self.s, \"::{\"));\n                 }\n                 try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n-                    match w.node {\n-                        ast::PathListItemKind::Ident { name, rename, .. } => {\n-                            try!(s.print_ident(name));\n-                            if let Some(ident) = rename {\n-                                try!(space(&mut s.s));\n-                                try!(s.word_space(\"as\"));\n-                                try!(s.print_ident(ident));\n-                            }\n-                            Ok(())\n-                        },\n-                        ast::PathListItemKind::Mod { rename, .. } => {\n-                            try!(word(&mut s.s, \"self\"));\n-                            if let Some(ident) = rename {\n-                                try!(space(&mut s.s));\n-                                try!(s.word_space(\"as\"));\n-                                try!(s.print_ident(ident));\n-                            }\n-                            Ok(())\n-                        }\n+                    try!(s.print_ident(w.node.name));\n+                    if let Some(ident) = w.node.rename {\n+                        try!(space(&mut s.s));\n+                        try!(s.word_space(\"as\"));\n+                        try!(s.print_ident(ident));\n                     }\n+                    Ok(())\n                 }));\n                 word(&mut self.s, \"}\")\n             }"}, {"sha": "1124a5414b86da2c6cf842eb4f604ea8fdd9c564", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ce875b58a87164b763e83be82b5ed32f4398a9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=98ce875b58a87164b763e83be82b5ed32f4398a9", "patch": "@@ -367,8 +367,8 @@ pub fn walk_path<V: Visitor>(visitor: &mut V, path: &Path) {\n }\n \n pub fn walk_path_list_item<V: Visitor>(visitor: &mut V, _prefix: &Path, item: &PathListItem) {\n-    walk_opt_ident(visitor, item.span, item.node.name());\n-    walk_opt_ident(visitor, item.span, item.node.rename());\n+    visitor.visit_ident(item.span, item.node.name);\n+    walk_opt_ident(visitor, item.span, item.node.rename);\n }\n \n pub fn walk_path_segment<V: Visitor>(visitor: &mut V, path_span: Span, segment: &PathSegment) {"}]}