{"sha": "121974e37df723d86ea4fe94dacf5300b83c49ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMTk3NGUzN2RmNzIzZDg2ZWE0ZmU5NGRhY2Y1MzAwYjgzYzQ5YWI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T23:36:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:26:31Z"}, "message": "xpy fmt", "tree": {"sha": "09df707303f87bc2a832355749be097fe4fe8b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09df707303f87bc2a832355749be097fe4fe8b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121974e37df723d86ea4fe94dacf5300b83c49ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121974e37df723d86ea4fe94dacf5300b83c49ab", "html_url": "https://github.com/rust-lang/rust/commit/121974e37df723d86ea4fe94dacf5300b83c49ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121974e37df723d86ea4fe94dacf5300b83c49ab/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219e93d91e417f76e0071e42c78edc00f7f2cd4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/219e93d91e417f76e0071e42c78edc00f7f2cd4b", "html_url": "https://github.com/rust-lang/rust/commit/219e93d91e417f76e0071e42c78edc00f7f2cd4b"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "3eac5bbda007898b9c5f31a3df2e2ba0037d2049", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/121974e37df723d86ea4fe94dacf5300b83c49ab/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121974e37df723d86ea4fe94dacf5300b83c49ab/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=121974e37df723d86ea4fe94dacf5300b83c49ab", "patch": "@@ -3,11 +3,11 @@ use std::default::Default;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n+use std::lazy::SyncOnceCell as OnceCell;\n use std::num::NonZeroU32;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n-use std::lazy::SyncOnceCell as OnceCell;\n \n use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n@@ -27,7 +27,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n-use smallvec::{SmallVec, smallvec};\n+use smallvec::{smallvec, SmallVec};\n \n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n@@ -1296,8 +1296,9 @@ impl PrimitiveType {\n             }\n \n             let single = |a: Option<DefId>| a.into_iter().collect();\n-            let both =\n-                |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n+            let both = |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> {\n+                a.into_iter().chain(b).collect()\n+            };\n \n             let lang_items = tcx.lang_items();\n             map! {"}, {"sha": "97b9fcce05b362e72d2ddd06926a5151256cea00", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/121974e37df723d86ea4fe94dacf5300b83c49ab/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121974e37df723d86ea4fe94dacf5300b83c49ab/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=121974e37df723d86ea4fe94dacf5300b83c49ab", "patch": "@@ -275,7 +275,12 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     let link = cx\n                         .tcx\n                         .associated_items(impl_)\n-                        .find_by_name_and_namespace(cx.tcx, Ident::with_dummy_span(item_name), ns, impl_)\n+                        .find_by_name_and_namespace(\n+                            cx.tcx,\n+                            Ident::with_dummy_span(item_name),\n+                            ns,\n+                            impl_,\n+                        )\n                         .and_then(|item| match item.kind {\n                             ty::AssocKind::Fn => Some(\"method\"),\n                             _ => None,"}]}