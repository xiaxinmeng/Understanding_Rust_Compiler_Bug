{"sha": "c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Yjk0YzZhYTFiZGVlMmZiNjM3MWUzZjQ0NWYwYWJiYmE3YzUwOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-19T04:21:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-19T04:21:05Z"}, "message": "Auto merge of #46829 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 11 pull requests\n\n- Successful merges: #46700, #46786, #46790, #46800, #46801, #46802, #46804, #46805, #46812, #46824, #46825\n- Failed merges:", "tree": {"sha": "ed3506790a00ff8f85b736385b27f49d9144adfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3506790a00ff8f85b736385b27f49d9144adfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "html_url": "https://github.com/rust-lang/rust/commit/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76f224af867b198e4051806cc6e1ac686085cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76f224af867b198e4051806cc6e1ac686085cdc", "html_url": "https://github.com/rust-lang/rust/commit/b76f224af867b198e4051806cc6e1ac686085cdc"}, {"sha": "b5f6884aebb31c8e8eaae60314211ddad9f953b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f6884aebb31c8e8eaae60314211ddad9f953b4", "html_url": "https://github.com/rust-lang/rust/commit/b5f6884aebb31c8e8eaae60314211ddad9f953b4"}], "stats": {"total": 795, "additions": 328, "deletions": 467}, "files": [{"sha": "245ca83f28f65928478eb52d8ac48839945c9bcb", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -273,10 +273,13 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n =  0x0123456789ABCDEFi64;\n-        /// let m = -0x1032547698BADCFFi64;\n+        /// let n: i16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n         ///\n-        /// assert_eq!(n.swap_bytes(), m);\n+        /// let m = n.swap_bytes();\n+        ///\n+        /// assert_eq!(m, 0b01010101_00000000);\n+        /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -1466,10 +1469,13 @@ macro_rules! uint_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0xEFCDAB8967452301u64;\n+        /// let n: u16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n+        ///\n+        /// let m = n.swap_bytes();\n         ///\n-        /// assert_eq!(n.swap_bytes(), m);\n+        /// assert_eq!(m, 0b01010101_00000000);\n+        /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]"}, {"sha": "54da23821f5d834a63b9e3c100c20bc3371d6467", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -484,19 +484,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         -> DiagnosticBuilder<'tcx>\n     {\n         let msg = \"impl has stricter requirements than trait\";\n-        let mut err = struct_span_err!(self.tcx.sess,\n-                                       error_span,\n-                                       E0276,\n-                                       \"{}\", msg);\n+        let sp = self.tcx.sess.codemap().def_span(error_span);\n+\n+        let mut err = struct_span_err!(self.tcx.sess, sp, E0276, \"{}\", msg);\n \n         if let Some(trait_item_span) = self.tcx.hir.span_if_local(trait_item_def_id) {\n             let span = self.tcx.sess.codemap().def_span(trait_item_span);\n             err.span_label(span, format!(\"definition of `{}` from trait\", item_name));\n         }\n \n-        err.span_label(\n-            error_span,\n-            format!(\"impl has extra requirement {}\", requirement));\n+        err.span_label(sp, format!(\"impl has extra requirement {}\", requirement));\n \n         err\n     }\n@@ -647,7 +644,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n                     ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n                         let found_kind = self.closure_kind(closure_def_id, closure_substs).unwrap();\n-                        let closure_span = self.tcx.hir.span_if_local(closure_def_id).unwrap();\n+                        let closure_span = self.tcx.sess.codemap()\n+                            .def_span(self.tcx.hir.span_if_local(closure_def_id).unwrap());\n                         let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n                         let mut err = struct_span_err!(\n                             self.tcx.sess, closure_span, E0525,\n@@ -656,6 +654,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             kind,\n                             found_kind);\n \n+                        err.span_label(\n+                            closure_span,\n+                            format!(\"this closure implements `{}`, not `{}`\", found_kind, kind));\n                         err.span_label(\n                             obligation.cause.span,\n                             format!(\"the requirement to implement `{}` derives from here\", kind));\n@@ -667,12 +668,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             let closure_hir_id = self.tcx.hir.node_to_hir_id(node_id);\n                             match (found_kind, tables.closure_kind_origins().get(closure_hir_id)) {\n                                 (ty::ClosureKind::FnOnce, Some((span, name))) => {\n-                                    err.span_note(*span, &format!(\n+                                    err.span_label(*span, format!(\n                                         \"closure is `FnOnce` because it moves the \\\n                                          variable `{}` out of its environment\", name));\n                                 },\n                                 (ty::ClosureKind::FnMut, Some((span, name))) => {\n-                                    err.span_note(*span, &format!(\n+                                    err.span_label(*span, format!(\n                                         \"closure is `FnMut` because it mutates the \\\n                                          variable `{}` here\", name));\n                                 },"}, {"sha": "afe29cc0e7baf0b11de869e40644663cf7ce6d14", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -341,24 +341,28 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                         }),\n                     if used_to_be_allowed { \" (E0119)\" } else { \"\" }\n                 );\n+                let impl_span = tcx.sess.codemap().def_span(\n+                    tcx.span_of_impl(impl_def_id).unwrap()\n+                );\n                 let mut err = if used_to_be_allowed {\n                     tcx.struct_span_lint_node(\n                         lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n                         tcx.hir.as_local_node_id(impl_def_id).unwrap(),\n-                        tcx.span_of_impl(impl_def_id).unwrap(),\n+                        impl_span,\n                         &msg)\n                 } else {\n                     struct_span_err!(tcx.sess,\n-                                     tcx.span_of_impl(impl_def_id).unwrap(),\n+                                     impl_span,\n                                      E0119,\n                                      \"{}\",\n                                      msg)\n                 };\n \n                 match tcx.span_of_impl(overlap.with_impl) {\n                     Ok(span) => {\n-                        err.span_label(span, format!(\"first implementation here\"));\n-                        err.span_label(tcx.span_of_impl(impl_def_id).unwrap(),\n+                        err.span_label(tcx.sess.codemap().def_span(span),\n+                                       format!(\"first implementation here\"));\n+                        err.span_label(impl_span,\n                                        format!(\"conflicting implementation{}\",\n                                                 overlap.self_desc\n                                                     .map_or(String::new(),"}, {"sha": "5417634144bb3fadb8428932b9b1dd56ed1c8a4f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -352,7 +352,7 @@ impl MissingDoc {\n         let has_doc = attrs.iter().any(|a| a.is_value_str() && a.check_name(\"doc\"));\n         if !has_doc {\n             cx.span_lint(MISSING_DOCS,\n-                         sp,\n+                         cx.tcx.sess.codemap().def_span(sp),\n                          &format!(\"missing documentation for {}\", desc));\n         }\n     }\n@@ -914,15 +914,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // no break */ }`) shouldn't be linted unless it actually\n         // recurs.\n         if !reached_exit_without_self_call && !self_call_spans.is_empty() {\n+            let sp = cx.tcx.sess.codemap().def_span(sp);\n             let mut db = cx.struct_span_lint(UNCONDITIONAL_RECURSION,\n                                              sp,\n                                              \"function cannot return without recurring\");\n+            db.span_label(sp, \"cannot return without recurring\");\n             // offer some help to the programmer.\n             for call in &self_call_spans {\n-                db.span_note(*call, \"recursive call site\");\n+                db.span_label(*call, \"recursive call site\");\n             }\n-            db.help(\"a `loop` may express intention \\\n-                     better if this is on purpose\");\n+            db.help(\"a `loop` may express intention better if this is on purpose\");\n             db.emit();\n         }\n "}, {"sha": "524fa5cd433c0c44e44caf230b3f273d461f341a", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -388,12 +388,13 @@ fn is_enclosed(tcx: TyCtxt,\n }\n \n fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: ast::NodeId) {\n-    let span = tcx.hir.span(id);\n-    let mut db = tcx.struct_span_lint_node(UNUSED_UNSAFE, id, span, \"unnecessary `unsafe` block\");\n-    db.span_label(span, \"unnecessary `unsafe` block\");\n+    let span = tcx.sess.codemap().def_span(tcx.hir.span(id));\n+    let msg = \"unnecessary `unsafe` block\";\n+    let mut db = tcx.struct_span_lint_node(UNUSED_UNSAFE, id, span, msg);\n+    db.span_label(span, msg);\n     if let Some((kind, id)) = is_enclosed(tcx, used_unsafe, id) {\n-        db.span_note(tcx.hir.span(id),\n-                     &format!(\"because it's nested under this `unsafe` {}\", kind));\n+        db.span_label(tcx.sess.codemap().def_span(tcx.hir.span(id)),\n+                      format!(\"because it's nested under this `unsafe` {}\", kind));\n     }\n     db.emit();\n }"}, {"sha": "864a61108b1d335f65e08acc980e6f936fdf72a0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -3840,7 +3840,7 @@ impl<'a> Resolver<'a> {\n             false => \"defined\",\n         };\n \n-        let (name, span) = (ident.name, new_binding.span);\n+        let (name, span) = (ident.name, self.session.codemap().def_span(new_binding.span));\n \n         if let Some(s) = self.name_already_seen.get(&name) {\n             if s == &span {\n@@ -3885,8 +3885,8 @@ impl<'a> Resolver<'a> {\n \n         err.span_label(span, format!(\"`{}` re{} here\", name, new_participle));\n         if old_binding.span != syntax_pos::DUMMY_SP {\n-            err.span_label(old_binding.span, format!(\"previous {} of the {} `{}` here\",\n-                                                      old_noun, old_kind, name));\n+            err.span_label(self.session.codemap().def_span(old_binding.span),\n+                           format!(\"previous {} of the {} `{}` here\", old_noun, old_kind, name));\n         }\n \n         // See https://github.com/rust-lang/rust/issues/32354"}, {"sha": "3cd60e7f1bc7fbb4cf40075114e0c7856a16d946", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -406,8 +406,8 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             let zero = C_null(bcx.ccx.isize_ty());\n             // `offset == 0`\n             let is_zero = bcx.icmp(llvm::IntPredicate::IntEQ, offset, zero);\n-            // `if offset == 0 { 0 } else { offset - align }`\n-            bcx.select(is_zero, zero, bcx.sub(offset, align))\n+            // `if offset == 0 { 0 } else { align - offset }`\n+            bcx.select(is_zero, zero, bcx.sub(align, offset))\n         }\n         name if name.starts_with(\"simd_\") => {\n             match generic_simd_intrinsic(bcx, name,"}, {"sha": "914365b003e18472a7a909020138e70daca7bd61", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -448,8 +448,7 @@ fn build_static(cx: &DocContext, did: DefId, mutable: bool) -> clean::Static {\n ///\n /// The inverse of this filtering logic can be found in the `Clean`\n /// implementation for `AssociatedType`\n-fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics)\n-                             -> clean::Generics {\n+fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean::Generics {\n     for pred in &mut g.where_predicates {\n         match *pred {\n             clean::WherePredicate::BoundPredicate {"}, {"sha": "8d02fd26866038e89630a5c486a3dd66e83e9589", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1190,16 +1190,36 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n-    pub where_predicates: Vec<WherePredicate>\n+    pub where_predicates: Vec<WherePredicate>,\n }\n \n impl Clean<Generics> for hir::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n-        Generics {\n+        let mut g = Generics {\n             lifetimes: self.lifetimes.clean(cx),\n             type_params: self.ty_params.clean(cx),\n             where_predicates: self.where_clause.predicates.clean(cx)\n+        };\n+\n+        // Some duplicates are generated for ?Sized bounds between type params and where\n+        // predicates. The point in here is to move the bounds definitions from type params\n+        // to where predicates when such cases occur.\n+        for where_pred in &mut g.where_predicates {\n+            match *where_pred {\n+                WherePredicate::BoundPredicate { ty: Generic(ref name), ref mut bounds } => {\n+                    if bounds.is_empty() {\n+                        for type_params in &mut g.type_params {\n+                            if &type_params.name == name {\n+                                mem::swap(bounds, &mut type_params.bounds);\n+                                break\n+                            }\n+                        }\n+                    }\n+                }\n+                _ => continue,\n+            }\n         }\n+        g\n     }\n }\n \n@@ -1225,7 +1245,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         let mut where_predicates = preds.predicates.to_vec().clean(cx);\n \n         // Type parameters and have a Sized bound by default unless removed with\n-        // ?Sized.  Scan through the predicates and mark any type parameter with\n+        // ?Sized. Scan through the predicates and mark any type parameter with\n         // a Sized bound, removing the bounds as we find them.\n         //\n         // Note that associated types also have a sized bound by default, but we"}, {"sha": "63ebb16e5e0096a961e4574829d2a14040cda39a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -38,6 +38,7 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();\n+\n     for clause in clauses {\n         match clause {\n             WP::BoundPredicate { ty, bounds } => {"}, {"sha": "e6cf27b2008bf9c77274da45cf1540917b0222e3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -681,6 +681,9 @@\n             }\n \n             function checkPath(startsWith, lastElem, ty) {\n+                if (startsWith.length === 0) {\n+                    return 0;\n+                }\n                 var ret_lev = MAX_LEV_DISTANCE + 1;\n                 var path = ty.path.split(\"::\");\n \n@@ -706,18 +709,7 @@\n                         lev_total += lev;\n                     }\n                     if (aborted === false) {\n-                        var extra = MAX_LEV_DISTANCE + 1;\n-                        if (i + startsWith.length < path.length) {\n-                            extra = levenshtein(path[i + startsWith.length], lastElem);\n-                        }\n-                        if (extra > MAX_LEV_DISTANCE) {\n-                            extra = levenshtein(ty.name, lastElem);\n-                        }\n-                        if (extra < MAX_LEV_DISTANCE + 1) {\n-                            lev_total += extra;\n-                            ret_lev = Math.min(ret_lev,\n-                                               Math.round(lev_total / (startsWith.length + 1)));\n-                        }\n+                        ret_lev = Math.min(ret_lev, Math.round(lev_total / startsWith.length));\n                     }\n                 }\n                 return ret_lev;\n@@ -934,6 +926,13 @@\n                     }\n \n                     lev += lev_add;\n+                    if (lev > 0 && val.length > 3 && searchWords[j].startsWith(val)) {\n+                        if (val.length < 6) {\n+                            lev -= 1;\n+                        } else {\n+                            lev = 0;\n+                        }\n+                    }\n                     if (in_args <= MAX_LEV_DISTANCE) {\n                         if (results_in_args[fullId] === undefined) {\n                             results_in_args[fullId] = {\n@@ -1447,7 +1446,7 @@\n \n         // Draw a convenient sidebar of known crates if we have a listing\n         if (rootPath === '../') {\n-            var sidebar = document.getElementsByClassName('sidebar')[0];\n+            var sidebar = document.getElementsByClassName('sidebar-elems')[0];\n             var div = document.createElement('div');\n             div.className = 'block crate';\n             div.innerHTML = '<h3>Crates</h3>';"}, {"sha": "e620abea2777b7189f81085026f121d282375441", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1011,6 +1011,26 @@ h4 > .important-traits {\n \t\tleft: -22px;\n \t\ttop: 24px;\n \t}\n+\n+\t#titles > div > div.count {\n+\t\tfloat: left;\n+\t\twidth: 100%;\n+\t}\n+\n+\t#titles {\n+\t\theight: 50px;\n+\t}\n+}\n+\n+\n+@media (max-width: 416px) {\n+\t#titles {\n+\t\theight: 73px;\n+\t}\n+\n+\t#titles > div {\n+\t\theight: 73px;\n+\t}\n }\n \n .modal {"}, {"sha": "aaa0419d061cb8797611f29e171fb55b23630201", "filename": "src/test/run-pass/align-offset-sign.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Frun-pass%2Falign-offset-sign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Frun-pass%2Falign-offset-sign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-offset-sign.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(align_offset)]\n+\n+fn main() {\n+    let x = 1 as *const u8;\n+    assert_eq!(x.align_offset(8), 7);\n+}"}, {"sha": "c175c839c0f21525a8659b0992d50889f00fb121", "filename": "src/test/rustdoc/where-sized.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-sized.rs?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//*[@class=\"rust fn\"]' 'where X: ?Sized,'\n+pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}, {"sha": "855b3799eb5db106dc305b2d74a821a9cb091c3d", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,7 +2,7 @@ error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/blind-item-item-shadow.rs:13:5\n    |\n 11 | mod foo { pub mod foo {  } }\n-   | ---------------------------- previous definition of the module `foo` here\n+   | ------- previous definition of the module `foo` here\n 12 | \n 13 | use foo::foo;\n    |     ^^^^^^^^ `foo` reimported here"}, {"sha": "77ce1176b5cd0f964275ab6be2570804d877b7af", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,20 +1,13 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/issue-26046-fn-mut.rs:14:19\n    |\n-14 |       let closure = || { //~ ERROR expected a closure that\n-   |  ___________________^\n-15 | |         num += 1;\n-16 | |     };\n-   | |_____^\n-17 | \n-18 |       Box::new(closure)\n-   |       ----------------- the requirement to implement `Fn` derives from here\n-   |\n-note: closure is `FnMut` because it mutates the variable `num` here\n-  --> $DIR/issue-26046-fn-mut.rs:15:9\n-   |\n+14 |     let closure = || { //~ ERROR expected a closure that\n+   |                   ^^ this closure implements `FnMut`, not `Fn`\n 15 |         num += 1;\n-   |         ^^^\n+   |         --- closure is `FnMut` because it mutates the variable `num` here\n+...\n+18 |     Box::new(closure)\n+   |     ----------------- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "4eed4461ebafe9037845e833174a3c7704d5508e", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,20 +1,13 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/issue-26046-fn-once.rs:14:19\n    |\n-14 |       let closure = move || { //~ ERROR expected a closure\n-   |  ___________________^\n-15 | |         vec\n-16 | |     };\n-   | |_____^\n-17 | \n-18 |       Box::new(closure)\n-   |       ----------------- the requirement to implement `Fn` derives from here\n-   |\n-note: closure is `FnOnce` because it moves the variable `vec` out of its environment\n-  --> $DIR/issue-26046-fn-once.rs:15:9\n-   |\n+14 |     let closure = move || { //~ ERROR expected a closure\n+   |                   ^^^^^^^ this closure implements `FnOnce`, not `Fn`\n 15 |         vec\n-   |         ^^^\n+   |         --- closure is `FnOnce` because it moves the variable `vec` out of its environment\n+...\n+18 |     Box::new(closure)\n+   |     ----------------- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "c94ffd60d261feb2d901f8c10c8ae45eb296fb33", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,17 +2,17 @@ error[E0119]: conflicting implementations of trait `Sweet`:\n   --> $DIR/coherence-overlap-downstream.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n-   | ----------------------------- first implementation here\n+   | ------------------------- first implementation here\n 18 | impl<T:Fruit> Sweet for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n   --> $DIR/coherence-overlap-downstream.rs:24:1\n    |\n 23 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n-   | ------------------------------------------ first implementation here\n+   | --------------------------------------- first implementation here\n 24 | impl<X> Foo<X> for i32 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`\n "}, {"sha": "c27e1ad76200c750cbd686e3085099b1e2fc70d3", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed:\n   --> $DIR/coherence-overlap-issue-23516.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n-   | ----------------------------- first implementation here\n+   | ------------------------- first implementation here\n 18 | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n "}, {"sha": "9b5b67fe9c7dd3ae24cc845167b9a7f088bff083", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n   --> $DIR/coherence-overlap-upstream.rs:22:1\n    |\n 21 | impl<T> Foo for T where T: Remote {}\n-   | ------------------------------------ first implementation here\n+   | --------------------------------- first implementation here\n 22 | impl Foo for i16 {}\n-   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n "}, {"sha": "e6e93d14b3cf00869fa81897784a0b64b885e8d0", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     --------------------- definition of `foo` from trait\n ...\n 19 |     fn foo() where U: 'a { } //~ ERROR E0276\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "2b8a268fdcc367d0cbb8ac99af1971e2beef2d42", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,14 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-extra-2.rs:19:5\n    |\n-15 |       fn renew<'b: 'a>(self) -> &'b mut [T];\n-   |       -------------------------------------- definition of `renew` from trait\n+15 |     fn renew<'b: 'a>(self) -> &'b mut [T];\n+   |     -------------------------------------- definition of `renew` from trait\n ...\n-19 | /     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n-20 | |         //~^ ERROR E0276\n-21 | |         &mut self[..]\n-22 | |     }\n-   | |_____^ impl has extra requirement `'a: 'b`\n+19 |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "d89b3a921b9e4883bba495cab11bfbf9d8321f98", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     --------- definition of `foo` from trait\n ...\n 19 |     fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "156143cd54c471b6165252c2ad7557b4b9aa02bb", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     --------------------- definition of `foo` from trait\n ...\n 19 |     fn foo() where V: 'a { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "e3a1eb9ee66c4788af0e8cf9150f2abc90f4a86b", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0276]: impl has stricter requirements than trait\n    |   ---------------------------- definition of `b` from trait\n ...\n 25 |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n \n error: aborting due to previous error\n "}, {"sha": "ba5284eb65309db56bd9da6d1be1b6d7efe2499a", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     -------------------------------- definition of `test_error1_fn` from trait\n ...\n 36 |     fn test_error1_fn<T: Ord>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Ord`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Ord`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:40:5\n@@ -14,7 +14,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     -------------------------------------- definition of `test_error2_fn` from trait\n ...\n 40 |     fn test_error2_fn<T: Eq + B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:44:5\n@@ -23,7 +23,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     -------------------------------------- definition of `test_error3_fn` from trait\n ...\n 44 |     fn test_error3_fn<T: B + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:54:5\n@@ -32,7 +32,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ------------------------------- definition of `test_error5_fn` from trait\n ...\n 54 |     fn test_error5_fn<T: B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:60:5\n@@ -41,7 +41,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ------------------------------- definition of `test_error7_fn` from trait\n ...\n 60 |     fn test_error7_fn<T: A + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Eq`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Eq`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:63:5\n@@ -50,7 +50,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ------------------------------- definition of `test_error8_fn` from trait\n ...\n 63 |     fn test_error8_fn<T: C>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:76:5\n@@ -59,7 +59,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ---------------------------------- definition of `method` from trait\n ...\n 76 |     fn method<G: Getter<usize>>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "983d87d5b88d88516a51ac5459a8aa05d06aa99a", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,14 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-2.rs:23:5\n    |\n-19 |       fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n-   |       ------------------------------------------------------------------ definition of `zip` from trait\n+19 |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n+   |     ------------------------------------------------------------------ definition of `zip` from trait\n ...\n-23 | /     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-24 | |     //~^ ERROR E0276\n-25 | |         ZipIterator{a: self, b: other}\n-26 | |     }\n-   | |_____^ impl has extra requirement `U: Iterator<B>`\n+23 |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n \n error: aborting due to previous error\n "}, {"sha": "926dac3f9b132a21d143647a069f74344a42bb7a", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `complex_impl_support::Extern\n   --> $DIR/complex-impl.rs:19:1\n    |\n 19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `complex_impl_support`:\n            - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)"}, {"sha": "4c1f9405fb96203b67f66b44a40f2c763b4b6389", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n   --> $DIR/conflict-with-std.rs:17:1\n    |\n-17 | / impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n-18 | |     fn as_ref(&self) -> &Q {\n-19 | |         &**self\n-20 | |     }\n-21 | | }\n-   | |_^\n+17 | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `alloc`:\n            - impl<T> std::convert::AsRef<T> for std::boxed::Box<T>\n@@ -15,26 +11,17 @@ error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for\n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n   --> $DIR/conflict-with-std.rs:24:1\n    |\n-24 | / impl From<S> for S { //~ ERROR conflicting implementations\n-25 | |     fn from(s: S) -> S {\n-26 | |         s\n-27 | |     }\n-28 | | }\n-   | |_^\n+24 | impl From<S> for S { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n   --> $DIR/conflict-with-std.rs:31:1\n    |\n-31 | / impl TryFrom<X> for X { //~ ERROR conflicting implementations\n-32 | |     type Error = ();\n-33 | |     fn try_from(u: X) -> Result<X, ()> {\n-34 | |         Ok(u)\n-35 | |     }\n-36 | | }\n-   | |_^\n+31 | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T, U> std::convert::TryFrom<U> for T"}, {"sha": "8bbae56d8436de5eece5d8fb1b459b5fcddfb787", "filename": "src/test/ui/e0119/issue-23563.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,10 +1,8 @@\n error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n   --> $DIR/issue-23563.rs:23:1\n    |\n-23 | / impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n-24 | |     fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n-25 | | }\n-   | |_^\n+23 | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `issue_23563_a`:\n            - impl<T, U> a::LolFrom<T> for U"}, {"sha": "4417ea9099fa8b6c3250270562a5ae76ed44a074", "filename": "src/test/ui/e0119/issue-27403.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n   --> $DIR/issue-27403.rs:15:1\n    |\n-15 | / impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n-16 | |     fn into(self) -> S {\n-17 | |         self.inner\n-18 | |     }\n-19 | | }\n-   | |_^\n+15 | impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T, U> std::convert::Into<U> for T"}, {"sha": "3ea1c9adc9b46cd9c8f806e8b0f288dcdf6e66c4", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&\n   --> $DIR/issue-28981.rs:15:1\n    |\n 15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<'a, T> std::ops::Deref for &'a T"}, {"sha": "84fb049df357d286b30fef65ef448af9be3a7b6a", "filename": "src/test/ui/e0119/so-37347311.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n   --> $DIR/so-37347311.rs:21:1\n    |\n-21 | / impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n-22 | |     fn from(error: S::Error) -> MyError<S> {\n-23 | |         MyError::StorageProblem(error)\n-24 | |     }\n-25 | | }\n-   | |_^\n+21 | impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T> std::convert::From<T> for T;"}, {"sha": "ddbee0655e4cdcb74fe1b9aae83c16102bdb64fe", "filename": "src/test/ui/enum-and-module-in-same-scope.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,16 +1,11 @@\n error[E0428]: the name `Foo` is defined multiple times\n   --> $DIR/enum-and-module-in-same-scope.rs:15:1\n    |\n-11 | / enum Foo {\n-12 | |     X\n-13 | | }\n-   | |_- previous definition of the type `Foo` here\n-14 | \n-15 | / mod Foo { //~ ERROR the name `Foo` is defined multiple times\n-16 | |     pub static X: isize = 42;\n-17 | |     fn f() { f() } // Check that this does not result in a resolution error\n-18 | | }\n-   | |_^ `Foo` redefined here\n+11 | enum Foo {\n+   | -------- previous definition of the type `Foo` here\n+...\n+15 | mod Foo { //~ ERROR the name `Foo` is defined multiple times\n+   | ^^^^^^^ `Foo` redefined here\n    |\n    = note: `Foo` must be defined only once in the type namespace of this module\n "}, {"sha": "c1725a62adaf49944590ec4a2c871c11c804e70e", "filename": "src/test/ui/feature-gate-overlapping_marker_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `MyMarker`:\n   --> $DIR/feature-gate-overlapping_marker_traits.rs:16:1\n    |\n 15 | impl<T: Display> MyMarker for T {}\n-   | ---------------------------------- first implementation here\n+   | ------------------------------- first implementation here\n 16 | impl<T: Debug> MyMarker for T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error\n "}, {"sha": "489abf715ded9a7c28c46ffe173172bcd3e4d4e1", "filename": "src/test/ui/issue-19498.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-19498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-19498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0255]: the name `A` is defined multiple times\n    |     ------- previous import of the module `A` here\n 12 | use self::B;\n 13 | mod A {} //~ ERROR the name `A` is defined multiple times\n-   | ^^^^^^^^ `A` redefined here\n+   | ^^^^^ `A` redefined here\n    |\n    = note: `A` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n@@ -20,7 +20,7 @@ error[E0255]: the name `B` is defined multiple times\n    |     ------- previous import of the module `B` here\n ...\n 15 | pub mod B {} //~ ERROR the name `B` is defined multiple times\n-   | ^^^^^^^^^^^^ `B` redefined here\n+   | ^^^^^^^^^ `B` redefined here\n    |\n    = note: `B` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n@@ -34,7 +34,7 @@ error[E0255]: the name `D` is defined multiple times\n 18 |     use C::D;\n    |         ---- previous import of the module `D` here\n 19 |     mod D {} //~ ERROR the name `D` is defined multiple times\n-   |     ^^^^^^^^ `D` redefined here\n+   |     ^^^^^ `D` redefined here\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import"}, {"sha": "ec953103a1c5726743d8d59ac83a937418d10a7b", "filename": "src/test/ui/issue-21546.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-21546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-21546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21546.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,7 +2,7 @@ error[E0428]: the name `Foo` is defined multiple times\n   --> $DIR/issue-21546.rs:17:1\n    |\n 14 | mod Foo { }\n-   | ----------- previous definition of the module `Foo` here\n+   | ------- previous definition of the module `Foo` here\n ...\n 17 | struct Foo;\n    | ^^^^^^^^^^^ `Foo` redefined here\n@@ -13,7 +13,7 @@ error[E0428]: the name `Bar` is defined multiple times\n   --> $DIR/issue-21546.rs:24:1\n    |\n 21 | mod Bar { }\n-   | ----------- previous definition of the module `Bar` here\n+   | ------- previous definition of the module `Bar` here\n ...\n 24 | struct Bar(i32);\n    | ^^^^^^^^^^^^^^^^ `Bar` redefined here\n@@ -27,18 +27,18 @@ error[E0428]: the name `Baz` is defined multiple times\n    | ---------------- previous definition of the type `Baz` here\n ...\n 32 | mod Baz { }\n-   | ^^^^^^^^^^^ `Baz` redefined here\n+   | ^^^^^^^ `Baz` redefined here\n    |\n    = note: `Baz` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Qux` is defined multiple times\n   --> $DIR/issue-21546.rs:40:1\n    |\n 37 | struct Qux { x: bool }\n-   | ---------------------- previous definition of the type `Qux` here\n+   | ---------- previous definition of the type `Qux` here\n ...\n 40 | mod Qux { }\n-   | ^^^^^^^^^^^ `Qux` redefined here\n+   | ^^^^^^^ `Qux` redefined here\n    |\n    = note: `Qux` must be defined only once in the type namespace of this module\n \n@@ -49,18 +49,18 @@ error[E0428]: the name `Quux` is defined multiple times\n    | ------------ previous definition of the type `Quux` here\n ...\n 48 | mod Quux { }\n-   | ^^^^^^^^^^^^ `Quux` redefined here\n+   | ^^^^^^^^ `Quux` redefined here\n    |\n    = note: `Quux` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Corge` is defined multiple times\n   --> $DIR/issue-21546.rs:56:1\n    |\n 53 | enum Corge { A, B }\n-   | ------------------- previous definition of the type `Corge` here\n+   | ---------- previous definition of the type `Corge` here\n ...\n 56 | mod Corge { }\n-   | ^^^^^^^^^^^^^ `Corge` redefined here\n+   | ^^^^^^^^^ `Corge` redefined here\n    |\n    = note: `Corge` must be defined only once in the type namespace of this module\n "}, {"sha": "969cf3577fbc28f28675b6021bac6f12f4cb3ae9", "filename": "src/test/ui/issue-24081.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-24081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-24081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -20,7 +20,7 @@ error[E0255]: the name `Sub` is defined multiple times\n    |     ------------- previous import of the trait `Sub` here\n ...\n 19 | struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n-   | ^^^^^^^^^^^^^^^^^^^^^ `Sub` redefined here\n+   | ^^^^^^^^^^ `Sub` redefined here\n    |\n    = note: `Sub` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n@@ -35,7 +35,7 @@ error[E0255]: the name `Mul` is defined multiple times\n    |     ------------- previous import of the trait `Mul` here\n ...\n 21 | enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n-   | ^^^^^^^^^^^^^^^^^ `Mul` redefined here\n+   | ^^^^^^^^ `Mul` redefined here\n    |\n    = note: `Mul` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n@@ -50,7 +50,7 @@ error[E0255]: the name `Div` is defined multiple times\n    |     ------------- previous import of the trait `Div` here\n ...\n 23 | mod Div { } //~ ERROR the name `Div` is defined multiple times\n-   | ^^^^^^^^^^^ `Div` redefined here\n+   | ^^^^^^^ `Div` redefined here\n    |\n    = note: `Div` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n@@ -65,7 +65,7 @@ error[E0255]: the name `Rem` is defined multiple times\n    |     ------------- previous import of the trait `Rem` here\n ...\n 25 | trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n-   | ^^^^^^^^^^^^^^ `Rem` redefined here\n+   | ^^^^^^^^^ `Rem` redefined here\n    |\n    = note: `Rem` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import"}, {"sha": "61717ee60ff309a8d31a1c4902ef54d988d230ab", "filename": "src/test/ui/issue-28568.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,16 +1,11 @@\n error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`:\n   --> $DIR/issue-28568.rs:17:1\n    |\n-13 | / impl Drop for MyStruct {\n-14 | |     fn drop(&mut self) { }\n-15 | | }\n-   | |_- first implementation here\n-16 | \n-17 | / impl Drop for MyStruct {\n-18 | | //~^ ERROR conflicting implementations of trait\n-19 | |     fn drop(&mut self) { }\n-20 | | }\n-   | |_^ conflicting implementation for `MyStruct`\n+13 | impl Drop for MyStruct {\n+   | ---------------------- first implementation here\n+...\n+17 | impl Drop for MyStruct {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyStruct`\n \n error: aborting due to previous error\n "}, {"sha": "8c34cc4b73cfb63f023dc2081be628fd6bea9680", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.stderr", "status": "modified", "additions": 15, "deletions": 52, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,72 +1,35 @@\n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:17:13\n    |\n-17 | /             unsafe { //~ ERROR unnecessary `unsafe`\n-18 | |                 v.set_len(24);\n-19 | |                 |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n-20 | |                     w.set_len(32);\n-21 | |                 } };\n-22 | |             }\n-   | |_____________^ unnecessary `unsafe` block\n+15 |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+16 |         let f = |v: &mut Vec<_>| {\n+17 |             unsafe { //~ ERROR unnecessary `unsafe`\n+   |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: lint level defined here\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:11:8\n    |\n 11 | #[deny(unused_unsafe)]\n    |        ^^^^^^^^^^^^^\n-note: because it's nested under this `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:15:5\n-   |\n-15 | /     unsafe {\n-16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n-18 | |                 v.set_len(24);\n-...  |\n-29 | |         f(&mut v);\n-30 | |     }\n-   | |_____^\n \n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:19:38\n    |\n-19 |                   |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n-   |  ______________________________________^\n-20 | |                     w.set_len(32);\n-21 | |                 } };\n-   | |_________________^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:15:5\n-   |\n-15 | /     unsafe {\n-16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n-18 | |                 v.set_len(24);\n-...  |\n-29 | |         f(&mut v);\n-30 | |     }\n-   | |_____^\n+15 |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+...\n+19 |                 |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n+   |                                      ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:23:34\n    |\n-23 |               |x: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n-   |  __________________________________^\n-24 | |                 x.set_len(40);\n-25 | |             } };\n-   | |_____________^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:15:5\n-   |\n-15 | /     unsafe {\n-16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n-18 | |                 v.set_len(24);\n-...  |\n-29 | |         f(&mut v);\n-30 | |     }\n-   | |_____^\n+15 |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+...\n+23 |             |x: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n+   |                                  ^^^^^^ unnecessary `unsafe` block\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f6f97654b57fd5709b9c764fa27ebb18bd4909ed", "filename": "src/test/ui/lint-unconditional-recursion.stderr", "status": "modified", "additions": 64, "deletions": 147, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,239 +1,156 @@\n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:14:1\n    |\n-14 | / fn foo() { //~ ERROR function cannot return without recurring\n-15 | |     foo();\n-16 | | }\n-   | |_^\n+14 | fn foo() { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^ cannot return without recurring\n+15 |     foo();\n+   |     ----- recursive call site\n    |\n note: lint level defined here\n   --> $DIR/lint-unconditional-recursion.rs:11:9\n    |\n 11 | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:15:5\n-   |\n-15 |     foo();\n-   |     ^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:24:1\n    |\n-24 | / fn baz() { //~ ERROR function cannot return without recurring\n-25 | |     if true {\n-26 | |         baz()\n-27 | |     } else {\n-28 | |         baz()\n-29 | |     }\n-30 | | }\n-   | |_^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:26:9\n-   |\n+24 | fn baz() { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^ cannot return without recurring\n+25 |     if true {\n 26 |         baz()\n-   |         ^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:28:9\n-   |\n+   |         ----- recursive call site\n+27 |     } else {\n 28 |         baz()\n-   |         ^^^^^\n+   |         ----- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:36:1\n    |\n-36 | / fn quz() -> bool { //~ ERROR function cannot return without recurring\n-37 | |     if true {\n-38 | |         while quz() {}\n-39 | |         true\n-...  |\n-42 | |     }\n-43 | | }\n-   | |_^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:38:15\n-   |\n+36 | fn quz() -> bool { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^^^^^^^^^ cannot return without recurring\n+37 |     if true {\n 38 |         while quz() {}\n-   |               ^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:41:16\n-   |\n+   |               ----- recursive call site\n+...\n 41 |         loop { quz(); }\n-   |                ^^^^^\n+   |                ----- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:47:5\n    |\n-47 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-48 | |         self.bar()\n-49 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:48:9\n-   |\n+47 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 48 |         self.bar()\n-   |         ^^^^^^^^^^\n+   |         ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:53:5\n    |\n-53 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-54 | |         loop {\n-55 | |             self.bar()\n-56 | |         }\n-57 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:55:13\n-   |\n+53 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n+54 |         loop {\n 55 |             self.bar()\n-   |             ^^^^^^^^^^\n+   |             ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:62:5\n    |\n-62 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-63 | |         0.bar()\n-64 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:63:9\n-   |\n+62 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 63 |         0.bar()\n-   |         ^^^^^^^\n+   |         ------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:75:5\n    |\n-75 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-76 | |         Foo2::bar(self)\n-77 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:76:9\n-   |\n+75 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 76 |         Foo2::bar(self)\n-   |         ^^^^^^^^^^^^^^^\n+   |         --------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:81:5\n    |\n-81 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-82 | |         loop {\n-83 | |             Foo2::bar(self)\n-84 | |         }\n-85 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:83:13\n-   |\n+81 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n+82 |         loop {\n 83 |             Foo2::bar(self)\n-   |             ^^^^^^^^^^^^^^^\n+   |             --------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:91:5\n    |\n-91 | /     fn qux(&self) { //~ ERROR function cannot return without recurring\n-92 | |         self.qux();\n-93 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:92:9\n-   |\n+91 |     fn qux(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 92 |         self.qux();\n-   |         ^^^^^^^^^^\n+   |         ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:96:5\n    |\n-96 | /     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-97 | |         Baz::as_ref(self)\n-98 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:97:9\n-   |\n+96 |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 97 |         Baz::as_ref(self)\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ----------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:103:5\n     |\n-103 | /     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-104 | |         let x = Default::default();\n-105 | |         x\n-106 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:104:17\n-    |\n+103 |     fn default() -> Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 104 |         let x = Default::default();\n-    |                 ^^^^^^^^^^^^^^^^^^\n+    |                 ------------------ recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:112:5\n     |\n-112 | /     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-113 | |         &**self\n-114 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:113:10\n-    |\n+112 |     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 113 |         &**self\n-    |          ^^^^^^\n+    |          ------ recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:119:5\n     |\n-119 | /     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-120 | |         &self[x]\n-121 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:120:10\n-    |\n+119 |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 120 |         &self[x]\n-    |          ^^^^^^^\n+    |          ------- recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:128:5\n     |\n-128 | /     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-129 | |         self.as_ref()\n-130 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:129:9\n-    |\n+128 |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 129 |         self.as_ref()\n-    |         ^^^^\n+    |         ---- recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: aborting due to 14 previous errors"}, {"sha": "03ef66681e4404f35980d00429d34fccc3f241a5", "filename": "src/test/ui/resolve-conflict-item-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -5,7 +5,7 @@ error[E0255]: the name `transmute` is defined multiple times\n    |     ------------------- previous import of the value `transmute` here\n 12 | \n 13 | fn transmute() {}\n-   | ^^^^^^^^^^^^^^^^^ `transmute` redefined here\n+   | ^^^^^^^^^^^^^^ `transmute` redefined here\n    |\n    = note: `transmute` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import"}, {"sha": "8a8b104098e404adbc909761962d8100421a5a75", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 22, "deletions": 65, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,7 +2,7 @@ error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:26:13\n    |\n 26 | fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n-   |             ^^^^^^^^^ unnecessary `unsafe` block\n+   |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: lint level defined here\n   --> $DIR/lint-unused-unsafe.rs:14:9\n@@ -14,97 +14,54 @@ error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:27:13\n    |\n 27 | fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n-   |             ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+   |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:28:20\n    |\n 28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n-   |                    ^^^^^^^^^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` fn\n-  --> $DIR/lint-unused-unsafe.rs:28:1\n-   |\n-28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------   ^^^^^^ unnecessary `unsafe` block\n+   | |\n+   | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:29:13\n    |\n 29 | fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+   |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:30:20\n    |\n 30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n-   |                    ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` fn\n-  --> $DIR/lint-unused-unsafe.rs:30:1\n-   |\n-30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------   ^^^^^^ unnecessary `unsafe` block\n+   | |\n+   | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:33:9\n    |\n-33 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-34 | |             unsf()\n-35 | |         }\n-   | |_________^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:32:5\n-   |\n-32 | /     unsafe {                             // don't put the warning here\n-33 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-34 | |             unsf()\n-35 | |         }\n-36 | |     }\n-   | |_____^\n+32 |     unsafe {                             // don't put the warning here\n+   |     ------ because it's nested under this `unsafe` block\n+33 |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:39:5\n    |\n-39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-41 | |             unsf()\n-42 | |         }\n-43 | |     }\n-   | |_____^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` fn\n-  --> $DIR/lint-unused-unsafe.rs:38:1\n-   |\n-38 | / unsafe fn bad7() {\n-39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-41 | |             unsf()\n-42 | |         }\n-43 | |     }\n-44 | | }\n-   | |_^\n+38 | unsafe fn bad7() {\n+   | ---------------- because it's nested under this `unsafe` fn\n+39 |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+   |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:40:9\n    |\n-40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-41 | |             unsf()\n-42 | |         }\n-   | |_________^ unnecessary `unsafe` block\n-   |\n-note: because it's nested under this `unsafe` fn\n-  --> $DIR/lint-unused-unsafe.rs:38:1\n-   |\n-38 | / unsafe fn bad7() {\n-39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-41 | |             unsf()\n-42 | |         }\n-43 | |     }\n-44 | | }\n-   | |_^\n+38 | unsafe fn bad7() {\n+   | ---------------- because it's nested under this `unsafe` fn\n+39 |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |         ^^^^^^ unnecessary `unsafe` block\n \n error: aborting due to 8 previous errors\n "}, {"sha": "6ff261c696d30fab7bdcdee9e179da566cea1113", "filename": "src/test/ui/specialization-feature-gate-overlap.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -1,15 +1,11 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n   --> $DIR/specialization-feature-gate-overlap.rs:23:1\n    |\n-19 | / impl<T> Foo for T {\n-20 | |     fn foo(&self) {}\n-21 | | }\n-   | |_- first implementation here\n-22 | \n-23 | / impl Foo for u8 { //~ ERROR E0119\n-24 | |     fn foo(&self) {}\n-25 | | }\n-   | |_^ conflicting implementation for `u8`\n+19 | impl<T> Foo for T {\n+   | ----------------- first implementation here\n+...\n+23 | impl Foo for u8 { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n error: aborting due to previous error\n "}, {"sha": "2c16c5b619a8bd387371e5616b18896e3b4f46ea", "filename": "src/test/ui/unboxed-closures-infer-fn-once-move-from-projection.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093/src%2Ftest%2Fui%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures-infer-fn-once-move-from-projection.stderr?ref=c8b94c6aa1bdee2fb6371e3f445f0abbba7c5093", "patch": "@@ -2,15 +2,12 @@ error[E0525]: expected a closure that implements the `Fn` trait, but this closur\n   --> $DIR/unboxed-closures-infer-fn-once-move-from-projection.rs:24:13\n    |\n 24 |     let c = || drop(y.0); //~ ERROR expected a closure that implements the `Fn` trait\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^^^-^^^\n+   |             |       |\n+   |             |       closure is `FnOnce` because it moves the variable `y` out of its environment\n+   |             this closure implements `FnOnce`, not `Fn`\n 25 |     foo(c);\n    |     --- the requirement to implement `Fn` derives from here\n-   |\n-note: closure is `FnOnce` because it moves the variable `y` out of its environment\n-  --> $DIR/unboxed-closures-infer-fn-once-move-from-projection.rs:24:21\n-   |\n-24 |     let c = || drop(y.0); //~ ERROR expected a closure that implements the `Fn` trait\n-   |                     ^\n \n error: aborting due to previous error\n "}]}