{"sha": "ee882b3a4b74f8b19146008900a3971968e1a5b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlODgyYjNhNGI3NGY4YjE5MTQ2MDA4OTAwYTM5NzE5NjhlMWE1YjM=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-06T20:44:28Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-06T20:44:28Z"}, "message": "Add test cases for detecting structural recursion", "tree": {"sha": "9a90385840f79b9183f685f48afc51cf1c6449b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a90385840f79b9183f685f48afc51cf1c6449b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee882b3a4b74f8b19146008900a3971968e1a5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee882b3a4b74f8b19146008900a3971968e1a5b3", "html_url": "https://github.com/rust-lang/rust/commit/ee882b3a4b74f8b19146008900a3971968e1a5b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee882b3a4b74f8b19146008900a3971968e1a5b3/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309710dece0cfb247938ff772dc84f37ffc71af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/309710dece0cfb247938ff772dc84f37ffc71af3", "html_url": "https://github.com/rust-lang/rust/commit/309710dece0cfb247938ff772dc84f37ffc71af3"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "f3b72c5df7f70b2617ddbe530bf235ebf0204fe7", "filename": "src/test/ui/issues/issue-74224.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-74224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-74224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74224.rs?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,11 @@\n+struct A<T> {\n+//~^ ERROR recursive type `A` has infinite size\n+    x: T,\n+    y: A<A<T>>,\n+}\n+\n+struct B {\n+    z: A<usize>\n+}\n+\n+fn main() {}"}, {"sha": "d61ab1952f9f1452acfe37cf5d31df7a8285952b", "filename": "src/test/ui/issues/issue-74224.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-74224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-74224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74224.stderr?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `A` has infinite size\n+  --> $DIR/issue-74224.rs:1:1\n+   |\n+LL | struct A<T> {\n+   | ^^^^^^^^^^^ recursive type has infinite size\n+...\n+LL |     y: A<A<T>>,\n+   |        ------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `A` representable\n+   |\n+LL |     y: Box<A<A<T>>>,\n+   |        ^^^^       ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "4c356af3eb8a3244eeb5c534c7a37ee522a76291", "filename": "src/test/ui/issues/issue-84611.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-84611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-84611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-84611.rs?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,11 @@\n+struct Foo<T> {\n+//~^ ERROR recursive type `Foo` has infinite size\n+    x: Foo<[T; 1]>,\n+    y: T,\n+}\n+\n+struct Bar {\n+    x: Foo<Bar>,\n+}\n+\n+fn main() {}"}, {"sha": "0a898e5c46dbefcf0e06c6afad4f8a2377c203b8", "filename": "src/test/ui/issues/issue-84611.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-84611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fissues%2Fissue-84611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-84611.stderr?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `Foo` has infinite size\n+  --> $DIR/issue-84611.rs:1:1\n+   |\n+LL | struct Foo<T> {\n+   | ^^^^^^^^^^^^^ recursive type has infinite size\n+LL |\n+LL |     x: Foo<[T; 1]>,\n+   |        ----------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL |     x: Box<Foo<[T; 1]>>,\n+   |        ^^^^           ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "cca97f43effc399c80b85c8f6554deaae2ff0301", "filename": "src/test/ui/mutual-struct-recursion.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fmutual-struct-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fmutual-struct-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutual-struct-recursion.rs?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,23 @@\n+struct A<T> {\n+//~^ ERROR recursive type `A` has infinite size\n+    x: T,\n+    y: B<T>,\n+}\n+\n+struct B<T> {\n+//~^ ERROR recursive type `B` has infinite size\n+    z: A<T>\n+}\n+\n+struct C<T> {\n+//~^ ERROR recursive type `C` has infinite size\n+    x: T,\n+    y: Option<Option<D<T>>>,\n+}\n+\n+struct D<T> {\n+//~^ ERROR recursive type `D` has infinite size\n+    z: Option<Option<C<T>>>,\n+}\n+\n+fn main() {}"}, {"sha": "efc4ba93f0a2bdf147c366ec149fbaac3949313b", "filename": "src/test/ui/mutual-struct-recursion.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fmutual-struct-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee882b3a4b74f8b19146008900a3971968e1a5b3/src%2Ftest%2Fui%2Fmutual-struct-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutual-struct-recursion.stderr?ref=ee882b3a4b74f8b19146008900a3971968e1a5b3", "patch": "@@ -0,0 +1,59 @@\n+error[E0072]: recursive type `A` has infinite size\n+  --> $DIR/mutual-struct-recursion.rs:1:1\n+   |\n+LL | struct A<T> {\n+   | ^^^^^^^^^^^ recursive type has infinite size\n+...\n+LL |     y: B<T>,\n+   |        ---- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `A` representable\n+   |\n+LL |     y: Box<B<T>>,\n+   |        ^^^^    ^\n+\n+error[E0072]: recursive type `B` has infinite size\n+  --> $DIR/mutual-struct-recursion.rs:7:1\n+   |\n+LL | struct B<T> {\n+   | ^^^^^^^^^^^ recursive type has infinite size\n+LL |\n+LL |     z: A<T>\n+   |        ---- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `B` representable\n+   |\n+LL |     z: Box<A<T>>\n+   |        ^^^^    ^\n+\n+error[E0072]: recursive type `C` has infinite size\n+  --> $DIR/mutual-struct-recursion.rs:12:1\n+   |\n+LL | struct C<T> {\n+   | ^^^^^^^^^^^ recursive type has infinite size\n+...\n+LL |     y: Option<Option<D<T>>>,\n+   |        -------------------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `C` representable\n+   |\n+LL |     y: Box<Option<Option<D<T>>>>,\n+   |        ^^^^                    ^\n+\n+error[E0072]: recursive type `D` has infinite size\n+  --> $DIR/mutual-struct-recursion.rs:18:1\n+   |\n+LL | struct D<T> {\n+   | ^^^^^^^^^^^ recursive type has infinite size\n+LL |\n+LL |     z: Option<Option<C<T>>>,\n+   |        -------------------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `D` representable\n+   |\n+LL |     z: Box<Option<Option<C<T>>>>,\n+   |        ^^^^                    ^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0072`."}]}