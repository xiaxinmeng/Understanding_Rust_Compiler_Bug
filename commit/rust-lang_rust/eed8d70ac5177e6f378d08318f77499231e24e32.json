{"sha": "eed8d70ac5177e6f378d08318f77499231e24e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDhkNzBhYzUxNzdlNmYzNzhkMDgzMThmNzc0OTkyMzFlMjRlMzI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-09T07:59:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-10T04:58:09Z"}, "message": "Give lowering functions mutable access to the lowering context", "tree": {"sha": "684ae87986bd45c4a18c62cfed85f7f486042c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684ae87986bd45c4a18c62cfed85f7f486042c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed8d70ac5177e6f378d08318f77499231e24e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed8d70ac5177e6f378d08318f77499231e24e32", "html_url": "https://github.com/rust-lang/rust/commit/eed8d70ac5177e6f378d08318f77499231e24e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed8d70ac5177e6f378d08318f77499231e24e32/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417fe6d16e981c01bf258cd8b47a812bfb33723d", "url": "https://api.github.com/repos/rust-lang/rust/commits/417fe6d16e981c01bf258cd8b47a812bfb33723d", "html_url": "https://github.com/rust-lang/rust/commit/417fe6d16e981c01bf258cd8b47a812bfb33723d"}], "stats": {"total": 305, "additions": 152, "deletions": 153}, "files": [{"sha": "dc4ed655c9b88c7cbf133029922797a8d9769592", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 140, "deletions": 141, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=eed8d70ac5177e6f378d08318f77499231e24e32", "patch": "@@ -57,17 +57,15 @@ use syntax::parse::token;\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n \n-use std::cell::{Cell, RefCell};\n-\n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n     id_assigner: &'a NodeIdAssigner,\n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n-    parent_def: Cell<Option<DefIndex>>,\n-    resolver: RefCell<&'a mut Resolver>,\n+    parent_def: Option<DefIndex>,\n+    resolver: &'a mut Resolver,\n }\n \n pub trait Resolver {\n@@ -111,8 +109,8 @@ impl<'a> LoweringContext<'a> {\n         LoweringContext {\n             crate_root: crate_root,\n             id_assigner: id_assigner,\n-            parent_def: Cell::new(None),\n-            resolver: RefCell::new(resolver),\n+            parent_def: None,\n+            resolver: resolver,\n         }\n     }\n \n@@ -124,32 +122,34 @@ impl<'a> LoweringContext<'a> {\n         hir::Ident::from_name(token::gensym(s))\n     }\n \n-    fn with_parent_def<T, F: FnOnce() -> T>(&self, parent_id: NodeId, f: F) -> T {\n-        let old_def = self.parent_def.get();\n-        self.parent_def.set(match self.resolver.borrow_mut().definitions() {\n+    fn with_parent_def<T, F>(&mut self, parent_id: NodeId, f: F) -> T\n+        where F: FnOnce(&mut LoweringContext) -> T\n+    {\n+        let old_def = self.parent_def;\n+        self.parent_def = match self.resolver.definitions() {\n             Some(defs) => Some(defs.opt_def_index(parent_id).unwrap()),\n             None => old_def,\n-        });\n+        };\n \n-        let result = f();\n+        let result = f(self);\n \n-        self.parent_def.set(old_def);\n+        self.parent_def = old_def;\n         result\n     }\n }\n \n-pub fn lower_ident(_lctx: &LoweringContext, ident: Ident) -> hir::Ident {\n+pub fn lower_ident(_lctx: &mut LoweringContext, ident: Ident) -> hir::Ident {\n     hir::Ident {\n         name: mtwt::resolve(ident),\n         unhygienic_name: ident.name,\n     }\n }\n \n-pub fn lower_attrs(_lctx: &LoweringContext, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n+pub fn lower_attrs(_lctx: &mut LoweringContext, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n     attrs.clone().into()\n }\n \n-pub fn lower_view_path(lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n+pub fn lower_view_path(lctx: &mut LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n     P(Spanned {\n         node: match view_path.node {\n             ViewPathSimple(ident, ref path) => {\n@@ -186,7 +186,7 @@ fn lower_path_list_item(path_list_ident: &PathListItem) -> hir::PathListItem {\n     }\n }\n \n-pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n+pub fn lower_arm(lctx: &mut LoweringContext, arm: &Arm) -> hir::Arm {\n     hir::Arm {\n         attrs: lower_attrs(lctx, &arm.attrs),\n         pats: arm.pats.iter().map(|x| lower_pat(lctx, x)).collect(),\n@@ -195,7 +195,7 @@ pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n     }\n }\n \n-pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n+pub fn lower_decl(lctx: &mut LoweringContext, d: &Decl) -> P<hir::Decl> {\n     match d.node {\n         DeclKind::Local(ref l) => P(Spanned {\n             node: hir::DeclLocal(lower_local(lctx, l)),\n@@ -208,7 +208,7 @@ pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n     }\n }\n \n-pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> hir::TypeBinding {\n+pub fn lower_ty_binding(lctx: &mut LoweringContext, b: &TypeBinding) -> hir::TypeBinding {\n     hir::TypeBinding {\n         id: b.id,\n         name: b.ident.name,\n@@ -217,7 +217,7 @@ pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> hir::TypeBin\n     }\n }\n \n-pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n+pub fn lower_ty(lctx: &mut LoweringContext, t: &Ty) -> P<hir::Ty> {\n     use syntax::ast::TyKind::*;\n     P(hir::Ty {\n         id: t.id,\n@@ -267,14 +267,14 @@ pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n     })\n }\n \n-pub fn lower_foreign_mod(lctx: &LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n+pub fn lower_foreign_mod(lctx: &mut LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n     hir::ForeignMod {\n         abi: fm.abi,\n         items: fm.items.iter().map(|x| lower_foreign_item(lctx, x)).collect(),\n     }\n }\n \n-pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> hir::Variant {\n+pub fn lower_variant(lctx: &mut LoweringContext, v: &Variant) -> hir::Variant {\n     Spanned {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n@@ -289,7 +289,7 @@ pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> hir::Variant {\n // Path segments are usually unhygienic, hygienic path segments can occur only in\n // identifier-like paths originating from `ExprPath`.\n // Make life simpler for rustc_resolve by renaming only such segments.\n-pub fn lower_path_full(lctx: &LoweringContext, p: &Path, maybe_hygienic: bool) -> hir::Path {\n+pub fn lower_path_full(lctx: &mut LoweringContext, p: &Path, maybe_hygienic: bool) -> hir::Path {\n     let maybe_hygienic = maybe_hygienic && !p.global && p.segments.len() == 1;\n     hir::Path {\n         global: p.global,\n@@ -310,11 +310,11 @@ pub fn lower_path_full(lctx: &LoweringContext, p: &Path, maybe_hygienic: bool) -\n     }\n }\n \n-pub fn lower_path(lctx: &LoweringContext, p: &Path) -> hir::Path {\n+pub fn lower_path(lctx: &mut LoweringContext, p: &Path) -> hir::Path {\n     lower_path_full(lctx, p, false)\n }\n \n-pub fn lower_path_parameters(lctx: &LoweringContext,\n+pub fn lower_path_parameters(lctx: &mut LoweringContext,\n                              path_parameters: &PathParameters)\n                              -> hir::PathParameters {\n     match *path_parameters {\n@@ -325,7 +325,7 @@ pub fn lower_path_parameters(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_angle_bracketed_parameter_data(lctx: &LoweringContext,\n+pub fn lower_angle_bracketed_parameter_data(lctx: &mut LoweringContext,\n                                             data: &AngleBracketedParameterData)\n                                             -> hir::AngleBracketedParameterData {\n     let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings } = data;\n@@ -336,7 +336,7 @@ pub fn lower_angle_bracketed_parameter_data(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_parenthesized_parameter_data(lctx: &LoweringContext,\n+pub fn lower_parenthesized_parameter_data(lctx: &mut LoweringContext,\n                                           data: &ParenthesizedParameterData)\n                                           -> hir::ParenthesizedParameterData {\n     let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n@@ -347,7 +347,7 @@ pub fn lower_parenthesized_parameter_data(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_local(lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n+pub fn lower_local(lctx: &mut LoweringContext, l: &Local) -> P<hir::Local> {\n     P(hir::Local {\n         id: l.id,\n         ty: l.ty.as_ref().map(|t| lower_ty(lctx, t)),\n@@ -358,7 +358,7 @@ pub fn lower_local(lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n     })\n }\n \n-pub fn lower_explicit_self_underscore(lctx: &LoweringContext,\n+pub fn lower_explicit_self_underscore(lctx: &mut LoweringContext,\n                                       es: &SelfKind)\n                                       -> hir::ExplicitSelf_ {\n     match *es {\n@@ -375,29 +375,29 @@ pub fn lower_explicit_self_underscore(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_mutability(_lctx: &LoweringContext, m: Mutability) -> hir::Mutability {\n+pub fn lower_mutability(_lctx: &mut LoweringContext, m: Mutability) -> hir::Mutability {\n     match m {\n         Mutability::Mutable => hir::MutMutable,\n         Mutability::Immutable => hir::MutImmutable,\n     }\n }\n \n-pub fn lower_explicit_self(lctx: &LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n+pub fn lower_explicit_self(lctx: &mut LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n     Spanned {\n         node: lower_explicit_self_underscore(lctx, &s.node),\n         span: s.span,\n     }\n }\n \n-pub fn lower_arg(lctx: &LoweringContext, arg: &Arg) -> hir::Arg {\n+pub fn lower_arg(lctx: &mut LoweringContext, arg: &Arg) -> hir::Arg {\n     hir::Arg {\n         id: arg.id,\n         pat: lower_pat(lctx, &arg.pat),\n         ty: lower_ty(lctx, &arg.ty),\n     }\n }\n \n-pub fn lower_fn_decl(lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n+pub fn lower_fn_decl(lctx: &mut LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     P(hir::FnDecl {\n         inputs: decl.inputs.iter().map(|x| lower_arg(lctx, x)).collect(),\n         output: match decl.output {\n@@ -409,7 +409,7 @@ pub fn lower_fn_decl(lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     })\n }\n \n-pub fn lower_ty_param_bound(lctx: &LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n+pub fn lower_ty_param_bound(lctx: &mut LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ref ty, modifier) => {\n             hir::TraitTyParamBound(lower_poly_trait_ref(lctx, ty),\n@@ -421,7 +421,7 @@ pub fn lower_ty_param_bound(lctx: &LoweringContext, tpb: &TyParamBound) -> hir::\n     }\n }\n \n-pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n+pub fn lower_ty_param(lctx: &mut LoweringContext, tp: &TyParam) -> hir::TyParam {\n     hir::TyParam {\n         id: tp.id,\n         name: tp.ident.name,\n@@ -431,52 +431,53 @@ pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n     }\n }\n \n-pub fn lower_ty_params(lctx: &LoweringContext,\n+pub fn lower_ty_params(lctx: &mut LoweringContext,\n                        tps: &P<[TyParam]>)\n                        -> hir::HirVec<hir::TyParam> {\n     tps.iter().map(|tp| lower_ty_param(lctx, tp)).collect()\n }\n \n-pub fn lower_lifetime(_lctx: &LoweringContext, l: &Lifetime) -> hir::Lifetime {\n+pub fn lower_lifetime(_lctx: &mut LoweringContext, l: &Lifetime) -> hir::Lifetime {\n     hir::Lifetime {\n         id: l.id,\n         name: l.name,\n         span: l.span,\n     }\n }\n \n-pub fn lower_lifetime_def(lctx: &LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n+pub fn lower_lifetime_def(lctx: &mut LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n     hir::LifetimeDef {\n         lifetime: lower_lifetime(lctx, &l.lifetime),\n         bounds: lower_lifetimes(lctx, &l.bounds),\n     }\n }\n \n-pub fn lower_lifetimes(lctx: &LoweringContext, lts: &Vec<Lifetime>) -> hir::HirVec<hir::Lifetime> {\n+pub fn lower_lifetimes(lctx: &mut LoweringContext, lts: &Vec<Lifetime>)\n+                       -> hir::HirVec<hir::Lifetime> {\n     lts.iter().map(|l| lower_lifetime(lctx, l)).collect()\n }\n \n-pub fn lower_lifetime_defs(lctx: &LoweringContext,\n+pub fn lower_lifetime_defs(lctx: &mut LoweringContext,\n                            lts: &Vec<LifetimeDef>)\n                            -> hir::HirVec<hir::LifetimeDef> {\n     lts.iter().map(|l| lower_lifetime_def(lctx, l)).collect()\n }\n \n-pub fn lower_opt_lifetime(lctx: &LoweringContext,\n+pub fn lower_opt_lifetime(lctx: &mut LoweringContext,\n                           o_lt: &Option<Lifetime>)\n                           -> Option<hir::Lifetime> {\n     o_lt.as_ref().map(|lt| lower_lifetime(lctx, lt))\n }\n \n-pub fn lower_generics(lctx: &LoweringContext, g: &Generics) -> hir::Generics {\n+pub fn lower_generics(lctx: &mut LoweringContext, g: &Generics) -> hir::Generics {\n     hir::Generics {\n         ty_params: lower_ty_params(lctx, &g.ty_params),\n         lifetimes: lower_lifetime_defs(lctx, &g.lifetimes),\n         where_clause: lower_where_clause(lctx, &g.where_clause),\n     }\n }\n \n-pub fn lower_where_clause(lctx: &LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n+pub fn lower_where_clause(lctx: &mut LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n     hir::WhereClause {\n         id: wc.id,\n         predicates: wc.predicates\n@@ -486,7 +487,7 @@ pub fn lower_where_clause(lctx: &LoweringContext, wc: &WhereClause) -> hir::Wher\n     }\n }\n \n-pub fn lower_where_predicate(lctx: &LoweringContext,\n+pub fn lower_where_predicate(lctx: &mut LoweringContext,\n                              pred: &WherePredicate)\n                              -> hir::WherePredicate {\n     match *pred {\n@@ -524,7 +525,7 @@ pub fn lower_where_predicate(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::VariantData {\n+pub fn lower_variant_data(lctx: &mut LoweringContext, vdata: &VariantData) -> hir::VariantData {\n     match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n@@ -544,22 +545,22 @@ pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::V\n     }\n }\n \n-pub fn lower_trait_ref(lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef {\n+pub fn lower_trait_ref(lctx: &mut LoweringContext, p: &TraitRef) -> hir::TraitRef {\n     hir::TraitRef {\n         path: lower_path(lctx, &p.path),\n         ref_id: p.ref_id,\n     }\n }\n \n-pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n+pub fn lower_poly_trait_ref(lctx: &mut LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n     hir::PolyTraitRef {\n         bound_lifetimes: lower_lifetime_defs(lctx, &p.bound_lifetimes),\n         trait_ref: lower_trait_ref(lctx, &p.trait_ref),\n         span: p.span,\n     }\n }\n \n-pub fn lower_struct_field(lctx: &LoweringContext,\n+pub fn lower_struct_field(lctx: &mut LoweringContext,\n                           (index, f): (usize, &StructField))\n                           -> hir::StructField {\n     hir::StructField {\n@@ -572,26 +573,26 @@ pub fn lower_struct_field(lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_field(lctx: &LoweringContext, f: &Field) -> hir::Field {\n+pub fn lower_field(lctx: &mut LoweringContext, f: &Field) -> hir::Field {\n     hir::Field {\n         name: respan(f.ident.span, f.ident.node.name),\n         expr: lower_expr(lctx, &f.expr),\n         span: f.span,\n     }\n }\n \n-pub fn lower_mt(lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy {\n+pub fn lower_mt(lctx: &mut LoweringContext, mt: &MutTy) -> hir::MutTy {\n     hir::MutTy {\n         ty: lower_ty(lctx, &mt.ty),\n         mutbl: lower_mutability(lctx, mt.mutbl),\n     }\n }\n \n-fn lower_bounds(lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds {\n+fn lower_bounds(lctx: &mut LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds {\n     bounds.iter().map(|bound| lower_ty_param_bound(lctx, bound)).collect()\n }\n \n-pub fn lower_block(lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n+pub fn lower_block(lctx: &mut LoweringContext, b: &Block) -> P<hir::Block> {\n     P(hir::Block {\n         id: b.id,\n         stmts: b.stmts.iter().map(|s| lower_stmt(lctx, s)).collect(),\n@@ -601,7 +602,7 @@ pub fn lower_block(lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n     })\n }\n \n-pub fn lower_item_kind(lctx: &LoweringContext, i: &ItemKind) -> hir::Item_ {\n+pub fn lower_item_kind(lctx: &mut LoweringContext, i: &ItemKind) -> hir::Item_ {\n     match *i {\n         ItemKind::ExternCrate(string) => hir::ItemExternCrate(string),\n         ItemKind::Use(ref view_path) => {\n@@ -669,8 +670,8 @@ pub fn lower_item_kind(lctx: &LoweringContext, i: &ItemKind) -> hir::Item_ {\n     }\n }\n \n-pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> hir::TraitItem {\n-    lctx.with_parent_def(i.id, || {\n+pub fn lower_trait_item(lctx: &mut LoweringContext, i: &TraitItem) -> hir::TraitItem {\n+    lctx.with_parent_def(i.id, |lctx| {\n         hir::TraitItem {\n             id: i.id,\n             name: i.ident.name,\n@@ -694,8 +695,8 @@ pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> hir::TraitItem\n     })\n }\n \n-pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n-    lctx.with_parent_def(i.id, || {\n+pub fn lower_impl_item(lctx: &mut LoweringContext, i: &ImplItem) -> hir::ImplItem {\n+    lctx.with_parent_def(i.id, |lctx| {\n         hir::ImplItem {\n             id: i.id,\n             name: i.ident.name,\n@@ -717,7 +718,7 @@ pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n     })\n }\n \n-pub fn lower_mod(lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n+pub fn lower_mod(lctx: &mut LoweringContext, m: &Mod) -> hir::Mod {\n     hir::Mod {\n         inner: m.inner,\n         item_ids: m.items.iter().map(|x| lower_item_id(lctx, x)).collect(),\n@@ -726,7 +727,7 @@ pub fn lower_mod(lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n \n struct ItemLowerer<'lcx, 'interner: 'lcx> {\n     items: BTreeMap<NodeId, hir::Item>,\n-    lctx: &'lcx LoweringContext<'interner>,\n+    lctx: &'lcx mut LoweringContext<'interner>,\n }\n \n impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> {\n@@ -736,7 +737,7 @@ impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> {\n     }\n }\n \n-pub fn lower_crate(lctx: &LoweringContext, c: &Crate) -> hir::Crate {\n+pub fn lower_crate(lctx: &mut LoweringContext, c: &Crate) -> hir::Crate {\n     let items = {\n         let mut item_lowerer = ItemLowerer { items: BTreeMap::new(), lctx: lctx };\n         visit::walk_crate(&mut item_lowerer, c);\n@@ -753,7 +754,7 @@ pub fn lower_crate(lctx: &LoweringContext, c: &Crate) -> hir::Crate {\n     }\n }\n \n-pub fn lower_macro_def(lctx: &LoweringContext, m: &MacroDef) -> hir::MacroDef {\n+pub fn lower_macro_def(lctx: &mut LoweringContext, m: &MacroDef) -> hir::MacroDef {\n     hir::MacroDef {\n         name: m.ident.name,\n         attrs: lower_attrs(lctx, &m.attrs),\n@@ -767,12 +768,12 @@ pub fn lower_macro_def(lctx: &LoweringContext, m: &MacroDef) -> hir::MacroDef {\n     }\n }\n \n-pub fn lower_item_id(_lctx: &LoweringContext, i: &Item) -> hir::ItemId {\n+pub fn lower_item_id(_lctx: &mut LoweringContext, i: &Item) -> hir::ItemId {\n     hir::ItemId { id: i.id }\n }\n \n-pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item {\n-    let node = lctx.with_parent_def(i.id, || {\n+pub fn lower_item(lctx: &mut LoweringContext, i: &Item) -> hir::Item {\n+    let node = lctx.with_parent_def(i.id, |lctx| {\n         lower_item_kind(lctx, &i.node)\n     });\n \n@@ -786,8 +787,8 @@ pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item {\n     }\n }\n \n-pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::ForeignItem {\n-    lctx.with_parent_def(i.id, || {\n+pub fn lower_foreign_item(lctx: &mut LoweringContext, i: &ForeignItem) -> hir::ForeignItem {\n+    lctx.with_parent_def(i.id, |lctx| {\n         hir::ForeignItem {\n             id: i.id,\n             name: i.ident.name,\n@@ -806,7 +807,7 @@ pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::Forei\n     })\n }\n \n-pub fn lower_method_sig(lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n+pub fn lower_method_sig(lctx: &mut LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n     hir::MethodSig {\n         generics: lower_generics(lctx, &sig.generics),\n         abi: sig.abi,\n@@ -817,29 +818,29 @@ pub fn lower_method_sig(lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodS\n     }\n }\n \n-pub fn lower_unsafety(_lctx: &LoweringContext, u: Unsafety) -> hir::Unsafety {\n+pub fn lower_unsafety(_lctx: &mut LoweringContext, u: Unsafety) -> hir::Unsafety {\n     match u {\n         Unsafety::Unsafe => hir::Unsafety::Unsafe,\n         Unsafety::Normal => hir::Unsafety::Normal,\n     }\n }\n \n-pub fn lower_constness(_lctx: &LoweringContext, c: Constness) -> hir::Constness {\n+pub fn lower_constness(_lctx: &mut LoweringContext, c: Constness) -> hir::Constness {\n     match c {\n         Constness::Const => hir::Constness::Const,\n         Constness::NotConst => hir::Constness::NotConst,\n     }\n }\n \n-pub fn lower_unop(_lctx: &LoweringContext, u: UnOp) -> hir::UnOp {\n+pub fn lower_unop(_lctx: &mut LoweringContext, u: UnOp) -> hir::UnOp {\n     match u {\n         UnOp::Deref => hir::UnDeref,\n         UnOp::Not => hir::UnNot,\n         UnOp::Neg => hir::UnNeg,\n     }\n }\n \n-pub fn lower_binop(_lctx: &LoweringContext, b: BinOp) -> hir::BinOp {\n+pub fn lower_binop(_lctx: &mut LoweringContext, b: BinOp) -> hir::BinOp {\n     Spanned {\n         node: match b.node {\n             BinOpKind::Add => hir::BiAdd,\n@@ -865,13 +866,13 @@ pub fn lower_binop(_lctx: &LoweringContext, b: BinOp) -> hir::BinOp {\n     }\n }\n \n-pub fn lower_pat(lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n+pub fn lower_pat(lctx: &mut LoweringContext, p: &Pat) -> P<hir::Pat> {\n     P(hir::Pat {\n         id: p.id,\n         node: match p.node {\n             PatKind::Wild => hir::PatKind::Wild,\n             PatKind::Ident(ref binding_mode, pth1, ref sub) => {\n-                lctx.with_parent_def(p.id, || {\n+                lctx.with_parent_def(p.id, |lctx| {\n                     hir::PatKind::Ident(lower_binding_mode(lctx, binding_mode),\n                                   respan(pth1.span, lower_ident(lctx, pth1.node)),\n                                   sub.as_ref().map(|x| lower_pat(lctx, x)))\n@@ -930,7 +931,7 @@ pub fn lower_pat(lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n     })\n }\n \n-pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n+pub fn lower_expr(lctx: &mut LoweringContext, e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n         id: e.id,\n         node: match e.node {\n@@ -977,17 +978,17 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 let move_val_init = [\"intrinsics\", \"move_val_init\"];\n                 let inplace_finalize = [\"ops\", \"InPlace\", \"finalize\"];\n \n-                let make_call = |lctx: &LoweringContext, p, args| {\n+                let make_call = |lctx: &mut LoweringContext, p, args| {\n                     let path = core_path(lctx, e.span, p);\n                     let path = expr_path(lctx, path, None);\n                     expr_call(lctx, e.span, path, args, None)\n                 };\n \n-                let mk_stmt_let = |lctx: &LoweringContext, bind, expr| {\n+                let mk_stmt_let = |lctx: &mut LoweringContext, bind, expr| {\n                     stmt_let(lctx, e.span, false, bind, expr, None)\n                 };\n \n-                let mk_stmt_let_mut = |lctx: &LoweringContext, bind, expr| {\n+                let mk_stmt_let_mut = |lctx: &mut LoweringContext, bind, expr| {\n                     stmt_let(lctx, e.span, true, bind, expr, None)\n                 };\n \n@@ -1145,7 +1146,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                                hir::MatchSource::Normal)\n             }\n             ExprKind::Closure(capture_clause, ref decl, ref body, fn_decl_span) => {\n-                lctx.with_parent_def(e.id, || {\n+                lctx.with_parent_def(e.id, |lctx| {\n                     hir::ExprClosure(lower_capture_clause(lctx, capture_clause),\n                                      lower_fn_decl(lctx, decl),\n                                      lower_block(lctx, body),\n@@ -1171,7 +1172,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 hir::ExprIndex(lower_expr(lctx, el), lower_expr(lctx, er))\n             }\n             ExprKind::Range(ref e1, ref e2, lims) => {\n-                fn make_struct(lctx: &LoweringContext,\n+                fn make_struct(lctx: &mut LoweringContext,\n                                ast_expr: &Expr,\n                                path: &[&str],\n                                fields: &[(&str, &P<Expr>)]) -> P<hir::Expr> {\n@@ -1187,21 +1188,19 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                                   structpath,\n                                   ast_expr.attrs.clone())\n                     } else {\n-                        expr_struct(lctx,\n-                                    ast_expr.span,\n-                                    structpath,\n-                                    fields.into_iter().map(|&(s, e)| {\n-                                        field(token::intern(s),\n-                                              signal_block_expr(lctx,\n-                                                                hir_vec![],\n-                                                                lower_expr(lctx, &**e),\n-                                                                e.span,\n-                                                                hir::PopUnstableBlock,\n-                                                                None),\n-                                              ast_expr.span)\n-                                    }).collect(),\n-                                    None,\n-                                    ast_expr.attrs.clone())\n+                        let fields = fields.into_iter().map(|&(s, e)| {\n+                            let expr = lower_expr(lctx, &e);\n+                            let signal_block = signal_block_expr(lctx,\n+                                                                 hir_vec![],\n+                                                                 expr,\n+                                                                 e.span,\n+                                                                 hir::PopUnstableBlock,\n+                                                                 None);\n+                            field(token::intern(s), signal_block, ast_expr.span)\n+                        }).collect();\n+                        let attrs = ast_expr.attrs.clone();\n+\n+                        expr_struct(lctx, ast_expr.span, structpath, fields, None, attrs)\n                     };\n \n                     signal_block_expr(lctx,\n@@ -1613,7 +1612,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     })\n }\n \n-pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt {\n+pub fn lower_stmt(lctx: &mut LoweringContext, s: &Stmt) -> hir::Stmt {\n     match s.node {\n         StmtKind::Decl(ref d, id) => {\n             Spanned {\n@@ -1637,14 +1636,14 @@ pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt {\n     }\n }\n \n-pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::CaptureClause {\n+pub fn lower_capture_clause(_lctx: &mut LoweringContext, c: CaptureBy) -> hir::CaptureClause {\n     match c {\n         CaptureBy::Value => hir::CaptureByValue,\n         CaptureBy::Ref => hir::CaptureByRef,\n     }\n }\n \n-pub fn lower_visibility(lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n+pub fn lower_visibility(lctx: &mut LoweringContext, v: &Visibility) -> hir::Visibility {\n     match *v {\n         Visibility::Public => hir::Public,\n         Visibility::Crate(_) => hir::Visibility::Crate,\n@@ -1654,42 +1653,42 @@ pub fn lower_visibility(lctx: &LoweringContext, v: &Visibility) -> hir::Visibili\n     }\n }\n \n-pub fn lower_defaultness(_lctx: &LoweringContext, d: Defaultness) -> hir::Defaultness {\n+pub fn lower_defaultness(_lctx: &mut LoweringContext, d: Defaultness) -> hir::Defaultness {\n     match d {\n         Defaultness::Default => hir::Defaultness::Default,\n         Defaultness::Final => hir::Defaultness::Final,\n     }\n }\n \n-pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n+pub fn lower_block_check_mode(lctx: &mut LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n         BlockCheckMode::Default => hir::DefaultBlock,\n         BlockCheckMode::Unsafe(u) => hir::UnsafeBlock(lower_unsafe_source(lctx, u)),\n     }\n }\n \n-pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n+pub fn lower_binding_mode(lctx: &mut LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n         BindingMode::ByRef(m) => hir::BindByRef(lower_mutability(lctx, m)),\n         BindingMode::ByValue(m) => hir::BindByValue(lower_mutability(lctx, m)),\n     }\n }\n \n-pub fn lower_unsafe_source(_lctx: &LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n+pub fn lower_unsafe_source(_lctx: &mut LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n     match u {\n         CompilerGenerated => hir::CompilerGenerated,\n         UserProvided => hir::UserProvided,\n     }\n }\n \n-pub fn lower_impl_polarity(_lctx: &LoweringContext, i: ImplPolarity) -> hir::ImplPolarity {\n+pub fn lower_impl_polarity(_lctx: &mut LoweringContext, i: ImplPolarity) -> hir::ImplPolarity {\n     match i {\n         ImplPolarity::Positive => hir::ImplPolarity::Positive,\n         ImplPolarity::Negative => hir::ImplPolarity::Negative,\n     }\n }\n \n-pub fn lower_trait_bound_modifier(_lctx: &LoweringContext,\n+pub fn lower_trait_bound_modifier(_lctx: &mut LoweringContext,\n                                   f: TraitBoundModifier)\n                                   -> hir::TraitBoundModifier {\n     match f {\n@@ -1720,12 +1719,12 @@ fn field(name: Name, expr: P<hir::Expr>, span: Span) -> hir::Field {\n     }\n }\n \n-fn expr_break(lctx: &LoweringContext, span: Span,\n+fn expr_break(lctx: &mut LoweringContext, span: Span,\n               attrs: ThinAttributes) -> P<hir::Expr> {\n     expr(lctx, span, hir::ExprBreak(None), attrs)\n }\n \n-fn expr_call(lctx: &LoweringContext,\n+fn expr_call(lctx: &mut LoweringContext,\n              span: Span,\n              e: P<hir::Expr>,\n              args: hir::HirVec<P<hir::Expr>>,\n@@ -1734,32 +1733,32 @@ fn expr_call(lctx: &LoweringContext,\n     expr(lctx, span, hir::ExprCall(e, args), attrs)\n }\n \n-fn expr_ident(lctx: &LoweringContext, span: Span, id: hir::Ident,\n+fn expr_ident(lctx: &mut LoweringContext, span: Span, id: hir::Ident,\n               attrs: ThinAttributes, binding: NodeId) -> P<hir::Expr> {\n     let expr = expr(lctx, span, hir::ExprPath(None, path_ident(span, id)), attrs);\n \n-    let mut resolver = lctx.resolver.borrow_mut();\n-    let def = resolver.definitions().map(|defs| Def::Local(defs.local_def_id(binding), binding))\n-                                    .unwrap_or(Def::Err);\n-    resolver.record_resolution(expr.id, def);\n+    let def = lctx.resolver.definitions().map(|defs| {\n+        Def::Local(defs.local_def_id(binding), binding)\n+    }).unwrap_or(Def::Err);\n+    lctx.resolver.record_resolution(expr.id, def);\n \n     expr\n }\n \n-fn expr_mut_addr_of(lctx: &LoweringContext, span: Span, e: P<hir::Expr>,\n+fn expr_mut_addr_of(lctx: &mut LoweringContext, span: Span, e: P<hir::Expr>,\n                     attrs: ThinAttributes) -> P<hir::Expr> {\n     expr(lctx, span, hir::ExprAddrOf(hir::MutMutable, e), attrs)\n }\n \n-fn expr_path(lctx: &LoweringContext, path: hir::Path,\n+fn expr_path(lctx: &mut LoweringContext, path: hir::Path,\n              attrs: ThinAttributes) -> P<hir::Expr> {\n-    let def = lctx.resolver.borrow_mut().resolve_generated_global_path(&path, true);\n+    let def = lctx.resolver.resolve_generated_global_path(&path, true);\n     let expr = expr(lctx, path.span, hir::ExprPath(None, path), attrs);\n-    lctx.resolver.borrow_mut().record_resolution(expr.id, def);\n+    lctx.resolver.record_resolution(expr.id, def);\n     expr\n }\n \n-fn expr_match(lctx: &LoweringContext,\n+fn expr_match(lctx: &mut LoweringContext,\n               span: Span,\n               arg: P<hir::Expr>,\n               arms: hir::HirVec<hir::Arm>,\n@@ -1769,30 +1768,30 @@ fn expr_match(lctx: &LoweringContext,\n     expr(lctx, span, hir::ExprMatch(arg, arms, source), attrs)\n }\n \n-fn expr_block(lctx: &LoweringContext, b: P<hir::Block>,\n+fn expr_block(lctx: &mut LoweringContext, b: P<hir::Block>,\n               attrs: ThinAttributes) -> P<hir::Expr> {\n     expr(lctx, b.span, hir::ExprBlock(b), attrs)\n }\n \n-fn expr_tuple(lctx: &LoweringContext, sp: Span, exprs: hir::HirVec<P<hir::Expr>>,\n+fn expr_tuple(lctx: &mut LoweringContext, sp: Span, exprs: hir::HirVec<P<hir::Expr>>,\n               attrs: ThinAttributes) -> P<hir::Expr> {\n     expr(lctx, sp, hir::ExprTup(exprs), attrs)\n }\n \n-fn expr_struct(lctx: &LoweringContext,\n+fn expr_struct(lctx: &mut LoweringContext,\n                sp: Span,\n                path: hir::Path,\n                fields: hir::HirVec<hir::Field>,\n                e: Option<P<hir::Expr>>,\n                attrs: ThinAttributes) -> P<hir::Expr> {\n-    let def = lctx.resolver.borrow_mut().resolve_generated_global_path(&path, false);\n+    let def = lctx.resolver.resolve_generated_global_path(&path, false);\n     let expr = expr(lctx, sp, hir::ExprStruct(path, fields, e), attrs);\n-    lctx.resolver.borrow_mut().record_resolution(expr.id, def);\n+    lctx.resolver.record_resolution(expr.id, def);\n     expr\n \n }\n \n-fn expr(lctx: &LoweringContext, span: Span, node: hir::Expr_,\n+fn expr(lctx: &mut LoweringContext, span: Span, node: hir::Expr_,\n         attrs: ThinAttributes) -> P<hir::Expr> {\n     P(hir::Expr {\n         id: lctx.next_id(),\n@@ -1802,7 +1801,7 @@ fn expr(lctx: &LoweringContext, span: Span, node: hir::Expr_,\n     })\n }\n \n-fn stmt_let(lctx: &LoweringContext,\n+fn stmt_let(lctx: &mut LoweringContext,\n             sp: Span,\n             mutbl: bool,\n             ident: hir::Ident,\n@@ -1827,11 +1826,11 @@ fn stmt_let(lctx: &LoweringContext,\n     (respan(sp, hir::StmtDecl(P(decl), lctx.next_id())), pat_id)\n }\n \n-fn block_expr(lctx: &LoweringContext, expr: P<hir::Expr>) -> P<hir::Block> {\n+fn block_expr(lctx: &mut LoweringContext, expr: P<hir::Expr>) -> P<hir::Block> {\n     block_all(lctx, expr.span, hir::HirVec::new(), Some(expr))\n }\n \n-fn block_all(lctx: &LoweringContext,\n+fn block_all(lctx: &mut LoweringContext,\n              span: Span,\n              stmts: hir::HirVec<hir::Stmt>,\n              expr: Option<P<hir::Expr>>)\n@@ -1845,51 +1844,51 @@ fn block_all(lctx: &LoweringContext,\n     })\n }\n \n-fn pat_ok(lctx: &LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n+fn pat_ok(lctx: &mut LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n     let ok = std_path(lctx, &[\"result\", \"Result\", \"Ok\"]);\n     let path = path_global(span, ok);\n     pat_enum(lctx, span, path, hir_vec![pat])\n }\n \n-fn pat_err(lctx: &LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n+fn pat_err(lctx: &mut LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n     let err = std_path(lctx, &[\"result\", \"Result\", \"Err\"]);\n     let path = path_global(span, err);\n     pat_enum(lctx, span, path, hir_vec![pat])\n }\n \n-fn pat_some(lctx: &LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n+fn pat_some(lctx: &mut LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> {\n     let some = std_path(lctx, &[\"option\", \"Option\", \"Some\"]);\n     let path = path_global(span, some);\n     pat_enum(lctx, span, path, hir_vec![pat])\n }\n \n-fn pat_none(lctx: &LoweringContext, span: Span) -> P<hir::Pat> {\n+fn pat_none(lctx: &mut LoweringContext, span: Span) -> P<hir::Pat> {\n     let none = std_path(lctx, &[\"option\", \"Option\", \"None\"]);\n     let path = path_global(span, none);\n     pat_enum(lctx, span, path, hir_vec![])\n }\n \n-fn pat_enum(lctx: &LoweringContext,\n+fn pat_enum(lctx: &mut LoweringContext,\n             span: Span,\n             path: hir::Path,\n             subpats: hir::HirVec<P<hir::Pat>>)\n             -> P<hir::Pat> {\n-    let def = lctx.resolver.borrow_mut().resolve_generated_global_path(&path, true);\n+    let def = lctx.resolver.resolve_generated_global_path(&path, true);\n     let pt = if subpats.is_empty() {\n         hir::PatKind::Path(path)\n     } else {\n         hir::PatKind::TupleStruct(path, Some(subpats))\n     };\n     let pat = pat(lctx, span, pt);\n-    lctx.resolver.borrow_mut().record_resolution(pat.id, def);\n+    lctx.resolver.record_resolution(pat.id, def);\n     pat\n }\n \n-fn pat_ident(lctx: &LoweringContext, span: Span, ident: hir::Ident) -> P<hir::Pat> {\n+fn pat_ident(lctx: &mut LoweringContext, span: Span, ident: hir::Ident) -> P<hir::Pat> {\n     pat_ident_binding_mode(lctx, span, ident, hir::BindByValue(hir::MutImmutable))\n }\n \n-fn pat_ident_binding_mode(lctx: &LoweringContext,\n+fn pat_ident_binding_mode(lctx: &mut LoweringContext,\n                           span: Span,\n                           ident: hir::Ident,\n                           bm: hir::BindingMode)\n@@ -1903,22 +1902,22 @@ fn pat_ident_binding_mode(lctx: &LoweringContext,\n \n     let pat = pat(lctx, span, pat_ident);\n \n-    let mut resolver = lctx.resolver.borrow_mut();\n-    let def = resolver.definitions().map(|defs| {\n+    let parent_def = lctx.parent_def;\n+    let def = lctx.resolver.definitions().map(|defs| {\n         let def_path_data = DefPathData::Binding(ident.name);\n-        let def_index = defs.create_def_with_parent(lctx.parent_def.get(), pat.id, def_path_data);\n+        let def_index = defs.create_def_with_parent(parent_def, pat.id, def_path_data);\n         Def::Local(DefId::local(def_index), pat.id)\n     }).unwrap_or(Def::Err);\n-    resolver.record_resolution(pat.id, def);\n+    lctx.resolver.record_resolution(pat.id, def);\n \n     pat\n }\n \n-fn pat_wild(lctx: &LoweringContext, span: Span) -> P<hir::Pat> {\n+fn pat_wild(lctx: &mut LoweringContext, span: Span) -> P<hir::Pat> {\n     pat(lctx, span, hir::PatKind::Wild)\n }\n \n-fn pat(lctx: &LoweringContext, span: Span, pat: hir::PatKind) -> P<hir::Pat> {\n+fn pat(lctx: &mut LoweringContext, span: Span, pat: hir::PatKind) -> P<hir::Pat> {\n     P(hir::Pat {\n         id: lctx.next_id(),\n         node: pat,\n@@ -1969,7 +1968,7 @@ fn path_all(sp: Span,\n     }\n }\n \n-fn std_path(lctx: &LoweringContext, components: &[&str]) -> Vec<hir::Ident> {\n+fn std_path(lctx: &mut LoweringContext, components: &[&str]) -> Vec<hir::Ident> {\n     let mut v = Vec::new();\n     if let Some(s) = lctx.crate_root {\n         v.push(hir::Ident::from_name(token::intern(s)));\n@@ -1980,12 +1979,12 @@ fn std_path(lctx: &LoweringContext, components: &[&str]) -> Vec<hir::Ident> {\n \n // Given suffix [\"b\",\"c\",\"d\"], returns path `::std::b::c::d` when\n // `fld.cx.use_std`, and `::core::b::c::d` otherwise.\n-fn core_path(lctx: &LoweringContext, span: Span, components: &[&str]) -> hir::Path {\n+fn core_path(lctx: &mut LoweringContext, span: Span, components: &[&str]) -> hir::Path {\n     let idents = std_path(lctx, components);\n     path_global(span, idents)\n }\n \n-fn signal_block_expr(lctx: &LoweringContext,\n+fn signal_block_expr(lctx: &mut LoweringContext,\n                      stmts: hir::HirVec<hir::Stmt>,\n                      expr: P<hir::Expr>,\n                      span: Span,"}, {"sha": "66b1b28a0e505e1ccec144577bd028142990fdb0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=eed8d70ac5177e6f378d08318f77499231e24e32", "patch": "@@ -787,8 +787,8 @@ pub fn lower_and_resolve<'a>(sess: &Session,\n \n         // Lower ast -> hir.\n         let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-            let lcx = LoweringContext::new(sess, Some(krate), &mut resolver);\n-            hir_map::Forest::new(lower_crate(&lcx, krate), dep_graph)\n+            let mut lcx = LoweringContext::new(sess, Some(krate), &mut resolver);\n+            hir_map::Forest::new(lower_crate(&mut lcx, krate), dep_graph)\n         });\n \n         (ty::CrateAnalysis {"}, {"sha": "ce525b716ff2c4ec4308fdcc1f139d8802fb47ad", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=eed8d70ac5177e6f378d08318f77499231e24e32", "patch": "@@ -1326,11 +1326,11 @@ fn mk_ctxt() -> parse::ParseSess {\n }\n \n #[cfg(test)]\n-fn with_testing_context<T, F: FnOnce(LoweringContext) -> T>(f: F) -> T {\n+fn with_testing_context<T, F: FnOnce(&mut LoweringContext) -> T>(f: F) -> T {\n     let assigner = FakeNodeIdAssigner;\n     let mut resolver = DummyResolver;\n-    let lcx = LoweringContext::new(&assigner, None, &mut resolver);\n-    f(lcx)\n+    let mut lcx = LoweringContext::new(&assigner, None, &mut resolver);\n+    f(&mut lcx)\n }\n \n #[cfg(test)]\n@@ -1347,7 +1347,7 @@ fn roundtrip(in_item: hir::Item) {\n fn test_basic() {\n     let cx = mk_ctxt();\n     with_testing_context(|lcx| {\n-        roundtrip(lower_item(&lcx, &quote_item!(&cx,\n+        roundtrip(lower_item(lcx, &quote_item!(&cx,\n             fn foo() {}\n         ).unwrap()));\n     });\n@@ -1357,7 +1357,7 @@ fn test_basic() {\n fn test_smalltalk() {\n     let cx = mk_ctxt();\n     with_testing_context(|lcx| {\n-        roundtrip(lower_item(&lcx, &quote_item!(&cx,\n+        roundtrip(lower_item(lcx, &quote_item!(&cx,\n             fn foo() -> isize { 3 + 4 } // first smalltalk program ever executed.\n         ).unwrap()));\n     });\n@@ -1367,7 +1367,7 @@ fn test_smalltalk() {\n fn test_more() {\n     let cx = mk_ctxt();\n     with_testing_context(|lcx| {\n-        roundtrip(lower_item(&lcx, &quote_item!(&cx,\n+        roundtrip(lower_item(lcx, &quote_item!(&cx,\n             fn foo(x: usize, y: usize) -> usize {\n                 let z = x + y;\n                 return z;\n@@ -1387,10 +1387,10 @@ fn test_simplification() {\n     ).unwrap();\n     let cx = mk_ctxt();\n     with_testing_context(|lcx| {\n-        let hir_item = lower_item(&lcx, &item);\n+        let hir_item = lower_item(lcx, &item);\n         let item_in = InlinedItemRef::Item(&hir_item);\n         let item_out = simplify_ast(item_in);\n-        let item_exp = InlinedItem::Item(P(lower_item(&lcx, &quote_item!(&cx,\n+        let item_exp = InlinedItem::Item(P(lower_item(lcx, &quote_item!(&cx,\n             fn new_int_alist<B>() -> alist<isize, B> {\n                 return alist {eq_fn: eq_int, data: Vec::new()};\n             }"}, {"sha": "0f518900ea787c30632b604efb75e8c1f68f5064", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed8d70ac5177e6f378d08318f77499231e24e32/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=eed8d70ac5177e6f378d08318f77499231e24e32", "patch": "@@ -98,8 +98,8 @@ pub fn run(input: &str,\n     let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n \n     let mut dummy_resolver = DummyResolver;\n-    let lcx = LoweringContext::new(&sess, Some(&krate), &mut dummy_resolver);\n-    let krate = lower_crate(&lcx, &krate);\n+    let mut lcx = LoweringContext::new(&sess, Some(&krate), &mut dummy_resolver);\n+    let krate = lower_crate(&mut lcx, &krate);\n \n     let opts = scrape_test_config(&krate);\n "}]}