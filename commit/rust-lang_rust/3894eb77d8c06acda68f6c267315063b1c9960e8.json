{"sha": "3894eb77d8c06acda68f6c267315063b1c9960e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTRlYjc3ZDhjMDZhY2RhNjhmNmMyNjczMTUwNjNiMWM5OTYwZTg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T09:52:15Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T09:52:15Z"}, "message": "Merge #1286\n\n1286: Add infer for generic default type r=flodiebold a=edwin0cheng\n\nThis PR add infer support for generic default type:\r\n\r\n```\r\nstruct Gen<T=u32> {\r\n    val: T\r\n}\r\n```\r\n\r\n* add the (unresolved) defaults from the definition to GenericParams\r\n* add a query generic_defaults that resolves those defaults to types and returns a Substs\r\n* add the missing type in `substs_from_path_segment`\r\n* add tests\r\n\r\nbased on the idea in this [comment](https://github.com/rust-analyzer/rust-analyzer/issues/1099#issuecomment-484206279)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "d6f33d4f6647cea3ec63b48e3b14b7897890db94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f33d4f6647cea3ec63b48e3b14b7897890db94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3894eb77d8c06acda68f6c267315063b1c9960e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3894eb77d8c06acda68f6c267315063b1c9960e8", "html_url": "https://github.com/rust-lang/rust/commit/3894eb77d8c06acda68f6c267315063b1c9960e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3894eb77d8c06acda68f6c267315063b1c9960e8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5edddae523184462d779d5a347ca1c5be5832044", "url": "https://api.github.com/repos/rust-lang/rust/commits/5edddae523184462d779d5a347ca1c5be5832044", "html_url": "https://github.com/rust-lang/rust/commit/5edddae523184462d779d5a347ca1c5be5832044"}, {"sha": "3fc344b9f16ad481e87198da72052dd7ddfc88be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc344b9f16ad481e87198da72052dd7ddfc88be", "html_url": "https://github.com/rust-lang/rust/commit/3fc344b9f16ad481e87198da72052dd7ddfc88be"}], "stats": {"total": 103, "additions": 86, "deletions": 17}, "files": [{"sha": "bda02d3cc19d763792091025947a98c23fc68848", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=3894eb77d8c06acda68f6c267315063b1c9960e8", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     DefWithBody, Trait,\n     ids,\n     nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n-    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig, TypeCtor, GenericPredicate},\n+    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig, TypeCtor, GenericPredicate, Substs},\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap, ImplBlock},\n     generics::{GenericParams, GenericDef},\n@@ -141,6 +141,9 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::generic_predicates)]\n     fn generic_predicates(&self, def: GenericDef) -> Arc<[GenericPredicate]>;\n \n+    #[salsa::invoke(crate::ty::generic_defaults)]\n+    fn generic_defaults(&self, def: GenericDef) -> Substs;\n+\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,"}, {"sha": "a635c71847d8d64e13f9a70a0c2227089a81af89", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=3894eb77d8c06acda68f6c267315063b1c9960e8", "patch": "@@ -5,7 +5,7 @@\n \n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner, DefaultTypeParamOwner};\n \n use crate::{\n     db::{ HirDatabase, DefDatabase},\n@@ -18,6 +18,7 @@ pub struct GenericParam {\n     // FIXME: give generic params proper IDs\n     pub(crate) idx: u32,\n     pub(crate) name: Name,\n+    pub(crate) default: Option<Path>,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n@@ -68,7 +69,11 @@ impl GenericParams {\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.params.push(GenericParam { idx: start, name: Name::self_type() });\n+                generics.params.push(GenericParam {\n+                    idx: start,\n+                    name: Name::self_type(),\n+                    default: None,\n+                });\n                 generics.fill(&*it.source(db).1, start + 1);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).1, start),\n@@ -90,7 +95,9 @@ impl GenericParams {\n     fn fill_params(&mut self, params: &ast::TypeParamList, start: u32) {\n         for (idx, type_param) in params.type_params().enumerate() {\n             let name = type_param.name().map(AsName::as_name).unwrap_or_else(Name::missing);\n-            let param = GenericParam { idx: idx as u32 + start, name: name.clone() };\n+            let default = type_param.default_type().and_then(|t| t.path()).and_then(Path::from_ast);\n+\n+            let param = GenericParam { idx: idx as u32 + start, name: name.clone(), default };\n             self.params.push(param);\n \n             let type_ref = TypeRef::Path(name.into());"}, {"sha": "9a65bf567de39d4fb3baf8b2b697d9ae4bfef821", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3894eb77d8c06acda68f6c267315063b1c9960e8", "patch": "@@ -19,7 +19,7 @@ use std::{fmt, mem};\n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams};\n use display::{HirDisplay, HirFormatter};\n \n-pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates};\n+pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates, generic_defaults};\n pub(crate) use infer::{infer, InferenceResult, InferTy};\n pub use lower::CallableDef;\n "}, {"sha": "8a8cc2a24e6f839069cbb99a95ebd066a51ecbb7", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=3894eb77d8c06acda68f6c267315063b1c9960e8", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n     path::{PathSegment, GenericArg},\n-    generics::{GenericParams, HasGenericParams},\n+    generics::{HasGenericParams},\n     adt::VariantDef, Trait, generics::{ WherePredicate, GenericDef}\n };\n use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n@@ -120,15 +120,15 @@ impl Ty {\n         segment: &PathSegment,\n         resolved: TypableDef,\n     ) -> Substs {\n-        let def_generics = match resolved {\n-            TypableDef::Function(func) => func.generic_params(db),\n-            TypableDef::Struct(s) => s.generic_params(db),\n-            TypableDef::Enum(e) => e.generic_params(db),\n-            TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n-            TypableDef::TypeAlias(t) => t.generic_params(db),\n-            TypableDef::Const(_) | TypableDef::Static(_) => GenericParams::default().into(),\n+        let def_generic: Option<GenericDef> = match resolved {\n+            TypableDef::Function(func) => Some(func.into()),\n+            TypableDef::Struct(s) => Some(s.into()),\n+            TypableDef::Enum(e) => Some(e.into()),\n+            TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n+            TypableDef::TypeAlias(t) => Some(t.into()),\n+            TypableDef::Const(_) | TypableDef::Static(_) => None,\n         };\n-        substs_from_path_segment(db, resolver, segment, &def_generics, false)\n+        substs_from_path_segment(db, resolver, segment, def_generic, false)\n     }\n \n     /// Collect generic arguments from a path into a `Substs`. See also\n@@ -172,10 +172,12 @@ pub(super) fn substs_from_path_segment(\n     db: &impl HirDatabase,\n     resolver: &Resolver,\n     segment: &PathSegment,\n-    def_generics: &GenericParams,\n+    def_generic: Option<GenericDef>,\n     add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n+    let def_generics = def_generic.map(|def| def.generic_params(db)).unwrap_or_default();\n+\n     let parent_param_count = def_generics.count_parent_params();\n     substs.extend(iter::repeat(Ty::Unknown).take(parent_param_count));\n     if add_self_param {\n@@ -199,12 +201,24 @@ pub(super) fn substs_from_path_segment(\n         }\n     }\n     // add placeholders for args that were not provided\n-    // FIXME: handle defaults\n     let supplied_params = substs.len();\n     for _ in supplied_params..def_generics.count_params_including_parent() {\n         substs.push(Ty::Unknown);\n     }\n     assert_eq!(substs.len(), def_generics.count_params_including_parent());\n+\n+    // handle defaults\n+    if let Some(def_generic) = def_generic {\n+        let default_substs = db.generic_defaults(def_generic);\n+        assert_eq!(substs.len(), default_substs.len());\n+\n+        for (i, default_ty) in default_substs.iter().enumerate() {\n+            if substs[i] == Ty::Unknown {\n+                substs[i] = default_ty.clone();\n+            }\n+        }\n+    }\n+\n     Substs(substs.into())\n }\n \n@@ -249,7 +263,7 @@ impl TraitRef {\n         resolved: Trait,\n     ) -> Substs {\n         let segment = path.segments.last().expect(\"path should have at least one segment\");\n-        substs_from_path_segment(db, resolver, segment, &resolved.generic_params(db), true)\n+        substs_from_path_segment(db, resolver, segment, Some(resolved.into()), true)\n     }\n \n     pub(crate) fn for_trait(db: &impl HirDatabase, trait_: Trait) -> TraitRef {\n@@ -331,6 +345,22 @@ pub(crate) fn generic_predicates(\n     predicates.into()\n }\n \n+/// Resolve the default type params from generics\n+pub(crate) fn generic_defaults(db: &impl HirDatabase, def: GenericDef) -> Substs {\n+    let resolver = def.resolver(db);\n+    let generic_params = def.generic_params(db);\n+\n+    let defaults = generic_params\n+        .params_including_parent()\n+        .into_iter()\n+        .map(|p| {\n+            p.default.as_ref().map_or(Ty::Unknown, |path| Ty::from_hir_path(db, &resolver, path))\n+        })\n+        .collect::<Vec<_>>();\n+\n+    Substs(defaults.into())\n+}\n+\n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n     let signature = def.signature(db);\n     let resolver = def.resolver(db);"}, {"sha": "cd24faba52913462ca27b02e7d0b9aed4beb43b8", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3894eb77d8c06acda68f6c267315063b1c9960e8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3894eb77d8c06acda68f6c267315063b1c9960e8", "patch": "@@ -1448,6 +1448,35 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_associated_method_generics_with_default_param() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct Gen<T=u32> {\n+    val: T\n+}\n+\n+impl<T> Gen<T> {\n+    pub fn make() -> Gen<T> {\n+        loop { }\n+    }\n+}\n+\n+fn test() {\n+    let a = Gen::make();\n+}\n+\"#),\n+        @r###\"\n+[80; 104) '{     ...     }': !\n+[90; 98) 'loop { }': !\n+[95; 98) '{ }': ()\n+[118; 146) '{     ...e(); }': ()\n+[128; 129) 'a': Gen<u32>\n+[132; 141) 'Gen::make': fn make<u32>() -> Gen<T>\n+[132; 143) 'Gen::make()': Gen<u32>\"###\n+    );\n+}\n+\n #[test]\n fn infer_associated_method_generics_without_args() {\n     assert_snapshot_matches!("}]}