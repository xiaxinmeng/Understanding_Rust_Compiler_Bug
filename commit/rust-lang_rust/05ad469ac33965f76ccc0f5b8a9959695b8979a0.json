{"sha": "05ad469ac33965f76ccc0f5b8a9959695b8979a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWQ0NjlhYzMzOTY1Zjc2Y2NjMGY1YjhhOTk1OTY5NWI4OTc5YTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-21T23:12:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-21T23:12:26Z"}, "message": "Command-line utilty to print the parse tree", "tree": {"sha": "1212adb51b8970a458c322cf687f625c5ef612e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1212adb51b8970a458c322cf687f625c5ef612e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ad469ac33965f76ccc0f5b8a9959695b8979a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ad469ac33965f76ccc0f5b8a9959695b8979a0", "html_url": "https://github.com/rust-lang/rust/commit/05ad469ac33965f76ccc0f5b8a9959695b8979a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ad469ac33965f76ccc0f5b8a9959695b8979a0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8cf1d8cdac48f48caf9505bd5dc20dd2b962317", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cf1d8cdac48f48caf9505bd5dc20dd2b962317", "html_url": "https://github.com/rust-lang/rust/commit/c8cf1d8cdac48f48caf9505bd5dc20dd2b962317"}], "stats": {"total": 89, "additions": 57, "deletions": 32}, "files": [{"sha": "3c13e732ed881fdd733e88eab9a98409d1f058cc", "filename": "src/bin/parse-rust.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05ad469ac33965f76ccc0f5b8a9959695b8979a0/src%2Fbin%2Fparse-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ad469ac33965f76ccc0f5b8a9959695b8979a0/src%2Fbin%2Fparse-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fparse-rust.rs?ref=05ad469ac33965f76ccc0f5b8a9959695b8979a0", "patch": "@@ -0,0 +1,20 @@\n+extern crate libsyntax2;\n+\n+use std::io::Read;\n+\n+use libsyntax2::{tokenize, parse};\n+use libsyntax2::utils::dump_tree;\n+\n+fn main() {\n+    let text = read_input();\n+    let tokens = tokenize(&text);\n+    let file = parse(text, &tokens);\n+    let tree = dump_tree(&file);\n+    println!(\"{}\", tree);\n+}\n+\n+fn read_input() -> String {\n+    let mut buff = String::new();\n+    ::std::io::stdin().read_to_string(&mut buff).unwrap();\n+    buff\n+}"}, {"sha": "7fd9e547a69ae972e3349f8b1f4a90eac6f63261", "filename": "src/lib.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05ad469ac33965f76ccc0f5b8a9959695b8979a0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ad469ac33965f76ccc0f5b8a9959695b8979a0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=05ad469ac33965f76ccc0f5b8a9959695b8979a0", "patch": "@@ -10,3 +10,38 @@ pub use text::{TextUnit, TextRange};\n pub use tree::{SyntaxKind, Token, FileBuilder, Sink, File, Node};\n pub use lexer::{next_token, tokenize};\n pub use parser::parse;\n+\n+pub mod utils {\n+    use std::fmt::Write;\n+\n+    use {File, Node};\n+\n+    pub fn dump_tree(file: &File) -> String {\n+        let mut result = String::new();\n+        go(file.root(), &mut result, 0);\n+        return result;\n+\n+        fn go(node: Node, buff: &mut String, level: usize) {\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"{:?}\\n\", node).unwrap();\n+            let my_errors = node.errors().filter(|e| e.after_child().is_none());\n+            let parent_errors = node.parent().into_iter()\n+                .flat_map(|n| n.errors())\n+                .filter(|e| e.after_child() == Some(node));\n+\n+            for err in my_errors {\n+                buff.push_str(&String::from(\"  \").repeat(level));\n+                write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n+            }\n+\n+            for child in node.children() {\n+                go(child, buff, level + 1)\n+            }\n+\n+            for err in parent_errors {\n+                buff.push_str(&String::from(\"  \").repeat(level));\n+                write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n+            }\n+        }\n+    }\n+}"}, {"sha": "370b02c741833f7a34ca6a24e99eb772e36af4e4", "filename": "tests/parser.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05ad469ac33965f76ccc0f5b8a9959695b8979a0/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ad469ac33965f76ccc0f5b8a9959695b8979a0/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=05ad469ac33965f76ccc0f5b8a9959695b8979a0", "patch": "@@ -2,9 +2,8 @@ extern crate file;\n extern crate libsyntax2;\n extern crate testutils;\n \n-use std::fmt::Write;\n-\n-use libsyntax2::{tokenize, parse, Node, File};\n+use libsyntax2::{tokenize, parse};\n+use libsyntax2::utils::dump_tree;\n use testutils::dir_tests;\n \n #[test]\n@@ -18,32 +17,3 @@ fn parser_tests() {\n         }\n     )\n }\n-\n-fn dump_tree(file: &File) -> String {\n-    let mut result = String::new();\n-    go(file.root(), &mut result, 0);\n-    return result;\n-\n-    fn go(node: Node, buff: &mut String, level: usize) {\n-        buff.push_str(&String::from(\"  \").repeat(level));\n-        write!(buff, \"{:?}\\n\", node).unwrap();\n-        let my_errors = node.errors().filter(|e| e.after_child().is_none());\n-        let parent_errors = node.parent().into_iter()\n-            .flat_map(|n| n.errors())\n-            .filter(|e| e.after_child() == Some(node));\n-\n-        for err in my_errors {\n-            buff.push_str(&String::from(\"  \").repeat(level));\n-            write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n-        }\n-\n-        for child in node.children() {\n-            go(child, buff, level + 1)\n-        }\n-\n-        for err in parent_errors {\n-            buff.push_str(&String::from(\"  \").repeat(level));\n-            write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n-        }\n-    }\n-}"}]}