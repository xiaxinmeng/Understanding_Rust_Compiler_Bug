{"sha": "712e8006b3c3a055b53326196081df11da123d38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMmU4MDA2YjNjM2EwNTViNTMzMjYxOTYwODFkZjExZGExMjNkMzg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T08:47:36Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T08:47:36Z"}, "message": "Improve handling of the `addr` argument in SYS_futex.", "tree": {"sha": "e0bfc521bf467d14956809e80c1d8944e3604c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0bfc521bf467d14956809e80c1d8944e3604c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/712e8006b3c3a055b53326196081df11da123d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/712e8006b3c3a055b53326196081df11da123d38", "html_url": "https://github.com/rust-lang/rust/commit/712e8006b3c3a055b53326196081df11da123d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/712e8006b3c3a055b53326196081df11da123d38/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2fa27c3b8bfd99240bda23fff1b09bb78c5e7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fa27c3b8bfd99240bda23fff1b09bb78c5e7fa", "html_url": "https://github.com/rust-lang/rust/commit/c2fa27c3b8bfd99240bda23fff1b09bb78c5e7fa"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "2b31961559d1440e71e6e888ea47e25fea8bbcde", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/712e8006b3c3a055b53326196081df11da123d38/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712e8006b3c3a055b53326196081df11da123d38/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=712e8006b3c3a055b53326196081df11da123d38", "patch": "@@ -13,12 +13,18 @@ pub fn futex<'tcx>(\n     if !(4..=7).contains(&args.len()) {\n         throw_ub_format!(\"incorrect number of arguments for futex syscall: got {}, expected between 4 and 7 (inclusive)\", args.len());\n     }\n-    let addr = args[1];\n-    let addr_scalar = this.read_scalar(addr)?.check_init()?;\n-    let futex_ptr = this.force_ptr(addr_scalar)?.erase_tag();\n+\n+    // The first three arguments (after the syscall number itself) are the same to all futex operations:\n+    //     (int *addr, int op, int val).\n+    // Although note that the first one is often passed as a different pointer type, e.g. `*const AtomicU32` or `*mut u32`.\n+    let addr = this.deref_operand(args[1])?;\n     let op = this.read_scalar(args[2])?.to_i32()?;\n     let val = this.read_scalar(args[3])?.to_i32()?;\n \n+    // The raw pointer value is used to identify the mutex.\n+    // Not all mutex operations actually read from this address or even require this address to exist.\n+    let futex_ptr = addr.ptr.assert_ptr();\n+\n     let thread = this.get_active_thread();\n \n     let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n@@ -34,8 +40,10 @@ pub fn futex<'tcx>(\n             if !this.is_null(timeout)? {\n                 throw_ub_format!(\"miri does not support timeouts for futex operations\");\n             }\n-            this.memory.check_ptr_access(addr_scalar, Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n-            let futex_val = this.read_scalar_at_offset(args[1], 0, this.machine.layouts.i32)?.to_i32()?;\n+            // Check the pointer for alignment. Atomic operations are only available for fully aligned values.\n+            this.memory.check_ptr_access(addr.ptr.into(), Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n+            // Read an `i32` through the pointer, regardless of any wrapper types (e.g. `AtomicI32`).\n+            let futex_val = this.read_scalar(addr.offset(Size::ZERO, MemPlaceMeta::None, this.machine.layouts.i32, this)?.into())?.to_i32()?;\n             if val == futex_val {\n                 this.block_thread(thread);\n                 this.futex_wait(futex_ptr, thread);"}, {"sha": "f8b6f99f1e0332324b3ce2cdf228791107a6a52d", "filename": "src/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/712e8006b3c3a055b53326196081df11da123d38/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712e8006b3c3a055b53326196081df11da123d38/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=712e8006b3c3a055b53326196081df11da123d38", "patch": "@@ -418,16 +418,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.machine.threads.sync.condvars[id].waiters.retain(|waiter| waiter.thread != thread);\n     }\n \n-    fn futex_wait(&mut self, addr: Pointer, thread: ThreadId) {\n+    fn futex_wait(&mut self, addr: Pointer<stacked_borrows::Tag>, thread: ThreadId) {\n         let this = self.eval_context_mut();\n-        let waiters = &mut this.machine.threads.sync.futexes.entry(addr).or_default().waiters;\n+        let waiters = &mut this.machine.threads.sync.futexes.entry(addr.erase_tag()).or_default().waiters;\n         assert!(waiters.iter().all(|waiter| waiter.thread != thread), \"thread is already waiting\");\n         waiters.push_back(FutexWaiter { thread });\n     }\n \n-    fn futex_wake(&mut self, addr: Pointer) -> Option<ThreadId> {\n+    fn futex_wake(&mut self, addr: Pointer<stacked_borrows::Tag>) -> Option<ThreadId> {\n         let this = self.eval_context_mut();\n-        let waiters = &mut this.machine.threads.sync.futexes.get_mut(&addr)?.waiters;\n+        let waiters = &mut this.machine.threads.sync.futexes.get_mut(&addr.erase_tag())?.waiters;\n         waiters.pop_front().map(|waiter| waiter.thread)\n     }\n }"}]}