{"sha": "7c082dcf0f607abf16485b36c2d317091fa2986b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDgyZGNmMGY2MDdhYmYxNjQ4NWIzNmMyZDMxNzA5MWZhMjk4NmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T14:36:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T14:39:03Z"}, "message": "More precise ranges in remove hashes assist", "tree": {"sha": "e4b4c1f8cd9ae27f68e4f77d23e87838516b5560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b4c1f8cd9ae27f68e4f77d23e87838516b5560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c082dcf0f607abf16485b36c2d317091fa2986b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c082dcf0f607abf16485b36c2d317091fa2986b", "html_url": "https://github.com/rust-lang/rust/commit/7c082dcf0f607abf16485b36c2d317091fa2986b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c082dcf0f607abf16485b36c2d317091fa2986b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eddaa4b26b5e9d97e856fa3b8ad361cfae691d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eddaa4b26b5e9d97e856fa3b8ad361cfae691d9", "html_url": "https://github.com/rust-lang/rust/commit/4eddaa4b26b5e9d97e856fa3b8ad361cfae691d9"}], "stats": {"total": 131, "additions": 52, "deletions": 79}, "files": [{"sha": "ba1dcb610128b46cb510f7b13795ad3178bd9206", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 52, "deletions": 79, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/7c082dcf0f607abf16485b36c2d317091fa2986b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c082dcf0f607abf16485b36c2d317091fa2986b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=7c082dcf0f607abf16485b36c2d317091fa2986b", "patch": "@@ -4,8 +4,9 @@ use ra_syntax::{\n     ast::{self, HasQuotes, HasStringValue},\n     AstToken,\n     SyntaxKind::{RAW_STRING, STRING},\n-    TextSize,\n+    TextRange, TextSize,\n };\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -33,8 +34,7 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         \"Rewrite as raw string\",\n         target,\n         |edit| {\n-            let max_hash_streak = count_hashes(&value);\n-            let hashes = \"#\".repeat(max_hash_streak + 1);\n+            let hashes = \"#\".repeat(required_hashes(&value).max(1));\n             if matches!(value, Cow::Borrowed(_)) {\n                 // Avoid replacing the whole string to better position the cursor.\n                 edit.insert(token.syntax().text_range().start(), format!(\"r{}\", hashes));\n@@ -106,7 +106,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let target = token.text_range();\n-    acc.add(AssistId(\"add_hash\", AssistKind::Refactor), \"Add # to raw string\", target, |edit| {\n+    acc.add(AssistId(\"add_hash\", AssistKind::Refactor), \"Add #\", target, |edit| {\n         edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n     })\n@@ -128,49 +128,58 @@ pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n // }\n // ```\n pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(RAW_STRING)?;\n+    let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n+\n     let text = token.text().as_str();\n-    if text.starts_with(\"r\\\"\") {\n-        // no hash to remove\n+    if !text.starts_with(\"r#\") && text.ends_with(\"#\") {\n         return None;\n     }\n-    let target = token.text_range();\n-    acc.add(\n-        AssistId(\"remove_hash\", AssistKind::RefactorRewrite),\n-        \"Remove hash from raw string\",\n-        target,\n-        |edit| {\n-            let result = &text[2..text.len() - 1];\n-            let result = if result.starts_with('\\\"') {\n-                // FIXME: this logic is wrong, not only the last has has to handled specially\n-                // no more hash, escape\n-                let internal_str = &result[1..result.len() - 1];\n-                format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n-            } else {\n-                result.to_owned()\n-            };\n-            edit.replace(token.text_range(), format!(\"r{}\", result));\n-        },\n-    )\n+\n+    let existing_hashes = text.chars().skip(1).take_while(|&it| it == '#').count();\n+\n+    let text_range = token.syntax().text_range();\n+    let internal_text = &text[token.text_range_between_quotes()? - text_range.start()];\n+\n+    if existing_hashes == required_hashes(internal_text) {\n+        mark::hit!(cant_remove_required_hash);\n+        return None;\n+    }\n+\n+    acc.add(AssistId(\"remove_hash\", AssistKind::RefactorRewrite), \"Remove #\", text_range, |edit| {\n+        edit.delete(TextRange::at(text_range.start() + TextSize::of('r'), TextSize::of('#')));\n+        edit.delete(TextRange::new(text_range.end() - TextSize::of('#'), text_range.end()));\n+    })\n }\n \n-fn count_hashes(s: &str) -> usize {\n-    let mut max_hash_streak = 0usize;\n-    for idx in s.match_indices(\"\\\"#\").map(|(i, _)| i) {\n+fn required_hashes(s: &str) -> usize {\n+    let mut res = 0usize;\n+    for idx in s.match_indices('\"').map(|(i, _)| i) {\n         let (_, sub) = s.split_at(idx + 1);\n-        let nb_hash = sub.chars().take_while(|c| *c == '#').count();\n-        if nb_hash > max_hash_streak {\n-            max_hash_streak = nb_hash;\n-        }\n+        let n_hashes = sub.chars().take_while(|c| *c == '#').count();\n+        res = res.max(n_hashes + 1)\n     }\n-    max_hash_streak\n+    res\n+}\n+\n+#[test]\n+fn test_required_hashes() {\n+    assert_eq!(0, required_hashes(\"abc\"));\n+    assert_eq!(0, required_hashes(\"###\"));\n+    assert_eq!(1, required_hashes(\"\\\"\"));\n+    assert_eq!(2, required_hashes(\"\\\"#abc\"));\n+    assert_eq!(0, required_hashes(\"#abc\"));\n+    assert_eq!(3, required_hashes(\"#ab\\\"##c\"));\n+    assert_eq!(5, required_hashes(\"#ab\\\"##\\\"####c\"));\n }\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n+    use test_utils::mark;\n+\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn make_raw_string_target() {\n         check_assist_target(\n@@ -372,33 +381,21 @@ string\"###;\n     fn remove_hash_works() {\n         check_assist(\n             remove_hash,\n-            r##\"\n-            fn f() {\n-                let s = <|>r#\"random string\"#;\n-            }\n-            \"##,\n-            r#\"\n-            fn f() {\n-                let s = r\"random string\";\n-            }\n-            \"#,\n+            r##\"fn f() { let s = <|>r#\"random string\"#; }\"##,\n+            r#\"fn f() { let s = r\"random string\"; }\"#,\n         )\n     }\n \n     #[test]\n-    fn remove_hash_with_quote_works() {\n-        check_assist(\n+    fn cant_remove_required_hash() {\n+        mark::check!(cant_remove_required_hash);\n+        check_assist_not_applicable(\n             remove_hash,\n             r##\"\n             fn f() {\n                 let s = <|>r#\"random\"str\"ing\"#;\n             }\n             \"##,\n-            r#\"\n-            fn f() {\n-                let s = r\"random\\\"str\\\"ing\";\n-            }\n-            \"#,\n         )\n     }\n \n@@ -420,27 +417,13 @@ string\"###;\n     }\n \n     #[test]\n-    fn remove_hash_not_works() {\n-        check_assist_not_applicable(\n-            remove_hash,\n-            r#\"\n-            fn f() {\n-                let s = <|>\"random string\";\n-            }\n-            \"#,\n-        );\n+    fn remove_hash_doesnt_work() {\n+        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = <|>\"random string\"; }\"#);\n     }\n \n     #[test]\n-    fn remove_hash_no_hash_not_works() {\n-        check_assist_not_applicable(\n-            remove_hash,\n-            r#\"\n-            fn f() {\n-                let s = <|>r\"random string\";\n-            }\n-            \"#,\n-        );\n+    fn remove_hash_no_hash_doesnt_work() {\n+        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = <|>r\"random string\"; }\"#);\n     }\n \n     #[test]\n@@ -518,14 +501,4 @@ string\"###;\n             \"#,\n         );\n     }\n-\n-    #[test]\n-    fn count_hashes_test() {\n-        assert_eq!(0, count_hashes(\"abc\"));\n-        assert_eq!(0, count_hashes(\"###\"));\n-        assert_eq!(1, count_hashes(\"\\\"#abc\"));\n-        assert_eq!(0, count_hashes(\"#abc\"));\n-        assert_eq!(2, count_hashes(\"#ab\\\"##c\"));\n-        assert_eq!(4, count_hashes(\"#ab\\\"##\\\"####c\"));\n-    }\n }"}]}