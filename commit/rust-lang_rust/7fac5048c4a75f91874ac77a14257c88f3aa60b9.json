{"sha": "7fac5048c4a75f91874ac77a14257c88f3aa60b9", "node_id": "C_kwDOAAsO6NoAKDdmYWM1MDQ4YzRhNzVmOTE4NzRhYzc3YTE0MjU3Yzg4ZjNhYTYwYjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-25T17:35:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-25T17:35:41Z"}, "message": "Rollup merge of #104835 - spastorino:use-partially_normalize_associated_types_in, r=lcnr\n\nUse infcx.partially_normalize_associated_types_in\n\nr? ``@lcnr``", "tree": {"sha": "da96858368ced4c91bde992868c55fd223b400f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da96858368ced4c91bde992868c55fd223b400f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fac5048c4a75f91874ac77a14257c88f3aa60b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjgPztCRBK7hj4Ov3rIwAApzQIAJDuRswlnz1/Sd3dPq36W0na\nsFY+j9d31Amwl/jI8Lc/RH4Etj/OIiE/PkAwdUj/1PSxOz4SpDiwsp4w96rH87QM\nPEueWjCt2u+9oqBxxebJJHKyAeE+Bb/m14hkim7iHFn4/wbFiBBfUgKrjBFBbSiI\n8prYSUaTJ64XlhrUa8ZfyHuTXKR/sUb3w0cwKC1yphEQcHhzNaT5GXOT68WSJrVM\nIsdI4SfpXLhmV7mqjuOt/nkhRS6tCmTXmQBR9w7JAPtX+cmhTAdVcS4Rd2+TuCAS\n/bOGokCqZTf5dO1Syu/6SZLItOBvRVpZP2oP6dxN92eY4bDV6CQT1sdsjwFYRPk=\n=6G0J\n-----END PGP SIGNATURE-----\n", "payload": "tree da96858368ced4c91bde992868c55fd223b400f7\nparent aec60c6b7cc511979b176f9935b9f9d7c807ecd2\nparent 3dee3aac78a6aee6089ef7123cd884ea6a9972bc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669397741 +0100\ncommitter GitHub <noreply@github.com> 1669397741 +0100\n\nRollup merge of #104835 - spastorino:use-partially_normalize_associated_types_in, r=lcnr\n\nUse infcx.partially_normalize_associated_types_in\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fac5048c4a75f91874ac77a14257c88f3aa60b9", "html_url": "https://github.com/rust-lang/rust/commit/7fac5048c4a75f91874ac77a14257c88f3aa60b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fac5048c4a75f91874ac77a14257c88f3aa60b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "html_url": "https://github.com/rust-lang/rust/commit/aec60c6b7cc511979b176f9935b9f9d7c807ecd2"}, {"sha": "3dee3aac78a6aee6089ef7123cd884ea6a9972bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dee3aac78a6aee6089ef7123cd884ea6a9972bc", "html_url": "https://github.com/rust-lang/rust/commit/3dee3aac78a6aee6089ef7123cd884ea6a9972bc"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "cb652217c20dd551ddb7b1b0e4c672f8072b770f", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=7fac5048c4a75f91874ac77a14257c88f3aa60b9", "patch": "@@ -31,6 +31,7 @@ use rustc_span::lev_distance::{\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n+use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n use rustc_trait_selection::traits::query::method_autoderef::{\n@@ -716,9 +717,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // maybe shouldn't include `Param`s, but rather fresh variables or be canonicalized,\n             // see issue #89650\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let selcx = &mut traits::SelectionContext::new(self.fcx);\n-            let traits::Normalized { value: xform_self_ty, obligations } =\n-                traits::normalize(selcx, self.param_env, cause, xform_self_ty);\n+            let InferOk { value: xform_self_ty, obligations } = self\n+                .fcx\n+                .partially_normalize_associated_types_in(cause, self.param_env, xform_self_ty);\n+\n             debug!(\n                 \"assemble_inherent_impl_probe after normalization: xform_self_ty = {:?}/{:?}\",\n                 xform_self_ty, xform_ret_ty\n@@ -1490,7 +1492,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             let mut xform_ret_ty = probe.xform_ret_ty;\n             debug!(?xform_ret_ty);\n \n-            let selcx = &mut traits::SelectionContext::new(self);\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n             let mut parent_pred = None;\n@@ -1504,19 +1505,28 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n                     // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n                     // for why this is necessary\n-                    let traits::Normalized {\n+                    let InferOk {\n                         value: normalized_xform_ret_ty,\n                         obligations: normalization_obligations,\n-                    } = traits::normalize(selcx, self.param_env, cause.clone(), probe.xform_ret_ty);\n+                    } = self.fcx.partially_normalize_associated_types_in(\n+                        cause.clone(),\n+                        self.param_env,\n+                        probe.xform_ret_ty,\n+                    );\n                     xform_ret_ty = normalized_xform_ret_ty;\n                     debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n \n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_def_id = probe.item.container_id(self.tcx);\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n                     let impl_bounds = impl_bounds.instantiate(self.tcx, substs);\n-                    let traits::Normalized { value: impl_bounds, obligations: norm_obligations } =\n-                        traits::normalize(selcx, self.param_env, cause.clone(), impl_bounds);\n+\n+                    let InferOk { value: impl_bounds, obligations: norm_obligations } =\n+                        self.fcx.partially_normalize_associated_types_in(\n+                            cause.clone(),\n+                            self.param_env,\n+                            impl_bounds,\n+                        );\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics("}, {"sha": "8d6a6b765f8c48d6d2166131e1c65180594e187d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7fac5048c4a75f91874ac77a14257c88f3aa60b9", "patch": "@@ -9,6 +9,7 @@ use super::{\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use crate::infer::InferCtxtExt as _;\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n@@ -28,7 +29,7 @@ use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n-use rustc_infer::infer::TypeTrace;\n+use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -2525,18 +2526,15 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         self.probe(|_| {\n-            let mut selcx = SelectionContext::new(self);\n-\n             let cleaned_pred =\n                 pred.fold_with(&mut ParamToVarFolder { infcx: self, var_map: Default::default() });\n \n-            let cleaned_pred = super::project::normalize(\n-                &mut selcx,\n-                param_env,\n-                ObligationCause::dummy(),\n-                cleaned_pred,\n-            )\n-            .value;\n+            let InferOk { value: cleaned_pred, .. } =\n+                self.infcx.partially_normalize_associated_types_in(\n+                    ObligationCause::dummy(),\n+                    param_env,\n+                    cleaned_pred,\n+                );\n \n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);"}, {"sha": "4cab3275b33e9982e8329f854f15ead5f3fd8a79", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7fac5048c4a75f91874ac77a14257c88f3aa60b9", "patch": "@@ -1,11 +1,7 @@\n-use super::{\n-    DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n-    SelectionContext,\n-};\n+use super::{DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation};\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n-use crate::traits::normalize_to;\n \n use hir::def::CtorOf;\n use hir::HirId;\n@@ -23,7 +19,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::LateBoundRegionConversionTime;\n+use rustc_infer::infer::{InferOk, LateBoundRegionConversionTime};\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -2979,13 +2975,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n                     )\n                 });\n-                let projection_ty = normalize_to(\n-                    &mut SelectionContext::new(self),\n-                    obligation.param_env,\n-                    obligation.cause.clone(),\n-                    projection_ty,\n-                    &mut vec![],\n-                );\n+                let InferOk { value: projection_ty, .. } = self\n+                    .partially_normalize_associated_types_in(\n+                        obligation.cause.clone(),\n+                        obligation.param_env,\n+                        projection_ty,\n+                    );\n \n                 debug!(\n                     normalized_projection_type = ?self.resolve_vars_if_possible(projection_ty)"}, {"sha": "dae7d589d5cca75189bfcf6dc49d4fcf996a6b95", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fac5048c4a75f91874ac77a14257c88f3aa60b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=7fac5048c4a75f91874ac77a14257c88f3aa60b9", "patch": "@@ -8,7 +8,9 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{GenericArg, SubstsRef};\n \n-use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n+use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext};\n+use crate::infer::InferCtxtExt;\n+use rustc_infer::infer::InferOk;\n pub use rustc_infer::traits::{self, util::*};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -200,13 +202,15 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n-    let Normalized { value: subject, obligations: normalization_obligations1 } =\n-        super::normalize(selcx, param_env, ObligationCause::dummy(), subject);\n+    let InferOk { value: subject, obligations: normalization_obligations1 } = selcx\n+        .infcx()\n+        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, subject);\n \n     let predicates = selcx.tcx().predicates_of(impl_def_id);\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n-    let Normalized { value: predicates, obligations: normalization_obligations2 } =\n-        super::normalize(selcx, param_env, ObligationCause::dummy(), predicates);\n+    let InferOk { value: predicates, obligations: normalization_obligations2 } = selcx\n+        .infcx()\n+        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, predicates);\n     let impl_obligations =\n         super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n "}]}