{"sha": "630082ca8946ff2d0e814a73a2594ba65e1b29be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDA4MmNhODk0NmZmMmQwZTgxNGE3M2EyNTk0YmE2NWUxYjI5YmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T02:23:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:19Z"}, "message": "rpass: Remove usage of fmt!", "tree": {"sha": "6036f66a31aab78eaa6532e567195546c053a299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6036f66a31aab78eaa6532e567195546c053a299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/630082ca8946ff2d0e814a73a2594ba65e1b29be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/630082ca8946ff2d0e814a73a2594ba65e1b29be", "html_url": "https://github.com/rust-lang/rust/commit/630082ca8946ff2d0e814a73a2594ba65e1b29be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/630082ca8946ff2d0e814a73a2594ba65e1b29be/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e613c632ce156360bdf6e80f6f82ed5ab3b838", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e613c632ce156360bdf6e80f6f82ed5ab3b838", "html_url": "https://github.com/rust-lang/rust/commit/86e613c632ce156360bdf6e80f6f82ed5ab3b838"}], "stats": {"total": 1696, "additions": 853, "deletions": 843}, "files": [{"sha": "e253c9bd0595330250995fa623dacc4ba9b25ea0", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -91,7 +91,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let matches =\n         &match getopts::groups::getopts(args_, groups) {\n           Ok(m) => m,\n-          Err(f) => fail2!(f.to_err_msg())\n+          Err(f) => fail2!(\"{}\", f.to_err_msg())\n         };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {"}, {"sha": "78f9d62087baf0c48434b817360db8dca1bca31b", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,19 +21,19 @@ pub mod kitties {\n \n         pub fn eat(&mut self) -> bool {\n             if self.how_hungry > 0 {\n-                error!(\"OM NOM NOM\");\n+                error2!(\"OM NOM NOM\");\n                 self.how_hungry -= 2;\n                 return true;\n             } else {\n-                error!(\"Not hungry!\");\n+                error2!(\"Not hungry!\");\n                 return false;\n             }\n         }\n     }\n \n     impl cat {\n         pub fn meow(&mut self) {\n-            error!(\"Meow\");\n+            error2!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {\n                 self.how_hungry += 1;"}, {"sha": "906928d1b79203edf7c985e4aaafefa0329a4173", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,7 +21,7 @@ pub mod kitty {\n \n     impl cat {\n         fn meow(&mut self) {\n-            error!(\"Meow\");\n+            error2!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {\n                 self.how_hungry += 1;\n@@ -35,12 +35,12 @@ pub mod kitty {\n \n         pub fn eat(&mut self) -> bool {\n             if self.how_hungry > 0 {\n-                error!(\"OM NOM NOM\");\n+                error2!(\"OM NOM NOM\");\n                 self.how_hungry -= 2;\n                 return true;\n             }\n             else {\n-                error!(\"Not hungry!\");\n+                error2!(\"Not hungry!\");\n                 return false;\n             }\n         }"}, {"sha": "626947306c7297aace6a2c5446620a198045771a", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -33,7 +33,7 @@ pub fn alist_get<A:Clone + 'static,\n             return entry.value.clone();\n         }\n     }\n-    fail!();\n+    fail2!();\n }\n \n #[inline]"}, {"sha": "ecc094a612103db250d2cb0f8a1825b1800d04c7", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,7 +28,7 @@ pub mod rustrt {\n #[fixed_stack_segment] #[inline(never)]\n pub fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }"}, {"sha": "20b3a3280ec8293ebbcc606e960aa99151ccf082", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ impl <T:Clone> Index<uint,T> for maybe<T> {\n     fn index(&self, _idx: &uint) -> T {\n         match self {\n             &just(ref t) => (*t).clone(),\n-            &nothing => { fail!(); }\n+            &nothing => { fail2!(); }\n         }\n     }\n }"}, {"sha": "384f69c736cf0b2309962bf2f6782009d7f2fce0", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub unsafe fn f(xs: ~[int]) {\n-    xs.map(|_x| { unsafe fn q() { fail!(); } });\n+    xs.map(|_x| { unsafe fn q() { fail2!(); } });\n }"}, {"sha": "ef173d52bc4fe55ff694876d2d30304f7d7bbe39", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -38,6 +38,6 @@ impl read for bool {\n pub fn read<T:read>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n-      _ => fail!(\"read failed!\")\n+      _ => fail2!(\"read failed!\")\n     }\n }"}, {"sha": "873eb66e52e6f97e8503a6ba56e85c6f7589d060", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -36,7 +36,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> @Invokable<A> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    info!(\"a=%? b=%?\", a, b);\n+    info2!(\"a={:?} b={:?}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "7c43385ed616784f37278fff771004caba8fa859", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -55,7 +55,7 @@ pub fn main() {\n     let z = f(~x, y);\n     make_cycle(z);\n     let (a, b) = z.f();\n-    info!(\"a=%u b=%u\", *a as uint, b as uint);\n+    info2!(\"a={} b={}\", *a as uint, b as uint);\n     assert_eq!(*a, x);\n     assert_eq!(b, y);\n }"}, {"sha": "9944241836b58241ed16ad68afff5d9773138290", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     let a: int = 10;\n-    info!(a);\n+    info2!(\"{}\", a);\n     assert_eq!(a * (a - 1), 90);\n }"}, {"sha": "db8f0eac4f6b38ca60d8e44663aefe33f04373af", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,6 +28,6 @@ pub fn main() {\n     assert_eq!(i32_b << 1, i32_b << 1);\n     assert_eq!(i32_b >> 1, i32_b >> 1);\n     assert_eq!(i32_b & i32_b << 1, 0);\n-    info!(i32_b | i32_b << 1);\n+    info2!(\"{}\", i32_b | i32_b << 1);\n     assert_eq!(i32_b | i32_b << 1, 0x30303030);\n }"}, {"sha": "6078698ebd6b6fa7046ee04bcea943964dba9222", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n pub fn main() {\n-    fail!()\n+    fail2!()\n }\n \n #[main]"}, {"sha": "d8399848e09e300b0ce33e153ded210d88f884bb", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,6 +19,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    info!(\"%?\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n-    info!(\"%?\", f(5, 6).a);\n+    info2!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    info2!(\"{:?}\", f(5, 6).a);\n }"}, {"sha": "096e4378b3d433e0702439f90abbb13156136acb", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,13 +14,13 @@ trait Foo {\n \n impl<T:Foo> Foo for @T {\n     fn foo(&self) -> ~str {\n-        fmt!(\"@%s\", (**self).foo())\n+        format!(\"@{}\", (**self).foo())\n     }\n }\n \n impl Foo for uint {\n     fn foo(&self) -> ~str {\n-        fmt!(\"%u\", *self)\n+        format!(\"{}\", *self)\n     }\n }\n "}, {"sha": "f312cdae8bdeed6f5d1773c372f31c83d8c02426", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,6 +11,6 @@\n // Check that issue #954 stays fixed\n \n pub fn main() {\n-    match -1 { -1 => {}, _ => fail!(\"wat\") }\n+    match -1 { -1 => {}, _ => fail2!(\"wat\") }\n     assert_eq!(1-1, 0);\n }"}, {"sha": "ad5573889dd36e397506f5165bbf06f1ad02094e", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,6 +18,6 @@ pub fn main() {\n     let x = Some(p);\n     match x {\n         Some(z) => { dispose(z); },\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "10a7355c91d0b7b31548b830e460e33606461602", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -81,7 +81,7 @@ fn test_class() {\n   let mut r = p(1, 2);\n \n   unsafe {\n-  error!(\"q = %x, r = %x\",\n+  error2!(\"q = {:x}, r = {:x}\",\n          (::std::cast::transmute::<*p, uint>(&q)),\n          (::std::cast::transmute::<*p, uint>(&r)));\n   }"}, {"sha": "b99067419b06e02ae68cb97883697b142c550aed", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -27,8 +27,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    info!(a);\n-    info!(b);\n+    info2!(\"{}\", a);\n+    info2!(\"{}\", b);\n     assert_eq!(b, 1);\n     assert_eq!(a, 2);\n     assert_eq!(!0xf0 & 0xff, 0xf);"}, {"sha": "18da52ca88f4e88d9bb0f9a7155b432b85a176c7", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n \n     // Statement form does not require parentheses:\n     for i in v.iter() {\n-        info!(\"%?\", *i);\n+        info2!(\"{:?}\", *i);\n     }\n \n     // Usable at all:\n@@ -35,14 +35,14 @@ pub fn main() {\n         assert!(false);\n     }\n     match do v.iter().all |e| { e.is_negative() } {\n-        true => { fail!(\"incorrect answer.\"); }\n+        true => { fail2!(\"incorrect answer.\"); }\n         false => { }\n     }\n     match 3 {\n       _ if do v.iter().any |e| { e.is_negative() } => {\n       }\n       _ => {\n-        fail!(\"wrong answer.\");\n+        fail2!(\"wrong answer.\");\n       }\n     }\n "}, {"sha": "1931ec589ac10951403699bcd8847fbfd77184b7", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     fn as_buf<T>(s: ~str, f: &fn(~str) -> T) -> T { f(s) }\n-    as_buf(~\"foo\", |foo: ~str| -> () error!(foo) );\n+    as_buf(~\"foo\", |foo: ~str| -> () error2!(\"{}\", foo) );\n }"}, {"sha": "806ed035d5a0f7ba4a06a755e1296abd58128a76", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n             odds += 1;\n         }\n     });\n-    error!(odds);\n+    error2!(\"{:?}\", odds);\n     assert_eq!(odds, 4);\n }"}, {"sha": "c84033e5bde086cf704995bd19ace405a0421661", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n             sum += *i * *j;\n         });\n     });\n-    error!(sum);\n+    error2!(\"{:?}\", sum);\n     assert_eq!(sum, 225);\n }"}, {"sha": "09c3dd2d54baf86f8634a1d941a975dca0e7ce08", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,11 +19,11 @@ impl Foo {\n     );\n     match s {\n       ~Bar2(id, rest) => declare!(id, self.elaborate_stm(rest)),\n-      _ => fail!()\n+      _ => fail2!()\n     }\n   }\n \n-  fn check_id(&mut self, s: int) { fail!() }\n+  fn check_id(&mut self, s: int) { fail2!() }\n }\n- \n+\n pub fn main() { }"}, {"sha": "8ff326ed8706eb55dc872f59968bc3ad68e9f267", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -31,9 +31,9 @@ pub fn main() {\n     add_int(ints, 44);\n \n     do iter_ints(ints) |i| {\n-        error!(\"int = %d\", *i);\n+        error2!(\"int = {}\", *i);\n         true\n     };\n \n-    error!(\"ints=%?\", ints);\n+    error2!(\"ints={:?}\", ints);\n }"}, {"sha": "4be38df939b79d1988711364b7adf95503bab3d2", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         x = @F {f: ~4};\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(**b_x)) as uint);\n         assert_eq!(**b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(**b_x)));"}, {"sha": "ddc1d618697489701c2c4c6f7abfdec173cf2899", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "dc389ed1bc8cd76b63fad231d06862c5b045f175", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         *x = @F {f: ~4};\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(**b_x)) as uint);\n         assert_eq!(**b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(**b_x)));"}, {"sha": "139466bf40aa1d00c1aeb1860f7524733d217198", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         *x = @F{f: ~4};\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "f852f36d6337498b075866ee9c6304055a55ba3c", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @22;\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "b9428daf152b44eaaee3df58d8fe3aa62a3bacf2", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -25,13 +25,13 @@ fn testfn(cond: bool) {\n         exp = 4;\n     }\n \n-    info!(\"*r = %d, exp = %d\", *r, exp);\n+    info2!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n \n     x = @5;\n     y = @6;\n \n-    info!(\"*r = %d, exp = %d\", *r, exp);\n+    info2!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n     assert_eq!(x, @5);\n     assert_eq!(y, @6);"}, {"sha": "fec857574931154bed3806ed88a75dc9fedc60bd", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n \n-        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info2!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "6d16fd838f854e324bcac45eb07ecf3bbd16388c", "filename": "src/test/run-pass/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ struct noncopyable {\n \n impl Drop for noncopyable {\n     fn drop(&mut self) {\n-        error!(\"dropped\");\n+        error2!(\"dropped\");\n     }\n }\n "}, {"sha": "249e9a47164c30db490875acfd87343d396e050a", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,7 +19,7 @@ fn is_odd(_n: int) -> bool { return true; }\n fn length_is_even(_vs: @int) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_box(1)) { error!(\"bloop\"); }\n+    if is_odd(n) && length_is_even(some_box(1)) { error2!(\"bloop\"); }\n }\n \n pub fn main() { foo(67, 5); }"}, {"sha": "a4563c33331b054078b055c3e784b36f2fcefc0f", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,7 +19,7 @@ fn is_odd(_n: int) -> bool { return true; }\n fn length_is_even(_vs: @int) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_box(1)) { error!(\"bloop\"); }\n+    if is_odd(n) || length_is_even(some_box(1)) { error2!(\"bloop\"); }\n }\n \n pub fn main() { foo(67, 5); }"}, {"sha": "f5d522470d360274356430d591fee918aed31ce5", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,6 +17,6 @@ fn unbox<T:Clone>(b: Box<T>) -> T { return (*b.c).clone(); }\n pub fn main() {\n     let foo: int = 17;\n     let bfoo: Box<int> = Box {c: @foo};\n-    info!(\"see what's in our box\");\n+    info2!(\"see what's in our box\");\n     assert_eq!(unbox::<int>(bfoo), foo);\n }"}, {"sha": "e9be0904d4e9b579deabdf744953bd464112a2c7", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ struct Tree<T> {\n     parent: Option<T>\n }\n \n-fn empty<T>() -> Tree<T> { fail!() }\n+fn empty<T>() -> Tree<T> { fail2!() }\n \n struct Box {\n     tree: Tree<@Box>"}, {"sha": "3e89ac8bd38648c84dc1fd1d4fa921da491d1f67", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,14 +19,14 @@ fn hello<S:Speak>(s:&S) -> ~str{\n \n impl Speak for int {\n     fn say(&self, s:&str) -> ~str {\n-        fmt!(\"%s: %d\", s, *self)\n+        format!(\"{}: {}\", s, *self)\n     }\n }\n \n impl<T: Speak> Speak for Option<T> {\n     fn say(&self, s:&str) -> ~str {\n         match *self {\n-            None => fmt!(\"%s - none\", s),\n+            None => format!(\"{} - none\", s),\n             Some(ref x) => { ~\"something!\" + x.say(s) }\n         }\n     }"}, {"sha": "69ca1584c12fa09fa579fc5a4220489afae825cd", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,5 +12,5 @@ use std::borrow;\n \n pub fn main() {\n     let x = 3;\n-    info!(\"&x=%x\", borrow::to_uint(&x));\n+    info2!(\"&x={:x}\", borrow::to_uint(&x));\n }"}, {"sha": "3db000accec77ea04a4f8f61aa87c258fda81d1c", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,6 +17,6 @@ use cci_borrow_lib::foo;\n pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n-    info!(\"r=%u\", r);\n+    info2!(\"r={}\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "3e7cae395d482a59efe7102e5cc272c74a26c7c8", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ struct cat {\n \n impl Drop for cat {\n     #[cat_dropper]\n-    fn drop(&mut self) { error!(\"%s landed on hir feet\" , self . name); }\n+    fn drop(&mut self) { error2!(\"{} landed on hir feet\" , self . name); }\n }\n \n "}, {"sha": "0a3f1539333cf9286870c3c553267cfe4892cb14", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,7 +18,7 @@ impl Drop for cat {\n        Actually, cats don't always land on their feet when you drop them.\n     */\n     fn drop(&mut self) {\n-        error!(\"%s landed on hir feet\", self.name);\n+        error2!(\"{} landed on hir feet\", self.name);\n     }\n }\n "}, {"sha": "ac8c74f2da572a1b0198258c10872b90e0baabbc", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ use cci_class_cast::kitty::*;\n \n fn print_out(thing: @ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  info!(\"%s\", actual);\n+  info2!(\"{}\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "3828fbd4395015bb30d8a7e9c60269aa6a1aaff3", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,15 +20,15 @@ struct dog {\n \n impl dog {\n     fn bark(&self) -> int {\n-      info!(\"Woof %u %d\", *self.barks, *self.volume);\n+      info2!(\"Woof {} {}\", *self.barks, *self.volume);\n       *self.barks += 1u;\n       if *self.barks % 3u == 0u {\n           *self.volume += 1;\n       }\n       if *self.barks % 10u == 0u {\n           *self.volume -= 2;\n       }\n-      info!(\"Grrr %u %d\", *self.barks, *self.volume);\n+      info2!(\"Grrr {} {}\", *self.barks, *self.volume);\n       *self.volume\n     }\n }\n@@ -62,7 +62,7 @@ impl cat {\n \n impl cat {\n     fn meow(&self) -> uint {\n-      info!(\"Meow\");\n+      info2!(\"Meow\");\n       *self.meows += 1u;\n       if *self.meows % 5u == 0u {\n           *self.how_hungry += 1;"}, {"sha": "69a94e09d5f3028daab7915b2c3b5e81a37868f1", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -25,20 +25,20 @@ impl noisy for cat {\n impl cat {\n   pub fn eat(&mut self) -> bool {\n     if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n+        error2!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n         return true;\n     }\n     else {\n-        error!(\"Not hungry!\");\n+        error2!(\"Not hungry!\");\n         return false;\n     }\n   }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-      error!(\"Meow\");\n+      error2!(\"Meow\");\n       self.meows += 1u;\n       if self.meows % 5u == 0u {\n           self.how_hungry += 1;"}, {"sha": "baa82dbb2deb6668ec9aaa32050b385fc04118a5", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -38,11 +38,11 @@ impl<T> cat<T> {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            error2!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            error2!(\"Not hungry!\");\n             return false;\n         }\n     }\n@@ -75,7 +75,7 @@ impl<T> MutableMap<int, T> for cat<T> {\n         true\n     }\n \n-    fn find_mut<'a>(&'a mut self, _k: &int) -> Option<&'a mut T> { fail!() }\n+    fn find_mut<'a>(&'a mut self, _k: &int) -> Option<&'a mut T> { fail2!() }\n \n     fn remove(&mut self, k: &int) -> bool {\n         if self.find(k).is_some() {\n@@ -85,16 +85,16 @@ impl<T> MutableMap<int, T> for cat<T> {\n         }\n     }\n \n-    fn pop(&mut self, _k: &int) -> Option<T> { fail!() }\n+    fn pop(&mut self, _k: &int) -> Option<T> { fail2!() }\n \n-    fn swap(&mut self, _k: int, _v: T) -> Option<T> { fail!() }\n+    fn swap(&mut self, _k: int, _v: T) -> Option<T> { fail2!() }\n }\n \n impl<T> cat<T> {\n     pub fn get<'a>(&'a self, k: &int) -> &'a T {\n         match self.find(k) {\n           Some(v) => { v }\n-          None    => { fail!(\"epic fail\"); }\n+          None    => { fail2!(\"epic fail\"); }\n         }\n     }\n \n@@ -106,7 +106,7 @@ impl<T> cat<T> {\n impl<T> cat<T> {\n     fn meow(&mut self) {\n         self.meows += 1;\n-        error!(\"Meow %d\", self.meows);\n+        error2!(\"Meow {}\", self.meows);\n         if self.meows % 5 == 0 {\n             self.how_hungry += 1;\n         }"}, {"sha": "78dcdba2895294a8a615c00b91a10214e40e8f81", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,12 +23,12 @@ struct cat {\n impl cat {\n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            error2!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         }\n         else {\n-            error!(\"Not hungry!\");\n+            error2!(\"Not hungry!\");\n             return false;\n         }\n     }\n@@ -40,7 +40,7 @@ impl noisy for cat {\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        error2!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;"}, {"sha": "1433b5a8024cde23c3613ed1bbab5c56876e806c", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -24,7 +24,7 @@ struct cat {\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        error2!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;\n@@ -35,11 +35,11 @@ impl cat {\n impl cat {\n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            error2!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            error2!(\"Not hungry!\");\n             return false;\n         }\n     }"}, {"sha": "5ef0569cf10e007aab7ebf5120fa4396e2207626", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,20 +21,20 @@ impl cat {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            error2!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         }\n         else {\n-            error!(\"Not hungry!\");\n+            error2!(\"Not hungry!\");\n             return false;\n         }\n     }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        error2!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;\n@@ -58,7 +58,7 @@ impl ToStr for cat {\n \n fn print_out(thing: @ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  info!(\"%s\", actual);\n+  info2!(\"{}\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "14acd1c911506b50577fd5bc7bfc0c6b0e9267ae", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,19 +20,19 @@ impl cat {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            error2!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            error2!(\"Not hungry!\");\n             return false;\n         }\n     }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        error2!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;"}, {"sha": "6381a402cfd96051f16403ccc55a629eb855f52d", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n use std::task;\n \n fn adder(x: @int, y: @int) -> int { return *x + *y; }\n-fn failer() -> @int { fail!(); }\n+fn failer() -> @int { fail2!(); }\n pub fn main() {\n     assert!(task::try(|| {\n         adder(@2, failer()); ()"}, {"sha": "4b6b3cca334085a6d1d23a492e1f6ea68cdba954", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -40,7 +40,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> @Invokable<A> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    info!(\"a=%? b=%?\", a, b);\n+    info2!(\"a={:?} b={:?}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "63c1f4ed3d6967b9c22b38301d551aeea3207807", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,13 +15,13 @@ pub fn main() {\n     let (p, ch) = stream();\n     let _t = task::spawn(|| child(&ch) );\n     let y = p.recv();\n-    error!(\"received\");\n-    error!(y);\n+    error2!(\"received\");\n+    error2!(\"{:?}\", y);\n     assert_eq!(y, 10);\n }\n \n fn child(c: &Chan<int>) {\n-    error!(\"sending\");\n+    error2!(\"sending\");\n     c.send(10);\n-    error!(\"value sent\");\n+    error2!(\"value sent\");\n }"}, {"sha": "f395c6b7151cdaf821fa93cceb2b8fbfbb39985b", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -37,7 +37,7 @@ fn foo(x: int) -> int {\n \n pub fn main() {\n     let x: int = 2 + 2;\n-    info!(\"%?\", x);\n-    info!(\"hello, world\");\n-    info!(\"%?\", 10);\n+    info2!(\"{}\", x);\n+    info2!(\"hello, world\");\n+    info2!(\"{}\", 10);\n }"}, {"sha": "17062757286e5abaa9bd28996002f94a744c2d11", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,5 +14,5 @@\n \n fn main() {\n     // only fails if debug! evaluates its argument.\n-    debug!({ if true { fail!() } });\n+    debug2!(\"{:?}\", { if true { fail2!() } });\n }"}, {"sha": "dec79f0cb5b75ad59af25a0ddd1948843bab89dd", "filename": "src/test/run-pass/conditional-debug-macro-on.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n fn main() {\n     // exits early if debug! evaluates its arguments, otherwise it\n     // will hit the fail.\n-    debug!({ if true { return; } });\n+    debug2!(\"{:?}\", { if true { return; } });\n \n-    fail!();\n+    fail2!();\n }"}, {"sha": "0a5a42116b9821604b37de7bff73717f97bbafd7", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,18 +19,18 @@ static X: Foo = Baz;\n pub fn main() {\n     match X {\n         Baz => {}\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match Y {\n         Bar(s) => assert!(s == 2654435769),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match Z {\n         Quux(d,h) => {\n             assert_eq!(d, 0x123456789abcdef0);\n             assert_eq!(h, 0x1234);\n         }\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }\n "}, {"sha": "25e4b7189f273ed9c26310b3e04717fd3d9a27b7", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ impl E {\n     pub fn method(&self) {\n         match *self {\n             V => {}\n-            VV(*) => fail!()\n+            VV(*) => fail2!()\n         }\n     }\n }"}, {"sha": "22ec61f8544744a4199cf54a4a50345da15f6ca3", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ static C: E = V;\n fn f(a: &E) {\n     match *a {\n         V => {}\n-        VV(*) => fail!()\n+        VV(*) => fail2!()\n     }\n }\n "}, {"sha": "c75d1728ca94b7d6216304aef98e307a86ed6261", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,6 +14,6 @@ static C: &'static E = &V0;\n pub fn main() {\n     match *C {\n         V0 => (),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }"}, {"sha": "05f54d6bd7eed4576d51ec92589f388c8346941d", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ static C: E = S1 { u: 23 };\n \n pub fn main() {\n     match C {\n-        S0 { _ } => fail!(),\n+        S0 { _ } => fail2!(),\n         S1 { u } => assert!(u == 23)\n     }\n }"}, {"sha": "5b4ce1bc4efd210df3872bd0b1183f26e645f25d", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,10 +16,10 @@ static C1: E = C[1];\n pub fn main() {\n     match C0 {\n         V0 => (),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match C1 {\n         V1(n) => assert!(n == 0xDEADBEE),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }"}, {"sha": "8b905042f7ffc9db72f0ac2dd7e4e0215d984f35", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,10 +14,10 @@ static C: &'static [E] = &[V0, V1(0xDEADBEE), V0];\n pub fn main() {\n     match C[1] {\n         V1(n) => assert!(n == 0xDEADBEE),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match C[2] {\n         V0 => (),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }"}, {"sha": "cff5d4689e4d7d55732ce2846ed87cb0d4fc6155", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,10 +14,10 @@ static C: [E, ..3] = [V0, V1(0xDEADBEE), V0];\n pub fn main() {\n     match C[1] {\n         V1(n) => assert!(n == 0xDEADBEE),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match C[2] {\n         V0 => (),\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }"}, {"sha": "ac9a7fa6552cd5f41026e98be92c746eef12e5df", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,11 +19,11 @@ static X: Foo = Bar;\n pub fn main() {\n     match X {\n         Bar => {}\n-        Baz | Boo => fail!()\n+        Baz | Boo => fail2!()\n     }\n     match Y {\n         Baz => {}\n-        Bar | Boo => fail!()\n+        Bar | Boo => fail2!()\n     }\n }\n "}, {"sha": "5696c163fc571ebfb40b3ef837802ca3109fd245", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,4 +12,4 @@\n \n static i: int = 10;\n \n-pub fn main() { info!(\"%i\", i); }\n+pub fn main() { info2!(\"{}\", i); }"}, {"sha": "0260edf1182c6f28ac8db6ce4a83b34b7134f803", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,6 +15,6 @@\n #[start]\n fn start(argc: int, argv: **u8) -> int {\n     do std::rt::start(argc, argv) {\n-        info!(\"creating my own runtime is joy\");\n+        info2!(\"creating my own runtime is joy\");\n     }\n }"}, {"sha": "9a2819c2293715405004e149e82b335df59a46fc", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,4 +12,4 @@\n \n \n // -*- rust -*-\n-pub fn main() { if 1 == 1 { return; } info!(\"Paul is dead\"); }\n+pub fn main() { if 1 == 1 { return; } info2!(\"Paul is dead\"); }"}, {"sha": "bc0b51c6b5d51f8f68bfa910d4626f629d3c7f06", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let x = @mut 5; *x = 1000; info!(\"%?\", *x); }\n+pub fn main() { let x = @mut 5; *x = 1000; info2!(\"{:?}\", *x); }"}, {"sha": "940ddc31f46a7534603785dff293c6e907959df6", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,19 +14,19 @@\n \n pub struct FailCmp;\n impl Eq for FailCmp {\n-    fn eq(&self, _: &FailCmp) -> bool { fail!(\"eq\") }\n+    fn eq(&self, _: &FailCmp) -> bool { fail2!(\"eq\") }\n }\n \n impl Ord for FailCmp {\n-    fn lt(&self, _: &FailCmp) -> bool { fail!(\"lt\") }\n+    fn lt(&self, _: &FailCmp) -> bool { fail2!(\"lt\") }\n }\n \n impl TotalEq for FailCmp {\n-    fn equals(&self, _: &FailCmp) -> bool { fail!(\"equals\") }\n+    fn equals(&self, _: &FailCmp) -> bool { fail2!(\"equals\") }\n }\n \n impl TotalOrd for FailCmp {\n-    fn cmp(&self, _: &FailCmp) -> Ordering { fail!(\"cmp\") }\n+    fn cmp(&self, _: &FailCmp) -> Ordering { fail2!(\"cmp\") }\n }\n \n #[deriving(Eq,Ord,TotalEq,TotalOrd)]"}, {"sha": "ade01142c35b7266866b8b0adc8e8d936e486f9b", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -3,9 +3,9 @@\n #[allow(unreachable_code)];\n \n fn f() {\n-    fail!();\n+    fail2!();\n \n-    let _x: int = fail!();\n+    let _x: int = fail2!();\n }\n \n pub fn main() {"}, {"sha": "a36aaaf936de9d2a5ee9a344b5d9a9fc74f971ba", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -27,7 +27,7 @@ fn is_aligned<T>(ptr: &T) -> bool {\n pub fn main() {\n     let x = Some(0u64);\n     match x {\n-        None => fail!(),\n+        None => fail2!(),\n         Some(ref y) => assert!(is_aligned(y))\n     }\n }"}, {"sha": "71f0b0f9475a576e2d4d365d4d1a4adf3717cfb3", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n     };\n     assert_eq!(expected, V as u64);\n     assert_eq!(expected, C as u64);\n-    assert_eq!(fmt!(\"%?\", V), ~\"V\");\n-    assert_eq!(fmt!(\"%?\", C), ~\"V\");\n+    assert_eq!(format!(\"{:?}\", V), ~\"V\");\n+    assert_eq!(format!(\"{:?}\", C), ~\"V\");\n }"}, {"sha": "334047d6ca693ae93b9072e32d2c6be82b245566", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,6 +19,6 @@ pub fn main() {\n     match Cons(10, @Nil) {\n         Cons(10, _) => {}\n         Nil => {}\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }"}, {"sha": "145f04009d16c1fbffa99d81a488499d977c1d38", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,8 +14,8 @@ pub fn main() {\n     let v = &\"hello\";\n     let y : &str = &\"there\";\n \n-    info!(x);\n-    info!(y);\n+    info2!(\"{}\", x);\n+    info2!(\"{}\", y);\n \n     assert_eq!(x[0], 'h' as u8);\n     assert_eq!(x[4], 'o' as u8);\n@@ -30,29 +30,29 @@ pub fn main() {\n     let c = &\"cccc\";\n     let cc = &\"ccccc\";\n \n-    info!(a);\n+    info2!(\"{}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    info!(b);\n+    info2!(\"{}\", b);\n \n     assert!(a < c);\n     assert!(a <= c);\n     assert!(a != c);\n     assert!(c >= a);\n     assert!(c > a);\n \n-    info!(c);\n+    info2!(\"{}\", c);\n \n     assert!(c < cc);\n     assert!(c <= cc);\n     assert!(c != cc);\n     assert!(cc >= c);\n     assert!(cc > c);\n \n-    info!(cc);\n+    info2!(\"{}\", cc);\n }"}, {"sha": "32de1ad79b2658e653dcd4d5e72f46bcdb097764", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -22,15 +22,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    info!(a);\n+    info2!(\"{:?}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    info!(b);\n+    info2!(\"{:?}\", b);\n \n     assert!(b < c);\n     assert!(b <= c);\n@@ -44,13 +44,13 @@ pub fn main() {\n     assert!(c >= a);\n     assert!(c > a);\n \n-    info!(c);\n+    info2!(\"{:?}\", c);\n \n     assert!(a < cc);\n     assert!(a <= cc);\n     assert!(a != cc);\n     assert!(cc >= a);\n     assert!(cc > a);\n \n-    info!(cc);\n+    info2!(\"{:?}\", cc);\n }"}, {"sha": "9147596b0db759547d402f9d023a95a909a137b8", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,7 +13,7 @@ mod foo {\n         pub fn y() { super::super::foo::x(); }\n     }\n \n-    pub fn x() { info!(\"x\"); }\n+    pub fn x() { info2!(\"x\"); }\n }\n \n pub fn main() { self::foo::bar::y(); }"}, {"sha": "b06323741a5c2f2581d370a767262ac33a8f7848", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ pub mod foo {\n }\n \n pub mod bar {\n-    pub fn x() { info!(\"x\"); }\n+    pub fn x() { info2!(\"x\"); }\n }\n \n pub fn main() { foo::x(); }"}, {"sha": "710cab50fba693ef92c89deffa0edf1f0192f3b8", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,8 +21,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        info!(*b1);\n-        info!(*b2);\n+        info2!(\"{}\", *b1);\n+        info2!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(@true, compare_box);"}, {"sha": "f22ef2138ff82cab36313cb42014c696c1dfc680", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,8 +20,8 @@ fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        info!(*b1);\n-        info!(*b2);\n+        info2!(\"{}\", *b1);\n+        info2!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(~true, compare_box);"}, {"sha": "b19b9ceaa00b90bcf294061d789b965fab4d6883", "filename": "src/test/run-pass/expr-if-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,6 +14,6 @@ pub fn main() {\n     let _x = if true {\n         10\n     } else {\n-        if true { fail!() } else { fail!() }\n+        if true { fail2!() } else { fail2!() }\n     };\n }"}, {"sha": "966a1db1d0e6091af58a43cdb4d70d16810c9adb", "filename": "src/test/run-pass/expr-if-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test_if_fail() { let x = if false { fail!() } else { 10 }; assert!((x == 10)); }\n+fn test_if_fail() { let x = if false { fail2!() } else { 10 }; assert!((x == 10)); }\n \n fn test_else_fail() {\n-    let x = if true { 10 } else { fail!() };\n+    let x = if true { 10 } else { fail2!() };\n     assert_eq!(x, 10);\n }\n \n fn test_elseif_fail() {\n-    let x = if false { 0 } else if false { fail!() } else { 10 };\n+    let x = if false { 0 } else if false { fail2!() } else { 10 };\n     assert_eq!(x, 10);\n }\n "}, {"sha": "6f638758ed882cbf709ceeb22b6207083bfae43a", "filename": "src/test/run-pass/expr-match-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,13 +15,13 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { @100 } _ => fail!(\"wat\") };\n+    let res = match true { true => { @100 } _ => fail2!(\"wat\") };\n     assert_eq!(*res, 100);\n }\n \n fn test_str() {\n     let res = match true { true => { ~\"happy\" },\n-                         _ => fail!(\"not happy at all\") };\n+                         _ => fail2!(\"not happy at all\") };\n     assert_eq!(res, ~\"happy\");\n }\n "}, {"sha": "418031243ee5e37cb908890930659f99a01f4bc6", "filename": "src/test/run-pass/expr-match-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     let _x =\n         match true {\n           true => { 10 }\n-          false => { match true { true => { fail!() } false => { fail!() } } }\n+          false => { match true { true => { fail2!() } false => { fail2!() } } }\n         };\n }"}, {"sha": "c1081561b6f123a091f7db39cd5172243142ab69", "filename": "src/test/run-pass/expr-match-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn test_simple() {\n-    let r = match true { true => { true } false => { fail!() } };\n+    let r = match true { true => { true } false => { fail2!() } };\n     assert_eq!(r, true);\n }\n \n fn test_box() {\n-    let r = match true { true => { ~[10] } false => { fail!() } };\n+    let r = match true { true => { ~[10] } false => { fail2!() } };\n     assert_eq!(r[0], 10);\n }\n "}, {"sha": "e70a18a7f6d80ff595e8617fcdb8f45d843141b5", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@\n type compare<T> = &'static fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n-    let actual: @T = match true { true => { expected }, _ => fail!() };\n+    let actual: @T = match true { true => { expected }, _ => fail2!() };\n     assert!((eq(expected, actual)));\n }\n "}, {"sha": "92e13e36d073a358e761b5f070f62e303544e32a", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n type compare<T> = &'static fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };\n+    let actual: T = match true { true => { expected.clone() }, _ => fail2!(\"wat\") };\n     assert!((eq(expected, actual)));\n }\n "}, {"sha": "e4a6fa516c5bd43403280df0f2fd42392d64f69d", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ type compare<T> = &'static fn(~T, ~T) -> bool;\n fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {\n         true => { expected.clone() },\n-        _ => fail!(\"wat\")\n+        _ => fail2!(\"wat\")\n     };\n     assert!((eq(expected, actual)));\n }"}, {"sha": "09278fad75ce90282781e069f009e393ce072370", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ type compare<'self, T> = &'self fn(T, T) -> bool;\n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {\n         true => expected.clone(),\n-        _ => fail!(\"wat\")\n+        _ => fail2!(\"wat\")\n     };\n     assert!((eq(expected, actual)));\n }"}, {"sha": "d98cd130022fed47f4e3620f1cbd653b8510e882", "filename": "src/test/run-pass/expr-match-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-  let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };\n+  let actual: T = match true { true => { expected.clone() }, _ => fail2!(\"wat\") };\n     assert!((eq(expected, actual)));\n }\n "}, {"sha": "7fa58a535b0a45cb82c2ea8ba11d6860273e6957", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@\n struct R { i: int }\n \n fn test_rec() {\n-    let rs = match true { true => R {i: 100}, _ => fail!() };\n+    let rs = match true { true => R {i: 100}, _ => fail2!() };\n     assert_eq!(rs.i, 100);\n }\n "}, {"sha": "7f610d1babd87b68e8627ca41f3b1ecf9b967390", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { ~100 }, _ => fail!() };\n+    let res = match true { true => { ~100 }, _ => fail2!() };\n     assert_eq!(*res, 100);\n }\n "}, {"sha": "41ae128626befd76a39b331afbf72cb1e8228a4b", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -31,13 +31,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n #[fixed_stack_segment]\n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = count(1000u);\n-    info!(\"result = %?\", result);\n+    info2!(\"result = {}\", result);\n     assert_eq!(result, 1000u);\n }"}, {"sha": "0490949e8a475908bab733487f8720859513a255", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -32,7 +32,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n #[fixed_stack_segment] #[inline(never)]\n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -42,7 +42,7 @@ pub fn main() {\n     // has a large stack)\n     do task::spawn {\n         let result = count(1000u);\n-        info!(\"result = %?\", result);\n+        info2!(\"result = {}\", result);\n         assert_eq!(result, 1000u);\n     };\n }"}, {"sha": "733625f492ef9184a1ff41ef6bd1d8fc7e5dbfbd", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -31,13 +31,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n #[fixed_stack_segment] #[inline(never)]\n fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    info!(\"result = %?\", result);\n+    info2!(\"result = {}\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "74b1ed9a5c42301ce64a411d9c95fb7ad596ea2d", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -36,7 +36,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n #[fixed_stack_segment] #[inline(never)]\n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -46,7 +46,7 @@ pub fn main() {\n     // has a large stack)\n     do task::spawn {\n         let result = count(12u);\n-        info!(\"result = %?\", result);\n+        info2!(\"result = {}\", result);\n         assert_eq!(result, 2048u);\n     };\n }"}, {"sha": "3367b795462b3ad95bf76fad6f171d2fc4577d39", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,13 +16,13 @@ extern mod externcallback(vers = \"0.1\");\n #[fixed_stack_segment] #[inline(never)]\n fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = %?\", n);\n+        info2!(\"n = {}\", n);\n         externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    info!(\"result = %?\", result);\n+    info2!(\"result = {}\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "7e71d416b55a8b701205c00b459a0ddfe73e0a81", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -41,7 +41,7 @@ pub fn main() {\n     do 10u.times {\n         do task::spawn {\n             let result = count(5u);\n-            info!(\"result = %?\", result);\n+            info2!(\"result = {}\", result);\n             assert_eq!(result, 16u);\n         };\n     }"}, {"sha": "f0379e1dac1c9e7edbd1cdf71a86c8bc5ddb1b04", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@\n fn f(x: int) -> int {\n     // info!(\"in f:\");\n \n-    info!(x);\n+    info2!(\"{}\", x);\n     if x == 1 {\n         // info!(\"bottoming out\");\n \n@@ -26,7 +26,7 @@ fn f(x: int) -> int {\n         let y: int = x * f(x - 1);\n         // info!(\"returned\");\n \n-        info!(y);\n+        info2!(\"{}\", y);\n         return y;\n     }\n }"}, {"sha": "be945e93ec9d0c945cea577c17761908c5ef4791", "filename": "src/test/run-pass/fat-arrow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ enum color {\n }\n \n pub fn main() {\n-    error!(match red {\n+    error2!(\"{}\", match red {\n         red => { 1 }\n         green => { 2 }\n         blue => { 3 }"}, {"sha": "5193d1e559d2990c629c96a217fa9d866eae63ff", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n     fn foo(n: float) -> float { return n + 0.12345; }\n     let n: float = 0.1;\n     let m: float = foo(n);\n-    info!(m);\n+    info2!(\"{}\", m);\n }"}, {"sha": "1418255d601ca9134bcdecea25d879b267a73107", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     let pi = 3.1415927;\n-    info!(-pi * (pi + 2.0 / pi) - pi * 5.0);\n+    info2!(\"{:?}\", -pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n-        info!(\"yes\");\n+        info2!(\"yes\");\n     }\n }"}, {"sha": "be0f686c5a4031a7c526e084f013515c75ed4210", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    info!(\"This is a bare function\");\n+    info2!(\"This is a bare function\");\n }\n \n pub fn main() {"}, {"sha": "9599c5852df89e445758714a3d5e2354ee93b39a", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let x: ~[int] = ~[]; for _ in x.iter() { fail!(\"moop\"); } }\n+pub fn main() { let x: ~[int] = ~[]; for _ in x.iter() { fail2!(\"moop\"); } }"}, {"sha": "6e20bb20bd9365401f1dcb1f31227a0e474f882d", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n     let mut j: int = 0;\n     do pairs() |p| {\n         let (_0, _1) = p;\n-        info!(_0);\n-        info!(_1);\n+        info2!(\"{}\", _0);\n+        info2!(\"{}\", _1);\n         assert_eq!(_0 + 10, i);\n         i += 1;\n         j = _1;"}, {"sha": "b5fa186902e39d7697e61f3091a4c88e6d91b7b3", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,13 +14,13 @@\n // -*- rust -*-\n pub fn main() {\n     let mut sum: int = 0;\n-    do first_ten |i| { info!(\"main\"); info!(i); sum = sum + i; }\n-    info!(\"sum\");\n-    info!(sum);\n+    do first_ten |i| { info2!(\"main\"); info2!(\"{}\", i); sum = sum + i; }\n+    info2!(\"sum\");\n+    info2!(\"{}\", sum);\n     assert_eq!(sum, 45);\n }\n \n fn first_ten(it: &fn(int)) {\n     let mut i: int = 0;\n-    while i < 10 { info!(\"first_ten\"); it(i); i = i + 1; }\n+    while i < 10 { info2!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "b4412db1a5881e7ad1358af049b3e8b6ce695f15", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,6 +15,6 @@ fn id<T>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    info!(*actual);\n+    info2!(\"{:?}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "ab50b70b1b8c8fe0bb5d11846ca2cb95c4430f7d", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,6 +15,6 @@ fn id<T:Send>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(expected.clone());\n-    info!(*actual);\n+    info2!(\"{:?}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "7ce3dc7a03da73cf1d2333f5491f6a6effc2dbb6", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -25,8 +25,8 @@ fn f<T:Clone>(t: T) -> Pair<T> {\n \n pub fn main() {\n     let b = f::<int>(10);\n-    info!(b.a);\n-    info!(b.b);\n+    info2!(\"{:?}\" ,b.a);\n+    info2!(\"{:?}\", b.b);\n     assert_eq!(b.a, 10);\n     assert_eq!(b.b, 10);\n }"}, {"sha": "c5d6d23d9487c435da0fa4e0f60fd120efba1799", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,4 +12,4 @@\n \n fn f<T>(x: @T) -> @T { return x; }\n \n-pub fn main() { let x = f(@3); info!(*x); }\n+pub fn main() { let x = f(@3); info2!(\"{:?}\", *x); }"}, {"sha": "d4ba0ddfc8e4424a01e425b39aaef27cdebecbd3", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,4 +11,4 @@\n \n fn f<T>(x: ~T) -> ~T { return x; }\n \n-pub fn main() { let x = f(~3); info!(*x); }\n+pub fn main() { let x = f(~3); info2!(\"{:?}\", *x); }"}, {"sha": "4d8b382b511ea512eaa92d6da90df6df877601fa", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,14 +23,14 @@ pub fn main() {\n     let p: Triple = Triple {x: 65, y: 66, z: 67};\n     let mut q: Triple = Triple {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    info!(y);\n+    info2!(\"{}\", y);\n     assert_eq!(x, y);\n     b = id::<char>(a);\n-    info!(b);\n+    info2!(\"{}\", b);\n     assert_eq!(a, b);\n     q = id::<Triple>(p);\n     x = p.z;\n     y = q.z;\n-    info!(y);\n+    info2!(\"{}\", y);\n     assert_eq!(x, y);\n }"}, {"sha": "7b3b11189746a213adb6cc3de71b80f553606e97", "filename": "src/test/run-pass/generic-tag-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n     let mut hit = false;\n-    match f { arm::<T>(_x) => { info!(\"in arm\"); hit = true; } }\n+    match f { arm::<T>(_x) => { info2!(\"in arm\"); hit = true; } }\n     assert!((hit));\n }\n "}, {"sha": "739eb9f0aca3c283d5bd9c3ffba4820dcf626463", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,12 +18,12 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    match nop { some::<int>(n) => { info!(n); assert!((n == 5)); } }\n+    match nop { some::<int>(n) => { info2!(\"{:?}\", n); assert!((n == 5)); } }\n     let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n-        info!(t.x);\n-        info!(t.y);\n+        info2!(\"{:?}\", t.x);\n+        info2!(\"{:?}\", t.y);\n         assert_eq!(t.x, 17);\n         assert_eq!(t.y, 42);\n       }"}, {"sha": "5143676f34a5b234d2bc8e75c3987b06735d231d", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,7 +12,7 @@\n \n fn mk() -> int { return 1; }\n \n-fn chk(a: int) { info!(a); assert!((a == 1)); }\n+fn chk(a: int) { info2!(\"{}\", a); assert!((a == 1)); }\n \n fn apply<T>(produce: extern fn() -> T,\n             consume: extern fn(T)) {"}, {"sha": "f9f5da51196b5bd8f73d69d80695bff8c06253e7", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    info!(get_third((1, 2, 3)));\n+    info2!(\"{:?}\", get_third((1, 2, 3)));\n     assert_eq!(get_third((1, 2, 3)), 3);\n     assert_eq!(get_third((5u8, 6u8, 7u8)), 7u8);\n }"}, {"sha": "1f98b445b169dd3534dbbc0addbcf75446e8a7fd", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     match getopts(args, opts) {\n         Ok(ref m)  =>\n             assert!(!m.opt_present(\"b\")),\n-        Err(ref f) => fail!((*f).clone().to_err_msg())\n+        Err(ref f) => fail2!(\"{:?}\", (*f).clone().to_err_msg())\n     };\n \n }"}, {"sha": "bf79768c7be1a4f902f34dd717ecf478f88e9ab4", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -47,11 +47,11 @@ mod map_reduce {\n                 return;\n             }\n             let (pp, cc) = stream();\n-            error!(\"sending find_reducer\");\n+            error2!(\"sending find_reducer\");\n             ctrl.send(find_reducer(key.as_bytes().to_owned(), cc));\n-            error!(\"receiving\");\n+            error2!(\"receiving\");\n             let c = pp.recv();\n-            error!(c);\n+            error2!(\"{:?}\", c);\n             im.insert(key, c);\n         }\n "}, {"sha": "768f3431832da3adaabc7b40ed3bc6876899216c", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,6 +11,6 @@\n \n \n pub fn main() {\n-    let i: int = if false { fail!() } else { 5 };\n-    info!(i);\n+    let i: int = if false { fail2!() } else { 5 };\n+    info2!(\"{:?}\", i);\n }"}, {"sha": "0fd5fc01d17623131e623ecb6378d12d4daac68e", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,9 +16,9 @@ fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        info!(x);\n+        info2!(\"{}\", x);\n     } else {\n-        fail!();\n+        fail2!();\n     }\n }\n "}, {"sha": "f71bdb4e182da8d8f788ec24f89782f1388165ba", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,10 +14,10 @@ use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n \n mod module_of_many_things {\n-    pub fn f1() { info!(\"f1\"); }\n-    pub fn f2() { info!(\"f2\"); }\n-    fn f3() { info!(\"f3\"); }\n-    pub fn f4() { info!(\"f4\"); }\n+    pub fn f1() { info2!(\"f1\"); }\n+    pub fn f2() { info2!(\"f2\"); }\n+    fn f3() { info2!(\"f3\"); }\n+    pub fn f4() { info2!(\"f4\"); }\n }\n \n mod dug {\n@@ -26,8 +26,8 @@ mod dug {\n             pub mod and {\n                 pub mod too {\n                     pub mod deep {\n-                        pub fn nameless_fear() { info!(\"Boo!\"); }\n-                        pub fn also_redstone() { info!(\"Whatever.\"); }\n+                        pub fn nameless_fear() { info2!(\"Boo!\"); }\n+                        pub fn also_redstone() { info2!(\"Whatever.\"); }\n                     }\n                 }\n             }"}, {"sha": "eff085e687dfcba2f1c91fa1cfce0f73132972fb", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n mod foo {\n-    pub fn x(y: int) { info!(y); }\n+    pub fn x(y: int) { info2!(\"{:?}\", y); }\n }\n \n mod bar {"}, {"sha": "3ca64ce199ec56085791db2859bd677edbe06918", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { info2!(\"bar\"); }\n }\n \n pub fn main() { bar(); }"}, {"sha": "10f6d87bf4cfdc18ed9a4e939a9c636f62c82bf0", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ use baz::zed::bar;\n \n mod baz {\n     pub mod zed {\n-        pub fn bar() { info!(\"bar2\"); }\n+        pub fn bar() { info2!(\"bar2\"); }\n     }\n }\n "}, {"sha": "d453306317bb78c2e4ae906d2a7e41ffe9d46837", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { info2!(\"bar\"); }\n }\n \n pub fn main() { let _zed = 42; bar(); }"}, {"sha": "00c5f35c54239fcf9c38cfedcc24e77d15574fb3", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ use foo::bar;\n mod foo {\n     pub use foo::zed::bar;\n     pub mod zed {\n-        pub fn bar() { info!(\"foo\"); }\n+        pub fn bar() { info2!(\"foo\"); }\n     }\n }\n "}, {"sha": "150a89f61769de05d6d1a45dcc54da7fff2f8856", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ use bar::baz;\n \n mod foo {\n     pub mod zed {\n-        pub fn baz() { info!(\"baz\"); }\n+        pub fn baz() { info2!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "e9241882f655972a2f607f7954742e18c3f523d5", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ use bar::baz;\n \n mod foo {\n     pub mod zed {\n-        pub fn baz() { info!(\"baz\"); }\n+        pub fn baz() { info2!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "9b0c512d4f1f45d16ab11a2cee8fdcda2454343a", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n-    pub fn x(y: int) { info!(y); }\n+    pub fn x(y: int) { info2!(\"{}\", y); }\n }\n \n pub fn main() { x(10); z(10); }"}, {"sha": "7e3547ba7f3298fea665ea7521b191ab1c241e1c", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n // -*- rust -*-\n mod inner {\n     pub mod inner2 {\n-        pub fn hello() { info!(\"hello, modular world\"); }\n+        pub fn hello() { info2!(\"hello, modular world\"); }\n     }\n     pub fn hello() { inner2::hello(); }\n }"}, {"sha": "05032dda759b0274646ed584c9ba0ce62e8d297e", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,11 +20,11 @@ pub fn main() {\n     assert_eq!(v[3i8], 3);\n     assert_eq!(v[3u32], 3);\n     assert_eq!(v[3i32], 3);\n-    info!(v[3u8]);\n+    info2!(\"{}\", v[3u8]);\n     assert_eq!(s[3u], 'd' as u8);\n     assert_eq!(s[3u8], 'd' as u8);\n     assert_eq!(s[3i8], 'd' as u8);\n     assert_eq!(s[3u32], 'd' as u8);\n     assert_eq!(s[3i32], 'd' as u8);\n-    info!(s[3u8]);\n+    info2!(\"{}\", s[3u8]);\n }"}, {"sha": "17444e657087c73641502f94b01b0d1d2399730c", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let early_error: &'static fn(&str) -> !  = |_msg| { fail!() };\n+    let early_error: &'static fn(&str) -> !  = |_msg| { fail2!() };\n }"}, {"sha": "de62c57ab9fa24b52360aa5a9960091d0b02ba66", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,5 +15,5 @@ use std::hashmap::HashMap;\n pub fn main() {\n     let mut m = HashMap::new();\n     m.insert(\"foo\".as_bytes().to_owned(), \"bar\".as_bytes().to_owned());\n-    error!(m);\n+    error2!(\"{:?}\", m);\n }"}, {"sha": "4ad7d9500f67465d7da1553650e86705e3309838", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -27,6 +27,6 @@ pub fn main() {\n         break;\n     }\n \n-    error!(\"%?\", x);\n+    error2!(\"{:?}\", x);\n     assert_eq!(x, 42);\n }"}, {"sha": "cf8d3dc642c2ba253b1ee0b6704c5e86ac081c62", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ struct foo<A> {\n \n impl<A> foo<A> {\n    pub fn bar<B,C:clam<A>>(&self, _c: C) -> B {\n-     fail!();\n+     fail2!();\n    }\n }\n "}, {"sha": "54a8730fa1bb29a092ec9242ee9dd7f5c80166c4", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ trait clam<A> { }\n struct foo(int);\n \n impl foo {\n-    pub fn bar<B,C:clam<B>>(&self, _c: C) -> B { fail!(); }\n+    pub fn bar<B,C:clam<B>>(&self, _c: C) -> B { fail2!(); }\n }\n \n pub fn main() { }"}, {"sha": "5882edf18803e78785e3672b383376360566a809", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,7 +20,8 @@ struct E {\n }\n \n impl A for E {\n-  fn b<F,G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n+  fn b<F,G>(_x: F) -> F { fail2!() }\n+  //~^ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n pub fn main() {}"}, {"sha": "e905c895c3510d7bc6dab93dd46b9dfe05d853e0", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,7 +13,7 @@ struct cat {\n }\n \n fn meow() {\n-    error!(\"meow\")\n+    error2!(\"meow\")\n }\n \n fn cat() -> cat {"}, {"sha": "617f98cdb5f19e0b4cdca7295966a6889fbce29c", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -52,9 +52,9 @@ pub mod pipes {\n     }\n \n     mod rusti {\n-      pub fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail!(); }\n-      pub fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail!(); }\n-      pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail!(); }\n+      pub fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail2!(); }\n+      pub fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail2!(); }\n+      pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail2!(); }\n     }\n \n     // We should consider moving this to ::std::unsafe, although I\n@@ -88,7 +88,7 @@ pub mod pipes {\n             // The receiver will eventually clean this up.\n             unsafe { forget(p); }\n           }\n-          full => { fail!(\"duplicate send\") }\n+          full => { fail2!(\"duplicate send\") }\n           blocked => {\n \n             // The receiver will eventually clean this up.\n@@ -130,7 +130,7 @@ pub mod pipes {\n           }\n           full => {\n             // This is impossible\n-            fail!(\"you dun goofed\")\n+            fail2!(\"you dun goofed\")\n           }\n           terminated => {\n             // I have to clean up, use drop_glue\n@@ -147,7 +147,7 @@ pub mod pipes {\n           }\n           blocked => {\n             // this shouldn't happen.\n-            fail!(\"terminating a blocked packet\")\n+            fail2!(\"terminating a blocked packet\")\n           }\n           terminated | full => {\n             // I have to clean up, use drop_glue\n@@ -232,7 +232,7 @@ pub mod pingpong {\n             let _addr : *::pipes::send_packet<pong> = match &p {\n               &ping(ref x) => { cast::transmute(x) }\n             };\n-            fail!()\n+            fail2!()\n         }\n     }\n \n@@ -241,7 +241,7 @@ pub mod pingpong {\n             let _addr : *::pipes::send_packet<ping> = match &p {\n               &pong(ref x) => { cast::transmute(x) }\n             };\n-            fail!()\n+            fail2!()\n         }\n     }\n \n@@ -265,7 +265,7 @@ pub mod pingpong {\n         pub fn do_pong(c: pong) -> (ping, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n-                fail!(\"sender closed the connection\")\n+                fail2!(\"sender closed the connection\")\n             }\n             (pingpong::liberate_pong(packet.unwrap()), ())\n         }\n@@ -280,7 +280,7 @@ pub mod pingpong {\n         pub fn do_ping(c: ping) -> (pong, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n-                fail!(\"sender closed the connection\")\n+                fail2!(\"sender closed the connection\")\n             }\n             (pingpong::liberate_ping(packet.unwrap()), ())\n         }\n@@ -295,16 +295,16 @@ pub mod pingpong {\n \n fn client(chan: pingpong::client::ping) {\n     let chan = pingpong::client::do_ping(chan);\n-    error!(~\"Sent ping\");\n+    error2!(\"Sent ping\");\n     let (_chan, _data) = pingpong::client::do_pong(chan);\n-    error!(~\"Received pong\");\n+    error2!(\"Received pong\");\n }\n \n fn server(chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n-    error!(~\"Received ping\");\n+    error2!(\"Received ping\");\n     let _chan = pingpong::server::do_pong(chan);\n-    error!(~\"Sent pong\");\n+    error2!(\"Sent pong\");\n }\n \n pub fn main() {"}, {"sha": "8fad80ce238eecd4043636fafdbdfd544b49a90d", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@\n use std::hashmap::HashMap;\n \n fn add_interfaces(managed_ip: ~str, device: HashMap<~str, int>)  {\n-     error!(\"%s, %?\", managed_ip, device.get(&~\"interfaces\"));\n+     error2!(\"{}, {:?}\", managed_ip, device.get(&~\"interfaces\"));\n }\n \n pub fn main() {}"}, {"sha": "efcdbaa482c0784d33a735c02f60fe686f17cc51", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,7 +28,7 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n             (*s).clone()\n         }\n         option::Some(value) => {\n-            error!(\"%s was expected to be a string but is a %?\", key, value);\n+            error2!(\"{} was expected to be a string but is a {:?}\", key, value);\n             default\n         }\n         option::None => {\n@@ -42,12 +42,12 @@ fn add_interface(_store: int, managed_ip: ~str, data: extra::json::Json) -> (~st\n     match &data {\n         &extra::json::Object(ref interface) => {\n             let name = lookup((*interface).clone(), ~\"ifDescr\", ~\"\");\n-            let label = fmt!(\"%s-%s\", managed_ip, name);\n+            let label = format!(\"{}-{}\", managed_ip, name);\n \n             (label, bool_value(false))\n         }\n         _ => {\n-            error!(\"Expected dict for %s interfaces but found %?\", managed_ip, data);\n+            error2!(\"Expected dict for {} interfaces but found {:?}\", managed_ip, data);\n             (~\"gnos:missing-interface\", bool_value(true))\n         }\n     }\n@@ -65,7 +65,7 @@ fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, extra::jso\n         }\n         _ =>\n         {\n-            error!(\"Expected list for %s interfaces but found %?\", managed_ip,\n+            error2!(\"Expected list for {} interfaces but found {:?}\", managed_ip,\n                    device.get(&~\"interfaces\"));\n             ~[]\n         }"}, {"sha": "f2a4692d396516ec2c19bfe7eb7f45bda936153b", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -55,8 +55,8 @@ fn square_from_char(c: char) -> square {\n       '.'  => { earth }\n       ' '  => { empty }\n       _ => {\n-        error!(\"invalid square: %?\", c);\n-        fail!()\n+        error2!(\"invalid square: {:?}\", c);\n+        fail2!()\n       }\n     }\n }"}, {"sha": "fff89381dbe3746f773e559ace49e504a1b3dd2c", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -29,6 +29,6 @@ pub fn main() {\n     //  x.f();\n     // y.f();\n     // (*z).f();\n-    error!(\"ok so far...\");\n+    error2!(\"ok so far...\");\n     z.f(); //segfault\n }"}, {"sha": "76cb182b0b6a6a56ef2839155bcf32387c896837", "filename": "src/test/run-pass/issue-3109.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3109.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    error!((\"hi there!\", \"you\"));\n+    error2!(\"{:?}\", (\"hi there!\", \"you\"));\n }"}, {"sha": "f058a5cbfd1fe0cd63dd95f8d87707d2f25a3644", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -26,7 +26,8 @@ fn check_strs(actual: &str, expected: &str) -> bool\n {\n         if actual != expected\n         {\n-            io::stderr().write_line(fmt!(\"Found %s, but expected %s\", actual, expected));\n+            io::stderr().write_line(format!(\"Found {}, but expected {}\", actual,\n+                                            expected));\n             return false;\n         }\n         return true;\n@@ -39,6 +40,6 @@ pub fn main()\n \n         let t = Text(@~\"foo\");\n         let u = Section(@~[~\"alpha\"], true, @~[t], @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\");\n-        let v = fmt!(\"%?\", u);    // this is the line that causes the seg fault\n+        let v = format!(\"{:?}\", u);    // this is the line that causes the seg fault\n         assert!(v.len() > 0);\n }"}, {"sha": "55273f7029b6f1fbbfd2a0128c5812876d5b893b", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -150,7 +150,7 @@ impl Canvas for AsciiArt {\n // this little helper.\n pub fn check_strs(actual: &str, expected: &str) -> bool {\n     if actual != expected {\n-        io::stderr().write_line(fmt!(\"Found:\\n%s\\nbut expected\\n%s\", actual, expected));\n+        io::stderr().write_line(format!(\"Found:\\n{}\\nbut expected\\n{}\", actual, expected));\n         return false;\n     }\n     return true;"}, {"sha": "c0bd5aa2a688333a3e9489e60c6cc38f175fdca1", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,7 +18,7 @@ fn foo(name: ~str, samples_chan: Chan<Msg>) {\n             |buffer|\n             {\n                 for i in range(0u, buffer.len()) {\n-                    error!(\"%?: %f\", i, buffer[i])\n+                    error2!(\"{}: {}\", i, buffer[i])\n                 }\n             };\n         samples_chan.send(GetSamples(name.clone(), callback));"}, {"sha": "ef9cab8754126ff3c2c1f8b2f2f1f1eededcafe0", "filename": "src/test/run-pass/issue-3895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3895.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n \n     match BadChar {\n         _ if true => BadChar,\n-        BadChar | BadSyntax => fail!() ,\n+        BadChar | BadSyntax => fail2!() ,\n     };\n }"}, {"sha": "98b6a9c5f44b2c5ea4bb7dd1b00cadd44fb361fb", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,7 +20,7 @@ fn exec<T: JD>() {\n     let doc = json::from_str(\"\").unwrap();\n     let mut decoder = json::Decoder(doc);\n     let _v: T = Decodable::decode(&mut decoder);\n-    fail!()\n+    fail2!()\n }\n \n pub fn main() {}"}, {"sha": "ac4b665e8fc699f86cd0b6a8e8d76edc976e6e6a", "filename": "src/test/run-pass/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -34,7 +34,7 @@ impl Debuggable for Thing {\n \n fn print_name(x: &Debuggable)\n {\n-    println(fmt!(\"debug_name = %s\", x.debug_name()));\n+    println!(\"debug_name = {}\", x.debug_name());\n }\n \n pub fn main() {"}, {"sha": "b0560b4e637b63dd91ee990e8c819e19e151a30d", "filename": "src/test/run-pass/issue-5275.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,14 +12,14 @@\n \n fn foo(self_: &A) -> int {\n     if true {\n-        fail!()\n+        fail2!()\n     } else {\n         *bar(self_.bar)\n     }\n }\n \n fn bar<'r>(_: &'r mut int) -> &'r int {\n-    fail!()\n+    fail2!()\n }\n \n struct A {"}, {"sha": "eeccac99c9809b9879694a45ead02129d13c291a", "filename": "src/test/run-pass/issue-5666.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5666.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,7 +18,7 @@ trait Barks {\n \n impl Barks for Dog {\n     fn bark(&self) -> ~str {\n-        return fmt!(\"woof! (I'm %s)\", self.name);\n+        return format!(\"woof! (I'm {})\", self.name);\n     }\n }\n \n@@ -29,7 +29,7 @@ pub fn main() {\n     let barker = [snoopy as ~Barks, bubbles as ~Barks];\n \n     for pup in barker.iter() {\n-        println(fmt!(\"%s\", pup.bark()));\n+        println!(\"{}\", pup.bark());\n     }\n }\n "}, {"sha": "869374d6ad4fb64fbd917d674b6ce679bae1359e", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,6 +21,6 @@ struct X { vec: &'static [int] }\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n pub fn main() {\n     for &v in V.iter() {\n-        println(fmt!(\"%?\", v.vec));\n+        println!(\"{:?}\", v.vec);\n     }\n }"}, {"sha": "918e43d040cb595084a8f28da327e5721224813e", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -24,7 +24,7 @@ trait Inner {\n }\n \n impl Inner for int {\n-    fn print(&self) { print(fmt!(\"Inner: %d\\n\", *self)); }\n+    fn print(&self) { print(format!(\"Inner: {}\\n\", *self)); }\n }\n \n struct Outer<'self> {"}, {"sha": "dbaa5460fd090a7b27855c73d6885a4ea22074b5", "filename": "src/test/run-pass/issue-5926.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5926.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,6 +14,6 @@ pub fn main() {\n     let  mut your_favorite_numbers = @[1,2,3];\n     let  mut my_favorite_numbers = @[4,5,6];\n     let  f = your_favorite_numbers + my_favorite_numbers;\n-    println(fmt!(\"The third favorite number is %?.\", f))\n+    println!(\"The third favorite number is {:?}.\", f)\n }\n "}, {"sha": "51c7ed8babcc18ce144e7477741a6220ce5e9125", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ trait Graph<Node, Edge> {\n \n impl<E> Graph<int, E> for HashMap<int, int> {\n     fn f(&self, _e: E) {\n-        fail!();\n+        fail2!();\n     }\n }\n "}, {"sha": "2d70f2623e4a57c690742a6a2196c1b130a71651", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,5 +17,5 @@ pub fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;\n-    info!(\"%?\", x)\n+    info2!(\"{:?}\", x)\n }"}, {"sha": "465e413b0ec04cded6e7ce7755ebffeaf74a1b61", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n \n     match a {\n         A { x : ref x } => {\n-            info!(\"%?\", x)\n+            info2!(\"{:?}\", x)\n         }\n     }\n }"}, {"sha": "696197a21af7120c5efe98183da87cf012c2a5cd", "filename": "src/test/run-pass/issue-7012.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7012.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,5 +23,5 @@ static test1: signature<'static> =  signature {\n \n pub fn main() {\n   let test = &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32];\n-  println(fmt!(\"%b\",test==test1.pattern));\n+  println(format!(\"{}\",test==test1.pattern));\n }"}, {"sha": "348a455830f7afeac50887c21ac83ff808b37667", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     let sa = A { a: 100 };\n     let sb = B { b: 200, pa: &sa };\n \n-    debug!(\"sa is %?\", sa);\n-    debug!(\"sb is %?\", sb);\n-    debug!(\"sb.pa is %?\", sb.get_pa());\n+    debug2!(\"sa is {:?}\", sa);\n+    debug2!(\"sb is {:?}\", sb);\n+    debug2!(\"sb.pa is {:?}\", sb.get_pa());\n }"}, {"sha": "07731020d34852166866417e5dd914633f805081", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n \n fn assert_repr_eq<T>(obj : T, expected : ~str) {\n \n-    assert_eq!(expected, fmt!(\"%?\", obj));\n+    assert_eq!(expected, format!(\"{:?}\", obj));\n }\n \n pub fn main() {"}, {"sha": "a02edba5f65363da2ec7312e90cbe0be0878b990", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,7 +10,7 @@\n \n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    info!(s.clone());\n+    info2!(\"{}\", s.clone());\n     let t: ~str = ~\"a\";\n     assert!(s == t);\n     let u: ~str = ~\"b\";\n@@ -27,7 +27,7 @@ fn test_heap_assign() {\n     assert!((s != u));\n }\n \n-fn test_heap_log() { let s = ~\"a big ol' string\"; info!(s); }\n+fn test_heap_log() { let s = ~\"a big ol' string\"; info2!(\"{}\", s); }\n \n fn test_stack_add() {\n     assert_eq!(~\"a\" + \"b\", ~\"ab\");\n@@ -49,7 +49,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s.push_str(\"b\");\n-    info!(s.clone());\n+    info2!(\"{}\", s.clone());\n     assert_eq!(s, ~\"ab\");\n \n     let mut s = ~\"c\";"}, {"sha": "e661fe7771ae0f1a39207d3ba41a4493fe2e7153", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -151,7 +151,7 @@ mod test_distinguish_syntax_ext {\n     extern mod extra;\n \n     pub fn f() {\n-        fmt!(\"test%s\", \"s\");\n+        format!(\"test{}\", \"s\");\n         #[attr = \"val\"]\n         fn g() { }\n     }"}, {"sha": "82163200e5926a30f2a6ccd8292a53307adcc9df", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,5 +19,5 @@ fn range_(a: int, b: int, it: &fn(int)) {\n pub fn main() {\n     let mut sum: int = 0;\n     range_(0, 100, |x| sum += x );\n-    info!(sum);\n+    info2!(\"{}\", sum);\n }"}, {"sha": "0a6393d3deee2d79af9e20b5b59d3ea9319f44f0", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,6 +16,6 @@ struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let _f: &fn() = || error!(e.n);\n+    let _f: &fn() = || error2!(\"{}\", e.n);\n     e.refs.push(1);\n }"}, {"sha": "2f7f0f26e0fa545cef29acbe3324057d8918fe99", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ fn lp<T>(s: ~str, f: &fn(~str) -> T) -> T {\n         let r = f(s);\n         return (r);\n     }\n-    fail!();\n+    fail2!();\n }\n \n fn apply<T>(s: ~str, f: &fn(~str) -> T) -> T {"}, {"sha": "a6beed631da117f4faa2785f6b58ba99d6c34ce4", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     fn invoke(f: &fn()) { f(); }\n     let k = ~22;\n     let _u = A {a: k.clone()};\n-    invoke(|| error!(k.clone()) )\n+    invoke(|| error2!(\"{:?}\", k.clone()) )\n }"}, {"sha": "c821f582662ba9753434d32b264e196976c355c6", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert!((x));\n     let mut y: int = 10;\n-    info!(x || incr(&mut y));\n+    info2!(\"{:?}\", x || incr(&mut y));\n     assert_eq!(y, 10);\n     if true && x { assert!((true)); } else { assert!((false)); }\n }"}, {"sha": "53edb3d732cf73420b622bd2adcb7e55306d43c3", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn foo(x: int) { info!(x); }\n+fn foo(x: int) { info2!(\"{}\", x); }\n \n pub fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "db27a471ba3559d964dc08ae523267035d019043", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,8 +11,8 @@\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let mut y = 0;\n-    for i in x.iter() { info!(*i); y += *i; }\n-    info!(y);\n+    for i in x.iter() { info2!(\"{:?}\", *i); y += *i; }\n+    info2!(\"{:?}\", y);\n     assert_eq!(y, 6);\n     let s = ~\"hello there\";\n     let mut i: int = 0;\n@@ -25,8 +25,8 @@ pub fn main() {\n         // ...\n \n         i += 1;\n-        info!(i);\n-        info!(c);\n+        info2!(\"{:?}\", i);\n+        info2!(\"{:?}\", c);\n     }\n     assert_eq!(i, 11);\n }"}, {"sha": "103a34492d9e1b95661628164b86ed919bfd5ac6", "filename": "src/test/run-pass/liveness-loop-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ fn test() {\n         v = 3;\n         break;\n     }\n-    info!(\"%d\", v);\n+    info2!(\"{}\", v);\n }\n \n pub fn main() {"}, {"sha": "399ef25b7272e83a0dfeaa42e19c671e99f33f50", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { if false { error!(~\"foo\" + \"bar\"); } }\n+pub fn main() { if false { error2!(\"{}\", ~\"foo\" + \"bar\"); } }"}, {"sha": "77bac4d12fc6f2ccdb08e9a932029a8ca6756683", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,13 +20,13 @@ enum foo {\n }\n \n fn check_log<T>(exp: ~str, v: T) {\n-    assert_eq!(exp, fmt!(\"%?\", v));\n+    assert_eq!(exp, format!(\"{:?}\", v));\n }\n \n pub fn main() {\n     let x = list::from_vec([a(22u), b(~\"hi\")]);\n     let exp = ~\"@Cons(a(22u), @Cons(b(~\\\"hi\\\"), @Nil))\";\n-    let act = fmt!(\"%?\", x);\n+    let act = format!(\"{:?}\", x);\n     assert!(act == exp);\n     check_log(exp, x);\n }"}, {"sha": "2e0b857f3cdd85e11f95c69c34547d2807ba4ec2", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,8 +19,8 @@ enum bar {\n }\n \n pub fn main() {\n-    assert_eq!(~\"a(22u)\", fmt!(\"%?\", a(22u)));\n-    assert_eq!(~\"b(~\\\"hi\\\")\", fmt!(\"%?\", b(~\"hi\")));\n-    assert_eq!(~\"c\", fmt!(\"%?\", c));\n-    assert_eq!(~\"d\", fmt!(\"%?\", d));\n+    assert_eq!(~\"a(22u)\", format!(\"{:?}\", a(22u)));\n+    assert_eq!(~\"b(~\\\"hi\\\")\", format!(\"{:?}\", b(~\"hi\")));\n+    assert_eq!(~\"c\", format!(\"{:?}\", c));\n+    assert_eq!(~\"d\", format!(\"{:?}\", d));\n }"}, {"sha": "393b5c3d281de4cbe9ecffb9f61c8fecde570eaf", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -26,7 +26,7 @@ fn mk<T:'static>() -> @mut Smallintmap<T> {\n \n fn f<T,U:'static>() {\n     let sim = mk::<U>();\n-    error!(sim);\n+    error2!(\"{:?}\", sim);\n }\n \n pub fn main() {"}, {"sha": "5cd4561137735042855fbf87b656ae3a0222bb2d", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,8 +13,8 @@ enum Numbers {\n }\n \n pub fn main() {\n-    info!(1);\n-    info!(2.0);\n-    warn!(Three);\n-    error!(~[4]);\n+    info2!(\"{}\", 1);\n+    info2!(\"{}\", 2.0);\n+    warn2!(\"{:?}\", Three);\n+    error2!(\"{:?}\", ~[4]);\n }"}, {"sha": "a8914de917e7db0949fa59f09a07ce357549224c", "filename": "src/test/run-pass/log-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,6 +14,6 @@ pub fn main() {\n     let act = sys::log_str(&~[1, 2, 3]);\n     assert_eq!(~\"~[1, 2, 3]\", act);\n \n-    let act = fmt!(\"%?/%6?\", ~[1, 2, 3], ~\"hi\");\n-    assert_eq!(act, ~\"~[1, 2, 3]/ ~\\\"hi\\\"\");\n+    let act = format!(\"{:?}/{:6?}\", ~[1, 2, 3], ~\"hi\");\n+    assert_eq!(act, ~\"~[1, 2, 3]/~\\\"hi\\\" \");\n }"}, {"sha": "396946ce5a0346beda75f841bd59dc7beb7dd901", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n   let mut i = 0u;\n   loop {\n-    error!(~\"a\");\n+    error2!(\"a\");\n     i += 1u;\n     if i == 10u {\n       break;\n@@ -23,7 +23,7 @@ pub fn main() {\n     if i == 21u {\n         break;\n     }\n-    error!(~\"b\");\n+    error2!(\"b\");\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n@@ -33,7 +33,7 @@ pub fn main() {\n   }\n   assert!(!is_even);\n   loop {\n-    error!(~\"c\");\n+    error2!(\"c\");\n     if i == 22u {\n         break;\n     }"}, {"sha": "1c6ba82c3c98190bb96687f2f9f444a78a978320", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ macro_rules! overly_complicated (\n           Some($pat) => {\n             $res\n           }\n-          _ => { fail!(); }\n+          _ => { fail2!(); }\n         }\n     })\n "}, {"sha": "acff2de548eed2c328cc6753bf0da0b34b6edf03", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -22,7 +22,7 @@ fn f2(ref_string: &str) -> ~str {\n     match ref_string {\n         \"a\" => ~\"found a\",\n         \"b\" => ~\"found b\",\n-        s => fmt!(\"not found (%s)\", s)\n+        s => format!(\"not found ({})\", s)\n     }\n }\n \n@@ -38,7 +38,7 @@ fn g2(ref_1: &str, ref_2: &str) -> ~str {\n     match (ref_1, ref_2) {\n         (\"a\", \"b\") => ~\"found a,b\",\n         (\"b\", \"c\") => ~\"found b,c\",\n-        (s1, s2) => fmt!(\"not found (%s, %s)\", s1, s2)\n+        (s1, s2) => format!(\"not found ({}, {})\", s1, s2)\n     }\n }\n "}, {"sha": "3abc4435edc526640f20033b7041b0f76cadfa63", "filename": "src/test/run-pass/match-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // n.b. This was only ever failing with optimization disabled.\n-fn a() -> int { match return 1 { 2 => 3, _ => fail!() } }\n+fn a() -> int { match return 1 { 2 => 3, _ => fail2!() } }\n pub fn main() { a(); }"}, {"sha": "fd26dbfac0f8f84c217f098ea3db16d169063891", "filename": "src/test/run-pass/match-bot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-bot.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,6 +11,6 @@\n \n pub fn main() {\n     let i: int =\n-        match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { 5 } };\n-    info!(\"%?\", i);\n+        match Some::<int>(3) { None::<int> => { fail2!() } Some::<int>(_) => { 5 } };\n+    info2!(\"{}\", i);\n }"}, {"sha": "3a223dc70160439e8ef5a03febd8b46e1779f7da", "filename": "src/test/run-pass/match-enum-struct-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,7 +18,7 @@ enum E {\n pub fn main() {\n     let e = Bar;\n     match e {\n-        Foo{f: _f} => fail!(),\n+        Foo{f: _f} => fail2!(),\n         _ => (),\n     }\n }"}, {"sha": "65352ada39450a7617ff6342968a9f84fd8f9473", "filename": "src/test/run-pass/match-enum-struct-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,10 +17,10 @@ pub fn main() {\n     let e = Foo{f: 1};\n     match e {\n         Foo{_} => (),\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n     match e {\n         Foo{f: _f} => (),\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n }"}, {"sha": "e73319712affcc6e4fd71c6953e4885d1ea97b58", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,4 +28,4 @@ fn foo<T>(y: Option<T>) {\n     return;\n }\n \n-pub fn main() { info!(\"hello\"); foo::<int>(Some::<int>(5)); }\n+pub fn main() { info2!(\"hello\"); foo::<int>(Some::<int>(5)); }"}, {"sha": "26aedf5570599648b94952a7e3f80aa31c676f57", "filename": "src/test/run-pass/match-pattern-drop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,20 +14,20 @@\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    info!(::std::sys::refcount(s));\n+    info2!(\"{:?}\", ::std::sys::refcount(s));\n     let count = ::std::sys::refcount(s);\n     let x: t = make_t(s); // ref up\n     assert_eq!(::std::sys::refcount(s), count + 1u);\n-    info!(::std::sys::refcount(s));\n+    info2!(\"{:?}\", ::std::sys::refcount(s));\n \n     match x {\n       make_t(y) => {\n-        info!(\"%?\", y); // ref up then down\n+        info2!(\"{:?}\", y); // ref up then down\n \n       }\n-      _ => { info!(\"?\"); fail!(); }\n+      _ => { info2!(\"?\"); fail2!(); }\n     }\n-    info!(::std::sys::refcount(s));\n+    info2!(\"{:?}\", ::std::sys::refcount(s));\n     assert_eq!(::std::sys::refcount(s), count + 1u);\n     let _ = ::std::sys::refcount(s); // don't get bitten by last-use.\n }\n@@ -39,7 +39,7 @@ pub fn main() {\n \n     foo(s); // ref up then down\n \n-    info!(\"%u\", ::std::sys::refcount(s));\n+    info2!(\"{}\", ::std::sys::refcount(s));\n     let count2 = ::std::sys::refcount(s);\n     assert_eq!(count, count2);\n }"}, {"sha": "9493b8d960deeca761588f00d54b507baa93007b", "filename": "src/test/run-pass/match-pattern-lit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,9 +12,9 @@\n \n fn altlit(f: int) -> int {\n     match f {\n-      10 => { info!(\"case 10\"); return 20; }\n-      11 => { info!(\"case 11\"); return 22; }\n-      _  => fail!(\"the impossible happened\")\n+      10 => { info2!(\"case 10\"); return 20; }\n+      11 => { info2!(\"case 11\"); return 22; }\n+      _  => fail2!(\"the impossible happened\")\n     }\n }\n "}, {"sha": "6ef3f75fbbc6ea165a684d719b41f28d8e9ffedc", "filename": "src/test/run-pass/match-pattern-no-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,8 +12,8 @@ enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<int>) {\n     match x {\n-        nothing => { error!(\"A\"); }\n-        just(_a) => { error!(\"B\"); }\n+        nothing => { error2!(\"A\"); }\n+        just(_a) => { error2!(\"B\"); }\n     }\n }\n "}, {"sha": "70832548f82771ede6933ba9875040bbb630c216", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ fn test1() {\n                 assert_eq!(a, ~\"a\");\n                 assert_eq!(b, ~\"b\");\n             },\n-            _ => fail!(),\n+            _ => fail2!(),\n     }\n }\n \n@@ -25,7 +25,7 @@ fn test2() {\n             assert_eq!(a, 2);\n             assert_eq!(b, 3);\n         },\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n }\n \n@@ -35,7 +35,7 @@ fn test3() {\n             assert_eq!(*a, 2);\n             assert_eq!(*b, 3);\n         },\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n }\n \n@@ -45,7 +45,7 @@ fn test4() {\n             assert_eq!(a, 2);\n             assert_eq!(b, 3);\n         },\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n }\n \n@@ -55,7 +55,7 @@ fn test5() {\n             assert_eq!(*a, 2);\n             assert_eq!(*b, 3);\n         },\n-        _ => fail!(),\n+        _ => fail2!(),\n     }\n }\n "}, {"sha": "a95c4e5289b19e356f55cbf11ceabeba62514bb9", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,31 +11,31 @@\n pub fn main() {\n     match 5u {\n       1u..5u => {}\n-      _ => fail!(\"should match range\"),\n+      _ => fail2!(\"should match range\"),\n     }\n     match 5u {\n-      6u..7u => fail!(\"shouldn't match range\"),\n+      6u..7u => fail2!(\"shouldn't match range\"),\n       _ => {}\n     }\n     match 5u {\n-      1u => fail!(\"should match non-first range\"),\n+      1u => fail2!(\"should match non-first range\"),\n       2u..6u => {}\n-      _ => fail!(\"math is broken\")\n+      _ => fail2!(\"math is broken\")\n     }\n     match 'c' {\n       'a'..'z' => {}\n-      _ => fail!(\"should suppport char ranges\")\n+      _ => fail2!(\"should suppport char ranges\")\n     }\n     match -3 {\n       -7..5 => {}\n-      _ => fail!(\"should match signed range\")\n+      _ => fail2!(\"should match signed range\")\n     }\n     match 3.0 {\n       1.0..5.0 => {}\n-      _ => fail!(\"should match float range\")\n+      _ => fail2!(\"should match float range\")\n     }\n     match -1.5 {\n       -3.6..3.6 => {}\n-      _ => fail!(\"should match negative float range\")\n+      _ => fail2!(\"should match negative float range\")\n     }\n }"}, {"sha": "74a3f255362472d5a9129033347b59796aed7a6d", "filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n             Some(ref z) if z.with(|b| *b) => {\n                 do z.with |b| { assert!(*b); }\n             },\n-            _ => fail!()\n+            _ => fail2!()\n         }\n     }\n }"}, {"sha": "ecec003519c81e74d2f52bd2938eb07c6e891b80", "filename": "src/test/run-pass/match-str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-str.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,21 +11,21 @@\n // Issue #53\n \n pub fn main() {\n-    match ~\"test\" { ~\"not-test\" => fail!(), ~\"test\" => (), _ => fail!() }\n+    match ~\"test\" { ~\"not-test\" => fail2!(), ~\"test\" => (), _ => fail2!() }\n \n     enum t { tag1(~str), tag2, }\n \n \n     match tag1(~\"test\") {\n-      tag2 => fail!(),\n-      tag1(~\"not-test\") => fail!(),\n+      tag2 => fail2!(),\n+      tag1(~\"not-test\") => fail2!(),\n       tag1(~\"test\") => (),\n-      _ => fail!()\n+      _ => fail2!()\n     }\n \n-    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail!() };\n+    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail2!() };\n     assert_eq!(x, 1);\n \n-    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail!() }\n+    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail2!() }\n \n }"}, {"sha": "215b05ac73f47d58174393df511ccc7daba45992", "filename": "src/test/run-pass/match-struct-0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-struct-0.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,15 +15,15 @@ struct Foo{\n pub fn main() {\n     let f = Foo{f: 1};\n     match f {\n-        Foo{f: 0} => fail!(),\n+        Foo{f: 0} => fail2!(),\n         Foo{_} => (),\n     }\n     match f {\n-        Foo{f: 0} => fail!(),\n+        Foo{f: 0} => fail2!(),\n         Foo{f: _f} => (),\n     }\n     match f {\n-        Foo{f: 0} => fail!(),\n+        Foo{f: 0} => fail2!(),\n         _ => (),\n     }\n }"}, {"sha": "7f2af90d09af6bf78d12d6a0359df3ece4402724", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     match ~100 {\n       ~x => {\n-        info!(\"%?\", x);\n+        info2!(\"{:?}\", x);\n         assert_eq!(x, 100);\n       }\n     }"}, {"sha": "2476d440a15702da8a90b0837c62aff09d7fe8ae", "filename": "src/test/run-pass/match-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n         Some(num) => num as u32\n     };\n     assert_eq!(f, 1234u32);\n-    error!(f)\n+    error2!(\"{}\", f)\n }"}, {"sha": "cb4b078b9de2c2d2898652eb8efd843b059a46b9", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n     unsafe {\n         let addr = rusti::morestack_addr();\n         assert!(addr.is_not_null());\n-        error!(\"%?\", addr);\n+        error2!(\"{}\", addr);\n     }\n }"}, {"sha": "9ec91d930c05a44e3481e6beffd0b3c9bec120ef", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,6 +21,6 @@ pub fn main() {\n     grow(&mut v);\n     grow(&mut v);\n     let len = v.len();\n-    info!(len);\n+    info2!(\"{}\", len);\n     assert_eq!(len, 3 as uint);\n }"}, {"sha": "a435f2c6050d2284c6a9654db2d546fcd853cd52", "filename": "src/test/run-pass/negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnegative.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,6 +11,6 @@\n pub fn main() {\n     match -5 {\n       -5 => {}\n-      _ => { fail!() }\n+      _ => { fail2!() }\n     }\n }"}, {"sha": "9c728194e90d49659010432796c37ed9664d1758", "filename": "src/test/run-pass/nested-matchs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-matchs.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n \n-fn baz() -> ! { fail!(); }\n+fn baz() -> ! { fail2!(); }\n \n fn foo() {\n     match Some::<int>(5) {\n       Some::<int>(_x) => {\n         let mut bar;\n         match None::<int> { None::<int> => { bar = 5; } _ => { baz(); } }\n-        info!(bar);\n+        info2!(\"{:?}\", bar);\n       }\n-      None::<int> => { info!(\"hello\"); }\n+      None::<int> => { info2!(\"hello\"); }\n     }\n }\n "}, {"sha": "cc8436e7c4b2fbadccde6d5376a678dc3c6820e5", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,8 +16,8 @@ enum t { foo(int, uint), bar(int, Option<int>), }\n \n fn nested(o: t) {\n     match o {\n-        bar(_i, Some::<int>(_)) => { error!(\"wrong pattern matched\"); fail!(); }\n-        _ => { error!(\"succeeded\"); }\n+        bar(_i, Some::<int>(_)) => { error2!(\"wrong pattern matched\"); fail2!(); }\n+        _ => { error2!(\"succeeded\"); }\n     }\n }\n "}, {"sha": "b979518f8a10f87ca73af24bb8d2e245dcece80a", "filename": "src/test/run-pass/nested-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-patterns.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ struct C { c: int }\n pub fn main() {\n     match A {a: 10, b: @20} {\n         x@A {a, b: @20} => { assert!(x.a == 10); assert!(a == 10); }\n-        A {b: _b, _} => { fail!(); }\n+        A {b: _b, _} => { fail2!(); }\n     }\n     let mut x@B {b, _} = B {a: 10, b: C {c: 20}};\n     x.b.c = 30;"}, {"sha": "bc2c147b2429dd74c8ed2fd709425e9970eb6cb1", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -5,7 +5,7 @@ struct Thingy {\n \n impl ToStr for Thingy {\n     fn to_str(&self) -> ~str {\n-        fmt!(\"{ x: %d, y: %d }\", self.x, self.y)\n+        format!(\"\\\\{ x: {}, y: {} \\\\}\", self.x, self.y)\n     }\n }\n "}, {"sha": "5172af1718443333c1612fdf227b7c0683c05e90", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,15 +15,15 @@\n pub fn main() {\n     let mut x: int = 1;\n     x *= 2;\n-    info!(x);\n+    info2!(\"{}\", x);\n     assert_eq!(x, 2);\n     x += 3;\n-    info!(x);\n+    info2!(\"{}\", x);\n     assert_eq!(x, 5);\n     x *= x;\n-    info!(x);\n+    info2!(\"{}\", x);\n     assert_eq!(x, 25);\n     x /= 5;\n-    info!(x);\n+    info2!(\"{}\", x);\n     assert_eq!(x, 5);\n }"}, {"sha": "7c8872fae8a76b737ded15eeb1f1f9915e05aa96", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -24,7 +24,7 @@ impl Drop for dtor {\n fn unwrap<T>(o: Option<T>) -> T {\n     match o {\n       Some(v) => v,\n-      None => fail!()\n+      None => fail2!()\n     }\n }\n "}, {"sha": "0fc56cecec559e2444ee959ffdf9d1aa91b8bd36", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        info!(b);\n+        info2!(\"{:?}\", b);\n     }\n }"}, {"sha": "8de802e1fc9797dcd71b665e0c2281c622884e9c", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -36,7 +36,7 @@ impl<K:Eq,V:Clone> Index<K,V> for AssociationList<K,V> {\n                 return pair.value.clone();\n             }\n         }\n-        fail!(\"No value found for key: %?\", index);\n+        fail2!(\"No value found for key: {:?}\", index);\n     }\n }\n "}, {"sha": "29789f38a4bf01fc208ad3b08f477c950e4b23db", "filename": "src/test/run-pass/paren-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     let x = true;\n     if x { let mut i = 10; while i > 0 { i -= 1; } }\n-    match x { true => { info!(\"right\"); } false => { info!(\"wrong\"); } }\n+    match x { true => { info2!(\"right\"); } false => { info2!(\"wrong\"); } }\n }"}, {"sha": "7d4a74fe32cbe563d88aeddfed43f39e57316aa7", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,6 +11,6 @@\n #[allow(unreachable_code)];\n \n // -*- rust -*-\n-fn dont_call_me() { fail!(); info!(1); }\n+fn dont_call_me() { fail2!(); info2!(\"{}\", 1); }\n \n pub fn main() { }"}, {"sha": "a9cfd3aa1832f5e4eac2d0ca829d382eb89c7d4d", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn magic(x: A) { info!(x); }\n-fn magic2(x: @int) { info!(x); }\n+fn magic(x: A) { info2!(\"{:?}\", x); }\n+fn magic2(x: @int) { info2!(\"{:?}\", x); }\n \n struct A { a: @int }\n "}, {"sha": "f5dc7c1c1d307450011b9afd9081edeba28f7e20", "filename": "src/test/run-pass/pure-fmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-fmt.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Testing that calling fmt! (via info!) doesn't complain about impure borrows\n+// Testing that calling fmt! (via info2!) doesn't complain about impure borrows\n \n struct Big { b: @~str, c: uint, d: int, e: char,\n             f: float, g: bool }\n@@ -22,12 +22,12 @@ fn foo() {\n         f: 0.0,\n         g: true\n     };\n-    info!(\"test %?\", a.b);\n-    info!(\"test %u\", a.c);\n-    info!(\"test %i\", a.d);\n-    info!(\"test %c\", a.e);\n-    info!(\"test %f\", a.f);\n-    info!(\"test %b\", a.g);\n+    info2!(\"test {:?}\", a.b);\n+    info2!(\"test {:u}\", a.c);\n+    info2!(\"test {:i}\", a.d);\n+    info2!(\"test {:c}\", a.e);\n+    info2!(\"test {:f}\", a.f);\n+    info2!(\"test {:b}\", a.g);\n }\n \n pub fn main() {"}, {"sha": "030df6bcc085fa47076855bf7c0344abd2c50e93", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,5 +11,5 @@\n \n fn something(f: &fn()) { f(); }\n pub fn main() {\n-    something(|| error!(\"hi!\") );\n+    something(|| error2!(\"hi!\") );\n }"}, {"sha": "376a14924c081fdcb0ec4d553ba54605f6dcac96", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -28,16 +28,16 @@ pub fn main() {\n \n     let x = @6;\n     let y = x.get();\n-    info!(\"y=%d\", y);\n+    info2!(\"y={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~6;\n     let y = x.get();\n-    info!(\"y=%d\", y);\n+    info2!(\"y={}\", y);\n     assert_eq!(y, 6);\n \n     let x = &6;\n     let y = x.get();\n-    info!(\"y=%d\", y);\n+    info2!(\"y={}\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "1f1b9d3d1ee9e9e0958b7a5e7f3aca7e9d9e12c2", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -24,16 +24,16 @@ fn call_sum(x: &[int]) -> int { x.sum_() }\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let y = call_sum(x);\n-    info!(\"y==%d\", y);\n+    info2!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n     let y = x.sum_();\n-    info!(\"y==%d\", y);\n+    info2!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n     let y = x.sum_();\n-    info!(\"y==%d\", y);\n+    info2!(\"y=={}\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "b7a2330cf84f43e482e868a149aa9cebee3008ac", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -53,11 +53,11 @@ pub fn main() {\n         let x = Outer {c8: 22u8, t: Inner {c64: 44u32}};\n \n         // Send it through the shape code\n-        let y = fmt!(\"%?\", x);\n+        let y = format!(\"{:?}\", x);\n \n-        info!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n-        info!(\"size outer = %?\", sys::size_of::<Outer>());\n-        info!(\"y = %s\", y);\n+        info2!(\"align inner = {:?}\", rusti::min_align_of::<Inner>());\n+        info2!(\"size outer = {:?}\", sys::size_of::<Outer>());\n+        info2!(\"y = {}\", y);\n \n         // per clang/gcc the alignment of `inner` is 4 on x86.\n         assert_eq!(rusti::min_align_of::<Inner>(), m::align());"}, {"sha": "f3bfb998dbbc58a0fea6ee23b8b530bcd49ea280", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -75,11 +75,11 @@ pub fn main() {\n         let x = Outer {c8: 22u8, t: Inner {c64: 44u64}};\n \n         // Send it through the shape code\n-        let y = fmt!(\"%?\", x);\n+        let y = format!(\"{:?}\", x);\n \n-        info!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n-        info!(\"size outer = %?\", sys::size_of::<Outer>());\n-        info!(\"y = %s\", y);\n+        info2!(\"align inner = {}\", rusti::min_align_of::<Inner>());\n+        info2!(\"size outer = {}\", sys::size_of::<Outer>());\n+        info2!(\"y = {}\", y);\n \n         // per clang/gcc the alignment of `Inner` is 4 on x86.\n         assert_eq!(rusti::min_align_of::<Inner>(), m::m::align());"}, {"sha": "086d03ae4e30f7cc94322e74fd99a440e72f82a2", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,6 +19,6 @@ struct X { foo: ~str, bar: ~str }\n \n pub fn main() {\n     let x = X {foo: ~\"hello\", bar: ~\"world\"};\n-    info!(x.foo.clone());\n-    info!(x.bar.clone());\n+    info2!(\"{}\", x.foo.clone());\n+    info2!(\"{}\", x.bar.clone());\n }"}, {"sha": "be276478522baaf8f042ee6ed27731b3aa9af7da", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -559,7 +559,7 @@ impl TyVisitor for my_visitor {\n                        _sz: uint, _align: uint) -> bool { true }\n     fn visit_rec_field(&mut self, _i: uint, _name: &str,\n                        _mtbl: uint, inner: *TyDesc) -> bool {\n-        error!(\"rec field!\");\n+        error2!(\"rec field!\");\n         self.visit_inner(inner)\n     }\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n@@ -577,7 +577,7 @@ impl TyVisitor for my_visitor {\n     fn visit_enter_tup(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n     fn visit_tup_field(&mut self, _i: uint, inner: *TyDesc) -> bool {\n-        error!(\"tup field!\");\n+        error2!(\"tup field!\");\n         self.visit_inner(inner)\n     }\n     fn visit_leave_tup(&mut self, _n_fields: uint,\n@@ -641,7 +641,7 @@ pub fn main() {\n                                        vals: ~[]});\n         let mut v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n-        error!(\"tydesc sz: %u, align: %u\",\n+        error2!(\"tydesc sz: {}, align: {}\",\n                (*td).size, (*td).align);\n         visit_tydesc(td, &mut v as &mut TyVisitor);\n "}, {"sha": "7b14b36df7d4518582a6405acd2b40eb07f83150", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,32 +17,32 @@ struct MyVisitor {\n impl TyVisitor for MyVisitor {\n     fn visit_bot(&mut self) -> bool {\n         self.types.push(~\"bot\");\n-        error!(\"visited bot type\");\n+        error2!(\"visited bot type\");\n         true\n     }\n     fn visit_nil(&mut self) -> bool {\n         self.types.push(~\"nil\");\n-        error!(\"visited nil type\");\n+        error2!(\"visited nil type\");\n         true\n     }\n     fn visit_bool(&mut self) -> bool {\n         self.types.push(~\"bool\");\n-        error!(\"visited bool type\");\n+        error2!(\"visited bool type\");\n         true\n     }\n     fn visit_int(&mut self) -> bool {\n         self.types.push(~\"int\");\n-        error!(\"visited int type\");\n+        error2!(\"visited int type\");\n         true\n     }\n     fn visit_i8(&mut self) -> bool {\n         self.types.push(~\"i8\");\n-        error!(\"visited i8 type\");\n+        error2!(\"visited i8 type\");\n         true\n     }\n     fn visit_i16(&mut self) -> bool {\n         self.types.push(~\"i16\");\n-        error!(\"visited i16 type\");\n+        error2!(\"visited i16 type\");\n         true\n     }\n     fn visit_i32(&mut self) -> bool { true }"}, {"sha": "1d44d8defdc1c0c1eb66b3d790a4b77c351ad45f", "filename": "src/test/run-pass/region-dependent-addr-of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -57,21 +57,21 @@ fn get_v5<'v>(a: &'v A, _i: uint) -> &'v int {\n fn get_v6_a<'v>(a: &'v A, _i: uint) -> &'v int {\n     match a.value.v6 {\n         Some(ref v) => &v.f,\n-        None => fail!()\n+        None => fail2!()\n     }\n }\n \n fn get_v6_b<'v>(a: &'v A, _i: uint) -> &'v int {\n     match *a {\n         A { value: B { v6: Some(ref v), _ } } => &v.f,\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }\n \n fn get_v6_c<'v>(a: &'v A, _i: uint) -> &'v int {\n     match a {\n         &A { value: B { v6: Some(ref v), _ } } => &v.f,\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }\n "}, {"sha": "9258b149fd316173ad2619eafd4a5ed8a06f7663", "filename": "src/test/run-pass/region-return-interior-of-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n fn get<'r, T>(opt: &'r Option<T>) -> &'r T {\n     match *opt {\n       Some(ref v) => v,\n-      None => fail!(\"none\")\n+      None => fail2!(\"none\")\n     }\n }\n "}, {"sha": "08b1d249869367745eb84b2817aad37b5c02331e", "filename": "src/test/run-pass/regions-addr-of-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,5 +14,5 @@ fn f<'a>(x : &'a int) -> &'a int {\n \n pub fn main() {\n     let three = &3;\n-    error!(fmt!(\"%d\", *f(three)));\n+    error2!(\"{}\", *f(three));\n }"}, {"sha": "a504296a182bd66795f6dc9bf528a354f206de55", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,6 +15,6 @@ fn foo(x: &uint) -> uint {\n pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n-    info!(\"r=%u\", r);\n+    info2!(\"r={}\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "5d8d5d6033a48bf80b0cd8b769c0393562b36f88", "filename": "src/test/run-pass/regions-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bot.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,7 +10,7 @@\n \n // A very limited test of the \"bottom\" region\n \n-fn produce_static<T>() -> &'static T { fail!(); }\n+fn produce_static<T>() -> &'static T { fail2!(); }\n \n fn foo<T>(_x: &T) -> &uint { produce_static() }\n "}, {"sha": "61d088851fd08075c9ecbdb8107255e316e43ef0", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -22,6 +22,6 @@ impl<'self> get_chowder<'self> for Clam<'self> {\n \n pub fn main() {\n     let clam = Clam { chowder: &3 };\n-    info!(*clam.get_chowder());\n+    info2!(\"{:?}\", *clam.get_chowder());\n     clam.get_chowder();\n }"}, {"sha": "f0b7306990dd3fe833c6e62aaf96eec900ed6d30", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     match y {\n         int_wrapper_ctor(zz) => { z = zz; }\n     }\n-    info!(*z);\n+    info2!(\"{:?}\", *z);\n }"}, {"sha": "e57c2e9807e0fcf4f328650289a1341fa98fa9b3", "filename": "src/test/run-pass/regions-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-simple.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,5 +12,5 @@ pub fn main() {\n     let mut x: int = 3;\n     let y: &mut int = &mut x;\n     *y = 5;\n-    info!(*y);\n+    info2!(\"{:?}\", *y);\n }"}, {"sha": "3cb6fea3e532eb932907c77d6747f51869dd48f0", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,6 +21,6 @@ fn call_static_closure(cl: closure_box<'static>) {\n }\n \n pub fn main() {\n-    let cl_box = box_it(|| info!(\"Hello, world!\"));\n+    let cl_box = box_it(|| info2!(\"Hello, world!\"));\n     call_static_closure(cl_box);\n }"}, {"sha": "6291e229b6c9c201bc892997ba3526d3cd4acf55", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     let x = [ @[true], ..512 ];\n     let y = [ 0, ..1 ];\n \n-    error!(\"%?\", x);\n-    error!(\"%?\", y);\n+    error2!(\"{:?}\", x);\n+    error2!(\"{:?}\", y);\n }"}, {"sha": "2e30044f31887af19e0ee77ffd640443119a194c", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n-        info!(c);\n+        info2!(\"{:?}\", c);\n     }\n     assert_eq!(*i, 1);\n }"}, {"sha": "e7384203310c89b42abbd993d27eca54c68a11d6", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,7 +19,7 @@ struct r {\n impl Drop for r {\n     fn drop(&mut self) {\n         unsafe {\n-            info!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n+            info2!(\"r's dtor: self = {:x}, self.v = {:x}, self.v's value = {:x}\",\n               cast::transmute::<*mut r, uint>(self),\n               cast::transmute::<**int, uint>(&(self.v)),\n               cast::transmute::<*int, uint>(self.v));\n@@ -54,24 +54,24 @@ pub fn main() {\n             next: None,\n               r: {\n               let rs = r(i1p);\n-              info!(\"r = %x\", cast::transmute::<*r, uint>(&rs));\n+              info2!(\"r = {:x}\", cast::transmute::<*r, uint>(&rs));\n               rs }\n         });\n \n-        info!(\"x1 = %x, x1.r = %x\",\n+        info2!(\"x1 = {:x}, x1.r = {:x}\",\n                cast::transmute::<@mut t, uint>(x1),\n                cast::transmute::<*r, uint>(&x1.r));\n \n         let x2 = @mut t(Node{\n             next: None,\n               r: {\n               let rs = r(i2p);\n-              info!(\"r2 = %x\", cast::transmute::<*r, uint>(&rs));\n+              info2!(\"r2 = {:x}\", cast::transmute::<*r, uint>(&rs));\n               rs\n                 }\n         });\n \n-        info!(\"x2 = %x, x2.r = %x\",\n+        info2!(\"x2 = {:x}, x2.r = {:x}\",\n                cast::transmute::<@mut t, uint>(x2),\n                cast::transmute::<*r, uint>(&(x2.r)));\n "}, {"sha": "70adccbb9c92a35f0570988898d3ecbcb38c8b32", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@ struct shrinky_pointer {\n #[unsafe_destructor]\n impl Drop for shrinky_pointer {\n     fn drop(&mut self) {\n-        error!(~\"Hello!\"); **(self.i) -= 1;\n+        error2!(\"Hello!\"); **(self.i) -= 1;\n     }\n }\n \n@@ -32,6 +32,6 @@ fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n pub fn main() {\n     let my_total = @@mut 10;\n     { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n-    error!(\"my_total = %d\", **my_total);\n+    error2!(\"my_total = {}\", **my_total);\n     assert_eq!(**my_total, 9);\n }"}, {"sha": "f56cf57e12e94e3eb319c603ba2ddefb8ce5c5f4", "filename": "src/test/run-pass/ret-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fret-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fret-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-bang.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn my_err(s: ~str) -> ! { error!(s); fail!(); }\n+fn my_err(s: ~str) -> ! { error2!(\"{:?}\", s); fail2!(); }\n \n fn okay(i: uint) -> int {\n     if i == 3u { my_err(~\"I don't like three\"); } else { return 42; }"}, {"sha": "9a6dfb22106a44262a3182a84e7dcc1e6c63b96b", "filename": "src/test/run-pass/rt-start-main-thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,9 +13,9 @@\n #[start]\n fn start(argc: int, argv: **u8) -> int {\n     do std::rt::start_on_main_thread(argc, argv) {\n-        info!(\"running on main thread\");\n+        info2!(\"running on main thread\");\n         do spawn {\n-            info!(\"running on another thread\");\n+            info2!(\"running on another thread\");\n         }\n     }\n }"}, {"sha": "b7d6a0f3915621f2312baabfee27db8d89862403", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -26,12 +26,12 @@ fn make_generic_record<A,B>(a: A, b: B) -> Pair<A,B> {\n \n fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n     let p = (*f)(22.22f, ~\"Hi\");\n-    info!(p.clone());\n+    info2!(\"{:?}\", p.clone());\n     assert!(p.a == 22.22f);\n     assert!(p.b == ~\"Hi\");\n \n     let q = (*f)(44.44f, ~\"Ho\");\n-    info!(q.clone());\n+    info2!(\"{:?}\", q.clone());\n     assert!(q.a == 44.44f);\n     assert!(q.b == ~\"Ho\");\n }"}, {"sha": "6cc8b27834cf0195bfdfbdf1335dd1a70c51c7e8", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,7 +20,7 @@ fn test05_start(f: ~fn(int)) {\n fn test05() {\n     let three = ~3;\n     let fn_to_send: ~fn(int) = |n| {\n-        error!(*three + n); // will copy x into the closure\n+        error2!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };\n     let fn_to_send = Cell::new(fn_to_send);"}, {"sha": "345c2aad0d38a75c748eb0bb08d632b3c6601035", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,7 +17,7 @@ fn foo(c: ~[int]) {\n     match none::<int> {\n         some::<int>(_) => {\n             for _i in c.iter() {\n-                info!(a);\n+                info2!(\"{:?}\", a);\n                 let a = 17;\n                 b.push(a);\n             }"}, {"sha": "a989ac68d711de0124f25e5c784b178208a9be49", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -57,6 +57,6 @@ pub fn main() {\n     let p_: Path_ = Path_ { global: true, idents: ~[~\"hi\"], types: ~[t] };\n     let p: path = Spanned { data: p_, span: sp };\n     let x = X { sp: sp, path: p };\n-    error!(x.path.clone());\n-    error!(x.clone());\n+    error2!(\"{:?}\", x.path.clone());\n+    error2!(\"{:?}\", x.clone());\n }"}, {"sha": "0924655a767175808f85fcb0760aa22bacf9d160", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let mut n; n = 1; info!(n); }\n+pub fn main() { let mut n; n = 1; info2!(\"{}\", n); }"}, {"sha": "1c080bb8146ba3579b8cc9761d1b28a87929f309", "filename": "src/test/run-pass/simple-match-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,5 +14,5 @@ enum opt<T> { none, }\n \n pub fn main() {\n     let x = none::<int>;\n-    match x { none::<int> => { info!(\"hello world\"); } }\n+    match x { none::<int> => { info2!(\"hello world\"); } }\n }"}, {"sha": "d34da045c02dd89fec65159161a4f53c5a840d9d", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,8 +16,12 @@ enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: ~[clam<T>]) {\n     match v[1] {\n-      a::<T>(ref _t, ref u) => { info!(\"incorrect\"); info!(u); fail!(); }\n-      b::<T> => { info!(\"correct\"); }\n+      a::<T>(ref _t, ref u) => {\n+          info2!(\"incorrect\");\n+          info2!(\"{:?}\", u);\n+          fail2!();\n+      }\n+      b::<T> => { info2!(\"correct\"); }\n     }\n }\n "}, {"sha": "f95ddcad4d63802cdc58a2b9df7a8327e4489110", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,14 +12,14 @@\n use std::task;\n \n fn x(s: ~str, n: int) {\n-    info!(s);\n-    info!(n);\n+    info2!(\"{:?}\", s);\n+    info2!(\"{:?}\", n);\n }\n \n pub fn main() {\n     task::spawn(|| x(~\"hello from first spawned fn\", 65) );\n     task::spawn(|| x(~\"hello from second spawned fn\", 66) );\n     task::spawn(|| x(~\"hello from third spawned fn\", 67) );\n     let mut i: int = 30;\n-    while i > 0 { i = i - 1; info!(\"parent sleeping\"); task::deschedule(); }\n+    while i > 0 { i = i - 1; info2!(\"parent sleeping\"); task::deschedule(); }\n }"}, {"sha": "9273752d6293bec4e7cfcb92016f3983496dd835", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,4 +17,4 @@ pub fn main() {\n     task::spawn(|| child(10) );\n }\n \n-fn child(i: int) { error!(i); assert!((i == 10)); }\n+fn child(i: int) { error2!(\"{}\", i); assert!((i == 10)); }"}, {"sha": "31967b31c638533326929ec79d9bd14d8782d053", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,15 +15,15 @@ pub fn main() { task::spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n \n fn child(args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n-    error!(i1);\n-    error!(i2);\n-    error!(i3);\n-    error!(i4);\n-    error!(i5);\n-    error!(i6);\n-    error!(i7);\n-    error!(i8);\n-    error!(i9);\n+    error2!(\"{}\", i1);\n+    error2!(\"{}\", i2);\n+    error2!(\"{}\", i3);\n+    error2!(\"{}\", i4);\n+    error2!(\"{}\", i5);\n+    error2!(\"{}\", i6);\n+    error2!(\"{}\", i7);\n+    error2!(\"{}\", i8);\n+    error2!(\"{}\", i9);\n     assert_eq!(i1, 10);\n     assert_eq!(i2, 20);\n     assert_eq!(i3, 30);"}, {"sha": "676d85724641358b2fcc81401cbcd26942651450", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n     {\n         match io::file_writer(&path, [io::Create, io::Truncate]) {\n-            Err(ref e) => fail!(e.clone()),\n+            Err(ref e) => fail2!(\"{}\", e.clone()),\n             Ok(f) => {\n                 for _ in range(0u, 1000) {\n                     f.write_u8(0);"}, {"sha": "fe57c5dd4e511de4d5b5f189367b7ba2c17bde6a", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ extern mod extra;\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s.push_str(\"world\");\n-    info!(s.clone());\n+    info2!(\"{}\", s.clone());\n     assert_eq!(s[9], 'd' as u8);\n }\n \n@@ -26,8 +26,8 @@ fn test2() {\n     let ff: ~str = ~\"abc\";\n     let a: ~str = ff + \"ABC\" + ff;\n     let b: ~str = ~\"ABC\" + ff + \"ABC\";\n-    info!(a.clone());\n-    info!(b.clone());\n+    info2!(\"{}\", a.clone());\n+    info2!(\"{}\", b.clone());\n     assert_eq!(a, ~\"abcABCabc\");\n     assert_eq!(b, ~\"ABCabcABC\");\n }"}, {"sha": "dc605c50bb0f263e20e55f02e1b53e4210f7d32c", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     let a: ~str = ~\"hello\";\n     let b: ~str = ~\"world\";\n     let s: ~str = a + b;\n-    info!(s.clone());\n+    info2!(\"{}\", s.clone());\n     assert_eq!(s[9], 'd' as u8);\n }"}, {"sha": "ca80f71cca7fe7b3140f431d50b798fe7e0607aa", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     let s = ~\"hello\";\n     let c: u8 = s[4];\n-    info!(c);\n+    info2!(\"{:?}\", c);\n     assert_eq!(c, 0x6f as u8);\n }"}, {"sha": "f230bb38701e40279fab4e2ea57c5012f34b2843", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let mut i = 20;\n     let mut expected_len = 1u;\n     while i > 0 {\n-        error!(a.len());\n+        error2!(\"{}\", a.len());\n         assert_eq!(a.len(), expected_len);\n         a = a + a; // FIXME(#3387)---can't write a += a\n         i -= 1;"}, {"sha": "a4238799d09f75abf52591617cd0fa5a5cfadde1", "filename": "src/test/run-pass/struct-literal-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ struct foo {\n \n impl Drop for foo {\n     fn drop(&mut self) {\n-        error!(\"%s\", self.x);\n+        error2!(\"{}\", self.x);\n     }\n }\n "}, {"sha": "1cdc8d3826cc89be31e6234014eb421b6c82021e", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -31,10 +31,10 @@ fn test1() {\n                  c: 0xcccc_cccc_cccc_cccc_u64,\n                  d: 0xdddd_dddd_dddd_dddd_u64 };\n         let qq = rustrt::rust_dbg_abi_1(q);\n-        error!(\"a: %x\", qq.a as uint);\n-        error!(\"b: %x\", qq.b as uint);\n-        error!(\"c: %x\", qq.c as uint);\n-        error!(\"d: %x\", qq.d as uint);\n+        error2!(\"a: {:x}\", qq.a as uint);\n+        error2!(\"b: {:x}\", qq.b as uint);\n+        error2!(\"c: {:x}\", qq.c as uint);\n+        error2!(\"d: {:x}\", qq.d as uint);\n         assert_eq!(qq.a, q.c + 1u64);\n         assert_eq!(qq.b, q.d - 1u64);\n         assert_eq!(qq.c, q.a + 1u64);\n@@ -51,9 +51,9 @@ fn test2() {\n                  b: 0b_1010_1010_u8,\n                  c: 1.0987654321e-15_f64 };\n         let ff = rustrt::rust_dbg_abi_2(f);\n-        error!(\"a: %f\", ff.a as float);\n-        error!(\"b: %u\", ff.b as uint);\n-        error!(\"c: %f\", ff.c as float);\n+        error2!(\"a: {}\", ff.a as float);\n+        error2!(\"b: {}\", ff.b as uint);\n+        error2!(\"c: {}\", ff.c as float);\n         assert_eq!(ff.a, f.c + 1.0f64);\n         assert_eq!(ff.b, 0xff_u8);\n         assert_eq!(ff.c, f.a - 1.0f64);"}, {"sha": "cfa721a4ed311991eca081ce32e61b517d88be90", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 232, "deletions": 232, "changes": 464, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,236 +12,236 @@ use std::libc;\n \n pub fn main() {\n   let f = 1 as *libc::FILE;\n-  info!(f as int);\n-  info!(f as uint);\n-  info!(f as i8);\n-  info!(f as i16);\n-  info!(f as i32);\n-  info!(f as i64);\n-  info!(f as u8);\n-  info!(f as u16);\n-  info!(f as u32);\n-  info!(f as u64);\n-\n-  info!(1 as int);\n-  info!(1 as uint);\n-  info!(1 as float);\n-  info!(1 as *libc::FILE);\n-  info!(1 as i8);\n-  info!(1 as i16);\n-  info!(1 as i32);\n-  info!(1 as i64);\n-  info!(1 as u8);\n-  info!(1 as u16);\n-  info!(1 as u32);\n-  info!(1 as u64);\n-  info!(1 as f32);\n-  info!(1 as f64);\n-\n-  info!(1u as int);\n-  info!(1u as uint);\n-  info!(1u as float);\n-  info!(1u as *libc::FILE);\n-  info!(1u as i8);\n-  info!(1u as i16);\n-  info!(1u as i32);\n-  info!(1u as i64);\n-  info!(1u as u8);\n-  info!(1u as u16);\n-  info!(1u as u32);\n-  info!(1u as u64);\n-  info!(1u as f32);\n-  info!(1u as f64);\n-\n-  info!(1i8 as int);\n-  info!(1i8 as uint);\n-  info!(1i8 as float);\n-  info!(1i8 as *libc::FILE);\n-  info!(1i8 as i8);\n-  info!(1i8 as i16);\n-  info!(1i8 as i32);\n-  info!(1i8 as i64);\n-  info!(1i8 as u8);\n-  info!(1i8 as u16);\n-  info!(1i8 as u32);\n-  info!(1i8 as u64);\n-  info!(1i8 as f32);\n-  info!(1i8 as f64);\n-\n-  info!(1u8 as int);\n-  info!(1u8 as uint);\n-  info!(1u8 as float);\n-  info!(1u8 as *libc::FILE);\n-  info!(1u8 as i8);\n-  info!(1u8 as i16);\n-  info!(1u8 as i32);\n-  info!(1u8 as i64);\n-  info!(1u8 as u8);\n-  info!(1u8 as u16);\n-  info!(1u8 as u32);\n-  info!(1u8 as u64);\n-  info!(1u8 as f32);\n-  info!(1u8 as f64);\n-\n-  info!(1i16 as int);\n-  info!(1i16 as uint);\n-  info!(1i16 as float);\n-  info!(1i16 as *libc::FILE);\n-  info!(1i16 as i8);\n-  info!(1i16 as i16);\n-  info!(1i16 as i32);\n-  info!(1i16 as i64);\n-  info!(1i16 as u8);\n-  info!(1i16 as u16);\n-  info!(1i16 as u32);\n-  info!(1i16 as u64);\n-  info!(1i16 as f32);\n-  info!(1i16 as f64);\n-\n-  info!(1u16 as int);\n-  info!(1u16 as uint);\n-  info!(1u16 as float);\n-  info!(1u16 as *libc::FILE);\n-  info!(1u16 as i8);\n-  info!(1u16 as i16);\n-  info!(1u16 as i32);\n-  info!(1u16 as i64);\n-  info!(1u16 as u8);\n-  info!(1u16 as u16);\n-  info!(1u16 as u32);\n-  info!(1u16 as u64);\n-  info!(1u16 as f32);\n-  info!(1u16 as f64);\n-\n-  info!(1i32 as int);\n-  info!(1i32 as uint);\n-  info!(1i32 as float);\n-  info!(1i32 as *libc::FILE);\n-  info!(1i32 as i8);\n-  info!(1i32 as i16);\n-  info!(1i32 as i32);\n-  info!(1i32 as i64);\n-  info!(1i32 as u8);\n-  info!(1i32 as u16);\n-  info!(1i32 as u32);\n-  info!(1i32 as u64);\n-  info!(1i32 as f32);\n-  info!(1i32 as f64);\n-\n-  info!(1u32 as int);\n-  info!(1u32 as uint);\n-  info!(1u32 as float);\n-  info!(1u32 as *libc::FILE);\n-  info!(1u32 as i8);\n-  info!(1u32 as i16);\n-  info!(1u32 as i32);\n-  info!(1u32 as i64);\n-  info!(1u32 as u8);\n-  info!(1u32 as u16);\n-  info!(1u32 as u32);\n-  info!(1u32 as u64);\n-  info!(1u32 as f32);\n-  info!(1u32 as f64);\n-\n-  info!(1i64 as int);\n-  info!(1i64 as uint);\n-  info!(1i64 as float);\n-  info!(1i64 as *libc::FILE);\n-  info!(1i64 as i8);\n-  info!(1i64 as i16);\n-  info!(1i64 as i32);\n-  info!(1i64 as i64);\n-  info!(1i64 as u8);\n-  info!(1i64 as u16);\n-  info!(1i64 as u32);\n-  info!(1i64 as u64);\n-  info!(1i64 as f32);\n-  info!(1i64 as f64);\n-\n-  info!(1u64 as int);\n-  info!(1u64 as uint);\n-  info!(1u64 as float);\n-  info!(1u64 as *libc::FILE);\n-  info!(1u64 as i8);\n-  info!(1u64 as i16);\n-  info!(1u64 as i32);\n-  info!(1u64 as i64);\n-  info!(1u64 as u8);\n-  info!(1u64 as u16);\n-  info!(1u64 as u32);\n-  info!(1u64 as u64);\n-  info!(1u64 as f32);\n-  info!(1u64 as f64);\n-\n-  info!(1u64 as int);\n-  info!(1u64 as uint);\n-  info!(1u64 as float);\n-  info!(1u64 as *libc::FILE);\n-  info!(1u64 as i8);\n-  info!(1u64 as i16);\n-  info!(1u64 as i32);\n-  info!(1u64 as i64);\n-  info!(1u64 as u8);\n-  info!(1u64 as u16);\n-  info!(1u64 as u32);\n-  info!(1u64 as u64);\n-  info!(1u64 as f32);\n-  info!(1u64 as f64);\n-\n-  info!(true as int);\n-  info!(true as uint);\n-  info!(true as float);\n-  info!(true as *libc::FILE);\n-  info!(true as i8);\n-  info!(true as i16);\n-  info!(true as i32);\n-  info!(true as i64);\n-  info!(true as u8);\n-  info!(true as u16);\n-  info!(true as u32);\n-  info!(true as u64);\n-  info!(true as f32);\n-  info!(true as f64);\n-\n-  info!(1. as int);\n-  info!(1. as uint);\n-  info!(1. as float);\n-  info!(1. as i8);\n-  info!(1. as i16);\n-  info!(1. as i32);\n-  info!(1. as i64);\n-  info!(1. as u8);\n-  info!(1. as u16);\n-  info!(1. as u32);\n-  info!(1. as u64);\n-  info!(1. as f32);\n-  info!(1. as f64);\n-\n-  info!(1f32 as int);\n-  info!(1f32 as uint);\n-  info!(1f32 as float);\n-  info!(1f32 as i8);\n-  info!(1f32 as i16);\n-  info!(1f32 as i32);\n-  info!(1f32 as i64);\n-  info!(1f32 as u8);\n-  info!(1f32 as u16);\n-  info!(1f32 as u32);\n-  info!(1f32 as u64);\n-  info!(1f32 as f32);\n-  info!(1f32 as f64);\n-\n-  info!(1f64 as int);\n-  info!(1f64 as uint);\n-  info!(1f64 as float);\n-  info!(1f64 as i8);\n-  info!(1f64 as i16);\n-  info!(1f64 as i32);\n-  info!(1f64 as i64);\n-  info!(1f64 as u8);\n-  info!(1f64 as u16);\n-  info!(1f64 as u32);\n-  info!(1f64 as u64);\n-  info!(1f64 as f32);\n-  info!(1f64 as f64);\n+  info2!(\"{}\", f as int);\n+  info2!(\"{}\", f as uint);\n+  info2!(\"{}\", f as i8);\n+  info2!(\"{}\", f as i16);\n+  info2!(\"{}\", f as i32);\n+  info2!(\"{}\", f as i64);\n+  info2!(\"{}\", f as u8);\n+  info2!(\"{}\", f as u16);\n+  info2!(\"{}\", f as u32);\n+  info2!(\"{}\", f as u64);\n+\n+  info2!(\"{}\", 1 as int);\n+  info2!(\"{}\", 1 as uint);\n+  info2!(\"{}\", 1 as float);\n+  info2!(\"{}\", 1 as *libc::FILE);\n+  info2!(\"{}\", 1 as i8);\n+  info2!(\"{}\", 1 as i16);\n+  info2!(\"{}\", 1 as i32);\n+  info2!(\"{}\", 1 as i64);\n+  info2!(\"{}\", 1 as u8);\n+  info2!(\"{}\", 1 as u16);\n+  info2!(\"{}\", 1 as u32);\n+  info2!(\"{}\", 1 as u64);\n+  info2!(\"{}\", 1 as f32);\n+  info2!(\"{}\", 1 as f64);\n+\n+  info2!(\"{}\", 1u as int);\n+  info2!(\"{}\", 1u as uint);\n+  info2!(\"{}\", 1u as float);\n+  info2!(\"{}\", 1u as *libc::FILE);\n+  info2!(\"{}\", 1u as i8);\n+  info2!(\"{}\", 1u as i16);\n+  info2!(\"{}\", 1u as i32);\n+  info2!(\"{}\", 1u as i64);\n+  info2!(\"{}\", 1u as u8);\n+  info2!(\"{}\", 1u as u16);\n+  info2!(\"{}\", 1u as u32);\n+  info2!(\"{}\", 1u as u64);\n+  info2!(\"{}\", 1u as f32);\n+  info2!(\"{}\", 1u as f64);\n+\n+  info2!(\"{}\", 1i8 as int);\n+  info2!(\"{}\", 1i8 as uint);\n+  info2!(\"{}\", 1i8 as float);\n+  info2!(\"{}\", 1i8 as *libc::FILE);\n+  info2!(\"{}\", 1i8 as i8);\n+  info2!(\"{}\", 1i8 as i16);\n+  info2!(\"{}\", 1i8 as i32);\n+  info2!(\"{}\", 1i8 as i64);\n+  info2!(\"{}\", 1i8 as u8);\n+  info2!(\"{}\", 1i8 as u16);\n+  info2!(\"{}\", 1i8 as u32);\n+  info2!(\"{}\", 1i8 as u64);\n+  info2!(\"{}\", 1i8 as f32);\n+  info2!(\"{}\", 1i8 as f64);\n+\n+  info2!(\"{}\", 1u8 as int);\n+  info2!(\"{}\", 1u8 as uint);\n+  info2!(\"{}\", 1u8 as float);\n+  info2!(\"{}\", 1u8 as *libc::FILE);\n+  info2!(\"{}\", 1u8 as i8);\n+  info2!(\"{}\", 1u8 as i16);\n+  info2!(\"{}\", 1u8 as i32);\n+  info2!(\"{}\", 1u8 as i64);\n+  info2!(\"{}\", 1u8 as u8);\n+  info2!(\"{}\", 1u8 as u16);\n+  info2!(\"{}\", 1u8 as u32);\n+  info2!(\"{}\", 1u8 as u64);\n+  info2!(\"{}\", 1u8 as f32);\n+  info2!(\"{}\", 1u8 as f64);\n+\n+  info2!(\"{}\", 1i16 as int);\n+  info2!(\"{}\", 1i16 as uint);\n+  info2!(\"{}\", 1i16 as float);\n+  info2!(\"{}\", 1i16 as *libc::FILE);\n+  info2!(\"{}\", 1i16 as i8);\n+  info2!(\"{}\", 1i16 as i16);\n+  info2!(\"{}\", 1i16 as i32);\n+  info2!(\"{}\", 1i16 as i64);\n+  info2!(\"{}\", 1i16 as u8);\n+  info2!(\"{}\", 1i16 as u16);\n+  info2!(\"{}\", 1i16 as u32);\n+  info2!(\"{}\", 1i16 as u64);\n+  info2!(\"{}\", 1i16 as f32);\n+  info2!(\"{}\", 1i16 as f64);\n+\n+  info2!(\"{}\", 1u16 as int);\n+  info2!(\"{}\", 1u16 as uint);\n+  info2!(\"{}\", 1u16 as float);\n+  info2!(\"{}\", 1u16 as *libc::FILE);\n+  info2!(\"{}\", 1u16 as i8);\n+  info2!(\"{}\", 1u16 as i16);\n+  info2!(\"{}\", 1u16 as i32);\n+  info2!(\"{}\", 1u16 as i64);\n+  info2!(\"{}\", 1u16 as u8);\n+  info2!(\"{}\", 1u16 as u16);\n+  info2!(\"{}\", 1u16 as u32);\n+  info2!(\"{}\", 1u16 as u64);\n+  info2!(\"{}\", 1u16 as f32);\n+  info2!(\"{}\", 1u16 as f64);\n+\n+  info2!(\"{}\", 1i32 as int);\n+  info2!(\"{}\", 1i32 as uint);\n+  info2!(\"{}\", 1i32 as float);\n+  info2!(\"{}\", 1i32 as *libc::FILE);\n+  info2!(\"{}\", 1i32 as i8);\n+  info2!(\"{}\", 1i32 as i16);\n+  info2!(\"{}\", 1i32 as i32);\n+  info2!(\"{}\", 1i32 as i64);\n+  info2!(\"{}\", 1i32 as u8);\n+  info2!(\"{}\", 1i32 as u16);\n+  info2!(\"{}\", 1i32 as u32);\n+  info2!(\"{}\", 1i32 as u64);\n+  info2!(\"{}\", 1i32 as f32);\n+  info2!(\"{}\", 1i32 as f64);\n+\n+  info2!(\"{}\", 1u32 as int);\n+  info2!(\"{}\", 1u32 as uint);\n+  info2!(\"{}\", 1u32 as float);\n+  info2!(\"{}\", 1u32 as *libc::FILE);\n+  info2!(\"{}\", 1u32 as i8);\n+  info2!(\"{}\", 1u32 as i16);\n+  info2!(\"{}\", 1u32 as i32);\n+  info2!(\"{}\", 1u32 as i64);\n+  info2!(\"{}\", 1u32 as u8);\n+  info2!(\"{}\", 1u32 as u16);\n+  info2!(\"{}\", 1u32 as u32);\n+  info2!(\"{}\", 1u32 as u64);\n+  info2!(\"{}\", 1u32 as f32);\n+  info2!(\"{}\", 1u32 as f64);\n+\n+  info2!(\"{}\", 1i64 as int);\n+  info2!(\"{}\", 1i64 as uint);\n+  info2!(\"{}\", 1i64 as float);\n+  info2!(\"{}\", 1i64 as *libc::FILE);\n+  info2!(\"{}\", 1i64 as i8);\n+  info2!(\"{}\", 1i64 as i16);\n+  info2!(\"{}\", 1i64 as i32);\n+  info2!(\"{}\", 1i64 as i64);\n+  info2!(\"{}\", 1i64 as u8);\n+  info2!(\"{}\", 1i64 as u16);\n+  info2!(\"{}\", 1i64 as u32);\n+  info2!(\"{}\", 1i64 as u64);\n+  info2!(\"{}\", 1i64 as f32);\n+  info2!(\"{}\", 1i64 as f64);\n+\n+  info2!(\"{}\", 1u64 as int);\n+  info2!(\"{}\", 1u64 as uint);\n+  info2!(\"{}\", 1u64 as float);\n+  info2!(\"{}\", 1u64 as *libc::FILE);\n+  info2!(\"{}\", 1u64 as i8);\n+  info2!(\"{}\", 1u64 as i16);\n+  info2!(\"{}\", 1u64 as i32);\n+  info2!(\"{}\", 1u64 as i64);\n+  info2!(\"{}\", 1u64 as u8);\n+  info2!(\"{}\", 1u64 as u16);\n+  info2!(\"{}\", 1u64 as u32);\n+  info2!(\"{}\", 1u64 as u64);\n+  info2!(\"{}\", 1u64 as f32);\n+  info2!(\"{}\", 1u64 as f64);\n+\n+  info2!(\"{}\", 1u64 as int);\n+  info2!(\"{}\", 1u64 as uint);\n+  info2!(\"{}\", 1u64 as float);\n+  info2!(\"{}\", 1u64 as *libc::FILE);\n+  info2!(\"{}\", 1u64 as i8);\n+  info2!(\"{}\", 1u64 as i16);\n+  info2!(\"{}\", 1u64 as i32);\n+  info2!(\"{}\", 1u64 as i64);\n+  info2!(\"{}\", 1u64 as u8);\n+  info2!(\"{}\", 1u64 as u16);\n+  info2!(\"{}\", 1u64 as u32);\n+  info2!(\"{}\", 1u64 as u64);\n+  info2!(\"{}\", 1u64 as f32);\n+  info2!(\"{}\", 1u64 as f64);\n+\n+  info2!(\"{}\", true as int);\n+  info2!(\"{}\", true as uint);\n+  info2!(\"{}\", true as float);\n+  info2!(\"{}\", true as *libc::FILE);\n+  info2!(\"{}\", true as i8);\n+  info2!(\"{}\", true as i16);\n+  info2!(\"{}\", true as i32);\n+  info2!(\"{}\", true as i64);\n+  info2!(\"{}\", true as u8);\n+  info2!(\"{}\", true as u16);\n+  info2!(\"{}\", true as u32);\n+  info2!(\"{}\", true as u64);\n+  info2!(\"{}\", true as f32);\n+  info2!(\"{}\", true as f64);\n+\n+  info2!(\"{}\", 1. as int);\n+  info2!(\"{}\", 1. as uint);\n+  info2!(\"{}\", 1. as float);\n+  info2!(\"{}\", 1. as i8);\n+  info2!(\"{}\", 1. as i16);\n+  info2!(\"{}\", 1. as i32);\n+  info2!(\"{}\", 1. as i64);\n+  info2!(\"{}\", 1. as u8);\n+  info2!(\"{}\", 1. as u16);\n+  info2!(\"{}\", 1. as u32);\n+  info2!(\"{}\", 1. as u64);\n+  info2!(\"{}\", 1. as f32);\n+  info2!(\"{}\", 1. as f64);\n+\n+  info2!(\"{}\", 1f32 as int);\n+  info2!(\"{}\", 1f32 as uint);\n+  info2!(\"{}\", 1f32 as float);\n+  info2!(\"{}\", 1f32 as i8);\n+  info2!(\"{}\", 1f32 as i16);\n+  info2!(\"{}\", 1f32 as i32);\n+  info2!(\"{}\", 1f32 as i64);\n+  info2!(\"{}\", 1f32 as u8);\n+  info2!(\"{}\", 1f32 as u16);\n+  info2!(\"{}\", 1f32 as u32);\n+  info2!(\"{}\", 1f32 as u64);\n+  info2!(\"{}\", 1f32 as f32);\n+  info2!(\"{}\", 1f32 as f64);\n+\n+  info2!(\"{}\", 1f64 as int);\n+  info2!(\"{}\", 1f64 as uint);\n+  info2!(\"{}\", 1f64 as float);\n+  info2!(\"{}\", 1f64 as i8);\n+  info2!(\"{}\", 1f64 as i16);\n+  info2!(\"{}\", 1f64 as i32);\n+  info2!(\"{}\", 1f64 as i64);\n+  info2!(\"{}\", 1f64 as u8);\n+  info2!(\"{}\", 1f64 as u16);\n+  info2!(\"{}\", 1f64 as u32);\n+  info2!(\"{}\", 1f64 as u64);\n+  info2!(\"{}\", 1f64 as f32);\n+  info2!(\"{}\", 1f64 as f64);\n }"}, {"sha": "89ca7de00e2beb3936dd5d5d5a8ff7dd0a79bd4e", "filename": "src/test/run-pass/syntax-extension-cfg.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,23 +13,23 @@\n \n fn main() {\n     // check\n-    if ! cfg!(foo) { fail!() }\n-    if   cfg!(not(foo)) { fail!() }\n+    if ! cfg!(foo) { fail2!() }\n+    if   cfg!(not(foo)) { fail2!() }\n \n-    if ! cfg!(bar(baz)) { fail!() }\n-    if   cfg!(not(bar(baz))) { fail!() }\n+    if ! cfg!(bar(baz)) { fail2!() }\n+    if   cfg!(not(bar(baz))) { fail2!() }\n \n-    if ! cfg!(qux=\"foo\") { fail!() }\n-    if   cfg!(not(qux=\"foo\")) { fail!() }\n+    if ! cfg!(qux=\"foo\") { fail2!() }\n+    if   cfg!(not(qux=\"foo\")) { fail2!() }\n \n-    if ! cfg!(foo, bar(baz), qux=\"foo\") { fail!() }\n-    if   cfg!(not(foo, bar(baz), qux=\"foo\")) { fail!() }\n+    if ! cfg!(foo, bar(baz), qux=\"foo\") { fail2!() }\n+    if   cfg!(not(foo, bar(baz), qux=\"foo\")) { fail2!() }\n \n-    if cfg!(not_a_cfg) { fail!() }\n-    if cfg!(not_a_cfg, foo, bar(baz), qux=\"foo\") { fail!() }\n+    if cfg!(not_a_cfg) { fail2!() }\n+    if cfg!(not_a_cfg, foo, bar(baz), qux=\"foo\") { fail2!() }\n \n-    if ! cfg!(not(not_a_cfg)) { fail!() }\n-    if ! cfg!(not(not_a_cfg), foo, bar(baz), qux=\"foo\") { fail!() }\n+    if ! cfg!(not(not_a_cfg)) { fail2!() }\n+    if ! cfg!(not(not_a_cfg), foo, bar(baz), qux=\"foo\") { fail2!() }\n \n-    if cfg!(trailing_comma, ) { fail!() }\n+    if cfg!(trailing_comma, ) { fail2!() }\n }"}, {"sha": "e778645ad27b7a75f4509d88d3bb74b6c3963a6f", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --cfg nofmt\n+\n extern mod extra;\n \n+macro_rules! fmt(($($arg:tt)*) => (oldfmt!($($arg)*)))\n+\n fn test(actual: ~str, expected: ~str) {\n-    info!(actual.clone());\n-    info!(expected.clone());\n+    info2!(\"{}\", actual.clone());\n+    info2!(\"{}\", expected.clone());\n     assert_eq!(actual, expected);\n }\n "}, {"sha": "5d326a50f0206b13fe9f9b29fd769446b3d57671", "filename": "src/test/run-pass/syntax-extension-source-utils-files/includeme.fragment", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -3,5 +3,5 @@\n {\n     assert!(file!().ends_with(\"includeme.fragment\"));\n     assert!(line!() == 5u);\n-    fmt!(\"victory robot %u\", line!())\n+    format!(\"victory robot {}\", line!())\n }"}, {"sha": "6f5ca090052f2c8b502abfa26840f1d55b9a18a1", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,7 +21,7 @@ struct t_rec {\n \n pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n-    let y = fmt!(\"%?\", x);\n-    info!(\"y = %s\", y);\n+    let y = format!(\"{:?}\", x);\n+    info2!(\"y = {}\", y);\n     assert_eq!(y, ~\"t_rec{c8: 22u8, t: a_tag(44u64)}\");\n }"}, {"sha": "3566eedcb55517cfe70d98b9f54a540bf46b48f1", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,9 +17,9 @@ enum color {\n }\n \n pub fn main() {\n-    let act = fmt!(\"%?\", red);\n+    let act = format!(\"{:?}\", red);\n     println(act);\n     assert_eq!(~\"red\", act);\n-    assert_eq!(~\"green\", fmt!(\"%?\", green));\n-    assert_eq!(~\"white\", fmt!(\"%?\", white));\n+    assert_eq!(~\"green\", format!(\"{:?}\", green));\n+    assert_eq!(~\"white\", format!(\"{:?}\", white));\n }"}, {"sha": "9991f05aa3ac4c5b5764e756776ae30b2aaa8f9f", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -17,13 +17,13 @@ fn checktrue(rs: bool) -> bool { assert!((rs)); return true; }\n pub fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: extern fn(bool) -> bool) -> bool {\n-    info!(\"evenk\");\n-    info!(n);\n+    info2!(\"evenk\");\n+    info2!(\"{:?}\", n);\n     if n == 0 { return k(true); } else { return oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: extern fn(bool) -> bool) -> bool {\n-    info!(\"oddk\");\n-    info!(n);\n+    info2!(\"oddk\");\n+    info2!(\"{:?}\", n);\n     if n == 0 { return k(false); } else { return evenk(n - 1, k); }\n }"}, {"sha": "69d66092abf64ab4dd4a1a468f66e71cee1bdfd3", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,21 +20,21 @@ pub fn main() { test05(); }\n \n fn test05_start(ch : &Chan<int>) {\n     ch.send(10);\n-    error!(\"sent 10\");\n+    error2!(\"sent 10\");\n     ch.send(20);\n-    error!(\"sent 20\");\n+    error2!(\"sent 20\");\n     ch.send(30);\n-    error!(\"sent 30\");\n+    error2!(\"sent 30\");\n }\n \n fn test05() {\n     let (po, ch) = comm::stream();\n     task::spawn(|| test05_start(&ch) );\n     let mut value: int = po.recv();\n-    error!(value);\n+    error2!(\"{}\", value);\n     value = po.recv();\n-    error!(value);\n+    error2!(\"{}\", value);\n     value = po.recv();\n-    error!(value);\n+    error2!(\"{}\", value);\n     assert_eq!(value, 30);\n }"}, {"sha": "f169566653a3beafa510506dce443bf54a95ba72", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -12,9 +12,9 @@ use std::task;\n \n pub fn main() { test00(); }\n \n-fn start() { info!(\"Started / Finished task.\"); }\n+fn start() { info2!(\"Started / Finished task.\"); }\n \n fn test00() {\n     task::try(|| start() );\n-    info!(\"Completing.\");\n+    info2!(\"Completing.\");\n }"}, {"sha": "023bb142e444c086c821fce04227f1a75ec41629", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -23,10 +23,10 @@ fn start(c: &comm::Chan<comm::Chan<~str>>) {\n     let mut b;\n     a = p.recv();\n     assert!(a == ~\"A\");\n-    error!(a);\n+    error2!(\"{:?}\", a);\n     b = p.recv();\n     assert!(b == ~\"B\");\n-    error!(b);\n+    error2!(\"{:?}\", b);\n }\n \n pub fn main() {"}, {"sha": "c640bd32bad329846803bc321fba3f1923e50c2b", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ use std::task;\n \n pub fn main() { test00(); }\n \n-fn start(_task_number: int) { info!(\"Started / Finished task.\"); }\n+fn start(_task_number: int) { info2!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n@@ -35,5 +35,5 @@ fn test00() {\n     // Try joining tasks that have already finished.\n     result.unwrap().recv();\n \n-    info!(\"Joined task.\");\n+    info2!(\"Joined task.\");\n }"}, {"sha": "2bbed1497cc5ee6880dd78c71466e8137eaeb842", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,8 +21,8 @@ fn start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n }\n \n pub fn main() {\n-    info!(\"Check that we don't deadlock.\");\n+    info2!(\"Check that we don't deadlock.\");\n     let (_p, ch) = comm::stream();\n     task::try(|| start(&ch, 0, 10) );\n-    info!(\"Joined task\");\n+    info2!(\"Joined task\");\n }"}, {"sha": "cacaea5e8c06f429d14e77445258fb532e5a66ea", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;\n     while (i > 0) {\n-        info!(i);\n+        info2!(\"{}\", i);\n         let ch = ch.clone();\n         task::spawn({let i = i; || child(i, &ch)});\n         i = i - 1;\n@@ -31,15 +31,15 @@ pub fn main() {\n \n     i = 10;\n     while (i > 0) {\n-        info!(i);\n+        info2!(\"{}\", i);\n         po.recv();\n         i = i - 1;\n     }\n \n-    info!(\"main thread exiting\");\n+    info2!(\"main thread exiting\");\n }\n \n fn child(x: int, ch: &comm::SharedChan<int>) {\n-    info!(x);\n+    info2!(\"{}\", x);\n     ch.send(x);\n }"}, {"sha": "53c3b7f17eae18ec98af59b2c2d4d1b0d070f339", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,24 +16,24 @@ use std::comm::SharedChan;\n use std::comm;\n use std::task;\n \n-pub fn main() { info!(\"===== WITHOUT THREADS =====\"); test00(); }\n+pub fn main() { info2!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n fn test00_start(ch: &SharedChan<int>, message: int, count: int) {\n-    info!(\"Starting test00_start\");\n+    info2!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n-        info!(\"Sending Message\");\n+        info2!(\"Sending Message\");\n         ch.send(message + 0);\n         i = i + 1;\n     }\n-    info!(\"Ending test00_start\");\n+    info2!(\"Ending test00_start\");\n }\n \n fn test00() {\n     let number_of_tasks: int = 16;\n     let number_of_messages: int = 4;\n \n-    info!(\"Creating tasks\");\n+    info2!(\"Creating tasks\");\n \n     let (po, ch) = comm::stream();\n     let ch = comm::SharedChan::new(ch);\n@@ -67,8 +67,8 @@ fn test00() {\n     // Join spawned tasks...\n     for r in results.iter() { r.recv(); }\n \n-    info!(\"Completed: Final number is: \");\n-    error!(sum);\n+    info2!(\"Completed: Final number is: \");\n+    error2!(\"{:?}\", sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert_eq!(sum, 480);"}, {"sha": "80d981b0d45505bf217d1748ea4266d23e55c017", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -24,31 +24,31 @@ fn test00() {\n     c.send(4);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     c.send(5);\n     c.send(6);\n     c.send(7);\n     c.send(8);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     r = p.recv();\n     sum += r;\n-    info!(r);\n+    info2!(\"{}\", r);\n     assert_eq!(sum, 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);\n }"}, {"sha": "789425361f8c9477aa418d22da5ea9637ff18d5f", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -38,7 +38,7 @@ fn test00() {\n     let mut i: int = 0;\n     while i < number_of_messages {\n         sum += p.recv();\n-        info!(r);\n+        info2!(\"{:?}\", r);\n         i += 1;\n     }\n "}, {"sha": "d4cb175b1bd1b9e26704eff9e55883fa524c71f1", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -34,7 +34,7 @@ fn test_mkdtemp() {\n // to depend on std\n fn recursive_mkdir_rel() {\n     let path = Path(\"frob\");\n-    debug!(\"recursive_mkdir_rel: Making: %s in cwd %s [%?]\", path.to_str(),\n+    debug2!(\"recursive_mkdir_rel: Making: {} in cwd {} [{:?}]\", path.to_str(),\n            os::getcwd().to_str(),\n            os::path_exists(&path));\n     assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n@@ -52,13 +52,13 @@ fn recursive_mkdir_dot() {\n \n fn recursive_mkdir_rel_2() {\n     let path = Path(\"./frob/baz\");\n-    debug!(\"recursive_mkdir_rel_2: Making: %s in cwd %s [%?]\", path.to_str(),\n+    debug2!(\"recursive_mkdir_rel_2: Making: {} in cwd {} [{:?}]\", path.to_str(),\n            os::getcwd().to_str(), os::path_exists(&path));\n     assert!(os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n         assert!(os::path_is_dir(&path));\n     assert!(os::path_is_dir(&path.pop()));\n     let path2 = Path(\"quux/blat\");\n-    debug!(\"recursive_mkdir_rel_2: Making: %s in cwd %s\", path2.to_str(),\n+    debug2!(\"recursive_mkdir_rel_2: Making: {} in cwd {}\", path2.to_str(),\n            os::getcwd().to_str());\n     assert!(os::mkdir_recursive(&path2, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n         assert!(os::path_is_dir(&path2));\n@@ -73,7 +73,7 @@ pub fn test_rmdir_recursive_ok() {\n                                         couldn't create temp dir\");\n     let root = tmpdir.push(\"foo\");\n \n-    debug!(\"making %s\", root.to_str());\n+    debug2!(\"making {}\", root.to_str());\n     assert!(os::make_dir(&root, rwx));\n     assert!(os::make_dir(&root.push(\"foo\"), rwx));\n     assert!(os::make_dir(&root.push(\"foo\").push(\"bar\"), rwx));"}, {"sha": "a2ba9e69bedb730df8c5e1ccb66641125286ebba", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -22,12 +22,12 @@ fn test_cont() { let mut i = 0; while i < 1 { i += 1; let _x: @int = loop; } }\n fn test_ret() { let _x: @int = return; }\n \n fn test_fail() {\n-    fn f() { let _x: @int = fail!(); }\n+    fn f() { let _x: @int = fail2!(); }\n     task::try(|| f() );\n }\n \n fn test_fail_indirect() {\n-    fn f() -> ! { fail!(); }\n+    fn f() -> ! { fail2!(); }\n     fn g() { let _x: @int = f(); }\n     task::try(|| g() );\n }"}, {"sha": "a399d22cdad002c7ed79de82e9c49e615b17d1ea", "filename": "src/test/run-pass/test-runner-hides-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,4 +15,4 @@ extern mod extra;\n \n // Building as a test runner means that a synthetic main will be run,\n // not ours\n-pub fn main() { fail!(); }\n+pub fn main() { fail2!(); }"}, {"sha": "81fcfd7efa0e7d6c2d02f2f5d65b1ae47f538013", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ use std::task;\n pub fn main() {\n     let mut i = 10;\n     while i > 0 { task::spawn({let i = i; || child(i)}); i = i - 1; }\n-    info!(\"main thread exiting\");\n+    info2!(\"main thread exiting\");\n }\n \n-fn child(x: int) { info!(x); }\n+fn child(x: int) { info2!(\"{}\", x); }"}, {"sha": "0d6246655a4df2771dd7d0a00e878792102acbd9", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -38,7 +38,7 @@ impl to_str for Tree {\n     fn to_str_(&self) -> ~str {\n         let (l, r) = (self.left, self.right);\n         let val = &self.val;\n-        fmt!(\"[%s, %s, %s]\", val.to_str_(), l.to_str_(), r.to_str_())\n+        format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n "}, {"sha": "baeb9779a7f3973bdbd858299b5c66ab36c94bcd", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -20,7 +20,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_string(&self) -> ~str {\n-        fmt!(\"[%s]\", self.iter().map(|e| e.to_string()).collect::<~[~str]>().connect(\", \"))\n+        format!(\"[{}]\", self.iter().map(|e| e.to_string()).to_owned_vec().connect(\", \"))\n     }\n }\n "}, {"sha": "340d0bc71aa13c8d4bfa5a05ccd8c5d9a0eef217", "filename": "src/test/run-pass/traits-default-method-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n \n trait Foo {\n     fn bar(&self) -> ~str {\n-        fmt!(\"test\")\n+        format!(\"test\")\n     }\n }\n "}, {"sha": "62b415422a3b55e020b23c7fc8773e0683e82c7d", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     let (po, ch) = comm::stream();\n     ch.send(42);\n     let r = po.recv();\n-    error!(r);\n+    error2!(\"{:?}\", r);\n }"}, {"sha": "8de2c1e0814b7ab415baa5ae292bab9eb7d09805", "filename": "src/test/run-pass/typeck-macro-interaction-issue-8852.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -9,7 +9,7 @@ macro_rules! test(\n             match (a, b) {\n                 (A(x), A(y)) => A($e),\n                 (B(x), B(y)) => B($e),\n-                _ => fail!()\n+                _ => fail2!()\n             }\n         }\n     )"}, {"sha": "0d37c0f443d23780a4209030ff1cc34571916525", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -61,5 +61,5 @@ pub fn main() {\n     assert!(!Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n                  branch(@leaf(magenta), @leaf(magenta))));\n \n-    error!(\"Assertions all succeeded!\");\n+    error2!(\"Assertions all succeeded!\");\n }"}, {"sha": "11973df2fec30d91c72f4a447e33733202907928", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -60,5 +60,5 @@ pub fn main() {\n     assert!(!branch(@leaf(magenta), @leaf(cyan))\n         .isEq(branch(@leaf(magenta), @leaf(magenta))));\n \n-    error!(\"Assertions all succeeded!\");\n+    error2!(\"Assertions all succeeded!\");\n }"}, {"sha": "e1ed28bc2ccd2058f63c0e006d56e4f6ca959686", "filename": "src/test/run-pass/unary-minus-suffix-inference.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,43 +11,43 @@\n pub fn main() {\n     let a = 1;\n     let a_neg: i8 = -a;\n-    error!(a_neg);\n+    error2!(\"{}\", a_neg);\n \n     let b = 1;\n     let b_neg: i16 = -b;\n-    error!(b_neg);\n+    error2!(\"{}\", b_neg);\n \n     let c = 1;\n     let c_neg: i32 = -c;\n-    error!(c_neg);\n+    error2!(\"{}\", c_neg);\n \n     let d = 1;\n     let d_neg: i64 = -d;\n-    error!(d_neg);\n+    error2!(\"{}\", d_neg);\n \n     let e = 1;\n     let e_neg: int = -e;\n-    error!(e_neg);\n+    error2!(\"{}\", e_neg);\n \n     // intentional overflows\n \n     let f = 1;\n     let f_neg: u8 = -f;\n-    error!(f_neg);\n+    error2!(\"{}\", f_neg);\n \n     let g = 1;\n     let g_neg: u16 = -g;\n-    error!(g_neg);\n+    error2!(\"{}\", g_neg);\n \n     let h = 1;\n     let h_neg: u32 = -h;\n-    error!(h_neg);\n+    error2!(\"{}\", h_neg);\n \n     let i = 1;\n     let i_neg: u64 = -i;\n-    error!(i_neg);\n+    error2!(\"{}\", i_neg);\n \n     let j = 1;\n     let j_neg: uint = -j;\n-    error!(j_neg);\n+    error2!(\"{}\", j_neg);\n }"}, {"sha": "2d91cd9b8a9fc8ce8e0f03681ad9d724a59a4540", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -18,6 +18,6 @@ pub fn main() {\n     let rc1 = sys::refcount(*i);\n     let j = i.clone();\n     let rc2 = sys::refcount(*i);\n-    error!(\"rc1: %u rc2: %u\", rc1, rc2);\n+    error2!(\"rc1: {} rc2: {}\", rc1, rc2);\n     assert_eq!(rc1 + 1u, rc2);\n }"}, {"sha": "14a651943fde9c48b67b48bc9410fa168da5359e", "filename": "src/test/run-pass/unique-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,5 +13,5 @@ pub fn main() {\n }\n \n fn f(_i: ~int) -> ~int {\n-    fail!();\n+    fail2!();\n }"}, {"sha": "d0fa48a6c4d507a08fc29600dd43b5062dfab124", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ fn test1() {\n     let x = u(~10);\n     assert!(match x {\n       u(a) => {\n-        error!(a);\n+        error2!(\"{:?}\", a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "24342190e3fc4c298e2de46afad26f61e2099218", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let i = ~100;\n-    error!(i);\n+    error2!(\"{:?}\", i);\n }"}, {"sha": "7a9790973d0116c3af502ed1ad99aa14c12b0b47", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ enum bar { u(~int), w(int), }\n pub fn main() {\n     assert!(match u(~10) {\n       u(a) => {\n-        error!(a);\n+        error2!(\"{:?}\", a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "d33db85eb30e02cf15205b47a31724f6ce061e96", "filename": "src/test/run-pass/unique-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funique-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -11,7 +11,7 @@\n fn simple() {\n     match ~true {\n       ~true => { }\n-      _ => { fail!(); }\n+      _ => { fail2!(); }\n     }\n }\n "}, {"sha": "2d7234cbe314542f5afbfa7cc234a17ae7ff3a1e", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -16,7 +16,7 @@ struct Foo;\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        fail!(\"This failure should happen.\");\n+        fail2!(\"This failure should happen.\");\n     }\n }\n "}, {"sha": "e094f874c3fddaa2a74152f98cdd054dacff18b1", "filename": "src/test/run-pass/unreachable-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c = fail!();\n+    let c = fail2!();\n     id(c); //~ WARNING unreachable statement\n }\n "}, {"sha": "55a359efeed45be5a228a4deea14cccddfd98a84", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -15,7 +15,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c = fail!();\n+    let c = fail2!();\n     id(c);\n }\n "}, {"sha": "de65d9bbaba2b97863f157ea8ca1ad3af53d40ac", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ use std::task;\n \n fn f() {\n     let _a = @0;\n-    fail!();\n+    fail2!();\n }\n \n pub fn main() {"}, {"sha": "85676217d4f62df6721a86916ac1b0b00658e9b0", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,28 +21,28 @@ struct complainer {\n \n impl Drop for complainer {\n     fn drop(&mut self) {\n-        error!(\"About to send!\");\n+        error2!(\"About to send!\");\n         self.c.send(true);\n-        error!(\"Sent!\");\n+        error2!(\"Sent!\");\n     }\n }\n \n fn complainer(c: SharedChan<bool>) -> complainer {\n-    error!(\"Hello!\");\n+    error2!(\"Hello!\");\n     complainer {\n         c: c\n     }\n }\n \n fn f(c: SharedChan<bool>) {\n     let _c = complainer(c);\n-    fail!();\n+    fail2!();\n }\n \n pub fn main() {\n     let (p, c) = stream();\n     let c = SharedChan::new(c);\n     task::spawn_unlinked(|| f(c.clone()) );\n-    error!(\"hiiiiiiiii\");\n+    error2!(\"hiiiiiiiii\");\n     assert!(p.recv());\n }"}, {"sha": "751b9430e3b55b7c47860d1ba3f3c6d80364085c", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -29,7 +29,7 @@ fn complainer(c: @int) -> complainer {\n \n fn f() {\n     let _c = complainer(@0);\n-    fail!();\n+    fail2!();\n }\n \n pub fn main() {"}, {"sha": "07610fe7115ca60552377763891d475a7206a527", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -14,7 +14,7 @@ use std::task;\n \n fn f() {\n     let _a = ~0;\n-    fail!();\n+    fail2!();\n }\n \n pub fn main() {"}, {"sha": "18698a48613b823f7888e45e6db723200d0b3530", "filename": "src/test/run-pass/use-uninit-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -21,4 +21,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { info!(5); }\n+pub fn main() { info2!(\"{}\", 5); }"}, {"sha": "844b0521f3a3981ba98a8d87edf3690a19a120cc", "filename": "src/test/run-pass/use-uninit-match2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,12 +13,12 @@\n fn foo<T>(o: myoption<T>) -> int {\n     let mut x: int;\n     match o {\n-        none::<T> => { fail!(); }\n+        none::<T> => { fail2!(); }\n         some::<T>(_t) => { x = 5; }\n     }\n     return x;\n }\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { info!(5); }\n+pub fn main() { info2!(\"{}\", 5); }"}, {"sha": "5222b0eb984aee1b840ea661cdef0779fbd76291", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -42,10 +42,10 @@ pub fn main() {\n     fn check_str_eq(a: ~str, b: ~str) {\n         let mut i: int = 0;\n         for ab in a.byte_iter() {\n-            info!(i);\n-            info!(ab);\n+            info2!(\"{}\", i);\n+            info2!(\"{}\", ab);\n             let bb: u8 = b[i];\n-            info!(bb);\n+            info2!(\"{}\", bb);\n             assert_eq!(ab, bb);\n             i += 1;\n         }"}, {"sha": "0a8a9b1bab7990223815766406fb7311322647de", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let a: ~[int] = ~[1, 2, 3, 4, 5];\n     let b: ~[int] = ~[6, 7, 8, 9, 0];\n     let v: ~[int] = a + b;\n-    info!(v[9]);\n+    info2!(\"{}\", v[9]);\n     assert_eq!(v[0], 1);\n     assert_eq!(v[7], 8);\n     assert_eq!(v[9], 0);"}, {"sha": "e11bd257d42fb09f0a67a71f3a916cf8bbb9b3ff", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -13,5 +13,5 @@\n pub fn main() {\n     let mut later: ~[int];\n     if true { later = ~[1]; } else { later = ~[2]; }\n-    info!(later[0]);\n+    info2!(\"{}\", later[0]);\n }"}, {"sha": "8965ee688425aefccf7b18e77ab23d251db16398", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -1,22 +1,22 @@\n pub fn main() {\n     let x = @[1, 2, 3];\n     match x {\n-        [2, .._] => fail!(),\n+        [2, .._] => fail2!(),\n         [1, ..tail] => {\n             assert_eq!(tail, [2, 3]);\n         }\n-        [_] => fail!(),\n-        [] => fail!()\n+        [_] => fail2!(),\n+        [] => fail2!()\n     }\n \n     let y = (~[(1, true), (2, false)], 0.5);\n     match y {\n-        ([_, _, _], 0.5) => fail!(),\n+        ([_, _, _], 0.5) => fail2!(),\n         ([(1, a), (b, false), ..tail], _) => {\n             assert_eq!(a, true);\n             assert_eq!(b, 2);\n             assert!(tail.is_empty());\n         }\n-        ([.._tail], _) => fail!()\n+        ([.._tail], _) => fail2!()\n     }\n }"}, {"sha": "dec29c8da5330341bd697a02f17ffced8bdaacf0", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -1,14 +1,14 @@\n fn a() {\n     let x = ~[1];\n     match x {\n-        [_, _, _, _, _, .._] => fail!(),\n-        [.._, _, _, _, _] => fail!(),\n-        [_, .._, _, _] => fail!(),\n-        [_, _] => fail!(),\n+        [_, _, _, _, _, .._] => fail2!(),\n+        [.._, _, _, _, _] => fail2!(),\n+        [_, .._, _, _] => fail2!(),\n+        [_, _] => fail2!(),\n         [a] => {\n             assert_eq!(a, 1);\n         }\n-        [] => fail!()\n+        [] => fail2!()\n     }\n }\n \n@@ -20,38 +20,38 @@ fn b() {\n             assert_eq!(b, 2);\n             assert_eq!(c, &[3]);\n         }\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match x {\n         [..a, b, c] => {\n             assert_eq!(a, &[1]);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match x {\n         [a, ..b, c] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, &[2]);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n+        _ => fail2!()\n     }\n     match x {\n         [a, b, c] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n+        _ => fail2!()\n     }\n }\n \n fn c() {\n     let x = [1];\n     match x {\n-        [2, .. _] => fail!(),\n+        [2, .. _] => fail2!(),\n         [.. _] => ()\n     }\n }"}, {"sha": "4d5286502b7dfe14745144523c6919a996404074", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -47,7 +47,7 @@ fn test_loop() {\n     let mut i = 20;\n     let mut expected_len = 1u;\n     while i > 0 {\n-        error!(a.len());\n+        error2!(\"{}\", a.len());\n         assert_eq!(a.len(), expected_len);\n         a = a + a; // FIXME(#3387)---can't write a += a\n         i -= 1;"}, {"sha": "16070049151b5ac46c199d0582712d753e7220fd", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -61,17 +61,17 @@ fn canttouchthis() -> uint {\n     fn p() -> bool { true }\n     let _a = (assert!((true)) == (assert!(p())));\n     let _c = (assert!((p())) == ());\n-    let _b: bool = (info!(\"%d\", 0) == (return 0u));\n+    let _b: bool = (info2!(\"{}\", 0) == (return 0u));\n }\n \n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail!(\"wat\") } }\n+    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail2!(\"wat\") } }\n       break; }\n }\n \n-fn evil_lincoln() { let _evil = info!(\"lincoln\"); }\n+fn evil_lincoln() { let _evil = info2!(\"lincoln\"); }\n \n pub fn main() {\n     strange();"}]}