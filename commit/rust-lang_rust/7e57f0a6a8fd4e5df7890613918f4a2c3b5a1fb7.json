{"sha": "7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNTdmMGE2YThmZDRlNWRmNzg5MDYxMzkxOGY0YTJjM2I1YTFmYjc=", "commit": {"author": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-09-03T05:26:38Z"}, "committer": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-10-06T00:41:42Z"}, "message": "Doc total order requirement of sort(_unstable)_by\n\nI took the definition of what a total order is from the Ord trait\ndocs. I specifically put \"elements of the slice\" because if you\nhave a slice of f64s, but know none are NaN, then sorting by\npartial ord is total in this case. I'm not sure if I should give\nsuch an example in the docs or not.", "tree": {"sha": "e6d48391a1441a47aeac1a7b5ce6fcddbb691deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6d48391a1441a47aeac1a7b5ce6fcddbb691deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "html_url": "https://github.com/rust-lang/rust/commit/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bea5a0a6aef3966008787a25949344f8cf6942", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bea5a0a6aef3966008787a25949344f8cf6942", "html_url": "https://github.com/rust-lang/rust/commit/b8bea5a0a6aef3966008787a25949344f8cf6942"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "2ded376b395a7a23f6fae383711e2ba0f586723d", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "patch": "@@ -211,6 +211,13 @@ impl<T> [T] {\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n+    /// The comparator function must define a total ordering for the elements in the slice. If\n+    /// the ordering is not total, the order of the elements is unspecified. An order is a\n+    /// total order if it is (for all a, b and c):\n+    ///\n+    /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n+    /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n+    ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n     /// See [`sort_unstable_by`](#method.sort_unstable_by)."}, {"sha": "c22ea0a01f8e0fb1ea936c51c9117fa695ad60ec", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=7e57f0a6a8fd4e5df7890613918f4a2c3b5a1fb7", "patch": "@@ -1339,6 +1339,13 @@ impl<T> [T] {\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n     /// and `O(n log n)` worst-case.\n     ///\n+    /// The comparator function must define a total ordering for the elements in the slice. If\n+    /// the ordering is not total, the order of the elements is unspecified. An order is a\n+    /// total order if it is (for all a, b and c):\n+    ///\n+    /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n+    /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,"}]}