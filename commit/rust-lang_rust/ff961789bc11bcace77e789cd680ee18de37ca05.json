{"sha": "ff961789bc11bcace77e789cd680ee18de37ca05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTYxNzg5YmMxMWJjYWNlNzdlNzg5Y2Q2ODBlZTE4ZGUzN2NhMDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T19:54:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T19:54:28Z"}, "message": "Rollup merge of #69326 - JOE1994:os_str_widestring, r=RalfJung\n\nmir-interpret: add method to read wide strings from Memory\n\nImplemented *step2* from [instructions](https://github.com/rust-lang/miri/issues/707#issuecomment-561564057) laid out in rust-lang/miri#707.\n\nAdded 2 new methods to struct `rustc_mir::interpret::InterpCx`.\n\n* `read_os_str_from_wide_str` (src/librustc_mir/interpret/operand.rs)\n* `write_os_str_to_wide_str` (src/librustc_mir/interpret/place.rs)\n  - used existing logic implemented in [MIRI/src/eval.rs](https://github.com/rust-lang/miri/blob/94732aaf7bf79fd01a4a48d11155c6586b937514/src/eval.rs#L132-L141)\n\nThese methods are intended to be used for environment variable emulation in Windows.", "tree": {"sha": "7cefec3af0236d25ad21f816763b812de09c092e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cefec3af0236d25ad21f816763b812de09c092e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff961789bc11bcace77e789cd680ee18de37ca05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZU10CRBK7hj4Ov3rIwAAdHIIABkis8CudIQBnlMNIXGmo0Sa\nE3bCWlqwNHK8oHJJW7DRJd/BhW9umyXc9t5utbrVmSJ/nlJssT+uS0RUu+YuOk+L\nYzC6U7EGkDO/1+2YkXaRKxDtrX93htDNbvfUYj1XpiA54r2e7kovTN76VA2LpWY9\n0dA5MOBMYk095Rc0EK9g6i/LtxBcqEwYqwwyGdZ+X9xbsiN0Qo2TDohYGq5u8pX5\nh63QkXHCq7q7Zjo70AIcn8tCLVp6LIoT+rGtPTY/pbBSe68hz7M7W0NaEYVAho23\nxmXy9u09JTzBQEHRIMuXHknzS505KuBpTBRFj12OktZrHny+P3UJ5rd1Ww02pNc=\n=dgmN\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cefec3af0236d25ad21f816763b812de09c092e\nparent 85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7\nparent 05f6482f435c498b19f3af56d1017c84323683f5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583697268 +0100\ncommitter GitHub <noreply@github.com> 1583697268 +0100\n\nRollup merge of #69326 - JOE1994:os_str_widestring, r=RalfJung\n\nmir-interpret: add method to read wide strings from Memory\n\nImplemented *step2* from [instructions](https://github.com/rust-lang/miri/issues/707#issuecomment-561564057) laid out in rust-lang/miri#707.\n\nAdded 2 new methods to struct `rustc_mir::interpret::InterpCx`.\n\n* `read_os_str_from_wide_str` (src/librustc_mir/interpret/operand.rs)\n* `write_os_str_to_wide_str` (src/librustc_mir/interpret/place.rs)\n  - used existing logic implemented in [MIRI/src/eval.rs](https://github.com/rust-lang/miri/blob/94732aaf7bf79fd01a4a48d11155c6586b937514/src/eval.rs#L132-L141)\n\nThese methods are intended to be used for environment variable emulation in Windows.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff961789bc11bcace77e789cd680ee18de37ca05", "html_url": "https://github.com/rust-lang/rust/commit/ff961789bc11bcace77e789cd680ee18de37ca05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff961789bc11bcace77e789cd680ee18de37ca05/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "html_url": "https://github.com/rust-lang/rust/commit/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7"}, {"sha": "05f6482f435c498b19f3af56d1017c84323683f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f6482f435c498b19f3af56d1017c84323683f5", "html_url": "https://github.com/rust-lang/rust/commit/05f6482f435c498b19f3af56d1017c84323683f5"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "9dc0b24cd2f3fccbd82db3ca548ad06c61471921", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff961789bc11bcace77e789cd680ee18de37ca05/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff961789bc11bcace77e789cd680ee18de37ca05/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=ff961789bc11bcace77e789cd680ee18de37ca05", "patch": "@@ -612,6 +612,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_u8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_u16(self) -> InterpResult<'tcx, u16> {\n+        self.not_undef()?.to_u16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_u32(self) -> InterpResult<'tcx, u32> {\n         self.not_undef()?.to_u32()\n@@ -632,6 +637,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_i8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_i16(self) -> InterpResult<'tcx, i16> {\n+        self.not_undef()?.to_i16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_i32(self) -> InterpResult<'tcx, i32> {\n         self.not_undef()?.to_i32()"}, {"sha": "82a467c7ba92c0e71842ee98246c2b3916adec08", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff961789bc11bcace77e789cd680ee18de37ca05/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff961789bc11bcace77e789cd680ee18de37ca05/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=ff961789bc11bcace77e789cd680ee18de37ca05", "patch": "@@ -798,6 +798,33 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n     }\n \n+    /// Reads a 0x0000-terminated u16-sequence from memory. Returns them as a Vec<u16>.\n+    /// Terminator 0x0000 is not included in the returned Vec<u16>.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn read_wide_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, Vec<u16>> {\n+        let size_2bytes = Size::from_bytes(2);\n+        let align_2bytes = Align::from_bytes(2).unwrap();\n+        // We need to read at least 2 bytes, so we *need* a ptr.\n+        let mut ptr = self.force_ptr(ptr)?;\n+        let allocation = self.get_raw(ptr.alloc_id)?;\n+        let mut u16_seq = Vec::new();\n+\n+        loop {\n+            ptr = self\n+                .check_ptr_access(ptr.into(), size_2bytes, align_2bytes)?\n+                .expect(\"cannot be a ZST\");\n+            let single_u16 = allocation.read_scalar(self, ptr, size_2bytes)?.to_u16()?;\n+            if single_u16 != 0x0000 {\n+                u16_seq.push(single_u16);\n+                ptr = ptr.offset(size_2bytes, self)?;\n+            } else {\n+                break;\n+            }\n+        }\n+        Ok(u16_seq)\n+    }\n+\n     /// Writes the given stream of bytes into memory.\n     ///\n     /// Performs appropriate bounds checks."}]}