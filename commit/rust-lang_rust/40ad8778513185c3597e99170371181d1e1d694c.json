{"sha": "40ad8778513185c3597e99170371181d1e1d694c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWQ4Nzc4NTEzMTg1YzM1OTdlOTkxNzAzNzExODFkMWUxZDY5NGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-13T21:58:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-15T00:11:15Z"}, "message": "Add support code for new unicode_data module", "tree": {"sha": "2d5a091751f826ed280606d206ac3f17745573c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5a091751f826ed280606d206ac3f17745573c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ad8778513185c3597e99170371181d1e1d694c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ad8778513185c3597e99170371181d1e1d694c", "html_url": "https://github.com/rust-lang/rust/commit/40ad8778513185c3597e99170371181d1e1d694c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ad8778513185c3597e99170371181d1e1d694c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064f8885d5e1d38673783d626d9d3fc1b7b909f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/064f8885d5e1d38673783d626d9d3fc1b7b909f4", "html_url": "https://github.com/rust-lang/rust/commit/064f8885d5e1d38673783d626d9d3fc1b7b909f4"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "b6eaf06aa7f63be316f86ef76f26ffa0ba935def", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40ad8778513185c3597e99170371181d1e1d694c/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ad8778513185c3597e99170371181d1e1d694c/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=40ad8778513185c3597e99170371181d1e1d694c", "patch": "@@ -1,15 +1,59 @@\n #![unstable(feature = \"unicode_internals\", issue = \"none\")]\n #![allow(missing_docs)]\n \n-mod bool_trie;\n pub(crate) mod printable;\n-pub(crate) mod tables;\n+mod unicode_data;\n pub(crate) mod version;\n \n+use version::UnicodeVersion;\n+\n+/// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n+/// `char` and `str` methods are based on.\n+#[unstable(feature = \"unicode_version\", issue = \"49726\")]\n+pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n+    major: unicode_data::UNICODE_VERSION.0,\n+    minor: unicode_data::UNICODE_VERSION.1,\n+    micro: unicode_data::UNICODE_VERSION.2,\n+    _priv: (),\n+};\n+\n // For use in liballoc, not re-exported in libstd.\n pub mod derived_property {\n-    pub use crate::unicode::tables::derived_property::{Case_Ignorable, Cased};\n+    pub use super::{Case_Ignorable, Cased};\n }\n-pub mod conversions {\n-    pub use crate::unicode::tables::conversions::{to_lower, to_upper};\n+\n+pub use unicode_data::alphabetic::lookup as Alphabetic;\n+pub use unicode_data::case_ignorable::lookup as Case_Ignorable;\n+pub use unicode_data::cased::lookup as Cased;\n+pub use unicode_data::cc::lookup as Cc;\n+pub use unicode_data::conversions;\n+pub use unicode_data::grapheme_extend::lookup as Grapheme_Extend;\n+pub use unicode_data::lowercase::lookup as Lowercase;\n+pub use unicode_data::n::lookup as N;\n+pub use unicode_data::uppercase::lookup as Uppercase;\n+pub use unicode_data::white_space::lookup as White_Space;\n+\n+#[inline(always)]\n+fn range_search<const N: usize, const N1: usize, const N2: usize>(\n+    needle: u32,\n+    chunk_idx_map: &[u8; N],\n+    (last_chunk_idx, last_chunk_mapping): (u16, u8),\n+    bitset_chunk_idx: &[[u8; 16]; N1],\n+    bitset: &[u64; N2],\n+) -> bool {\n+    let bucket_idx = (needle / 64) as usize;\n+    let chunk_map_idx = bucket_idx / 16;\n+    let chunk_piece = bucket_idx % 16;\n+    let chunk_idx = if chunk_map_idx >= N {\n+        if chunk_map_idx == last_chunk_idx as usize {\n+            last_chunk_mapping\n+        } else {\n+            return false;\n+        }\n+    } else {\n+        chunk_idx_map[chunk_map_idx]\n+    };\n+    let idx = bitset_chunk_idx[(chunk_idx as usize)][chunk_piece];\n+    let word = bitset[(idx as usize)];\n+    (word & (1 << (needle % 64) as u64)) != 0\n }"}]}