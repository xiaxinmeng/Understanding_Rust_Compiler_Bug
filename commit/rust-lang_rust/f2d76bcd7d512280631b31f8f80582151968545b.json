{"sha": "f2d76bcd7d512280631b31f8f80582151968545b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZDc2YmNkN2Q1MTIyODA2MzFiMzFmOGY4MDU4MjE1MTk2ODU0NWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T05:01:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T05:01:32Z"}, "message": "Remove src/run.py\n\nThis script is totally bitrotted", "tree": {"sha": "f2ffbec106308459d54fa2e95ecbed94e8311137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ffbec106308459d54fa2e95ecbed94e8311137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d76bcd7d512280631b31f8f80582151968545b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d76bcd7d512280631b31f8f80582151968545b", "html_url": "https://github.com/rust-lang/rust/commit/f2d76bcd7d512280631b31f8f80582151968545b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d76bcd7d512280631b31f8f80582151968545b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b98f93d54b9b292790deb8c788b982246ede63", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b98f93d54b9b292790deb8c788b982246ede63", "html_url": "https://github.com/rust-lang/rust/commit/16b98f93d54b9b292790deb8c788b982246ede63"}], "stats": {"total": 102, "additions": 0, "deletions": 102}, "files": [{"sha": "8d7ca166ddc2d619ced2b0298012b3246a1f9379", "filename": "src/run.py", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/16b98f93d54b9b292790deb8c788b982246ede63/src%2Frun.py", "raw_url": "https://github.com/rust-lang/rust/raw/16b98f93d54b9b292790deb8c788b982246ede63/src%2Frun.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frun.py?ref=16b98f93d54b9b292790deb8c788b982246ede63", "patch": "@@ -1,102 +0,0 @@\n-#!/usr/bin/env python\n-\n-import os\n-import sys\n-import time\n-import glob\n-import fnmatch\n-from optparse import OptionParser\n-\n-rustDir = os.path.abspath('.')\n-rustTestDir = rustDir + \"/test\";\n-rustTestRunPassDir = rustTestDir + \"/run-pass\";\n-rustTestRunFailDir = rustTestDir + \"/run-fail\";\n-rustTestCompileFailDir = rustTestDir + \"/run-compile-fail\";\n-rustTestRunBenchDir = rustTestDir + \"/run-bench\";\n-\n-parser = OptionParser()\n-parser.set_usage(\"run.py [options] pattern : run.py -n 100 \\\"bas*\\\" -q\");\n-parser.add_option(\"-n\", dest=\"repetitions\",\n-                  help=\"number of repetitions\", metavar=\"NUMBER\")\n-parser.add_option(\"-q\", action=\"store_true\", dest=\"quiet\", default=False,\n-                  help=\"suppresses rust log output\")\n-parser.add_option(\"-l\", dest=\"log\", default=\"\",\n-                  help=\"rust log\")\n-parser.add_option(\"-v\", action=\"store_true\", dest=\"valgrind\", default=False,\n-                  help=\"runs under valgrind\")\n-parser.add_option(\"-t\", action=\"store_true\", dest=\"terminate\", default=False,\n-                  help=\"terminate on first failure\")\n-parser.add_option(\"-p\", action=\"store_true\", dest=\"printSource\",\n-                  default=False, help=\"prints the test case's source\")\n-parser.add_option(\"-s\", dest=\"seed\", metavar=\"NUMBER\", default=-1,\n-                  help=\"seeds the rust scheduler, use -1 to generate seeds, \"\n-                  + \" or >= 0 to specify a seed\")\n-\n-(options, args) = parser.parse_args()\n-\n-def getRustTests(filter):\n-    tests = []\n-    for root, dirnames, filenames in os.walk(rustTestRunPassDir):\n-      for filename in fnmatch.filter(filenames, filter + '.rs'):\n-          tests.append(os.path.join(root, filename).\n-                       replace(rustDir + \"/\", \"\"));\n-    return tests\n-\n-\n-if len(args) != 1:\n-    parser.print_usage();\n-    sys.exit(0);\n-\n-tests = getRustTests(args[0]);\n-\n-# Make\n-for rustProgram in tests:\n-    print \"Making: \" + rustProgram;\n-    result = os.system(\"make \" + rustProgram.replace(\".rs\", \".x86\")) >> 8;\n-    if (result != 0):\n-        print \"Make failed!\";\n-        sys.exit(1);\n-\n-if (options.log != \"\"):\n-    os.putenv(\"RUST_LOG\", options.log);\n-\n-if (options.quiet):\n-    os.putenv(\"RUST_LOG\", \"none\");\n-\n-# Rut\n-totalPassed = 0;\n-repetitions = 1;\n-for rustProgram in tests:\n-    repetitions = 1;\n-    if (options.repetitions):\n-        repetitions = int(options.repetitions);\n-    passed = 0;\n-    if (options.printSource):\n-        os.system(\"cat \" + rustProgram);\n-    for i in range(0, repetitions):\n-        print \"Running: \" + rustProgram + \" \" + str(i) + \\\n-              \" of \" + str(repetitions);\n-        if (options.seed):\n-            if (int(options.seed) >= 0):\n-              os.putenv(\"RUST_SEED\", options.seed);\n-            else:\n-              os.putenv(\"RUST_SEED\", str(i));\n-        command = rustProgram.replace(\".rs\", \".x86\");\n-        if (options.valgrind):\n-            command = \"valgrind --leak-check=full \"  + \\\n-                      \"--quiet --vex-iropt-level=0 \" + \\\n-                      \"--suppressions=etc/x86.supp \" + \\\n-                      command;\n-        print \"Running Command: \" + command;\n-        result = os.system(command);\n-        exitStatus = result >> 8;\n-        signalNumber = result & 0xF;\n-        if (result == 0):\n-            passed += 1;\n-        elif (options.terminate):\n-            sys.exit(1);\n-    print \"Result for: \" + rustProgram + \" \" + str(passed) + \\\n-          \" of \" + str(repetitions) + \" passed.\";\n-    totalPassed += passed;\n-print \"Total: \" + str(totalPassed) + \" of \" + \\\n-      str(len(tests) * repetitions) + \" passed.\""}]}