{"sha": "1a0b2a5aaad290df933ab49f0932baa6a4028d08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMGIyYTVhYWFkMjkwZGY5MzNhYjQ5ZjA5MzJiYWE2YTQwMjhkMDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T23:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T23:22:07Z"}, "message": "Rollup merge of #67747 - estebank:bare-assoc-const, r=Centril\n\nExplain that associated types and consts can't be accessed directly on the trait's path\n\nPartially address #44539.", "tree": {"sha": "4f779ca23a4bd86ab90b8efb666e5f46c02a5387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f779ca23a4bd86ab90b8efb666e5f46c02a5387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0b2a5aaad290df933ab49f0932baa6a4028d08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFmQfCRBK7hj4Ov3rIwAAdHIIAEHGh+Y4bkxIudQAuTxN/jJ/\noaVxpfLO4uRuezevnh+z4YUD+j14SbZ879ihOSNZN+tnNqvAcwFHkjI28Q4njVhm\n8xi3Jp3HrdQEvhaC0wOw3zgaPztvTOX1ZW6F1Hr54BwmpkRV+XJCTNRtLmw32fWL\n78Fedlwcaop7vXGmWQbFIpWv4nWZVCdX6eoQHaoTYCu6dRXzekH4ey0nyt2woJu3\n+Huheje8YqtAyY6KWES2HL/5fFgX84YVeSBmdBxrrvLmhsi+s+dkNIa8L/m6r3xn\nlWzidNXc5UwnDDkKxjLNsmHUthRYQyRLrGZInS+InCTUmd7v+n6EQpJT2hjPuUQ=\n=8o/R\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f779ca23a4bd86ab90b8efb666e5f46c02a5387\nparent 60bef14bbc030f4b129de4967e5a9302067d1712\nparent b3b206f6bdb62216bc03ec000e0a285691014703\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578525727 +0100\ncommitter GitHub <noreply@github.com> 1578525727 +0100\n\nRollup merge of #67747 - estebank:bare-assoc-const, r=Centril\n\nExplain that associated types and consts can't be accessed directly on the trait's path\n\nPartially address #44539.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0b2a5aaad290df933ab49f0932baa6a4028d08", "html_url": "https://github.com/rust-lang/rust/commit/1a0b2a5aaad290df933ab49f0932baa6a4028d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0b2a5aaad290df933ab49f0932baa6a4028d08/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bef14bbc030f4b129de4967e5a9302067d1712", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bef14bbc030f4b129de4967e5a9302067d1712", "html_url": "https://github.com/rust-lang/rust/commit/60bef14bbc030f4b129de4967e5a9302067d1712"}, {"sha": "b3b206f6bdb62216bc03ec000e0a285691014703", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b206f6bdb62216bc03ec000e0a285691014703", "html_url": "https://github.com/rust-lang/rust/commit/b3b206f6bdb62216bc03ec000e0a285691014703"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "5b8eb34ead1b387843683dcd0a2c9af1aa3ed826", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1a0b2a5aaad290df933ab49f0932baa6a4028d08", "patch": "@@ -2075,7 +2075,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n-                if let (Ok(ref snippet), ObligationCauseCode::BindingObligation(ref def_id, _)) =\n+                if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n+                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n+                } else if let (\n+                    Ok(ref snippet),\n+                    ObligationCauseCode::BindingObligation(ref def_id, _),\n+                ) =\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n@@ -2173,6 +2178,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_fully_qualified_path(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        def_id: DefId,\n+        span: Span,\n+        trait_ref: DefId,\n+    ) {\n+        if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n+            if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n+                err.note(&format!(\n+                    \"{}s cannot be accessed directly on a `trait`, they can only be \\\n+                        accessed through a specific `impl`\",\n+                    assoc_item.kind.suggestion_descr(),\n+                ));\n+                err.span_suggestion(\n+                    span,\n+                    \"use the fully qualified path to an implementation\",\n+                    format!(\"<Type as {}>::{}\", self.tcx.def_path_str(trait_ref), assoc_item.ident),\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+        }\n+    }\n+\n     /// Returns `true` if the trait predicate may apply for *some* assignment\n     /// to the type parameters.\n     fn predicate_can_apply("}, {"sha": "3a70e7d43c25ef96bc7dd859b2e635aef659af06", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=1a0b2a5aaad290df933ab49f0932baa6a4028d08", "patch": "@@ -5,9 +5,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^ cannot infer type\n+   |                     ^^^^\n+   |                     |\n+   |                     cannot infer type\n+   |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n@@ -16,9 +20,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^ cannot infer type\n+   |                                 ^^^^\n+   |                                 |\n+   |                                 cannot infer type\n+   |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ddabd552897a8e79eb25480f014522732e2ead71", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=1a0b2a5aaad290df933ab49f0932baa6a4028d08", "patch": "@@ -13,9 +13,13 @@ error[E0283]: type annotations needed\n LL |     const X: usize;\n    |     --------------- required by `Bar::X`\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^ cannot infer type\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot infer type\n+   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n    |\n    = note: cannot resolve `_: Bar`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "70a7c38b8342582b2930ff035e31b474645add44", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a0b2a5aaad290df933ab49f0932baa6a4028d08/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=1a0b2a5aaad290df933ab49f0932baa6a4028d08", "patch": "@@ -11,9 +11,13 @@ LL |     const SIZE: usize;\n    |     ------------------ required by `Foo::SIZE`\n LL | \n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^ cannot infer type\n+   |                         ^^^^^^^^^\n+   |                         |\n+   |                         cannot infer type\n+   |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n    |\n    = note: cannot resolve `_: Foo`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}]}