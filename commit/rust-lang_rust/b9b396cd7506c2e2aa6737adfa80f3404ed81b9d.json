{"sha": "b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjM5NmNkNzUwNmMyZTJhYTY3MzdhZGZhODBmMzQwNGVkODFiOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T12:12:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T12:12:24Z"}, "message": "auto merge of #18463 : japaric/rust/bytes2, r=alexcrichton\n\n- The `BytesContainer::container_into_owned_bytes` method has been removed\r\n\r\n- Methods that used to take `BytesContainer` implementors by value, now take them by reference. In particular, this breaks some uses of Path:\r\n\r\n``` rust\r\nPath::new(\"foo\")  // Still works\r\npath.join(another_path) -> path.join(&another_path)\r\n```\r\n\r\n[breaking-change]\r\n\r\n---\r\n\r\nRe: `container_into_owned_bytes`, I've removed it because\r\n\r\n- Nothing in the whole repository uses it\r\n- Takes `self` by value, which is incompatible with unsized types (`str`)\r\n\r\nThe alternative to removing this method is to split `BytesContainer` into `BytesContainer for Sized?` and `SizedBytesContainer: BytesContainer + Sized`, where the second trait only contains the `container_into_owned_bytes` method. I tried this alternative [in another branch](https://github.com/japaric/rust/commits/bytes) and it works, but it seemed better not to create a new trait for an unused method.\r\n\r\nRe: Breakage of `Path` methods\r\n\r\nWe could use the idea that @alexcrichton proposed in #18457 (add blanket `impl BytesContainer for &T where T: BytesContainer` + keep taking `T: BytesContainer` by value in `Path` methods) to avoid breaking any code.\r\n\r\nr? @aturon \r\ncc #16918", "tree": {"sha": "e623507b5799ba153b33c059e6b15a15cd5806ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e623507b5799ba153b33c059e6b15a15cd5806ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "html_url": "https://github.com/rust-lang/rust/commit/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851799d09e48e06f3fd0c4c6f694af51fc655f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/851799d09e48e06f3fd0c4c6f694af51fc655f9a", "html_url": "https://github.com/rust-lang/rust/commit/851799d09e48e06f3fd0c4c6f694af51fc655f9a"}, {"sha": "fe256f81401e7af5fb3a3ec069427fd9c52073a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe256f81401e7af5fb3a3ec069427fd9c52073a9", "html_url": "https://github.com/rust-lang/rust/commit/fe256f81401e7af5fb3a3ec069427fd9c52073a9"}], "stats": {"total": 95, "additions": 36, "deletions": 59}, "files": [{"sha": "55247792921a0dd0952cff4df5ddeb827c7ba4af", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -627,7 +627,7 @@ fn find_rust_src_root(config: &Config) -> Option<Path> {\n     let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n \n     while path.pop() {\n-        if path.join(path_postfix.clone()).is_file() {\n+        if path.join(&path_postfix).is_file() {\n             return Some(path);\n         }\n     }"}, {"sha": "f8e778ce15f6a5cea37bd727fa7dc56aeeae8b41", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -231,7 +231,7 @@ pub fn build_session_(sopts: config::Options,\n         if path.is_absolute() {\n             path.clone()\n         } else {\n-            os::getcwd().join(path.clone())\n+            os::getcwd().join(&path)\n         }\n     );\n "}, {"sha": "312a4c41ac9a6cc87632aeb10f60c29e3792afab", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -918,7 +918,7 @@ mod tests {\n         let prog = pwd_cmd().cwd(&parent_dir).spawn().unwrap();\n \n         let output = String::from_utf8(prog.wait_with_output().unwrap().output).unwrap();\n-        let child_dir = Path::new(output.as_slice().trim().into_string());\n+        let child_dir = Path::new(output.as_slice().trim());\n \n         let parent_stat = parent_dir.stat().unwrap();\n         let child_stat = child_dir.stat().unwrap();"}, {"sha": "8949a881c9de60274413be34635d5e25d6bb653c", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -67,6 +67,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![experimental]\n \n+use core::kinds::Sized;\n use c_str::CString;\n use clone::Clone;\n use fmt;\n@@ -626,7 +627,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// ```\n     #[inline]\n     fn push_many<T: BytesContainer>(&mut self, paths: &[T]) {\n-        let t: Option<T> = None;\n+        let t: Option<&T> = None;\n         if BytesContainer::is_str(t) {\n             for p in paths.iter() {\n                 self.push(p.container_as_str().unwrap())\n@@ -791,14 +792,9 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n }\n \n /// A trait that represents something bytes-like (e.g. a &[u8] or a &str)\n-pub trait BytesContainer {\n+pub trait BytesContainer for Sized? {\n     /// Returns a &[u8] representing the receiver\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8];\n-    /// Consumes the receiver and converts it into Vec<u8>\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.container_as_bytes().to_vec()\n-    }\n     /// Returns the receiver interpreted as a utf-8 string, if possible\n     #[inline]\n     fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n@@ -807,7 +803,7 @@ pub trait BytesContainer {\n     /// Returns whether .container_as_str() is guaranteed to not fail\n     // FIXME (#8888): Remove unused arg once ::<for T> works\n     #[inline]\n-    fn is_str(_: Option<Self>) -> bool { false }\n+    fn is_str(_: Option<&Self>) -> bool { false }\n }\n \n /// A trait that represents the unsafe operations on GenericPaths\n@@ -859,48 +855,44 @@ impl<'a, P: GenericPath> Display<'a, P> {\n     }\n }\n \n-impl<'a> BytesContainer for &'a str {\n+impl BytesContainer for str {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        Some(*self)\n+    fn container_as_str(&self) -> Option<&str> {\n+        Some(self)\n     }\n     #[inline]\n-    fn is_str(_: Option<&'a str>) -> bool { true }\n+    fn is_str(_: Option<&str>) -> bool { true }\n }\n \n impl BytesContainer for String {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str(&self) -> Option<&str> {\n         Some(self.as_slice())\n     }\n     #[inline]\n-    fn is_str(_: Option<String>) -> bool { true }\n+    fn is_str(_: Option<&String>) -> bool { true }\n }\n \n-impl<'a> BytesContainer for &'a [u8] {\n+impl BytesContainer for [u8] {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        *self\n+    fn container_as_bytes(&self) -> &[u8] {\n+        self\n     }\n }\n \n impl BytesContainer for Vec<u8> {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_slice()\n     }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self\n-    }\n }\n \n impl BytesContainer for CString {\n@@ -920,7 +912,20 @@ impl<'a> BytesContainer for str::MaybeOwned<'a> {\n         Some(self.as_slice())\n     }\n     #[inline]\n-    fn is_str(_: Option<str::MaybeOwned>) -> bool { true }\n+    fn is_str(_: Option<&str::MaybeOwned>) -> bool { true }\n+}\n+\n+impl<'a, Sized? T: BytesContainer> BytesContainer for &'a T {\n+    #[inline]\n+    fn container_as_bytes(&self) -> &[u8] {\n+        (**self).container_as_bytes()\n+    }\n+    #[inline]\n+    fn container_as_str(&self) -> Option<&str> {\n+        (**self).container_as_str()\n+    }\n+    #[inline]\n+    fn is_str(_: Option<& &'a T>) -> bool { BytesContainer::is_str(None::<&T>) }\n }\n \n #[inline(always)]"}, {"sha": "60cfa7a13de94425386cfebaadcd18e6f51bc217", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -117,17 +117,6 @@ impl BytesContainer for Path {\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n         self.as_vec()\n     }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.into_vec()\n-    }\n-}\n-\n-impl<'a> BytesContainer for &'a Path {\n-    #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        self.as_vec()\n-    }\n }\n \n impl GenericPathUnsafe for Path {"}, {"sha": "3ef142a2e824c39966532a6117994116689622e3", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -144,23 +144,6 @@ impl<S: hash::Writer> hash::Hash<S> for Path {\n }\n \n impl BytesContainer for Path {\n-    #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        self.as_vec()\n-    }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.into_vec()\n-    }\n-    #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        self.as_str()\n-    }\n-    #[inline]\n-    fn is_str(_: Option<Path>) -> bool { true }\n-}\n-\n-impl<'a> BytesContainer for &'a Path {\n     #[inline]\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n         self.as_vec()\n@@ -170,7 +153,7 @@ impl<'a> BytesContainer for &'a Path {\n         self.as_str()\n     }\n     #[inline]\n-    fn is_str(_: Option<&'a Path>) -> bool { true }\n+    fn is_str(_: Option<&Path>) -> bool { true }\n }\n \n impl GenericPathUnsafe for Path {"}, {"sha": "61ff88a2fa338c1b2583a60eff534c4dd88efe29", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -41,7 +41,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n                     if i == \"\" {\n                         dirs_to_search.push(Path::new(\"/usr/share/terminfo\"));\n                     } else {\n-                        dirs_to_search.push(Path::new(i.to_string()));\n+                        dirs_to_search.push(Path::new(i));\n                     }\n                 },\n                 // Found nothing in TERMINFO_DIRS, use the default paths:"}, {"sha": "490614ef12144d13b6c43bd25c486f80b8fdd507", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b396cd7506c2e2aa6737adfa80f3404ed81b9d/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=b9b396cd7506c2e2aa6737adfa80f3404ed81b9d", "patch": "@@ -48,7 +48,7 @@ fn main() {\n \n         let child_filestem = Path::new(child_name);\n         let child_filename = child_filestem.with_extension(my_ext);\n-        let child_path     = cwd.join(child_filename.clone());\n+        let child_path     = cwd.join(child_filename);\n \n         // make a separate directory for the child\n         drop(fs::mkdir(&cwd, io::USER_RWX).is_ok());"}]}