{"sha": "7333dfc95b4af5c7283ba03f33c50f108d2be3f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzNkZmM5NWI0YWY1YzcyODNiYTAzZjMzYzUwZjEwOGQyYmUzZjU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-07T23:22:53Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-07T23:22:53Z"}, "message": "Merge branch 'master' of https://github.com/petrochenkov/rustfmt into petrochenkov-master", "tree": {"sha": "dbda233e9132407c0d59f7ec0be8546f81788dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbda233e9132407c0d59f7ec0be8546f81788dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7333dfc95b4af5c7283ba03f33c50f108d2be3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7333dfc95b4af5c7283ba03f33c50f108d2be3f5", "html_url": "https://github.com/rust-lang/rust/commit/7333dfc95b4af5c7283ba03f33c50f108d2be3f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7333dfc95b4af5c7283ba03f33c50f108d2be3f5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569b3e3465e4cbab80afa9b0493206fe424cc6bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/569b3e3465e4cbab80afa9b0493206fe424cc6bb", "html_url": "https://github.com/rust-lang/rust/commit/569b3e3465e4cbab80afa9b0493206fe424cc6bb"}, {"sha": "d4c8a176657fcbeb038f86c470b808145bb62a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8a176657fcbeb038f86c470b808145bb62a29", "html_url": "https://github.com/rust-lang/rust/commit/d4c8a176657fcbeb038f86c470b808145bb62a29"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "fe945f1ae1a5ae495af060a7d3bf5c595f52639f", "filename": "src/chains.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7333dfc95b4af5c7283ba03f33c50f108d2be3f5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7333dfc95b4af5c7283ba03f33c50f108d2be3f5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=7333dfc95b4af5c7283ba03f33c50f108d2be3f5", "patch": "@@ -437,13 +437,22 @@ fn rewrite_method_call_with_overflow(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> bool {\n-    if let &ast::ExprKind::MethodCall(ref method_name, ref types, ref expressions) = expr_kind {\n+    if let &ast::ExprKind::MethodCall(ref segment, ref expressions) = expr_kind {\n         let shape = match shape.shrink_left(almost_total) {\n             Some(b) => b,\n             None => return false,\n         };\n+        let types = match segment.parameters {\n+            Some(ref params) => {\n+                match **params {\n+                    ast::PathParameters::AngleBracketed(ref data) => &data.types[..],\n+                    _ => &[],\n+                }\n+            }\n+            _ => &[],\n+        };\n         let mut last_rewrite = rewrite_method_call(\n-            method_name.node,\n+            segment.identifier,\n             types,\n             expressions,\n             total_span,\n@@ -466,7 +475,7 @@ fn rewrite_method_call_with_overflow(\n // is a try! macro, we'll convert it to shorthand when the option is set.\n fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext) -> Option<ast::Expr> {\n     match expr.node {\n-        ast::ExprKind::MethodCall(_, _, ref expressions) => {\n+        ast::ExprKind::MethodCall(_, ref expressions) => {\n             Some(convert_try(&expressions[0], context))\n         }\n         ast::ExprKind::TupField(ref subexpr, _) |\n@@ -504,8 +513,17 @@ fn rewrite_chain_subexpr(\n     };\n \n     match expr.node {\n-        ast::ExprKind::MethodCall(ref method_name, ref types, ref expressions) => {\n-            rewrite_method_call(method_name.node, types, expressions, span, context, shape)\n+        ast::ExprKind::MethodCall(ref segment, ref expressions) => {\n+            let types = match segment.parameters {\n+                Some(ref params) => {\n+                    match **params {\n+                        ast::PathParameters::AngleBracketed(ref data) => &data.types[..],\n+                        _ => &[],\n+                    }\n+                }\n+                _ => &[],\n+            };\n+            rewrite_method_call(segment.identifier, types, expressions, span, context, shape)\n         }\n         ast::ExprKind::Field(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n         ast::ExprKind::TupField(ref expr, ref field) => {"}]}