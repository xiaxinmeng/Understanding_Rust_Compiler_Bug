{"sha": "3e0360f3d43442b9d78cb1ba777e13a58506bce6", "node_id": "C_kwDOAAsO6NoAKDNlMDM2MGYzZDQzNDQyYjlkNzhjYjFiYTc3N2UxM2E1ODUwNmJjZTY", "commit": {"author": {"name": "Max Wase", "email": "max.vvase@gmail.com", "date": "2021-10-12T22:33:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-12T22:33:12Z"}, "message": "Merge branch 'master' into is-symlink-stabilization", "tree": {"sha": "285c017219563b85f30141f972df125be5705786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285c017219563b85f30141f972df125be5705786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e0360f3d43442b9d78cb1ba777e13a58506bce6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZg0oCRBK7hj4Ov3rIwAA7Y8IAEej2Jd69uQ/HcrJsk8SteOT\noQkgdIqKAaBw/+svEVuAGBKp5UVx7zYazj6LZfEVQY0+N8vXT4JLCl21YvCkRwEi\nJ6RP8CqOl7W3ldp+Zt7CrAsbWzHJhb/FwtsHTrGiTVwchYoq1LTbDuV8sB0/NvmD\nqfeKkTrw6KQkhRd+7Kdz3dyWAHiXAGYuy+gjMwU6qbEUU8LKF5Ts29mBw8Kg2U9V\n3FipbVXccxgltVEjmslvAypgQbfP3xOi4PZgNQaBgTjjchEVByqD+4KRa6Z/vD02\nMyhX9SZU2O4w7zWR479qkfny4AlF8qe+3WXfvwgjS8Y8tdqVUWzBBSFy34xQlSE=\n=yXHk\n-----END PGP SIGNATURE-----\n", "payload": "tree 285c017219563b85f30141f972df125be5705786\nparent 36e050b85f5fc9acd27ff5e8cda57a36070f43e2\nparent 044674337a180c494b7e6fdce4b20dca93324b2a\nauthor Max Wase <max.vvase@gmail.com> 1634077992 +0300\ncommitter GitHub <noreply@github.com> 1634077992 +0300\n\nMerge branch 'master' into is-symlink-stabilization"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0360f3d43442b9d78cb1ba777e13a58506bce6", "html_url": "https://github.com/rust-lang/rust/commit/3e0360f3d43442b9d78cb1ba777e13a58506bce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e0360f3d43442b9d78cb1ba777e13a58506bce6/comments", "author": {"login": "maxwase", "id": 23321756, "node_id": "MDQ6VXNlcjIzMzIxNzU2", "avatar_url": "https://avatars.githubusercontent.com/u/23321756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxwase", "html_url": "https://github.com/maxwase", "followers_url": "https://api.github.com/users/maxwase/followers", "following_url": "https://api.github.com/users/maxwase/following{/other_user}", "gists_url": "https://api.github.com/users/maxwase/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxwase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxwase/subscriptions", "organizations_url": "https://api.github.com/users/maxwase/orgs", "repos_url": "https://api.github.com/users/maxwase/repos", "events_url": "https://api.github.com/users/maxwase/events{/privacy}", "received_events_url": "https://api.github.com/users/maxwase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e050b85f5fc9acd27ff5e8cda57a36070f43e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e050b85f5fc9acd27ff5e8cda57a36070f43e2", "html_url": "https://github.com/rust-lang/rust/commit/36e050b85f5fc9acd27ff5e8cda57a36070f43e2"}, {"sha": "044674337a180c494b7e6fdce4b20dca93324b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/044674337a180c494b7e6fdce4b20dca93324b2a", "html_url": "https://github.com/rust-lang/rust/commit/044674337a180c494b7e6fdce4b20dca93324b2a"}], "stats": {"total": 8001, "additions": 4894, "deletions": 3107}, "files": [{"sha": "8d6afd2b4483773173d0f0c142af563225b09edb", "filename": "Cargo.toml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -89,6 +89,15 @@ gimli.debug = 0\n miniz_oxide.debug = 0\n object.debug = 0\n \n+# The only package that ever uses debug builds is bootstrap.\n+# We care a lot about bootstrap's compile times, so don't include debug info for\n+# dependencies, only bootstrap itself.\n+[profile.dev]\n+debug = 0\n+[profile.dev.package]\n+# Only use debuginfo=1 to further reduce compile times.\n+bootstrap.debug = 1\n+\n # We want the RLS to use the version of Cargo that we've got vendored in this\n # repository to ensure that the same exact version of Cargo is used by both the\n # RLS and the Cargo binary itself. The RLS depends on Cargo as a git repository"}, {"sha": "269740c171cfb29e3519fe9510eff74bf7750457", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -64,7 +64,6 @@ Stabilised APIs\n - [`VecDeque::shrink_to`]\n - [`HashMap::shrink_to`]\n - [`HashSet::shrink_to`]\n-- [`task::ready!`]\n \n These APIs are now usable in const contexts:\n \n@@ -128,7 +127,6 @@ and related tools.\n [`VecDeque::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.shrink_to\n [`HashMap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_map/struct.HashMap.html#method.shrink_to\n [`HashSet::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_set/struct.HashSet.html#method.shrink_to\n-[`task::ready!`]: https://doc.rust-lang.org/stable/std/task/macro.ready.html\n [`std::mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n [`slice::first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first\n [`slice::split_first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_first"}, {"sha": "739c6fd0a435f3eea5a58e2339885ea0d32cd719", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -389,6 +389,7 @@ impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n         let _: Loss = sig::shift_right(&mut sig, &mut exp, trailing_zeros as usize);\n \n         // Change the exponent from 2^e to 10^e.\n+        #[allow(clippy::comparison_chain)]\n         if exp == 0 {\n             // Nothing to do.\n         } else if exp > 0 {\n@@ -2526,6 +2527,7 @@ mod sig {\n         if *a_sign ^ b_sign {\n             let (reverse, loss);\n \n+            #[allow(clippy::comparison_chain)]\n             if bits == 0 {\n                 reverse = cmp(a_sig, b_sig) == Ordering::Less;\n                 loss = Loss::ExactlyZero;"}, {"sha": "e3c610585d978e32c8ef8071aa0ffda993431310", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -20,16 +20,6 @@\n #[macro_use]\n extern crate rustc_macros;\n \n-#[macro_export]\n-macro_rules! unwrap_or {\n-    ($opt:expr, $default:expr) => {\n-        match $opt {\n-            Some(x) => x,\n-            None => $default,\n-        }\n-    };\n-}\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "957b14f34872962eef8455fcbf1bc5ffa712993d", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 2, "deletions": 62, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -202,39 +202,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let mut used_input_regs = FxHashMap::default();\n         let mut used_output_regs = FxHashMap::default();\n-        let mut required_features: Vec<&str> = vec![];\n+\n         for (idx, &(ref op, op_sp)) in operands.iter().enumerate() {\n             if let Some(reg) = op.reg() {\n-                // Make sure we don't accidentally carry features from the\n-                // previous iteration.\n-                required_features.clear();\n-\n                 let reg_class = reg.reg_class();\n                 if reg_class == asm::InlineAsmRegClass::Err {\n                     continue;\n                 }\n \n-                // We ignore target feature requirements for clobbers: if the\n-                // feature is disabled then the compiler doesn't care what we\n-                // do with the registers.\n-                //\n-                // Note that this is only possible for explicit register\n-                // operands, which cannot be used in the asm string.\n-                let is_clobber = matches!(\n-                    op,\n-                    hir::InlineAsmOperand::Out {\n-                        reg: asm::InlineAsmRegOrRegClass::Reg(_),\n-                        late: _,\n-                        expr: None\n-                    }\n-                );\n-\n                 // Some register classes can only be used as clobbers. This\n                 // means that we disallow passing a value in/out of the asm and\n                 // require that the operand name an explicit register, not a\n                 // register class.\n                 if reg_class.is_clobber_only(asm_arch.unwrap())\n-                    && !(is_clobber && matches!(reg, asm::InlineAsmRegOrRegClass::Reg(_)))\n+                    && !(op.is_clobber() && matches!(reg, asm::InlineAsmRegOrRegClass::Reg(_)))\n                 {\n                     let msg = format!(\n                         \"register class `{}` can only be used as a clobber, \\\n@@ -245,47 +226,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     continue;\n                 }\n \n-                if !is_clobber {\n-                    // Validate register classes against currently enabled target\n-                    // features. We check that at least one type is available for\n-                    // the current target.\n-                    for &(_, feature) in reg_class.supported_types(asm_arch.unwrap()) {\n-                        if let Some(feature) = feature {\n-                            if self.sess.target_features.contains(&Symbol::intern(feature)) {\n-                                required_features.clear();\n-                                break;\n-                            } else {\n-                                required_features.push(feature);\n-                            }\n-                        } else {\n-                            required_features.clear();\n-                            break;\n-                        }\n-                    }\n-                    // We are sorting primitive strs here and can use unstable sort here\n-                    required_features.sort_unstable();\n-                    required_features.dedup();\n-                    match &required_features[..] {\n-                        [] => {}\n-                        [feature] => {\n-                            let msg = format!(\n-                                \"register class `{}` requires the `{}` target feature\",\n-                                reg_class.name(),\n-                                feature\n-                            );\n-                            sess.struct_span_err(op_sp, &msg).emit();\n-                        }\n-                        features => {\n-                            let msg = format!(\n-                                \"register class `{}` requires at least one target feature: {}\",\n-                                reg_class.name(),\n-                                features.join(\", \")\n-                            );\n-                            sess.struct_span_err(op_sp, &msg).emit();\n-                        }\n-                    }\n-                }\n-\n                 // Check for conflicts between explicit register operands.\n                 if let asm::InlineAsmRegOrRegClass::Reg(reg) = reg {\n                     let (input, output) = match op {"}, {"sha": "a5a4de81f12f68aaeef6a361df30705fb53365f4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1345,8 +1345,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         generics\n                             .params\n                             .iter()\n-                            .find(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n-                            .is_some()\n+                            .any(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n                     }\n                     // Either the `bounded_ty` is not a plain type parameter, or\n                     // it's not found in the generic type parameters list."}, {"sha": "7db8d4520d406def6cad28a596f682e62fb70f0d", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n                 let bb_data = &self.body[bb];\n                 debug_assert!(hi == bb_data.statements.len());\n                 for &succ_bb in bb_data.terminator().successors() {\n-                    if self.visited.insert(succ_bb) == false {\n+                    if !self.visited.insert(succ_bb) {\n                         if succ_bb == location.block && first_lo > 0 {\n                             // `succ_bb` has been seen before. If it wasn't\n                             // fully processed, add its first part to `stack`"}, {"sha": "246d2e3208cf232d59c8cf715b96e1208f196523", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -972,8 +972,7 @@ fn suggest_ampmut<'tcx>(\n     if let Some(assignment_rhs_span) = opt_assignment_rhs_span {\n         if let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span) {\n             let is_mutbl = |ty: &str| -> bool {\n-                if ty.starts_with(\"mut\") {\n-                    let rest = &ty[3..];\n+                if let Some(rest) = ty.strip_prefix(\"mut\") {\n                     match rest.chars().next() {\n                         // e.g. `&mut x`\n                         Some(c) if c.is_whitespace() => true,"}, {"sha": "07eadce17738e90847b3a2eb9e8056580187998e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1153,28 +1153,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .convert_all(data);\n     }\n \n-    /// Convenient wrapper around `relate_tys::relate_types` -- see\n-    /// that fn for docs.\n-    fn relate_types(\n-        &mut self,\n-        a: Ty<'tcx>,\n-        v: ty::Variance,\n-        b: Ty<'tcx>,\n-        locations: Locations,\n-        category: ConstraintCategory,\n-    ) -> Fallible<()> {\n-        relate_tys::relate_types(\n-            self.infcx,\n-            self.param_env,\n-            a,\n-            v,\n-            b,\n-            locations,\n-            category,\n-            self.borrowck_context,\n-        )\n-    }\n-\n     /// Try to relate `sub <: sup`\n     fn sub_types(\n         &mut self,"}, {"sha": "415d1abaa8b089fdeb453251f99242f4563587a5", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,54 +1,44 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n-use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n-use crate::type_check::{BorrowCheckContext, Locations};\n-\n-/// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n-///\n-/// - \"Covariant\" `a <: b`\n-/// - \"Invariant\" `a == b`\n-/// - \"Contravariant\" `a :> b`\n-///\n-/// N.B., the type `a` is permitted to have unresolved inference\n-/// variables, but not the type `b`.\n-#[instrument(skip(infcx, param_env, borrowck_context), level = \"debug\")]\n-pub(super) fn relate_types<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    a: Ty<'tcx>,\n-    v: ty::Variance,\n-    b: Ty<'tcx>,\n-    locations: Locations,\n-    category: ConstraintCategory,\n-    borrowck_context: &mut BorrowCheckContext<'_, 'tcx>,\n-) -> Fallible<()> {\n-    TypeRelating::new(\n-        infcx,\n-        NllTypeRelatingDelegate::new(\n-            infcx,\n-            borrowck_context,\n-            param_env,\n-            locations,\n-            category,\n-            UniverseInfo::relate(a, b),\n-        ),\n-        v,\n-    )\n-    .relate(a, b)?;\n-    Ok(())\n+use crate::type_check::{Locations, TypeChecker};\n+\n+impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n+    /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n+    ///\n+    /// - \"Covariant\" `a <: b`\n+    /// - \"Invariant\" `a == b`\n+    /// - \"Contravariant\" `a :> b`\n+    ///\n+    /// N.B., the type `a` is permitted to have unresolved inference\n+    /// variables, but not the type `b`.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub(super) fn relate_types(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        v: ty::Variance,\n+        b: Ty<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory,\n+    ) -> Fallible<()> {\n+        TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::relate(a, b)),\n+            v,\n+        )\n+        .relate(a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n-    borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-\n-    param_env: ty::ParamEnv<'tcx>,\n+    type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n \n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n@@ -63,25 +53,24 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n \n impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n-        borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n+        type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n-        Self { infcx, borrowck_context, param_env, locations, category, universe_info }\n+        Self { type_checker, locations, category, universe_info }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n+        self.type_checker.param_env\n     }\n \n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n-        let universe = self.infcx.create_next_universe();\n-        self.borrowck_context\n+        let universe = self.type_checker.infcx.create_next_universe();\n+        self.type_checker\n+            .borrowck_context\n             .constraints\n             .universe_causes\n             .insert(universe, self.universe_info.clone());\n@@ -90,15 +79,18 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n-        self.infcx.next_nll_region_var(origin)\n+        self.type_checker.infcx.next_nll_region_var(origin)\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n+        self.type_checker\n+            .borrowck_context\n+            .constraints\n+            .placeholder_region(self.type_checker.infcx, placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.infcx.next_nll_region_var_in_universe(\n+        self.type_checker.infcx.next_nll_region_var_in_universe(\n             NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n         )\n@@ -110,15 +102,17 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         sub: ty::Region<'tcx>,\n         info: ty::VarianceDiagInfo<'tcx>,\n     ) {\n-        let sub = self.borrowck_context.universal_regions.to_region_vid(sub);\n-        let sup = self.borrowck_context.universal_regions.to_region_vid(sup);\n-        self.borrowck_context.constraints.outlives_constraints.push(OutlivesConstraint {\n-            sup,\n-            sub,\n-            locations: self.locations,\n-            category: self.category,\n-            variance_info: info,\n-        });\n+        let sub = self.type_checker.borrowck_context.universal_regions.to_region_vid(sub);\n+        let sup = self.type_checker.borrowck_context.universal_regions.to_region_vid(sup);\n+        self.type_checker.borrowck_context.constraints.outlives_constraints.push(\n+            OutlivesConstraint {\n+                sup,\n+                sub,\n+                locations: self.locations,\n+                category: self.category,\n+                variance_info: info,\n+            },\n+        );\n     }\n \n     // We don't have to worry about the equality of consts during borrow checking"}, {"sha": "cd78c016caa4f3482612efd4f1c215285e5d48f2", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -594,7 +594,7 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n                     ty: ty.clone(),\n-                    kw_span: kw_span.clone(),\n+                    kw_span: *kw_span,\n \n                     // We can't have default values inside impl block\n                     default: None,"}, {"sha": "31959fa19c588b9265143b9e73b3a168fae07ad4", "filename": "compiler/rustc_codegen_gcc/src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2,7 +2,7 @@ use gccjit::RValue;\n use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::{DebugInfoBuilderMethods, DebugInfoMethods};\n use rustc_middle::mir;\n-use rustc_middle::ty::{Instance, Ty};\n+use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::abi::call::FnAbi;\n@@ -31,7 +31,7 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _vtable: Self::Value) {\n+    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n         // TODO(antoyo)\n     }\n "}, {"sha": "97780de9ba4af4d4e9ae0374f835d82cb11a0ffd", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -596,7 +596,7 @@ pub(crate) fn run_pass_manager(\n     //      tools/lto/LTOCodeGenerator.cpp\n     debug!(\"running the pass manager\");\n     unsafe {\n-        if write::should_use_new_llvm_pass_manager(config) {\n+        if write::should_use_new_llvm_pass_manager(cgcx, config) {\n             let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n             let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n             write::optimize_with_new_llvm_pass_manager("}, {"sha": "380dfd387235d1b6037c193db8aefdf8a7d7aa22", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -377,10 +377,19 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n-pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n+pub(crate) fn should_use_new_llvm_pass_manager(\n+    cgcx: &CodegenContext<LlvmCodegenBackend>,\n+    config: &ModuleConfig,\n+) -> bool {\n     // The new pass manager is enabled by default for LLVM >= 13.\n     // This matches Clang, which also enables it since Clang 13.\n-    config.new_llvm_pass_manager.unwrap_or_else(|| llvm_util::get_version() >= (13, 0, 0))\n+\n+    // FIXME: There are some perf issues with the new pass manager\n+    // when targeting s390x, so it is temporarily disabled for that\n+    // arch, see https://github.com/rust-lang/rust/issues/89609\n+    config\n+        .new_llvm_pass_manager\n+        .unwrap_or_else(|| cgcx.target_arch != \"s390x\" && llvm_util::get_version() >= (13, 0, 0))\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n@@ -482,7 +491,7 @@ pub(crate) unsafe fn optimize(\n     }\n \n     if let Some(opt_level) = config.opt_level {\n-        if should_use_new_llvm_pass_manager(config) {\n+        if should_use_new_llvm_pass_manager(cgcx, config) {\n             let opt_stage = match cgcx.lto {\n                 Lto::Fat => llvm::OptStage::PreLinkFatLTO,\n                 Lto::Thin | Lto::ThinLocal => llvm::OptStage::PreLinkThinLTO,"}, {"sha": "d5deacf3811304c972fb0cc5919b833c23ac0f97", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -828,6 +828,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fcmp(&mut self, op: RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+        let op = llvm::RealPredicate::from_generic(op);\n         unsafe { llvm::LLVMBuildFCmp(self.llbuilder, op as c_uint, lhs, rhs, UNNAMED) }\n     }\n "}, {"sha": "1bc924d3b90b0f5db6ba18c25375c728c9f2e2b3", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -175,7 +175,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n             // should use dllimport for functions.\n             if cx.use_dll_storage_attrs\n                 && tcx.is_dllimport_foreign_item(instance_def_id)\n-                && tcx.sess.target.env != \"gnu\"\n+                && !matches!(tcx.sess.target.env.as_ref(), \"gnu\" | \"uclibc\")\n             {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }"}, {"sha": "cd29f2af0165aa36041d7129778d3f3b3b469f4b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2,7 +2,7 @@ use self::MemberDescriptionFactory::*;\n use self::RecursiveTypeDescription::*;\n \n use super::namespace::mangled_name_of_instance;\n-use super::type_names::compute_debuginfo_type_name;\n+use super::type_names::{compute_debuginfo_type_name, compute_debuginfo_vtable_name};\n use super::utils::{\n     create_DIArray, debug_context, get_namespace_for_item, is_node_local_to_unit, DIB,\n };\n@@ -29,8 +29,9 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::Instance;\n-use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, AdtKind, GeneratorSubsts, Instance, ParamEnv, Ty, TyCtxt, COMMON_VTABLE_ENTRIES,\n+};\n use rustc_middle::{bug, span_bug};\n use rustc_query_system::ich::NodeIdHashingMode;\n use rustc_session::config::{self, DebugInfo};\n@@ -2591,11 +2592,45 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     }\n }\n \n+/// Generates LLVM debuginfo for a vtable.\n+fn vtable_type_metadata(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    ty: Ty<'tcx>,\n+    poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+) -> &'ll DIType {\n+    let tcx = cx.tcx;\n+\n+    let vtable_entries = if let Some(poly_trait_ref) = poly_trait_ref {\n+        let trait_ref = poly_trait_ref.with_self_ty(tcx, ty);\n+        let trait_ref = tcx.erase_regions(trait_ref);\n+\n+        tcx.vtable_entries(trait_ref)\n+    } else {\n+        COMMON_VTABLE_ENTRIES\n+    };\n+\n+    // FIXME: We describe the vtable as an array of *const () pointers. The length of the array is\n+    //        correct - but we could create a more accurate description, e.g. by describing it\n+    //        as a struct where each field has a name that corresponds to the name of the method\n+    //        it points to.\n+    //        However, this is not entirely straightforward because there might be multiple\n+    //        methods with the same name if the vtable is for multiple traits. So for now we keep\n+    //        things simple instead of adding some ad-hoc disambiguation scheme.\n+    let vtable_type = tcx.mk_array(tcx.mk_imm_ptr(tcx.types.unit), vtable_entries.len() as u64);\n+\n+    type_metadata(cx, vtable_type, rustc_span::DUMMY_SP)\n+}\n+\n /// Creates debug information for the given vtable, which is for the\n /// given type.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n-pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &'ll Value) {\n+pub fn create_vtable_metadata(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    ty: Ty<'tcx>,\n+    poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+    vtable: &'ll Value,\n+) {\n     if cx.dbg_cx.is_none() {\n         return;\n     }\n@@ -2605,42 +2640,16 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n         return;\n     }\n \n-    let type_metadata = type_metadata(cx, ty, rustc_span::DUMMY_SP);\n+    let vtable_name = compute_debuginfo_vtable_name(cx.tcx, ty, poly_trait_ref);\n+    let vtable_type = vtable_type_metadata(cx, ty, poly_trait_ref);\n \n     unsafe {\n-        // `LLVMRustDIBuilderCreateStructType()` wants an empty array. A null\n-        // pointer will lead to hard to trace and debug LLVM assertions\n-        // later on in `llvm/lib/IR/Value.cpp`.\n-        let empty_array = create_DIArray(DIB(cx), &[]);\n-        let name = \"vtable\";\n-\n-        // Create a new one each time. We don't want metadata caching\n-        // here, because each vtable will refer to a unique containing\n-        // type.\n-        let vtable_type = llvm::LLVMRustDIBuilderCreateStructType(\n-            DIB(cx),\n-            NO_SCOPE_METADATA,\n-            name.as_ptr().cast(),\n-            name.len(),\n-            unknown_file_metadata(cx),\n-            UNKNOWN_LINE_NUMBER,\n-            Size::ZERO.bits(),\n-            cx.tcx.data_layout.pointer_align.abi.bits() as u32,\n-            DIFlags::FlagArtificial,\n-            None,\n-            empty_array,\n-            0,\n-            Some(type_metadata),\n-            name.as_ptr().cast(),\n-            name.len(),\n-        );\n-\n         let linkage_name = \"\";\n         llvm::LLVMRustDIBuilderCreateStaticVariable(\n             DIB(cx),\n             NO_SCOPE_METADATA,\n-            name.as_ptr().cast(),\n-            name.len(),\n+            vtable_name.as_ptr().cast(),\n+            vtable_name.len(),\n             linkage_name.as_ptr().cast(),\n             linkage_name.len(),\n             unknown_file_metadata(cx),"}, {"sha": "1f1bd73c7d035d51ae736dae5bfde264980b1d0a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -550,8 +550,13 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMRustDIBuilderCreateDebugLocation(line, col, scope, inlined_at) }\n     }\n \n-    fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value) {\n-        metadata::create_vtable_metadata(self, ty, vtable)\n+    fn create_vtable_metadata(\n+        &self,\n+        ty: Ty<'tcx>,\n+        trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+        vtable: Self::Value,\n+    ) {\n+        metadata::create_vtable_metadata(self, ty, trait_ref, vtable)\n     }\n \n     fn extend_scope_to_file("}, {"sha": "4c9ae4faf7233f4a1e88ed043eecb73d630b901a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -223,6 +223,33 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n+impl RealPredicate {\n+    pub fn from_generic(realp: rustc_codegen_ssa::common::RealPredicate) -> Self {\n+        match realp {\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateFalse => {\n+                RealPredicate::RealPredicateFalse\n+            }\n+            rustc_codegen_ssa::common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            rustc_codegen_ssa::common::RealPredicate::RealONE => RealPredicate::RealONE,\n+            rustc_codegen_ssa::common::RealPredicate::RealORD => RealPredicate::RealORD,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            rustc_codegen_ssa::common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealULT => RealPredicate::RealULT,\n+            rustc_codegen_ssa::common::RealPredicate::RealULE => RealPredicate::RealULE,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateTrue => {\n+                RealPredicate::RealPredicateTrue\n+            }\n+        }\n+    }\n+}\n+\n /// LLVMTypeKind\n #[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]"}, {"sha": "cf1c60588978c33085d32337045a460ec8e4e3a0", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -843,19 +843,18 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         let msg_bus = \"clang: error: unable to execute command: Bus error: 10\";\n         if out.contains(msg_segv) || out.contains(msg_bus) {\n             warn!(\n+                ?cmd, %out,\n                 \"looks like the linker segfaulted when we tried to call it, \\\n-                 automatically retrying again. cmd = {:?}, out = {}.\",\n-                cmd, out,\n+                 automatically retrying again\",\n             );\n             continue;\n         }\n \n         if is_illegal_instruction(&output.status) {\n             warn!(\n+                ?cmd, %out, status = %output.status,\n                 \"looks like the linker hit an illegal instruction when we \\\n-                 tried to call it, automatically retrying again. cmd = {:?}, ]\\\n-                 out = {}, status = {}.\",\n-                cmd, out, output.status,\n+                 tried to call it, automatically retrying again.\",\n             );\n             continue;\n         }"}, {"sha": "609316ea69fe560487cfd397f28999bab9133512", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -446,6 +446,62 @@ fn push_debuginfo_type_name<'tcx>(\n     }\n }\n \n+/// Computes a name for the global variable storing a vtable.\n+///\n+/// The name is of the form:\n+///\n+/// `<path::to::SomeType as path::to::SomeTrait>::{vtable}`\n+///\n+/// or, when generating C++-like names:\n+///\n+/// `impl$<path::to::SomeType, path::to::SomeTrait>::vtable$`\n+pub fn compute_debuginfo_vtable_name<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    t: Ty<'tcx>,\n+    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+) -> String {\n+    let cpp_like_names = cpp_like_names(tcx);\n+\n+    let mut vtable_name = String::with_capacity(64);\n+\n+    if cpp_like_names {\n+        vtable_name.push_str(\"impl$<\");\n+    } else {\n+        vtable_name.push('<');\n+    }\n+\n+    let mut visited = FxHashSet::default();\n+    push_debuginfo_type_name(tcx, t, true, &mut vtable_name, &mut visited);\n+\n+    if cpp_like_names {\n+        vtable_name.push_str(\", \");\n+    } else {\n+        vtable_name.push_str(\" as \");\n+    }\n+\n+    if let Some(trait_ref) = trait_ref {\n+        push_item_name(tcx, trait_ref.skip_binder().def_id, true, &mut vtable_name);\n+        visited.clear();\n+        push_generic_params_internal(\n+            tcx,\n+            trait_ref.skip_binder().substs,\n+            &mut vtable_name,\n+            &mut visited,\n+        );\n+    } else {\n+        vtable_name.push_str(\"_\");\n+    }\n+\n+    push_close_angle_bracket(cpp_like_names, &mut vtable_name);\n+\n+    let suffix = if cpp_like_names { \"::vtable$\" } else { \"::{vtable}\" };\n+\n+    vtable_name.reserve_exact(suffix.len());\n+    vtable_name.push_str(suffix);\n+\n+    vtable_name\n+}\n+\n pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n     let def_key = tcx.def_key(def_id);\n     if qualified {"}, {"sha": "6ab429669c881302c4779a34bfbfecd32af9d1ff", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -78,7 +78,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     let align = cx.data_layout().pointer_align.abi;\n     let vtable = cx.static_addr_of(vtable_const, align, Some(\"vtable\"));\n \n-    cx.create_vtable_metadata(ty, vtable);\n+    cx.create_vtable_metadata(ty, trait_ref, vtable);\n     cx.vtables().borrow_mut().insert((ty, trait_ref), vtable);\n     vtable\n }"}, {"sha": "e700afc448f28633716b42c3891906afe61a6898", "filename": "compiler/rustc_codegen_ssa/src/traits/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,13 +1,18 @@\n use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_middle::mir;\n-use rustc_middle::ty::{Instance, Ty};\n+use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::Size;\n \n pub trait DebugInfoMethods<'tcx>: BackendTypes {\n-    fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);\n+    fn create_vtable_metadata(\n+        &self,\n+        ty: Ty<'tcx>,\n+        trait_ref: Option<PolyExistentialTraitRef<'tcx>>,\n+        vtable: Self::Value,\n+    );\n \n     /// Creates the function-specific debug context.\n     ///"}, {"sha": "81e2501ecbeadeb8732d808e9940f10f8b336636", "filename": "compiler/rustc_data_structures/src/base_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -14,7 +14,7 @@ const BASE_64: &[u8; MAX_BASE as usize] =\n \n #[inline]\n pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n-    debug_assert!(base >= 2 && base <= MAX_BASE);\n+    debug_assert!((2..=MAX_BASE).contains(&base));\n     let mut s = [0u8; 128];\n     let mut index = 0;\n "}, {"sha": "9ff401c3c7aad19d78a73c057b4001bce31d123e", "filename": "compiler/rustc_data_structures/src/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -206,17 +206,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         AdjacentEdges { graph: self, direction, next: first_edge }\n     }\n \n-    pub fn successor_nodes<'a>(\n-        &'a self,\n-        source: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn successor_nodes(&self, source: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes<'a>(\n-        &'a self,\n-        target: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn predecessor_nodes(&self, target: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.incoming_edges(target).sources()\n     }\n "}, {"sha": "1c6979dc489a6ad979d5deb9fca0bc4342ea6326", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -48,7 +48,7 @@ fn post_order_walk<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n         let node = frame.node;\n         visited[node] = true;\n \n-        while let Some(successor) = frame.iter.next() {\n+        for successor in frame.iter.by_ref() {\n             if !visited[successor] {\n                 stack.push(PostOrderFrame { node: successor, iter: graph.successors(successor) });\n                 continue 'recurse;\n@@ -112,7 +112,7 @@ where\n     /// This is equivalent to just invoke `next` repeatedly until\n     /// you get a `None` result.\n     pub fn complete_search(&mut self) {\n-        while let Some(_) = self.next() {}\n+        for _ in self {}\n     }\n \n     /// Returns true if node has been visited thus far."}, {"sha": "caf515b0d192a5331ed9067da1a366049a29c335", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -390,7 +390,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })\n             .collect();\n \n-        self.compress(|_| assert!(false));\n+        self.compress(|_| unreachable!());\n         errors\n     }\n \n@@ -612,7 +612,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {\n         let orig_nodes_len = self.nodes.len();\n         let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);\n-        debug_assert!(node_rewrites.is_empty());\n+        assert!(node_rewrites.is_empty());\n         node_rewrites.extend(0..orig_nodes_len);\n         let mut dead_nodes = 0;\n \n@@ -623,13 +623,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n         //     self.nodes[0..index - dead_nodes] are the first remaining nodes\n         //     self.nodes[index - dead_nodes..index] are all dead\n         //     self.nodes[index..] are unchanged\n-        for index in 0..orig_nodes_len {\n+        for (index, node_rewrite) in node_rewrites.iter_mut().enumerate() {\n             let node = &self.nodes[index];\n             match node.state.get() {\n                 NodeState::Pending | NodeState::Waiting => {\n                     if dead_nodes > 0 {\n                         self.nodes.swap(index, index - dead_nodes);\n-                        node_rewrites[index] -= dead_nodes;\n+                        *node_rewrite -= dead_nodes;\n                     }\n                 }\n                 NodeState::Done => {\n@@ -646,7 +646,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     }\n                     // Extract the success stories.\n                     outcome_cb(&node.obligation);\n-                    node_rewrites[index] = orig_nodes_len;\n+                    *node_rewrite = orig_nodes_len;\n                     dead_nodes += 1;\n                 }\n                 NodeState::Error => {\n@@ -655,7 +655,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     // check against.\n                     self.active_cache.remove(&node.obligation.as_cache_key());\n                     self.insert_into_error_cache(index);\n-                    node_rewrites[index] = orig_nodes_len;\n+                    *node_rewrite = orig_nodes_len;\n                     dead_nodes += 1;\n                 }\n                 NodeState::Success => unreachable!(),"}, {"sha": "e80db0845a7be405a04b5c3c1ca4d543b8a731d0", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -205,22 +205,22 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let start = match range.start_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n             Bound::Unbounded => 0,\n         };\n \n         let end = match range.end_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n             Bound::Unbounded => self.data.len(),"}, {"sha": "1395bb16e875c62ef81f909792ed5e3745322ee2", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -75,7 +75,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n+    pub fn get_by_key(&self, key: K) -> impl Iterator<Item = &V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n \n@@ -84,7 +84,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n+    pub fn get_by_key_enumerated(&self, key: K) -> impl Iterator<Item = (I, &V)> {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {\n             let (k, v) = &self.items[i];"}, {"sha": "d4274e99f1cffc071184bd34a12054dc7815d494", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -257,11 +257,7 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove(&mut self, key: &K) -> Option<V> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index).1)\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index).1)\n             }\n             SsoHashMap::Map(map) => map.remove(key),\n         }\n@@ -272,11 +268,7 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove_entry(&mut self, key: &K) -> Option<(K, V)> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index))\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index))\n             }\n             SsoHashMap::Map(map) => map.remove_entry(key),\n         }\n@@ -423,14 +415,14 @@ impl<K, V> IntoIterator for SsoHashMap<K, V> {\n \n /// adapts Item of array reference iterator to Item of hashmap reference iterator.\n #[inline(always)]\n-fn adapt_array_ref_it<K, V>(pair: &'a (K, V)) -> (&'a K, &'a V) {\n+fn adapt_array_ref_it<K, V>(pair: &(K, V)) -> (&K, &V) {\n     let (a, b) = pair;\n     (a, b)\n }\n \n /// adapts Item of array mut reference iterator to Item of hashmap mut reference iterator.\n #[inline(always)]\n-fn adapt_array_mut_it<K, V>(pair: &'a mut (K, V)) -> (&'a K, &'a mut V) {\n+fn adapt_array_mut_it<K, V>(pair: &mut (K, V)) -> (&K, &mut V) {\n     let (a, b) = pair;\n     (a, b)\n }"}, {"sha": "f71522d37148ad8b86217000570356f4b0540a2b", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -75,7 +75,7 @@ impl<T> SsoHashSet<T> {\n     /// An iterator visiting all elements in arbitrary order.\n     /// The iterator element type is `&'a T`.\n     #[inline]\n-    pub fn iter(&'a self) -> impl Iterator<Item = &'a T> {\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n         self.into_iter()\n     }\n "}, {"sha": "2e992e762273c1c3b1fab6dd6a2ab2df273e7ee9", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -229,14 +229,14 @@ impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n \n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u32 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u32 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }\n \n impl<CTX> HashStable<CTX> for f64 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u64 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u64 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }"}, {"sha": "ba22c7f9b979966627712c6cab0b2475e613f90f", "filename": "compiler/rustc_data_structures/src/stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -5,6 +5,7 @@ const RED_ZONE: usize = 100 * 1024; // 100k\n \n // Only the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n // on. This flag has performance relevant characteristics. Don't set it too high.\n+#[allow(clippy::identity_op)]\n const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n \n /// Grows the stack on demand to prevent stack overflow. Call this in strategic locations"}, {"sha": "a3ece6550473cce4ce080bbdc5e28f15b69e1cc2", "filename": "compiler/rustc_data_structures/src/steal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -34,7 +34,7 @@ impl<T> Steal<T> {\n     #[track_caller]\n     pub fn borrow(&self) -> MappedReadGuard<'_, T> {\n         let borrow = self.value.borrow();\n-        if let None = &*borrow {\n+        if borrow.is_none() {\n             panic!(\"attempted to read from stolen value: {}\", std::any::type_name::<T>());\n         }\n         ReadGuard::map(borrow, |opt| opt.as_ref().unwrap())"}, {"sha": "9e605ea2d982c950b22d044a07d768718bc8b7b3", "filename": "compiler/rustc_data_structures/src/tiny_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -48,7 +48,7 @@ impl<T: PartialEq> TinyList<T> {\n     #[inline]\n     pub fn contains(&self, data: &T) -> bool {\n         let mut elem = self.head.as_ref();\n-        while let Some(ref e) = elem {\n+        while let Some(e) = elem {\n             if &e.data == data {\n                 return true;\n             }"}, {"sha": "ce60d40b24b44e1087a5428c02d214c0379f8e89", "filename": "compiler/rustc_data_structures/src/vec_linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2,8 +2,8 @@ use rustc_index::vec::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,\n-    links: &'a Ls,\n-) -> impl Iterator<Item = Ls::LinkIndex> + 'a\n+    links: &Ls,\n+) -> impl Iterator<Item = Ls::LinkIndex> + '_\n where\n     Ls: Links,\n {"}, {"sha": "9a57ec991444ac8e160ae835d213b6513afad26e", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1253,12 +1253,16 @@ pub fn init_rustc_env_logger() {\n /// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) {\n-    // Don't register a dispatcher if there's no filter to print anything\n-    match std::env::var(env) {\n-        Err(_) => return,\n-        Ok(s) if s.is_empty() => return,\n-        Ok(_) => {}\n-    }\n+    use tracing_subscriber::{\n+        filter::{self, EnvFilter, LevelFilter},\n+        layer::SubscriberExt,\n+    };\n+\n+    let filter = match std::env::var(env) {\n+        Ok(env) => EnvFilter::new(env),\n+        _ => EnvFilter::default().add_directive(filter::Directive::from(LevelFilter::WARN)),\n+    };\n+\n     let color_logs = match std::env::var(String::from(env) + \"_COLOR\") {\n         Ok(value) => match value.as_ref() {\n             \"always\" => true,\n@@ -1278,7 +1282,7 @@ pub fn init_env_logger(env: &str) {\n             \"non-Unicode log color value: expected one of always, never, or auto\",\n         ),\n     };\n-    let filter = tracing_subscriber::EnvFilter::from_env(env);\n+\n     let layer = tracing_tree::HierarchicalLayer::default()\n         .with_writer(io::stderr)\n         .with_indent_lines(true)\n@@ -1288,7 +1292,6 @@ pub fn init_env_logger(env: &str) {\n     #[cfg(parallel_compiler)]\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n-    use tracing_subscriber::layer::SubscriberExt;\n     let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n     tracing::subscriber::set_global_default(subscriber).unwrap();\n }"}, {"sha": "1b4b58314b3561806eca5011676a423fda50637b", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -242,6 +242,7 @@ E0468: include_str!(\"./error_codes/E0468.md\"),\n E0469: include_str!(\"./error_codes/E0469.md\"),\n E0477: include_str!(\"./error_codes/E0477.md\"),\n E0478: include_str!(\"./error_codes/E0478.md\"),\n+E0482: include_str!(\"./error_codes/E0482.md\"),\n E0491: include_str!(\"./error_codes/E0491.md\"),\n E0492: include_str!(\"./error_codes/E0492.md\"),\n E0493: include_str!(\"./error_codes/E0493.md\"),\n@@ -599,7 +600,6 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n //  E0479, // the type `..` (provided as the value of a type parameter) is...\n //  E0480, // lifetime of method receiver does not outlive the method call\n //  E0481, // lifetime of function argument does not outlive the function call\n-    E0482, // lifetime of return value does not outlive the function call\n //  E0483, // lifetime of operand does not outlive the operation\n //  E0484, // reference is not valid at the time of borrow\n //  E0485, // automatically reference is not valid at the time of borrow"}, {"sha": "58ebf43cc98ced9ff3652ea13f49b10f067400c1", "filename": "compiler/rustc_error_codes/src/error_codes/E0482.md", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,73 @@\n+A lifetime of a returned value does not outlive the function call.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0482\n+fn prefix<'a>(\n+    words: impl Iterator<Item = &'a str>\n+) -> impl Iterator<Item = String> { // error!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+To fix this error, make the lifetime of the returned value explicit:\n+\n+```\n+fn prefix<'a>(\n+    words: impl Iterator<Item = &'a str> + 'a\n+) -> impl Iterator<Item = String> + 'a { // ok!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+The [`impl Trait`] feature in this example uses an implicit `'static` lifetime\n+restriction in the returned type. However the type implementing the `Iterator`\n+passed to the function lives just as long as `'a`, which is not long enough.\n+\n+The solution involves adding lifetime bound to both function argument and\n+the return value to make sure that the values inside the iterator\n+are not dropped when the function goes out of the scope.\n+\n+An alternative solution would be to guarantee that the `Item` references\n+in the iterator are alive for the whole lifetime of the program.\n+\n+```\n+fn prefix(\n+    words: impl Iterator<Item = &'static str>\n+) -> impl Iterator<Item = String> {  // ok!\n+    words.map(|v| format!(\"foo-{}\", v))\n+}\n+```\n+\n+A similar lifetime problem might arise when returning closures:\n+\n+```compile_fail,E0482\n+fn foo(\n+    x: &mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] { // error!\n+    |y| {\n+        y.append(x);\n+        y\n+    }\n+}\n+```\n+\n+Analogically, a solution here is to use explicit return lifetime\n+and move the ownership of the variable to the closure.\n+\n+```\n+fn foo<'a>(\n+    x: &'a mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] + 'a { // ok!\n+    move |y| {\n+        y.append(x);\n+        y\n+    }\n+}\n+```\n+\n+To better understand the lifetime treatment in the [`impl Trait`],\n+please see the [RFC 1951].\n+\n+[`impl Trait`]: https://doc.rust-lang.org/reference/types/impl-trait.html\n+[RFC 1951]: https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html"}, {"sha": "778d58eeadcf0344ae3ec63c72c9c661259b6988", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2308,7 +2308,7 @@ pub fn is_case_difference(sm: &SourceMap, suggested: &str, sp: Span) -> bool {\n     let found = match sm.span_to_snippet(sp) {\n         Ok(snippet) => snippet,\n         Err(e) => {\n-            warn!(\"Invalid span {:?}. Err={:?}\", sp, e);\n+            warn!(error = ?e, \"Invalid span {:?}\", sp);\n             return false;\n         }\n     };"}, {"sha": "55ec3703df8f8ba7a107fa05331eda26567bb0a5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -288,7 +288,7 @@ declare_features! (\n     (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n     /// Allows bindings in the subpattern of a binding pattern.\n     /// For example, you can write `x @ Some(y)`.\n-    (accepted, bindings_after_at, \"1.54.0\", Some(65490), None),\n+    (accepted, bindings_after_at, \"1.56.0\", Some(65490), None),\n     /// Allows calling `transmute` in const fn\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n     /// Allows accessing fields of unions inside `const` functions."}, {"sha": "a2fadb13a574179611cca2629ce783776860f3dc", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -678,6 +678,9 @@ declare_features! (\n     /// Allows `#[doc(cfg_hide(...))]`.\n     (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n \n+    /// Allows using the `non_exhaustive_omitted_patterns` lint.\n+    (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "e69289b71f97f9feee16f51ad18f61fe67a01477", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -512,7 +512,7 @@ impl<'a> LabelText<'a> {\n     pub fn to_dot_string(&self) -> String {\n         match *self {\n             LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n-            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s)),\n+            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(s)),\n             HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }"}, {"sha": "5264f7cc326128edea67e2d149ae524971589288", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2293,6 +2293,13 @@ impl<'hir> InlineAsmOperand<'hir> {\n             Self::Const { .. } | Self::Sym { .. } => None,\n         }\n     }\n+\n+    pub fn is_clobber(&self) -> bool {\n+        matches!(\n+            self,\n+            InlineAsmOperand::Out { reg: InlineAsmRegOrRegClass::Reg(_), late: _, expr: None }\n+        )\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "1995fd64e6f2cf7c779563557ba655a8f72ae736", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -990,9 +990,8 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n     pub fn insert_all_into_row(&mut self, row: R) {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n-        let words = &mut self.words[..];\n-        for index in start..end {\n-            words[index] = !0;\n+        for word in self.words[start..end].iter_mut() {\n+            *word = !0;\n         }\n         self.clear_excess_bits(row);\n     }\n@@ -1144,7 +1143,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {\n+    pub fn iter(&self, row: R) -> impl Iterator<Item = C> + '_ {\n         self.row(row).into_iter().flat_map(|r| r.iter())\n     }\n "}, {"sha": "69578e85f278175564365086d13d8f4bb22cea4e", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -634,18 +634,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn drain<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n-        range: R,\n-    ) -> impl Iterator<Item = T> + 'a {\n+    pub fn drain<R: RangeBounds<usize>>(&mut self, range: R) -> impl Iterator<Item = T> + '_ {\n         self.raw.drain(range)\n     }\n \n     #[inline]\n-    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n+    pub fn drain_enumerated<R: RangeBounds<usize>>(\n+        &mut self,\n         range: R,\n-    ) -> impl Iterator<Item = (I, T)> + 'a {\n+    ) -> impl Iterator<Item = (I, T)> + '_ {\n         self.raw.drain(range).enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n@@ -741,6 +738,12 @@ impl<I: Idx, T> IndexVec<I, Option<T>> {\n         self.ensure_contains_elem(index, || None);\n         self[index].get_or_insert_with(value)\n     }\n+\n+    #[inline]\n+    pub fn remove(&mut self, index: I) -> Option<T> {\n+        self.ensure_contains_elem(index, || None);\n+        self[index].take()\n+    }\n }\n \n impl<I: Idx, T: Clone> IndexVec<I, T> {"}, {"sha": "056709cd314d1a8f9c689411ee9d1299bf646b19", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2060,14 +2060,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     expected: exp_found.expected.print_only_trait_path(),\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n-                self.expected_found_str(pretty_exp_found)\n+                match self.expected_found_str(pretty_exp_found) {\n+                    Some((expected, found)) if expected == found => {\n+                        self.expected_found_str(exp_found)\n+                    }\n+                    ret => ret,\n+                }\n             }\n             infer::PolyTraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n-                self.expected_found_str(pretty_exp_found)\n+                match self.expected_found_str(pretty_exp_found) {\n+                    Some((expected, found)) if expected == found => {\n+                        self.expected_found_str(exp_found)\n+                    }\n+                    ret => ret,\n+                }\n             }\n         }\n     }"}, {"sha": "0efe5a56436b5727aa16be01da4fcac05e65946c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -130,8 +130,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n-        err.span_label(impl_sp, &format!(\"found\"));\n-        err.span_label(trait_sp, &format!(\"expected\"));\n+        err.span_label(impl_sp, \"found\");\n+        err.span_label(trait_sp, \"expected\");\n \n         err.emit();\n     }"}, {"sha": "804dc657f2d473b624610de24a648fe9c556e186", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -68,11 +68,10 @@ pub enum EscapeError {\n impl EscapeError {\n     /// Returns true for actual errors, as opposed to warnings.\n     pub fn is_fatal(&self) -> bool {\n-        match self {\n-            EscapeError::UnskippedWhitespaceWarning => false,\n-            EscapeError::MultipleSkippedLinesWarning => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self,\n+            EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning\n+        )\n     }\n }\n \n@@ -330,7 +329,7 @@ where\n             callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));\n         }\n         let tail = &tail[first_non_space..];\n-        if let Some(c) = tail.chars().nth(0) {\n+        if let Some(c) = tail.chars().next() {\n             // For error reporting, we would like the span to contain the character that was not\n             // skipped.  The +1 is necessary to account for the leading \\ that started the escape.\n             let end = start + first_non_space + c.len_utf8() + 1;"}, {"sha": "876245747f64a50acf8a94f702fd3bfc176a9978", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,106 @@\n+use crate::{context::LintContext, LateContext, LateLintPass};\n+use rustc_hir as hir;\n+use rustc_middle::ty::{fold::TypeFoldable, Ty};\n+use rustc_span::{symbol::sym, Span};\n+\n+declare_lint! {\n+    /// The `enum_intrinsics_non_enums` lint detects calls to\n+    /// intrinsic functions that require an enum ([`core::mem::discriminant`],\n+    /// [`core::mem::variant_count`]), but are called with a non-enum type.\n+    ///\n+    /// [`core::mem::discriminant`]: https://doc.rust-lang.org/core/mem/fn.discriminant.html\n+    /// [`core::mem::variant_count`]: https://doc.rust-lang.org/core/mem/fn.variant_count.html\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(enum_intrinsics_non_enums)]\n+    /// core::mem::discriminant::<i32>(&123);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In order to accept any enum, the `mem::discriminant` and\n+    /// `mem::variant_count` functions are generic over a type `T`.\n+    /// This makes it technically possible for `T` to be a non-enum,\n+    /// in which case the return value is unspecified.\n+    ///\n+    /// This lint prevents such incorrect usage of these functions.\n+    ENUM_INTRINSICS_NON_ENUMS,\n+    Deny,\n+    \"detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types\"\n+}\n+\n+declare_lint_pass!(EnumIntrinsicsNonEnums => [ENUM_INTRINSICS_NON_ENUMS]);\n+\n+/// Returns `true` if we know for sure that the given type is not an enum. Note that for cases where\n+/// the type is generic, we can't be certain if it will be an enum so we have to assume that it is.\n+fn is_non_enum(t: Ty<'_>) -> bool {\n+    !t.is_enum() && !t.potentially_needs_subst()\n+}\n+\n+fn enforce_mem_discriminant(\n+    cx: &LateContext<'_>,\n+    func_expr: &hir::Expr<'_>,\n+    expr_span: Span,\n+    args_span: Span,\n+) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, expr_span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::discriminant` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .span_note(\n+                    args_span,\n+                    &format!(\n+                        \"the argument to `discriminant` should be a \\\n+                            reference to an enum, but it was passed \\\n+                            a reference to a `{}`, which is not an enum.\",\n+                        ty_param,\n+                    ),\n+                )\n+                .emit();\n+        });\n+    }\n+}\n+\n+fn enforce_mem_variant_count(cx: &LateContext<'_>, func_expr: &hir::Expr<'_>, span: Span) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::variant_count` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .note(&format!(\n+                    \"the type parameter of `variant_count` should \\\n+                            be an enum, but it was instantiated with \\\n+                            the type `{}`, which is not an enum.\",\n+                    ty_param,\n+                ))\n+                .emit();\n+        });\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for EnumIntrinsicsNonEnums {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n+        if let hir::ExprKind::Call(ref func, ref args) = expr.kind {\n+            if let hir::ExprKind::Path(ref qpath) = func.kind {\n+                if let Some(def_id) = cx.qpath_res(qpath, func.hir_id).opt_def_id() {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_discriminant, def_id) {\n+                        enforce_mem_discriminant(cx, func, expr.span, args[0].span);\n+                    } else if cx.tcx.is_diagnostic_item(sym::mem_variant_count, def_id) {\n+                        enforce_mem_variant_count(cx, func, expr.span);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "b6d66eb12d08314e19aa0e65fee5e343a18aa408", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,7 +1,6 @@\n use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n-use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n@@ -233,7 +232,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                 Some(lvl) => lvl,\n             };\n \n-            let mut metas = unwrap_or!(attr.meta_item_list(), continue);\n+            let mut metas = match attr.meta_item_list() {\n+                Some(x) => x,\n+                None => continue,\n+            };\n \n             if metas.is_empty() {\n                 // FIXME (#55112): issue unused-attributes lint for `#[level()]`"}, {"sha": "6f684a0fe5128658eaaa61dd955d505b5d80b24f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -47,6 +47,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod early;\n+mod enum_intrinsics_non_enums;\n mod internal;\n mod late;\n mod levels;\n@@ -76,6 +77,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n@@ -168,6 +170,7 @@ macro_rules! late_lint_passes {\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n                 NonPanicFmt: NonPanicFmt,\n                 NoopMethodCall: NoopMethodCall,\n+                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n                 NamedAsmLabels: NamedAsmLabels,\n             ]"}, {"sha": "f2ad72f97eca77a9a22937a6b4f2e6602ef33106", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -230,8 +230,7 @@ fn check_panic_str<'tcx>(\n         Err(_) => (None, None),\n     };\n \n-    let mut fmt_parser =\n-        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+    let mut fmt_parser = Parser::new(fmt, style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n     if n_arguments > 0 && fmt_parser.errors.is_empty() {"}, {"sha": "a93d18950dba9256364c077fcd85d32afe2504b1", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,6 +6,7 @@\n \n use crate::{declare_lint, declare_lint_pass, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n+use rustc_span::symbol::sym;\n \n declare_lint! {\n     /// The `forbidden_lint_groups` lint detects violations of\n@@ -3476,6 +3477,8 @@ declare_lint! {\n     /// }\n     ///\n     /// // in crate B\n+    /// #![feature(non_exhaustive_omitted_patterns_lint)]\n+    ///\n     /// match Bar::A {\n     ///     Bar::A => {},\n     ///     #[warn(non_exhaustive_omitted_patterns)]\n@@ -3512,6 +3515,7 @@ declare_lint! {\n     pub NON_EXHAUSTIVE_OMITTED_PATTERNS,\n     Allow,\n     \"detect when patterns of types marked `non_exhaustive` are missed\",\n+    @feature_gate = sym::non_exhaustive_omitted_patterns_lint;\n }\n \n declare_lint! {"}, {"sha": "63bdcea87f8170a97df6b45df4f8bc8d8032e910", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -24,11 +24,9 @@ fn parse_attributes(field: &syn::Field) -> Attributes {\n                         }\n                         if meta.path().is_ident(\"project\") {\n                             if let Meta::List(list) = meta {\n-                                if let Some(nested) = list.nested.iter().next() {\n-                                    if let NestedMeta::Meta(meta) = nested {\n-                                        attrs.project = meta.path().get_ident().cloned();\n-                                        any_attr = true;\n-                                    }\n+                                if let Some(NestedMeta::Meta(meta)) = list.nested.iter().next() {\n+                                    attrs.project = meta.path().get_ident().cloned();\n+                                    any_attr = true;\n                                 }\n                             }\n                         }"}, {"sha": "c8959dc86ad2d87b3fd0c67a81389d211cf758de", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -349,14 +349,14 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let field_binding = &info.binding.binding;\n \n-        let option_ty = option_inner_ty(&info.ty);\n+        let option_ty = option_inner_ty(info.ty);\n \n         let generated_code = self.generate_non_option_field_code(\n             attr,\n             FieldInfo {\n                 vis: info.vis,\n                 binding: info.binding,\n-                ty: option_ty.unwrap_or(&info.ty),\n+                ty: option_ty.unwrap_or(info.ty),\n                 span: info.span,\n             },\n         )?;\n@@ -388,7 +388,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                 let formatted_str = self.build_format(&s.value(), attr.span());\n                 match name {\n                     \"message\" => {\n-                        if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        if type_matches_path(info.ty, &[\"rustc_span\", \"Span\"]) {\n                             quote! {\n                                 #diag.set_span(*#field_binding);\n                                 #diag.set_primary_message(#formatted_str);\n@@ -401,7 +401,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                         }\n                     }\n                     \"label\" => {\n-                        if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        if type_matches_path(info.ty, &[\"rustc_span\", \"Span\"]) {\n                             quote! {\n                                 #diag.span_label(*#field_binding, #formatted_str);\n                             }"}, {"sha": "2431b819a3f30e25d3507cd84c735703a2205771", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -363,7 +363,7 @@ impl Collector<'tcx> {\n                 .collect::<Vec<_>>();\n             if existing.is_empty() {\n                 // Add if not found\n-                let new_name = passed_lib.new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+                let new_name: Option<&str> = passed_lib.new_name.as_deref();\n                 let lib = NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n                     kind: passed_lib.kind,"}, {"sha": "23d475a59538f8c6f191a4ae84a53cd0788e44a6", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -63,6 +63,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n+use rustc_query_system::dep_graph::FingerprintStyle;\n use rustc_span::symbol::Symbol;\n use std::hash::Hash;\n \n@@ -89,9 +90,9 @@ pub struct DepKindStruct {\n \n     /// Whether the query key can be recovered from the hashed fingerprint.\n     /// See [DepNodeParams] trait for the behaviour of each key type.\n-    // FIXME: Make this a simple boolean once DepNodeParams::can_reconstruct_query_key\n+    // FIXME: Make this a simple boolean once DepNodeParams::fingerprint_style\n     // can be made a specialized associated const.\n-    can_reconstruct_query_key: fn() -> bool,\n+    fingerprint_style: fn() -> FingerprintStyle,\n }\n \n impl std::ops::Deref for DepKind {\n@@ -103,14 +104,14 @@ impl std::ops::Deref for DepKind {\n \n impl DepKind {\n     #[inline(always)]\n-    pub fn can_reconstruct_query_key(&self) -> bool {\n+    pub fn fingerprint_style(&self) -> FingerprintStyle {\n         // Only fetch the DepKindStruct once.\n         let data: &DepKindStruct = &**self;\n         if data.is_anon {\n-            return false;\n+            return FingerprintStyle::Opaque;\n         }\n \n-        (data.can_reconstruct_query_key)()\n+        (data.fingerprint_style)()\n     }\n }\n \n@@ -151,38 +152,39 @@ macro_rules! contains_eval_always_attr {\n pub mod dep_kind {\n     use super::*;\n     use crate::ty::query::query_keys;\n+    use rustc_query_system::dep_graph::FingerprintStyle;\n \n     // We use this for most things when incr. comp. is turned off.\n     pub const Null: DepKindStruct = DepKindStruct {\n         has_params: false,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || true,\n+        fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const TraitSelect: DepKindStruct = DepKindStruct {\n         has_params: false,\n         is_anon: true,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || true,\n+        fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {\n         has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || false,\n+        fingerprint_style: || FingerprintStyle::Opaque,\n     };\n \n     pub const CompileMonoItem: DepKindStruct = DepKindStruct {\n         has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || false,\n+        fingerprint_style: || FingerprintStyle::Opaque,\n     };\n \n     macro_rules! define_query_dep_kinds {\n@@ -196,16 +198,16 @@ pub mod dep_kind {\n                 const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n                 #[inline(always)]\n-                fn can_reconstruct_query_key() -> bool {\n+                fn fingerprint_style() -> rustc_query_system::dep_graph::FingerprintStyle {\n                     <query_keys::$variant<'_> as DepNodeParams<TyCtxt<'_>>>\n-                        ::can_reconstruct_query_key()\n+                        ::fingerprint_style()\n                 }\n \n                 DepKindStruct {\n                     has_params,\n                     is_anon,\n                     is_eval_always,\n-                    can_reconstruct_query_key,\n+                    fingerprint_style,\n                 }\n             };)*\n         );\n@@ -320,7 +322,7 @@ impl DepNodeExt for DepNode {\n     /// method will assert that the given DepKind actually requires a\n     /// single DefId/DefPathHash parameter.\n     fn from_def_path_hash(def_path_hash: DefPathHash, kind: DepKind) -> DepNode {\n-        debug_assert!(kind.can_reconstruct_query_key() && kind.has_params);\n+        debug_assert!(kind.fingerprint_style() == FingerprintStyle::DefPathHash);\n         DepNode { kind, hash: def_path_hash.0.into() }\n     }\n \n@@ -335,7 +337,7 @@ impl DepNodeExt for DepNode {\n     /// refers to something from the previous compilation session that\n     /// has been removed.\n     fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n-        if self.kind.can_reconstruct_query_key() {\n+        if self.kind.fingerprint_style() == FingerprintStyle::DefPathHash {\n             Some(\n                 tcx.on_disk_cache\n                     .as_ref()?\n@@ -350,14 +352,16 @@ impl DepNodeExt for DepNode {\n     fn from_label_string(label: &str, def_path_hash: DefPathHash) -> Result<DepNode, ()> {\n         let kind = dep_kind_from_label_string(label)?;\n \n-        if !kind.can_reconstruct_query_key() {\n-            return Err(());\n-        }\n-\n-        if kind.has_params {\n-            Ok(DepNode::from_def_path_hash(def_path_hash, kind))\n-        } else {\n-            Ok(DepNode::new_no_params(kind))\n+        match kind.fingerprint_style() {\n+            FingerprintStyle::Opaque => Err(()),\n+            FingerprintStyle::Unit => {\n+                if !kind.has_params {\n+                    Ok(DepNode::new_no_params(kind))\n+                } else {\n+                    Err(())\n+                }\n+            }\n+            FingerprintStyle::DefPathHash => Ok(DepNode::from_def_path_hash(def_path_hash, kind)),\n         }\n     }\n \n@@ -369,8 +373,8 @@ impl DepNodeExt for DepNode {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for () {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Unit\n     }\n \n     fn to_fingerprint(&self, _: TyCtxt<'tcx>) -> Fingerprint {\n@@ -384,8 +388,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for () {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -403,8 +407,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -422,8 +426,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -442,8 +446,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        false\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     // We actually would not need to specialize the implementation of this\n@@ -467,8 +471,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        false\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     // We actually would not need to specialize the implementation of this"}, {"sha": "cda9963907482f9a78ac3fa170df3b3745a619d5", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -25,8 +25,8 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n \n     #[inline(always)]\n-    fn can_reconstruct_query_key(&self) -> bool {\n-        DepKind::can_reconstruct_query_key(self)\n+    fn fingerprint_style(&self) -> rustc_query_system::dep_graph::FingerprintStyle {\n+        DepKind::fingerprint_style(self)\n     }\n \n     #[inline(always)]"}, {"sha": "6720493cd3cb19ba77400f82970fc08df7449cca", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -264,14 +264,14 @@ impl EvaluationResult {\n /// Indicates that trait evaluation caused overflow and in which pass.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub enum OverflowError {\n-    Cannonical,\n+    Canonical,\n     ErrorReporting,\n }\n \n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(overflow_error: OverflowError) -> SelectionError<'tcx> {\n         match overflow_error {\n-            OverflowError::Cannonical => SelectionError::Overflow,\n+            OverflowError::Canonical => SelectionError::Overflow,\n             OverflowError::ErrorReporting => SelectionError::ErrorReporting,\n         }\n     }"}, {"sha": "d0c7379c2d94d5aab856d8fb9ffbda0c6f795008", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -986,7 +986,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let niche = if def.repr.hide_niche() {\n                                 None\n                             } else {\n-                                Niche::from_scalar(dl, Size::ZERO, scalar.clone())\n+                                Niche::from_scalar(dl, Size::ZERO, *scalar)\n                             };\n                             if let Some(niche) = niche {\n                                 match st.largest_niche {\n@@ -2273,7 +2273,7 @@ where\n         ) -> TyMaybeWithLayout<'tcx> {\n             let tcx = cx.tcx();\n             let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {\n-                let layout = Layout::scalar(cx, tag.clone());\n+                let layout = Layout::scalar(cx, tag);\n                 TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }\n             };\n \n@@ -3012,7 +3012,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         };\n \n         let target = &self.tcx.sess.target;\n-        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n+        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\" | \"uclibc\");\n         let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n             target.os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n@@ -3110,7 +3110,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             if arg.layout.is_zst() {\n                 // For some forsaken reason, x86_64-pc-windows-gnu\n                 // doesn't ignore zero-sized struct arguments.\n-                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl}.\n+                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.\n                 if is_return\n                     || rust_abi\n                     || (!win_x64_gnu"}, {"sha": "9a86d465f98ca7a277d691a3ea5e0b2cb08bde1a", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: exchange_malloc,\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n-                        destination: Some((Place::from(storage), success)),\n+                        destination: Some((storage, success)),\n                         cleanup: None,\n                         from_hir_call: false,\n                         fn_span: expr_span,\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n \n                 // Transmute `*mut u8` to the box (thus far, uninitialized):\n-                let box_ = Rvalue::ShallowInitBox(Operand::Move(Place::from(storage)), value.ty);\n+                let box_ = Rvalue::ShallowInitBox(Operand::Move(storage), value.ty);\n                 this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:"}, {"sha": "9e961f7ba5dd00e7a03ac1f3461a94e62925d1d1", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1068,9 +1068,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n                     Missing {\n                         nonexhaustive_enum_missing_real_variants: self\n                             .iter_missing(pcx)\n-                            .filter(|c| !c.is_non_exhaustive())\n-                            .next()\n-                            .is_some(),\n+                            .any(|c| !c.is_non_exhaustive()),\n                     }\n                 } else {\n                     Missing { nonexhaustive_enum_missing_real_variants: false }"}, {"sha": "c0bf4b659aa9674c12fa61201d51571afe3decaf", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -289,7 +289,7 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeMutBorrowedLocals<'_, 'tcx> {\n         flow_state: &BitSet<Local>,\n         call: PeekCall,\n     ) {\n-        warn!(\"peek_at: place={:?}\", place);\n+        info!(?place, \"peek_at\");\n         let local = if let Some(l) = place.as_local() {\n             l\n         } else {\n@@ -311,7 +311,7 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeLiveLocals {\n         flow_state: &BitSet<Local>,\n         call: PeekCall,\n     ) {\n-        warn!(\"peek_at: place={:?}\", place);\n+        info!(?place, \"peek_at\");\n         let local = if let Some(l) = place.as_local() {\n             l\n         } else {"}, {"sha": "f191911a6c7c1d797485aa76b1c862b58daf308d", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n             }\n \n             // check that the value being matched on is the same. The\n-            if this_bb_discr_info.targets_with_values.iter().find(|x| x.0 == value).is_none() {\n+            if !this_bb_discr_info.targets_with_values.iter().any(|x| x.0 == value) {\n                 trace!(\"NO: values being matched on are not the same\");\n                 return None;\n             }"}, {"sha": "76f0e83c8c3d5c8a63c6f65c9d01d8323ac48117", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -111,8 +111,7 @@ impl<'a, 'tcx> Patcher<'a, 'tcx> {\n                         Operand::Copy(place) | Operand::Move(place) => {\n                             // create new local\n                             let ty = operand.ty(self.local_decls, self.tcx);\n-                            let local_decl =\n-                                LocalDecl::with_source_info(ty, statement.source_info.clone());\n+                            let local_decl = LocalDecl::with_source_info(ty, statement.source_info);\n                             let local = self.local_decls.push(local_decl);\n                             // make it live\n                             let mut make_live_statement = statement.clone();"}, {"sha": "3d29d305021090512f8dcdf3b86afa1084ec1cbd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1096,7 +1096,7 @@ impl<'a> Parser<'a> {\n             (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n                 let name = pprust::path_to_string(&path);\n                 snapshot.bump(); // `(`\n-                match snapshot.parse_struct_fields(path.clone(), false, token::Paren) {\n+                match snapshot.parse_struct_fields(path, false, token::Paren) {\n                     Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n                         // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`."}, {"sha": "e5fbddda74427a8e0d60b8d0c4a5681854e01bb0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1767,8 +1767,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_macro_export(&self, hir_id: HirId, attr: &Attribute, target: Target) {\n         if target != Target::MacroDef {\n             self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                lint.build(&format!(\"`#[macro_export]` only has an effect on macro definitions\"))\n-                    .emit();\n+                lint.build(\"`#[macro_export]` only has an effect on macro definitions\").emit();\n             });\n         }\n     }"}, {"sha": "a0ceb567f25a6f8d13b6d04bc860153e86a3c478", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n-use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -83,30 +82,39 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n-                    let did = imp.of_trait.as_ref()?.trait_def_id()?;\n-                    let mut to_implement = FxHashSet::default();\n-\n-                    for did in self.tcx.associated_item_def_ids(did) {\n+                    let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n+                    let ancestors = self\n+                        .tcx\n+                        .trait_def(trait_def_id)\n+                        .ancestors(self.tcx, item.def_id.to_def_id())\n+                        .ok()?;\n+                    let mut to_implement = Vec::new();\n+\n+                    for trait_item in self.tcx.associated_items(trait_def_id).in_definition_order()\n+                    {\n                         if let ty::AssocItem {\n                             kind: ty::AssocKind::Fn, ident, defaultness, ..\n-                        } = self.tcx.associated_item(*did)\n+                        } = trait_item\n                         {\n                             // we can ignore functions that do not have default bodies:\n                             // if those are unimplemented it will be catched by typeck.\n-                            if defaultness.has_value()\n-                                && !self.tcx.has_attr(*did, sym::default_method_body_is_const)\n+                            if !defaultness.has_value()\n+                                || self\n+                                    .tcx\n+                                    .has_attr(trait_item.def_id, sym::default_method_body_is_const)\n                             {\n-                                to_implement.insert(ident);\n+                                continue;\n                             }\n-                        }\n-                    }\n \n-                    for it in imp\n-                        .items\n-                        .iter()\n-                        .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n-                    {\n-                        to_implement.remove(&it.ident);\n+                            let is_implemented = ancestors\n+                                .leaf_def(self.tcx, trait_item.ident, trait_item.kind)\n+                                .map(|node_item| !node_item.defining_node.is_from_trait())\n+                                .unwrap_or(false);\n+\n+                            if !is_implemented {\n+                                to_implement.push(ident.to_string());\n+                            }\n+                        }\n                     }\n \n                     // all nonconst trait functions (not marked with #[default_method_body_is_const])\n@@ -118,7 +126,7 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                                 item.span,\n                                 \"const trait implementations may not use non-const default functions\",\n                             )\n-                            .note(&format!(\"`{}` not implemented\", to_implement.into_iter().map(|id| id.to_string()).collect::<Vec<_>>().join(\"`, `\")))\n+                            .note(&format!(\"`{}` not implemented\", to_implement.join(\"`, `\")))\n                             .emit();\n                     }\n                 }"}, {"sha": "008b856ebf2fab873801412b4aa325000afff27b", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 120, "deletions": 16, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -141,6 +141,7 @@ impl ExprVisitor<'tcx> {\n         template: &[InlineAsmTemplatePiece],\n         is_input: bool,\n         tied_input: Option<(&hir::Expr<'tcx>, Option<InlineAsmType>)>,\n+        target_features: &[Symbol],\n     ) -> Option<InlineAsmType> {\n         // Check the type against the allowed types for inline asm.\n         let ty = self.typeck_results.expr_ty_adjusted(expr);\n@@ -283,17 +284,20 @@ impl ExprVisitor<'tcx> {\n         };\n \n         // Check whether the selected type requires a target feature. Note that\n-        // this is different from the feature check we did earlier in AST\n-        // lowering. While AST lowering checked that this register class is\n-        // usable at all with the currently enabled features, some types may\n-        // only be usable with a register class when a certain feature is\n-        // enabled. We check this here since it depends on the results of typeck.\n+        // this is different from the feature check we did earlier. While the\n+        // previous check checked that this register class is usable at all\n+        // with the currently enabled features, some types may only be usable\n+        // with a register class when a certain feature is enabled. We check\n+        // this here since it depends on the results of typeck.\n         //\n         // Also note that this check isn't run when the operand type is never\n-        // (!). In that case we still need the earlier check in AST lowering to\n-        // verify that the register class is usable at all.\n+        // (!). In that case we still need the earlier check to verify that the\n+        // register class is usable at all.\n         if let Some(feature) = feature {\n-            if !self.tcx.sess.target_features.contains(&Symbol::intern(feature)) {\n+            let feat_sym = Symbol::intern(feature);\n+            if !self.tcx.sess.target_features.contains(&feat_sym)\n+                && !target_features.contains(&feat_sym)\n+            {\n                 let msg = &format!(\"`{}` target feature is not enabled\", feature);\n                 let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n                 err.note(&format!(\n@@ -349,23 +353,122 @@ impl ExprVisitor<'tcx> {\n         Some(asm_ty)\n     }\n \n-    fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, (op, _)) in asm.operands.iter().enumerate() {\n+    fn check_asm(&self, asm: &hir::InlineAsm<'tcx>, hir_id: hir::HirId) {\n+        let hir = self.tcx.hir();\n+        let enclosing_id = hir.enclosing_body_owner(hir_id);\n+        let enclosing_def_id = hir.local_def_id(enclosing_id).to_def_id();\n+        let attrs = self.tcx.codegen_fn_attrs(enclosing_def_id);\n+        for (idx, (op, op_sp)) in asm.operands.iter().enumerate() {\n+            // Validate register classes against currently enabled target\n+            // features. We check that at least one type is available for\n+            // the enabled features.\n+            //\n+            // We ignore target feature requirements for clobbers: if the\n+            // feature is disabled then the compiler doesn't care what we\n+            // do with the registers.\n+            //\n+            // Note that this is only possible for explicit register\n+            // operands, which cannot be used in the asm string.\n+            if let Some(reg) = op.reg() {\n+                if !op.is_clobber() {\n+                    let mut missing_required_features = vec![];\n+                    let reg_class = reg.reg_class();\n+                    for &(_, feature) in reg_class.supported_types(self.tcx.sess.asm_arch.unwrap())\n+                    {\n+                        match feature {\n+                            Some(feature) => {\n+                                let feat_sym = Symbol::intern(feature);\n+                                if self.tcx.sess.target_features.contains(&feat_sym)\n+                                    || attrs.target_features.contains(&feat_sym)\n+                                {\n+                                    missing_required_features.clear();\n+                                    break;\n+                                } else {\n+                                    missing_required_features.push(feature);\n+                                }\n+                            }\n+                            None => {\n+                                missing_required_features.clear();\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    // We are sorting primitive strs here and can use unstable sort here\n+                    missing_required_features.sort_unstable();\n+                    missing_required_features.dedup();\n+                    match &missing_required_features[..] {\n+                        [] => {}\n+                        [feature] => {\n+                            let msg = format!(\n+                                \"register class `{}` requires the `{}` target feature\",\n+                                reg_class.name(),\n+                                feature\n+                            );\n+                            self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n+                            // register isn't enabled, don't do more checks\n+                            continue;\n+                        }\n+                        features => {\n+                            let msg = format!(\n+                                \"register class `{}` requires at least one of the following target features: {}\",\n+                                reg_class.name(),\n+                                features.join(\", \")\n+                            );\n+                            self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n+                            // register isn't enabled, don't do more checks\n+                            continue;\n+                        }\n+                    }\n+                }\n+            }\n+\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n-                    self.check_asm_operand_type(idx, reg, expr, asm.template, true, None);\n+                    self.check_asm_operand_type(\n+                        idx,\n+                        reg,\n+                        expr,\n+                        asm.template,\n+                        true,\n+                        None,\n+                        &attrs.target_features,\n+                    );\n                 }\n                 hir::InlineAsmOperand::Out { reg, late: _, ref expr } => {\n                     if let Some(expr) = expr {\n-                        self.check_asm_operand_type(idx, reg, expr, asm.template, false, None);\n+                        self.check_asm_operand_type(\n+                            idx,\n+                            reg,\n+                            expr,\n+                            asm.template,\n+                            false,\n+                            None,\n+                            &attrs.target_features,\n+                        );\n                     }\n                 }\n                 hir::InlineAsmOperand::InOut { reg, late: _, ref expr } => {\n-                    self.check_asm_operand_type(idx, reg, expr, asm.template, false, None);\n+                    self.check_asm_operand_type(\n+                        idx,\n+                        reg,\n+                        expr,\n+                        asm.template,\n+                        false,\n+                        None,\n+                        &attrs.target_features,\n+                    );\n                 }\n                 hir::InlineAsmOperand::SplitInOut { reg, late: _, ref in_expr, ref out_expr } => {\n-                    let in_ty =\n-                        self.check_asm_operand_type(idx, reg, in_expr, asm.template, true, None);\n+                    let in_ty = self.check_asm_operand_type(\n+                        idx,\n+                        reg,\n+                        in_expr,\n+                        asm.template,\n+                        true,\n+                        None,\n+                        &attrs.target_features,\n+                    );\n                     if let Some(out_expr) = out_expr {\n                         self.check_asm_operand_type(\n                             idx,\n@@ -374,6 +477,7 @@ impl ExprVisitor<'tcx> {\n                             asm.template,\n                             false,\n                             Some((in_expr, in_ty)),\n+                            &attrs.target_features,\n                         );\n                     }\n                 }\n@@ -422,7 +526,7 @@ impl Visitor<'tcx> for ExprVisitor<'tcx> {\n                 }\n             }\n \n-            hir::ExprKind::InlineAsm(asm) => self.check_asm(asm),\n+            hir::ExprKind::InlineAsm(asm) => self.check_asm(asm, expr.hir_id),\n \n             _ => {}\n         }"}, {"sha": "4d1e39db0ed48f3ce82702305512e93bb8296dac", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -428,6 +428,7 @@ macro_rules! define_queries {\n             use rustc_middle::ty::query::query_keys;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::{force_query, QueryDescription};\n+            use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n             pub const Null: QueryStruct = QueryStruct {\n@@ -454,9 +455,9 @@ macro_rules! define_queries {\n                 const is_anon: bool = is_anon!([$($modifiers)*]);\n \n                 #[inline(always)]\n-                fn can_reconstruct_query_key() -> bool {\n+                fn fingerprint_style() -> FingerprintStyle {\n                     <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>\n-                        ::can_reconstruct_query_key()\n+                        ::fingerprint_style()\n                 }\n \n                 fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<query_keys::$name<'tcx>> {\n@@ -472,7 +473,7 @@ macro_rules! define_queries {\n                         return\n                     }\n \n-                    if !can_reconstruct_query_key() {\n+                    if !fingerprint_style().reconstructible() {\n                         return\n                     }\n "}, {"sha": "c3bbd51f3d3cc13140b6f943247ef39a814b1585", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -5,8 +5,6 @@ use rustc_query_system::query::{QueryCache, QueryCacheStore};\n \n use std::any::type_name;\n use std::mem;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::Ordering;\n \n trait KeyStats {\n     fn key_stats(&self, stats: &mut QueryStats);\n@@ -27,7 +25,6 @@ impl KeyStats for DefId {\n #[derive(Clone)]\n struct QueryStats {\n     name: &'static str,\n-    cache_hits: usize,\n     key_size: usize,\n     key_type: &'static str,\n     value_size: usize,\n@@ -42,10 +39,6 @@ where\n {\n     let mut stats = QueryStats {\n         name,\n-        #[cfg(debug_assertions)]\n-        cache_hits: map.cache_hits.load(Ordering::Relaxed),\n-        #[cfg(not(debug_assertions))]\n-        cache_hits: 0,\n         key_size: mem::size_of::<C::Key>(),\n         key_type: type_name::<C::Key>(),\n         value_size: mem::size_of::<C::Value>(),\n@@ -63,12 +56,6 @@ where\n pub fn print_stats(tcx: TyCtxt<'_>) {\n     let queries = query_stats(tcx);\n \n-    if cfg!(debug_assertions) {\n-        let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n-        let results: usize = queries.iter().map(|s| s.entry_count).sum();\n-        eprintln!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n-    }\n-\n     let mut query_key_sizes = queries.clone();\n     query_key_sizes.sort_by_key(|q| q.key_size);\n     eprintln!(\"\\nLarge query keys:\");\n@@ -83,20 +70,6 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         eprintln!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n     }\n \n-    if cfg!(debug_assertions) {\n-        let mut query_cache_hits = queries.clone();\n-        query_cache_hits.sort_by_key(|q| q.cache_hits);\n-        eprintln!(\"\\nQuery cache hits:\");\n-        for q in query_cache_hits.iter().rev() {\n-            eprintln!(\n-                \"   {} - {} ({}%)\",\n-                q.name,\n-                q.cache_hits,\n-                q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n-            );\n-        }\n-    }\n-\n     let mut query_value_count = queries.clone();\n     query_value_count.sort_by_key(|q| q.entry_count);\n     eprintln!(\"\\nQuery value count:\");"}, {"sha": "8602219a7f32fd85453cc35827c17daf5d061ca3", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -42,7 +42,7 @@\n //!   `DefId` it was computed from. In other cases, too much information gets\n //!   lost during fingerprint computation.\n \n-use super::{DepContext, DepKind};\n+use super::{DepContext, DepKind, FingerprintStyle};\n use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n@@ -75,7 +75,7 @@ impl<K: DepKind> DepNode<K> {\n \n         #[cfg(debug_assertions)]\n         {\n-            if !kind.can_reconstruct_query_key()\n+            if !kind.fingerprint_style().reconstructible()\n                 && (tcx.sess().opts.debugging_opts.incremental_info\n                     || tcx.sess().opts.debugging_opts.query_dep_graph)\n             {\n@@ -94,7 +94,7 @@ impl<K: DepKind> fmt::Debug for DepNode<K> {\n }\n \n pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n-    fn can_reconstruct_query_key() -> bool;\n+    fn fingerprint_style() -> FingerprintStyle;\n \n     /// This method turns the parameters of a DepNodeConstructor into an opaque\n     /// Fingerprint to be used in DepNode.\n@@ -111,7 +111,7 @@ pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n     /// This method tries to recover the query key from the given `DepNode`,\n     /// something which is needed when forcing `DepNode`s during red-green\n     /// evaluation. The query system will only call this method if\n-    /// `can_reconstruct_query_key()` is `true`.\n+    /// `fingerprint_style()` is not `FingerprintStyle::Opaque`.\n     /// It is always valid to return `None` here, in which case incremental\n     /// compilation will treat the query as having changed instead of forcing it.\n     fn recover(tcx: Ctxt, dep_node: &DepNode<Ctxt::DepKind>) -> Option<Self>;\n@@ -122,8 +122,8 @@ where\n     T: for<'a> HashStable<StableHashingContext<'a>> + fmt::Debug,\n {\n     #[inline]\n-    default fn can_reconstruct_query_key() -> bool {\n-        false\n+    default fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     default fn to_fingerprint(&self, tcx: Ctxt) -> Fingerprint {"}, {"sha": "dcda5728334f2eface4a1f14fdfd5d4351993587", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -50,6 +50,27 @@ impl<T: DepContext> HasDepContext for T {\n     }\n }\n \n+/// Describes the contents of the fingerprint generated by a given query.\n+#[derive(PartialEq, Eq, Copy, Clone)]\n+pub enum FingerprintStyle {\n+    /// The fingerprint is actually a DefPathHash.\n+    DefPathHash,\n+    /// Query key was `()` or equivalent, so fingerprint is just zero.\n+    Unit,\n+    /// Some opaque hash.\n+    Opaque,\n+}\n+\n+impl FingerprintStyle {\n+    #[inline]\n+    pub fn reconstructible(self) -> bool {\n+        match self {\n+            FingerprintStyle::DefPathHash | FingerprintStyle::Unit => true,\n+            FingerprintStyle::Opaque => false,\n+        }\n+    }\n+}\n+\n /// Describe the different families of dependency nodes.\n pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder> + 'static {\n     const NULL: Self;\n@@ -73,5 +94,5 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder>\n     where\n         OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>);\n \n-    fn can_reconstruct_query_key(&self) -> bool;\n+    fn fingerprint_style(&self) -> FingerprintStyle;\n }"}, {"sha": "07d720599759607a25ee5f4c68df663f00c6fc39", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -26,24 +26,15 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n use std::ptr;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct QueryCacheStore<C: QueryCache> {\n     cache: C,\n     shards: Sharded<C::Sharded>,\n-    #[cfg(debug_assertions)]\n-    pub cache_hits: AtomicUsize,\n }\n \n impl<C: QueryCache + Default> Default for QueryCacheStore<C> {\n     fn default() -> Self {\n-        Self {\n-            cache: C::default(),\n-            shards: Default::default(),\n-            #[cfg(debug_assertions)]\n-            cache_hits: AtomicUsize::new(0),\n-        }\n+        Self { cache: C::default(), shards: Default::default() }\n     }\n }\n \n@@ -377,10 +368,6 @@ where\n         if unlikely!(tcx.profiler().enabled()) {\n             tcx.profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n         tcx.dep_graph().read_index(index);\n         on_hit(value)\n     })\n@@ -429,10 +416,6 @@ where\n             if unlikely!(tcx.dep_context().profiler().enabled()) {\n                 tcx.dep_context().profiler().query_cache_hit(index.into());\n             }\n-            #[cfg(debug_assertions)]\n-            {\n-                cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-            }\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n \n             (v, Some(index))\n@@ -540,7 +523,7 @@ where\n         // We always expect to find a cached result for things that\n         // can be forced from `DepNode`.\n         debug_assert!(\n-            !dep_node.kind.can_reconstruct_query_key() || result.is_some(),\n+            !dep_node.kind.fingerprint_style().reconstructible() || result.is_some(),\n             \"missing on-disk cache entry for {:?}\",\n             dep_node\n         );\n@@ -705,10 +688,6 @@ where\n         if unlikely!(tcx.dep_context().profiler().enabled()) {\n             tcx.dep_context().profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n     });\n \n     let lookup = match cached {\n@@ -778,7 +757,7 @@ where\n         return false;\n     }\n \n-    if !<Q::Key as DepNodeParams<CTX::DepContext>>::can_reconstruct_query_key() {\n+    if !<Q::Key as DepNodeParams<CTX::DepContext>>::fingerprint_style().reconstructible() {\n         return false;\n     }\n "}, {"sha": "515b2c3fd27909d0d72bdb4c838591a0d0d1593a", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -9,7 +9,6 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use rustc_ast::unwrap_or;\n use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -349,10 +348,10 @@ impl<'a> Resolver<'a> {\n             if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {\n                 continue;\n             }\n-            let module = unwrap_or!(\n-                single_import.imported_module.get(),\n-                return Err((Undetermined, Weak::No))\n-            );\n+            let module = match single_import.imported_module.get() {\n+                Some(x) => x,\n+                None => return Err((Undetermined, Weak::No)),\n+            };\n             let ident = match single_import.kind {\n                 ImportKind::Single { source, .. } => source,\n                 _ => unreachable!(),"}, {"sha": "6671c7c0fa60ca18d15472ef72157f6b54a86a9f", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -500,8 +500,8 @@ impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n         d.read_seq(|d, len| {\n             assert!(len == N);\n             let mut v = [0u8; N];\n-            for i in 0..len {\n-                v[i] = d.read_seq_elt(|d| Decodable::decode(d))?;\n+            for x in &mut v {\n+                *x = d.read_seq_elt(|d| Decodable::decode(d))?;\n             }\n             Ok(v)\n         })"}, {"sha": "6c889e88a592d49237446947818ee7ddb8bf40b9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -816,6 +816,7 @@ symbols! {\n         mem_size_of,\n         mem_size_of_val,\n         mem_uninitialized,\n+        mem_variant_count,\n         mem_zeroed,\n         member_constraints,\n         memory,\n@@ -893,6 +894,7 @@ symbols! {\n         nomem,\n         non_ascii_idents,\n         non_exhaustive,\n+        non_exhaustive_omitted_patterns_lint,\n         non_modrs_mods,\n         none_error,\n         nontemporal_store,"}, {"sha": "d230f77bde284bb72b6a8e7056e2e2809cb21f6c", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+// This target is for uclibc Linux on ARMv7 without NEON or\n+// thumb-mode. See the thumbv7neon variant for enabling both.\n+\n+pub fn target() -> Target {\n+    let base = super::linux_uclibc_base::opts();\n+    Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+\n+        options: TargetOptions {\n+            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            mcount: \"_mcount\".to_string(),\n+            abi: \"eabihf\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "ff5dfa3f746254b0364c4faf37b17f81e941346b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -952,6 +952,8 @@ supported_targets! {\n     (\"bpfel-unknown-none\", bpfel_unknown_none),\n \n     (\"armv6k-nintendo-3ds\", armv6k_nintendo_3ds),\n+\n+    (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n }\n \n /// Warnings encountered when parsing the target `json`."}, {"sha": "1193d10d6a7d730e8631ecfa1c8bbb826baee67d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -278,14 +278,14 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n                 self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_expr(self, expr)\n                 }\n             }\n \n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n                 self.is_poly |= pat.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_pat(self, pat);\n                 }\n             }\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n         visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n         debug!(\"AbstractConstBuilder: is_poly={}\", is_poly_vis.is_poly);\n-        if is_poly_vis.is_poly == false {\n+        if !is_poly_vis.is_poly {\n             return Ok(None);\n         }\n "}, {"sha": "1a8f863952e6ad5cddaabc3247c5864edac6b354", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -704,7 +704,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n                 .collect();\n \n-        never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::Send).unwrap());\n+        if let Some(def_id) = self.tcx.get_diagnostic_item(sym::Send) {\n+            never_suggest_borrow.push(def_id);\n+        }\n \n         let param_env = obligation.param_env;\n         let trait_ref = poly_trait_ref.skip_binder();"}, {"sha": "2fa6c0c02597b77ebef3d29585b04f825ab7c46f", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -83,10 +83,10 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     ) -> EvaluationResult {\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n-            Err(OverflowError::Cannonical) => {\n+            Err(OverflowError::Canonical) => {\n                 let mut selcx = SelectionContext::with_query_mode(&self, TraitQueryMode::Standard);\n                 selcx.evaluate_root_obligation(obligation).unwrap_or_else(|r| match r {\n-                    OverflowError::Cannonical => {\n+                    OverflowError::Canonical => {\n                         span_bug!(\n                             obligation.cause.span,\n                             \"Overflow should be caught earlier in standard query mode: {:?}, {:?}\","}, {"sha": "0f6e2e0be52b74a076a18019fe8d48272f7599e0", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -161,7 +161,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))\n                 }\n                 Ok(_) => Ok(None),\n-                Err(OverflowError::Cannonical) => Err(Overflow),\n+                Err(OverflowError::Canonical) => Err(Overflow),\n                 Err(OverflowError::ErrorReporting) => Err(ErrorReporting),\n             })\n             .flat_map(Result::transpose)"}, {"sha": "85502a399dedac0bbc74781160255accebbba09d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -900,7 +900,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.candidate_from_obligation(stack) {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n             Ok(None) => Ok(EvaluatedToAmbig),\n-            Err(Overflow) => Err(OverflowError::Cannonical),\n+            Err(Overflow) => Err(OverflowError::Canonical),\n             Err(ErrorReporting) => Err(OverflowError::ErrorReporting),\n             Err(..) => Ok(EvaluatedToErr),\n         }\n@@ -1064,7 +1064,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     self.infcx.report_overflow_error(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n-                    return Err(OverflowError::Cannonical);\n+                    return Err(OverflowError::Canonical);\n                 }\n             }\n         }"}, {"sha": "e24f699adf6b398d9ec8ee263fa037f6a532752f", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -892,7 +892,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n                 ty::BoundRegionKind::BrNamed(def_id, _name) => {\n-                    if self.named_parameters.iter().find(|d| **d == def_id).is_none() {\n+                    if !self.named_parameters.iter().any(|d| *d == def_id) {\n                         self.named_parameters.push(def_id);\n                     }\n                 }"}, {"sha": "51bbcbebcdc0b30dbbb1b2ac2e3baccfc488b4b3", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let obligation = Obligation::new(\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n-                            predicate.clone(),\n+                            *predicate,\n                         );\n                         let result = self.infcx.evaluate_obligation(&obligation);\n                         self.tcx"}, {"sha": "78849b276d6bfb80f610c574a021f4b7efb91d3a", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -431,7 +431,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         .sess\n                         .source_map()\n                         .span_to_snippet(self.expr.span)\n-                        .map_or(false, |snip| snip.starts_with(\"(\"));\n+                        .map_or(false, |snip| snip.starts_with('('));\n \n                     // Very crude check to see whether the expression must be wrapped\n                     // in parentheses for the suggestion to work (issue #89497)."}, {"sha": "3846aad2cfc103e2447cb27de49bea72afb9a23d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1887,7 +1887,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n         let expr_snippet =\n             self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or(String::new());\n-        let is_wrapped = expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\");\n+        let is_wrapped = expr_snippet.starts_with('(') && expr_snippet.ends_with(')');\n         let after_open = expr.span.lo() + rustc_span::BytePos(1);\n         let before_close = expr.span.hi() - rustc_span::BytePos(1);\n "}, {"sha": "6eeb28e32f1e996b99432b3b2016d8e9881d0c25", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -753,17 +753,27 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n             let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n \n+            debug!(\"impl_ty: {:?}\", impl_ty);\n+\n             // Determine the receiver type that the method itself expects.\n-            let xform_tys = self.xform_self_ty(&item, impl_ty, impl_substs);\n+            let (xform_self_ty, xform_ret_ty) = self.xform_self_ty(&item, impl_ty, impl_substs);\n+            debug!(\"xform_self_ty: {:?}, xform_ret_ty: {:?}\", xform_self_ty, xform_ret_ty);\n \n             // We can't use normalize_associated_types_in as it will pollute the\n             // fcx's fulfillment context after this probe is over.\n+            // Note: we only normalize `xform_self_ty` here since the normalization\n+            // of the return type can lead to inference results that prohibit\n+            // valid canidates from being found, see issue #85671\n+            // FIXME Postponing the normalization of the return type likely only hides a deeper bug,\n+            // which might be caused by the `param_env` itself. The clauses of the `param_env`\n+            // maybe shouldn't include `Param`s, but rather fresh variables or be canonicalized,\n+            // see isssue #89650\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n             let selcx = &mut traits::SelectionContext::new(self.fcx);\n-            let traits::Normalized { value: (xform_self_ty, xform_ret_ty), obligations } =\n-                traits::normalize(selcx, self.param_env, cause, xform_tys);\n+            let traits::Normalized { value: xform_self_ty, obligations } =\n+                traits::normalize(selcx, self.param_env, cause, xform_self_ty);\n             debug!(\n-                \"assemble_inherent_impl_probe: xform_self_ty = {:?}/{:?}\",\n+                \"assemble_inherent_impl_probe after normalization: xform_self_ty = {:?}/{:?}\",\n                 xform_self_ty, xform_ret_ty\n             );\n \n@@ -1420,6 +1430,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             };\n \n             let mut result = ProbeResult::Match;\n+            let mut xform_ret_ty = probe.xform_ret_ty;\n+            debug!(?xform_ret_ty);\n+\n             let selcx = &mut traits::SelectionContext::new(self);\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n@@ -1428,7 +1441,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // match as well (or at least may match, sometimes we\n             // don't have enough information to fully evaluate).\n             match probe.kind {\n-                InherentImplCandidate(substs, ref ref_obligations) => {\n+                InherentImplCandidate(ref substs, ref ref_obligations) => {\n+                    // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n+                    // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n+                    // for why this is necessary\n+                    let traits::Normalized {\n+                        value: normalized_xform_ret_ty,\n+                        obligations: normalization_obligations,\n+                    } = traits::normalize(selcx, self.param_env, cause.clone(), probe.xform_ret_ty);\n+                    xform_ret_ty = normalized_xform_ret_ty;\n+                    debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n+\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_def_id = probe.item.container.id();\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n@@ -1442,7 +1465,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())\n-                        .chain(ref_obligations.iter().cloned());\n+                        .chain(ref_obligations.iter().cloned())\n+                        .chain(normalization_obligations.into_iter());\n+\n                     // Evaluate those obligations to see if they might possibly hold.\n                     for o in candidate_obligations {\n                         let o = self.resolve_vars_if_possible(o);\n@@ -1527,9 +1552,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             if let ProbeResult::Match = result {\n-                if let (Some(return_ty), Some(xform_ret_ty)) =\n-                    (self.return_type, probe.xform_ret_ty)\n-                {\n+                if let (Some(return_ty), Some(xform_ret_ty)) = (self.return_type, xform_ret_ty) {\n                     let xform_ret_ty = self.resolve_vars_if_possible(xform_ret_ty);\n                     debug!(\n                         \"comparing return_ty {:?} with xform ret ty {:?}\",\n@@ -1669,6 +1692,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.static_candidates.push(source);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn xform_self_ty(\n         &self,\n         item: &ty::AssocItem,\n@@ -1683,9 +1707,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn xform_method_sig(&self, method: DefId, substs: SubstsRef<'tcx>) -> ty::FnSig<'tcx> {\n         let fn_sig = self.tcx.fn_sig(method);\n-        debug!(\"xform_self_ty(fn_sig={:?}, substs={:?})\", fn_sig, substs);\n+        debug!(?fn_sig);\n \n         assert!(!substs.has_escaping_bound_vars());\n "}, {"sha": "79443010fbb3d78bdc14388feb44cb4e38ed2440", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n-                self.link_match(discr, &arms[..]);\n+                self.link_match(discr, arms);\n \n                 intravisit::walk_expr(self, expr);\n             }"}, {"sha": "3a10988bba0b9db381587f40fcd0bd39cb33f91d", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -65,6 +65,7 @@ use std::iter;\n enum PlaceAncestryRelation {\n     Ancestor,\n     Descendant,\n+    SamePlace,\n     Divergent,\n }\n \n@@ -564,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for possible_ancestor in min_cap_list.iter_mut() {\n                     match determine_place_ancestry_relation(&place, &possible_ancestor.place) {\n                         // current place is descendant of possible_ancestor\n-                        PlaceAncestryRelation::Descendant => {\n+                        PlaceAncestryRelation::Descendant | PlaceAncestryRelation::SamePlace => {\n                             ancestor_found = true;\n                             let backup_path_expr_id = possible_ancestor.info.path_expr_id;\n \n@@ -2278,15 +2279,17 @@ fn determine_place_ancestry_relation(\n     let projections_b = &place_b.projections;\n \n     let same_initial_projections =\n-        iter::zip(projections_a, projections_b).all(|(proj_a, proj_b)| proj_a == proj_b);\n+        iter::zip(projections_a, projections_b).all(|(proj_a, proj_b)| proj_a.kind == proj_b.kind);\n \n     if same_initial_projections {\n+        use std::cmp::Ordering;\n+\n         // First min(n, m) projections are the same\n         // Select Ancestor/Descendant\n-        if projections_b.len() >= projections_a.len() {\n-            PlaceAncestryRelation::Ancestor\n-        } else {\n-            PlaceAncestryRelation::Descendant\n+        match projections_b.len().cmp(&projections_a.len()) {\n+            Ordering::Greater => PlaceAncestryRelation::Ancestor,\n+            Ordering::Equal => PlaceAncestryRelation::SamePlace,\n+            Ordering::Less => PlaceAncestryRelation::Descendant,\n         }\n     } else {\n         PlaceAncestryRelation::Divergent"}, {"sha": "0373035a09ad80606117228d074bcfadf3f8b22a", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 58, "deletions": 45, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -3,6 +3,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_index::vec::IndexVec;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n use rustc_trait_selection::traits::{self, SkipLeakCheck};\n@@ -158,22 +159,26 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                     // This is advantageous to running the algorithm over the\n                     // entire graph when there are many connected regions.\n \n+                    rustc_index::newtype_index! {\n+                        pub struct RegionId {\n+                            ENCODABLE = custom\n+                        }\n+                    }\n                     struct ConnectedRegion {\n                         idents: SmallVec<[Symbol; 8]>,\n                         impl_blocks: FxHashSet<usize>,\n                     }\n-                    // Highest connected region id\n-                    let mut highest_region_id = 0;\n+                    let mut connected_regions: IndexVec<RegionId, _> = Default::default();\n+                    // Reverse map from the Symbol to the connected region id.\n                     let mut connected_region_ids = FxHashMap::default();\n-                    let mut connected_regions = FxHashMap::default();\n \n                     for (i, &(&_impl_def_id, impl_items)) in impls_items.iter().enumerate() {\n                         if impl_items.len() == 0 {\n                             continue;\n                         }\n                         // First obtain a list of existing connected region ids\n                         let mut idents_to_add = SmallVec::<[Symbol; 8]>::new();\n-                        let ids = impl_items\n+                        let mut ids = impl_items\n                             .in_definition_order()\n                             .filter_map(|item| {\n                                 let entry = connected_region_ids.entry(item.ident.name);\n@@ -184,62 +189,64 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                                     None\n                                 }\n                             })\n-                            .collect::<FxHashSet<usize>>();\n-                        match ids.len() {\n-                            0 | 1 => {\n-                                let id_to_set = if ids.is_empty() {\n-                                    // Create a new connected region\n-                                    let region = ConnectedRegion {\n+                            .collect::<SmallVec<[RegionId; 8]>>();\n+                        // Sort the id list so that the algorithm is deterministic\n+                        ids.sort_unstable();\n+                        let ids = ids;\n+                        match &ids[..] {\n+                            // Create a new connected region\n+                            [] => {\n+                                let id_to_set = connected_regions.next_index();\n+                                // Update the connected region ids\n+                                for ident in &idents_to_add {\n+                                    connected_region_ids.insert(*ident, id_to_set);\n+                                }\n+                                connected_regions.insert(\n+                                    id_to_set,\n+                                    ConnectedRegion {\n                                         idents: idents_to_add,\n                                         impl_blocks: std::iter::once(i).collect(),\n-                                    };\n-                                    connected_regions.insert(highest_region_id, region);\n-                                    (highest_region_id, highest_region_id += 1).0\n-                                } else {\n-                                    // Take the only id inside the list\n-                                    let id_to_set = *ids.iter().next().unwrap();\n-                                    let region = connected_regions.get_mut(&id_to_set).unwrap();\n-                                    region.impl_blocks.insert(i);\n-                                    region.idents.extend_from_slice(&idents_to_add);\n-                                    id_to_set\n-                                };\n-                                let (_id, region) = connected_regions.iter().next().unwrap();\n+                                    },\n+                                );\n+                            }\n+                            // Take the only id inside the list\n+                            &[id_to_set] => {\n+                                let region = connected_regions[id_to_set].as_mut().unwrap();\n+                                region.impl_blocks.insert(i);\n+                                region.idents.extend_from_slice(&idents_to_add);\n                                 // Update the connected region ids\n-                                for ident in region.idents.iter() {\n+                                for ident in &idents_to_add {\n                                     connected_region_ids.insert(*ident, id_to_set);\n                                 }\n                             }\n-                            _ => {\n-                                // We have multiple connected regions to merge.\n-                                // In the worst case this might add impl blocks\n-                                // one by one and can thus be O(n^2) in the size\n-                                // of the resulting final connected region, but\n-                                // this is no issue as the final step to check\n-                                // for overlaps runs in O(n^2) as well.\n-\n-                                // Take the smallest id from the list\n-                                let id_to_set = *ids.iter().min().unwrap();\n-\n-                                // Sort the id list so that the algorithm is deterministic\n-                                let mut ids = ids.into_iter().collect::<SmallVec<[usize; 8]>>();\n-                                ids.sort_unstable();\n-\n-                                let mut region = connected_regions.remove(&id_to_set).unwrap();\n-                                region.idents.extend_from_slice(&idents_to_add);\n+                            // We have multiple connected regions to merge.\n+                            // In the worst case this might add impl blocks\n+                            // one by one and can thus be O(n^2) in the size\n+                            // of the resulting final connected region, but\n+                            // this is no issue as the final step to check\n+                            // for overlaps runs in O(n^2) as well.\n+                            &[id_to_set, ..] => {\n+                                let mut region = connected_regions.remove(id_to_set).unwrap();\n                                 region.impl_blocks.insert(i);\n+                                region.idents.extend_from_slice(&idents_to_add);\n+                                // Update the connected region ids\n+                                for ident in &idents_to_add {\n+                                    connected_region_ids.insert(*ident, id_to_set);\n+                                }\n \n+                                // Remove other regions from ids.\n                                 for &id in ids.iter() {\n                                     if id == id_to_set {\n                                         continue;\n                                     }\n-                                    let r = connected_regions.remove(&id).unwrap();\n-                                    // Update the connected region ids\n+                                    let r = connected_regions.remove(id).unwrap();\n                                     for ident in r.idents.iter() {\n                                         connected_region_ids.insert(*ident, id_to_set);\n                                     }\n                                     region.idents.extend_from_slice(&r.idents);\n                                     region.impl_blocks.extend(r.impl_blocks);\n                                 }\n+\n                                 connected_regions.insert(id_to_set, region);\n                             }\n                         }\n@@ -254,16 +261,22 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                             let avg = impls.len() / connected_regions.len();\n                             let s = connected_regions\n                                 .iter()\n-                                .map(|r| r.1.impl_blocks.len() as isize - avg as isize)\n+                                .flatten()\n+                                .map(|r| r.impl_blocks.len() as isize - avg as isize)\n                                 .map(|v| v.abs() as usize)\n                                 .sum::<usize>();\n                             s / connected_regions.len()\n                         },\n-                        connected_regions.iter().map(|r| r.1.impl_blocks.len()).max().unwrap()\n+                        connected_regions\n+                            .iter()\n+                            .flatten()\n+                            .map(|r| r.impl_blocks.len())\n+                            .max()\n+                            .unwrap()\n                     );\n                     // List of connected regions is built. Now, run the overlap check\n                     // for each pair of impl blocks in the same connected region.\n-                    for (_id, region) in connected_regions.into_iter() {\n+                    for region in connected_regions.into_iter().flatten() {\n                         let mut impl_blocks =\n                             region.impl_blocks.into_iter().collect::<SmallVec<[usize; 8]>>();\n                         impl_blocks.sort_unstable();"}, {"sha": "971776c882a157e4946fbe714bb2a54cafb375fd", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -63,6 +63,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(iter_zip)]\n+#![feature(min_specialization)]\n #![feature(nll)]\n #![feature(try_blocks)]\n #![feature(never_type)]"}, {"sha": "bd4f52560421b9edd0b5935058ebcd4e6474e2da", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -187,6 +187,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(x: T) -> Self {\n         box x\n     }\n@@ -211,6 +212,7 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         Self::new_uninit_in(Global)\n@@ -237,6 +239,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)\n     }\n@@ -245,6 +248,7 @@ impl<T> Box<T> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n@@ -339,6 +343,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_in(x: T, alloc: A) -> Self {\n         let mut boxed = Self::new_uninit_in(alloc);\n@@ -395,6 +400,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n@@ -459,6 +465,7 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -503,6 +510,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n@@ -561,6 +569,7 @@ impl<T> Box<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity(len).into_box(len) }\n     }\n@@ -585,6 +594,7 @@ impl<T> Box<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n     }\n@@ -681,6 +691,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_in(len, alloc).into_box(len) }\n     }\n@@ -708,6 +719,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_zeroed_in(len, alloc).into_box(len) }\n     }\n@@ -1277,6 +1289,7 @@ impl<T> From<T> for Box<T> {\n     /// from the stack into it.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let x = 5;\n     /// let boxed = Box::new(5);\n@@ -1330,6 +1343,12 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl<T: Copy> From<Cow<'_, [T]>> for Box<[T]> {\n+    /// Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and copies the\n+    /// underlying slice. Otherwise, it will try to reuse the owned\n+    /// `Vec`'s allocation.\n     #[inline]\n     fn from(cow: Cow<'_, [T]>) -> Box<[T]> {\n         match cow {\n@@ -1348,6 +1367,7 @@ impl From<&str> for Box<str> {\n     /// and performs a copy of `s`.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<str> = Box::from(\"hello\");\n     /// println!(\"{}\", boxed);\n@@ -1361,6 +1381,29 @@ impl From<&str> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, str>> for Box<str> {\n+    /// Converts a `Cow<'_, str>` into a `Box<str>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and copies the\n+    /// underlying `str`. Otherwise, it will try to reuse the owned\n+    /// `String`'s allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let unboxed = Cow::Borrowed(\"hello\");\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let unboxed = Cow::Owned(\"hello\".to_string());\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n     #[inline]\n     fn from(cow: Cow<'_, str>) -> Box<str> {\n         match cow {\n@@ -1403,6 +1446,7 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// This conversion moves the array to newly heap-allocated memory.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<[u8]> = Box::from([4, 2]);\n     /// println!(\"{:?}\", boxed);\n@@ -1416,6 +1460,15 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     type Error = Box<[T]>;\n \n+    /// Attempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n+    ///\n+    /// The conversion occurs in-place and does not require a\n+    /// new memory allocation.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns the old `Box<[T]>` in the `Err` variant if\n+    /// `boxed_slice.len()` does not equal `N`.\n     fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {\n         if boxed_slice.len() == N {\n             Ok(unsafe { Box::from_raw(Box::into_raw(boxed_slice) as *mut [T; N]) })"}, {"sha": "9bded6c0f1cf213f5212c6a426f5614da9598277", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -364,6 +364,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> BinaryHeap<T> {\n         BinaryHeap { data: vec![] }\n     }\n@@ -383,6 +384,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> BinaryHeap<T> {\n         BinaryHeap { data: Vec::with_capacity(capacity) }\n     }\n@@ -848,6 +850,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), vec![5, 4]);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n     pub fn into_iter_sorted(self) -> IntoIterSorted<T> {\n         IntoIterSorted { inner: self }\n@@ -1006,6 +1009,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// io::sink().write(heap.as_slice()).unwrap();\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.data.as_slice()\n@@ -1028,6 +1032,7 @@ impl<T> BinaryHeap<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n     pub fn into_vec(self) -> Vec<T> {\n         self.into()"}, {"sha": "fa86e611565e64b0b7ab0a5cb7099bd385c3fa5c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -502,6 +502,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }\n@@ -1264,6 +1265,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -1286,6 +1288,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }"}, {"sha": "3e9048b17688fb78f7d589c0dac2ba352a773415", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -448,6 +448,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// }\n     /// assert_eq!(map[\"poneyland\"], 22);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.handle.into_val_mut()"}, {"sha": "173960341f859b5acab3b8b8f094de9c6b1ee36e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1755,20 +1755,20 @@ fn test_send() {\n #[test]\n fn test_ord_absence() {\n     fn map<K>(mut map: BTreeMap<K, ()>) {\n-        map.is_empty();\n-        map.len();\n+        let _ = map.is_empty();\n+        let _ = map.len();\n         map.clear();\n-        map.iter();\n-        map.iter_mut();\n-        map.keys();\n-        map.values();\n-        map.values_mut();\n+        let _ = map.iter();\n+        let _ = map.iter_mut();\n+        let _ = map.keys();\n+        let _ = map.values();\n+        let _ = map.values_mut();\n         if true {\n-            map.into_values();\n+            let _ = map.into_values();\n         } else if true {\n-            map.into_iter();\n+            let _ = map.into_iter();\n         } else {\n-            map.into_keys();\n+            let _ = map.into_keys();\n         }\n     }\n "}, {"sha": "d732f65b0d05f152174ab10f005a2acc6b7c5b35", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -248,6 +248,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n@@ -534,6 +535,7 @@ impl<T> BTreeSet<T> {\n     /// b.insert(1);\n     /// assert_eq!(a.is_disjoint(&b), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -559,6 +561,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(4);\n     /// assert_eq!(set.is_subset(&sup), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_subset(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -638,6 +641,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(2);\n     /// assert_eq!(set.is_superset(&sub), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_superset(&self, other: &BTreeSet<T>) -> bool\n     where"}, {"sha": "ea010c1f89d24ee1d9820933860cf340d4b9f488", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -417,6 +417,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         LinkedList { head: None, tail: None, len: 0, marker: PhantomData }\n     }\n@@ -1384,6 +1385,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// The lifetime of the returned `Cursor` is bound to that of the\n     /// `CursorMut`, which means it cannot outlive the `CursorMut` and that the\n     /// `CursorMut` is frozen for the lifetime of the `Cursor`.\n+    #[must_use]\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn as_cursor(&self) -> Cursor<'_, T> {\n         Cursor { list: self.list, current: self.current, index: self.index }"}, {"sha": "09ae1f7eebd09b8b6165fffb5247ba574c3a2ddf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -475,6 +475,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> VecDeque<T> {\n         VecDeque::new_in(Global)\n     }\n@@ -490,6 +491,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> VecDeque<T> {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "89ab11fb97e1035d06030d256c08542b8ed40227", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -69,7 +69,13 @@\n )]\n #![cfg_attr(\n     not(bootstrap),\n-    doc(cfg_hide(not(test), not(any(test, bootstrap)), target_has_atomic = \"ptr\"))\n+    doc(cfg_hide(\n+        not(test),\n+        not(any(test, bootstrap)),\n+        any(not(feature = \"miri-test-libstd\"), test, doctest),\n+        no_global_oom_handling,\n+        target_has_atomic = \"ptr\"\n+    ))\n )]\n #![no_std]\n #![needs_allocator]"}, {"sha": "75dbd4678bb473c39572372c5265a74ae4976ba0", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -69,6 +69,7 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n+    #[must_use]\n     pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n@@ -87,13 +88,15 @@ impl<T> RawVec<T, Global> {\n     ///\n     /// Aborts on OOM.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n     /// Like `with_capacity`, but guarantees the buffer is zeroed.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity_zeroed(capacity: usize) -> Self {\n         Self::with_capacity_zeroed_in(capacity, Global)"}, {"sha": "493cf3117edf6a8b113f3772900c644c23facb47", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -452,6 +452,7 @@ impl<T> Rc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -484,6 +485,7 @@ impl<T> Rc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -587,6 +589,7 @@ impl<T> Rc<T> {\n     /// `value` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n@@ -658,6 +661,7 @@ impl<T> Rc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe { Rc::from_ptr(Rc::allocate_for_slice(len)) }\n     }\n@@ -684,6 +688,7 @@ impl<T> Rc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -2044,6 +2049,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\") }\n     }\n@@ -2087,6 +2093,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ptr::null\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n@@ -2130,6 +2137,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// [`from_raw`]: Weak::from_raw\n     /// [`as_ptr`]: Weak::as_ptr\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();\n@@ -2222,6 +2230,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Rc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         let inner = self.inner()?;"}, {"sha": "860f21085f32542ffc1854ba2dfe55bea5ee2106", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -662,6 +662,8 @@ impl [u8] {\n     ///\n     /// [`make_ascii_uppercase`]: slice::make_ascii_uppercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the uppercase bytes as a new Vec, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> Vec<u8> {\n@@ -680,6 +682,8 @@ impl [u8] {\n     ///\n     /// [`make_ascii_lowercase`]: slice::make_ascii_lowercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the lowercase bytes as a new Vec, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> Vec<u8> {"}, {"sha": "ac7f23044565617ac79cd5c2881af3009cb3ee23", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -367,6 +367,8 @@ impl str {\n     /// assert_eq!(new_year, new_year.to_lowercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the lowercase string as a new String, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_lowercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n@@ -447,6 +449,8 @@ impl str {\n     /// assert_eq!(\"TSCH\u00dcSS\", s.to_uppercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the uppercase string as a new String, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_uppercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n@@ -534,6 +538,7 @@ impl str {\n     /// [`make_ascii_uppercase`]: str::make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> String {\n@@ -565,6 +570,7 @@ impl str {\n     /// [`make_ascii_lowercase`]: str::make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> String {\n@@ -589,6 +595,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[must_use]\n #[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }"}, {"sha": "f479bf231b37681402bfb410926c81ec6d835716", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -378,6 +378,7 @@ impl String {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }\n     }\n@@ -422,6 +423,7 @@ impl String {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }\n     }\n@@ -676,6 +678,7 @@ impl String {\n     /// let rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };\n     /// assert_eq!(rebuilt, \"hello\");\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n     pub fn into_raw_parts(self) -> (*mut u8, usize, usize) {\n         self.vec.into_raw_parts()\n@@ -761,6 +764,7 @@ impl String {\n     /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {\n         String { vec: bytes }\n@@ -781,6 +785,7 @@ impl String {\n     /// assert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.vec\n@@ -798,6 +803,7 @@ impl String {\n     /// assert_eq!(\"foo\", s.as_str());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_str(&self) -> &str {\n         self\n@@ -818,6 +824,7 @@ impl String {\n     /// assert_eq!(\"FOOBAR\", s_mut_str);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_mut_str(&mut self) -> &mut str {\n         self\n@@ -1158,6 +1165,7 @@ impl String {\n     /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.vec\n@@ -1738,6 +1746,7 @@ impl String {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n@@ -1760,6 +1769,7 @@ impl FromUtf8Error {\n     ///\n     /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n@@ -1783,6 +1793,7 @@ impl FromUtf8Error {\n     ///\n     /// assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes\n@@ -2775,6 +2786,7 @@ impl<'a> Drain<'a> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_str(), \"bc\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n     pub fn as_str(&self) -> &str {\n         self.iter.as_str()"}, {"sha": "b75e9a2f3c71ea77b0c1cd1ac717020317e79d45", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -146,7 +146,7 @@ macro_rules! acquire {\n /// use std::sync::Arc;\n ///\n /// let my_arc = Arc::new(());\n-/// Arc::downgrade(&my_arc);\n+/// let my_weak = Arc::downgrade(&my_arc);\n /// ```\n ///\n /// `Arc<T>`'s implementations of traits like `Clone` may also be called using\n@@ -448,6 +448,7 @@ impl<T> Arc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -480,6 +481,7 @@ impl<T> Arc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -494,6 +496,7 @@ impl<T> Arc<T> {\n     /// `data` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n@@ -662,6 +665,7 @@ impl<T> Arc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe { Arc::from_ptr(Arc::allocate_for_slice(len)) }\n     }\n@@ -688,6 +692,7 @@ impl<T> Arc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -735,6 +740,7 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<T> {\n         Arc::from_inner(mem::ManuallyDrop::new(self).ptr.cast())\n@@ -776,6 +782,7 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<[T]> {\n         unsafe { Arc::from_ptr(mem::ManuallyDrop::new(self).ptr.as_ptr() as _) }\n@@ -820,6 +827,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(x_ptr, Arc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n@@ -890,6 +898,8 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// let weak_five = Arc::downgrade(&five);\n     /// ```\n+    #[must_use = \"this returns a new `Weak` pointer, \\\n+                  without modifying the original `Arc`\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         // This Relaxed is OK because we're checking the value in the CAS\n@@ -1678,6 +1688,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\") }\n     }\n@@ -1716,6 +1727,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: core::ptr::null \"ptr::null\"\n+    #[must_use]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n@@ -1759,6 +1771,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// [`from_raw`]: Weak::from_raw\n     /// [`as_ptr`]: Weak::as_ptr\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();\n@@ -1852,6 +1865,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Arc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Arc<T>> {\n         // We use a CAS loop to increment the strong count instead of a"}, {"sha": "e643940d017ba690b5873a84ac36de9d86e47a95", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -52,6 +52,7 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_slice(), &['b', 'c']);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.iter.as_slice()"}, {"sha": "a12acb1a1c07f7da512844658aa3992f18418209", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -420,6 +420,7 @@ impl<T> Vec<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         Vec { buf: RawVec::NEW, len: 0 }\n     }\n@@ -464,6 +465,7 @@ impl<T> Vec<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "d5e1ec083f95d24488381be269ddb2191980063f", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,6 +1,7 @@\n // wasm32 does not support benches (no time).\n #![cfg(not(target_arch = \"wasm32\"))]\n #![feature(flt2dec)]\n+#![feature(int_log)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "6a219bcdd55aa3f6cee93da89a30f3ad6f915754", "filename": "library/core/benches/num/int_log/mod.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,58 @@\n+use rand::Rng;\n+use test::{black_box, Bencher};\n+\n+macro_rules! int_log_bench {\n+    ($t:ty, $predictable:ident, $random:ident, $random_small:ident) => {\n+        #[bench]\n+        fn $predictable(bench: &mut Bencher) {\n+            bench.iter(|| {\n+                for n in 0..(<$t>::BITS / 8) {\n+                    for i in 1..=(100 as $t) {\n+                        let x = black_box(i << (n * 8));\n+                        black_box(x.log10());\n+                    }\n+                }\n+            });\n+        }\n+\n+        #[bench]\n+        fn $random(bench: &mut Bencher) {\n+            let mut rng = rand::thread_rng();\n+            /* Exponentially distributed random numbers from the whole range of the type.  */\n+            let numbers: Vec<$t> = (0..256)\n+                .map(|_| {\n+                    let x = rng.gen::<$t>() >> rng.gen_range(0, <$t>::BITS);\n+                    if x != 0 { x } else { 1 }\n+                })\n+                .collect();\n+            bench.iter(|| {\n+                for x in &numbers {\n+                    black_box(black_box(x).log10());\n+                }\n+            });\n+        }\n+\n+        #[bench]\n+        fn $random_small(bench: &mut Bencher) {\n+            let mut rng = rand::thread_rng();\n+            /* Exponentially distributed random numbers from the range 0..256.  */\n+            let numbers: Vec<$t> = (0..256)\n+                .map(|_| {\n+                    let x = (rng.gen::<u8>() >> rng.gen_range(0, u8::BITS)) as $t;\n+                    if x != 0 { x } else { 1 }\n+                })\n+                .collect();\n+            bench.iter(|| {\n+                for x in &numbers {\n+                    black_box(black_box(x).log10());\n+                }\n+            });\n+        }\n+    };\n+}\n+\n+int_log_bench! {u8, u8_log10_predictable, u8_log10_random, u8_log10_random_small}\n+int_log_bench! {u16, u16_log10_predictable, u16_log10_random, u16_log10_random_small}\n+int_log_bench! {u32, u32_log10_predictable, u32_log10_random, u32_log10_random_small}\n+int_log_bench! {u64, u64_log10_predictable, u64_log10_random, u64_log10_random_small}\n+int_log_bench! {u128, u128_log10_predictable, u128_log10_random, u128_log10_random_small}"}, {"sha": "2f9cad2725d7f093b1c8f8192730597853bed1df", "filename": "library/core/benches/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,6 @@\n mod dec2flt;\n mod flt2dec;\n+mod int_log;\n \n use std::str::FromStr;\n use test::Bencher;"}, {"sha": "780f82d8afaee1fbd50b0944123a5fd976aede17", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -94,6 +94,7 @@ impl Layout {\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is greater than zero.\n@@ -111,6 +112,8 @@ impl Layout {\n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use = \"this returns the minimum alignment, \\\n+                  without modifying the layout\"]\n     #[inline]\n     pub const fn align(&self) -> usize {\n         self.align_.get()\n@@ -119,6 +122,7 @@ impl Layout {\n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout_const_new\", since = \"1.42.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n@@ -227,6 +231,8 @@ impl Layout {\n     /// satisfy this constraint is to ensure `align <= self.align()`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+    #[must_use = \"this returns the padding needed, \\\n+                  without modifying the `Layout`\"]\n     #[inline]\n     pub const fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -260,6 +266,8 @@ impl Layout {\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[must_use = \"this returns a new `Layout`, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());"}, {"sha": "8d5c0510404fb2d7743b8c547895acc5b5b1e2cd", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 103, "deletions": 17, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -20,6 +20,69 @@ mod iter;\n #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n pub use iter::IntoIter;\n \n+/// Creates an array `[T; N]` where each array element `T` is returned by the `cb` call.\n+///\n+/// # Arguments\n+///\n+/// * `cb`: Callback where the passed argument is the current array index.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// #![feature(array_from_fn)]\n+///\n+/// let array = core::array::from_fn(|i| i);\n+/// assert_eq!(array, [0, 1, 2, 3, 4]);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"array_from_fn\", issue = \"89379\")]\n+pub fn from_fn<F, T, const N: usize>(mut cb: F) -> [T; N]\n+where\n+    F: FnMut(usize) -> T,\n+{\n+    let mut idx = 0;\n+    [(); N].map(|_| {\n+        let res = cb(idx);\n+        idx += 1;\n+        res\n+    })\n+}\n+\n+/// Creates an array `[T; N]` where each fallible array element `T` is returned by the `cb` call.\n+/// Unlike `core::array::from_fn`, where the element creation can't fail, this version will return an error\n+/// if any element creation was unsuccessful.\n+///\n+/// # Arguments\n+///\n+/// * `cb`: Callback where the passed argument is the current array index.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// #![feature(array_from_fn)]\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// enum SomeError {\n+///     Foo,\n+/// }\n+///\n+/// let array = core::array::try_from_fn(|i| Ok::<_, SomeError>(i));\n+/// assert_eq!(array, Ok([0, 1, 2, 3, 4]));\n+///\n+/// let another_array = core::array::try_from_fn::<SomeError, _, (), 2>(|_| Err(SomeError::Foo));\n+/// assert_eq!(another_array, Err(SomeError::Foo));\n+/// ```\n+#[inline]\n+#[unstable(feature = \"array_from_fn\", issue = \"89379\")]\n+pub fn try_from_fn<E, F, T, const N: usize>(cb: F) -> Result<[T; N], E>\n+where\n+    F: FnMut(usize) -> Result<T, E>,\n+{\n+    // SAFETY: we know for certain that this iterator will yield exactly `N`\n+    // items.\n+    unsafe { collect_into_array_rslt_unchecked(&mut (0..N).map(cb)) }\n+}\n+\n /// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n pub fn from_ref<T>(s: &T) -> &[T; 1] {\n@@ -448,13 +511,15 @@ impl<T, const N: usize> [T; N] {\n ///\n /// It is up to the caller to guarantee that `iter` yields at least `N` items.\n /// Violating this condition causes undefined behavior.\n-unsafe fn collect_into_array_unchecked<I, const N: usize>(iter: &mut I) -> [I::Item; N]\n+unsafe fn collect_into_array_rslt_unchecked<E, I, T, const N: usize>(\n+    iter: &mut I,\n+) -> Result<[T; N], E>\n where\n     // Note: `TrustedLen` here is somewhat of an experiment. This is just an\n     // internal function, so feel free to remove if this bound turns out to be a\n     // bad idea. In that case, remember to also remove the lower bound\n     // `debug_assert!` below!\n-    I: Iterator + TrustedLen,\n+    I: Iterator<Item = Result<T, E>> + TrustedLen,\n {\n     debug_assert!(N <= iter.size_hint().1.unwrap_or(usize::MAX));\n     debug_assert!(N <= iter.size_hint().0);\n@@ -463,6 +528,21 @@ where\n     unsafe { collect_into_array(iter).unwrap_unchecked() }\n }\n \n+// Infallible version of `collect_into_array_rslt_unchecked`.\n+unsafe fn collect_into_array_unchecked<I, const N: usize>(iter: &mut I) -> [I::Item; N]\n+where\n+    I: Iterator + TrustedLen,\n+{\n+    let mut map = iter.map(Ok::<_, Infallible>);\n+\n+    // SAFETY: The same safety considerations w.r.t. the iterator length\n+    // apply for `collect_into_array_rslt_unchecked` as for\n+    // `collect_into_array_unchecked`\n+    match unsafe { collect_into_array_rslt_unchecked(&mut map) } {\n+        Ok(array) => array,\n+    }\n+}\n+\n /// Pulls `N` items from `iter` and returns them as an array. If the iterator\n /// yields fewer than `N` items, `None` is returned and all already yielded\n /// items are dropped.\n@@ -473,43 +553,49 @@ where\n ///\n /// If `iter.next()` panicks, all items already yielded by the iterator are\n /// dropped.\n-fn collect_into_array<I, const N: usize>(iter: &mut I) -> Option<[I::Item; N]>\n+fn collect_into_array<E, I, T, const N: usize>(iter: &mut I) -> Option<Result<[T; N], E>>\n where\n-    I: Iterator,\n+    I: Iterator<Item = Result<T, E>>,\n {\n     if N == 0 {\n         // SAFETY: An empty array is always inhabited and has no validity invariants.\n-        return unsafe { Some(mem::zeroed()) };\n+        return unsafe { Some(Ok(mem::zeroed())) };\n     }\n \n-    struct Guard<T, const N: usize> {\n-        ptr: *mut T,\n+    struct Guard<'a, T, const N: usize> {\n+        array_mut: &'a mut [MaybeUninit<T>; N],\n         initialized: usize,\n     }\n \n-    impl<T, const N: usize> Drop for Guard<T, N> {\n+    impl<T, const N: usize> Drop for Guard<'_, T, N> {\n         fn drop(&mut self) {\n             debug_assert!(self.initialized <= N);\n \n-            let initialized_part = crate::ptr::slice_from_raw_parts_mut(self.ptr, self.initialized);\n-\n-            // SAFETY: this raw slice will contain only initialized objects.\n+            // SAFETY: this slice will contain only initialized objects.\n             unsafe {\n-                crate::ptr::drop_in_place(initialized_part);\n+                crate::ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(\n+                    &mut self.array_mut.get_unchecked_mut(..self.initialized),\n+                ));\n             }\n         }\n     }\n \n     let mut array = MaybeUninit::uninit_array::<N>();\n-    let mut guard: Guard<_, N> =\n-        Guard { ptr: MaybeUninit::slice_as_mut_ptr(&mut array), initialized: 0 };\n+    let mut guard = Guard { array_mut: &mut array, initialized: 0 };\n+\n+    while let Some(item_rslt) = iter.next() {\n+        let item = match item_rslt {\n+            Err(err) => {\n+                return Some(Err(err));\n+            }\n+            Ok(elem) => elem,\n+        };\n \n-    while let Some(item) = iter.next() {\n         // SAFETY: `guard.initialized` starts at 0, is increased by one in the\n         // loop and the loop is aborted once it reaches N (which is\n         // `array.len()`).\n         unsafe {\n-            array.get_unchecked_mut(guard.initialized).write(item);\n+            guard.array_mut.get_unchecked_mut(guard.initialized).write(item);\n         }\n         guard.initialized += 1;\n \n@@ -520,7 +606,7 @@ where\n             // SAFETY: the condition above asserts that all elements are\n             // initialized.\n             let out = unsafe { MaybeUninit::array_assume_init(array) };\n-            return Some(out);\n+            return Some(Ok(out));\n         }\n     }\n "}, {"sha": "2ca077a98f8dc7500d4569274eb7143a80aee59c", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -349,7 +349,7 @@ impl<T> Cell<T> {\n         drop(old);\n     }\n \n-    /// Swaps the values of two Cells.\n+    /// Swaps the values of two `Cell`s.\n     /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.\n     ///\n     /// # Examples"}, {"sha": "72921414fb3f29aa37905382b2751e41ff87eece", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -48,6 +48,7 @@ use super::MAX;\n /// assert_eq!(None, c);\n /// ```\n #[doc(alias = \"chr\")]\n+#[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_u32(i: u32) -> Option<char> {\n@@ -88,6 +89,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// assert_eq!('\u2764', c);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n@@ -319,6 +321,7 @@ impl fmt::Display for CharTryFromError {\n /// let c = char::from_digit(1, 37);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {"}, {"sha": "3e7c5b3189cb5ece4084dc6c49d3995412419481", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -136,6 +136,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n@@ -177,6 +178,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n@@ -230,9 +232,10 @@ impl char {\n     /// use std::char;\n     ///\n     /// // this panics\n-    /// char::from_digit(1, 37);\n+    /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)\n@@ -377,6 +380,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\u2764'.escape_unicode().to_string(), \"\\\\u{2764}\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode {\n@@ -453,6 +458,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\\n'.escape_debug().to_string(), \"\\\\n\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n@@ -507,6 +514,8 @@ impl char {\n     /// ```\n     /// assert_eq!('\"'.escape_default().to_string(), \"\\\\\\\"\");\n     /// ```\n+    #[must_use = \"this returns the escaped char as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n@@ -692,6 +701,7 @@ impl char {\n     /// // love is many things, but it is not alphabetic\n     /// assert!(!c.is_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphabetic(self) -> bool {\n@@ -724,6 +734,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_lowercase());\n     /// assert!(!' '.is_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_lowercase(self) -> bool {\n@@ -756,6 +767,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_uppercase());\n     /// assert!(!' '.is_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_uppercase(self) -> bool {\n@@ -784,6 +796,7 @@ impl char {\n     ///\n     /// assert!(!'\u8d8a'.is_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_whitespace(self) -> bool {\n@@ -812,6 +825,7 @@ impl char {\n     /// assert!('\u0648'.is_alphanumeric());\n     /// assert!('\u85cf'.is_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphanumeric(self) -> bool {\n@@ -837,6 +851,7 @@ impl char {\n     /// assert!('\u009c'.is_control());\n     /// assert!(!'q'.is_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_control(self) -> bool {\n@@ -852,6 +867,7 @@ impl char {\n     /// [uax29]: https://www.unicode.org/reports/tr29/\n     /// [ucd]: https://www.unicode.org/reports/tr44/\n     /// [`DerivedCoreProperties.txt`]: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\n+    #[must_use]\n     #[inline]\n     pub(crate) fn is_grapheme_extended(self) -> bool {\n         unicode::Grapheme_Extend(self)\n@@ -881,6 +897,7 @@ impl char {\n     /// assert!(!'\u0648'.is_numeric());\n     /// assert!(!'\u85cf'.is_numeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_numeric(self) -> bool {\n@@ -949,6 +966,8 @@ impl char {\n     /// // convert into themselves.\n     /// assert_eq!('\u5c71'.to_lowercase().to_string(), \"\u5c71\");\n     /// ```\n+    #[must_use = \"this returns the lowercase character as a new iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_lowercase(self) -> ToLowercase {\n@@ -1039,6 +1058,8 @@ impl char {\n     /// ```\n     ///\n     /// holds across languages.\n+    #[must_use = \"this returns the uppercase character as a new iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_uppercase(self) -> ToUppercase {\n@@ -1056,6 +1077,7 @@ impl char {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\")]\n     #[inline]\n@@ -1085,6 +1107,7 @@ impl char {\n     ///\n     /// [`make_ascii_uppercase()`]: #method.make_ascii_uppercase\n     /// [`to_uppercase()`]: #method.to_uppercase\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -1118,6 +1141,7 @@ impl char {\n     ///\n     /// [`make_ascii_lowercase()`]: #method.make_ascii_lowercase\n     /// [`to_lowercase()`]: #method.to_lowercase\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -1231,6 +1255,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1264,6 +1289,7 @@ impl char {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1297,6 +1323,7 @@ impl char {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1333,6 +1360,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1366,6 +1394,7 @@ impl char {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1402,6 +1431,7 @@ impl char {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1439,6 +1469,7 @@ impl char {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1472,6 +1503,7 @@ impl char {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1522,6 +1554,7 @@ impl char {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1557,6 +1590,7 @@ impl char {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]"}, {"sha": "83a73d9cbe506de1e602abbd3e51983fd6223216", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -273,6 +273,7 @@ pub trait AsMut<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into(self) -> T;\n }\n@@ -367,6 +368,7 @@ pub trait Into<T>: Sized {\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[lang = \"from\"]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(_: T) -> Self;\n }"}, {"sha": "b8ad7720e0c554590226f08f3d3da7dcbc4b307e", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -491,6 +491,7 @@ impl<'a> Arguments<'a> {\n     /// ```\n     #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n     #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"none\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_str(&self) -> Option<&'static str> {\n         match (self.pieces, self.args) {"}, {"sha": "540160bc4c2a4daadc4d040c58dc529b3d758fe4", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -153,9 +153,21 @@ mod sip;\n /// Thankfully, you won't need to worry about upholding this property when\n /// deriving both [`Eq`] and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\n ///\n+/// ## Prefix collisions\n+///\n+/// Implementations of `hash` should ensure that the data they\n+/// pass to the `Hasher` are prefix-free. That is,\n+/// unequal values should cause two different sequences of values to be written,\n+/// and neither of the two sequences should be a prefix of the other.\n+///\n+/// For example, the standard implementation of [`Hash` for `&str`][impl] passes an extra\n+/// `0xFF` byte to the `Hasher` so that the values `(\"ab\", \"c\")` and `(\"a\",\n+/// \"bc\")` hash differently.\n+///\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [`hash`]: Hash::hash\n+/// [impl]: ../../std/primitive.str.html#impl-Hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Hash\"]\n pub trait Hash {"}, {"sha": "b9443e30074b00fc9ef5cc288120e6f5abba425f", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -157,6 +157,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n     }\n@@ -168,6 +169,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24 { hasher: Hasher::new_with_keys(key0, key1) })\n     }"}, {"sha": "d109141216aefb90a498acf146e4e9b25fe04cf6", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -83,6 +83,7 @@ impl<T> From<T> for OnceCell<T> {\n impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }"}, {"sha": "7bc641c52767d6a19f3961f478f1adee6d98e30a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -64,6 +64,8 @@\n     not(bootstrap),\n     doc(cfg_hide(\n         not(test),\n+        any(not(feature = \"miri-test-libstd\"), test, doctest),\n+        no_fp_fmt_parse,\n         target_pointer_width = \"16\",\n         target_pointer_width = \"32\",\n         target_pointer_width = \"64\","}, {"sha": "e5c3fafe5f1f0a1b097eecc34af57f8ee92430d9", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -30,7 +30,8 @@ use crate::hash::Hasher;\n /// [arc]: ../../std/sync/struct.Arc.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Send\")]\n+#[cfg_attr(all(not(test), bootstrap), rustc_diagnostic_item = \"send_trait\")]\n+#[cfg_attr(all(not(test), not(bootstrap)), rustc_diagnostic_item = \"Send\")]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\""}, {"sha": "624e87955022f50177c025ee425c87c64055ac45", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -291,6 +291,7 @@ impl<T> MaybeUninit<T> {\n     /// [`assume_init`]: MaybeUninit::assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use = \"use `forget` to avoid running Drop code\"]\n     #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n@@ -312,6 +313,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"maybe_uninit_uninit\"]\n     pub const fn uninit() -> MaybeUninit<T> {\n@@ -349,6 +351,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[must_use]\n     #[inline(always)]\n     pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n@@ -391,6 +394,7 @@ impl<T> MaybeUninit<T> {\n     /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_diagnostic_item = \"maybe_uninit_zeroed\"]\n     pub fn zeroed() -> MaybeUninit<T> {"}, {"sha": "894ae10e1b4bae80af9b05996d8e6aa04e10c2c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1053,6 +1053,7 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n #[inline(always)]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+#[rustc_diagnostic_item = \"mem_variant_count\"]\n pub const fn variant_count<T>() -> usize {\n     intrinsics::variant_count::<T>()\n }"}, {"sha": "ad8106df198da3005c3b4e0692aef6e259b86213", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -436,6 +436,7 @@ impl f32 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -467,6 +468,7 @@ impl f32 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -488,6 +490,7 @@ impl f32 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -515,6 +518,7 @@ impl f32 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -541,6 +545,7 @@ impl f32 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -587,6 +592,7 @@ impl f32 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -604,6 +610,7 @@ impl f32 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -636,6 +643,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 {\n@@ -653,6 +662,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 {\n@@ -712,6 +723,8 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -740,6 +753,8 @@ impl f32 {\n     /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -786,6 +801,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n@@ -802,6 +818,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_be_bytes();\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -818,6 +836,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -847,6 +867,8 @@ impl f32 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -864,6 +886,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -879,6 +902,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -905,6 +929,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "6a48101e04fdac695166d174e2484cbc73d60946", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -435,6 +435,7 @@ impl f64 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -466,6 +467,7 @@ impl f64 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -487,6 +489,7 @@ impl f64 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -514,6 +517,7 @@ impl f64 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -540,6 +544,7 @@ impl f64 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -586,13 +591,15 @@ impl f64 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n     #[inline]\n@@ -611,13 +618,15 @@ impl f64 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_negative(self) -> bool {\n         self.to_bits() & 0x8000_0000_0000_0000 != 0\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n     #[inline]\n@@ -649,6 +658,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f64 {\n@@ -667,6 +678,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f64 {\n@@ -726,6 +739,8 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -754,6 +769,8 @@ impl f64 {\n     /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -800,6 +817,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n@@ -816,6 +834,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_be_bytes();\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -832,6 +852,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -861,6 +883,8 @@ impl f64 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -878,6 +902,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -893,6 +918,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -919,6 +945,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}, {"sha": "8cff266642fef674f715e6f8f6cafd99df4dac92", "filename": "library/core/src/num/fmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -31,8 +31,10 @@ impl<'a> Part<'a> {\n                     } else {\n                         3\n                     }\n+                } else if v < 10_000 {\n+                    4\n                 } else {\n-                    if v < 10_000 { 4 } else { 5 }\n+                    5\n                 }\n             }\n             Part::Copy(buf) => buf.len(),"}, {"sha": "398bb07a07e4c103e3ec81d3566daa5259b6dee0", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 51, "deletions": 56, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,76 +1,71 @@\n mod unchecked {\n     // 0 < val <= u8::MAX\n     pub const fn u8(val: u8) -> u32 {\n-        if val >= 100 {\n-            2\n-        } else if val >= 10 {\n-            1\n-        } else {\n-            0\n-        }\n+        let val = val as u32;\n+\n+        // For better performance, avoid branches by assembling the solution\n+        // in the bits above the low 8 bits.\n+\n+        // Adding c1 to val gives 10 in the top bits for val < 10, 11 for val >= 10\n+        const C1: u32 = 0b11_00000000 - 10; // 758\n+        // Adding c2 to val gives 01 in the top bits for val < 100, 10 for val >= 100\n+        const C2: u32 = 0b10_00000000 - 100; // 412\n+\n+        // Value of top bits:\n+        //            +c1  +c2  1&2\n+        //     0..=9   10   01   00 = 0\n+        //   10..=99   11   01   01 = 1\n+        // 100..=255   11   10   10 = 2\n+        ((val + C1) & (val + C2)) >> 8\n     }\n \n-    // 0 < val <= u16::MAX\n-    pub const fn u16(val: u16) -> u32 {\n-        if val >= 10_000 {\n-            4\n-        } else if val >= 1000 {\n-            3\n-        } else if val >= 100 {\n-            2\n-        } else if val >= 10 {\n-            1\n-        } else {\n-            0\n-        }\n+    // 0 < val < 100_000\n+    const fn less_than_5(val: u32) -> u32 {\n+        // Similar to u8, when adding one of these constants to val,\n+        // we get two possible bit patterns above the low 17 bits,\n+        // depending on whether val is below or above the threshold.\n+        const C1: u32 = 0b011_00000000000000000 - 10; // 393206\n+        const C2: u32 = 0b100_00000000000000000 - 100; // 524188\n+        const C3: u32 = 0b111_00000000000000000 - 1000; // 916504\n+        const C4: u32 = 0b100_00000000000000000 - 10000; // 514288\n+\n+        // Value of top bits:\n+        //                +c1  +c2  1&2  +c3  +c4  3&4   ^\n+        //         0..=9  010  011  010  110  011  010  000 = 0\n+        //       10..=99  011  011  011  110  011  010  001 = 1\n+        //     100..=999  011  100  000  110  011  010  010 = 2\n+        //   1000..=9999  011  100  000  111  011  011  011 = 3\n+        // 10000..=99999  011  100  000  111  100  100  100 = 4\n+        (((val + C1) & (val + C2)) ^ ((val + C3) & (val + C4))) >> 17\n     }\n \n-    // 0 < val < 100_000_000\n-    const fn less_than_8(mut val: u32) -> u32 {\n-        let mut log = 0;\n-        if val >= 10_000 {\n-            val /= 10_000;\n-            log += 4;\n-        }\n-        log + if val >= 1000 {\n-            3\n-        } else if val >= 100 {\n-            2\n-        } else if val >= 10 {\n-            1\n-        } else {\n-            0\n-        }\n+    // 0 < val <= u16::MAX\n+    pub const fn u16(val: u16) -> u32 {\n+        less_than_5(val as u32)\n     }\n \n     // 0 < val <= u32::MAX\n     pub const fn u32(mut val: u32) -> u32 {\n         let mut log = 0;\n-        if val >= 100_000_000 {\n-            val /= 100_000_000;\n-            log += 8;\n-        }\n-        log + less_than_8(val)\n-    }\n-\n-    // 0 < val < 10_000_000_000_000_000\n-    const fn less_than_16(mut val: u64) -> u32 {\n-        let mut log = 0;\n-        if val >= 100_000_000 {\n-            val /= 100_000_000;\n-            log += 8;\n+        if val >= 100_000 {\n+            val /= 100_000;\n+            log += 5;\n         }\n-        log + less_than_8(val as u32)\n+        log + less_than_5(val)\n     }\n \n     // 0 < val <= u64::MAX\n     pub const fn u64(mut val: u64) -> u32 {\n         let mut log = 0;\n-        if val >= 10_000_000_000_000_000 {\n-            val /= 10_000_000_000_000_000;\n-            log += 16;\n+        if val >= 10_000_000_000 {\n+            val /= 10_000_000_000;\n+            log += 10;\n+        }\n+        if val >= 100_000 {\n+            val /= 100_000;\n+            log += 5;\n         }\n-        log + less_than_16(val)\n+        log + less_than_5(val as u32)\n     }\n \n     // 0 < val <= u128::MAX\n@@ -79,13 +74,13 @@ mod unchecked {\n         if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n             val /= 100_000_000_000_000_000_000_000_000_000_000;\n             log += 32;\n-            return log + less_than_8(val as u32);\n+            return log + u32(val as u32);\n         }\n         if val >= 10_000_000_000_000_000 {\n             val /= 10_000_000_000_000_000;\n             log += 16;\n         }\n-        log + less_than_16(val as u64)\n+        log + u64(val as u64)\n     }\n \n     // 0 < val <= i8::MAX"}, {"sha": "0bdc933013791b2c017ae20a4f0c3f48b61b0f4d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 75, "deletions": 19, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -81,6 +81,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n \n@@ -95,6 +97,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -113,6 +117,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             (self as $UnsignedT).leading_zeros()\n@@ -131,6 +137,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             (self as $UnsignedT).trailing_zeros()\n@@ -149,6 +157,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (self as $UnsignedT).leading_ones()\n@@ -167,6 +177,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (self as $UnsignedT).trailing_ones()\n@@ -236,6 +248,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n@@ -257,8 +271,9 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             (self as $UnsignedT).reverse_bits() as Self\n         }\n@@ -282,6 +297,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -313,6 +329,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -344,6 +361,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -375,6 +394,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -689,6 +710,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -801,6 +824,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_abs(self) -> Option<Self> {\n             if self.is_negative() {\n@@ -959,6 +984,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn saturating_neg(self) -> Self {\n             intrinsics::saturating_sub(0, self)\n@@ -980,6 +1007,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn saturating_abs(self) -> Self {\n             if self.is_negative() {\n@@ -1308,6 +1337,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1390,6 +1421,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         #[inline]\n         pub const fn wrapping_abs(self) -> Self {\n@@ -1415,6 +1448,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n         #[rustc_const_stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn unsigned_abs(self) -> $UnsignedT {\n              self.wrapping_abs() as $UnsignedT\n@@ -1781,6 +1816,8 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             if unlikely!(self == Self::MIN) {\n@@ -1855,6 +1892,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_abs(self) -> (Self, bool) {\n             (self.wrapping_abs(), self == Self::MIN)\n@@ -2199,7 +2238,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -2208,8 +2248,8 @@ macro_rules! int_impl {\n         /// # Panics\n         ///\n         /// When the number is zero, or if the base is not at least 2; it\n-        /// panics in debug mode and the return value is wrapped to 0 in release\n-        /// mode (the only situation in which the method can return 0).\n+        /// panics in debug mode and the return value is 0 in release\n+        /// mode.\n         ///\n         /// # Examples\n         ///\n@@ -2219,7 +2259,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2237,13 +2277,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -2253,7 +2292,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2271,13 +2310,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -2287,7 +2325,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2305,7 +2343,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero, or if the base is not at least 2.\n         ///\n@@ -2321,7 +2360,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -2345,7 +2384,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///\n@@ -2357,7 +2396,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -2369,7 +2408,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///\n@@ -2381,7 +2420,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -2412,6 +2451,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[allow(unused_attributes)]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn abs(self) -> Self {\n@@ -2443,6 +2484,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n             if self < other {\n@@ -2482,6 +2525,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn signum(self) -> Self {\n             match self {\n@@ -2502,6 +2547,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!(10\", stringify!($SelfT), \".is_positive());\")]\n         #[doc = concat!(\"assert!(!(-10\", stringify!($SelfT), \").is_positive());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2518,6 +2564,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!((-10\", stringify!($SelfT), \").is_negative());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_negative());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2536,6 +2583,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2554,6 +2603,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2588,6 +2639,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2620,6 +2673,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2650,6 +2704,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2691,6 +2746,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "18ebf1cbb1063e51fe3a9970612054d075f2f390", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -259,6 +259,7 @@ impl u8 {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.43.0\")]\n     #[inline]\n@@ -282,6 +283,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_uppercase`]: Self::make_ascii_uppercase\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -306,6 +308,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_lowercase`]: Self::make_ascii_lowercase\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -417,6 +420,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -450,6 +454,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -483,6 +488,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -519,6 +525,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -552,6 +559,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -588,6 +596,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -625,6 +634,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -658,6 +668,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -708,6 +719,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -743,6 +755,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -769,6 +782,8 @@ impl u8 {\n     /// assert_eq!(\"\\\\\\\\\", b'\\\\'.escape_ascii().to_string());\n     /// assert_eq!(\"\\\\x9d\", b'\\x9d'.escape_ascii().to_string());\n     /// ```\n+    #[must_use = \"this returns the escaped byte as an iterator, \\\n+                  without modifying the original\"]\n     #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n     #[inline]\n     pub fn escape_ascii(&self) -> ascii::EscapeDefault {"}, {"sha": "89fd9fbaf455d6b3f2cfc3f0ea8bd32e7d3a68cf", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -50,6 +50,7 @@ macro_rules! nonzero_integers {\n                 /// The value must not be zero.\n                 #[$stability]\n                 #[$const_new_unchecked_stability]\n+                #[must_use]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n@@ -59,6 +60,7 @@ macro_rules! nonzero_integers {\n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n                 #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n+                #[must_use]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -198,6 +200,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn leading_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n@@ -220,6 +224,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn trailing_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n@@ -315,6 +321,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_add(self, other: $Int) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_add(other) {\n@@ -348,6 +356,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_add(self, other: $Int) -> $Ty {\n                     // SAFETY: $Int::saturating_add returns $Int::MAX on overflow\n@@ -378,6 +388,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_add(self, other: $Int) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -410,6 +422,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_next_power_of_two(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_next_power_of_two() {\n@@ -460,6 +474,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn abs(self) -> $Ty {\n                     // SAFETY: This cannot overflow to zero.\n@@ -490,6 +506,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_abs(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_abs() {\n@@ -524,6 +542,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn overflowing_abs(self) -> ($Ty, bool) {\n                     let (nz, flag) = self.get().overflowing_abs();\n@@ -562,6 +582,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -595,6 +617,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn wrapping_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -628,6 +652,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn unsigned_abs(self) -> $Uty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -675,6 +701,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_mul(self, other: $Ty) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_mul(other.get()) {\n@@ -709,6 +737,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: saturating_mul returns u*::MAX on overflow\n@@ -749,6 +779,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -778,6 +810,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_pow(self, other: u32) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_pow(other) {\n@@ -820,6 +854,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_pow(self, other: u32) -> $Ty {\n                     // SAFETY: saturating_pow returns u*::MAX on overflow\n@@ -878,6 +914,7 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n                 #[doc = concat!(\"let ten = std::num::\", stringify!($Ty), \"::new(10).unwrap();\")]\n                 /// assert!(!ten.is_power_of_two());\n                 /// ```\n+                #[must_use]\n                 #[unstable(feature = \"nonzero_is_power_of_two\", issue = \"81106\")]\n                 #[inline]\n                 pub const fn is_power_of_two(self) -> bool {"}, {"sha": "c764f420e27399d3a343fb974ec8d94086efad98", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -474,6 +474,8 @@ macro_rules! saturating_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -492,6 +494,8 @@ macro_rules! saturating_int_impl {\n             #[doc = concat!(\"assert_eq!(Saturating(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -512,6 +516,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -538,6 +544,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_left(n))\n@@ -564,6 +572,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_right(n))\n@@ -588,6 +598,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m, Saturating(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Saturating(self.0.swap_bytes())\n@@ -614,10 +626,11 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n             /// assert_eq!(m, Saturating(-22016));\n             /// ```\n+            #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n-            #[inline]\n-            #[must_use]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn reverse_bits(self) -> Self {\n                 Saturating(self.0.reverse_bits())\n             }\n@@ -644,6 +657,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Saturating(<$t>::from_be(x.0))\n@@ -671,6 +685,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Saturating(<$t>::from_le(x.0))\n@@ -699,6 +714,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_be(self) -> Self {\n                 Saturating(self.0.to_be())\n             }\n@@ -726,6 +743,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_le(self) -> Self {\n                 Saturating(self.0.to_le())\n             }\n@@ -754,6 +773,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn pow(self, exp: u32) -> Self {\n                 Saturating(self.0.saturating_pow(exp))\n             }\n@@ -782,6 +803,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }\n@@ -805,6 +828,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn abs(self) -> Saturating<$t> {\n                 Saturating(self.0.saturating_abs())\n             }\n@@ -829,6 +854,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn signum(self) -> Saturating<$t> {\n                 Saturating(self.0.signum())\n             }\n@@ -847,6 +874,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Saturating(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_positive(self) -> bool {\n@@ -867,6 +895,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_negative(self) -> bool {\n@@ -908,6 +937,8 @@ macro_rules! saturating_int_impl_unsigned {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }\n@@ -925,6 +956,7 @@ macro_rules! saturating_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Saturating(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub fn is_power_of_two(self) -> bool {"}, {"sha": "c3b2ecdb30f5b9c2fbc4365acea8ca80d34401fc", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 70, "deletions": 22, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -80,6 +80,8 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 {\n             intrinsics::ctpop(self as $ActualT) as u32\n@@ -96,6 +98,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -114,6 +118,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             intrinsics::ctlz(self as $ActualT) as u32\n@@ -133,6 +139,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             intrinsics::cttz(self) as u32\n@@ -151,6 +159,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (!self).leading_zeros()\n@@ -170,6 +180,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (!self).trailing_zeros()\n@@ -238,6 +250,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             intrinsics::bswap(self as $ActualT) as Self\n@@ -259,8 +273,9 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             intrinsics::bitreverse(self as $ActualT) as Self\n         }\n@@ -285,6 +300,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -317,6 +333,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -349,6 +366,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -381,6 +400,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -658,7 +679,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -667,8 +689,7 @@ macro_rules! uint_impl {\n         /// # Panics\n         ///\n         /// When the number is negative, zero, or if the base is not at least 2;\n-        /// it panics in debug mode and the return value is wrapped to 0 in\n-        /// release mode (the only situation in which the method can return 0).\n+        /// it panics in debug mode and the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -678,7 +699,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -696,13 +717,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and\n-        /// the return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -712,7 +732,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -730,13 +750,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and the\n-        /// return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// return value is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -746,7 +765,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -764,7 +783,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is zero, or if the base is not at least 2.\n         ///\n@@ -780,7 +800,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -804,7 +824,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -816,7 +836,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -828,7 +848,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -840,7 +860,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -861,6 +881,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -1222,7 +1244,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::wrapping_mul(self, rhs)\n@@ -1347,6 +1369,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1602,6 +1626,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> Self {\n             if mem::size_of::<Self>() == 1 {\n@@ -1776,6 +1802,8 @@ macro_rules! uint_impl {\n         #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             ((!self).wrapping_add(1), self != 0)\n         }\n@@ -1892,7 +1920,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn pow(self, mut exp: u32) -> Self {\n@@ -1989,6 +2017,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n@@ -2010,6 +2040,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n@@ -2087,6 +2119,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert!(16\", stringify!($SelfT), \".is_power_of_two());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_power_of_two());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2120,7 +2153,7 @@ macro_rules! uint_impl {\n         /// Returns the smallest power of two greater than or equal to `self`.\n         ///\n         /// When return value overflows (i.e., `self > (1 << (N-1))` for type\n-        /// `uN`), it panics in debug mode and return value is wrapped to 0 in\n+        /// `uN`), it panics in debug mode and the return value is wrapped to 0 in\n         /// release mode (the only situation in which method can return 0).\n         ///\n         /// # Examples\n@@ -2133,6 +2166,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn next_power_of_two(self) -> Self {\n@@ -2155,6 +2190,8 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn checked_next_power_of_two(self) -> Option<Self> {\n             self.one_less_than_next_power_of_two().checked_add(1)\n         }\n@@ -2177,6 +2214,8 @@ macro_rules! uint_impl {\n         #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                    reason = \"needs decision on wrapping behaviour\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn wrapping_next_power_of_two(self) -> Self {\n             self.one_less_than_next_power_of_two().wrapping_add(1)\n         }\n@@ -2194,6 +2233,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2212,6 +2253,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2244,6 +2287,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n         #[inline]\n@@ -2278,6 +2323,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2308,6 +2354,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2349,6 +2396,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "f387bd5b41cc453ef9cd956af7f5e65341ff06bc", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -469,6 +469,8 @@ macro_rules! wrapping_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -487,6 +489,8 @@ macro_rules! wrapping_int_impl {\n             #[doc = concat!(\"assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -507,6 +511,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -533,6 +539,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_left(n))\n@@ -559,6 +567,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_right(n))\n@@ -583,6 +593,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(m, Wrapping(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Wrapping(self.0.swap_bytes())\n@@ -610,8 +622,9 @@ macro_rules! wrapping_int_impl {\n             /// ```\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n-            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }\n@@ -638,6 +651,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Wrapping(<$t>::from_be(x.0))\n@@ -665,6 +679,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Wrapping(<$t>::from_le(x.0))\n@@ -692,6 +707,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_be(self) -> Self {\n                 Wrapping(self.0.to_be())\n@@ -719,6 +736,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_le(self) -> Self {\n                 Wrapping(self.0.to_le())\n@@ -747,6 +766,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn pow(self, exp: u32) -> Self {\n                 Wrapping(self.0.wrapping_pow(exp))\n@@ -775,6 +796,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(n.leading_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -801,6 +824,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(Wrapping(-128i8).abs().0 as u8, 128u8);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn abs(self) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_abs())\n@@ -825,6 +850,8 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert_eq!(Wrapping(-10\", stringify!($t), \").signum(), Wrapping(-1));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn signum(self) -> Wrapping<$t> {\n                 Wrapping(self.0.signum())\n@@ -844,6 +871,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_positive(self) -> bool {\n@@ -864,6 +892,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_negative(self) -> bool {\n@@ -893,6 +922,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             /// assert_eq!(n.leading_zeros(), 2);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -911,6 +942,7 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Wrapping(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn is_power_of_two(self) -> bool {\n@@ -935,6 +967,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n             pub fn next_power_of_two(self) -> Self {"}, {"sha": "401267f5613ee0c478ec470f4fa7496527004478", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -657,6 +657,7 @@ impl<T> Option<T> {\n     ///\n     /// [&]: reference \"shared reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n         // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n@@ -668,6 +669,7 @@ impl<T> Option<T> {\n     ///\n     /// [&mut]: reference \"mutable reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n         // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`.\n@@ -1473,6 +1475,7 @@ impl<T: Copy> Option<&mut T> {\n     /// let copied = opt_x.copied();\n     /// assert_eq!(copied, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n     pub fn copied(self) -> Option<T> {\n         self.map(|&mut t| t)\n@@ -1492,6 +1495,7 @@ impl<T: Clone> Option<&T> {\n     /// let cloned = opt_x.cloned();\n     /// assert_eq!(cloned, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn cloned(self) -> Option<T> {\n         self.map(|t| t.clone())"}, {"sha": "34fc874ada09b7171017fcf43f9ec3b01462ab31", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -715,6 +715,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub const fn into_ref(self) -> Pin<&'a T> {\n@@ -731,6 +732,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const fn get_mut(self) -> &'a mut T\n@@ -751,6 +753,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const unsafe fn get_unchecked_mut(self) -> &'a mut T {\n@@ -772,6 +775,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// not move out of the argument you receive to the interior function.\n     ///\n     /// [`pin` module]: self#projections-and-structural-pinning\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub unsafe fn map_unchecked_mut<U, F>(self, func: F) -> Pin<&'a mut U>\n     where\n@@ -811,6 +815,7 @@ impl<'a, P: DerefMut> Pin<&'a mut Pin<P>> {\n     /// implementations of `P::DerefMut` are likewise ruled out by the contract of\n     /// `Pin::new_unchecked`.\n     #[unstable(feature = \"pin_deref_mut\", issue = \"86918\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline(always)]\n     pub fn as_deref_mut(self) -> Pin<&'a mut P::Target> {\n         // SAFETY: What we're asserting here is that going from"}, {"sha": "af9daf829740164bb3cba41765427a09fa415d20", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -119,6 +119,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -151,6 +152,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -264,6 +266,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -310,6 +313,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -359,6 +363,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -455,6 +460,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_non_null_ptr(self) -> NonNull<T> {\n@@ -474,6 +480,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_mut_ptr(self) -> *mut T {\n@@ -518,6 +525,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// [valid]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n@@ -579,6 +587,7 @@ impl<T> NonNull<[T]> {\n     /// # Ok::<_, std::alloc::AllocError>(())\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`."}, {"sha": "5baceefb504a50d39a71216be6507d7137ba950f", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -101,6 +101,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -111,6 +112,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -123,6 +125,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -131,6 +134,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Casts to a pointer of another type.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n         // SAFETY: Unique::new_unchecked() creates a new unique and needs"}, {"sha": "cbb5627cef9820b544ee98e3251d58efb65a29db", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -72,6 +72,8 @@ impl [u8] {\n     /// let escaped = s.escape_ascii().to_string();\n     /// assert_eq!(escaped, \"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\");\n     /// ```\n+    #[must_use = \"this returns the escaped bytes as an iterator, \\\n+                  without modifying the original\"]\n     #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n     pub fn escape_ascii(&self) -> EscapeAscii<'_> {\n         EscapeAscii { inner: self.iter().flat_map(EscapeByte) }"}, {"sha": "dbf97851b03e4e78294871ae94ba0d92f9836529", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -124,6 +124,7 @@ impl<'a, T> Iter<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// println!(\"{:?}\", iter.as_slice());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         self.make_slice()\n@@ -267,6 +268,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// // Now slice is \"[2, 2, 3]\":\n     /// println!(\"{:?}\", slice);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         // SAFETY: the iterator was created from a mutable slice with pointer\n@@ -297,6 +299,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// assert_eq!(iter.as_slice(), &[2, 3]);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"slice_iter_mut_as_slice\", since = \"1.53.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.make_slice()\n@@ -1869,6 +1872,7 @@ impl<'a, T> ChunksExactMut<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n@@ -2264,6 +2268,7 @@ impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `N-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n@@ -2875,6 +2880,7 @@ impl<'a, T> RChunksExactMut<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem"}, {"sha": "ed9f49f159611f19702787f29161a3423e5ae731", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -155,6 +155,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n@@ -181,6 +182,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n /// assert_eq!(\"\ud83d\udc96\", heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`"}, {"sha": "94cb81e9d41a1f2543c7b1afab56eccb0692b85d", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -109,6 +109,7 @@ impl<'a> Chars<'a> {\n     /// assert_eq!(chars.as_str(), \"\");\n     /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         // SAFETY: `Chars` is only made from a str, which guarantees the iter is valid UTF-8.\n@@ -185,6 +186,7 @@ impl<'a> CharIndices<'a> {\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         self.iter.as_str()\n@@ -1247,6 +1249,7 @@ impl<'a> SplitWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.inner.iter.as_str()\n@@ -1302,6 +1305,7 @@ impl<'a> SplitAsciiWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         if self.inner.iter.iter.finished {"}, {"sha": "d3c9d21c3c756c0acaec68fa99ad823787d71aef", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -12,10 +12,12 @@ pub struct Utf8Lossy {\n }\n \n impl Utf8Lossy {\n+    #[must_use]\n     pub fn from_str(s: &str) -> &Utf8Lossy {\n         Utf8Lossy::from_bytes(s.as_bytes())\n     }\n \n+    #[must_use]\n     pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n         // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.\n         unsafe { mem::transmute(bytes) }"}, {"sha": "607a0179ff4b9a515ca69bd02522291ea1e42788", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -188,6 +188,7 @@ impl str {\n     /// // third byte of `\u8001`\n     /// assert!(!s.is_char_boundary(8));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n@@ -229,6 +230,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n     pub const fn as_bytes(&self) -> &[u8] {\n@@ -273,6 +275,7 @@ impl str {\n     /// assert_eq!(\"\ud83c\udf54\u2208\ud83c\udf0f\", s);\n     /// ```\n     #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n         // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`\n@@ -303,6 +306,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n@@ -317,6 +321,7 @@ impl str {\n     /// It is your responsibility to make sure that the string slice only gets\n     /// modified in a way that it remains valid UTF-8.\n     #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n         self as *mut str as *mut u8\n@@ -798,6 +803,8 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[must_use = \"this returns the split string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     #[inline]\n     pub fn split_whitespace(&self) -> SplitWhitespace<'_> {\n@@ -839,6 +846,8 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[must_use = \"this returns the split string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n     #[inline]\n     pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace<'_> {\n@@ -914,6 +923,8 @@ impl str {\n     ///\n     /// assert!(utf16_len <= utf8_len);\n     /// ```\n+    #[must_use = \"this returns the encoded string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n     pub fn encode_utf16(&self) -> EncodeUtf16<'_> {\n         EncodeUtf16 { chars: self.chars(), extra: 0 }\n@@ -1353,6 +1364,9 @@ impl str {\n     ///\n     /// let v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n+    ///\n+    /// let v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\n+    /// assert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1396,6 +1410,9 @@ impl str {\n     ///\n     /// let v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n+    ///\n+    /// let v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\n+    /// assert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1524,7 +1541,8 @@ impl str {\n     #[inline]\n     pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {\n         let (start, end) = delimiter.into_searcher(self).next_match()?;\n-        Some((&self[..start], &self[end..]))\n+        // SAFETY: `Searcher` is known to return valid indices.\n+        unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }\n     }\n \n     /// Splits the string on the last occurrence of the specified delimiter and\n@@ -1544,7 +1562,8 @@ impl str {\n         P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         let (start, end) = delimiter.into_searcher(self).next_match_back()?;\n-        Some((&self[..start], &self[end..]))\n+        // SAFETY: `Searcher` is known to return valid indices.\n+        unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }\n     }\n \n     /// An iterator over the disjoint matches of a pattern within the given string\n@@ -1840,6 +1859,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea\";\n     /// assert!(Some('\u05e2') == s.trim_left().chars().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n@@ -1882,6 +1903,8 @@ impl str {\n     /// let s = \"\u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_right().chars().rev().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n@@ -2346,6 +2369,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_debug().to_string(), \"\u2764\\\\n!\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_debug(&self) -> EscapeDebug<'_> {\n         let mut chars = self.chars();\n@@ -2390,6 +2415,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_default(&self) -> EscapeDefault<'_> {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n@@ -2426,6 +2453,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_unicode(&self) -> EscapeUnicode<'_> {\n         EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }"}, {"sha": "b07752116e514901435239589cf24c7ffd62ec6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -290,6 +290,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.24.0\")]\n+    #[must_use]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -1392,6 +1393,7 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$stable]\n             #[$const_stable]\n+            #[must_use]\n             pub const fn new(v: $int_type) -> Self {\n                 Self {v: UnsafeCell::new(v)}\n             }"}, {"sha": "71a67a2793a46bfa83331c7a93d6f80d089ec2ef", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -11,5 +11,7 @@ mod wake;\n pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n \n mod ready;\n-#[stable(feature = \"ready_macro\", since = \"1.56.0\")]\n+#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n pub use ready::ready;\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+pub use ready::Ready;"}, {"sha": "80e1458dc9421ba6f42278eec178ad5b05d75cbc", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -3,6 +3,7 @@\n use crate::convert;\n use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n+use crate::task::Ready;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n@@ -92,6 +93,38 @@ impl<T> Poll<T> {\n     pub const fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n+\n+    /// Extracts the successful type of a [`Poll<T>`].\n+    ///\n+    /// When combined with the `?` operator, this function will\n+    /// propagate any [`Poll::Pending`] values to the caller, and\n+    /// extract the `T` from [`Poll::Ready`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(poll_ready)]\n+    ///\n+    /// use std::task::{Context, Poll};\n+    /// use std::future::{self, Future};\n+    /// use std::pin::Pin;\n+    ///\n+    /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n+    ///     let mut fut = future::ready(42);\n+    ///     let fut = Pin::new(&mut fut);\n+    ///\n+    ///     let num = fut.poll(cx).ready()?;\n+    ///     # drop(num);\n+    ///     // ... use num\n+    ///\n+    ///     Poll::Ready(())\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+    pub fn ready(self) -> Ready<T> {\n+        Ready(self)\n+    }\n }\n \n impl<T, E> Poll<Result<T, E>> {"}, {"sha": "174ca67546033d2aa4942b3a03971f8d1c8069b0", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,3 +1,8 @@\n+use core::convert;\n+use core::fmt;\n+use core::ops::{ControlFlow, FromResidual, Try};\n+use core::task::Poll;\n+\n /// Extracts the successful type of a [`Poll<T>`].\n ///\n /// This macro bakes in propagation of [`Pending`] signals by returning early.\n@@ -8,6 +13,8 @@\n /// # Examples\n ///\n /// ```\n+/// #![feature(ready_macro)]\n+///\n /// use std::task::{ready, Context, Poll};\n /// use std::future::{self, Future};\n /// use std::pin::Pin;\n@@ -27,6 +34,7 @@\n /// The `ready!` call expands to:\n ///\n /// ```\n+/// # #![feature(ready_macro)]\n /// # use std::task::{Context, Poll};\n /// # use std::future::{self, Future};\n /// # use std::pin::Pin;\n@@ -45,7 +53,7 @@\n ///     # Poll::Ready(())\n /// # }\n /// ```\n-#[stable(feature = \"ready_macro\", since = \"1.56.0\")]\n+#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro ready($e:expr) {\n     match $e {\n@@ -55,3 +63,55 @@ pub macro ready($e:expr) {\n         }\n     }\n }\n+\n+/// Extracts the successful type of a [`Poll<T>`].\n+///\n+/// See [`Poll::ready`] for details.\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+pub struct Ready<T>(pub(crate) Poll<T>);\n+\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+impl<T> Try for Ready<T> {\n+    type Output = T;\n+    type Residual = Ready<convert::Infallible>;\n+\n+    #[inline]\n+    fn from_output(output: Self::Output) -> Self {\n+        Ready(Poll::Ready(output))\n+    }\n+\n+    #[inline]\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+        match self.0 {\n+            Poll::Ready(v) => ControlFlow::Continue(v),\n+            Poll::Pending => ControlFlow::Break(Ready(Poll::Pending)),\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+impl<T> FromResidual for Ready<T> {\n+    #[inline]\n+    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n+        match residual.0 {\n+            Poll::Pending => Ready(Poll::Pending),\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+impl<T> FromResidual<Ready<convert::Infallible>> for Poll<T> {\n+    #[inline]\n+    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n+        match residual.0 {\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n+impl<T> fmt::Debug for Ready<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"Ready\").finish()\n+    }\n+}"}, {"sha": "620bff538799425c28ba158723712b072beca39f", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -39,6 +39,7 @@ impl RawWaker {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n@@ -158,6 +159,7 @@ pub struct Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new `Context` from a `&Waker`.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n@@ -251,6 +253,7 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }"}, {"sha": "5a74f39e8bc8b58469e6214909e99d92272ab797", "filename": "library/core/src/time.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -181,6 +181,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[must_use]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -203,6 +204,7 @@ impl Duration {\n     /// assert_eq!(0, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n@@ -222,6 +224,7 @@ impl Duration {\n     /// assert_eq!(569_000_000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_millis(millis: u64) -> Duration {\n@@ -244,6 +247,7 @@ impl Duration {\n     /// assert_eq!(2000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_micros(micros: u64) -> Duration {\n@@ -266,6 +270,7 @@ impl Duration {\n     /// assert_eq!(123, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n@@ -291,6 +296,7 @@ impl Duration {\n     /// assert!(!Duration::from_nanos(1).is_zero());\n     /// assert!(!Duration::from_secs(1).is_zero());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[rustc_const_stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[inline]\n@@ -328,6 +334,7 @@ impl Duration {\n     /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n         self.secs\n@@ -411,6 +418,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -428,6 +436,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -445,6 +454,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n@@ -464,6 +474,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n@@ -497,6 +509,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_add(self, rhs: Duration) -> Duration {\n@@ -520,6 +534,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n@@ -551,6 +567,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n@@ -574,6 +592,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n@@ -603,6 +623,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_mul(self, rhs: u32) -> Duration {\n@@ -627,6 +649,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n@@ -654,6 +678,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f64(&self) -> f64 {\n@@ -672,6 +697,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f32(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f32(&self) -> f32 {\n@@ -692,6 +718,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n@@ -753,6 +780,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n@@ -814,6 +842,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f64(self, rhs: f64) -> Duration {\n@@ -836,6 +866,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f32(self, rhs: f32) -> Duration {\n@@ -857,6 +889,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f64(self, rhs: f64) -> Duration {\n@@ -880,6 +914,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f32(self, rhs: f32) -> Duration {\n@@ -898,6 +934,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n@@ -916,6 +954,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f32(self, rhs: Duration) -> f32 {"}, {"sha": "1502b3160bc22b104a3552ebc6646f0b9966a3ba", "filename": "library/core/src/unicode/printable.rs", "status": "modified", "additions": 127, "deletions": 116, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -44,10 +44,10 @@ pub(crate) fn is_printable(x: char) -> bool {\n     } else if x < 0x20000 {\n         check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)\n     } else {\n-        if 0x2a6de <= x && x < 0x2a700 {\n+        if 0x2a6e0 <= x && x < 0x2a700 {\n             return false;\n         }\n-        if 0x2b735 <= x && x < 0x2b740 {\n+        if 0x2b739 <= x && x < 0x2b740 {\n             return false;\n         }\n         if 0x2b81e <= x && x < 0x2b820 {\n@@ -77,30 +77,29 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x00, 1),\n     (0x03, 5),\n     (0x05, 6),\n-    (0x06, 3),\n+    (0x06, 2),\n     (0x07, 6),\n-    (0x08, 8),\n+    (0x08, 7),\n     (0x09, 17),\n     (0x0a, 28),\n     (0x0b, 25),\n-    (0x0c, 20),\n+    (0x0c, 26),\n     (0x0d, 16),\n     (0x0e, 13),\n     (0x0f, 4),\n     (0x10, 3),\n     (0x12, 18),\n     (0x13, 9),\n     (0x16, 1),\n-    (0x17, 5),\n-    (0x18, 2),\n+    (0x17, 4),\n+    (0x18, 1),\n     (0x19, 3),\n     (0x1a, 7),\n+    (0x1b, 1),\n     (0x1c, 2),\n-    (0x1d, 1),\n     (0x1f, 22),\n     (0x20, 3),\n     (0x2b, 3),\n-    (0x2c, 2),\n     (0x2d, 11),\n     (0x2e, 1),\n     (0x30, 3),\n@@ -112,56 +111,57 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0xab, 8),\n     (0xfa, 2),\n     (0xfb, 5),\n-    (0xfd, 4),\n+    (0xfd, 2),\n     (0xfe, 3),\n     (0xff, 9),\n ];\n #[rustfmt::skip]\n const SINGLETONS0L: &[u8] = &[\n     0xad, 0x78, 0x79, 0x8b, 0x8d, 0xa2, 0x30, 0x57,\n-    0x58, 0x8b, 0x8c, 0x90, 0x1c, 0x1d, 0xdd, 0x0e,\n-    0x0f, 0x4b, 0x4c, 0xfb, 0xfc, 0x2e, 0x2f, 0x3f,\n-    0x5c, 0x5d, 0x5f, 0xb5, 0xe2, 0x84, 0x8d, 0x8e,\n-    0x91, 0x92, 0xa9, 0xb1, 0xba, 0xbb, 0xc5, 0xc6,\n-    0xc9, 0xca, 0xde, 0xe4, 0xe5, 0xff, 0x00, 0x04,\n-    0x11, 0x12, 0x29, 0x31, 0x34, 0x37, 0x3a, 0x3b,\n-    0x3d, 0x49, 0x4a, 0x5d, 0x84, 0x8e, 0x92, 0xa9,\n-    0xb1, 0xb4, 0xba, 0xbb, 0xc6, 0xca, 0xce, 0xcf,\n-    0xe4, 0xe5, 0x00, 0x04, 0x0d, 0x0e, 0x11, 0x12,\n-    0x29, 0x31, 0x34, 0x3a, 0x3b, 0x45, 0x46, 0x49,\n-    0x4a, 0x5e, 0x64, 0x65, 0x84, 0x91, 0x9b, 0x9d,\n-    0xc9, 0xce, 0xcf, 0x0d, 0x11, 0x29, 0x45, 0x49,\n-    0x57, 0x64, 0x65, 0x8d, 0x91, 0xa9, 0xb4, 0xba,\n-    0xbb, 0xc5, 0xc9, 0xdf, 0xe4, 0xe5, 0xf0, 0x0d,\n-    0x11, 0x45, 0x49, 0x64, 0x65, 0x80, 0x84, 0xb2,\n-    0xbc, 0xbe, 0xbf, 0xd5, 0xd7, 0xf0, 0xf1, 0x83,\n-    0x85, 0x8b, 0xa4, 0xa6, 0xbe, 0xbf, 0xc5, 0xc7,\n-    0xce, 0xcf, 0xda, 0xdb, 0x48, 0x98, 0xbd, 0xcd,\n-    0xc6, 0xce, 0xcf, 0x49, 0x4e, 0x4f, 0x57, 0x59,\n-    0x5e, 0x5f, 0x89, 0x8e, 0x8f, 0xb1, 0xb6, 0xb7,\n-    0xbf, 0xc1, 0xc6, 0xc7, 0xd7, 0x11, 0x16, 0x17,\n-    0x5b, 0x5c, 0xf6, 0xf7, 0xfe, 0xff, 0x80, 0x0d,\n-    0x6d, 0x71, 0xde, 0xdf, 0x0e, 0x0f, 0x1f, 0x6e,\n-    0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e, 0xae, 0xaf,\n-    0xbb, 0xbc, 0xfa, 0x16, 0x17, 0x1e, 0x1f, 0x46,\n-    0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c, 0x5e, 0x7e,\n-    0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc, 0xf0, 0xf1,\n-    0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75, 0x96, 0x2f,\n-    0x5f, 0x26, 0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf,\n+    0x58, 0x8b, 0x8c, 0x90, 0x1c, 0xdd, 0x0e, 0x0f,\n+    0x4b, 0x4c, 0xfb, 0xfc, 0x2e, 0x2f, 0x3f, 0x5c,\n+    0x5d, 0x5f, 0xe2, 0x84, 0x8d, 0x8e, 0x91, 0x92,\n+    0xa9, 0xb1, 0xba, 0xbb, 0xc5, 0xc6, 0xc9, 0xca,\n+    0xde, 0xe4, 0xe5, 0xff, 0x00, 0x04, 0x11, 0x12,\n+    0x29, 0x31, 0x34, 0x37, 0x3a, 0x3b, 0x3d, 0x49,\n+    0x4a, 0x5d, 0x84, 0x8e, 0x92, 0xa9, 0xb1, 0xb4,\n+    0xba, 0xbb, 0xc6, 0xca, 0xce, 0xcf, 0xe4, 0xe5,\n+    0x00, 0x04, 0x0d, 0x0e, 0x11, 0x12, 0x29, 0x31,\n+    0x34, 0x3a, 0x3b, 0x45, 0x46, 0x49, 0x4a, 0x5e,\n+    0x64, 0x65, 0x84, 0x91, 0x9b, 0x9d, 0xc9, 0xce,\n+    0xcf, 0x0d, 0x11, 0x29, 0x3a, 0x3b, 0x45, 0x49,\n+    0x57, 0x5b, 0x5c, 0x5e, 0x5f, 0x64, 0x65, 0x8d,\n+    0x91, 0xa9, 0xb4, 0xba, 0xbb, 0xc5, 0xc9, 0xdf,\n+    0xe4, 0xe5, 0xf0, 0x0d, 0x11, 0x45, 0x49, 0x64,\n+    0x65, 0x80, 0x84, 0xb2, 0xbc, 0xbe, 0xbf, 0xd5,\n+    0xd7, 0xf0, 0xf1, 0x83, 0x85, 0x8b, 0xa4, 0xa6,\n+    0xbe, 0xbf, 0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb,\n+    0x48, 0x98, 0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49,\n+    0x4e, 0x4f, 0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e,\n+    0x8f, 0xb1, 0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7,\n+    0xd7, 0x11, 0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7,\n+    0xfe, 0xff, 0x80, 0x6d, 0x71, 0xde, 0xdf, 0x0e,\n+    0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e,\n+    0xae, 0xaf, 0x7f, 0xbb, 0xbc, 0x16, 0x17, 0x1e,\n+    0x1f, 0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c,\n+    0x5e, 0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc,\n+    0xf0, 0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75,\n+    0x96, 0x26, 0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf,\n     0xc7, 0xcf, 0xd7, 0xdf, 0x9a, 0x40, 0x97, 0x98,\n-    0x30, 0x8f, 0x1f, 0xc0, 0xc1, 0xce, 0xff, 0x4e,\n+    0x30, 0x8f, 0x1f, 0xd2, 0xd4, 0xce, 0xff, 0x4e,\n     0x4f, 0x5a, 0x5b, 0x07, 0x08, 0x0f, 0x10, 0x27,\n     0x2f, 0xee, 0xef, 0x6e, 0x6f, 0x37, 0x3d, 0x3f,\n-    0x42, 0x45, 0x90, 0x91, 0xfe, 0xff, 0x53, 0x67,\n-    0x75, 0xc8, 0xc9, 0xd0, 0xd1, 0xd8, 0xd9, 0xe7,\n-    0xfe, 0xff,\n+    0x42, 0x45, 0x90, 0x91, 0x53, 0x67, 0x75, 0xc8,\n+    0xc9, 0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n #[rustfmt::skip]\n const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x00, 6),\n     (0x01, 1),\n     (0x03, 1),\n     (0x04, 2),\n+    (0x05, 7),\n+    (0x07, 2),\n     (0x08, 8),\n     (0x09, 2),\n     (0x0a, 5),\n@@ -178,9 +178,11 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x1c, 5),\n     (0x1d, 8),\n     (0x24, 1),\n-    (0x6a, 3),\n+    (0x6a, 4),\n     (0x6b, 2),\n+    (0xaf, 3),\n     (0xbc, 2),\n+    (0xcf, 2),\n     (0xd1, 2),\n     (0xd4, 12),\n     (0xd5, 9),\n@@ -189,38 +191,40 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0xda, 1),\n     (0xe0, 5),\n     (0xe1, 2),\n+    (0xe7, 4),\n     (0xe8, 2),\n     (0xee, 32),\n     (0xf0, 4),\n     (0xf8, 2),\n-    (0xf9, 2),\n     (0xfa, 2),\n     (0xfb, 1),\n ];\n #[rustfmt::skip]\n const SINGLETONS1L: &[u8] = &[\n     0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n-    0x9e, 0x9f, 0x06, 0x07, 0x09, 0x36, 0x3d, 0x3e,\n-    0x56, 0xf3, 0xd0, 0xd1, 0x04, 0x14, 0x18, 0x36,\n-    0x37, 0x56, 0x57, 0x7f, 0xaa, 0xae, 0xaf, 0xbd,\n-    0x35, 0xe0, 0x12, 0x87, 0x89, 0x8e, 0x9e, 0x04,\n-    0x0d, 0x0e, 0x11, 0x12, 0x29, 0x31, 0x34, 0x3a,\n-    0x45, 0x46, 0x49, 0x4a, 0x4e, 0x4f, 0x64, 0x65,\n-    0x5c, 0xb6, 0xb7, 0x1b, 0x1c, 0x07, 0x08, 0x0a,\n-    0x0b, 0x14, 0x17, 0x36, 0x39, 0x3a, 0xa8, 0xa9,\n-    0xd8, 0xd9, 0x09, 0x37, 0x90, 0x91, 0xa8, 0x07,\n-    0x0a, 0x3b, 0x3e, 0x66, 0x69, 0x8f, 0x92, 0x6f,\n-    0x5f, 0xee, 0xef, 0x5a, 0x62, 0x9a, 0x9b, 0x27,\n-    0x28, 0x55, 0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7,\n-    0xa8, 0xad, 0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c,\n-    0x15, 0x1d, 0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7,\n-    0xcc, 0xcd, 0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25,\n-    0x3e, 0x3f, 0xc5, 0xc6, 0x04, 0x20, 0x23, 0x25,\n-    0x26, 0x28, 0x33, 0x38, 0x3a, 0x48, 0x4a, 0x4c,\n-    0x50, 0x53, 0x55, 0x56, 0x58, 0x5a, 0x5c, 0x5e,\n-    0x60, 0x63, 0x65, 0x66, 0x6b, 0x73, 0x78, 0x7d,\n-    0x7f, 0x8a, 0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0,\n-    0xae, 0xaf, 0x79, 0xcc, 0x6e, 0x6f, 0x93,\n+    0x9e, 0x9f, 0x7b, 0x8b, 0x93, 0x96, 0xa2, 0xb2,\n+    0xba, 0x86, 0xb1, 0x06, 0x07, 0x09, 0x36, 0x3d,\n+    0x3e, 0x56, 0xf3, 0xd0, 0xd1, 0x04, 0x14, 0x18,\n+    0x36, 0x37, 0x56, 0x57, 0x7f, 0xaa, 0xae, 0xaf,\n+    0xbd, 0x35, 0xe0, 0x12, 0x87, 0x89, 0x8e, 0x9e,\n+    0x04, 0x0d, 0x0e, 0x11, 0x12, 0x29, 0x31, 0x34,\n+    0x3a, 0x45, 0x46, 0x49, 0x4a, 0x4e, 0x4f, 0x64,\n+    0x65, 0x5c, 0xb6, 0xb7, 0x1b, 0x1c, 0x07, 0x08,\n+    0x0a, 0x0b, 0x14, 0x17, 0x36, 0x39, 0x3a, 0xa8,\n+    0xa9, 0xd8, 0xd9, 0x09, 0x37, 0x90, 0x91, 0xa8,\n+    0x07, 0x0a, 0x3b, 0x3e, 0x66, 0x69, 0x8f, 0x92,\n+    0x6f, 0x5f, 0xbf, 0xee, 0xef, 0x5a, 0x62, 0xf4,\n+    0xfc, 0xff, 0x9a, 0x9b, 0x2e, 0x2f, 0x27, 0x28,\n+    0x55, 0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7, 0xa8,\n+    0xad, 0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c, 0x15,\n+    0x1d, 0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7, 0xcc,\n+    0xcd, 0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25, 0x3e,\n+    0x3f, 0xe7, 0xec, 0xef, 0xff, 0xc5, 0xc6, 0x04,\n+    0x20, 0x23, 0x25, 0x26, 0x28, 0x33, 0x38, 0x3a,\n+    0x48, 0x4a, 0x4c, 0x50, 0x53, 0x55, 0x56, 0x58,\n+    0x5a, 0x5c, 0x5e, 0x60, 0x63, 0x65, 0x66, 0x6b,\n+    0x73, 0x78, 0x7d, 0x7f, 0x8a, 0xa4, 0xaa, 0xaf,\n+    0xb0, 0xc0, 0xd0, 0xae, 0xaf, 0x6e, 0x6f, 0x93,\n ];\n #[rustfmt::skip]\n const NORMAL0: &[u8] = &[\n@@ -231,9 +235,9 @@ const NORMAL0: &[u8] = &[\n     0x1b, 0x04,\n     0x06, 0x11,\n     0x81, 0xac, 0x0e,\n-    0x80, 0xab, 0x35,\n-    0x28, 0x0b,\n-    0x80, 0xe0, 0x03,\n+    0x80, 0xab, 0x05,\n+    0x1f, 0x09,\n+    0x81, 0x1b, 0x03,\n     0x19, 0x08,\n     0x01, 0x04,\n     0x2f, 0x04,\n@@ -257,13 +261,11 @@ const NORMAL0: &[u8] = &[\n     0x0b, 0x06,\n     0x01, 0x0e,\n     0x15, 0x05,\n-    0x3a, 0x03,\n-    0x11, 0x07,\n-    0x06, 0x05,\n-    0x10, 0x07,\n+    0x4e, 0x07,\n+    0x1b, 0x07,\n     0x57, 0x07,\n-    0x02, 0x07,\n-    0x15, 0x0d,\n+    0x02, 0x06,\n+    0x16, 0x0d,\n     0x50, 0x04,\n     0x43, 0x03,\n     0x2d, 0x03,\n@@ -280,8 +282,8 @@ const NORMAL0: &[u8] = &[\n     0x1a, 0x06,\n     0x82, 0xfd, 0x03,\n     0x59, 0x07,\n-    0x15, 0x0b,\n-    0x17, 0x09,\n+    0x16, 0x09,\n+    0x18, 0x09,\n     0x14, 0x0c,\n     0x14, 0x0c,\n     0x6a, 0x06,\n@@ -299,10 +301,9 @@ const NORMAL0: &[u8] = &[\n     0x0b, 0x03,\n     0x80, 0xac, 0x06,\n     0x0a, 0x06,\n-    0x21, 0x3f,\n-    0x4c, 0x04,\n-    0x2d, 0x03,\n-    0x74, 0x08,\n+    0x2f, 0x31,\n+    0x4d, 0x03,\n+    0x80, 0xa4, 0x08,\n     0x3c, 0x03,\n     0x0f, 0x03,\n     0x3c, 0x07,\n@@ -312,7 +313,7 @@ const NORMAL0: &[u8] = &[\n     0x18, 0x08,\n     0x2f, 0x11,\n     0x2d, 0x03,\n-    0x20, 0x10,\n+    0x21, 0x0f,\n     0x21, 0x0f,\n     0x80, 0x8c, 0x04,\n     0x82, 0x97, 0x19,\n@@ -322,19 +323,19 @@ const NORMAL0: &[u8] = &[\n     0x3b, 0x07,\n     0x02, 0x0e,\n     0x18, 0x09,\n-    0x80, 0xb3, 0x2d,\n+    0x80, 0xbe, 0x22,\n     0x74, 0x0c,\n     0x80, 0xd6, 0x1a,\n     0x0c, 0x05,\n     0x80, 0xff, 0x05,\n     0x80, 0xdf, 0x0c,\n-    0xee, 0x0d, 0x03,\n-    0x84, 0x8d, 0x03,\n+    0xf2, 0x9d, 0x03,\n     0x37, 0x09,\n     0x81, 0x5c, 0x14,\n     0x80, 0xb8, 0x08,\n-    0x80, 0xcb, 0x2a,\n-    0x38, 0x03,\n+    0x80, 0xcb, 0x05,\n+    0x0a, 0x18,\n+    0x3b, 0x03,\n     0x0a, 0x06,\n     0x38, 0x08,\n     0x46, 0x08,\n@@ -354,9 +355,9 @@ const NORMAL0: &[u8] = &[\n     0x81, 0xda, 0x26,\n     0x07, 0x0c,\n     0x05, 0x05,\n-    0x80, 0xa5, 0x11,\n-    0x81, 0x6d, 0x10,\n-    0x78, 0x28,\n+    0x80, 0xa6, 0x10,\n+    0x81, 0xf5, 0x07,\n+    0x01, 0x20,\n     0x2a, 0x06,\n     0x4c, 0x04,\n     0x80, 0x8d, 0x04,\n@@ -386,10 +387,11 @@ const NORMAL1: &[u8] = &[\n     0x24, 0x04,\n     0x28, 0x08,\n     0x34, 0x0b,\n-    0x01, 0x80, 0x90,\n+    0x4e, 0x43,\n     0x81, 0x37, 0x09,\n     0x16, 0x0a,\n-    0x08, 0x80, 0x98,\n+    0x08, 0x18,\n+    0x3b, 0x45,\n     0x39, 0x03,\n     0x63, 0x08,\n     0x09, 0x30,\n@@ -417,12 +419,13 @@ const NORMAL1: &[u8] = &[\n     0x0a, 0x81, 0x26,\n     0x52, 0x4e,\n     0x28, 0x08,\n-    0x2a, 0x56,\n+    0x2a, 0x16,\n+    0x1a, 0x26,\n     0x1c, 0x14,\n     0x17, 0x09,\n     0x4e, 0x04,\n-    0x1e, 0x0f,\n-    0x43, 0x0e,\n+    0x24, 0x09,\n+    0x44, 0x0d,\n     0x19, 0x07,\n     0x0a, 0x06,\n     0x48, 0x08,\n@@ -443,18 +446,18 @@ const NORMAL1: &[u8] = &[\n     0x45, 0x0b,\n     0x0a, 0x06,\n     0x0d, 0x13,\n-    0x39, 0x07,\n+    0x3a, 0x06,\n     0x0a, 0x36,\n     0x2c, 0x04,\n-    0x10, 0x80, 0xc0,\n+    0x17, 0x80, 0xb9,\n     0x3c, 0x64,\n     0x53, 0x0c,\n     0x48, 0x09,\n     0x0a, 0x46,\n     0x45, 0x1b,\n     0x48, 0x08,\n-    0x53, 0x1d,\n-    0x39, 0x81, 0x07,\n+    0x53, 0x0d,\n+    0x49, 0x81, 0x07,\n     0x46, 0x0a,\n     0x1d, 0x03,\n     0x47, 0x49,\n@@ -468,12 +471,13 @@ const NORMAL1: &[u8] = &[\n     0x32, 0x0d,\n     0x83, 0x9b, 0x66,\n     0x75, 0x0b,\n-    0x80, 0xc4, 0x8a, 0xbc,\n+    0x80, 0xc4, 0x8a, 0x4c,\n+    0x63, 0x0d,\n     0x84, 0x2f, 0x8f, 0xd1,\n     0x82, 0x47, 0xa1, 0xb9,\n     0x82, 0x39, 0x07,\n     0x2a, 0x04,\n-    0x02, 0x60,\n+    0x5c, 0x06,\n     0x26, 0x0a,\n     0x46, 0x0a,\n     0x28, 0x05,\n@@ -486,32 +490,36 @@ const NORMAL1: &[u8] = &[\n     0x02, 0x0e,\n     0x97, 0xf8, 0x08,\n     0x84, 0xd6, 0x2a,\n-    0x09, 0xa2, 0xf7,\n-    0x81, 0x1f, 0x31,\n+    0x09, 0xa2, 0xe7,\n+    0x81, 0x33, 0x2d,\n     0x03, 0x11,\n     0x04, 0x08,\n     0x81, 0x8c, 0x89, 0x04,\n     0x6b, 0x05,\n     0x0d, 0x03,\n     0x09, 0x07,\n-    0x10, 0x93, 0x60,\n+    0x10, 0x92, 0x60,\n+    0x47, 0x09,\n+    0x74, 0x3c,\n     0x80, 0xf6, 0x0a,\n     0x73, 0x08,\n-    0x6e, 0x17,\n+    0x70, 0x15,\n     0x46, 0x80, 0x9a,\n     0x14, 0x0c,\n     0x57, 0x09,\n     0x19, 0x80, 0x87,\n     0x81, 0x47, 0x03,\n     0x85, 0x42, 0x0f,\n-    0x15, 0x85, 0x50,\n+    0x15, 0x84, 0x50,\n+    0x1f, 0x80, 0xe1,\n     0x2b, 0x80, 0xd5,\n     0x2d, 0x03,\n     0x1a, 0x04,\n-    0x02, 0x81, 0x70,\n+    0x02, 0x81, 0x40,\n+    0x1f, 0x11,\n     0x3a, 0x05,\n-    0x01, 0x85, 0x00,\n-    0x80, 0xd7, 0x29,\n+    0x01, 0x84, 0xe0,\n+    0x80, 0xf7, 0x29,\n     0x4c, 0x04,\n     0x0a, 0x04,\n     0x02, 0x83, 0x11,\n@@ -531,25 +539,28 @@ const NORMAL1: &[u8] = &[\n     0x09, 0x07,\n     0x02, 0x0e,\n     0x06, 0x80, 0x9a,\n-    0x83, 0xd8, 0x08,\n-    0x0d, 0x03,\n+    0x83, 0xd8, 0x05,\n+    0x10, 0x03,\n     0x0d, 0x03,\n     0x74, 0x0c,\n     0x59, 0x07,\n-    0x0c, 0x14,\n+    0x0c, 0x04,\n+    0x01, 0x0f,\n     0x0c, 0x04,\n     0x38, 0x08,\n     0x0a, 0x06,\n     0x28, 0x08,\n     0x22, 0x4e,\n     0x81, 0x54, 0x0c,\n     0x15, 0x03,\n-    0x03, 0x05,\n+    0x05, 0x03,\n     0x07, 0x09,\n-    0x19, 0x07,\n+    0x1d, 0x03,\n+    0x0b, 0x05,\n+    0x06, 0x0a,\n+    0x0a, 0x06,\n+    0x08, 0x08,\n     0x07, 0x09,\n-    0x03, 0x0d,\n-    0x07, 0x29,\n     0x80, 0xcb, 0x25,\n     0x0a, 0x84, 0x06,\n ];"}, {"sha": "d2073f86c010fee04a51915f06c01a3e781c441b", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 526, "deletions": 437, "changes": 963, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -94,72 +94,74 @@ fn skip_search<const SOR: usize, const OFFSETS: usize>(\n     offset_idx % 2 == 1\n }\n \n-pub const UNICODE_VERSION: (u8, u8, u8) = (13, 0, 0);\n+pub const UNICODE_VERSION: (u8, u8, u8) = (14, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {\n-    static SHORT_OFFSET_RUNS: [u32; 52] = [\n-        706, 33559113, 868226669, 947920662, 1157637302, 1306536960, 1310732293, 1398813696,\n-        1449151936, 1451270141, 1455465613, 1459660301, 1468061604, 1648425216, 1658911342,\n-        1661009214, 1707147904, 1793132343, 1853951616, 1994464256, 2330009312, 2418090906,\n-        2428579840, 2439066671, 2441167872, 2443265607, 2445371392, 2447469113, 2449567296,\n-        2476836856, 2508295382, 2512498688, 2518790431, 2520888060, 2533473280, 2535576576,\n-        2556548774, 2634145792, 2682380992, 2715936768, 2720132608, 2736910640, 2875326464,\n-        2887952094, 2890053429, 2894253730, 2902649825, 2906847232, 2908944926, 2911043584,\n-        2913145675, 2916356939,\n+    static SHORT_OFFSET_RUNS: [u32; 51] = [\n+        706, 33559113, 876615277, 956309270, 1166025910, 1314925568, 1319120901, 1398813696,\n+        1449151936, 1451271309, 1455465997, 1463867300, 1652619520, 1663105646, 1665203518,\n+        1711342208, 1797326647, 1891700352, 2044795904, 2397118176, 2485199770, 2495688592,\n+        2506175535, 2512471040, 2514568775, 2516674560, 2518772281, 2520870464, 2552334328,\n+        2583792854, 2587996144, 2594287907, 2608968444, 2621553664, 2623656960, 2644629158,\n+        2722225920, 2770461328, 2808211424, 2816601600, 2850156848, 2988572672, 3001198304,\n+        3003299641, 3007499938, 3015896033, 3020093440, 3022191134, 3024289792, 3026391883,\n+        3029603147,\n     ];\n-    static OFFSETS: [u8; 1391] = [\n+    static OFFSETS: [u8; 1445] = [\n         65, 26, 6, 26, 47, 1, 10, 1, 4, 1, 5, 23, 1, 31, 1, 0, 4, 12, 14, 5, 7, 1, 1, 1, 86, 1, 42,\n         5, 1, 2, 2, 4, 1, 1, 6, 1, 1, 3, 1, 1, 1, 20, 1, 83, 1, 139, 8, 166, 1, 38, 2, 1, 6, 41, 39,\n         14, 1, 1, 1, 2, 1, 2, 1, 1, 8, 27, 4, 4, 29, 11, 5, 56, 1, 7, 14, 102, 1, 8, 4, 8, 4, 3, 10,\n-        3, 2, 1, 16, 48, 13, 101, 24, 33, 9, 2, 4, 1, 5, 24, 2, 19, 19, 25, 7, 11, 53, 21, 1, 18,\n-        12, 12, 3, 7, 6, 76, 1, 16, 1, 3, 4, 15, 13, 19, 1, 8, 2, 2, 2, 22, 1, 7, 1, 1, 3, 4, 3, 8,\n-        2, 2, 2, 2, 1, 1, 8, 1, 4, 2, 1, 5, 12, 2, 10, 1, 4, 3, 1, 6, 4, 2, 2, 22, 1, 7, 1, 2, 1, 2,\n-        1, 2, 4, 5, 4, 2, 2, 2, 4, 1, 7, 4, 1, 1, 17, 6, 11, 3, 1, 9, 1, 3, 1, 22, 1, 7, 1, 2, 1, 5,\n-        3, 9, 1, 3, 1, 2, 3, 1, 15, 4, 21, 4, 4, 3, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2, 2,\n-        2, 2, 9, 2, 4, 2, 1, 5, 13, 1, 16, 2, 1, 6, 3, 3, 1, 4, 3, 2, 1, 1, 1, 2, 3, 2, 3, 3, 3, 12,\n-        4, 5, 3, 3, 1, 3, 3, 1, 6, 1, 40, 4, 1, 8, 1, 3, 1, 23, 1, 16, 3, 8, 1, 3, 1, 3, 8, 2, 1, 3,\n-        5, 4, 28, 4, 1, 8, 1, 3, 1, 23, 1, 10, 1, 5, 3, 8, 1, 3, 1, 3, 8, 2, 7, 1, 1, 4, 13, 2, 13,\n-        13, 1, 3, 1, 41, 2, 8, 1, 3, 1, 3, 1, 1, 5, 4, 7, 5, 22, 6, 1, 3, 1, 18, 3, 24, 1, 9, 1, 1,\n-        2, 7, 8, 6, 1, 1, 1, 8, 18, 2, 13, 58, 5, 7, 6, 1, 51, 2, 1, 1, 1, 5, 1, 24, 1, 1, 1, 19, 1,\n-        3, 2, 5, 1, 1, 6, 1, 14, 4, 32, 1, 63, 8, 1, 36, 4, 17, 6, 16, 1, 36, 67, 55, 1, 1, 2, 5,\n-        16, 64, 10, 4, 2, 38, 1, 1, 5, 1, 2, 43, 1, 0, 1, 4, 2, 7, 1, 1, 1, 4, 2, 41, 1, 4, 2, 33,\n-        1, 4, 2, 7, 1, 1, 1, 4, 2, 15, 1, 57, 1, 4, 2, 67, 37, 16, 16, 86, 2, 6, 3, 0, 2, 17, 1, 26,\n-        5, 75, 3, 11, 7, 13, 1, 6, 12, 20, 12, 20, 12, 13, 1, 3, 1, 2, 12, 52, 2, 19, 14, 1, 4, 1,\n-        67, 89, 7, 43, 5, 70, 10, 31, 1, 12, 4, 9, 23, 30, 2, 5, 11, 44, 4, 26, 54, 28, 4, 63, 2,\n-        20, 50, 1, 23, 2, 63, 52, 1, 15, 1, 7, 52, 42, 2, 4, 10, 44, 1, 11, 14, 55, 22, 3, 10, 36,\n-        2, 9, 7, 43, 2, 3, 41, 4, 1, 6, 1, 2, 3, 1, 5, 192, 39, 14, 11, 0, 2, 6, 2, 38, 2, 6, 2, 8,\n-        1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13, 5, 3, 1, 7, 116,\n-        1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4, 1, 11, 2, 4, 5,\n-        5, 4, 1, 17, 41, 0, 52, 0, 47, 1, 47, 1, 133, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1, 2, 56, 7, 1,\n-        16, 23, 9, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 32, 47, 1, 0, 3, 25, 9, 7, 5, 2,\n-        5, 4, 86, 6, 3, 1, 90, 1, 4, 5, 43, 1, 94, 17, 32, 48, 16, 0, 0, 64, 0, 3, 0, 67, 46, 2, 0,\n-        3, 16, 10, 2, 20, 47, 5, 8, 3, 113, 39, 9, 2, 103, 2, 53, 2, 9, 42, 17, 1, 33, 24, 52, 12,\n+        3, 2, 1, 16, 48, 13, 101, 24, 33, 9, 2, 4, 1, 5, 24, 2, 19, 19, 25, 7, 11, 5, 24, 1, 6, 17,\n+        42, 10, 12, 3, 7, 6, 76, 1, 16, 1, 3, 4, 15, 13, 19, 1, 8, 2, 2, 2, 22, 1, 7, 1, 1, 3, 4, 3,\n+        8, 2, 2, 2, 2, 1, 1, 8, 1, 4, 2, 1, 5, 12, 2, 10, 1, 4, 3, 1, 6, 4, 2, 2, 22, 1, 7, 1, 2, 1,\n+        2, 1, 2, 4, 5, 4, 2, 2, 2, 4, 1, 7, 4, 1, 1, 17, 6, 11, 3, 1, 9, 1, 3, 1, 22, 1, 7, 1, 2, 1,\n+        5, 3, 9, 1, 3, 1, 2, 3, 1, 15, 4, 21, 4, 4, 3, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2,\n+        2, 2, 2, 9, 2, 4, 2, 1, 5, 13, 1, 16, 2, 1, 6, 3, 3, 1, 4, 3, 2, 1, 1, 1, 2, 3, 2, 3, 3, 3,\n+        12, 4, 5, 3, 3, 1, 3, 3, 1, 6, 1, 40, 4, 1, 8, 1, 3, 1, 23, 1, 16, 3, 8, 1, 3, 1, 3, 8, 2,\n+        1, 3, 2, 1, 2, 4, 28, 4, 1, 8, 1, 3, 1, 23, 1, 10, 1, 5, 3, 8, 1, 3, 1, 3, 8, 2, 6, 2, 1, 4,\n+        13, 2, 13, 13, 1, 3, 1, 41, 2, 8, 1, 3, 1, 3, 1, 1, 5, 4, 7, 5, 22, 6, 1, 3, 1, 18, 3, 24,\n+        1, 9, 1, 1, 2, 7, 8, 6, 1, 1, 1, 8, 18, 2, 13, 58, 5, 7, 6, 1, 51, 2, 1, 1, 1, 5, 1, 24, 1,\n+        1, 1, 19, 1, 3, 2, 5, 1, 1, 6, 1, 14, 4, 32, 1, 63, 8, 1, 36, 4, 17, 6, 16, 1, 36, 67, 55,\n+        1, 1, 2, 5, 16, 64, 10, 4, 2, 38, 1, 1, 5, 1, 2, 43, 1, 0, 1, 4, 2, 7, 1, 1, 1, 4, 2, 41, 1,\n+        4, 2, 33, 1, 4, 2, 7, 1, 1, 1, 4, 2, 15, 1, 57, 1, 4, 2, 67, 37, 16, 16, 86, 2, 6, 3, 0, 2,\n+        17, 1, 26, 5, 75, 3, 11, 7, 20, 11, 21, 12, 20, 12, 13, 1, 3, 1, 2, 12, 52, 2, 19, 14, 1, 4,\n+        1, 67, 89, 7, 43, 5, 70, 10, 31, 1, 12, 4, 9, 23, 30, 2, 5, 11, 44, 4, 26, 54, 28, 4, 63, 2,\n+        20, 50, 1, 23, 2, 11, 3, 49, 52, 1, 15, 1, 8, 51, 42, 2, 4, 10, 44, 1, 11, 14, 55, 22, 3,\n+        10, 36, 2, 9, 7, 43, 2, 3, 41, 4, 1, 6, 1, 2, 3, 1, 5, 192, 39, 14, 11, 0, 2, 6, 2, 38, 2,\n+        6, 2, 8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13, 5, 3, 1,\n+        7, 116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4, 1, 11, 2,\n+        4, 5, 5, 4, 1, 17, 41, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1, 2, 56, 7, 1, 16, 23,\n+        9, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 32, 47, 1, 0, 3, 25, 9, 7, 5, 2, 5, 4,\n+        86, 6, 3, 1, 90, 1, 4, 5, 43, 1, 94, 17, 32, 48, 16, 0, 0, 64, 0, 67, 46, 2, 0, 3, 16, 10,\n+        2, 20, 47, 5, 8, 3, 113, 39, 9, 2, 103, 2, 64, 5, 2, 1, 1, 1, 5, 24, 20, 1, 33, 24, 52, 12,\n         68, 1, 1, 44, 6, 3, 1, 1, 3, 10, 33, 5, 35, 13, 29, 3, 51, 1, 12, 15, 1, 16, 16, 10, 5, 1,\n         55, 9, 14, 18, 23, 3, 69, 1, 1, 1, 1, 24, 3, 2, 16, 2, 4, 11, 6, 2, 6, 2, 6, 9, 7, 1, 7, 1,\n         43, 1, 14, 6, 123, 21, 0, 12, 23, 4, 49, 0, 0, 2, 106, 38, 7, 12, 5, 5, 12, 1, 13, 1, 5, 1,\n         1, 1, 2, 1, 2, 1, 108, 33, 0, 18, 64, 2, 54, 40, 12, 116, 5, 1, 135, 36, 26, 6, 26, 11, 89,\n         3, 6, 2, 6, 2, 6, 2, 3, 35, 12, 1, 26, 1, 19, 1, 2, 1, 15, 2, 14, 34, 123, 69, 53, 0, 29, 3,\n         49, 47, 32, 13, 30, 5, 43, 5, 30, 2, 36, 4, 8, 1, 5, 42, 158, 18, 36, 4, 36, 4, 40, 8, 52,\n-        156, 0, 9, 22, 10, 8, 152, 6, 2, 1, 1, 44, 1, 2, 3, 1, 2, 23, 10, 23, 9, 31, 65, 19, 1, 2,\n-        10, 22, 10, 26, 70, 56, 6, 2, 64, 4, 1, 2, 5, 8, 1, 3, 1, 29, 42, 29, 3, 29, 35, 8, 1, 28,\n-        27, 54, 10, 22, 10, 19, 13, 18, 110, 73, 55, 51, 13, 51, 13, 40, 0, 42, 1, 2, 3, 2, 78, 29,\n-        10, 1, 8, 22, 106, 21, 27, 23, 9, 70, 60, 55, 23, 25, 23, 51, 17, 4, 8, 35, 3, 1, 9, 64, 1,\n-        4, 9, 2, 10, 1, 1, 1, 35, 18, 1, 34, 2, 1, 6, 1, 65, 7, 1, 1, 1, 4, 1, 15, 1, 10, 7, 57, 23,\n-        4, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2, 2, 2, 2, 3, 1, 6, 1, 5, 7, 156, 66, 1, 3,\n-        1, 4, 20, 3, 30, 66, 2, 2, 1, 1, 184, 54, 2, 7, 25, 6, 34, 63, 1, 1, 3, 1, 59, 54, 2, 1, 71,\n-        27, 2, 14, 213, 57, 103, 64, 31, 8, 2, 1, 2, 8, 1, 2, 1, 30, 1, 2, 2, 2, 2, 4, 93, 8, 2, 46,\n-        2, 6, 1, 1, 1, 2, 27, 51, 2, 10, 17, 72, 5, 1, 34, 57, 0, 9, 1, 45, 1, 7, 1, 1, 49, 30, 2,\n-        22, 1, 14, 73, 7, 1, 2, 1, 44, 3, 1, 1, 2, 1, 3, 1, 1, 2, 2, 24, 6, 1, 2, 1, 37, 1, 2, 1, 4,\n-        1, 1, 0, 23, 185, 1, 79, 0, 102, 111, 17, 196, 0, 0, 0, 0, 0, 0, 7, 31, 113, 30, 18, 48, 16,\n-        4, 31, 21, 5, 19, 0, 64, 128, 75, 4, 57, 7, 17, 64, 2, 1, 1, 12, 2, 14, 0, 8, 0, 42, 9, 0,\n-        0, 49, 3, 17, 4, 8, 0, 0, 107, 5, 13, 3, 9, 7, 10, 4, 1, 0, 85, 1, 71, 1, 2, 2, 1, 2, 2, 2,\n-        4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1, 7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2, 25,\n-        1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 7, 1, 17, 2, 7, 1,\n-        2, 1, 5, 213, 45, 10, 7, 16, 1, 0, 44, 0, 197, 59, 68, 3, 1, 3, 1, 0, 4, 1, 27, 1, 2, 1, 1,\n-        2, 1, 1, 10, 1, 4, 1, 1, 1, 1, 6, 1, 4, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 2, 1, 1, 2, 4, 1, 7, 1, 4, 1, 4, 1, 1, 1, 10, 1, 17, 5, 3, 1, 5, 1, 17, 0,\n-        26, 6, 26, 6, 26, 0, 0, 34, 0, 11, 222, 2, 0, 14, 0, 0, 0, 0, 0, 0,\n+        12, 11, 1, 15, 1, 7, 1, 2, 1, 11, 1, 15, 1, 7, 1, 2, 67, 0, 9, 22, 10, 8, 24, 6, 1, 42, 1,\n+        9, 69, 6, 2, 1, 1, 44, 1, 2, 3, 1, 2, 23, 10, 23, 9, 31, 65, 19, 1, 2, 10, 22, 10, 26, 70,\n+        56, 6, 2, 64, 4, 1, 2, 5, 8, 1, 3, 1, 29, 42, 29, 3, 29, 35, 8, 1, 28, 27, 54, 10, 22, 10,\n+        19, 13, 18, 110, 73, 55, 51, 13, 51, 13, 40, 0, 42, 1, 2, 3, 2, 78, 29, 10, 1, 8, 22, 42,\n+        18, 46, 21, 27, 23, 9, 70, 43, 5, 12, 55, 9, 1, 13, 25, 23, 51, 17, 4, 8, 35, 3, 1, 9, 64,\n+        1, 4, 9, 2, 10, 1, 1, 1, 35, 18, 1, 34, 2, 1, 6, 1, 65, 7, 1, 1, 1, 4, 1, 15, 1, 10, 7, 57,\n+        23, 4, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2, 2, 2, 2, 3, 1, 6, 1, 5, 7, 156, 66, 1,\n+        3, 1, 4, 20, 3, 30, 66, 2, 2, 1, 1, 184, 54, 2, 7, 25, 6, 34, 63, 1, 1, 3, 1, 59, 54, 2, 1,\n+        71, 27, 2, 14, 21, 7, 185, 57, 103, 64, 31, 8, 2, 1, 2, 8, 1, 2, 1, 30, 1, 2, 2, 2, 2, 4,\n+        93, 8, 2, 46, 2, 6, 1, 1, 1, 2, 27, 51, 2, 10, 17, 72, 5, 1, 18, 73, 0, 9, 1, 45, 1, 7, 1,\n+        1, 49, 30, 2, 22, 1, 14, 73, 7, 1, 2, 1, 44, 3, 1, 1, 2, 1, 3, 1, 1, 2, 2, 24, 6, 1, 2, 1,\n+        37, 1, 2, 1, 4, 1, 1, 0, 23, 185, 1, 79, 0, 102, 111, 17, 196, 0, 97, 15, 0, 0, 0, 0, 0, 7,\n+        31, 17, 79, 17, 30, 18, 48, 16, 4, 31, 21, 5, 19, 0, 64, 128, 75, 4, 57, 7, 17, 64, 2, 1, 1,\n+        12, 2, 14, 0, 8, 0, 42, 9, 0, 4, 1, 7, 1, 2, 1, 0, 45, 3, 17, 4, 8, 0, 0, 107, 5, 13, 3, 9,\n+        7, 10, 4, 1, 0, 85, 1, 71, 1, 2, 2, 1, 2, 2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1,\n+        7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2, 25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1,\n+        25, 1, 31, 1, 25, 1, 8, 0, 31, 225, 7, 1, 17, 2, 7, 1, 2, 1, 5, 213, 45, 10, 7, 16, 1, 0,\n+        30, 18, 44, 0, 7, 1, 4, 1, 2, 1, 15, 1, 197, 59, 68, 3, 1, 3, 1, 0, 4, 1, 27, 1, 2, 1, 1, 2,\n+        1, 1, 10, 1, 4, 1, 1, 1, 1, 6, 1, 4, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 2, 1, 1, 2, 4, 1, 7, 1, 4, 1, 4, 1, 1, 1, 10, 1, 17, 5, 3, 1, 5, 1, 17, 0, 26,\n+        6, 26, 6, 26, 0, 0, 32, 0, 7, 222, 2, 0, 14, 0, 0, 0, 0, 0, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -172,44 +174,45 @@ pub mod alphabetic {\n \n #[rustfmt::skip]\n pub mod case_ignorable {\n-    static SHORT_OFFSET_RUNS: [u32; 32] = [\n-        688, 44045149, 555751186, 559947709, 794831996, 866136069, 891330581, 916497656, 920692236,\n-        924908318, 1122041344, 1130430973, 1193347585, 1205931300, 1231097515, 1235294255,\n-        1445009723, 1453399088, 1512120051, 1575040048, 1579248368, 1583443791, 1596046493,\n-        1612829031, 1621219840, 1642192896, 1667359024, 1688330988, 1692526800, 1696723963,\n-        1705902081, 1711210992,\n+    static SHORT_OFFSET_RUNS: [u32; 35] = [\n+        688, 44045149, 572528402, 576724925, 807414908, 878718981, 903913493, 929080568, 933275148,\n+        937491230, 1138818560, 1147208189, 1210124160, 1222707713, 1235291428, 1260457643,\n+        1264654383, 1491147067, 1499536432, 1558257395, 1621177392, 1625385712, 1629581135,\n+        1642180592, 1658961053, 1671548672, 1679937895, 1688328704, 1709301760, 1734467888,\n+        1755439790, 1759635664, 1768027131, 1777205249, 1782514160,\n     ];\n-    static OFFSETS: [u8; 821] = [\n+    static OFFSETS: [u8; 855] = [\n         39, 1, 6, 1, 11, 1, 35, 1, 1, 1, 71, 1, 4, 1, 1, 1, 4, 1, 2, 2, 0, 192, 4, 2, 4, 1, 9, 2,\n         1, 1, 251, 7, 207, 1, 5, 1, 49, 45, 1, 1, 1, 2, 1, 2, 1, 1, 44, 1, 11, 6, 10, 11, 1, 1, 35,\n         1, 10, 21, 16, 1, 101, 8, 1, 10, 1, 4, 33, 1, 1, 1, 30, 27, 91, 11, 58, 11, 4, 1, 2, 1, 24,\n-        24, 43, 3, 119, 48, 55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 13, 1, 15, 1, 58, 1, 4, 4, 8, 1,\n-        20, 2, 26, 1, 2, 2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4,\n-        1, 20, 2, 22, 6, 1, 1, 58, 1, 2, 1, 1, 4, 8, 1, 7, 2, 11, 2, 30, 1, 61, 1, 12, 1, 50, 1, 3,\n-        1, 57, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 6, 1, 5, 2, 20, 2, 28, 2, 57, 2, 4,\n-        4, 8, 1, 20, 2, 29, 1, 72, 1, 7, 3, 1, 1, 90, 1, 2, 7, 11, 9, 98, 1, 2, 9, 9, 1, 1, 6, 74,\n-        2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1, 102, 4, 1, 6, 1, 2, 2, 2, 25,\n-        2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 94, 1, 0, 3, 0, 3, 29, 3, 29, 2, 30, 2, 64, 2, 1,\n-        7, 8, 1, 2, 11, 3, 1, 5, 1, 45, 4, 52, 1, 65, 2, 34, 1, 118, 3, 4, 2, 9, 1, 6, 3, 219, 2, 2,\n-        1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 39, 1, 8, 17, 63, 4, 48, 1, 1, 5, 1, 1, 5, 1,\n-        40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3, 58, 8, 2, 2, 64, 6, 82, 3, 1, 13,\n-        1, 7, 4, 1, 6, 1, 3, 2, 50, 63, 13, 1, 34, 95, 1, 5, 0, 1, 1, 3, 11, 3, 13, 3, 13, 3, 13, 2,\n-        12, 5, 8, 2, 10, 1, 2, 1, 2, 5, 49, 5, 1, 10, 1, 1, 13, 1, 16, 13, 51, 33, 0, 2, 113, 3,\n-        125, 1, 15, 1, 96, 32, 47, 1, 0, 1, 36, 4, 3, 5, 5, 1, 93, 6, 93, 3, 0, 1, 0, 6, 0, 1, 98,\n-        4, 1, 10, 1, 1, 28, 4, 80, 2, 14, 34, 78, 1, 23, 3, 109, 2, 8, 1, 3, 1, 4, 1, 25, 2, 5, 1,\n-        151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3, 48, 1, 2, 4, 2, 2, 17, 1, 21, 2, 66, 6, 2, 2,\n-        2, 2, 12, 1, 8, 1, 35, 1, 11, 1, 51, 1, 1, 3, 2, 2, 5, 2, 1, 1, 27, 1, 14, 2, 5, 2, 1, 1,\n-        100, 5, 9, 3, 121, 1, 2, 1, 4, 1, 0, 1, 147, 16, 0, 16, 3, 1, 12, 16, 34, 1, 2, 1, 169, 1,\n-        7, 1, 6, 1, 11, 1, 35, 1, 1, 1, 47, 1, 45, 2, 67, 1, 21, 3, 0, 1, 226, 1, 149, 5, 0, 3, 1,\n-        2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 176, 1, 54, 15, 56, 3, 49, 4, 2, 2, 2, 1,\n-        15, 1, 50, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160,\n-        1, 3, 8, 21, 2, 57, 2, 3, 1, 37, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 84, 6, 1, 1, 4, 2, 1,\n-        2, 238, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1,\n-        5, 0, 9, 1, 2, 0, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3,\n-        46, 13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1,\n-        72, 2, 3, 1, 1, 1, 0, 2, 0, 9, 0, 5, 59, 7, 9, 4, 0, 1, 63, 17, 64, 2, 1, 2, 0, 2, 1, 4, 0,\n-        3, 9, 16, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7,\n-        1, 2, 1, 5, 0, 14, 0, 4, 0, 7, 109, 8, 0, 5, 0, 1, 30, 96, 128, 240, 0,\n+        24, 43, 3, 44, 1, 7, 2, 6, 8, 41, 58, 55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 13, 1, 15, 1,\n+        58, 1, 4, 4, 8, 1, 20, 2, 26, 1, 2, 2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2,\n+        57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6, 1, 1, 58, 1, 2, 1, 1, 4, 8, 1, 7, 2, 11, 2, 30, 1,\n+        61, 1, 12, 1, 50, 1, 3, 1, 55, 1, 1, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 6, 1,\n+        5, 2, 20, 2, 28, 2, 57, 2, 4, 4, 8, 1, 20, 2, 29, 1, 72, 1, 7, 3, 1, 1, 90, 1, 2, 7, 11, 9,\n+        98, 1, 2, 9, 9, 1, 1, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n+        102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 94, 1, 0, 3, 0, 3,\n+        29, 2, 30, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 3, 1, 5, 1, 45, 5, 51, 1, 65, 2, 34, 1, 118,\n+        3, 4, 2, 9, 1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 39, 1, 8, 31,\n+        49, 4, 48, 1, 1, 5, 1, 1, 5, 1, 40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3,\n+        58, 8, 2, 2, 64, 6, 82, 3, 1, 13, 1, 7, 4, 1, 6, 1, 3, 2, 50, 63, 13, 1, 34, 101, 0, 1, 1,\n+        3, 11, 3, 13, 3, 13, 3, 13, 2, 12, 5, 8, 2, 10, 1, 2, 1, 2, 5, 49, 5, 1, 10, 1, 1, 13, 1,\n+        16, 13, 51, 33, 0, 2, 113, 3, 125, 1, 15, 1, 96, 32, 47, 1, 0, 1, 36, 4, 3, 5, 5, 1, 93, 6,\n+        93, 3, 0, 1, 0, 6, 0, 1, 98, 4, 1, 10, 1, 1, 28, 4, 80, 2, 14, 34, 78, 1, 23, 3, 103, 3, 3,\n+        2, 8, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3, 48, 1, 2, 4,\n+        2, 2, 17, 1, 21, 2, 66, 6, 2, 2, 2, 2, 12, 1, 8, 1, 35, 1, 11, 1, 51, 1, 1, 3, 2, 2, 5, 2,\n+        1, 1, 27, 1, 14, 2, 5, 2, 1, 1, 100, 5, 9, 3, 121, 1, 2, 1, 4, 1, 0, 1, 147, 17, 0, 16, 3,\n+        1, 12, 16, 34, 1, 2, 1, 169, 1, 7, 1, 6, 1, 11, 1, 35, 1, 1, 1, 47, 1, 45, 2, 67, 1, 21, 3,\n+        0, 1, 226, 1, 149, 5, 0, 6, 1, 42, 1, 9, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2,\n+        153, 11, 49, 4, 123, 1, 54, 15, 41, 1, 2, 2, 10, 3, 49, 4, 2, 2, 2, 1, 4, 1, 10, 1, 50, 3,\n+        36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2,\n+        57, 2, 3, 1, 37, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 84, 6, 1, 1, 4, 2, 1, 2, 238, 4, 6, 2,\n+        1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 0,\n+        2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0,\n+        7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1,\n+        0, 2, 0, 9, 0, 5, 59, 7, 9, 4, 0, 1, 63, 17, 64, 2, 1, 2, 0, 4, 1, 7, 1, 2, 0, 2, 1, 4, 0,\n+        46, 2, 23, 0, 3, 9, 16, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7,\n+        1, 17, 2, 7, 1, 2, 1, 5, 0, 14, 0, 1, 61, 4, 0, 7, 109, 8, 0, 5, 0, 1, 30, 96, 128, 240, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -222,23 +225,24 @@ pub mod case_ignorable {\n \n #[rustfmt::skip]\n pub mod cased {\n-    static SHORT_OFFSET_RUNS: [u32; 19] = [\n-        4256, 115348384, 136322176, 144711446, 163587254, 320875520, 325101120, 358656816,\n-        392231680, 404815649, 413205504, 421596288, 434182304, 442592832, 446813184, 451008166,\n-        528607488, 576844080, 582152586,\n+    static SHORT_OFFSET_RUNS: [u32; 21] = [\n+        4256, 115348384, 136322176, 144711446, 163587254, 320875520, 325101120, 350268208,\n+        392231680, 404815649, 413205504, 421595008, 467733632, 484513952, 492924480, 497144832,\n+        501339814, 578936576, 627173632, 635564336, 640872842,\n     ];\n-    static OFFSETS: [u8; 283] = [\n+    static OFFSETS: [u8; 311] = [\n         65, 26, 6, 26, 47, 1, 10, 1, 4, 1, 5, 23, 1, 31, 1, 195, 1, 4, 4, 208, 1, 36, 7, 2, 30, 5,\n         96, 1, 42, 4, 2, 2, 2, 4, 1, 1, 6, 1, 1, 3, 1, 1, 1, 20, 1, 83, 1, 139, 8, 166, 1, 38, 9,\n         41, 0, 38, 1, 1, 5, 1, 2, 43, 2, 3, 0, 86, 2, 6, 0, 9, 7, 43, 2, 3, 64, 192, 64, 0, 2, 6, 2,\n         38, 2, 6, 2, 8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13,\n         5, 3, 1, 7, 116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4,\n-        1, 6, 4, 1, 2, 4, 5, 5, 4, 1, 17, 32, 3, 2, 0, 52, 0, 47, 1, 47, 1, 133, 6, 4, 3, 2, 12, 38,\n-        1, 1, 5, 1, 0, 46, 18, 30, 132, 102, 3, 4, 1, 48, 2, 9, 42, 2, 1, 3, 0, 43, 1, 13, 7, 80, 0,\n-        7, 12, 5, 0, 26, 6, 26, 0, 80, 96, 36, 4, 36, 0, 51, 13, 51, 0, 64, 0, 64, 0, 85, 1, 71, 1,\n-        2, 2, 1, 2, 2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1, 7, 1, 28, 1, 4, 1, 5, 1, 1, 3,\n-        7, 1, 0, 2, 25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 68,\n-        0, 26, 6, 26, 6, 26, 0,\n+        1, 6, 4, 1, 2, 4, 5, 5, 4, 1, 17, 32, 3, 2, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1,\n+        0, 46, 18, 30, 132, 102, 3, 4, 1, 59, 5, 2, 1, 1, 1, 5, 27, 2, 1, 3, 0, 43, 1, 13, 7, 80, 0,\n+        7, 12, 5, 0, 26, 6, 26, 0, 80, 96, 36, 4, 36, 116, 11, 1, 15, 1, 7, 1, 2, 1, 11, 1, 15, 1,\n+        7, 1, 2, 0, 1, 2, 3, 1, 42, 1, 9, 0, 51, 13, 51, 0, 64, 0, 64, 0, 85, 1, 71, 1, 2, 2, 1, 2,\n+        2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1, 7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2,\n+        25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 10, 1, 20, 0,\n+        68, 0, 26, 6, 26, 6, 26, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -268,38 +272,40 @@ pub mod cc {\n \n #[rustfmt::skip]\n pub mod grapheme_extend {\n-    static SHORT_OFFSET_RUNS: [u32; 31] = [\n-        768, 2098307, 6292881, 10490717, 513808146, 518004748, 723528943, 731918378, 744531567,\n-        752920578, 769719070, 899743232, 903937950, 912327165, 916523521, 929107236, 954273451,\n-        958470191, 1180769328, 1252073203, 1315007216, 1319202639, 1327611037, 1340199269,\n-        1344395776, 1373757440, 1398923568, 1419895532, 1424091344, 1429078048, 1438581232,\n+    static SHORT_OFFSET_RUNS: [u32; 32] = [\n+        768, 2098307, 6292881, 10490717, 522196754, 526393356, 731917551, 740306986, 752920175,\n+        761309186, 778107678, 908131840, 912326558, 920715773, 924912129, 937495844, 962662059,\n+        966858799, 1205935152, 1277239027, 1340173040, 1344368463, 1352776861, 1365364480,\n+        1369559397, 1377950208, 1407311872, 1432478000, 1453449902, 1457645776, 1466826784,\n+        1476329968,\n     ];\n-    static OFFSETS: [u8; 689] = [\n+    static OFFSETS: [u8; 707] = [\n         0, 112, 0, 7, 0, 45, 1, 1, 1, 2, 1, 2, 1, 1, 72, 11, 48, 21, 16, 1, 101, 7, 2, 6, 2, 2, 1,\n-        4, 35, 1, 30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 119, 15, 1, 32, 55,\n-        1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2, 2,\n-        57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6, 1,\n-        1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1, 3, 1, 57,\n-        3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11, 2, 28, 2, 57, 2,\n-        1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1, 81, 1, 2, 7, 12, 8, 98,\n-        1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1, 102, 4, 1,\n-        6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 0, 3, 0, 3, 29, 3, 29, 2, 30,\n-        2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 119, 2, 34, 1, 118, 3, 4, 2, 9, 1, 6, 3, 219, 2,\n-        2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 48, 17, 63, 4, 48, 7, 1, 1, 5, 1, 40, 9,\n-        12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3, 58, 8, 2, 2, 152, 3, 1, 13, 1, 7, 4, 1,\n-        6, 1, 3, 2, 198, 58, 1, 5, 0, 1, 195, 33, 0, 3, 141, 1, 96, 32, 0, 6, 105, 2, 0, 4, 1, 10,\n-        32, 2, 80, 2, 0, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3,\n-        48, 1, 2, 4, 2, 2, 39, 1, 67, 6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2, 5, 2, 1,\n-        1, 42, 2, 8, 1, 238, 1, 2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149, 5, 0, 3,\n-        1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 176, 1, 54, 15, 56, 3, 49, 4, 2, 2,\n-        69, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8,\n-        21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 81, 1, 2, 6, 1, 1,\n-        2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1,\n-        1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10,\n-        40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2,\n-        122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0,\n-        2, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0,\n-        7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 4, 0, 7, 109, 7, 0, 96, 128, 240, 0,\n+        4, 35, 1, 30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 60, 8, 42, 24, 1, 32,\n+        55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2,\n+        2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6,\n+        1, 1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1, 3, 1,\n+        55, 1, 1, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11, 2, 28,\n+        2, 57, 2, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1, 81, 1, 2, 7,\n+        12, 8, 98, 1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n+        102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 0, 3, 0, 3, 29, 2,\n+        30, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 1, 1, 117, 2, 34, 1, 118, 3, 4, 2, 9,\n+        1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 48, 31, 49, 4, 48, 7, 1,\n+        1, 5, 1, 40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3, 58, 8, 2, 2, 152, 3, 1,\n+        13, 1, 7, 4, 1, 6, 1, 3, 2, 198, 64, 0, 1, 195, 33, 0, 3, 141, 1, 96, 32, 0, 6, 105, 2, 0,\n+        4, 1, 10, 32, 2, 80, 2, 0, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11,\n+        46, 3, 48, 1, 2, 4, 2, 2, 39, 1, 67, 6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2,\n+        5, 2, 1, 1, 42, 2, 8, 1, 238, 1, 2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149,\n+        5, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 49, 4, 123, 1, 54, 15, 41, 1,\n+        2, 2, 10, 3, 49, 4, 2, 2, 7, 1, 61, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3,\n+        2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3,\n+        1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2,\n+        1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4,\n+        1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1,\n+        1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5,\n+        59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0, 46, 2, 23, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3,\n+        0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 1, 61, 4,\n+        0, 7, 109, 7, 0, 96, 128, 240, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -313,33 +319,34 @@ pub mod grapheme_extend {\n #[rustfmt::skip]\n pub mod lowercase {\n     static BITSET_CHUNKS_MAP: [u8; 123] = [\n-        13, 16, 0, 0, 8, 0, 0, 11, 12, 9, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 3, 1, 0, 14, 0, 7, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0,\n-        0, 0, 6,\n+        14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,\n+        3, 0, 0, 7,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 18] = [\n+    static BITSET_INDEX_CHUNKS: [[u8; 16]; 19] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 52, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 55, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 39, 0, 47, 43, 45, 30],\n-        [0, 0, 0, 0, 10, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 42, 0, 50, 46, 48, 32],\n+        [0, 0, 0, 0, 10, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26],\n-        [0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 54, 0, 52, 52, 52, 0, 21, 21, 64, 21, 33, 24, 23, 34],\n-        [0, 5, 71, 0, 28, 15, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 61, 31, 17, 22, 48, 49, 44, 42, 8, 32, 38, 0, 27, 13, 29],\n-        [11, 55, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [16, 25, 21, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [16, 46, 2, 20, 63, 9, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [60, 37, 51, 12, 70, 58, 18, 1, 6, 59, 68, 19, 65, 66, 3, 41],\n+        [0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26],\n+        [0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 57, 0, 55, 55, 55, 0, 21, 21, 67, 21, 35, 24, 23, 36],\n+        [0, 5, 74, 0, 28, 15, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 64, 33, 17, 22, 51, 52, 47, 45, 8, 34, 40, 0, 27, 13, 30],\n+        [11, 58, 0, 4, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 31, 0],\n+        [16, 25, 21, 37, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [16, 49, 2, 20, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [63, 39, 54, 12, 73, 61, 18, 1, 6, 62, 71, 19, 68, 69, 3, 44],\n     ];\n-    static BITSET_CANONICAL: [u64; 52] = [\n+    static BITSET_CANONICAL: [u64; 55] = [\n         0b0000000000000000000000000000000000000000000000000000000000000000,\n         0b1111111111111111110000000000000000000000000011111111111111111111,\n         0b1010101010101010101010101010101010101010101010101010100000000010,\n@@ -365,12 +372,14 @@ pub mod lowercase {\n         0b0101010110101010101010101010101010101010101010101010101010101010,\n         0b0100000011011111000000001111111100000000111111110000000011111111,\n         0b0011111111111111000000001111111100000000111111110000000000111111,\n-        0b0011111111011010000101010110001001111111111111111111111111111111,\n+        0b0011111111011010000101010110001011111111111111111111111111111111,\n         0b0011111100000000000000000000000000000000000000000000000000000000,\n         0b0011110010001010000000000000000000000000000000000000000000100000,\n         0b0011001000010000100000000000000000000000000010001100010000000000,\n+        0b0001101111111011111111111111101111111111100000000000000000000000,\n         0b0001100100101111101010101010101010101010111000110111111111111111,\n-        0b0000011101000000000000000000000000000000000000000000010100001000,\n+        0b0000011111111101111111111111111111111111111111111111111110111001,\n+        0b0000011101000000000000000000000000000010101010100000010100001010,\n         0b0000010000100000000001000000000000000000000000000000000000000000,\n         0b0000000111111111111111111111111111111111111011111111111111111111,\n         0b0000000011111111000000001111111100000000001111110000000011111111,\n@@ -379,6 +388,7 @@ pub mod lowercase {\n         0b0000000000000000001000001011111111111111111111111111111111111111,\n         0b0000000000000000000000001111111111111111110111111100000000000000,\n         0b0000000000000000000000000001111100000000000000000000000000000011,\n+        0b0000000000000000000000000000000001111111111111111111101111111111,\n         0b0000000000000000000000000000000000111010101010101010101010101010,\n         0b0000000000000000000000000000000000000000111110000000000001111111,\n         0b0000000000000000000000000000000000000000000000000000101111110111,\n@@ -416,10 +426,10 @@ pub mod n {\n         1632, 18876774, 31461440, 102765417, 111154926, 115349830, 132128880, 165684320, 186656630,\n         195046653, 199241735, 203436434, 216049184, 241215536, 249605104, 274792208, 278987015,\n         283181793, 295766104, 320933114, 383848032, 392238160, 434181712, 442570976, 455154768,\n-        463544256, 476128256, 480340576, 484535936, 497144544, 501340110, 509731136, 513925872,\n-        518121671, 522316913, 530706688, 551681008, 556989434,\n+        463544256, 476128256, 480340576, 484535936, 501338848, 505534414, 513925440, 518120176,\n+        522315975, 526511217, 534900992, 555875312, 561183738,\n     ];\n-    static OFFSETS: [u8; 267] = [\n+    static OFFSETS: [u8; 269] = [\n         48, 10, 120, 2, 5, 1, 2, 3, 0, 10, 134, 10, 198, 10, 0, 10, 118, 10, 4, 6, 108, 10, 118,\n         10, 118, 10, 2, 6, 110, 13, 115, 10, 8, 7, 103, 10, 104, 7, 7, 19, 109, 10, 96, 10, 118, 10,\n         70, 20, 0, 10, 70, 10, 0, 20, 0, 3, 239, 10, 6, 10, 22, 10, 0, 10, 128, 11, 165, 10, 6, 10,\n@@ -429,8 +439,9 @@ pub mod n {\n         29, 1, 8, 1, 134, 5, 202, 10, 0, 8, 25, 7, 39, 9, 75, 5, 22, 6, 160, 2, 2, 16, 2, 46, 64, 9,\n         52, 2, 30, 3, 75, 5, 104, 8, 24, 8, 41, 7, 0, 6, 48, 10, 0, 31, 158, 10, 42, 4, 112, 7, 134,\n         30, 128, 10, 60, 10, 144, 10, 7, 20, 251, 10, 0, 10, 118, 10, 0, 10, 102, 10, 102, 12, 0,\n-        19, 93, 10, 0, 29, 227, 10, 70, 10, 0, 21, 0, 111, 0, 10, 230, 10, 1, 7, 0, 23, 0, 20, 108,\n-        25, 0, 50, 0, 10, 0, 10, 0, 9, 128, 10, 0, 59, 1, 3, 1, 4, 76, 45, 1, 15, 0, 13, 0, 10, 0,\n+        19, 93, 10, 0, 29, 227, 10, 70, 10, 0, 21, 0, 111, 0, 10, 86, 10, 134, 10, 1, 7, 0, 23, 0,\n+        20, 108, 25, 0, 50, 0, 10, 0, 10, 0, 9, 128, 10, 0, 59, 1, 3, 1, 4, 76, 45, 1, 15, 0, 13, 0,\n+        10, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -444,37 +455,37 @@ pub mod n {\n #[rustfmt::skip]\n pub mod uppercase {\n     static BITSET_CHUNKS_MAP: [u8; 125] = [\n-        12, 15, 5, 5, 0, 5, 5, 2, 4, 11, 5, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-        5, 5, 5, 6, 5, 13, 5, 10, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-        5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 5, 5,\n-        5, 5, 9, 5, 3,\n+        12, 15, 6, 6, 0, 6, 6, 2, 4, 11, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n+        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n+        6, 6, 6, 5, 6, 14, 6, 10, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n+        6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 6, 6,\n+        6, 6, 9, 6, 3,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n-        [41, 41, 5, 33, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 5, 0],\n-        [41, 41, 5, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 38, 41, 41, 41, 41, 41, 17, 17, 61, 17, 40, 29, 24, 23],\n-        [41, 41, 41, 41, 9, 8, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 41, 41, 35, 28, 65, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 56, 41, 41, 41],\n-        [41, 41, 41, 41, 41, 41, 41, 41, 41, 46, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 41, 41, 41, 41, 41, 41, 41, 60, 59, 41, 20, 14, 16, 4],\n-        [41, 41, 41, 41, 47, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 41, 52, 43, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [41, 53, 41, 31, 34, 21, 22, 15, 13, 32, 41, 41, 41, 11, 30, 37],\n-        [48, 41, 9, 44, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [49, 36, 17, 27, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [50, 19, 2, 18, 10, 45, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41],\n-        [57, 1, 26, 54, 12, 7, 25, 55, 39, 58, 6, 3, 64, 63, 62, 66],\n+        [43, 43, 5, 34, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 5, 1],\n+        [43, 43, 5, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 39, 43, 43, 43, 43, 43, 17, 17, 62, 17, 42, 29, 24, 23],\n+        [43, 43, 43, 43, 9, 8, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 43, 43, 36, 28, 66, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 0, 43, 43, 43],\n+        [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 43, 43, 43, 43, 43, 43, 43, 54, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 43, 43, 43, 43, 43, 43, 43, 61, 60, 43, 20, 14, 16, 4],\n+        [43, 43, 43, 43, 55, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 58, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 43, 59, 45, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [43, 48, 43, 31, 35, 21, 22, 15, 13, 33, 43, 43, 43, 11, 30, 38],\n+        [51, 53, 26, 49, 12, 7, 25, 50, 40, 52, 6, 3, 65, 64, 63, 67],\n+        [56, 43, 9, 46, 43, 41, 32, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [57, 19, 2, 18, 10, 47, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n+        [57, 37, 17, 27, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n     ];\n-    static BITSET_CANONICAL: [u64; 41] = [\n+    static BITSET_CANONICAL: [u64; 43] = [\n+        0b0000011111111111111111111111111000000000000000000000000000000000,\n         0b0000000000111111111111111111111111111111111111111111111111111111,\n-        0b1111111111111111111111110000000000000000000000000011111111111111,\n         0b0101010101010101010101010101010101010101010101010101010000000001,\n         0b0000011111111111111111111111110000000000000000000000000000000001,\n-        0b0000000000100000000000000000000000000000000000000000001011110100,\n+        0b0000000000100000000000000000000000000001010000010000001011110101,\n         0b1111111111111111111111111111111100000000000000000000000000000000,\n         0b1111111111111111111111110000000000000000000000000000001111111111,\n         0b1111111111111111111100000000000000000000000000011111110001011111,\n@@ -502,6 +513,7 @@ pub mod uppercase {\n         0b0000000000000000111111110000000010101010000000000011111100000000,\n         0b0000000000000000000011111111101111111111111111101101011101000000,\n         0b0000000000000000000000000000000001111111011111111111111111111111,\n+        0b0000000000000000000000000000000000000000001101111111011111111111,\n         0b0000000000000000000000000000000000000000000000000101010101111010,\n         0b0000000000000000000000000000000000000000000000000010000010111111,\n         0b1010101001010101010101010101010101010101010101010101010101010101,\n@@ -510,11 +522,12 @@ pub mod uppercase {\n         0b1110011010010000010101010101010101010101000111001000000000000000,\n         0b1110011111111111111111111111111111111111111111110000000000000000,\n         0b1111000000000000000000000000001111111111111111111111111100000000,\n+        0b1111011111111111000000000000000000000000000000000000000000000000,\n         0b1111111100000000111111110000000000111111000000001111111100000000,\n     ];\n-    static BITSET_MAPPING: [(u8, u8); 26] = [\n-        (0, 182), (0, 74), (0, 166), (0, 162), (0, 159), (0, 150), (0, 148), (0, 142), (0, 135),\n-        (0, 134), (0, 131), (0, 64), (1, 115), (1, 66), (1, 70), (1, 83), (1, 12), (1, 8), (2, 164),\n+    static BITSET_MAPPING: [(u8, u8); 25] = [\n+        (0, 187), (0, 177), (0, 171), (0, 167), (0, 164), (0, 32), (0, 47), (0, 51), (0, 121),\n+        (0, 117), (0, 109), (1, 150), (1, 148), (1, 142), (1, 134), (1, 131), (1, 64), (2, 164),\n         (2, 146), (2, 20), (3, 146), (3, 140), (3, 134), (4, 178), (4, 171),\n     ];\n \n@@ -1051,113 +1064,116 @@ pub mod conversions {\n         ('\\u{2c28}', ['\\u{2c58}', '\\u{0}', '\\u{0}']), ('\\u{2c29}', ['\\u{2c59}', '\\u{0}', '\\u{0}']),\n         ('\\u{2c2a}', ['\\u{2c5a}', '\\u{0}', '\\u{0}']), ('\\u{2c2b}', ['\\u{2c5b}', '\\u{0}', '\\u{0}']),\n         ('\\u{2c2c}', ['\\u{2c5c}', '\\u{0}', '\\u{0}']), ('\\u{2c2d}', ['\\u{2c5d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c2e}', ['\\u{2c5e}', '\\u{0}', '\\u{0}']), ('\\u{2c60}', ['\\u{2c61}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c62}', ['\\u{26b}', '\\u{0}', '\\u{0}']), ('\\u{2c63}', ['\\u{1d7d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c64}', ['\\u{27d}', '\\u{0}', '\\u{0}']), ('\\u{2c67}', ['\\u{2c68}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c69}', ['\\u{2c6a}', '\\u{0}', '\\u{0}']), ('\\u{2c6b}', ['\\u{2c6c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c6d}', ['\\u{251}', '\\u{0}', '\\u{0}']), ('\\u{2c6e}', ['\\u{271}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c6f}', ['\\u{250}', '\\u{0}', '\\u{0}']), ('\\u{2c70}', ['\\u{252}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c72}', ['\\u{2c73}', '\\u{0}', '\\u{0}']), ('\\u{2c75}', ['\\u{2c76}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c7e}', ['\\u{23f}', '\\u{0}', '\\u{0}']), ('\\u{2c7f}', ['\\u{240}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c80}', ['\\u{2c81}', '\\u{0}', '\\u{0}']), ('\\u{2c82}', ['\\u{2c83}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c84}', ['\\u{2c85}', '\\u{0}', '\\u{0}']), ('\\u{2c86}', ['\\u{2c87}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c88}', ['\\u{2c89}', '\\u{0}', '\\u{0}']), ('\\u{2c8a}', ['\\u{2c8b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c8c}', ['\\u{2c8d}', '\\u{0}', '\\u{0}']), ('\\u{2c8e}', ['\\u{2c8f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c90}', ['\\u{2c91}', '\\u{0}', '\\u{0}']), ('\\u{2c92}', ['\\u{2c93}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c94}', ['\\u{2c95}', '\\u{0}', '\\u{0}']), ('\\u{2c96}', ['\\u{2c97}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c98}', ['\\u{2c99}', '\\u{0}', '\\u{0}']), ('\\u{2c9a}', ['\\u{2c9b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c9c}', ['\\u{2c9d}', '\\u{0}', '\\u{0}']), ('\\u{2c9e}', ['\\u{2c9f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca0}', ['\\u{2ca1}', '\\u{0}', '\\u{0}']), ('\\u{2ca2}', ['\\u{2ca3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca4}', ['\\u{2ca5}', '\\u{0}', '\\u{0}']), ('\\u{2ca6}', ['\\u{2ca7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca8}', ['\\u{2ca9}', '\\u{0}', '\\u{0}']), ('\\u{2caa}', ['\\u{2cab}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cac}', ['\\u{2cad}', '\\u{0}', '\\u{0}']), ('\\u{2cae}', ['\\u{2caf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb0}', ['\\u{2cb1}', '\\u{0}', '\\u{0}']), ('\\u{2cb2}', ['\\u{2cb3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb4}', ['\\u{2cb5}', '\\u{0}', '\\u{0}']), ('\\u{2cb6}', ['\\u{2cb7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb8}', ['\\u{2cb9}', '\\u{0}', '\\u{0}']), ('\\u{2cba}', ['\\u{2cbb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cbc}', ['\\u{2cbd}', '\\u{0}', '\\u{0}']), ('\\u{2cbe}', ['\\u{2cbf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc0}', ['\\u{2cc1}', '\\u{0}', '\\u{0}']), ('\\u{2cc2}', ['\\u{2cc3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc4}', ['\\u{2cc5}', '\\u{0}', '\\u{0}']), ('\\u{2cc6}', ['\\u{2cc7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc8}', ['\\u{2cc9}', '\\u{0}', '\\u{0}']), ('\\u{2cca}', ['\\u{2ccb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ccc}', ['\\u{2ccd}', '\\u{0}', '\\u{0}']), ('\\u{2cce}', ['\\u{2ccf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd0}', ['\\u{2cd1}', '\\u{0}', '\\u{0}']), ('\\u{2cd2}', ['\\u{2cd3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd4}', ['\\u{2cd5}', '\\u{0}', '\\u{0}']), ('\\u{2cd6}', ['\\u{2cd7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd8}', ['\\u{2cd9}', '\\u{0}', '\\u{0}']), ('\\u{2cda}', ['\\u{2cdb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cdc}', ['\\u{2cdd}', '\\u{0}', '\\u{0}']), ('\\u{2cde}', ['\\u{2cdf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ce0}', ['\\u{2ce1}', '\\u{0}', '\\u{0}']), ('\\u{2ce2}', ['\\u{2ce3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ceb}', ['\\u{2cec}', '\\u{0}', '\\u{0}']), ('\\u{2ced}', ['\\u{2cee}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cf2}', ['\\u{2cf3}', '\\u{0}', '\\u{0}']), ('\\u{a640}', ['\\u{a641}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a642}', ['\\u{a643}', '\\u{0}', '\\u{0}']), ('\\u{a644}', ['\\u{a645}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a646}', ['\\u{a647}', '\\u{0}', '\\u{0}']), ('\\u{a648}', ['\\u{a649}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a64a}', ['\\u{a64b}', '\\u{0}', '\\u{0}']), ('\\u{a64c}', ['\\u{a64d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a64e}', ['\\u{a64f}', '\\u{0}', '\\u{0}']), ('\\u{a650}', ['\\u{a651}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a652}', ['\\u{a653}', '\\u{0}', '\\u{0}']), ('\\u{a654}', ['\\u{a655}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a656}', ['\\u{a657}', '\\u{0}', '\\u{0}']), ('\\u{a658}', ['\\u{a659}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a65a}', ['\\u{a65b}', '\\u{0}', '\\u{0}']), ('\\u{a65c}', ['\\u{a65d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a65e}', ['\\u{a65f}', '\\u{0}', '\\u{0}']), ('\\u{a660}', ['\\u{a661}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a662}', ['\\u{a663}', '\\u{0}', '\\u{0}']), ('\\u{a664}', ['\\u{a665}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a666}', ['\\u{a667}', '\\u{0}', '\\u{0}']), ('\\u{a668}', ['\\u{a669}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a66a}', ['\\u{a66b}', '\\u{0}', '\\u{0}']), ('\\u{a66c}', ['\\u{a66d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a680}', ['\\u{a681}', '\\u{0}', '\\u{0}']), ('\\u{a682}', ['\\u{a683}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a684}', ['\\u{a685}', '\\u{0}', '\\u{0}']), ('\\u{a686}', ['\\u{a687}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a688}', ['\\u{a689}', '\\u{0}', '\\u{0}']), ('\\u{a68a}', ['\\u{a68b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a68c}', ['\\u{a68d}', '\\u{0}', '\\u{0}']), ('\\u{a68e}', ['\\u{a68f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a690}', ['\\u{a691}', '\\u{0}', '\\u{0}']), ('\\u{a692}', ['\\u{a693}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a694}', ['\\u{a695}', '\\u{0}', '\\u{0}']), ('\\u{a696}', ['\\u{a697}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a698}', ['\\u{a699}', '\\u{0}', '\\u{0}']), ('\\u{a69a}', ['\\u{a69b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a722}', ['\\u{a723}', '\\u{0}', '\\u{0}']), ('\\u{a724}', ['\\u{a725}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a726}', ['\\u{a727}', '\\u{0}', '\\u{0}']), ('\\u{a728}', ['\\u{a729}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a72a}', ['\\u{a72b}', '\\u{0}', '\\u{0}']), ('\\u{a72c}', ['\\u{a72d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a72e}', ['\\u{a72f}', '\\u{0}', '\\u{0}']), ('\\u{a732}', ['\\u{a733}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a734}', ['\\u{a735}', '\\u{0}', '\\u{0}']), ('\\u{a736}', ['\\u{a737}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a738}', ['\\u{a739}', '\\u{0}', '\\u{0}']), ('\\u{a73a}', ['\\u{a73b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a73c}', ['\\u{a73d}', '\\u{0}', '\\u{0}']), ('\\u{a73e}', ['\\u{a73f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a740}', ['\\u{a741}', '\\u{0}', '\\u{0}']), ('\\u{a742}', ['\\u{a743}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a744}', ['\\u{a745}', '\\u{0}', '\\u{0}']), ('\\u{a746}', ['\\u{a747}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a748}', ['\\u{a749}', '\\u{0}', '\\u{0}']), ('\\u{a74a}', ['\\u{a74b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a74c}', ['\\u{a74d}', '\\u{0}', '\\u{0}']), ('\\u{a74e}', ['\\u{a74f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a750}', ['\\u{a751}', '\\u{0}', '\\u{0}']), ('\\u{a752}', ['\\u{a753}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a754}', ['\\u{a755}', '\\u{0}', '\\u{0}']), ('\\u{a756}', ['\\u{a757}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a758}', ['\\u{a759}', '\\u{0}', '\\u{0}']), ('\\u{a75a}', ['\\u{a75b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a75c}', ['\\u{a75d}', '\\u{0}', '\\u{0}']), ('\\u{a75e}', ['\\u{a75f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a760}', ['\\u{a761}', '\\u{0}', '\\u{0}']), ('\\u{a762}', ['\\u{a763}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a764}', ['\\u{a765}', '\\u{0}', '\\u{0}']), ('\\u{a766}', ['\\u{a767}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a768}', ['\\u{a769}', '\\u{0}', '\\u{0}']), ('\\u{a76a}', ['\\u{a76b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a76c}', ['\\u{a76d}', '\\u{0}', '\\u{0}']), ('\\u{a76e}', ['\\u{a76f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a779}', ['\\u{a77a}', '\\u{0}', '\\u{0}']), ('\\u{a77b}', ['\\u{a77c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a77d}', ['\\u{1d79}', '\\u{0}', '\\u{0}']), ('\\u{a77e}', ['\\u{a77f}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a780}', ['\\u{a781}', '\\u{0}', '\\u{0}']), ('\\u{a782}', ['\\u{a783}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a784}', ['\\u{a785}', '\\u{0}', '\\u{0}']), ('\\u{a786}', ['\\u{a787}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a78b}', ['\\u{a78c}', '\\u{0}', '\\u{0}']), ('\\u{a78d}', ['\\u{265}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a790}', ['\\u{a791}', '\\u{0}', '\\u{0}']), ('\\u{a792}', ['\\u{a793}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a796}', ['\\u{a797}', '\\u{0}', '\\u{0}']), ('\\u{a798}', ['\\u{a799}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a79a}', ['\\u{a79b}', '\\u{0}', '\\u{0}']), ('\\u{a79c}', ['\\u{a79d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a79e}', ['\\u{a79f}', '\\u{0}', '\\u{0}']), ('\\u{a7a0}', ['\\u{a7a1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7a2}', ['\\u{a7a3}', '\\u{0}', '\\u{0}']), ('\\u{a7a4}', ['\\u{a7a5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7a6}', ['\\u{a7a7}', '\\u{0}', '\\u{0}']), ('\\u{a7a8}', ['\\u{a7a9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7aa}', ['\\u{266}', '\\u{0}', '\\u{0}']), ('\\u{a7ab}', ['\\u{25c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7ac}', ['\\u{261}', '\\u{0}', '\\u{0}']), ('\\u{a7ad}', ['\\u{26c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7ae}', ['\\u{26a}', '\\u{0}', '\\u{0}']), ('\\u{a7b0}', ['\\u{29e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7b1}', ['\\u{287}', '\\u{0}', '\\u{0}']), ('\\u{a7b2}', ['\\u{29d}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7b3}', ['\\u{ab53}', '\\u{0}', '\\u{0}']), ('\\u{a7b4}', ['\\u{a7b5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7b6}', ['\\u{a7b7}', '\\u{0}', '\\u{0}']), ('\\u{a7b8}', ['\\u{a7b9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7ba}', ['\\u{a7bb}', '\\u{0}', '\\u{0}']), ('\\u{a7bc}', ['\\u{a7bd}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7be}', ['\\u{a7bf}', '\\u{0}', '\\u{0}']), ('\\u{a7c2}', ['\\u{a7c3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c2e}', ['\\u{2c5e}', '\\u{0}', '\\u{0}']), ('\\u{2c2f}', ['\\u{2c5f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c60}', ['\\u{2c61}', '\\u{0}', '\\u{0}']), ('\\u{2c62}', ['\\u{26b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c63}', ['\\u{1d7d}', '\\u{0}', '\\u{0}']), ('\\u{2c64}', ['\\u{27d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c67}', ['\\u{2c68}', '\\u{0}', '\\u{0}']), ('\\u{2c69}', ['\\u{2c6a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c6b}', ['\\u{2c6c}', '\\u{0}', '\\u{0}']), ('\\u{2c6d}', ['\\u{251}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c6e}', ['\\u{271}', '\\u{0}', '\\u{0}']), ('\\u{2c6f}', ['\\u{250}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c70}', ['\\u{252}', '\\u{0}', '\\u{0}']), ('\\u{2c72}', ['\\u{2c73}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c75}', ['\\u{2c76}', '\\u{0}', '\\u{0}']), ('\\u{2c7e}', ['\\u{23f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c7f}', ['\\u{240}', '\\u{0}', '\\u{0}']), ('\\u{2c80}', ['\\u{2c81}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c82}', ['\\u{2c83}', '\\u{0}', '\\u{0}']), ('\\u{2c84}', ['\\u{2c85}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c86}', ['\\u{2c87}', '\\u{0}', '\\u{0}']), ('\\u{2c88}', ['\\u{2c89}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c8a}', ['\\u{2c8b}', '\\u{0}', '\\u{0}']), ('\\u{2c8c}', ['\\u{2c8d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c8e}', ['\\u{2c8f}', '\\u{0}', '\\u{0}']), ('\\u{2c90}', ['\\u{2c91}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c92}', ['\\u{2c93}', '\\u{0}', '\\u{0}']), ('\\u{2c94}', ['\\u{2c95}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c96}', ['\\u{2c97}', '\\u{0}', '\\u{0}']), ('\\u{2c98}', ['\\u{2c99}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c9a}', ['\\u{2c9b}', '\\u{0}', '\\u{0}']), ('\\u{2c9c}', ['\\u{2c9d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c9e}', ['\\u{2c9f}', '\\u{0}', '\\u{0}']), ('\\u{2ca0}', ['\\u{2ca1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ca2}', ['\\u{2ca3}', '\\u{0}', '\\u{0}']), ('\\u{2ca4}', ['\\u{2ca5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ca6}', ['\\u{2ca7}', '\\u{0}', '\\u{0}']), ('\\u{2ca8}', ['\\u{2ca9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2caa}', ['\\u{2cab}', '\\u{0}', '\\u{0}']), ('\\u{2cac}', ['\\u{2cad}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cae}', ['\\u{2caf}', '\\u{0}', '\\u{0}']), ('\\u{2cb0}', ['\\u{2cb1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cb2}', ['\\u{2cb3}', '\\u{0}', '\\u{0}']), ('\\u{2cb4}', ['\\u{2cb5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cb6}', ['\\u{2cb7}', '\\u{0}', '\\u{0}']), ('\\u{2cb8}', ['\\u{2cb9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cba}', ['\\u{2cbb}', '\\u{0}', '\\u{0}']), ('\\u{2cbc}', ['\\u{2cbd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cbe}', ['\\u{2cbf}', '\\u{0}', '\\u{0}']), ('\\u{2cc0}', ['\\u{2cc1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cc2}', ['\\u{2cc3}', '\\u{0}', '\\u{0}']), ('\\u{2cc4}', ['\\u{2cc5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cc6}', ['\\u{2cc7}', '\\u{0}', '\\u{0}']), ('\\u{2cc8}', ['\\u{2cc9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cca}', ['\\u{2ccb}', '\\u{0}', '\\u{0}']), ('\\u{2ccc}', ['\\u{2ccd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cce}', ['\\u{2ccf}', '\\u{0}', '\\u{0}']), ('\\u{2cd0}', ['\\u{2cd1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cd2}', ['\\u{2cd3}', '\\u{0}', '\\u{0}']), ('\\u{2cd4}', ['\\u{2cd5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cd6}', ['\\u{2cd7}', '\\u{0}', '\\u{0}']), ('\\u{2cd8}', ['\\u{2cd9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cda}', ['\\u{2cdb}', '\\u{0}', '\\u{0}']), ('\\u{2cdc}', ['\\u{2cdd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cde}', ['\\u{2cdf}', '\\u{0}', '\\u{0}']), ('\\u{2ce0}', ['\\u{2ce1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ce2}', ['\\u{2ce3}', '\\u{0}', '\\u{0}']), ('\\u{2ceb}', ['\\u{2cec}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ced}', ['\\u{2cee}', '\\u{0}', '\\u{0}']), ('\\u{2cf2}', ['\\u{2cf3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a640}', ['\\u{a641}', '\\u{0}', '\\u{0}']), ('\\u{a642}', ['\\u{a643}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a644}', ['\\u{a645}', '\\u{0}', '\\u{0}']), ('\\u{a646}', ['\\u{a647}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a648}', ['\\u{a649}', '\\u{0}', '\\u{0}']), ('\\u{a64a}', ['\\u{a64b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a64c}', ['\\u{a64d}', '\\u{0}', '\\u{0}']), ('\\u{a64e}', ['\\u{a64f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a650}', ['\\u{a651}', '\\u{0}', '\\u{0}']), ('\\u{a652}', ['\\u{a653}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a654}', ['\\u{a655}', '\\u{0}', '\\u{0}']), ('\\u{a656}', ['\\u{a657}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a658}', ['\\u{a659}', '\\u{0}', '\\u{0}']), ('\\u{a65a}', ['\\u{a65b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a65c}', ['\\u{a65d}', '\\u{0}', '\\u{0}']), ('\\u{a65e}', ['\\u{a65f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a660}', ['\\u{a661}', '\\u{0}', '\\u{0}']), ('\\u{a662}', ['\\u{a663}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a664}', ['\\u{a665}', '\\u{0}', '\\u{0}']), ('\\u{a666}', ['\\u{a667}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a668}', ['\\u{a669}', '\\u{0}', '\\u{0}']), ('\\u{a66a}', ['\\u{a66b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a66c}', ['\\u{a66d}', '\\u{0}', '\\u{0}']), ('\\u{a680}', ['\\u{a681}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a682}', ['\\u{a683}', '\\u{0}', '\\u{0}']), ('\\u{a684}', ['\\u{a685}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a686}', ['\\u{a687}', '\\u{0}', '\\u{0}']), ('\\u{a688}', ['\\u{a689}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a68a}', ['\\u{a68b}', '\\u{0}', '\\u{0}']), ('\\u{a68c}', ['\\u{a68d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a68e}', ['\\u{a68f}', '\\u{0}', '\\u{0}']), ('\\u{a690}', ['\\u{a691}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a692}', ['\\u{a693}', '\\u{0}', '\\u{0}']), ('\\u{a694}', ['\\u{a695}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a696}', ['\\u{a697}', '\\u{0}', '\\u{0}']), ('\\u{a698}', ['\\u{a699}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a69a}', ['\\u{a69b}', '\\u{0}', '\\u{0}']), ('\\u{a722}', ['\\u{a723}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a724}', ['\\u{a725}', '\\u{0}', '\\u{0}']), ('\\u{a726}', ['\\u{a727}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a728}', ['\\u{a729}', '\\u{0}', '\\u{0}']), ('\\u{a72a}', ['\\u{a72b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a72c}', ['\\u{a72d}', '\\u{0}', '\\u{0}']), ('\\u{a72e}', ['\\u{a72f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a732}', ['\\u{a733}', '\\u{0}', '\\u{0}']), ('\\u{a734}', ['\\u{a735}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a736}', ['\\u{a737}', '\\u{0}', '\\u{0}']), ('\\u{a738}', ['\\u{a739}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a73a}', ['\\u{a73b}', '\\u{0}', '\\u{0}']), ('\\u{a73c}', ['\\u{a73d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a73e}', ['\\u{a73f}', '\\u{0}', '\\u{0}']), ('\\u{a740}', ['\\u{a741}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a742}', ['\\u{a743}', '\\u{0}', '\\u{0}']), ('\\u{a744}', ['\\u{a745}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a746}', ['\\u{a747}', '\\u{0}', '\\u{0}']), ('\\u{a748}', ['\\u{a749}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a74a}', ['\\u{a74b}', '\\u{0}', '\\u{0}']), ('\\u{a74c}', ['\\u{a74d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a74e}', ['\\u{a74f}', '\\u{0}', '\\u{0}']), ('\\u{a750}', ['\\u{a751}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a752}', ['\\u{a753}', '\\u{0}', '\\u{0}']), ('\\u{a754}', ['\\u{a755}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a756}', ['\\u{a757}', '\\u{0}', '\\u{0}']), ('\\u{a758}', ['\\u{a759}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a75a}', ['\\u{a75b}', '\\u{0}', '\\u{0}']), ('\\u{a75c}', ['\\u{a75d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a75e}', ['\\u{a75f}', '\\u{0}', '\\u{0}']), ('\\u{a760}', ['\\u{a761}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a762}', ['\\u{a763}', '\\u{0}', '\\u{0}']), ('\\u{a764}', ['\\u{a765}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a766}', ['\\u{a767}', '\\u{0}', '\\u{0}']), ('\\u{a768}', ['\\u{a769}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a76a}', ['\\u{a76b}', '\\u{0}', '\\u{0}']), ('\\u{a76c}', ['\\u{a76d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a76e}', ['\\u{a76f}', '\\u{0}', '\\u{0}']), ('\\u{a779}', ['\\u{a77a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a77b}', ['\\u{a77c}', '\\u{0}', '\\u{0}']), ('\\u{a77d}', ['\\u{1d79}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a77e}', ['\\u{a77f}', '\\u{0}', '\\u{0}']), ('\\u{a780}', ['\\u{a781}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a782}', ['\\u{a783}', '\\u{0}', '\\u{0}']), ('\\u{a784}', ['\\u{a785}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a786}', ['\\u{a787}', '\\u{0}', '\\u{0}']), ('\\u{a78b}', ['\\u{a78c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a78d}', ['\\u{265}', '\\u{0}', '\\u{0}']), ('\\u{a790}', ['\\u{a791}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a792}', ['\\u{a793}', '\\u{0}', '\\u{0}']), ('\\u{a796}', ['\\u{a797}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a798}', ['\\u{a799}', '\\u{0}', '\\u{0}']), ('\\u{a79a}', ['\\u{a79b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a79c}', ['\\u{a79d}', '\\u{0}', '\\u{0}']), ('\\u{a79e}', ['\\u{a79f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7a0}', ['\\u{a7a1}', '\\u{0}', '\\u{0}']), ('\\u{a7a2}', ['\\u{a7a3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7a4}', ['\\u{a7a5}', '\\u{0}', '\\u{0}']), ('\\u{a7a6}', ['\\u{a7a7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7a8}', ['\\u{a7a9}', '\\u{0}', '\\u{0}']), ('\\u{a7aa}', ['\\u{266}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7ab}', ['\\u{25c}', '\\u{0}', '\\u{0}']), ('\\u{a7ac}', ['\\u{261}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7ad}', ['\\u{26c}', '\\u{0}', '\\u{0}']), ('\\u{a7ae}', ['\\u{26a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b0}', ['\\u{29e}', '\\u{0}', '\\u{0}']), ('\\u{a7b1}', ['\\u{287}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b2}', ['\\u{29d}', '\\u{0}', '\\u{0}']), ('\\u{a7b3}', ['\\u{ab53}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b4}', ['\\u{a7b5}', '\\u{0}', '\\u{0}']), ('\\u{a7b6}', ['\\u{a7b7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b8}', ['\\u{a7b9}', '\\u{0}', '\\u{0}']), ('\\u{a7ba}', ['\\u{a7bb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7bc}', ['\\u{a7bd}', '\\u{0}', '\\u{0}']), ('\\u{a7be}', ['\\u{a7bf}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7c0}', ['\\u{a7c1}', '\\u{0}', '\\u{0}']), ('\\u{a7c2}', ['\\u{a7c3}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7c4}', ['\\u{a794}', '\\u{0}', '\\u{0}']), ('\\u{a7c5}', ['\\u{282}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7c6}', ['\\u{1d8e}', '\\u{0}', '\\u{0}']), ('\\u{a7c7}', ['\\u{a7c8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7c9}', ['\\u{a7ca}', '\\u{0}', '\\u{0}']), ('\\u{a7f5}', ['\\u{a7f6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff21}', ['\\u{ff41}', '\\u{0}', '\\u{0}']), ('\\u{ff22}', ['\\u{ff42}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff23}', ['\\u{ff43}', '\\u{0}', '\\u{0}']), ('\\u{ff24}', ['\\u{ff44}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff25}', ['\\u{ff45}', '\\u{0}', '\\u{0}']), ('\\u{ff26}', ['\\u{ff46}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff27}', ['\\u{ff47}', '\\u{0}', '\\u{0}']), ('\\u{ff28}', ['\\u{ff48}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff29}', ['\\u{ff49}', '\\u{0}', '\\u{0}']), ('\\u{ff2a}', ['\\u{ff4a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2b}', ['\\u{ff4b}', '\\u{0}', '\\u{0}']), ('\\u{ff2c}', ['\\u{ff4c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2d}', ['\\u{ff4d}', '\\u{0}', '\\u{0}']), ('\\u{ff2e}', ['\\u{ff4e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff2f}', ['\\u{ff4f}', '\\u{0}', '\\u{0}']), ('\\u{ff30}', ['\\u{ff50}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff31}', ['\\u{ff51}', '\\u{0}', '\\u{0}']), ('\\u{ff32}', ['\\u{ff52}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff33}', ['\\u{ff53}', '\\u{0}', '\\u{0}']), ('\\u{ff34}', ['\\u{ff54}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff35}', ['\\u{ff55}', '\\u{0}', '\\u{0}']), ('\\u{ff36}', ['\\u{ff56}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff37}', ['\\u{ff57}', '\\u{0}', '\\u{0}']), ('\\u{ff38}', ['\\u{ff58}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ff39}', ['\\u{ff59}', '\\u{0}', '\\u{0}']), ('\\u{ff3a}', ['\\u{ff5a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7c9}', ['\\u{a7ca}', '\\u{0}', '\\u{0}']), ('\\u{a7d0}', ['\\u{a7d1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7d6}', ['\\u{a7d7}', '\\u{0}', '\\u{0}']), ('\\u{a7d8}', ['\\u{a7d9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7f5}', ['\\u{a7f6}', '\\u{0}', '\\u{0}']), ('\\u{ff21}', ['\\u{ff41}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff22}', ['\\u{ff42}', '\\u{0}', '\\u{0}']), ('\\u{ff23}', ['\\u{ff43}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff24}', ['\\u{ff44}', '\\u{0}', '\\u{0}']), ('\\u{ff25}', ['\\u{ff45}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff26}', ['\\u{ff46}', '\\u{0}', '\\u{0}']), ('\\u{ff27}', ['\\u{ff47}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff28}', ['\\u{ff48}', '\\u{0}', '\\u{0}']), ('\\u{ff29}', ['\\u{ff49}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2a}', ['\\u{ff4a}', '\\u{0}', '\\u{0}']), ('\\u{ff2b}', ['\\u{ff4b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2c}', ['\\u{ff4c}', '\\u{0}', '\\u{0}']), ('\\u{ff2d}', ['\\u{ff4d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff2e}', ['\\u{ff4e}', '\\u{0}', '\\u{0}']), ('\\u{ff2f}', ['\\u{ff4f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff30}', ['\\u{ff50}', '\\u{0}', '\\u{0}']), ('\\u{ff31}', ['\\u{ff51}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff32}', ['\\u{ff52}', '\\u{0}', '\\u{0}']), ('\\u{ff33}', ['\\u{ff53}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff34}', ['\\u{ff54}', '\\u{0}', '\\u{0}']), ('\\u{ff35}', ['\\u{ff55}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff36}', ['\\u{ff56}', '\\u{0}', '\\u{0}']), ('\\u{ff37}', ['\\u{ff57}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff38}', ['\\u{ff58}', '\\u{0}', '\\u{0}']), ('\\u{ff39}', ['\\u{ff59}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ff3a}', ['\\u{ff5a}', '\\u{0}', '\\u{0}']),\n         ('\\u{10400}', ['\\u{10428}', '\\u{0}', '\\u{0}']),\n         ('\\u{10401}', ['\\u{10429}', '\\u{0}', '\\u{0}']),\n         ('\\u{10402}', ['\\u{1042a}', '\\u{0}', '\\u{0}']),\n@@ -1234,6 +1250,41 @@ pub mod conversions {\n         ('\\u{104d1}', ['\\u{104f9}', '\\u{0}', '\\u{0}']),\n         ('\\u{104d2}', ['\\u{104fa}', '\\u{0}', '\\u{0}']),\n         ('\\u{104d3}', ['\\u{104fb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10570}', ['\\u{10597}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10571}', ['\\u{10598}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10572}', ['\\u{10599}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10573}', ['\\u{1059a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10574}', ['\\u{1059b}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10575}', ['\\u{1059c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10576}', ['\\u{1059d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10577}', ['\\u{1059e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10578}', ['\\u{1059f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10579}', ['\\u{105a0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1057a}', ['\\u{105a1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1057c}', ['\\u{105a3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1057d}', ['\\u{105a4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1057e}', ['\\u{105a5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1057f}', ['\\u{105a6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10580}', ['\\u{105a7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10581}', ['\\u{105a8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10582}', ['\\u{105a9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10583}', ['\\u{105aa}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10584}', ['\\u{105ab}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10585}', ['\\u{105ac}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10586}', ['\\u{105ad}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10587}', ['\\u{105ae}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10588}', ['\\u{105af}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10589}', ['\\u{105b0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1058a}', ['\\u{105b1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1058c}', ['\\u{105b3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1058d}', ['\\u{105b4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1058e}', ['\\u{105b5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1058f}', ['\\u{105b6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10590}', ['\\u{105b7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10591}', ['\\u{105b8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10592}', ['\\u{105b9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10594}', ['\\u{105bb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10595}', ['\\u{105bc}', '\\u{0}', '\\u{0}']),\n         ('\\u{10c80}', ['\\u{10cc0}', '\\u{0}', '\\u{0}']),\n         ('\\u{10c81}', ['\\u{10cc1}', '\\u{0}', '\\u{0}']),\n         ('\\u{10c82}', ['\\u{10cc2}', '\\u{0}', '\\u{0}']),\n@@ -1892,154 +1943,157 @@ pub mod conversions {\n         ('\\u{2c59}', ['\\u{2c29}', '\\u{0}', '\\u{0}']), ('\\u{2c5a}', ['\\u{2c2a}', '\\u{0}', '\\u{0}']),\n         ('\\u{2c5b}', ['\\u{2c2b}', '\\u{0}', '\\u{0}']), ('\\u{2c5c}', ['\\u{2c2c}', '\\u{0}', '\\u{0}']),\n         ('\\u{2c5d}', ['\\u{2c2d}', '\\u{0}', '\\u{0}']), ('\\u{2c5e}', ['\\u{2c2e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c61}', ['\\u{2c60}', '\\u{0}', '\\u{0}']), ('\\u{2c65}', ['\\u{23a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c66}', ['\\u{23e}', '\\u{0}', '\\u{0}']), ('\\u{2c68}', ['\\u{2c67}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c6a}', ['\\u{2c69}', '\\u{0}', '\\u{0}']), ('\\u{2c6c}', ['\\u{2c6b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c73}', ['\\u{2c72}', '\\u{0}', '\\u{0}']), ('\\u{2c76}', ['\\u{2c75}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c81}', ['\\u{2c80}', '\\u{0}', '\\u{0}']), ('\\u{2c83}', ['\\u{2c82}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c85}', ['\\u{2c84}', '\\u{0}', '\\u{0}']), ('\\u{2c87}', ['\\u{2c86}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c89}', ['\\u{2c88}', '\\u{0}', '\\u{0}']), ('\\u{2c8b}', ['\\u{2c8a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c8d}', ['\\u{2c8c}', '\\u{0}', '\\u{0}']), ('\\u{2c8f}', ['\\u{2c8e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c91}', ['\\u{2c90}', '\\u{0}', '\\u{0}']), ('\\u{2c93}', ['\\u{2c92}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c95}', ['\\u{2c94}', '\\u{0}', '\\u{0}']), ('\\u{2c97}', ['\\u{2c96}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c99}', ['\\u{2c98}', '\\u{0}', '\\u{0}']), ('\\u{2c9b}', ['\\u{2c9a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2c9d}', ['\\u{2c9c}', '\\u{0}', '\\u{0}']), ('\\u{2c9f}', ['\\u{2c9e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca1}', ['\\u{2ca0}', '\\u{0}', '\\u{0}']), ('\\u{2ca3}', ['\\u{2ca2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca5}', ['\\u{2ca4}', '\\u{0}', '\\u{0}']), ('\\u{2ca7}', ['\\u{2ca6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ca9}', ['\\u{2ca8}', '\\u{0}', '\\u{0}']), ('\\u{2cab}', ['\\u{2caa}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cad}', ['\\u{2cac}', '\\u{0}', '\\u{0}']), ('\\u{2caf}', ['\\u{2cae}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb1}', ['\\u{2cb0}', '\\u{0}', '\\u{0}']), ('\\u{2cb3}', ['\\u{2cb2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb5}', ['\\u{2cb4}', '\\u{0}', '\\u{0}']), ('\\u{2cb7}', ['\\u{2cb6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cb9}', ['\\u{2cb8}', '\\u{0}', '\\u{0}']), ('\\u{2cbb}', ['\\u{2cba}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cbd}', ['\\u{2cbc}', '\\u{0}', '\\u{0}']), ('\\u{2cbf}', ['\\u{2cbe}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc1}', ['\\u{2cc0}', '\\u{0}', '\\u{0}']), ('\\u{2cc3}', ['\\u{2cc2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc5}', ['\\u{2cc4}', '\\u{0}', '\\u{0}']), ('\\u{2cc7}', ['\\u{2cc6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cc9}', ['\\u{2cc8}', '\\u{0}', '\\u{0}']), ('\\u{2ccb}', ['\\u{2cca}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ccd}', ['\\u{2ccc}', '\\u{0}', '\\u{0}']), ('\\u{2ccf}', ['\\u{2cce}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd1}', ['\\u{2cd0}', '\\u{0}', '\\u{0}']), ('\\u{2cd3}', ['\\u{2cd2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd5}', ['\\u{2cd4}', '\\u{0}', '\\u{0}']), ('\\u{2cd7}', ['\\u{2cd6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cd9}', ['\\u{2cd8}', '\\u{0}', '\\u{0}']), ('\\u{2cdb}', ['\\u{2cda}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cdd}', ['\\u{2cdc}', '\\u{0}', '\\u{0}']), ('\\u{2cdf}', ['\\u{2cde}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2ce1}', ['\\u{2ce0}', '\\u{0}', '\\u{0}']), ('\\u{2ce3}', ['\\u{2ce2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cec}', ['\\u{2ceb}', '\\u{0}', '\\u{0}']), ('\\u{2cee}', ['\\u{2ced}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2cf3}', ['\\u{2cf2}', '\\u{0}', '\\u{0}']), ('\\u{2d00}', ['\\u{10a0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d01}', ['\\u{10a1}', '\\u{0}', '\\u{0}']), ('\\u{2d02}', ['\\u{10a2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d03}', ['\\u{10a3}', '\\u{0}', '\\u{0}']), ('\\u{2d04}', ['\\u{10a4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d05}', ['\\u{10a5}', '\\u{0}', '\\u{0}']), ('\\u{2d06}', ['\\u{10a6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d07}', ['\\u{10a7}', '\\u{0}', '\\u{0}']), ('\\u{2d08}', ['\\u{10a8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d09}', ['\\u{10a9}', '\\u{0}', '\\u{0}']), ('\\u{2d0a}', ['\\u{10aa}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d0b}', ['\\u{10ab}', '\\u{0}', '\\u{0}']), ('\\u{2d0c}', ['\\u{10ac}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d0d}', ['\\u{10ad}', '\\u{0}', '\\u{0}']), ('\\u{2d0e}', ['\\u{10ae}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d0f}', ['\\u{10af}', '\\u{0}', '\\u{0}']), ('\\u{2d10}', ['\\u{10b0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d11}', ['\\u{10b1}', '\\u{0}', '\\u{0}']), ('\\u{2d12}', ['\\u{10b2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d13}', ['\\u{10b3}', '\\u{0}', '\\u{0}']), ('\\u{2d14}', ['\\u{10b4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d15}', ['\\u{10b5}', '\\u{0}', '\\u{0}']), ('\\u{2d16}', ['\\u{10b6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d17}', ['\\u{10b7}', '\\u{0}', '\\u{0}']), ('\\u{2d18}', ['\\u{10b8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d19}', ['\\u{10b9}', '\\u{0}', '\\u{0}']), ('\\u{2d1a}', ['\\u{10ba}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d1b}', ['\\u{10bb}', '\\u{0}', '\\u{0}']), ('\\u{2d1c}', ['\\u{10bc}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d1d}', ['\\u{10bd}', '\\u{0}', '\\u{0}']), ('\\u{2d1e}', ['\\u{10be}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d1f}', ['\\u{10bf}', '\\u{0}', '\\u{0}']), ('\\u{2d20}', ['\\u{10c0}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d21}', ['\\u{10c1}', '\\u{0}', '\\u{0}']), ('\\u{2d22}', ['\\u{10c2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d23}', ['\\u{10c3}', '\\u{0}', '\\u{0}']), ('\\u{2d24}', ['\\u{10c4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d25}', ['\\u{10c5}', '\\u{0}', '\\u{0}']), ('\\u{2d27}', ['\\u{10c7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{2d2d}', ['\\u{10cd}', '\\u{0}', '\\u{0}']), ('\\u{a641}', ['\\u{a640}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a643}', ['\\u{a642}', '\\u{0}', '\\u{0}']), ('\\u{a645}', ['\\u{a644}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a647}', ['\\u{a646}', '\\u{0}', '\\u{0}']), ('\\u{a649}', ['\\u{a648}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a64b}', ['\\u{a64a}', '\\u{0}', '\\u{0}']), ('\\u{a64d}', ['\\u{a64c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a64f}', ['\\u{a64e}', '\\u{0}', '\\u{0}']), ('\\u{a651}', ['\\u{a650}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a653}', ['\\u{a652}', '\\u{0}', '\\u{0}']), ('\\u{a655}', ['\\u{a654}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a657}', ['\\u{a656}', '\\u{0}', '\\u{0}']), ('\\u{a659}', ['\\u{a658}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a65b}', ['\\u{a65a}', '\\u{0}', '\\u{0}']), ('\\u{a65d}', ['\\u{a65c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a65f}', ['\\u{a65e}', '\\u{0}', '\\u{0}']), ('\\u{a661}', ['\\u{a660}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a663}', ['\\u{a662}', '\\u{0}', '\\u{0}']), ('\\u{a665}', ['\\u{a664}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a667}', ['\\u{a666}', '\\u{0}', '\\u{0}']), ('\\u{a669}', ['\\u{a668}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a66b}', ['\\u{a66a}', '\\u{0}', '\\u{0}']), ('\\u{a66d}', ['\\u{a66c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a681}', ['\\u{a680}', '\\u{0}', '\\u{0}']), ('\\u{a683}', ['\\u{a682}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a685}', ['\\u{a684}', '\\u{0}', '\\u{0}']), ('\\u{a687}', ['\\u{a686}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a689}', ['\\u{a688}', '\\u{0}', '\\u{0}']), ('\\u{a68b}', ['\\u{a68a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a68d}', ['\\u{a68c}', '\\u{0}', '\\u{0}']), ('\\u{a68f}', ['\\u{a68e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a691}', ['\\u{a690}', '\\u{0}', '\\u{0}']), ('\\u{a693}', ['\\u{a692}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a695}', ['\\u{a694}', '\\u{0}', '\\u{0}']), ('\\u{a697}', ['\\u{a696}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a699}', ['\\u{a698}', '\\u{0}', '\\u{0}']), ('\\u{a69b}', ['\\u{a69a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a723}', ['\\u{a722}', '\\u{0}', '\\u{0}']), ('\\u{a725}', ['\\u{a724}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a727}', ['\\u{a726}', '\\u{0}', '\\u{0}']), ('\\u{a729}', ['\\u{a728}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a72b}', ['\\u{a72a}', '\\u{0}', '\\u{0}']), ('\\u{a72d}', ['\\u{a72c}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a72f}', ['\\u{a72e}', '\\u{0}', '\\u{0}']), ('\\u{a733}', ['\\u{a732}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a735}', ['\\u{a734}', '\\u{0}', '\\u{0}']), ('\\u{a737}', ['\\u{a736}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a739}', ['\\u{a738}', '\\u{0}', '\\u{0}']), ('\\u{a73b}', ['\\u{a73a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a73d}', ['\\u{a73c}', '\\u{0}', '\\u{0}']), ('\\u{a73f}', ['\\u{a73e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a741}', ['\\u{a740}', '\\u{0}', '\\u{0}']), ('\\u{a743}', ['\\u{a742}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a745}', ['\\u{a744}', '\\u{0}', '\\u{0}']), ('\\u{a747}', ['\\u{a746}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a749}', ['\\u{a748}', '\\u{0}', '\\u{0}']), ('\\u{a74b}', ['\\u{a74a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a74d}', ['\\u{a74c}', '\\u{0}', '\\u{0}']), ('\\u{a74f}', ['\\u{a74e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a751}', ['\\u{a750}', '\\u{0}', '\\u{0}']), ('\\u{a753}', ['\\u{a752}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a755}', ['\\u{a754}', '\\u{0}', '\\u{0}']), ('\\u{a757}', ['\\u{a756}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a759}', ['\\u{a758}', '\\u{0}', '\\u{0}']), ('\\u{a75b}', ['\\u{a75a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a75d}', ['\\u{a75c}', '\\u{0}', '\\u{0}']), ('\\u{a75f}', ['\\u{a75e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a761}', ['\\u{a760}', '\\u{0}', '\\u{0}']), ('\\u{a763}', ['\\u{a762}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a765}', ['\\u{a764}', '\\u{0}', '\\u{0}']), ('\\u{a767}', ['\\u{a766}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a769}', ['\\u{a768}', '\\u{0}', '\\u{0}']), ('\\u{a76b}', ['\\u{a76a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a76d}', ['\\u{a76c}', '\\u{0}', '\\u{0}']), ('\\u{a76f}', ['\\u{a76e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a77a}', ['\\u{a779}', '\\u{0}', '\\u{0}']), ('\\u{a77c}', ['\\u{a77b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a77f}', ['\\u{a77e}', '\\u{0}', '\\u{0}']), ('\\u{a781}', ['\\u{a780}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a783}', ['\\u{a782}', '\\u{0}', '\\u{0}']), ('\\u{a785}', ['\\u{a784}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a787}', ['\\u{a786}', '\\u{0}', '\\u{0}']), ('\\u{a78c}', ['\\u{a78b}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a791}', ['\\u{a790}', '\\u{0}', '\\u{0}']), ('\\u{a793}', ['\\u{a792}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a794}', ['\\u{a7c4}', '\\u{0}', '\\u{0}']), ('\\u{a797}', ['\\u{a796}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a799}', ['\\u{a798}', '\\u{0}', '\\u{0}']), ('\\u{a79b}', ['\\u{a79a}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a79d}', ['\\u{a79c}', '\\u{0}', '\\u{0}']), ('\\u{a79f}', ['\\u{a79e}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7a1}', ['\\u{a7a0}', '\\u{0}', '\\u{0}']), ('\\u{a7a3}', ['\\u{a7a2}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7a5}', ['\\u{a7a4}', '\\u{0}', '\\u{0}']), ('\\u{a7a7}', ['\\u{a7a6}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7a9}', ['\\u{a7a8}', '\\u{0}', '\\u{0}']), ('\\u{a7b5}', ['\\u{a7b4}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7b7}', ['\\u{a7b6}', '\\u{0}', '\\u{0}']), ('\\u{a7b9}', ['\\u{a7b8}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7bb}', ['\\u{a7ba}', '\\u{0}', '\\u{0}']), ('\\u{a7bd}', ['\\u{a7bc}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7bf}', ['\\u{a7be}', '\\u{0}', '\\u{0}']), ('\\u{a7c3}', ['\\u{a7c2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c5f}', ['\\u{2c2f}', '\\u{0}', '\\u{0}']), ('\\u{2c61}', ['\\u{2c60}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c65}', ['\\u{23a}', '\\u{0}', '\\u{0}']), ('\\u{2c66}', ['\\u{23e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c68}', ['\\u{2c67}', '\\u{0}', '\\u{0}']), ('\\u{2c6a}', ['\\u{2c69}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c6c}', ['\\u{2c6b}', '\\u{0}', '\\u{0}']), ('\\u{2c73}', ['\\u{2c72}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c76}', ['\\u{2c75}', '\\u{0}', '\\u{0}']), ('\\u{2c81}', ['\\u{2c80}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c83}', ['\\u{2c82}', '\\u{0}', '\\u{0}']), ('\\u{2c85}', ['\\u{2c84}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c87}', ['\\u{2c86}', '\\u{0}', '\\u{0}']), ('\\u{2c89}', ['\\u{2c88}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c8b}', ['\\u{2c8a}', '\\u{0}', '\\u{0}']), ('\\u{2c8d}', ['\\u{2c8c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c8f}', ['\\u{2c8e}', '\\u{0}', '\\u{0}']), ('\\u{2c91}', ['\\u{2c90}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c93}', ['\\u{2c92}', '\\u{0}', '\\u{0}']), ('\\u{2c95}', ['\\u{2c94}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c97}', ['\\u{2c96}', '\\u{0}', '\\u{0}']), ('\\u{2c99}', ['\\u{2c98}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c9b}', ['\\u{2c9a}', '\\u{0}', '\\u{0}']), ('\\u{2c9d}', ['\\u{2c9c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2c9f}', ['\\u{2c9e}', '\\u{0}', '\\u{0}']), ('\\u{2ca1}', ['\\u{2ca0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ca3}', ['\\u{2ca2}', '\\u{0}', '\\u{0}']), ('\\u{2ca5}', ['\\u{2ca4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ca7}', ['\\u{2ca6}', '\\u{0}', '\\u{0}']), ('\\u{2ca9}', ['\\u{2ca8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cab}', ['\\u{2caa}', '\\u{0}', '\\u{0}']), ('\\u{2cad}', ['\\u{2cac}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2caf}', ['\\u{2cae}', '\\u{0}', '\\u{0}']), ('\\u{2cb1}', ['\\u{2cb0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cb3}', ['\\u{2cb2}', '\\u{0}', '\\u{0}']), ('\\u{2cb5}', ['\\u{2cb4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cb7}', ['\\u{2cb6}', '\\u{0}', '\\u{0}']), ('\\u{2cb9}', ['\\u{2cb8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cbb}', ['\\u{2cba}', '\\u{0}', '\\u{0}']), ('\\u{2cbd}', ['\\u{2cbc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cbf}', ['\\u{2cbe}', '\\u{0}', '\\u{0}']), ('\\u{2cc1}', ['\\u{2cc0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cc3}', ['\\u{2cc2}', '\\u{0}', '\\u{0}']), ('\\u{2cc5}', ['\\u{2cc4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cc7}', ['\\u{2cc6}', '\\u{0}', '\\u{0}']), ('\\u{2cc9}', ['\\u{2cc8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ccb}', ['\\u{2cca}', '\\u{0}', '\\u{0}']), ('\\u{2ccd}', ['\\u{2ccc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ccf}', ['\\u{2cce}', '\\u{0}', '\\u{0}']), ('\\u{2cd1}', ['\\u{2cd0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cd3}', ['\\u{2cd2}', '\\u{0}', '\\u{0}']), ('\\u{2cd5}', ['\\u{2cd4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cd7}', ['\\u{2cd6}', '\\u{0}', '\\u{0}']), ('\\u{2cd9}', ['\\u{2cd8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cdb}', ['\\u{2cda}', '\\u{0}', '\\u{0}']), ('\\u{2cdd}', ['\\u{2cdc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cdf}', ['\\u{2cde}', '\\u{0}', '\\u{0}']), ('\\u{2ce1}', ['\\u{2ce0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2ce3}', ['\\u{2ce2}', '\\u{0}', '\\u{0}']), ('\\u{2cec}', ['\\u{2ceb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2cee}', ['\\u{2ced}', '\\u{0}', '\\u{0}']), ('\\u{2cf3}', ['\\u{2cf2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d00}', ['\\u{10a0}', '\\u{0}', '\\u{0}']), ('\\u{2d01}', ['\\u{10a1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d02}', ['\\u{10a2}', '\\u{0}', '\\u{0}']), ('\\u{2d03}', ['\\u{10a3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d04}', ['\\u{10a4}', '\\u{0}', '\\u{0}']), ('\\u{2d05}', ['\\u{10a5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d06}', ['\\u{10a6}', '\\u{0}', '\\u{0}']), ('\\u{2d07}', ['\\u{10a7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d08}', ['\\u{10a8}', '\\u{0}', '\\u{0}']), ('\\u{2d09}', ['\\u{10a9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d0a}', ['\\u{10aa}', '\\u{0}', '\\u{0}']), ('\\u{2d0b}', ['\\u{10ab}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d0c}', ['\\u{10ac}', '\\u{0}', '\\u{0}']), ('\\u{2d0d}', ['\\u{10ad}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d0e}', ['\\u{10ae}', '\\u{0}', '\\u{0}']), ('\\u{2d0f}', ['\\u{10af}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d10}', ['\\u{10b0}', '\\u{0}', '\\u{0}']), ('\\u{2d11}', ['\\u{10b1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d12}', ['\\u{10b2}', '\\u{0}', '\\u{0}']), ('\\u{2d13}', ['\\u{10b3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d14}', ['\\u{10b4}', '\\u{0}', '\\u{0}']), ('\\u{2d15}', ['\\u{10b5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d16}', ['\\u{10b6}', '\\u{0}', '\\u{0}']), ('\\u{2d17}', ['\\u{10b7}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d18}', ['\\u{10b8}', '\\u{0}', '\\u{0}']), ('\\u{2d19}', ['\\u{10b9}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d1a}', ['\\u{10ba}', '\\u{0}', '\\u{0}']), ('\\u{2d1b}', ['\\u{10bb}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d1c}', ['\\u{10bc}', '\\u{0}', '\\u{0}']), ('\\u{2d1d}', ['\\u{10bd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d1e}', ['\\u{10be}', '\\u{0}', '\\u{0}']), ('\\u{2d1f}', ['\\u{10bf}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d20}', ['\\u{10c0}', '\\u{0}', '\\u{0}']), ('\\u{2d21}', ['\\u{10c1}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d22}', ['\\u{10c2}', '\\u{0}', '\\u{0}']), ('\\u{2d23}', ['\\u{10c3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d24}', ['\\u{10c4}', '\\u{0}', '\\u{0}']), ('\\u{2d25}', ['\\u{10c5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{2d27}', ['\\u{10c7}', '\\u{0}', '\\u{0}']), ('\\u{2d2d}', ['\\u{10cd}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a641}', ['\\u{a640}', '\\u{0}', '\\u{0}']), ('\\u{a643}', ['\\u{a642}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a645}', ['\\u{a644}', '\\u{0}', '\\u{0}']), ('\\u{a647}', ['\\u{a646}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a649}', ['\\u{a648}', '\\u{0}', '\\u{0}']), ('\\u{a64b}', ['\\u{a64a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a64d}', ['\\u{a64c}', '\\u{0}', '\\u{0}']), ('\\u{a64f}', ['\\u{a64e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a651}', ['\\u{a650}', '\\u{0}', '\\u{0}']), ('\\u{a653}', ['\\u{a652}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a655}', ['\\u{a654}', '\\u{0}', '\\u{0}']), ('\\u{a657}', ['\\u{a656}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a659}', ['\\u{a658}', '\\u{0}', '\\u{0}']), ('\\u{a65b}', ['\\u{a65a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a65d}', ['\\u{a65c}', '\\u{0}', '\\u{0}']), ('\\u{a65f}', ['\\u{a65e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a661}', ['\\u{a660}', '\\u{0}', '\\u{0}']), ('\\u{a663}', ['\\u{a662}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a665}', ['\\u{a664}', '\\u{0}', '\\u{0}']), ('\\u{a667}', ['\\u{a666}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a669}', ['\\u{a668}', '\\u{0}', '\\u{0}']), ('\\u{a66b}', ['\\u{a66a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a66d}', ['\\u{a66c}', '\\u{0}', '\\u{0}']), ('\\u{a681}', ['\\u{a680}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a683}', ['\\u{a682}', '\\u{0}', '\\u{0}']), ('\\u{a685}', ['\\u{a684}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a687}', ['\\u{a686}', '\\u{0}', '\\u{0}']), ('\\u{a689}', ['\\u{a688}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a68b}', ['\\u{a68a}', '\\u{0}', '\\u{0}']), ('\\u{a68d}', ['\\u{a68c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a68f}', ['\\u{a68e}', '\\u{0}', '\\u{0}']), ('\\u{a691}', ['\\u{a690}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a693}', ['\\u{a692}', '\\u{0}', '\\u{0}']), ('\\u{a695}', ['\\u{a694}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a697}', ['\\u{a696}', '\\u{0}', '\\u{0}']), ('\\u{a699}', ['\\u{a698}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a69b}', ['\\u{a69a}', '\\u{0}', '\\u{0}']), ('\\u{a723}', ['\\u{a722}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a725}', ['\\u{a724}', '\\u{0}', '\\u{0}']), ('\\u{a727}', ['\\u{a726}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a729}', ['\\u{a728}', '\\u{0}', '\\u{0}']), ('\\u{a72b}', ['\\u{a72a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a72d}', ['\\u{a72c}', '\\u{0}', '\\u{0}']), ('\\u{a72f}', ['\\u{a72e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a733}', ['\\u{a732}', '\\u{0}', '\\u{0}']), ('\\u{a735}', ['\\u{a734}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a737}', ['\\u{a736}', '\\u{0}', '\\u{0}']), ('\\u{a739}', ['\\u{a738}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a73b}', ['\\u{a73a}', '\\u{0}', '\\u{0}']), ('\\u{a73d}', ['\\u{a73c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a73f}', ['\\u{a73e}', '\\u{0}', '\\u{0}']), ('\\u{a741}', ['\\u{a740}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a743}', ['\\u{a742}', '\\u{0}', '\\u{0}']), ('\\u{a745}', ['\\u{a744}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a747}', ['\\u{a746}', '\\u{0}', '\\u{0}']), ('\\u{a749}', ['\\u{a748}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a74b}', ['\\u{a74a}', '\\u{0}', '\\u{0}']), ('\\u{a74d}', ['\\u{a74c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a74f}', ['\\u{a74e}', '\\u{0}', '\\u{0}']), ('\\u{a751}', ['\\u{a750}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a753}', ['\\u{a752}', '\\u{0}', '\\u{0}']), ('\\u{a755}', ['\\u{a754}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a757}', ['\\u{a756}', '\\u{0}', '\\u{0}']), ('\\u{a759}', ['\\u{a758}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a75b}', ['\\u{a75a}', '\\u{0}', '\\u{0}']), ('\\u{a75d}', ['\\u{a75c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a75f}', ['\\u{a75e}', '\\u{0}', '\\u{0}']), ('\\u{a761}', ['\\u{a760}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a763}', ['\\u{a762}', '\\u{0}', '\\u{0}']), ('\\u{a765}', ['\\u{a764}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a767}', ['\\u{a766}', '\\u{0}', '\\u{0}']), ('\\u{a769}', ['\\u{a768}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a76b}', ['\\u{a76a}', '\\u{0}', '\\u{0}']), ('\\u{a76d}', ['\\u{a76c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a76f}', ['\\u{a76e}', '\\u{0}', '\\u{0}']), ('\\u{a77a}', ['\\u{a779}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a77c}', ['\\u{a77b}', '\\u{0}', '\\u{0}']), ('\\u{a77f}', ['\\u{a77e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a781}', ['\\u{a780}', '\\u{0}', '\\u{0}']), ('\\u{a783}', ['\\u{a782}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a785}', ['\\u{a784}', '\\u{0}', '\\u{0}']), ('\\u{a787}', ['\\u{a786}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a78c}', ['\\u{a78b}', '\\u{0}', '\\u{0}']), ('\\u{a791}', ['\\u{a790}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a793}', ['\\u{a792}', '\\u{0}', '\\u{0}']), ('\\u{a794}', ['\\u{a7c4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a797}', ['\\u{a796}', '\\u{0}', '\\u{0}']), ('\\u{a799}', ['\\u{a798}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a79b}', ['\\u{a79a}', '\\u{0}', '\\u{0}']), ('\\u{a79d}', ['\\u{a79c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a79f}', ['\\u{a79e}', '\\u{0}', '\\u{0}']), ('\\u{a7a1}', ['\\u{a7a0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7a3}', ['\\u{a7a2}', '\\u{0}', '\\u{0}']), ('\\u{a7a5}', ['\\u{a7a4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7a7}', ['\\u{a7a6}', '\\u{0}', '\\u{0}']), ('\\u{a7a9}', ['\\u{a7a8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b5}', ['\\u{a7b4}', '\\u{0}', '\\u{0}']), ('\\u{a7b7}', ['\\u{a7b6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7b9}', ['\\u{a7b8}', '\\u{0}', '\\u{0}']), ('\\u{a7bb}', ['\\u{a7ba}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7bd}', ['\\u{a7bc}', '\\u{0}', '\\u{0}']), ('\\u{a7bf}', ['\\u{a7be}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7c1}', ['\\u{a7c0}', '\\u{0}', '\\u{0}']), ('\\u{a7c3}', ['\\u{a7c2}', '\\u{0}', '\\u{0}']),\n         ('\\u{a7c8}', ['\\u{a7c7}', '\\u{0}', '\\u{0}']), ('\\u{a7ca}', ['\\u{a7c9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{a7f6}', ['\\u{a7f5}', '\\u{0}', '\\u{0}']), ('\\u{ab53}', ['\\u{a7b3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab70}', ['\\u{13a0}', '\\u{0}', '\\u{0}']), ('\\u{ab71}', ['\\u{13a1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab72}', ['\\u{13a2}', '\\u{0}', '\\u{0}']), ('\\u{ab73}', ['\\u{13a3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab74}', ['\\u{13a4}', '\\u{0}', '\\u{0}']), ('\\u{ab75}', ['\\u{13a5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab76}', ['\\u{13a6}', '\\u{0}', '\\u{0}']), ('\\u{ab77}', ['\\u{13a7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab78}', ['\\u{13a8}', '\\u{0}', '\\u{0}']), ('\\u{ab79}', ['\\u{13a9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7a}', ['\\u{13aa}', '\\u{0}', '\\u{0}']), ('\\u{ab7b}', ['\\u{13ab}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7c}', ['\\u{13ac}', '\\u{0}', '\\u{0}']), ('\\u{ab7d}', ['\\u{13ad}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab7e}', ['\\u{13ae}', '\\u{0}', '\\u{0}']), ('\\u{ab7f}', ['\\u{13af}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab80}', ['\\u{13b0}', '\\u{0}', '\\u{0}']), ('\\u{ab81}', ['\\u{13b1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab82}', ['\\u{13b2}', '\\u{0}', '\\u{0}']), ('\\u{ab83}', ['\\u{13b3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab84}', ['\\u{13b4}', '\\u{0}', '\\u{0}']), ('\\u{ab85}', ['\\u{13b5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab86}', ['\\u{13b6}', '\\u{0}', '\\u{0}']), ('\\u{ab87}', ['\\u{13b7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab88}', ['\\u{13b8}', '\\u{0}', '\\u{0}']), ('\\u{ab89}', ['\\u{13b9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8a}', ['\\u{13ba}', '\\u{0}', '\\u{0}']), ('\\u{ab8b}', ['\\u{13bb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8c}', ['\\u{13bc}', '\\u{0}', '\\u{0}']), ('\\u{ab8d}', ['\\u{13bd}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab8e}', ['\\u{13be}', '\\u{0}', '\\u{0}']), ('\\u{ab8f}', ['\\u{13bf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab90}', ['\\u{13c0}', '\\u{0}', '\\u{0}']), ('\\u{ab91}', ['\\u{13c1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab92}', ['\\u{13c2}', '\\u{0}', '\\u{0}']), ('\\u{ab93}', ['\\u{13c3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab94}', ['\\u{13c4}', '\\u{0}', '\\u{0}']), ('\\u{ab95}', ['\\u{13c5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab96}', ['\\u{13c6}', '\\u{0}', '\\u{0}']), ('\\u{ab97}', ['\\u{13c7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab98}', ['\\u{13c8}', '\\u{0}', '\\u{0}']), ('\\u{ab99}', ['\\u{13c9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9a}', ['\\u{13ca}', '\\u{0}', '\\u{0}']), ('\\u{ab9b}', ['\\u{13cb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9c}', ['\\u{13cc}', '\\u{0}', '\\u{0}']), ('\\u{ab9d}', ['\\u{13cd}', '\\u{0}', '\\u{0}']),\n-        ('\\u{ab9e}', ['\\u{13ce}', '\\u{0}', '\\u{0}']), ('\\u{ab9f}', ['\\u{13cf}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba0}', ['\\u{13d0}', '\\u{0}', '\\u{0}']), ('\\u{aba1}', ['\\u{13d1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba2}', ['\\u{13d2}', '\\u{0}', '\\u{0}']), ('\\u{aba3}', ['\\u{13d3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba4}', ['\\u{13d4}', '\\u{0}', '\\u{0}']), ('\\u{aba5}', ['\\u{13d5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba6}', ['\\u{13d6}', '\\u{0}', '\\u{0}']), ('\\u{aba7}', ['\\u{13d7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{aba8}', ['\\u{13d8}', '\\u{0}', '\\u{0}']), ('\\u{aba9}', ['\\u{13d9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abaa}', ['\\u{13da}', '\\u{0}', '\\u{0}']), ('\\u{abab}', ['\\u{13db}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abac}', ['\\u{13dc}', '\\u{0}', '\\u{0}']), ('\\u{abad}', ['\\u{13dd}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abae}', ['\\u{13de}', '\\u{0}', '\\u{0}']), ('\\u{abaf}', ['\\u{13df}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb0}', ['\\u{13e0}', '\\u{0}', '\\u{0}']), ('\\u{abb1}', ['\\u{13e1}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb2}', ['\\u{13e2}', '\\u{0}', '\\u{0}']), ('\\u{abb3}', ['\\u{13e3}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb4}', ['\\u{13e4}', '\\u{0}', '\\u{0}']), ('\\u{abb5}', ['\\u{13e5}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb6}', ['\\u{13e6}', '\\u{0}', '\\u{0}']), ('\\u{abb7}', ['\\u{13e7}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abb8}', ['\\u{13e8}', '\\u{0}', '\\u{0}']), ('\\u{abb9}', ['\\u{13e9}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abba}', ['\\u{13ea}', '\\u{0}', '\\u{0}']), ('\\u{abbb}', ['\\u{13eb}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abbc}', ['\\u{13ec}', '\\u{0}', '\\u{0}']), ('\\u{abbd}', ['\\u{13ed}', '\\u{0}', '\\u{0}']),\n-        ('\\u{abbe}', ['\\u{13ee}', '\\u{0}', '\\u{0}']), ('\\u{abbf}', ['\\u{13ef}', '\\u{0}', '\\u{0}']),\n-        ('\\u{fb00}', ['F', 'F', '\\u{0}']), ('\\u{fb01}', ['F', 'I', '\\u{0}']),\n-        ('\\u{fb02}', ['F', 'L', '\\u{0}']), ('\\u{fb03}', ['F', 'F', 'I']),\n-        ('\\u{fb04}', ['F', 'F', 'L']), ('\\u{fb05}', ['S', 'T', '\\u{0}']),\n-        ('\\u{fb06}', ['S', 'T', '\\u{0}']), ('\\u{fb13}', ['\\u{544}', '\\u{546}', '\\u{0}']),\n+        ('\\u{a7d1}', ['\\u{a7d0}', '\\u{0}', '\\u{0}']), ('\\u{a7d7}', ['\\u{a7d6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{a7d9}', ['\\u{a7d8}', '\\u{0}', '\\u{0}']), ('\\u{a7f6}', ['\\u{a7f5}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab53}', ['\\u{a7b3}', '\\u{0}', '\\u{0}']), ('\\u{ab70}', ['\\u{13a0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab71}', ['\\u{13a1}', '\\u{0}', '\\u{0}']), ('\\u{ab72}', ['\\u{13a2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab73}', ['\\u{13a3}', '\\u{0}', '\\u{0}']), ('\\u{ab74}', ['\\u{13a4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab75}', ['\\u{13a5}', '\\u{0}', '\\u{0}']), ('\\u{ab76}', ['\\u{13a6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab77}', ['\\u{13a7}', '\\u{0}', '\\u{0}']), ('\\u{ab78}', ['\\u{13a8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab79}', ['\\u{13a9}', '\\u{0}', '\\u{0}']), ('\\u{ab7a}', ['\\u{13aa}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7b}', ['\\u{13ab}', '\\u{0}', '\\u{0}']), ('\\u{ab7c}', ['\\u{13ac}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7d}', ['\\u{13ad}', '\\u{0}', '\\u{0}']), ('\\u{ab7e}', ['\\u{13ae}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab7f}', ['\\u{13af}', '\\u{0}', '\\u{0}']), ('\\u{ab80}', ['\\u{13b0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab81}', ['\\u{13b1}', '\\u{0}', '\\u{0}']), ('\\u{ab82}', ['\\u{13b2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab83}', ['\\u{13b3}', '\\u{0}', '\\u{0}']), ('\\u{ab84}', ['\\u{13b4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab85}', ['\\u{13b5}', '\\u{0}', '\\u{0}']), ('\\u{ab86}', ['\\u{13b6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab87}', ['\\u{13b7}', '\\u{0}', '\\u{0}']), ('\\u{ab88}', ['\\u{13b8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab89}', ['\\u{13b9}', '\\u{0}', '\\u{0}']), ('\\u{ab8a}', ['\\u{13ba}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8b}', ['\\u{13bb}', '\\u{0}', '\\u{0}']), ('\\u{ab8c}', ['\\u{13bc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8d}', ['\\u{13bd}', '\\u{0}', '\\u{0}']), ('\\u{ab8e}', ['\\u{13be}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab8f}', ['\\u{13bf}', '\\u{0}', '\\u{0}']), ('\\u{ab90}', ['\\u{13c0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab91}', ['\\u{13c1}', '\\u{0}', '\\u{0}']), ('\\u{ab92}', ['\\u{13c2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab93}', ['\\u{13c3}', '\\u{0}', '\\u{0}']), ('\\u{ab94}', ['\\u{13c4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab95}', ['\\u{13c5}', '\\u{0}', '\\u{0}']), ('\\u{ab96}', ['\\u{13c6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab97}', ['\\u{13c7}', '\\u{0}', '\\u{0}']), ('\\u{ab98}', ['\\u{13c8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab99}', ['\\u{13c9}', '\\u{0}', '\\u{0}']), ('\\u{ab9a}', ['\\u{13ca}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9b}', ['\\u{13cb}', '\\u{0}', '\\u{0}']), ('\\u{ab9c}', ['\\u{13cc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9d}', ['\\u{13cd}', '\\u{0}', '\\u{0}']), ('\\u{ab9e}', ['\\u{13ce}', '\\u{0}', '\\u{0}']),\n+        ('\\u{ab9f}', ['\\u{13cf}', '\\u{0}', '\\u{0}']), ('\\u{aba0}', ['\\u{13d0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba1}', ['\\u{13d1}', '\\u{0}', '\\u{0}']), ('\\u{aba2}', ['\\u{13d2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba3}', ['\\u{13d3}', '\\u{0}', '\\u{0}']), ('\\u{aba4}', ['\\u{13d4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba5}', ['\\u{13d5}', '\\u{0}', '\\u{0}']), ('\\u{aba6}', ['\\u{13d6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba7}', ['\\u{13d7}', '\\u{0}', '\\u{0}']), ('\\u{aba8}', ['\\u{13d8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{aba9}', ['\\u{13d9}', '\\u{0}', '\\u{0}']), ('\\u{abaa}', ['\\u{13da}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abab}', ['\\u{13db}', '\\u{0}', '\\u{0}']), ('\\u{abac}', ['\\u{13dc}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abad}', ['\\u{13dd}', '\\u{0}', '\\u{0}']), ('\\u{abae}', ['\\u{13de}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abaf}', ['\\u{13df}', '\\u{0}', '\\u{0}']), ('\\u{abb0}', ['\\u{13e0}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb1}', ['\\u{13e1}', '\\u{0}', '\\u{0}']), ('\\u{abb2}', ['\\u{13e2}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb3}', ['\\u{13e3}', '\\u{0}', '\\u{0}']), ('\\u{abb4}', ['\\u{13e4}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb5}', ['\\u{13e5}', '\\u{0}', '\\u{0}']), ('\\u{abb6}', ['\\u{13e6}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb7}', ['\\u{13e7}', '\\u{0}', '\\u{0}']), ('\\u{abb8}', ['\\u{13e8}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abb9}', ['\\u{13e9}', '\\u{0}', '\\u{0}']), ('\\u{abba}', ['\\u{13ea}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abbb}', ['\\u{13eb}', '\\u{0}', '\\u{0}']), ('\\u{abbc}', ['\\u{13ec}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abbd}', ['\\u{13ed}', '\\u{0}', '\\u{0}']), ('\\u{abbe}', ['\\u{13ee}', '\\u{0}', '\\u{0}']),\n+        ('\\u{abbf}', ['\\u{13ef}', '\\u{0}', '\\u{0}']), ('\\u{fb00}', ['F', 'F', '\\u{0}']),\n+        ('\\u{fb01}', ['F', 'I', '\\u{0}']), ('\\u{fb02}', ['F', 'L', '\\u{0}']),\n+        ('\\u{fb03}', ['F', 'F', 'I']), ('\\u{fb04}', ['F', 'F', 'L']),\n+        ('\\u{fb05}', ['S', 'T', '\\u{0}']), ('\\u{fb06}', ['S', 'T', '\\u{0}']),\n+        ('\\u{fb13}', ['\\u{544}', '\\u{546}', '\\u{0}']),\n         ('\\u{fb14}', ['\\u{544}', '\\u{535}', '\\u{0}']),\n         ('\\u{fb15}', ['\\u{544}', '\\u{53b}', '\\u{0}']),\n         ('\\u{fb16}', ['\\u{54e}', '\\u{546}', '\\u{0}']),\n@@ -2133,6 +2187,41 @@ pub mod conversions {\n         ('\\u{104f9}', ['\\u{104d1}', '\\u{0}', '\\u{0}']),\n         ('\\u{104fa}', ['\\u{104d2}', '\\u{0}', '\\u{0}']),\n         ('\\u{104fb}', ['\\u{104d3}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10597}', ['\\u{10570}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10598}', ['\\u{10571}', '\\u{0}', '\\u{0}']),\n+        ('\\u{10599}', ['\\u{10572}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059a}', ['\\u{10573}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059b}', ['\\u{10574}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059c}', ['\\u{10575}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059d}', ['\\u{10576}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059e}', ['\\u{10577}', '\\u{0}', '\\u{0}']),\n+        ('\\u{1059f}', ['\\u{10578}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a0}', ['\\u{10579}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a1}', ['\\u{1057a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a3}', ['\\u{1057c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a4}', ['\\u{1057d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a5}', ['\\u{1057e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a6}', ['\\u{1057f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a7}', ['\\u{10580}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a8}', ['\\u{10581}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105a9}', ['\\u{10582}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105aa}', ['\\u{10583}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105ab}', ['\\u{10584}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105ac}', ['\\u{10585}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105ad}', ['\\u{10586}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105ae}', ['\\u{10587}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105af}', ['\\u{10588}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b0}', ['\\u{10589}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b1}', ['\\u{1058a}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b3}', ['\\u{1058c}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b4}', ['\\u{1058d}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b5}', ['\\u{1058e}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b6}', ['\\u{1058f}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b7}', ['\\u{10590}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b8}', ['\\u{10591}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105b9}', ['\\u{10592}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105bb}', ['\\u{10594}', '\\u{0}', '\\u{0}']),\n+        ('\\u{105bc}', ['\\u{10595}', '\\u{0}', '\\u{0}']),\n         ('\\u{10cc0}', ['\\u{10c80}', '\\u{0}', '\\u{0}']),\n         ('\\u{10cc1}', ['\\u{10c81}', '\\u{0}', '\\u{0}']),\n         ('\\u{10cc2}', ['\\u{10c82}', '\\u{0}', '\\u{0}']),"}, {"sha": "b3af1328c90d45869d0efb236f97e77e6a53df53", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,6 @@\n use core::array;\n use core::convert::TryFrom;\n+use core::sync::atomic::{AtomicUsize, Ordering};\n \n #[test]\n fn array_from_ref() {\n@@ -303,8 +304,6 @@ fn array_map() {\n #[test]\n #[should_panic(expected = \"test succeeded\")]\n fn array_map_drop_safety() {\n-    use core::sync::atomic::AtomicUsize;\n-    use core::sync::atomic::Ordering;\n     static DROPPED: AtomicUsize = AtomicUsize::new(0);\n     struct DropCounter;\n     impl Drop for DropCounter {\n@@ -356,3 +355,84 @@ fn cell_allows_array_cycle() {\n     b3.a[0].set(Some(&b1));\n     b3.a[1].set(Some(&b2));\n }\n+\n+#[test]\n+fn array_from_fn() {\n+    let array = core::array::from_fn(|idx| idx);\n+    assert_eq!(array, [0, 1, 2, 3, 4]);\n+}\n+\n+#[test]\n+fn array_try_from_fn() {\n+    #[derive(Debug, PartialEq)]\n+    enum SomeError {\n+        Foo,\n+    }\n+\n+    let array = core::array::try_from_fn(|i| Ok::<_, SomeError>(i));\n+    assert_eq!(array, Ok([0, 1, 2, 3, 4]));\n+\n+    let another_array = core::array::try_from_fn::<SomeError, _, (), 2>(|_| Err(SomeError::Foo));\n+    assert_eq!(another_array, Err(SomeError::Foo));\n+}\n+\n+#[cfg(not(panic = \"abort\"))]\n+#[test]\n+fn array_try_from_fn_drops_inserted_elements_on_err() {\n+    static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n+\n+    struct CountDrop;\n+    impl Drop for CountDrop {\n+        fn drop(&mut self) {\n+            DROP_COUNTER.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let _ = catch_unwind_silent(move || {\n+        let _: Result<[CountDrop; 4], ()> = core::array::try_from_fn(|idx| {\n+            if idx == 2 {\n+                return Err(());\n+            }\n+            Ok(CountDrop)\n+        });\n+    });\n+\n+    assert_eq!(DROP_COUNTER.load(Ordering::SeqCst), 2);\n+}\n+\n+#[cfg(not(panic = \"abort\"))]\n+#[test]\n+fn array_try_from_fn_drops_inserted_elements_on_panic() {\n+    static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n+\n+    struct CountDrop;\n+    impl Drop for CountDrop {\n+        fn drop(&mut self) {\n+            DROP_COUNTER.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let _ = catch_unwind_silent(move || {\n+        let _: Result<[CountDrop; 4], ()> = core::array::try_from_fn(|idx| {\n+            if idx == 2 {\n+                panic!(\"peek a boo\");\n+            }\n+            Ok(CountDrop)\n+        });\n+    });\n+\n+    assert_eq!(DROP_COUNTER.load(Ordering::SeqCst), 2);\n+}\n+\n+#[cfg(not(panic = \"abort\"))]\n+// https://stackoverflow.com/a/59211505\n+fn catch_unwind_silent<F, R>(f: F) -> std::thread::Result<R>\n+where\n+    F: FnOnce() -> R + core::panic::UnwindSafe,\n+{\n+    let prev_hook = std::panic::take_hook();\n+    std::panic::set_hook(Box::new(|_| {}));\n+    let result = std::panic::catch_unwind(f);\n+    std::panic::set_hook(prev_hook);\n+    result\n+}"}, {"sha": "3608853dce4e05e41679195add2e47c8772ef9c4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -26,6 +26,7 @@\n #![feature(extern_types)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n+#![feature(array_from_fn)]\n #![feature(hashmap_internals)]\n #![feature(try_find)]\n #![feature(is_sorted)]"}, {"sha": "3cd0073ddd8c24862770c7c2c783b8e6af02d9fb", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -96,6 +96,9 @@ fn checked_log10() {\n     for i in 1..=u16::MAX {\n         assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }\n+    for i in 1..=100_000u32 {\n+        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n+    }\n }\n \n macro_rules! log10_loop {"}, {"sha": "3a06cd04ab146345e3d3198a9521d60b7bcc3a98", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -61,7 +61,7 @@ use std::{error, fmt, iter, mem};\n /// non-panicking way to detect whether the infrastructure required to use the\n /// API of proc_macro is presently available. Returns true if invoked from\n /// inside of a procedural macro, false if invoked from any other binary.\n-#[unstable(feature = \"proc_macro_is_available\", issue = \"71436\")]\n+#[stable(feature = \"proc_macro_is_available\", since = \"1.57.0\")]\n pub fn is_available() -> bool {\n     bridge::Bridge::is_available()\n }"}, {"sha": "01019344f4f67b2dff83edcee55e9b18acd1495c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -223,6 +223,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashMap<K, V, RandomState> {\n         Default::default()\n@@ -240,6 +241,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashMap<K, V, RandomState> {\n         HashMap::with_capacity_and_hasher(capacity, Default::default())\n@@ -1720,6 +1722,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the entry into a mutable reference to the key in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key(self) -> &'a mut K {\n         self.base.into_key()\n@@ -1735,6 +1738,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.base.into_mut()\n@@ -1764,6 +1768,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the `OccupiedEntry` into a mutable reference to the key and value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {\n         self.base.into_key_value()\n@@ -2891,6 +2896,7 @@ impl RandomState {\n     #[inline]\n     #[allow(deprecated)]\n     // rand\n+    #[must_use]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn new() -> RandomState {\n         // Historically this function did not cache keys from the OS and instead\n@@ -2943,6 +2949,7 @@ impl DefaultHasher {\n     /// instances created through `new` or `default`.\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n     #[allow(deprecated)]\n+    #[must_use]\n     pub fn new() -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(0, 0))\n     }"}, {"sha": "5804701892e6e447641ea8144b1a815c42799648", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -126,6 +126,7 @@ impl<T> HashSet<T, RandomState> {\n     /// let set: HashSet<i32> = HashSet::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashSet<T, RandomState> {\n         Default::default()\n@@ -144,6 +145,7 @@ impl<T> HashSet<T, RandomState> {\n     /// assert!(set.capacity() >= 10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState> {\n         HashSet { base: base::HashSet::with_capacity_and_hasher(capacity, Default::default()) }"}, {"sha": "78eb91e41936b3625b48271093ac144ff9c683d4", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -297,6 +297,7 @@ impl FromVecWithNulError {\n     ///\n     /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n     }\n@@ -322,6 +323,7 @@ impl FromVecWithNulError {\n     ///\n     /// assert_eq!(bytes, value.unwrap_err().into_bytes());\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes\n     }\n@@ -425,6 +427,7 @@ impl CString {\n     ///     let c_string = CString::from_vec_unchecked(raw);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.reserve_exact(1);\n@@ -476,6 +479,7 @@ impl CString {\n     ///     let c_string = CString::from_raw(raw);\n     /// }\n     /// ```\n+    #[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         // SAFETY: This is called with a pointer that was obtained from a call\n@@ -524,6 +528,7 @@ impl CString {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n@@ -547,7 +552,6 @@ impl CString {\n     /// let err = cstring.into_string().err().expect(\"into_string().err() failed\");\n     /// assert_eq!(err.utf8_error().valid_up_to(), 1);\n     /// ```\n-\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_string(self) -> Result<String, IntoStringError> {\n         String::from_utf8(self.into_bytes()).map_err(|e| IntoStringError {\n@@ -571,6 +575,7 @@ impl CString {\n     /// let bytes = c_string.into_bytes();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         let mut vec = self.into_inner().into_vec();\n@@ -591,6 +596,7 @@ impl CString {\n     /// let bytes = c_string.into_bytes_with_nul();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n         self.into_inner().into_vec()\n@@ -613,6 +619,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         // SAFETY: CString has a length at least 1\n@@ -632,6 +639,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n@@ -650,6 +658,7 @@ impl CString {\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n@@ -667,6 +676,7 @@ impl CString {\n     /// assert_eq!(&*boxed,\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n@@ -701,6 +711,7 @@ impl CString {\n     ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n     /// );\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n     pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n         Self { inner: v.into_boxed_slice() }\n@@ -1018,6 +1029,7 @@ impl NulError {\n     /// let nul_error = CString::new(\"foo\\0bar\").unwrap_err();\n     /// assert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> {\n         self.1\n@@ -1092,6 +1104,7 @@ impl fmt::Display for FromVecWithNulError {\n impl IntoStringError {\n     /// Consumes this error, returning original [`CString`] which generated the\n     /// error.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_cstring(self) -> CString {\n         self.inner\n@@ -1162,6 +1175,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n@@ -1244,6 +1258,7 @@ impl CStr {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n@@ -1302,6 +1317,7 @@ impl CStr {\n     /// This way, the lifetime of the [`CString`] in `hello` encompasses\n     /// the lifetime of `ptr` and the `unsafe` block.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\")]\n     pub const fn as_ptr(&self) -> *const c_char {"}, {"sha": "3b0e88331449efeaf97960cc114a6e56869ec18d", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -119,6 +119,7 @@ impl OsString {\n     /// let os_string = OsString::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n@@ -136,6 +137,7 @@ impl OsString {\n     /// assert_eq!(os_string.as_os_str(), os_str);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         self\n@@ -199,6 +201,7 @@ impl OsString {\n     /// assert_eq!(capacity, os_string.capacity());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> OsString {\n         OsString { inner: Buf::with_capacity(capacity) }\n@@ -346,6 +349,7 @@ impl OsString {\n     ///\n     /// let b: Box<OsStr> = s.into_boxed_os_str();\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n         let rw = Box::into_raw(self.inner.into_box()) as *mut OsStr;\n@@ -777,6 +781,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n     /// ```\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase`\"]\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n     pub fn to_ascii_lowercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_lowercase())\n@@ -798,6 +803,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n     /// ```\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase`\"]\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n     pub fn to_ascii_uppercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_uppercase())"}, {"sha": "2b76a411a0fd50dc8e16a9d35864edf28701f56b", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -198,19 +198,10 @@ pub struct DirBuilder {\n     recursive: bool,\n }\n \n-/// Indicates how large a buffer to pre-allocate before reading the entire file.\n-fn initial_buffer_size(file: &File) -> usize {\n-    // Don't worry about `usize` overflow because reading will fail regardless\n-    // in that case.\n-    file.metadata().map(|m| m.len() as usize).unwrap_or(0)\n-}\n-\n /// Read the entire contents of a file into a bytes vector.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n-/// with fewer imports and without an intermediate variable. It pre-allocates a\n-/// buffer based on the file size when available, so it is generally faster than\n-/// reading into a vector created with [`Vec::new()`].\n+/// with fewer imports and without an intermediate variable.\n ///\n /// [`read_to_end`]: Read::read_to_end\n ///\n@@ -237,7 +228,7 @@ fn initial_buffer_size(file: &File) -> usize {\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n     fn inner(path: &Path) -> io::Result<Vec<u8>> {\n         let mut file = File::open(path)?;\n-        let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n+        let mut bytes = Vec::new();\n         file.read_to_end(&mut bytes)?;\n         Ok(bytes)\n     }\n@@ -247,9 +238,7 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// Read the entire contents of a file into a string.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_string`]\n-/// with fewer imports and without an intermediate variable. It pre-allocates a\n-/// buffer based on the file size when available, so it is generally faster than\n-/// reading into a string created with [`String::new()`].\n+/// with fewer imports and without an intermediate variable.\n ///\n /// [`read_to_string`]: Read::read_to_string\n ///\n@@ -278,7 +267,7 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n     fn inner(path: &Path) -> io::Result<String> {\n         let mut file = File::open(path)?;\n-        let mut string = String::with_capacity(initial_buffer_size(&file));\n+        let mut string = String::new();\n         file.read_to_string(&mut string)?;\n         Ok(string)\n     }\n@@ -615,6 +604,15 @@ impl fmt::Debug for File {\n     }\n }\n \n+/// Indicates how much extra capacity is needed to read the rest of the file.\n+fn buffer_capacity_required(mut file: &File) -> usize {\n+    let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n+    let pos = file.stream_position().unwrap_or(0);\n+    // Don't worry about `usize` overflow because reading will fail regardless\n+    // in that case.\n+    size.saturating_sub(pos) as usize\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -635,6 +633,18 @@ impl Read for File {\n         // SAFETY: Read is guaranteed to work on uninitialized memory\n         unsafe { Initializer::nop() }\n     }\n+\n+    // Reserves space in the buffer based on the file size when available.\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        buf.reserve(buffer_capacity_required(self));\n+        io::default_read_to_end(self, buf)\n+    }\n+\n+    // Reserves space in the buffer based on the file size when available.\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        buf.reserve(buffer_capacity_required(self));\n+        io::default_read_to_string(self, buf)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for File {\n@@ -681,6 +691,18 @@ impl Read for &File {\n         // SAFETY: Read is guaranteed to work on uninitialized memory\n         unsafe { Initializer::nop() }\n     }\n+\n+    // Reserves space in the buffer based on the file size when available.\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        buf.reserve(buffer_capacity_required(self));\n+        io::default_read_to_end(self, buf)\n+    }\n+\n+    // Reserves space in the buffer based on the file size when available.\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        buf.reserve(buffer_capacity_required(self));\n+        io::default_read_to_string(self, buf)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for &File {\n@@ -722,6 +744,7 @@ impl OpenOptions {\n     /// let file = options.read(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Self {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n@@ -982,6 +1005,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.file_type().is_dir()\n@@ -1010,6 +1034,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_file(&self) -> bool {\n         self.file_type().is_file()\n@@ -1035,6 +1060,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"is_symlink\", since = \"1.57.0\")]\n     pub fn is_symlink(&self) -> bool {\n         self.file_type().is_symlink()\n@@ -1282,6 +1308,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.0.is_dir()\n@@ -1314,6 +1341,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool {\n         self.0.is_file()\n@@ -1349,6 +1377,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool {\n         self.0.is_symlink()\n@@ -2161,6 +2190,7 @@ impl DirBuilder {\n     /// let builder = DirBuilder::new();\n     /// ```\n     #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+    #[must_use]\n     pub fn new() -> DirBuilder {\n         DirBuilder { inner: fs_imp::DirBuilder::new(), recursive: false }\n     }"}, {"sha": "2864e94f60f2c82ca542ac8fa890701bc340a0a9", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -242,14 +242,13 @@ impl<R: Seek> BufReader<R> {\n                 self.pos = new_pos as usize;\n                 return Ok(());\n             }\n-        } else {\n-            if let Some(new_pos) = pos.checked_add(offset as u64) {\n-                if new_pos <= self.cap as u64 {\n-                    self.pos = new_pos as usize;\n-                    return Ok(());\n-                }\n+        } else if let Some(new_pos) = pos.checked_add(offset as u64) {\n+            if new_pos <= self.cap as u64 {\n+                self.pos = new_pos as usize;\n+                return Ok(());\n             }\n         }\n+\n         self.seek(SeekFrom::Current(offset)).map(drop)\n     }\n }\n@@ -308,6 +307,51 @@ impl<R: Read> Read for BufReader<R> {\n     unsafe fn initializer(&self) -> Initializer {\n         self.inner.initializer()\n     }\n+\n+    // The inner reader might have an optimized `read_to_end`. Drain our buffer and then\n+    // delegate to the inner implementation.\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let nread = self.cap - self.pos;\n+        buf.extend_from_slice(&self.buf[self.pos..self.cap]);\n+        self.discard_buffer();\n+        Ok(nread + self.inner.read_to_end(buf)?)\n+    }\n+\n+    // The inner reader might have an optimized `read_to_end`. Drain our buffer and then\n+    // delegate to the inner implementation.\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        // In the general `else` case below we must read bytes into a side buffer, check\n+        // that they are valid UTF-8, and then append them to `buf`. This requires a\n+        // potentially large memcpy.\n+        //\n+        // If `buf` is empty--the most common case--we can leverage `append_to_string`\n+        // to read directly into `buf`'s internal byte buffer, saving an allocation and\n+        // a memcpy.\n+        if buf.is_empty() {\n+            // `append_to_string`'s safety relies on the buffer only being appended to since\n+            // it only checks the UTF-8 validity of new data. If there were existing content in\n+            // `buf` then an untrustworthy reader (i.e. `self.inner`) could not only append\n+            // bytes but also modify existing bytes and render them invalid. On the other hand,\n+            // if `buf` is empty then by definition any writes must be appends and\n+            // `append_to_string` will validate all of the new bytes.\n+            unsafe { crate::io::append_to_string(buf, |b| self.read_to_end(b)) }\n+        } else {\n+            // We cannot append our byte buffer directly onto the `buf` String as there could\n+            // be an incomplete UTF-8 sequence that has only been partially read. We must read\n+            // everything into a side buffer first and then call `from_utf8` on the complete\n+            // buffer.\n+            let mut bytes = Vec::new();\n+            self.read_to_end(&mut bytes)?;\n+            let string = crate::str::from_utf8(&bytes).map_err(|_| {\n+                io::Error::new_const(\n+                    io::ErrorKind::InvalidData,\n+                    &\"stream did not contain valid UTF-8\",\n+                )\n+            })?;\n+            *buf += string;\n+            Ok(string.len())\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c7423e4d92a896c359743285a3e76f2d47ab3ed6", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -476,6 +476,7 @@ pub struct WriterPanicked {\n impl WriterPanicked {\n     /// Returns the perhaps-unwritten data.  Some of this data may have been written by the\n     /// panicking call(s) to the underlying writer, so simply writing it again is not a good idea.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n     pub fn into_inner(self) -> Vec<u8> {\n         self.buf"}, {"sha": "feb149c07a525010b5aa4d1ca6cafe1e67005b48", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -243,6 +243,28 @@ fn test_buffered_reader_seek_underflow_discard_buffer_between_seeks() {\n     assert_eq!(reader.buffer().len(), 0);\n }\n \n+#[test]\n+fn test_buffered_reader_read_to_end_consumes_buffer() {\n+    let data: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];\n+    let mut reader = BufReader::with_capacity(3, data);\n+    let mut buf = Vec::new();\n+    assert_eq!(reader.fill_buf().ok(), Some(&[0, 1, 2][..]));\n+    assert_eq!(reader.read_to_end(&mut buf).ok(), Some(8));\n+    assert_eq!(&buf, &[0, 1, 2, 3, 4, 5, 6, 7]);\n+    assert!(reader.buffer().is_empty());\n+}\n+\n+#[test]\n+fn test_buffered_reader_read_to_string_consumes_buffer() {\n+    let data: &[u8] = \"deadbeef\".as_bytes();\n+    let mut reader = BufReader::with_capacity(3, data);\n+    let mut buf = String::new();\n+    assert_eq!(reader.fill_buf().ok(), Some(\"dea\".as_bytes()));\n+    assert_eq!(reader.read_to_string(&mut buf).ok(), Some(8));\n+    assert_eq!(&buf, \"deadbeef\");\n+    assert!(reader.buffer().is_empty());\n+}\n+\n #[test]\n fn test_buffered_writer() {\n     let inner = Vec::new();"}, {"sha": "59a9cd781cb99f32f83fd3f12fe83f9bcad7ef1b", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -473,6 +473,7 @@ impl Error {\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_raw_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }\n@@ -657,6 +658,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_inner(self) -> Option<Box<dyn error::Error + Send + Sync>> {\n         match self.repr {"}, {"sha": "abe29ba0f7caa379c339c2fde186777cfe3d17f2", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -316,11 +316,12 @@ impl Drop for Guard<'_> {\n     }\n }\n \n-// A few methods below (read_to_string, read_line) will append data into a\n-// `String` buffer, but we need to be pretty careful when doing this. The\n-// implementation will just call `.as_mut_vec()` and then delegate to a\n-// byte-oriented reading method, but we must ensure that when returning we never\n-// leave `buf` in a state such that it contains invalid UTF-8 in its bounds.\n+// Several `read_to_string` and `read_line` methods in the standard library will\n+// append data into a `String` buffer, but we need to be pretty careful when\n+// doing this. The implementation will just call `.as_mut_vec()` and then\n+// delegate to a byte-oriented reading method, but we must ensure that when\n+// returning we never leave `buf` in a state such that it contains invalid UTF-8\n+// in its bounds.\n //\n // To this end, we use an RAII guard (to protect against panics) which updates\n // the length of the string when it is dropped. This guard initially truncates\n@@ -334,21 +335,19 @@ impl Drop for Guard<'_> {\n // 2. We're passing a raw buffer to the function `f`, and it is expected that\n //    the function only *appends* bytes to the buffer. We'll get undefined\n //    behavior if existing bytes are overwritten to have non-UTF-8 data.\n-fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n+pub(crate) unsafe fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n where\n     F: FnOnce(&mut Vec<u8>) -> Result<usize>,\n {\n-    unsafe {\n-        let mut g = Guard { len: buf.len(), buf: buf.as_mut_vec() };\n-        let ret = f(g.buf);\n-        if str::from_utf8(&g.buf[g.len..]).is_err() {\n-            ret.and_then(|_| {\n-                Err(Error::new_const(ErrorKind::InvalidData, &\"stream did not contain valid UTF-8\"))\n-            })\n-        } else {\n-            g.len = g.buf.len();\n-            ret\n-        }\n+    let mut g = Guard { len: buf.len(), buf: buf.as_mut_vec() };\n+    let ret = f(g.buf);\n+    if str::from_utf8(&g.buf[g.len..]).is_err() {\n+        ret.and_then(|_| {\n+            Err(Error::new_const(ErrorKind::InvalidData, &\"stream did not contain valid UTF-8\"))\n+        })\n+    } else {\n+        g.len = g.buf.len();\n+        ret\n     }\n }\n \n@@ -361,7 +360,7 @@ where\n //\n // Because we're extending the buffer with uninitialized data for trusted\n // readers, we need to make sure to truncate that if any of this panics.\n-fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n+pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n     let start_cap = buf.capacity();\n     let mut g = Guard { len: buf.len(), buf };\n@@ -426,6 +425,22 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n     }\n }\n \n+pub(crate) fn default_read_to_string<R: Read + ?Sized>(\n+    r: &mut R,\n+    buf: &mut String,\n+) -> Result<usize> {\n+    // Note that we do *not* call `r.read_to_end()` here. We are passing\n+    // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`\n+    // method to fill it up. An arbitrary implementation could overwrite the\n+    // entire contents of the vector, not just append to it (which is what\n+    // we are expecting).\n+    //\n+    // To prevent extraneously checking the UTF-8-ness of the entire buffer\n+    // we pass it to our hardcoded `default_read_to_end` implementation which\n+    // we know is guaranteed to only read data into the end of the buffer.\n+    unsafe { append_to_string(buf, |b| default_read_to_end(r, b)) }\n+}\n+\n pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>\n where\n     F: FnOnce(&mut [u8]) -> Result<usize>,\n@@ -716,7 +731,7 @@ pub trait Read {\n     /// [`std::fs::read`]: crate::fs::read\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n-        read_to_end(self, buf)\n+        default_read_to_end(self, buf)\n     }\n \n     /// Read all bytes until EOF in this source, appending them to `buf`.\n@@ -759,16 +774,7 @@ pub trait Read {\n     /// [`std::fs::read_to_string`]: crate::fs::read_to_string\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {\n-        // Note that we do *not* call `.read_to_end()` here. We are passing\n-        // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`\n-        // method to fill it up. An arbitrary implementation could overwrite the\n-        // entire contents of the vector, not just append to it (which is what\n-        // we are expecting).\n-        //\n-        // To prevent extraneously checking the UTF-8-ness of the entire buffer\n-        // we pass it to our hardcoded `read_to_end` implementation which we\n-        // know is guaranteed to only read data into the end of the buffer.\n-        append_to_string(buf, |b| read_to_end(self, b))\n+        default_read_to_string(self, buf)\n     }\n \n     /// Read the exact number of bytes required to fill `buf`.\n@@ -1005,6 +1011,11 @@ pub trait Read {\n /// need more control over performance, and in those cases you should definitely use\n /// [`Read::read_to_string`] directly.\n ///\n+/// Note that in some special cases, such as when reading files, this function will\n+/// pre-allocate memory based on the size of the input it is reading. In those\n+/// cases, the performance should be as good as if you had used\n+/// [`Read::read_to_string`] with a manually pre-allocated buffer.\n+///\n /// # Errors\n ///\n /// This function forces you to handle errors because the output (the `String`)\n@@ -1195,6 +1206,7 @@ impl<'a> IoSlice<'a> {\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         IoSlice(sys::io::IoSlice::new(buf))\n@@ -2201,7 +2213,7 @@ pub trait BufRead: Read {\n         // Note that we are not calling the `.read_until` method here, but\n         // rather our hardcoded implementation. For more details as to why, see\n         // the comments in `read_to_end`.\n-        append_to_string(buf, |b| read_until(self, b'\\n', b))\n+        unsafe { append_to_string(buf, |b| read_until(self, b'\\n', b)) }\n     }\n \n     /// Returns an iterator over the contents of this reader split on the byte"}, {"sha": "9389501e0129e63b8a6d4d5a042b06a79e7a27a5", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -256,6 +256,7 @@ pub struct Stdin {\n ///     Ok(())\n /// }\n /// ```\n+#[must_use = \"if unused stdin will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<StdinRaw>>,\n@@ -463,6 +464,7 @@ impl Stdin {\n     ///     println!(\"got a line: {}\", line.unwrap());\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n     pub fn lines(self) -> Lines<StdinLock<'static>> {\n         self.into_locked().lines()\n@@ -624,6 +626,7 @@ pub struct Stdout {\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n /// an error.\n+#[must_use = \"if unused stdout will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdoutLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<LineWriter<StdoutRaw>>>,\n@@ -907,6 +910,7 @@ pub struct Stderr {\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n /// an error.\n+#[must_use = \"if unused stderr will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<StderrRaw>>,"}, {"sha": "0321a2b60b108c33bb4576ea9d6efe5c6d44b8d6", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -290,7 +290,7 @@ fn bench_read_to_end(b: &mut test::Bencher) {\n     b.iter(|| {\n         let mut lr = repeat(1).take(10000000);\n         let mut vec = Vec::with_capacity(1024);\n-        super::read_to_end(&mut lr, &mut vec)\n+        super::default_read_to_end(&mut lr, &mut vec)\n     });\n }\n "}, {"sha": "d7450962359df78e42e636aeab324071a85c16b3", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -171,6 +171,7 @@ impl<T: Eq> Eq for SyncOnceCell<T> {}\n impl<T> SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> SyncOnceCell<T> {\n         SyncOnceCell {\n             once: Once::new(),"}, {"sha": "a689d2a56b721d2c8fd1574c907e0de28e21418c", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -131,6 +131,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n+    #[must_use]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -231,6 +232,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), true);\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv4(&self) -> bool {\n@@ -252,6 +254,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), false);\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv6(&self) -> bool {\n@@ -272,6 +275,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 {\n             inner: c::sockaddr_in {\n@@ -368,6 +372,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 {\n             inner: c::sockaddr_in6 {"}, {"sha": "68b8bb8f3e1908c831d0e884563d3c5ba9daa51f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -233,6 +233,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         match self {\n@@ -256,6 +257,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         match self {\n@@ -281,6 +283,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n@@ -304,6 +307,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         match self {\n@@ -332,6 +336,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n@@ -356,6 +361,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0)).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         match self {\n@@ -379,6 +385,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(self, IpAddr::V4(_))\n@@ -399,6 +406,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n@@ -442,6 +450,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // `s_addr` is stored as BE on all machine and the array is in BE order.\n@@ -526,6 +535,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n@@ -547,6 +557,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n@@ -577,6 +588,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n@@ -604,6 +616,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_link_local(&self) -> bool {\n         matches!(self.octets(), [169, 254, ..])\n@@ -679,6 +692,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n@@ -719,6 +733,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n@@ -744,6 +759,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n@@ -778,6 +794,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n@@ -801,6 +818,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n@@ -822,6 +840,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_broadcast(&self) -> bool {\n         u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n@@ -849,6 +868,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n@@ -1192,6 +1212,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n@@ -1289,6 +1310,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n@@ -1312,6 +1334,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n@@ -1338,6 +1361,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n@@ -1365,6 +1389,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -1393,6 +1418,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast(&self) -> bool {\n         !self.is_multicast()\n@@ -1444,6 +1470,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -1468,6 +1495,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -1490,6 +1518,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n@@ -1527,6 +1556,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         self.is_unicast()\n@@ -1588,6 +1618,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00"}, {"sha": "2c6e3930059905bd94f42b56c2305db7b4a72b2b", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -883,6 +883,7 @@ impl TcpListener {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n     pub fn into_incoming(self) -> IntoIncoming {\n         IntoIncoming { listener: self }"}, {"sha": "c9ccc26f4e179a55cd0d6521ce482e5f54175115", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -156,6 +156,7 @@ impl SocketAddr {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n         if let AddressKind::Unnamed = self.address() { true } else { false }\n@@ -192,6 +193,7 @@ impl SocketAddr {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         if let AddressKind::Pathname(path) = self.address() { Some(path) } else { None }\n     }"}, {"sha": "57bb61903c147964c6d74b08ed6ba788e1c075cb", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -189,6 +189,7 @@ impl SocketCred {\n     ///\n     /// PID, UID and GID is set to 0.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n     pub fn new() -> SocketCred {\n         SocketCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n     }"}, {"sha": "41cf91120fb0a7d43bdb08b280b11b705b3e4a71", "filename": "library/std/src/path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -215,6 +215,7 @@ impl<'a> Prefix<'a> {\n     /// assert!(!Disk(b'C').is_verbatim());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n@@ -247,6 +248,7 @@ impl<'a> Prefix<'a> {\n /// assert!(path::is_separator('/')); // '/' works for both Unix and Windows\n /// assert!(!path::is_separator('\u2764'));\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn is_separator(c: char) -> bool {\n     c.is_ascii() && is_sep_byte(c as u8)\n@@ -427,6 +429,7 @@ impl<'a> PrefixComponent<'a> {\n \n     /// Returns the raw [`OsStr`] slice for this prefix.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &'a OsStr {\n         self.raw\n@@ -532,6 +535,7 @@ impl<'a> Component<'a> {\n     /// let components: Vec<_> = path.components().map(|comp| comp.as_os_str()).collect();\n     /// assert_eq!(&components, &[\".\", \"tmp\", \"foo\", \"bar.txt\"]);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(self) -> &'a OsStr {\n         match self {\n@@ -675,6 +679,7 @@ impl<'a> Components<'a> {\n     ///\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), components.as_path());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &'a Path {\n         let mut comps = self.clone();\n@@ -820,6 +825,7 @@ impl<'a> Iter<'a> {\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), iter.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &'a Path {\n         self.inner.as_path()\n@@ -1145,6 +1151,7 @@ impl PathBuf {\n     /// let path = PathBuf::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n@@ -1169,6 +1176,7 @@ impl PathBuf {\n     ///\n     /// [`with_capacity`]: OsString::with_capacity\n     #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> PathBuf {\n         PathBuf { inner: OsString::with_capacity(capacity) }\n@@ -1185,6 +1193,7 @@ impl PathBuf {\n     /// assert_eq!(Path::new(\"/test\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &Path {\n         self\n@@ -1428,13 +1437,15 @@ impl PathBuf {\n     /// let os_str = p.into_os_string();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n     }\n \n     /// Converts this `PathBuf` into a [boxed](Box) [`Path`].\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n@@ -1918,6 +1929,7 @@ impl Path {\n     /// assert_eq!(os_str, std::ffi::OsStr::new(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         &self.inner\n@@ -2006,6 +2018,7 @@ impl Path {\n     ///\n     /// [`has_root`]: Path::has_root\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[allow(deprecated)]\n     pub fn is_absolute(&self) -> bool {\n         if cfg!(target_os = \"redox\") {\n@@ -2030,6 +2043,7 @@ impl Path {\n     ///\n     /// [`is_absolute`]: Path::is_absolute\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_relative(&self) -> bool {\n         !self.is_absolute()\n@@ -2056,6 +2070,7 @@ impl Path {\n     /// assert!(Path::new(\"/etc/passwd\").has_root());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn has_root(&self) -> bool {\n         self.components().has_root()\n@@ -2506,6 +2521,8 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this does not display the path, \\\n+                  it returns an object that can be displayed\"]\n     #[inline]\n     pub fn display(&self) -> Display<'_> {\n         Display { path: self }\n@@ -2693,6 +2710,7 @@ impl Path {\n     /// a Unix-like system for example. See [`fs::File::open`] or\n     /// [`fs::OpenOptions::open`] for more information.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n     }\n@@ -2719,6 +2737,7 @@ impl Path {\n     /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call\n     /// [`fs::Metadata::is_dir`] if it was [`Ok`].\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n@@ -2749,6 +2768,7 @@ impl Path {\n     /// This is a convenience function that coerces errors to false. If you want to\n     /// check errors, call [`fs::symlink_metadata`] and handle its [`Result`]. Then call\n     /// [`fs::Metadata::is_symlink`] if it was [`Ok`].\n+    #[must_use]\n     #[stable(feature = \"is_symlink\", since = \"1.57.0\")]\n     pub fn is_symlink(&self) -> bool {\n         fs::symlink_metadata(self).map(|m| m.is_symlink()).unwrap_or(false)"}, {"sha": "4bd06475e2761510fe681acd80de672683f0e094", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -115,7 +115,7 @@ use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n use crate::sys::process as imp;\n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n pub use crate::sys_common::process::CommandEnvs;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n@@ -943,13 +943,12 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(command_access)]\n     /// use std::process::Command;\n     ///\n     /// let cmd = Command::new(\"echo\");\n     /// assert_eq!(cmd.get_program(), \"echo\");\n     /// ```\n-    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_program(&self) -> &OsStr {\n         self.inner.get_program()\n     }\n@@ -963,7 +962,6 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(command_access)]\n     /// use std::ffi::OsStr;\n     /// use std::process::Command;\n     ///\n@@ -972,7 +970,7 @@ impl Command {\n     /// let args: Vec<&OsStr> = cmd.get_args().collect();\n     /// assert_eq!(args, &[\"first\", \"second\"]);\n     /// ```\n-    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_args(&self) -> CommandArgs<'_> {\n         CommandArgs { inner: self.inner.get_args() }\n     }\n@@ -992,7 +990,6 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(command_access)]\n     /// use std::ffi::OsStr;\n     /// use std::process::Command;\n     ///\n@@ -1004,7 +1001,7 @@ impl Command {\n     ///     (OsStr::new(\"TZ\"), None)\n     /// ]);\n     /// ```\n-    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_envs(&self) -> CommandEnvs<'_> {\n         self.inner.get_envs()\n     }\n@@ -1016,7 +1013,6 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(command_access)]\n     /// use std::path::Path;\n     /// use std::process::Command;\n     ///\n@@ -1025,7 +1021,7 @@ impl Command {\n     /// cmd.current_dir(\"/bin\");\n     /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n     /// ```\n-    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_current_dir(&self) -> Option<&Path> {\n         self.inner.get_current_dir()\n     }\n@@ -1057,13 +1053,13 @@ impl AsInnerMut<imp::Command> for Command {\n ///\n /// This struct is created by [`Command::get_args`]. See its documentation for\n /// more.\n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandArgs<'a> {\n     inner: imp::CommandArgs<'a>,\n }\n \n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n impl<'a> Iterator for CommandArgs<'a> {\n     type Item = &'a OsStr;\n     fn next(&mut self) -> Option<&'a OsStr> {\n@@ -1074,7 +1070,7 @@ impl<'a> Iterator for CommandArgs<'a> {\n     }\n }\n \n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n impl<'a> ExactSizeIterator for CommandArgs<'a> {\n     fn len(&self) -> usize {\n         self.inner.len()"}, {"sha": "133c3e46cd8a66a997638a477a714e48169114fd", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -80,6 +80,7 @@ impl Barrier {\n     /// let barrier = Barrier::new(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(n: usize) -> Barrier {\n         Barrier {\n             lock: Mutex::new(BarrierState { count: 0, generation_id: 0 }),\n@@ -166,6 +167,7 @@ impl BarrierWaitResult {\n     /// println!(\"{:?}\", barrier_wait_result.is_leader());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn is_leader(&self) -> bool {\n         self.0\n     }"}, {"sha": "d8aca9651b8678726b24244920c2dc574badca15", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -121,6 +121,7 @@ impl Condvar {\n     /// let condvar = Condvar::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Condvar {\n         Condvar { inner: sys::Condvar::new() }\n     }"}, {"sha": "1710c0053934a76bc26e8b8fe929c5fb94db353e", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -186,6 +186,7 @@ impl Once {\n     #[inline]\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n     #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n+    #[must_use]\n     pub const fn new() -> Once {\n         Once { state_and_queue: AtomicUsize::new(INCOMPLETE), _marker: marker::PhantomData }\n     }"}, {"sha": "2ba6c8d830ede552890c37898353615bf2a69dc8", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -307,6 +307,9 @@ cfg_if::cfg_if! {\n         #[link(name = \"zircon\")]\n         #[link(name = \"fdio\")]\n         extern \"C\" {}\n+    } else if #[cfg(all(target_os = \"linux\", target_env = \"uclibc\"))] {\n+        #[link(name = \"dl\")]\n+        extern \"C\" {}\n     }\n }\n "}, {"sha": "db1a2a26a8903c21797fce7449b14749c400aec6", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -143,14 +143,15 @@ mod imp {\n     }\n \n     unsafe fn get_stackp() -> *mut libc::c_void {\n-        let stackp = mmap(\n-            ptr::null_mut(),\n-            SIGSTKSZ + page_size(),\n-            PROT_READ | PROT_WRITE,\n-            MAP_PRIVATE | MAP_ANON,\n-            -1,\n-            0,\n-        );\n+        // OpenBSD requires this flag for stack mapping\n+        // otherwise the said mapping will fail as a no-op on most systems\n+        // and has a different meaning on FreeBSD\n+        #[cfg(any(target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"linux\",))]\n+        let flags = MAP_PRIVATE | MAP_ANON | libc::MAP_STACK;\n+        #[cfg(not(any(target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"linux\",)))]\n+        let flags = MAP_PRIVATE | MAP_ANON;\n+        let stackp =\n+            mmap(ptr::null_mut(), SIGSTKSZ + page_size(), PROT_READ | PROT_WRITE, flags, -1, 0);\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack: {}\", io::Error::last_os_error());\n         }"}, {"sha": "6f4863057aba431b0635eb11a4671e335e573913", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -594,7 +594,8 @@ pub mod guard {\n                 Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n                 Some(stackaddr - guardsize..stackaddr)\n-            } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+            } else if cfg!(all(target_os = \"linux\", any(target_env = \"gnu\", target_env = \"uclibc\")))\n+            {\n                 // glibc used to include the guard area within the stack, as noted in the BUGS\n                 // section of `man pthread_attr_getguardsize`.  This has been corrected starting\n                 // with glibc 2.27, and in some distro backports, so the guard is now placed at the"}, {"sha": "ad550a823ae90e2596c26614d19c2911bbd953ad", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -558,7 +558,7 @@ impl IntoInner<Handle> for File {\n \n impl FromInner<Handle> for File {\n     fn from_inner(handle: Handle) -> File {\n-        File { handle: handle }\n+        File { handle }\n     }\n }\n \n@@ -672,7 +672,7 @@ impl FilePermissions {\n \n impl FileType {\n     fn new(attrs: c::DWORD, reparse_tag: c::DWORD) -> FileType {\n-        FileType { attributes: attrs, reparse_tag: reparse_tag }\n+        FileType { attributes: attrs, reparse_tag }\n     }\n     pub fn is_dir(&self) -> bool {\n         !self.is_symlink() && self.is_directory()"}, {"sha": "18a2a36ad2548e25c0bab340235d2fd41ac81646", "filename": "library/std/src/sys/windows/stack_overflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -9,10 +9,10 @@ impl Handler {\n     pub unsafe fn new() -> Handler {\n         // This API isn't available on XP, so don't panic in that case and just\n         // pray it works out ok.\n-        if c::SetThreadStackGuarantee(&mut 0x5000) == 0 {\n-            if c::GetLastError() as u32 != c::ERROR_CALL_NOT_IMPLEMENTED as u32 {\n-                panic!(\"failed to reserve stack space for exception handling\");\n-            }\n+        if c::SetThreadStackGuarantee(&mut 0x5000) == 0\n+            && c::GetLastError() as u32 != c::ERROR_CALL_NOT_IMPLEMENTED as u32\n+        {\n+            panic!(\"failed to reserve stack space for exception handling\");\n         }\n         Handler\n     }"}, {"sha": "d5e8f12414ff2d688007a157925030225d107518", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -93,10 +93,8 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n         if stop {\n             return false;\n         }\n-        if !hit {\n-            if start {\n-                res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n-            }\n+        if !hit && start {\n+            res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n         }\n \n         idx += 1;"}, {"sha": "3d71219756a207bfaba82d9a6a980ef102e6e338", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -106,13 +106,13 @@ impl CommandEnv {\n /// This struct is created by\n /// [`Command::get_envs`][crate::process::Command::get_envs]. See its\n /// documentation for more.\n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandEnvs<'a> {\n     iter: crate::collections::btree_map::Iter<'a, EnvKey, Option<OsString>>,\n }\n \n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n impl<'a> Iterator for CommandEnvs<'a> {\n     type Item = (&'a OsStr, Option<&'a OsStr>);\n     fn next(&mut self) -> Option<Self::Item> {\n@@ -123,7 +123,7 @@ impl<'a> Iterator for CommandEnvs<'a> {\n     }\n }\n \n-#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[stable(feature = \"command_access\", since = \"1.57.0\")]\n impl<'a> ExactSizeIterator for CommandEnvs<'a> {\n     fn len(&self) -> usize {\n         self.iter.len()"}, {"sha": "82847d83ad225a18bda264bdf25914bc875fcf37", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -412,9 +412,9 @@ impl Builder {\n     ///\n     /// # Safety\n     ///\n-    /// The caller has to ensure that no references in the supplied thread closure\n-    /// or its return type can outlive the spawned thread's lifetime. This can be\n-    /// guaranteed in two ways:\n+    /// The caller has to ensure that the spawned thread does not outlive any\n+    /// references in the supplied thread closure and its return type.\n+    /// This can be guaranteed in two ways:\n     ///\n     /// - ensure that [`join`][`JoinHandle::join`] is called before any referenced\n     /// data is dropped\n@@ -1031,6 +1031,7 @@ impl ThreadId {\n     /// value is entirely opaque -- only equality testing is stable. Note that\n     /// it is not guaranteed which values new threads will return, and this may\n     /// change across Rust versions.\n+    #[must_use]\n     #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n     pub fn as_u64(&self) -> NonZeroU64 {\n         self.0"}, {"sha": "e263780bf38796dbdae16e73b90bb8774edf39eb", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -63,7 +63,7 @@ cfg_if::cfg_if! {\n // don't want to duplicate it here.\n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     not(feature = \"system-llvm-libunwind\")\n ))]\n@@ -72,7 +72,7 @@ extern \"C\" {}\n \n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     feature = \"system-llvm-libunwind\"\n ))]"}, {"sha": "1859130a7af5af35b6d3bf4a97588d63e4dde538", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -460,7 +460,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             # LLVM more often than necessary.\n             #\n             # This git command finds that commit SHA, looking for bors-authored\n-            # merges that modified src/llvm-project or other relevant version\n+            # commits that modified src/llvm-project or other relevant version\n             # stamp files.\n             #\n             # This works even in a repository that has not yet initialized\n@@ -470,7 +470,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             ]).decode(sys.getdefaultencoding()).strip()\n             llvm_sha = subprocess.check_output([\n                 \"git\", \"rev-list\", \"--author=bors@rust-lang.org\", \"-n1\",\n-                \"--merges\", \"--first-parent\", \"HEAD\",\n+                \"--first-parent\", \"HEAD\",\n                 \"--\",\n                 \"{}/src/llvm-project\".format(top_level),\n                 \"{}/src/bootstrap/download-ci-llvm-stamp\".format(top_level),\n@@ -540,6 +540,12 @@ def _download_component_helper(\n         unpack(tarball, tarball_suffix, self.bin_root(stage0), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n+        if not llvm_sha:\n+            print(\"error: could not find commit hash for downloading LLVM\")\n+            print(\"help: maybe your repository history is too shallow?\")\n+            print(\"help: consider disabling `download-ci-llvm`\")\n+            print(\"help: or fetch enough history to include one upstream commit\")\n+            exit(1)\n         cache_prefix = \"llvm-{}-{}\".format(llvm_sha, llvm_assertions)\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, cache_prefix)\n@@ -685,9 +691,15 @@ def maybe_download_ci_toolchain(self):\n         # Only commits merged by bors will have CI artifacts.\n         merge_base = [\n             \"git\", \"rev-list\", \"--author=bors@rust-lang.org\", \"-n1\",\n-            \"--merges\", \"--first-parent\", \"HEAD\"\n+            \"--first-parent\", \"HEAD\"\n         ]\n         commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n+        if not commit:\n+            print(\"error: could not find commit hash for downloading rustc\")\n+            print(\"help: maybe your repository history is too shallow?\")\n+            print(\"help: consider disabling `download-rustc`\")\n+            print(\"help: or fetch enough history to include one upstream commit\")\n+            exit(1)\n \n         # Warn if there were changes to the compiler or standard library since the ancestor commit.\n         status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler, library])\n@@ -921,10 +933,9 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n+\n         # preserve existing RUSTFLAGS\n         env.setdefault(\"RUSTFLAGS\", \"\")\n-        env[\"RUSTFLAGS\"] += \" -Cdebuginfo=2\"\n-\n         build_section = \"target.{}\".format(self.build)\n         target_features = []\n         if self.get_toml(\"crt-static\", build_section) == \"true\":"}, {"sha": "7df7a36f540dd91727b776253aa834f5b235de8c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1342,12 +1342,6 @@ impl<'a> Builder<'a> {\n                 rustdocflags.arg(\"-Dwarnings\");\n             }\n \n-            // FIXME(#58633) hide \"unused attribute\" errors in incremental\n-            // builds of the standard library, as the underlying checks are\n-            // not yet properly integrated with incremental recompilation.\n-            if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n-                lint_flags.push(\"-Aunused-attributes\");\n-            }\n             // This does not use RUSTFLAGS due to caching issues with Cargo.\n             // Clippy is treated as an \"in tree\" tool, but shares the same\n             // cache as other \"submodule\" tools. With these options set in"}, {"sha": "8594fa42266b41306d242f59c65b27fc5ca732d0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -653,7 +653,7 @@ impl Step for Clippy {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        let clippy = builder\n+        builder\n             .ensure(tool::Clippy { compiler, target: self.host, extra_features: Vec::new() })\n             .expect(\"in-tree tool\");\n         let mut cargo = tool::prepare_tool_cargo(\n@@ -672,14 +672,7 @@ impl Step for Clippy {\n         cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n         cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n-        let target_libs = builder\n-            .stage_out(compiler, Mode::ToolRustc)\n-            .join(&self.host.triple)\n-            .join(builder.cargo_dir());\n         cargo.env(\"HOST_LIBS\", host_libs);\n-        cargo.env(\"TARGET_LIBS\", target_libs);\n-        // clippy tests need to find the driver\n-        cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n \n         cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n@@ -905,7 +898,7 @@ impl Step for RustdocGUI {\n         let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n \n         // We remove existing folder to be sure there won't be artifacts remaining.\n-        let _ = fs::remove_dir_all(&out_dir);\n+        builder.clear_if_dirty(&out_dir, &builder.rustdoc(self.compiler));\n \n         let src_path = builder.build.src.join(\"src/test/rustdoc-gui/src\");\n         // We generate docs for the libraries present in the rustdoc-gui's src folder."}, {"sha": "416fa50374fe412c89b9b3c5cdff7f890c332c58", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/aarch64-linux-gnu.config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -37,7 +37,8 @@ CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n # CT_FORCE_DOWNLOAD is not set\n CT_CONNECT_TIMEOUT=10\n # CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n #\n # Extracting"}, {"sha": "814e1fa16f87d87333501796d7f3f7febc7469a5", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/powerpc-linux-gnu.config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -37,7 +37,8 @@ CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n # CT_FORCE_DOWNLOAD is not set\n CT_CONNECT_TIMEOUT=10\n # CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n #\n # Extracting"}, {"sha": "83439bb81e23d084dcf1c2b17cc1c2a59b270096", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/powerpc64-linux-gnu.config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -37,7 +37,8 @@ CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n # CT_FORCE_DOWNLOAD is not set\n CT_CONNECT_TIMEOUT=10\n # CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n #\n # Extracting"}, {"sha": "2e995b2c0bdfd327cd53cafa125555f9e3b849fc", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/s390x-linux-gnu.config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -37,7 +37,8 @@ CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n # CT_FORCE_DOWNLOAD is not set\n CT_CONNECT_TIMEOUT=10\n # CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n #\n # Extracting"}, {"sha": "7c0088ca744d293a5f4b1e2ac378e7c23d30fe55", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit 2d9b1b9da706de24650fdc5c3b0182f55c82115d\n+Subproject commit 7c0088ca744d293a5f4b1e2ac378e7c23d30fe55"}, {"sha": "270fccd339e5972d9c900e788f197e81a0bcd956", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit 4c76da9ddb4650203c129fceffdea95a3466c205\n+Subproject commit 270fccd339e5972d9c900e788f197e81a0bcd956"}, {"sha": "2d66852a27c5d0ec50ae021820d1de22caa2b1bd", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit 2747c4bb2cbc0639b733793ddb0bf4e9daa2634e\n+Subproject commit 2d66852a27c5d0ec50ae021820d1de22caa2b1bd"}, {"sha": "b5c68b02984f74e99d1f1b332029e05f607e2660", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit 13747275bd14c2d2b453100498532f9ae5504769\n+Subproject commit b5c68b02984f74e99d1f1b332029e05f607e2660"}, {"sha": "9a60624fcad0140826c44389571dc622917cd632", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit 28aca4a36962c709bce301c03114b5589381dfb8\n+Subproject commit 9a60624fcad0140826c44389571dc622917cd632"}, {"sha": "fba15a46ca8efa97e8a955794724ac7ce27805b8", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1 +1 @@\n-Subproject commit d1f03cbaa39d9164f5fe4b9b93762668142e0dad\n+Subproject commit fba15a46ca8efa97e8a955794724ac7ce27805b8"}, {"sha": "bbeab598f2292870baca8e070388fd632881b592", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -220,6 +220,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n+`armv7-unknown-linux-uclibceabihf` | \u2713 | ? | ARMv7 Linux uClibc\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |"}, {"sha": "b3a4275c6ee92a3e19298067076844e7dbde6818", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,66 @@\n+# armv7-unknown-linux-uclibceabihf\n+\n+**Tier: 3**\n+\n+This tier supports the ARMv7 processor running a Linux kernel and uClibc-ng standard library.  It provides full support for rust and the rust standard library.\n+\n+## Designated Developers\n+\n+* [@skrap](https://github.com/skrap)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires a cross toolchain.  You can find suitable pre-built toolchains at [bootlin](https://toolchains.bootlin.com/) or build one yourself via [buildroot](https://buildroot.org).\n+\n+## Building\n+\n+### Get a C toolchain\n+\n+Compiling rust for this target has been tested on `x86_64` linux hosts.  Other host types have not been tested, but may work, if you can find a suitable cross compilation toolchain for them.\n+\n+If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2020.08-1.tar.bz2), and unpack it into a directory.\n+\n+### Configure rust\n+\n+The target can be built by enabling it for a `rustc` build, by placing the following in `config.toml`:\n+\n+```toml\n+[build]\n+target = [\"armv7-unknown-linux-uclibceabihf\"]\n+stage = 2\n+\n+[target.armv7-unknown-linux-uclibceabihf]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/arm-buildroot-linux-uclibcgnueabihf-gcc\"\n+```\n+\n+### Build\n+\n+```sh\n+# in rust dir\n+./x.py build --stage 2\n+```\n+\n+## Building and Running Rust Programs\n+\n+To test cross-compiled binaries on a `x86_64` system, you can use the `qemu-arm` [userspace emulation](https://qemu-project.gitlab.io/qemu/user/main.html) program.  This avoids having a full emulated ARM system by doing dynamic binary translation and dynamic system call translation.  It lets you run ARM programs directly on your `x86_64` kernel.  It's very convenient!\n+\n+To use:\n+\n+* Install `qemu-arm` according to your distro.\n+* Link your built toolchain via:\n+  * `rustup toolchain link stage2 ${RUST}/build/x86_64-unknown-linux-gnu/stage2`\n+* Create a test program\n+\n+```sh\n+cargo new hello_world\n+cd hello_world\n+```\n+\n+* Build and run\n+\n+```sh\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_RUNNER=\"qemu-arm -L ${TOOLCHAIN}/arm-buildroot-linux-uclibcgnueabihf/sysroot/\" \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_LINKER=${TOOLCHAIN}/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \\\n+cargo +stage2 run --target armv7-unknown-linux-uclibceabihf\n+```"}, {"sha": "5a2cef24870be49daaff686d45f225e39cfdffd4", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -456,7 +456,7 @@ operand := reg_operand / \"const\" const_expr / \"sym\" path\n clobber_abi := \"clobber_abi(\" <abi> \")\"\n option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n-asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi]  [\",\" options] [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi] *(\",\" options) [\",\"] \")\"\n ```\n \n Inline assembly is currently supported on the following architectures:\n@@ -613,8 +613,8 @@ Each register class has constraints on which value types they can be used with.\n | x86 | `xmm_reg` | `sse` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n | x86 | `ymm_reg` | `avx` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` |\n | x86 | `zmm_reg` | `avx512f` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` <br> `i8x64`, `i16x32`, `i32x16`, `i64x8`, `f32x16`, `f64x8` |\n-| x86 | `kreg` | `axv512f` | `i8`, `i16` |\n-| x86 | `kreg` | `axv512bw` | `i32`, `i64` |\n+| x86 | `kreg` | `avx512f` | `i8`, `i16` |\n+| x86 | `kreg` | `avx512bw` | `i32`, `i64` |\n | x86 | `mmx_reg` | N/A | Only clobbers |\n | x86 | `x87_reg` | N/A | Only clobbers |\n | AArch64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |"}, {"sha": "f9d1666977134f70fda11a90096bbd3fd25d7473", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 143, "deletions": 179, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n+                trait_: Some(trait_ref.clean(self.cx)),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n                 negative_polarity,\n@@ -166,16 +166,16 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .clone()\n     }\n \n-    // This method calculates two things: Lifetime constraints of the form 'a: 'b,\n-    // and region constraints of the form ReVar: 'a\n-    //\n-    // This is essentially a simplified version of lexical_region_resolve. However,\n-    // handle_lifetimes determines what *needs be* true in order for an impl to hold.\n-    // lexical_region_resolve, along with much of the rest of the compiler, is concerned\n-    // with determining if a given set up constraints/predicates *are* met, given some\n-    // starting conditions (e.g., user-provided code). For this reason, it's easier\n-    // to perform the calculations we need on our own, rather than trying to make\n-    // existing inference/solver code do what we want.\n+    /// This method calculates two things: Lifetime constraints of the form `'a: 'b`,\n+    /// and region constraints of the form `RegionVid: 'a`\n+    ///\n+    /// This is essentially a simplified version of lexical_region_resolve. However,\n+    /// handle_lifetimes determines what *needs be* true in order for an impl to hold.\n+    /// lexical_region_resolve, along with much of the rest of the compiler, is concerned\n+    /// with determining if a given set up constraints/predicates *are* met, given some\n+    /// starting conditions (e.g., user-provided code). For this reason, it's easier\n+    /// to perform the calculations we need on our own, rather than trying to make\n+    /// existing inference/solver code do what we want.\n     fn handle_lifetimes<'cx>(\n         regions: &RegionConstraintData<'cx>,\n         names_map: &FxHashMap<Symbol, Lifetime>,\n@@ -353,48 +353,35 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 if let Some(data) = ty_to_fn.get(&ty) {\n                     let (poly_trait, output) =\n                         (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n-                    let new_ty = match poly_trait.trait_ {\n-                        Type::ResolvedPath { ref path, ref did } => {\n-                            let mut new_path = path.clone();\n-                            let last_segment =\n-                                new_path.segments.pop().expect(\"segments were empty\");\n-\n-                            let (old_input, old_output) = match last_segment.args {\n-                                GenericArgs::AngleBracketed { args, .. } => {\n-                                    let types = args\n-                                        .iter()\n-                                        .filter_map(|arg| match arg {\n-                                            GenericArg::Type(ty) => Some(ty.clone()),\n-                                            _ => None,\n-                                        })\n-                                        .collect();\n-                                    (types, None)\n-                                }\n-                                GenericArgs::Parenthesized { inputs, output, .. } => {\n-                                    (inputs, output)\n-                                }\n-                            };\n+                    let mut new_path = poly_trait.trait_.clone();\n+                    let last_segment = new_path.segments.pop().expect(\"segments were empty\");\n+\n+                    let (old_input, old_output) = match last_segment.args {\n+                        GenericArgs::AngleBracketed { args, .. } => {\n+                            let types = args\n+                                .iter()\n+                                .filter_map(|arg| match arg {\n+                                    GenericArg::Type(ty) => Some(ty.clone()),\n+                                    _ => None,\n+                                })\n+                                .collect();\n+                            (types, None)\n+                        }\n+                        GenericArgs::Parenthesized { inputs, output } => (inputs, output),\n+                    };\n \n-                            if old_output.is_some() && old_output != output {\n-                                panic!(\n-                                    \"Output mismatch for {:?} {:?} {:?}\",\n-                                    ty, old_output, data.1\n-                                );\n-                            }\n+                    if old_output.is_some() && old_output != output {\n+                        panic!(\"Output mismatch for {:?} {:?} {:?}\", ty, old_output, data.1);\n+                    }\n \n-                            let new_params =\n-                                GenericArgs::Parenthesized { inputs: old_input, output };\n+                    let new_params = GenericArgs::Parenthesized { inputs: old_input, output };\n \n-                            new_path\n-                                .segments\n-                                .push(PathSegment { name: last_segment.name, args: new_params });\n+                    new_path\n+                        .segments\n+                        .push(PathSegment { name: last_segment.name, args: new_params });\n \n-                            Type::ResolvedPath { path: new_path, did: *did }\n-                        }\n-                        _ => panic!(\"Unexpected data: {:?}, {:?}\", ty, data),\n-                    };\n                     bounds.insert(GenericBound::TraitBound(\n-                        PolyTrait { trait_: new_ty, generic_params: poly_trait.generic_params },\n+                        PolyTrait { trait_: new_path, generic_params: poly_trait.generic_params },\n                         hir::TraitBoundModifier::None,\n                     ));\n                 }\n@@ -423,15 +410,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .collect()\n     }\n \n-    // Converts the calculated ParamEnv and lifetime information to a clean::Generics, suitable for\n-    // display on the docs page. Cleaning the Predicates produces sub-optimal `WherePredicate`s,\n-    // so we fix them up:\n-    //\n-    // * Multiple bounds for the same type are coalesced into one: e.g., 'T: Copy', 'T: Debug'\n-    // becomes 'T: Copy + Debug'\n-    // * Fn bounds are handled specially - instead of leaving it as 'T: Fn(), <T as Fn::Output> =\n-    // K', we use the dedicated syntax 'T: Fn() -> K'\n-    // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n+    /// Converts the calculated `ParamEnv` and lifetime information to a [`clean::Generics`](Generics), suitable for\n+    /// display on the docs page. Cleaning the `Predicates` produces sub-optimal [`WherePredicate`]s,\n+    /// so we fix them up:\n+    ///\n+    /// * Multiple bounds for the same type are coalesced into one: e.g., `T: Copy`, `T: Debug`\n+    /// becomes `T: Copy + Debug`\n+    /// * `Fn` bounds are handled specially - instead of leaving it as `T: Fn(), <T as Fn::Output> =\n+    /// K`, we use the dedicated syntax `T: Fn() -> K`\n+    /// * We explicitly add a `?Sized` bound if we didn't find any `Sized` predicates for a type\n     fn param_env_to_generics(\n         &mut self,\n         item_def_id: DefId,\n@@ -476,7 +463,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let mut has_sized = FxHashSet::default();\n         let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n-        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = Default::default();\n+        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Path>> = Default::default();\n \n         let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n \n@@ -511,11 +498,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     if b.is_sized_bound(self.cx) {\n                         has_sized.insert(ty.clone());\n                     } else if !b\n-                        .get_trait_type()\n-                        .and_then(|t| {\n+                        .get_trait_path()\n+                        .and_then(|trait_| {\n                             ty_to_traits\n                                 .get(&ty)\n-                                .map(|bounds| bounds.contains(&strip_type(t.clone())))\n+                                .map(|bounds| bounds.contains(&strip_path_generics(trait_.clone())))\n                         })\n                         .unwrap_or(false)\n                     {\n@@ -532,7 +519,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n                                 p.generic_params = for_generics.into_iter().collect();\n-                                self.is_fn_ty(&p.trait_)\n+                                self.is_fn_trait(&p.trait_)\n                             }\n                             _ => false,\n                         };\n@@ -558,78 +545,59 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     match lhs {\n                         Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n-                            match **trait_ {\n-                                Type::ResolvedPath { path: ref trait_path, ref did } => {\n-                                    let mut new_trait_path = trait_path.clone();\n-\n-                                    if self.is_fn_ty(trait_) && left_name == sym::Output {\n-                                        ty_to_fn\n-                                            .entry(*ty.clone())\n-                                            .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n-                                            .or_insert((None, Some(rhs)));\n-                                        continue;\n-                                    }\n-\n-                                    let args = &mut new_trait_path\n-                                        .segments\n-                                        .last_mut()\n-                                        .expect(\"segments were empty\")\n-                                        .args;\n-\n-                                    match args {\n-                                        // Convert something like '<T as Iterator::Item> = u8'\n-                                        // to 'T: Iterator<Item=u8>'\n-                                        GenericArgs::AngleBracketed {\n-                                            ref mut bindings, ..\n-                                        } => {\n-                                            bindings.push(TypeBinding {\n-                                                name: left_name,\n-                                                kind: TypeBindingKind::Equality { ty: rhs },\n-                                            });\n-                                        }\n-                                        GenericArgs::Parenthesized { .. } => {\n-                                            existing_predicates.push(WherePredicate::EqPredicate {\n-                                                lhs: lhs.clone(),\n-                                                rhs,\n-                                            });\n-                                            continue; // If something other than a Fn ends up\n-                                            // with parenthesis, leave it alone\n-                                        }\n-                                    }\n-\n-                                    let bounds = ty_to_bounds.entry(*ty.clone()).or_default();\n-\n-                                    bounds.insert(GenericBound::TraitBound(\n-                                        PolyTrait {\n-                                            trait_: Type::ResolvedPath {\n-                                                path: new_trait_path,\n-                                                did: *did,\n-                                            },\n-                                            generic_params: Vec::new(),\n-                                        },\n-                                        hir::TraitBoundModifier::None,\n-                                    ));\n-\n-                                    // Remove any existing 'plain' bound (e.g., 'T: Iterator`) so\n-                                    // that we don't see a\n-                                    // duplicate bound like `T: Iterator + Iterator<Item=u8>`\n-                                    // on the docs page.\n-                                    bounds.remove(&GenericBound::TraitBound(\n-                                        PolyTrait {\n-                                            trait_: *trait_.clone(),\n-                                            generic_params: Vec::new(),\n-                                        },\n-                                        hir::TraitBoundModifier::None,\n-                                    ));\n-                                    // Avoid creating any new duplicate bounds later in the outer\n-                                    // loop\n-                                    ty_to_traits\n-                                        .entry(*ty.clone())\n-                                        .or_default()\n-                                        .insert(*trait_.clone());\n+                            let mut new_trait = trait_.clone();\n+\n+                            if self.is_fn_trait(trait_) && left_name == sym::Output {\n+                                ty_to_fn\n+                                    .entry(*ty.clone())\n+                                    .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n+                                    .or_insert((None, Some(rhs)));\n+                                continue;\n+                            }\n+\n+                            let args = &mut new_trait\n+                                .segments\n+                                .last_mut()\n+                                .expect(\"segments were empty\")\n+                                .args;\n+\n+                            match args {\n+                                // Convert something like '<T as Iterator::Item> = u8'\n+                                // to 'T: Iterator<Item=u8>'\n+                                GenericArgs::AngleBracketed { ref mut bindings, .. } => {\n+                                    bindings.push(TypeBinding {\n+                                        name: left_name,\n+                                        kind: TypeBindingKind::Equality { ty: rhs },\n+                                    });\n+                                }\n+                                GenericArgs::Parenthesized { .. } => {\n+                                    existing_predicates.push(WherePredicate::EqPredicate {\n+                                        lhs: lhs.clone(),\n+                                        rhs,\n+                                    });\n+                                    continue; // If something other than a Fn ends up\n+                                    // with parenthesis, leave it alone\n                                 }\n-                                _ => panic!(\"Unexpected trait {:?} for {:?}\", trait_, item_def_id),\n                             }\n+\n+                            let bounds = ty_to_bounds.entry(*ty.clone()).or_default();\n+\n+                            bounds.insert(GenericBound::TraitBound(\n+                                PolyTrait { trait_: new_trait, generic_params: Vec::new() },\n+                                hir::TraitBoundModifier::None,\n+                            ));\n+\n+                            // Remove any existing 'plain' bound (e.g., 'T: Iterator`) so\n+                            // that we don't see a\n+                            // duplicate bound like `T: Iterator + Iterator<Item=u8>`\n+                            // on the docs page.\n+                            bounds.remove(&GenericBound::TraitBound(\n+                                PolyTrait { trait_: trait_.clone(), generic_params: Vec::new() },\n+                                hir::TraitBoundModifier::None,\n+                            ));\n+                            // Avoid creating any new duplicate bounds later in the outer\n+                            // loop\n+                            ty_to_traits.entry(*ty.clone()).or_default().insert(trait_.clone());\n                         }\n                         _ => panic!(\"Unexpected LHS {:?} for {:?}\", lhs, item_def_id),\n                     }\n@@ -664,11 +632,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         Generics { params: generic_params, where_predicates: existing_predicates }\n     }\n \n-    // Ensure that the predicates are in a consistent order. The precise\n-    // ordering doesn't actually matter, but it's important that\n-    // a given set of predicates always appears in the same order -\n-    // both for visual consistency between 'rustdoc' runs, and to\n-    // make writing tests much easier\n+    /// Ensure that the predicates are in a consistent order. The precise\n+    /// ordering doesn't actually matter, but it's important that\n+    /// a given set of predicates always appears in the same order -\n+    /// both for visual consistency between 'rustdoc' runs, and to\n+    /// make writing tests much easier\n     #[inline]\n     fn sort_where_predicates(&self, mut predicates: &mut Vec<WherePredicate>) {\n         // We should never have identical bounds - and if we do,\n@@ -677,11 +645,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         self.unstable_debug_sort(&mut predicates);\n     }\n \n-    // Ensure that the bounds are in a consistent order. The precise\n-    // ordering doesn't actually matter, but it's important that\n-    // a given set of bounds always appears in the same order -\n-    // both for visual consistency between 'rustdoc' runs, and to\n-    // make writing tests much easier\n+    /// Ensure that the bounds are in a consistent order. The precise\n+    /// ordering doesn't actually matter, but it's important that\n+    /// a given set of bounds always appears in the same order -\n+    /// both for visual consistency between 'rustdoc' runs, and to\n+    /// make writing tests much easier\n     #[inline]\n     fn sort_where_bounds(&self, mut bounds: &mut Vec<GenericBound>) {\n         // We should never have identical bounds - and if we do,\n@@ -690,47 +658,43 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         self.unstable_debug_sort(&mut bounds);\n     }\n \n-    // This might look horrendously hacky, but it's actually not that bad.\n-    //\n-    // For performance reasons, we use several different FxHashMaps\n-    // in the process of computing the final set of where predicates.\n-    // However, the iteration order of a HashMap is completely unspecified.\n-    // In fact, the iteration of an FxHashMap can even vary between platforms,\n-    // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n-    //\n-    // Obviously, it's extremely undesirable for documentation rendering\n-    // to be dependent on the platform it's run on. Apart from being confusing\n-    // to end users, it makes writing tests much more difficult, as predicates\n-    // can appear in any order in the final result.\n-    //\n-    // To solve this problem, we sort WherePredicates and GenericBounds\n-    // by their Debug string. The thing to keep in mind is that we don't really\n-    // care what the final order is - we're synthesizing an impl or bound\n-    // ourselves, so any order can be considered equally valid. By sorting the\n-    // predicates and bounds, however, we ensure that for a given codebase, all\n-    // auto-trait impls always render in exactly the same way.\n-    //\n-    // Using the Debug implementation for sorting prevents us from needing to\n-    // write quite a bit of almost entirely useless code (e.g., how should two\n-    // Types be sorted relative to each other). It also allows us to solve the\n-    // problem for both WherePredicates and GenericBounds at the same time. This\n-    // approach is probably somewhat slower, but the small number of items\n-    // involved (impls rarely have more than a few bounds) means that it\n-    // shouldn't matter in practice.\n+    /// This might look horrendously hacky, but it's actually not that bad.\n+    ///\n+    /// For performance reasons, we use several different FxHashMaps\n+    /// in the process of computing the final set of where predicates.\n+    /// However, the iteration order of a HashMap is completely unspecified.\n+    /// In fact, the iteration of an FxHashMap can even vary between platforms,\n+    /// since FxHasher has different behavior for 32-bit and 64-bit platforms.\n+    ///\n+    /// Obviously, it's extremely undesirable for documentation rendering\n+    /// to be dependent on the platform it's run on. Apart from being confusing\n+    /// to end users, it makes writing tests much more difficult, as predicates\n+    /// can appear in any order in the final result.\n+    ///\n+    /// To solve this problem, we sort WherePredicates and GenericBounds\n+    /// by their Debug string. The thing to keep in mind is that we don't really\n+    /// care what the final order is - we're synthesizing an impl or bound\n+    /// ourselves, so any order can be considered equally valid. By sorting the\n+    /// predicates and bounds, however, we ensure that for a given codebase, all\n+    /// auto-trait impls always render in exactly the same way.\n+    ///\n+    /// Using the Debug implementation for sorting prevents us from needing to\n+    /// write quite a bit of almost entirely useless code (e.g., how should two\n+    /// Types be sorted relative to each other). It also allows us to solve the\n+    /// problem for both WherePredicates and GenericBounds at the same time. This\n+    /// approach is probably somewhat slower, but the small number of items\n+    /// involved (impls rarely have more than a few bounds) means that it\n+    /// shouldn't matter in practice.\n     fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, ty: &Type) -> bool {\n+    fn is_fn_trait(&self, path: &Path) -> bool {\n         let tcx = self.cx.tcx;\n-        match ty {\n-            &Type::ResolvedPath { did, .. } => {\n-                did == tcx.require_lang_item(LangItem::Fn, None)\n-                    || did == tcx.require_lang_item(LangItem::FnMut, None)\n-                    || did == tcx.require_lang_item(LangItem::FnOnce, None)\n-            }\n-            _ => false,\n-        }\n+        let did = path.def_id();\n+        did == tcx.require_lang_item(LangItem::Fn, None)\n+            || did == tcx.require_lang_item(LangItem::FnMut, None)\n+            || did == tcx.require_lang_item(LangItem::FnOnce, None)\n     }\n }\n \n@@ -741,7 +705,7 @@ fn region_name(region: Region<'_>) -> Option<Symbol> {\n     }\n }\n \n-// Replaces all ReVars in a type with ty::Region's, using the provided map\n+/// Replaces all [`ty::RegionVid`]s in a type with [`ty::Region`]s, using the provided map.\n struct RegionReplacer<'a, 'tcx> {\n     vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "843dda324da7fb75842b6ca3457f17f1b69bdcdc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             );\n                             match infcx.evaluate_obligation(&obligation) {\n                                 Ok(eval_result) if eval_result.may_apply() => {}\n-                                Err(traits::OverflowError::Cannonical) => {}\n+                                Err(traits::OverflowError::Canonical) => {}\n                                 Err(traits::OverflowError::ErrorReporting) => {}\n                                 _ => {\n                                     return false;\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         // FIXME(eddyb) compute both `trait_` and `for_` from\n                         // the post-inference `trait_ref`, as it's more accurate.\n-                        trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n+                        trait_: Some(trait_ref.clean(self.cx)),\n                         for_: ty.clean(self.cx),\n                         items: self\n                             .cx"}, {"sha": "e11b802a09a3b9d3961083494b9705b99f3535b7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -446,20 +446,26 @@ crate fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.clean(cx).map(|bound| match bound {\n-        clean::GenericBound::TraitBound(polyt, _) => polyt.trait_,\n-        clean::GenericBound::Outlives(..) => unreachable!(),\n-    });\n-    if trait_.def_id() == tcx.lang_items().deref_trait() {\n+    let trait_ = associated_trait.clean(cx);\n+    if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n \n     // Return if the trait itself or any types of the generic parameters are doc(hidden).\n-    let mut stack: Vec<&Type> = trait_.iter().collect();\n-    stack.push(&for_);\n+    let mut stack: Vec<&Type> = vec![&for_];\n+\n+    if let Some(did) = trait_.as_ref().map(|t| t.def_id()) {\n+        if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+            return;\n+        }\n+    }\n+    if let Some(generics) = trait_.as_ref().and_then(|t| t.generics()) {\n+        stack.extend(generics);\n+    }\n+\n     while let Some(ty) = stack.pop() {\n         if let Some(did) = ty.def_id() {\n-            if cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+            if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n                 return;\n             }\n         }\n@@ -468,14 +474,14 @@ crate fn build_impl(\n         }\n     }\n \n-    if let Some(trait_did) = trait_.def_id() {\n-        record_extern_trait(cx, trait_did);\n+    if let Some(did) = trait_.as_ref().map(|t| t.def_id()) {\n+        record_extern_trait(cx, did);\n     }\n \n     let (merged_attrs, cfg) = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n     trace!(\"merged_attrs={:?}\", merged_attrs);\n \n-    trace!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n+    trace!(\"build_impl: impl {:?} for {:?}\", trait_.as_ref().map(|t| t.def_id()), for_.def_id());\n     ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n         did,\n         None,\n@@ -526,7 +532,6 @@ fn build_module(\n                         item.ident.name,\n                         clean::ImportSource {\n                             path: clean::Path {\n-                                global: false,\n                                 res,\n                                 segments: vec![clean::PathSegment {\n                                     name: prim_ty.as_sym(),\n@@ -621,30 +626,23 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                 ref mut bounds,\n                 ..\n             } if *s == kw::SelfUpper => {\n-                bounds.retain(|bound| match *bound {\n-                    clean::GenericBound::TraitBound(\n-                        clean::PolyTrait { trait_: clean::ResolvedPath { did, .. }, .. },\n-                        _,\n-                    ) => did != trait_did,\n+                bounds.retain(|bound| match bound {\n+                    clean::GenericBound::TraitBound(clean::PolyTrait { trait_, .. }, _) => {\n+                        trait_.def_id() != trait_did\n+                    }\n                     _ => true,\n                 });\n             }\n             _ => {}\n         }\n     }\n \n-    g.where_predicates.retain(|pred| match *pred {\n+    g.where_predicates.retain(|pred| match pred {\n         clean::WherePredicate::BoundPredicate {\n-            ty:\n-                clean::QPath {\n-                    self_type: box clean::Generic(ref s),\n-                    trait_: box clean::ResolvedPath { did, .. },\n-                    name: ref _name,\n-                    ..\n-                },\n-            ref bounds,\n+            ty: clean::QPath { self_type: box clean::Generic(ref s), trait_, name: _, .. },\n+            bounds,\n             ..\n-        } => !(bounds.is_empty() || *s == kw::SelfUpper && did == trait_did),\n+        } => !(bounds.is_empty() || *s == kw::SelfUpper && trait_.def_id() == trait_did),\n         _ => true,\n     });\n     g"}, {"sha": "9d102d6878370dea44d839c83b57e15d9feeafde", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -152,8 +152,8 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n     }\n }\n \n-impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n+impl Clean<Path> for (ty::TraitRef<'_>, &[TypeBinding]) {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         let (trait_ref, bounds) = *self;\n         let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n         if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n@@ -168,16 +168,13 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n-        ResolvedPath { path, did: trait_ref.def_id }\n+        path\n     }\n }\n \n-impl<'tcx> Clean<GenericBound> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        GenericBound::TraitBound(\n-            PolyTrait { trait_: (*self, &[][..]).clean(cx), generic_params: vec![] },\n-            hir::TraitBoundModifier::None,\n-        )\n+impl Clean<Path> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n+        (*self, &[][..]).clean(cx)\n     }\n }\n \n@@ -384,16 +381,13 @@ impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let lifted = self.lift_to_tcx(cx.tcx).unwrap();\n-        let trait_ = match lifted.trait_ref(cx.tcx).clean(cx) {\n-            GenericBound::TraitBound(t, _) => t.trait_,\n-            GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n-        };\n+        let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n         let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n             self_def_id: self_type.def_id(),\n             self_type: box self_type,\n-            trait_: box trait_,\n+            trait_,\n         }\n     }\n }\n@@ -896,10 +890,11 @@ impl Clean<bool> for hir::IsAuto {\n     }\n }\n \n-impl Clean<Type> for hir::TraitRef<'_> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n+impl Clean<Path> for hir::TraitRef<'_> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         let path = self.path.clean(cx);\n-        resolve_type(cx, path)\n+        register_res(cx, path.res);\n+        path\n     }\n }\n \n@@ -1105,9 +1100,8 @@ impl Clean<Item> for ty::AssocItem {\n                             if *name != my_name {\n                                 return None;\n                             }\n-                            match **trait_ {\n-                                ResolvedPath { did, .. } if did == self.container.id() => {}\n-                                _ => return None,\n+                            if trait_.def_id() != self.container.id() {\n+                                return None;\n                             }\n                             match **self_type {\n                                 Generic(ref s) if *s == kw::SelfUpper => {}\n@@ -1273,19 +1267,18 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 return normalized_value.clean(cx);\n             }\n \n-            let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n-            let trait_segments = &segments[..segments.len() - 1];\n+            let trait_segments = &p.segments[..p.segments.len() - 1];\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n-            let trait_path = self::Path {\n-                global: p.is_global(),\n+            let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n                 segments: trait_segments.clean(cx),\n             };\n+            register_res(cx, trait_.res);\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n                 self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path),\n+                trait_,\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1296,12 +1289,13 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 ty::Error(_) => return Type::Infer,\n                 _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n             };\n-            let trait_path = hir::Path { span, res, segments: &[] }.clean(cx);\n+            let trait_ = hir::Path { span, res, segments: &[] }.clean(cx);\n+            register_res(cx, trait_.res);\n             Type::QPath {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n                 self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path),\n+                trait_,\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),\n@@ -1470,10 +1464,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path = external_path(cx, did, false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n-                    let bound = PolyTrait {\n-                        trait_: ResolvedPath { path, did },\n-                        generic_params: Vec::new(),\n-                    };\n+                    let bound = PolyTrait { trait_: path, generic_params: Vec::new() };\n                     bounds.push(bound);\n                 }\n \n@@ -1486,10 +1477,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 }\n \n                 let path = external_path(cx, did, false, bindings, substs);\n-                bounds.insert(\n-                    0,\n-                    PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n-                );\n+                bounds.insert(0, PolyTrait { trait_: path, generic_params: Vec::new() });\n \n                 DynTrait(bounds, lifetime)\n             }\n@@ -1728,11 +1716,7 @@ impl Clean<Variant> for hir::VariantData<'_> {\n \n impl Clean<Path> for hir::Path<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n-        Path {\n-            global: self.is_global(),\n-            res: self.res,\n-            segments: if self.is_global() { &self.segments[1..] } else { &self.segments }.clean(cx),\n-        }\n+        Path { res: self.res, segments: self.segments.clean(cx) }\n     }\n }\n \n@@ -1898,7 +1882,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n \n     // If this impl block is an implementation of the Deref trait, then we\n     // need to try inlining the target's inherent impl blocks as well.\n-    if trait_.def_id() == tcx.lang_items().deref_trait() {\n+    if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         build_deref_target_impls(cx, &items, &mut ret);\n     }\n \n@@ -1907,7 +1891,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n         DefKind::TyAlias => Some(tcx.type_of(did).clean(cx)),\n         _ => None,\n     });\n-    let mut make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| {\n+    let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {\n         let kind = ImplItem(Impl {\n             span: types::rustc_span(tcx.hir().local_def_id(hir_id).to_def_id(), tcx),\n             unsafety: impl_.unsafety,"}, {"sha": "4c81e75e8d6304b49b8055d90f75fcb0a7c98c4a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -99,17 +99,13 @@ crate fn merge_bounds(\n             clean::GenericBound::TraitBound(ref mut tr, _) => tr,\n             clean::GenericBound::Outlives(..) => return false,\n         };\n-        let (did, path) = match trait_ref.trait_ {\n-            clean::ResolvedPath { did, ref mut path, .. } => (did, path),\n-            _ => return false,\n-        };\n         // If this QPath's trait `trait_did` is the same as, or a supertrait\n         // of, the bound's trait `did` then we can keep going, otherwise\n         // this is just a plain old equality bound.\n-        if !trait_is_same_or_supertrait(cx, did, trait_did) {\n+        if !trait_is_same_or_supertrait(cx, trait_ref.trait_.def_id(), trait_did) {\n             return false;\n         }\n-        let last = path.segments.last_mut().expect(\"segments were empty\");\n+        let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");\n         match last.args {\n             PP::AngleBracketed { ref mut bindings, .. } => {\n                 bindings.push(clean::TypeBinding {"}, {"sha": "d4cea8b4a9d289cb757b8a699555a69835c1562a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 78, "deletions": 71, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -120,8 +120,7 @@ crate struct Crate {\n     crate module: Item,\n     crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n-    // These are later on moved into `CACHEKEY`, leaving the map empty.\n-    // Only here so that they can be filtered through the rustdoc passes.\n+    /// Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n     crate collapsed: bool,\n }\n@@ -1147,15 +1146,15 @@ impl GenericBound {\n         let path = external_path(cx, did, false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n-            PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n+            PolyTrait { trait_: path, generic_params: Vec::new() },\n             hir::TraitBoundModifier::Maybe,\n         )\n     }\n \n     crate fn is_sized_bound(&self, cx: &DocContext<'_>) -> bool {\n         use rustc_hir::TraitBoundModifier as TBM;\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n-            if trait_.def_id() == cx.tcx.lang_items().sized_trait() {\n+            if Some(trait_.def_id()) == cx.tcx.lang_items().sized_trait() {\n                 return true;\n             }\n         }\n@@ -1169,7 +1168,7 @@ impl GenericBound {\n         None\n     }\n \n-    crate fn get_trait_type(&self) -> Option<Type> {\n+    crate fn get_trait_path(&self) -> Option<Path> {\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             Some(trait_.clone())\n         } else {\n@@ -1401,53 +1400,53 @@ crate struct TraitAlias {\n /// A trait reference, which may have higher ranked lifetimes.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct PolyTrait {\n-    crate trait_: Type,\n+    crate trait_: Path,\n     crate generic_params: Vec<GenericParamDef>,\n }\n \n-/// A representation of a type suitable for hyperlinking purposes. Ideally, one can get the original\n-/// type out of the AST/`TyCtxt` given one of these, if more information is needed. Most\n-/// importantly, it does not preserve mutability or boxes.\n+/// Rustdoc's representation of types, mostly based on the [`hir::Ty`].\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum Type {\n-    /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n-    ResolvedPath {\n-        path: Path,\n-        did: DefId,\n-    },\n-    /// `dyn for<'a> Trait<'a> + Send + 'static`\n+    /// A named type, which could be a trait.\n+    ///\n+    /// This is mostly Rustdoc's version of [`hir::Path`]. It has to be different because Rustdoc's [`PathSegment`] can contain cleaned generics.\n+    ResolvedPath { path: Path, did: DefId },\n+    /// A `dyn Trait` object: `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n-    /// For parameterized types, so the consumer of the JSON don't go\n-    /// looking for types which don't exist anywhere.\n+    /// A type parameter.\n     Generic(Symbol),\n-    /// Primitives are the fixed-size numeric types (plus int/usize/float), char,\n-    /// arrays, slices, and tuples.\n+    /// A primitive (aka, builtin) type.\n     Primitive(PrimitiveType),\n-    /// `extern \"ABI\" fn`\n+    /// A function pointer: `extern \"ABI\" fn(...) -> ...`\n     BareFunction(Box<BareFunctionDecl>),\n+    /// A tuple type: `(i32, &str)`.\n     Tuple(Vec<Type>),\n+    /// A slice type (does *not* include the `&`): `[i32]`\n     Slice(Box<Type>),\n-    /// The `String` field is about the size or the constant representing the array's length.\n+    /// An array type.\n+    ///\n+    /// The `String` field is a stringified version of the array's length parameter.\n     Array(Box<Type>, String),\n+    /// A raw pointer type: `*const i32`, `*mut i32`\n     RawPointer(Mutability, Box<Type>),\n-    BorrowedRef {\n-        lifetime: Option<Lifetime>,\n-        mutability: Mutability,\n-        type_: Box<Type>,\n-    },\n+    /// A reference type: `&i32`, `&'a mut Foo`\n+    BorrowedRef { lifetime: Option<Lifetime>, mutability: Mutability, type_: Box<Type> },\n \n-    // `<Type as Trait>::Name`\n+    /// A qualified path to an associated item: `<Type as Trait>::Name`\n     QPath {\n         name: Symbol,\n         self_type: Box<Type>,\n+        /// FIXME: This is a hack that should be removed; see [this discussion][1].\n+        ///\n+        /// [1]: https://github.com/rust-lang/rust/pull/85479#discussion_r635729093\n         self_def_id: Option<DefId>,\n-        trait_: Box<Type>,\n+        trait_: Path,\n     },\n \n-    // `_`\n+    /// A type that is inferred: `_`\n     Infer,\n \n-    // `impl TraitA + TraitB + ...`\n+    /// An `impl Trait`: `impl TraitA + TraitB + ...`\n     ImplTrait(Vec<GenericBound>),\n }\n \n@@ -1514,34 +1513,8 @@ impl Type {\n     }\n \n     crate fn generics(&self) -> Option<Vec<&Type>> {\n-        match *self {\n-            ResolvedPath { ref path, .. } => path.segments.last().and_then(|seg| {\n-                if let GenericArgs::AngleBracketed { ref args, .. } = seg.args {\n-                    Some(\n-                        args.iter()\n-                            .filter_map(|arg| match arg {\n-                                GenericArg::Type(ty) => Some(ty),\n-                                _ => None,\n-                            })\n-                            .collect(),\n-                    )\n-                } else {\n-                    None\n-                }\n-            }),\n-            _ => None,\n-        }\n-    }\n-\n-    crate fn bindings(&self) -> Option<&[TypeBinding]> {\n-        match *self {\n-            ResolvedPath { ref path, .. } => path.segments.last().and_then(|seg| {\n-                if let GenericArgs::AngleBracketed { ref bindings, .. } = seg.args {\n-                    Some(&**bindings)\n-                } else {\n-                    None\n-                }\n-            }),\n+        match self {\n+            ResolvedPath { path, .. } => path.generics(),\n             _ => None,\n         }\n     }\n@@ -1559,17 +1532,13 @@ impl Type {\n             QPath { self_type, trait_, name, .. } => (self_type, trait_, name),\n             _ => return None,\n         };\n-        let trait_did = match **trait_ {\n-            ResolvedPath { did, .. } => did,\n-            _ => return None,\n-        };\n-        Some((&self_, trait_did, *name))\n+        Some((&self_, trait_.def_id(), *name))\n     }\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n             ResolvedPath { did, .. } => return Some(did),\n-            DynTrait(ref bounds, _) => return bounds[0].trait_.inner_def_id(cache),\n+            DynTrait(ref bounds, _) => return Some(bounds[0].trait_.def_id()),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,\n             BorrowedRef { ref type_, .. } => return type_.inner_def_id(cache),\n@@ -1601,8 +1570,12 @@ impl GetDefId for Type {\n     }\n }\n \n-/// N.B. this has to be different from `hir::PrimTy` because it also includes types that aren't\n-/// paths, like `Unit`.\n+/// A primitive (aka, builtin) type.\n+///\n+/// This represents things like `i32`, `str`, etc.\n+///\n+/// N.B. This has to be different from [`hir::PrimTy`] because it also includes types that aren't\n+/// paths, like [`Self::Unit`].\n #[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n crate enum PrimitiveType {\n     Isize,\n@@ -2000,12 +1973,15 @@ impl Span {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct Path {\n-    crate global: bool,\n     crate res: Res,\n     crate segments: Vec<PathSegment>,\n }\n \n impl Path {\n+    crate fn def_id(&self) -> DefId {\n+        self.res.def_id()\n+    }\n+\n     crate fn last(&self) -> Symbol {\n         self.segments.last().expect(\"segments were empty\").name\n     }\n@@ -2015,8 +1991,11 @@ impl Path {\n     }\n \n     crate fn whole_name(&self) -> String {\n-        String::from(if self.global { \"::\" } else { \"\" })\n-            + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n+        self.segments\n+            .iter()\n+            .map(|s| if s.name == kw::PathRoot { String::new() } else { s.name.to_string() })\n+            .intersperse(\"::\".into())\n+            .collect()\n     }\n \n     /// Checks if this is a `T::Name` path for an associated type.\n@@ -2028,6 +2007,33 @@ impl Path {\n             _ => false,\n         }\n     }\n+\n+    crate fn generics(&self) -> Option<Vec<&Type>> {\n+        self.segments.last().and_then(|seg| {\n+            if let GenericArgs::AngleBracketed { ref args, .. } = seg.args {\n+                Some(\n+                    args.iter()\n+                        .filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            _ => None,\n+                        })\n+                        .collect(),\n+                )\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n+    crate fn bindings(&self) -> Option<&[TypeBinding]> {\n+        self.segments.last().and_then(|seg| {\n+            if let GenericArgs::AngleBracketed { ref bindings, .. } = seg.args {\n+                Some(&**bindings)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -2171,7 +2177,7 @@ crate struct Impl {\n     crate span: Span,\n     crate unsafety: hir::Unsafety,\n     crate generics: Generics,\n-    crate trait_: Option<Type>,\n+    crate trait_: Option<Path>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n     crate negative_polarity: bool,\n@@ -2182,7 +2188,8 @@ crate struct Impl {\n impl Impl {\n     crate fn provided_trait_methods(&self, tcx: TyCtxt<'_>) -> FxHashSet<Symbol> {\n         self.trait_\n-            .def_id()\n+            .as_ref()\n+            .map(|t| t.def_id())\n             .map(|did| tcx.provided_trait_methods(did).map(|meth| meth.ident.name).collect())\n             .unwrap_or_default()\n     }"}, {"sha": "de43daff6f0d7c8416420d53ee86103a2a4f892a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2,7 +2,7 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n-    ItemKind, Lifetime, Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type,\n+    ItemKind, Lifetime, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type,\n     TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n@@ -147,7 +147,6 @@ pub(super) fn external_path(\n     let def_kind = cx.tcx.def_kind(did);\n     let name = cx.tcx.item_name(did);\n     Path {\n-        global: false,\n         res: Res::Def(def_kind, did),\n         segments: vec![PathSegment {\n             name,\n@@ -156,39 +155,8 @@ pub(super) fn external_path(\n     }\n }\n \n-crate fn strip_type(ty: Type) -> Type {\n-    match ty {\n-        Type::ResolvedPath { path, did } => Type::ResolvedPath { path: strip_path(&path), did },\n-        Type::DynTrait(mut bounds, lt) => {\n-            let first = bounds.remove(0);\n-            let stripped_trait = strip_type(first.trait_);\n-\n-            bounds.insert(\n-                0,\n-                PolyTrait { trait_: stripped_trait, generic_params: first.generic_params },\n-            );\n-            Type::DynTrait(bounds, lt)\n-        }\n-        Type::Tuple(inner_tys) => {\n-            Type::Tuple(inner_tys.iter().map(|t| strip_type(t.clone())).collect())\n-        }\n-        Type::Slice(inner_ty) => Type::Slice(Box::new(strip_type(*inner_ty))),\n-        Type::Array(inner_ty, s) => Type::Array(Box::new(strip_type(*inner_ty)), s),\n-        Type::RawPointer(m, inner_ty) => Type::RawPointer(m, Box::new(strip_type(*inner_ty))),\n-        Type::BorrowedRef { lifetime, mutability, type_ } => {\n-            Type::BorrowedRef { lifetime, mutability, type_: Box::new(strip_type(*type_)) }\n-        }\n-        Type::QPath { name, self_type, trait_, self_def_id } => Type::QPath {\n-            name,\n-            self_def_id,\n-            self_type: Box::new(strip_type(*self_type)),\n-            trait_: Box::new(strip_type(*trait_)),\n-        },\n-        _ => ty,\n-    }\n-}\n-\n-crate fn strip_path(path: &Path) -> Path {\n+/// Remove the generic arguments from a path.\n+crate fn strip_path_generics(path: Path) -> Path {\n     let segments = path\n         .segments\n         .iter()\n@@ -198,7 +166,7 @@ crate fn strip_path(path: &Path) -> Path {\n         })\n         .collect();\n \n-    Path { global: path.global, res: path.res, segments }\n+    Path { res: path.res, segments }\n }\n \n crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {"}, {"sha": "8b883ffaaf095cb4419f12f96bab71f6807b4002", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -203,7 +203,9 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // masked crate then remove it completely.\n         if let clean::ImplItem(ref i) = *item.kind {\n             if self.cache.masked_crates.contains(&item.def_id.krate())\n-                || i.trait_.def_id().map_or(false, |d| self.cache.masked_crates.contains(&d.krate))\n+                || i.trait_\n+                    .as_ref()\n+                    .map_or(false, |t| self.cache.masked_crates.contains(&t.def_id().krate))\n                 || i.for_.def_id().map_or(false, |d| self.cache.masked_crates.contains(&d.krate))\n             {\n                 return None;\n@@ -223,11 +225,11 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n \n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = *item.kind {\n-            if let Some(did) = i.trait_.def_id() {\n+            if let Some(trait_) = &i.trait_ {\n                 if i.blanket_impl.is_none() {\n                     self.cache\n                         .implementors\n-                        .entry(did)\n+                        .entry(trait_.def_id())\n                         .or_default()\n                         .push(Impl { impl_item: item.clone() });\n                 }\n@@ -402,12 +404,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     }\n                     clean::DynTrait(ref bounds, _)\n                     | clean::BorrowedRef { type_: box clean::DynTrait(ref bounds, _), .. } => {\n-                        if let Some(did) = bounds[0].trait_.def_id() {\n-                            self.cache.parent_stack.push(did);\n-                            true\n-                        } else {\n-                            false\n-                        }\n+                        self.cache.parent_stack.push(bounds[0].trait_.def_id());\n+                        true\n                     }\n                     ref t => {\n                         let prim_did = t\n@@ -441,9 +439,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 }\n                 clean::DynTrait(ref bounds, _)\n                 | clean::BorrowedRef { type_: box clean::DynTrait(ref bounds, _), .. } => {\n-                    if let Some(did) = bounds[0].trait_.def_id() {\n-                        dids.insert(did);\n-                    }\n+                    dids.insert(bounds[0].trait_.def_id());\n                 }\n                 ref t => {\n                     let did = t"}, {"sha": "4f0c5a9edee7185581c71bd1846d0151105f015a", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -7,14 +7,12 @@ use rustc_hir::def_id::DefId;\n crate use renderer::{run_format, FormatRenderer};\n \n use crate::clean;\n-use crate::clean::types::GetDefId;\n-use crate::formats::cache::Cache;\n \n /// Specifies whether rendering directly implemented trait items or ones from a certain Deref\n /// impl.\n crate enum AssocItemRender<'a> {\n     All,\n-    DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type, deref_mut_: bool },\n+    DerefFor { trait_: &'a clean::Path, type_: &'a clean::Type, deref_mut_: bool },\n }\n \n /// For different handling of associated items from the Deref target of a type rather than the type\n@@ -40,10 +38,6 @@ impl Impl {\n     }\n \n     crate fn trait_did(&self) -> Option<DefId> {\n-        self.inner_impl().trait_.def_id()\n-    }\n-\n-    crate fn trait_did_full(&self, cache: &Cache) -> Option<DefId> {\n-        self.inner_impl().trait_.def_id_full(cache)\n+        self.inner_impl().trait_.as_ref().map(|t| t.def_id())\n     }\n }"}, {"sha": "f2751947c7eb95a6db9b8d8154e11e7e17228f84", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -18,9 +18,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n \n-use crate::clean::{\n-    self, utils::find_nearest_parent_module, ExternalCrate, GetDefId, ItemId, PrimitiveType,\n-};\n+use crate::clean::{self, utils::find_nearest_parent_module, ExternalCrate, ItemId, PrimitiveType};\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n use crate::html::render::cache::ExternalLocation;\n@@ -270,7 +268,7 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n                         0 => String::new(),\n                         _ if f.alternate() => {\n                             format!(\n-                                \"for<{:#}> \",\n+                                \"for&lt;{:#}&gt; \",\n                                 comma_sep(bound_params.iter().map(|lt| lt.print()))\n                             )\n                         }\n@@ -914,15 +912,10 @@ fn fmt_type<'cx>(\n             }\n         }\n         clean::QPath { ref name, ref self_type, ref trait_, ref self_def_id } => {\n-            let should_show_cast = match *trait_ {\n-                box clean::ResolvedPath { ref path, .. } => {\n-                    !path.segments.is_empty()\n-                        && self_def_id\n-                            .zip(trait_.def_id())\n-                            .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_)\n-                }\n-                _ => true,\n-            };\n+            let should_show_cast = !trait_.segments.is_empty()\n+                && self_def_id\n+                    .zip(Some(trait_.def_id()))\n+                    .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_);\n             if f.alternate() {\n                 if should_show_cast {\n                     write!(f, \"<{:#} as {:#}>::\", self_type.print(cx), trait_.print(cx))?\n@@ -936,36 +929,31 @@ fn fmt_type<'cx>(\n                     write!(f, \"{}::\", self_type.print(cx))?\n                 }\n             };\n-            match *trait_ {\n-                // It's pretty unsightly to look at `<A as B>::C` in output, and\n-                // we've got hyperlinking on our side, so try to avoid longer\n-                // notation as much as possible by making `C` a hyperlink to trait\n-                // `B` to disambiguate.\n-                //\n-                // FIXME: this is still a lossy conversion and there should probably\n-                //        be a better way of representing this in general? Most of\n-                //        the ugliness comes from inlining across crates where\n-                //        everything comes in as a fully resolved QPath (hard to\n-                //        look at).\n-                box clean::ResolvedPath { did, .. } => {\n-                    match href(did, cx) {\n-                        Ok((ref url, _, ref path)) if !f.alternate() => {\n-                            write!(\n-                                f,\n-                                \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+            // It's pretty unsightly to look at `<A as B>::C` in output, and\n+            // we've got hyperlinking on our side, so try to avoid longer\n+            // notation as much as possible by making `C` a hyperlink to trait\n+            // `B` to disambiguate.\n+            //\n+            // FIXME: this is still a lossy conversion and there should probably\n+            //        be a better way of representing this in general? Most of\n+            //        the ugliness comes from inlining across crates where\n+            //        everything comes in as a fully resolved QPath (hard to\n+            //        look at).\n+            match href(trait_.def_id(), cx) {\n+                Ok((ref url, _, ref path)) if !f.alternate() => {\n+                    write!(\n+                        f,\n+                        \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n                                     title=\\\"type {path}::{name}\\\">{name}</a>\",\n-                                url = url,\n-                                shortty = ItemType::AssocType,\n-                                name = name,\n-                                path = path.join(\"::\")\n-                            )?;\n-                        }\n-                        _ => write!(f, \"{}\", name)?,\n-                    }\n-                    Ok(())\n+                        url = url,\n+                        shortty = ItemType::AssocType,\n+                        name = name,\n+                        path = path.join(\"::\")\n+                    )?;\n                 }\n-                _ => write!(f, \"{}\", name),\n+                _ => write!(f, \"{}\", name)?,\n             }\n+            Ok(())\n         }\n     }\n }\n@@ -979,6 +967,15 @@ impl clean::Type {\n     }\n }\n \n+impl clean::Path {\n+    crate fn print<'b, 'a: 'b, 'tcx: 'a>(\n+        &'a self,\n+        cx: &'a Context<'tcx>,\n+    ) -> impl fmt::Display + 'b + Captures<'tcx> {\n+        display_fn(move |f| resolved_path(f, self.def_id(), self, false, false, cx))\n+    }\n+}\n+\n impl clean::Impl {\n     crate fn print<'a, 'tcx: 'a>(\n         &'a self,\n@@ -1059,7 +1056,11 @@ impl clean::BareFunctionDecl {\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         display_fn(move |f| {\n             if !self.generic_params.is_empty() {\n-                write!(f, \"for<{}> \", comma_sep(self.generic_params.iter().map(|g| g.print(cx))))\n+                write!(\n+                    f,\n+                    \"for&lt;{}&gt; \",\n+                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                )\n             } else {\n                 Ok(())\n             }"}, {"sha": "8ed69962875a62b6c05b0ee7ad3e3a6e4fd95b9a", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -435,15 +435,34 @@ impl<'a> Classifier<'a> {\n                 _ => Class::RefKeyWord,\n             },\n \n-            // Operators.\n+            // These can either be operators, or arrows.\n+            TokenKind::Eq => match lookahead {\n+                Some(TokenKind::Eq) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"==\", class: Some(Class::Op) });\n+                    return;\n+                }\n+                Some(TokenKind::Gt) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"=>\", class: None });\n+                    return;\n+                }\n+                _ => Class::Op,\n+            },\n+            TokenKind::Minus if lookahead == Some(TokenKind::Gt) => {\n+                self.next();\n+                sink(Highlight::Token { text: \"->\", class: None });\n+                return;\n+            }\n+\n+            // Other operators.\n             TokenKind::Minus\n             | TokenKind::Plus\n             | TokenKind::Or\n             | TokenKind::Slash\n             | TokenKind::Caret\n             | TokenKind::Percent\n             | TokenKind::Bang\n-            | TokenKind::Eq\n             | TokenKind::Lt\n             | TokenKind::Gt => Class::Op,\n "}, {"sha": "22e650af7e22b1a977928c540adadda782a27c92", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -13,7 +13,7 @@\n <span class=\"kw\">use</span> <span class=\"ident\">std::path</span>::{<span class=\"ident\">Path</span>, <span class=\"ident\">PathBuf</span>};\n \n <span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n-<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n+<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n     <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*</span><span class=\"kw\">const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n@@ -27,11 +27,11 @@\n     <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> <span class=\"op\">=</span> <span class=\"ident\">String::new</span>();\n \n     <span class=\"kw\">match</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">s</span> {\n-        <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> <span class=\"op\">=</span><span class=\"op\">&gt;</span> {}\n+        <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> =&gt; {}\n     }\n }\n \n <span class=\"macro\">macro_rules!</span> <span class=\"ident\">bar</span> {\n-    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) <span class=\"op\">=</span><span class=\"op\">&gt;</span> {};\n+    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) =&gt; {};\n }\n </code></pre>"}, {"sha": "fbfdc6767337ccbff158e57265a3409ca53dc847", "filename": "src/librustdoc/html/highlight/fixtures/sample.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -3,7 +3,7 @@\n use std::path::{Path, PathBuf};\n \n #[cfg(target_os = \"linux\")]\n-fn main() {\n+fn main() -> () {\n     let foo = true && false || true;\n     let _: *const () = 0;\n     let _ = &foo;"}, {"sha": "9c05c80d55dfea35a5b8c820657ec6950d6a1394", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -226,16 +226,13 @@ fn get_index_type(clean_type: &clean::Type) -> RenderType {\n fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<Symbol> {\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n-            let segments = &path.segments;\n-            let path_segment = segments.iter().last().unwrap_or_else(|| {\n-                panic!(\n-                \"get_index_type_name(clean_type: {:?}, accept_generic: {:?}) had length zero path\",\n-                clean_type, accept_generic\n-            )\n-            });\n+            let path_segment = path.segments.last().unwrap();\n             Some(path_segment.name)\n         }\n-        clean::DynTrait(ref bounds, _) => get_index_type_name(&bounds[0].trait_, accept_generic),\n+        clean::DynTrait(ref bounds, _) => {\n+            let path = &bounds[0].trait_;\n+            Some(path.segments.last().unwrap().name)\n+        }\n         clean::Generic(s) if accept_generic => Some(s),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n         clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),\n@@ -324,7 +321,8 @@ crate fn get_real_types<'tcx>(\n         }\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n-                if let Some(ty) = bound.get_trait_type() {\n+                if let Some(path) = bound.get_trait_path() {\n+                    let ty = Type::ResolvedPath { did: path.def_id(), path };\n                     let adds = get_real_types(generics, &ty, tcx, recurse + 1, res);\n                     nb_added += adds;\n                     if adds == 0 && !ty.is_full_generic() {"}, {"sha": "011d3cfcf72d7a1171356fdaff2c57d5a84f6ec0", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,6 +1,5 @@\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n-use std::error::Error as StdError;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -16,6 +15,7 @@ use rustc_span::symbol::sym;\n \n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n+use super::templates;\n use super::write_shared::write_shared;\n use super::{\n     collect_spans_and_sources, print_sidebar, settings, AllTypes, LinkFromSrc, NameDoc, StylePath,\n@@ -33,7 +33,6 @@ use crate::formats::FormatRenderer;\n use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n-use crate::html::static_files::PAGE;\n use crate::html::{layout, sources};\n \n /// Major driving force in all rustdoc rendering. This contains information\n@@ -225,7 +224,7 @@ impl<'tcx> Context<'tcx> {\n                 &self.shared.layout,\n                 &page,\n                 |buf: &mut _| print_sidebar(self, it, buf),\n-                |buf: &mut _| print_item(self, it, buf, &page),\n+                |buf: &mut _| print_item(self, &self.shared.templates, it, buf, &page),\n                 &self.shared.style_files,\n             )\n         } else {\n@@ -416,12 +415,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         };\n         let mut issue_tracker_base_url = None;\n         let mut include_sources = true;\n-\n-        let mut templates = tera::Tera::default();\n-        templates.add_raw_template(\"page.html\", PAGE).map_err(|e| Error {\n-            file: \"page.html\".into(),\n-            error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n-        })?;\n+        let templates = templates::load()?;\n \n         // Crawl the crate attributes looking for attributes which control how we're\n         // going to emit HTML"}, {"sha": "dc5aec3b084f56a3b062ae037f7acee57922ef8b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 54, "deletions": 67, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -31,6 +31,7 @@ mod tests;\n mod context;\n mod print_item;\n mod span_map;\n+mod templates;\n mod write_shared;\n \n crate use context::*;\n@@ -716,18 +717,12 @@ fn short_item_info(\n \n // Render the list of items inside one of the sections \"Trait Implementations\",\n // \"Auto Trait Implementations,\" \"Blanket Trait Implementations\" (on struct/enum pages).\n-fn render_impls(\n-    cx: &Context<'_>,\n-    w: &mut Buffer,\n-    traits: &[&&Impl],\n-    containing_item: &clean::Item,\n-) {\n-    let cache = cx.cache();\n+fn render_impls(cx: &Context<'_>, w: &mut Buffer, impls: &[&&Impl], containing_item: &clean::Item) {\n     let tcx = cx.tcx();\n-    let mut impls = traits\n+    let mut rendered_impls = impls\n         .iter()\n         .map(|i| {\n-            let did = i.trait_did_full(cache).unwrap();\n+            let did = i.trait_did().unwrap();\n             let provided_trait_methods = i.inner_impl().provided_trait_methods(tcx);\n             let assoc_link = AssocItemLink::GotoSource(did.into(), &provided_trait_methods);\n             let mut buffer = if w.is_for_html() { Buffer::html() } else { Buffer::new() };\n@@ -751,8 +746,8 @@ fn render_impls(\n             buffer.into_inner()\n         })\n         .collect::<Vec<_>>();\n-    impls.sort();\n-    w.write_str(&impls.join(\"\"));\n+    rendered_impls.sort();\n+    w.write_str(&rendered_impls.join(\"\"));\n }\n \n fn naive_assoc_href(it: &clean::Item, link: AssocItemLink<'_>, cx: &Context<'_>) -> String {\n@@ -1097,13 +1092,11 @@ fn render_assoc_items(\n         return;\n     }\n     if !traits.is_empty() {\n-        let deref_impl = traits.iter().find(|t| {\n-            t.inner_impl().trait_.def_id_full(cache) == cx.tcx().lang_items().deref_trait()\n-        });\n+        let deref_impl =\n+            traits.iter().find(|t| t.trait_did() == cx.tcx().lang_items().deref_trait());\n         if let Some(impl_) = deref_impl {\n-            let has_deref_mut = traits.iter().any(|t| {\n-                t.inner_impl().trait_.def_id_full(cache) == cx.tcx().lang_items().deref_mut_trait()\n-            });\n+            let has_deref_mut =\n+                traits.iter().any(|t| t.trait_did() == cx.tcx().lang_items().deref_mut_trait());\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut);\n         }\n         let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n@@ -1221,45 +1214,39 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n \n fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     let mut out = Buffer::html();\n-    let mut trait_ = String::new();\n \n     if let Some(did) = decl.output.def_id_full(cx.cache()) {\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id().map_or(false, |d| {\n-                    cx.cache().traits.get(&d).map(|t| t.is_notable).unwrap_or(false)\n-                }) {\n-                    if out.is_empty() {\n-                        write!(\n-                            &mut out,\n-                            \"<div class=\\\"notable\\\">Notable traits for {}</div>\\\n-                             <code class=\\\"content\\\">\",\n-                            impl_.for_.print(cx)\n-                        );\n-                        trait_.push_str(&impl_.for_.print(cx).to_string());\n-                    }\n+                if let Some(trait_) = &impl_.trait_ {\n+                    let trait_did = trait_.def_id();\n \n-                    //use the \"where\" class here to make it small\n-                    write!(\n-                        &mut out,\n-                        \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n-                        impl_.print(false, cx)\n-                    );\n-                    let t_did = impl_.trait_.def_id_full(cx.cache()).unwrap();\n-                    for it in &impl_.items {\n-                        if let clean::TypedefItem(ref tydef, _) = *it.kind {\n-                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n-                            assoc_type(\n+                    if cx.cache().traits.get(&trait_did).map_or(false, |t| t.is_notable) {\n+                        if out.is_empty() {\n+                            write!(\n                                 &mut out,\n-                                it,\n-                                &[],\n-                                Some(&tydef.type_),\n-                                AssocItemLink::GotoSource(t_did.into(), &FxHashSet::default()),\n-                                \"\",\n-                                cx,\n+                                \"<div class=\\\"notable\\\">Notable traits for {}</div>\\\n+                             <code class=\\\"content\\\">\",\n+                                impl_.for_.print(cx)\n                             );\n-                            out.push_str(\";</span>\");\n+                        }\n+\n+                        //use the \"where\" class here to make it small\n+                        write!(\n+                            &mut out,\n+                            \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n+                            impl_.print(false, cx)\n+                        );\n+                        for it in &impl_.items {\n+                            if let clean::TypedefItem(ref tydef, _) = *it.kind {\n+                                out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                                let empty_set = FxHashSet::default();\n+                                let src_link =\n+                                    AssocItemLink::GotoSource(trait_did.into(), &empty_set);\n+                                assoc_type(&mut out, it, &[], Some(&tydef.type_), src_link, \"\", cx);\n+                                out.push_str(\";</span>\");\n+                            }\n                         }\n                     }\n                 }\n@@ -1302,7 +1289,7 @@ fn render_impl(\n ) {\n     let cache = cx.cache();\n     let traits = &cache.traits;\n-    let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n+    let trait_ = i.trait_did().map(|did| &traits[&did]);\n     let mut close_tags = String::new();\n \n     // For trait implementations, the `interesting` output contains all methods that have doc\n@@ -1532,7 +1519,7 @@ fn render_impl(\n             if i.items.iter().any(|m| m.name == n) {\n                 continue;\n             }\n-            let did = i.trait_.as_ref().unwrap().def_id_full(cx.cache()).unwrap();\n+            let did = i.trait_.as_ref().unwrap().def_id();\n             let provided_methods = i.provided_trait_methods(cx.tcx());\n             let assoc_link = AssocItemLink::GotoSource(did.into(), &provided_methods);\n \n@@ -1917,9 +1904,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n         }\n \n         if v.iter().any(|i| i.inner_impl().trait_.is_some()) {\n-            if let Some(impl_) = v.iter().filter(|i| i.inner_impl().trait_.is_some()).find(|i| {\n-                i.inner_impl().trait_.def_id_full(cache) == cx.tcx().lang_items().deref_trait()\n-            }) {\n+            if let Some(impl_) =\n+                v.iter().find(|i| i.trait_did() == cx.tcx().lang_items().deref_trait())\n+            {\n                 sidebar_deref_methods(cx, out, impl_, v);\n             }\n \n@@ -2017,9 +2004,7 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n                 }\n             }\n         }\n-        let deref_mut = v.iter().filter(|i| i.inner_impl().trait_.is_some()).any(|i| {\n-            i.inner_impl().trait_.def_id_full(c) == cx.tcx().lang_items().deref_mut_trait()\n-        });\n+        let deref_mut = v.iter().any(|i| i.trait_did() == cx.tcx().lang_items().deref_mut_trait());\n         let inner_impl = target\n             .def_id_full(c)\n             .or_else(|| {\n@@ -2086,10 +2071,10 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n \n fn get_id_for_impl_on_foreign_type(\n     for_: &clean::Type,\n-    trait_: &clean::Type,\n+    trait_: &clean::Path,\n     cx: &Context<'_>,\n ) -> String {\n-    small_url_encode(format!(\"impl-{:#}-for-{:#}\", trait_.print(cx), for_.print(cx),))\n+    small_url_encode(format!(\"impl-{:#}-for-{:#}\", trait_.print(cx), for_.print(cx)))\n }\n \n fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String, String)> {\n@@ -2400,6 +2385,15 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n     let mut visited = FxHashSet::default();\n     let mut work = VecDeque::new();\n \n+    let mut process_path = |did: DefId| {\n+        let get_extern = || cache.external_paths.get(&did).map(|s| s.0.clone());\n+        let fqp = cache.exact_paths.get(&did).cloned().or_else(get_extern);\n+\n+        if let Some(path) = fqp {\n+            out.push(path.join(\"::\"));\n+        }\n+    };\n+\n     work.push_back(first_ty);\n \n     while let Some(ty) = work.pop_front() {\n@@ -2408,14 +2402,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n         }\n \n         match ty {\n-            clean::Type::ResolvedPath { did, .. } => {\n-                let get_extern = || cache.external_paths.get(&did).map(|s| s.0.clone());\n-                let fqp = cache.exact_paths.get(&did).cloned().or_else(get_extern);\n-\n-                if let Some(path) = fqp {\n-                    out.push(path.join(\"::\"));\n-                }\n-            }\n+            clean::Type::ResolvedPath { did, .. } => process_path(did),\n             clean::Type::Tuple(tys) => {\n                 work.extend(tys.into_iter());\n             }\n@@ -2433,7 +2420,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n             }\n             clean::Type::QPath { self_type, trait_, .. } => {\n                 work.push_back(*self_type);\n-                work.push_back(*trait_);\n+                process_path(trait_.def_id());\n             }\n             _ => {}\n         }"}, {"sha": "4cfc57ac99588d5aa859424438111c0a6a8c44f3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -32,16 +32,41 @@ use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n+use serde::Serialize;\n+\n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n const ITEM_TABLE_ROW_OPEN: &'static str = \"<div class=\\\"item-row\\\">\";\n const ITEM_TABLE_ROW_CLOSE: &'static str = \"</div>\";\n \n-pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, page: &Page<'_>) {\n+// A component in a `use` path, like `string` in std::string::ToString\n+#[derive(Serialize)]\n+struct PathComponent<'a> {\n+    path: String,\n+    name: &'a str,\n+}\n+\n+#[derive(Serialize)]\n+struct ItemVars<'a> {\n+    page: &'a Page<'a>,\n+    static_root_path: &'a str,\n+    typ: &'a str,\n+    name: &'a str,\n+    item_type: &'a str,\n+    path_components: Vec<PathComponent<'a>>,\n+    stability_since_raw: &'a str,\n+    src_href: Option<&'a str>,\n+}\n+\n+pub(super) fn print_item(\n+    cx: &Context<'_>,\n+    templates: &tera::Tera,\n+    item: &clean::Item,\n+    buf: &mut Buffer,\n+    page: &Page<'_>,\n+) {\n     debug_assert!(!item.is_stripped());\n-    // Write the breadcrumb trail header for the top\n-    buf.write_str(\"<h1 class=\\\"fqn\\\"><span class=\\\"in-band\\\">\");\n-    let name = match *item.kind {\n+    let typ = match *item.kind {\n         clean::ModuleItem(_) => {\n             if item.is_crate() {\n                 \"Crate \"\n@@ -73,60 +98,54 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n             unreachable!();\n         }\n     };\n-    buf.write_str(name);\n-    if !item.is_primitive() && !item.is_keyword() {\n-        let cur = &cx.current;\n-        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n-        for (i, component) in cur.iter().enumerate().take(amt) {\n-            write!(\n-                buf,\n-                \"<a href=\\\"{}index.html\\\">{}</a>::<wbr>\",\n-                \"../\".repeat(cur.len() - i - 1),\n-                component\n-            );\n-        }\n-    }\n-    write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n-    write!(\n-        buf,\n-        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"Copy item path to clipboard\\\">\\\n-            <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n-                width=\\\"19\\\" height=\\\"18\\\" \\\n-                alt=\\\"Copy item path\\\">\\\n-         </button>\",\n-        static_root_path = page.get_static_root_path(),\n-        suffix = page.resource_suffix,\n-    );\n-\n-    buf.write_str(\"</span>\"); // in-band\n-    buf.write_str(\"<span class=\\\"out-of-band\\\">\");\n+    let mut stability_since_raw = Buffer::new();\n     render_stability_since_raw(\n-        buf,\n+        &mut stability_since_raw,\n         item.stable_since(cx.tcx()).as_deref(),\n         item.const_stability(cx.tcx()),\n         None,\n         None,\n     );\n-    buf.write_str(\n-        \"<span id=\\\"render-detail\\\">\\\n-                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n-                    title=\\\"collapse all docs\\\">\\\n-                    [<span class=\\\"inner\\\">&#x2212;</span>]\\\n-                </a>\\\n-            </span>\",\n-    );\n+    let stability_since_raw: String = stability_since_raw.into_inner();\n \n     // Write `src` tag\n     //\n     // When this item is part of a `crate use` in a downstream crate, the\n     // [src] link in the downstream documentation will actually come back to\n     // this page, and this link will be auto-clicked. The `id` attribute is\n     // used to find the link to auto-click.\n-    if cx.include_sources && !item.is_primitive() {\n-        write_srclink(cx, item, buf);\n-    }\n+    let src_href =\n+        if cx.include_sources && !item.is_primitive() { cx.src_href(item) } else { None };\n+\n+    let path_components = if item.is_primitive() || item.is_keyword() {\n+        vec![]\n+    } else {\n+        let cur = &cx.current;\n+        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n+        cur.iter()\n+            .enumerate()\n+            .take(amt)\n+            .map(|(i, component)| PathComponent {\n+                path: \"../\".repeat(cur.len() - i - 1),\n+                name: component,\n+            })\n+            .collect()\n+    };\n+\n+    let item_vars = ItemVars {\n+        page: page,\n+        static_root_path: page.get_static_root_path(),\n+        typ: typ,\n+        name: &item.name.as_ref().unwrap().as_str(),\n+        item_type: &item.type_().to_string(),\n+        path_components: path_components,\n+        stability_since_raw: &stability_since_raw,\n+        src_href: src_href.as_deref(),\n+    };\n \n-    buf.write_str(\"</span></h1>\"); // out-of-band\n+    let teractx = tera::Context::from_serialize(item_vars).unwrap();\n+    let heading = templates.render(\"print_item.html\", &teractx).unwrap();\n+    buf.write_str(&heading);\n \n     match *item.kind {\n         clean::ModuleItem(ref m) => item_module(buf, cx, item, &m.items),"}, {"sha": "d1f182394479a5ea81952068dd5a50feafbe57de", "filename": "src/librustdoc/html/render/templates.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,20 @@\n+use std::error::Error as StdError;\n+\n+use crate::error::Error;\n+\n+pub(crate) fn load() -> Result<tera::Tera, Error> {\n+    let mut templates = tera::Tera::default();\n+\n+    macro_rules! include_template {\n+        ($file:literal, $fullpath:literal) => {\n+            templates.add_raw_template($file, include_str!($fullpath)).map_err(|e| Error {\n+                file: $file.into(),\n+                error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n+            })?\n+        };\n+    }\n+\n+    include_template!(\"page.html\", \"../templates/page.html\");\n+    include_template!(\"print_item.html\", \"../templates/print_item.html\");\n+    Ok(templates)\n+}"}, {"sha": "962af66368d3bfb79db34300f7cab19b90e1c727", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -772,9 +772,7 @@ h2.small-section-header > .anchor {\n .block a.current.crate { font-weight: 500; }\n \n .item-table {\n-\tdisplay: table-row;\n-\t/* align content left */\n-\tjustify-items: start;\n+\tdisplay: table;\n }\n .item-row {\n \tdisplay: table-row;\n@@ -1969,4 +1967,8 @@ details.undocumented[open] > summary::before {\n \t.docblock {\n \t\tmargin-left: 12px;\n \t}\n+\n+\t.docblock code {\n+\t\toverflow-wrap: anywhere;\n+\t}\n }"}, {"sha": "ccc25e6cc495fae43b31844288cfdbd3c728c341", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -70,8 +70,6 @@ crate static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/images/favicon.svg\n crate static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/images/favicon-16x16.png\");\n crate static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/images/favicon-32x32.png\");\n \n-crate static PAGE: &str = include_str!(\"templates/page.html\");\n-\n /// The built-in themes given to every documentation site.\n crate mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for"}, {"sha": "5a468f3cc1ea02cca9ba17dfc339a6b9d6090bdc", "filename": "src/librustdoc/html/templates/print_item.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,26 @@\n+<h1 class=\"fqn\"> {#- -#}\n+    <span class=\"in-band\"> {#- -#}\n+        {{-typ-}}\n+        {#- The breadcrumbs of the item path, like std::string -#}\n+        {%- for component in path_components -%}\n+        <a href=\"{{component.path | safe}}index.html\">{{component.name}}</a>::<wbr>\n+        {%- endfor -%}\n+        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n+        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+            <img src=\"{{static_root_path | safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n+                width=\"19\" height=\"18\" {# -#}\n+                alt=\"Copy item path\"> {#- -#}\n+        </button> {#- -#}\n+    </span> {#- -#}\n+    <span class=\"out-of-band\"> {#- -#}\n+        {{- stability_since_raw | safe -}}\n+        <span id=\"render-detail\"> {#- -#}\n+            <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n+                [<span class=\"inner\">&#x2212;</span>] {#- -#}\n+            </a> {#- -#}\n+        </span> {#- -#}\n+        {%- if src_href -%}\n+        <a class=\"srclink\" href=\"{{src_href | safe}}\" title=\"goto source code\">[src]</a>\n+        {%- endif -%}\n+    </span> {#- -#}\n+</h1> {#- -#}"}, {"sha": "4098f17db818a576c7741282c7acb57c0029a93f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -364,8 +364,11 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n         use clean::GenericBound::*;\n         match bound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n+                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n+                let trait_ =\n+                    clean::ResolvedPath { did: trait_.def_id(), path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n-                    trait_: trait_.into_tcx(tcx),\n+                    trait_,\n                     generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n@@ -395,15 +398,12 @@ impl FromWithTcx<clean::Type> for Type {\n                 param_names: Vec::new(),\n             },\n             DynTrait(mut bounds, lt) => {\n-                let (path, id) = match bounds.remove(0).trait_ {\n-                    ResolvedPath { path, did, .. } => (path, did),\n-                    _ => unreachable!(),\n-                };\n+                let first_trait = bounds.remove(0).trait_;\n \n                 Type::ResolvedPath {\n-                    name: path.whole_name(),\n-                    id: from_item_id(id.into()),\n-                    args: path\n+                    name: first_trait.whole_name(),\n+                    id: from_item_id(first_trait.def_id().into()),\n+                    args: first_trait\n                         .segments\n                         .last()\n                         .map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n@@ -418,7 +418,6 @@ impl FromWithTcx<clean::Type> for Type {\n                 }\n             }\n             Generic(s) => Type::Generic(s.to_string()),\n-            Primitive(clean::PrimitiveType::Never) => Type::Never,\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n@@ -435,11 +434,15 @@ impl FromWithTcx<clean::Type> for Type {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n-            QPath { name, self_type, trait_, .. } => Type::QualifiedPath {\n-                name: name.to_string(),\n-                self_type: Box::new((*self_type).into_tcx(tcx)),\n-                trait_: Box::new((*trait_).into_tcx(tcx)),\n-            },\n+            QPath { name, self_type, trait_, .. } => {\n+                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n+                let trait_ = ResolvedPath { did: trait_.def_id(), path: trait_ }.into_tcx(tcx);\n+                Type::QualifiedPath {\n+                    name: name.to_string(),\n+                    self_type: Box::new((*self_type).into_tcx(tcx)),\n+                    trait_: Box::new(trait_),\n+                }\n+            }\n         }\n     }\n }\n@@ -508,14 +511,19 @@ impl FromWithTcx<clean::Impl> for Impl {\n             blanket_impl,\n             span: _span,\n         } = impl_;\n+        // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n+        let trait_ = trait_.map(|path| {\n+            let did = path.def_id();\n+            clean::ResolvedPath { path, did }.into_tcx(tcx)\n+        });\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n             generics: generics.into_tcx(tcx),\n             provided_trait_methods: provided_trait_methods\n                 .into_iter()\n                 .map(|x| x.to_string())\n                 .collect(),\n-            trait_: trait_.map(|x| x.into_tcx(tcx)),\n+            trait_,\n             for_: for_.into_tcx(tcx),\n             items: ids(items),\n             negative: negative_polarity,"}, {"sha": "637e5f2288d624ebdf9eacc72ec8b981285b3329", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -207,7 +207,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         debug!(\"Done with crate\");\n \n         for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n-            self.get_impls(primitive.clone());\n+            self.get_impls(*primitive);\n         }\n \n         let mut index = (*self.index).clone().into_inner();\n@@ -255,7 +255,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 8,\n+            format_version: 9,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "319dd7b42b0ee69cb4d2d23d656f79188977aa82", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -57,7 +57,9 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     // scan through included items ahead of time to splice in Deref targets to the \"valid\" sets\n     for it in &new_items {\n         if let ImplItem(Impl { ref for_, ref trait_, ref items, .. }) = *it.kind {\n-            if cleaner.keep_impl(for_) && trait_.def_id() == cx.tcx.lang_items().deref_trait() {\n+            if cleaner.keep_impl(for_)\n+                && trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait()\n+            {\n                 let target = items\n                     .iter()\n                     .find_map(|item| match *item.kind {\n@@ -78,7 +80,9 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     new_items.retain(|it| {\n         if let ImplItem(Impl { ref for_, ref trait_, ref blanket_impl, .. }) = *it.kind {\n             cleaner.keep_impl(for_)\n-                || trait_.as_ref().map_or(false, |t| cleaner.keep_impl(t))\n+                || trait_\n+                    .as_ref()\n+                    .map_or(false, |t| cleaner.keep_impl_with_def_id(t.def_id().into()))\n                 || blanket_impl.is_some()\n         } else {\n             true"}, {"sha": "8b1fd662f85fdef57602ae5c3891b28af3547076", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -134,7 +134,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                     return None;\n                 }\n             }\n-            if let Some(did) = imp.trait_.def_id() {\n+            if let Some(did) = imp.trait_.as_ref().map(|t| t.def_id()) {\n                 if did.is_local() && !self.retained.contains(&did.into()) {\n                     debug!(\"ImplStripper: impl item for stripped trait; removing\");\n                     return None;"}, {"sha": "7c418697c1c1c8851c72adedfbfc02a60133048e", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -388,8 +388,6 @@ pub enum Type {\n     },\n     /// `impl TraitA + TraitB + ...`\n     ImplTrait(Vec<GenericBound>),\n-    /// `!`\n-    Never,\n     /// `_`\n     Infer,\n     /// `*mut u32`, `*u8`, etc."}, {"sha": "7271ef11287efcfd8c6614ffd25291adc5fb7045", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 10.0.1\n+// min-llvm-version: 13.0\n // assembly-output: emit-asm\n // compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n // needs-llvm-components: bpf"}, {"sha": "851d68da5ee62b1575823c0e3e7d9637f0fbffaf", "filename": "src/test/codegen/debug-vtable.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,47 @@\n+// compile-flags: -Cdebuginfo=2 -Copt-level=0 -Ccodegen-units=1\n+// ignore-tidy-linelength\n+\n+// This test checks the debuginfo for the expected 3 vtables is generated for correct names and number\n+// of entries.\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable$\"\n+// NONMSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"*const ()\",\n+// MSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"ptr_const$<tuple$<> >\",\n+// CHECK: !DISubrange(count: 5\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable$\"\n+// CHECK: !DISubrange(count: 4\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as _>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n+// CHECK: !DISubrange(count: 3\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Foo;\n+\n+pub trait SomeTrait {\n+    fn method1(&self) -> u32;\n+    fn method2(&self) -> u32;\n+}\n+\n+impl SomeTrait for Foo {\n+    fn method1(&self) -> u32 { 1 }\n+    fn method2(&self) -> u32 { 2 }\n+}\n+\n+pub trait SomeTraitWithGenerics<T, U> {\n+    fn method1(&self) -> (T, U);\n+}\n+\n+impl SomeTraitWithGenerics<u64, i8> for Foo {\n+    fn method1(&self) -> (u64, i8) { (1, 2) }\n+}\n+\n+pub fn foo(x: &Foo) -> (u32, (u64, i8), &dyn Send) {\n+    let y: &dyn SomeTrait = x;\n+    let z: &dyn SomeTraitWithGenerics<u64, i8> = x;\n+    (y.method1(), z.method1(), x as &dyn Send)\n+}"}, {"sha": "82d65b101b06d38732220dfaa4c6ecd500a9ac06", "filename": "src/test/codegen/vtabletype.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36e050b85f5fc9acd27ff5e8cda57a36070f43e2/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e050b85f5fc9acd27ff5e8cda57a36070f43e2/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=36e050b85f5fc9acd27ff5e8cda57a36070f43e2", "patch": "@@ -1,21 +0,0 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// after 5.0, then backported to the Rust LLVM fork.\n-\n-// ignore-windows\n-// ignore-macos\n-\n-// compile-flags: -g -C no-prepopulate-passes\n-\n-// CHECK-LABEL: @main\n-// CHECK: {{.*}}DICompositeType{{.*}}name: \"vtable\",{{.*}}vtableHolder:{{.*}}\n-\n-pub trait T {\n-}\n-\n-impl T for f64 {\n-}\n-\n-pub fn main() {\n-    let d = 23.0f64;\n-    let td = &d as &T;\n-}"}, {"sha": "61d5fc93cd2ad5b7b985d15c07dbcecff0568fa4", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -9,36 +9,37 @@\n // gdb-command:info functions -q function_names::main\n // gdb-check:[...]static fn function_names::main();\n // gdb-command:info functions -q function_names::generic_func<*\n-// gdb-check:[...]static fn function_names::generic_func(i32) -> i32;\n+// gdb-check:[...]static fn function_names::generic_func<i32>(i32) -> i32;\n \n // Implementations\n // gdb-command:info functions -q function_names::.*::impl_function.*\n-// gdb-check:[...]static fn function_names::GenericStruct<T1,T2>::impl_function();\n+// gdb-check:[...]static fn function_names::GenericStruct<i32, i32>::impl_function<i32, i32>();\n // gdb-check:[...]static fn function_names::Mod1::TestStruct2::impl_function();\n // gdb-check:[...]static fn function_names::TestStruct1::impl_function();\n \n // Trait implementations\n // gdb-command:info functions -q function_names::.*::trait_function.*\n-// gdb-check:[...]static fn <function_names::GenericStruct<T,i32> as function_names::TestTrait1>::trait_function();\n-// gdb-check:[...]static fn <function_names::GenericStruct<[T; N],f32> as function_names::TestTrait1>::trait_function();\n-// gdb-check:[...]static fn <function_names::Mod1::TestStruct2 as function_names::Mod1::TestTrait2>::trait_function();\n-// gdb-check:[...]static fn <function_names::TestStruct1 as function_names::TestTrait1>::trait_function();\n+// gdb-check:[...]static fn function_names::Mod1::{impl#1}::trait_function();\n+// gdb-check:[...]static fn function_names::{impl#1}::trait_function();\n+// gdb-check:[...]static fn function_names::{impl#3}::trait_function<i32>();\n+// gdb-check:[...]static fn function_names::{impl#5}::trait_function3<function_names::TestStruct1>();\n+// gdb-check:[...]static fn function_names::{impl#6}::trait_function<i32, 1>();\n \n // Closure\n-// gdb-command:info functions -q function_names::.*::{{closure.*\n-// gdb-check:[...]static fn function_names::GenericStruct<T1,T2>::impl_function::{{closure}}(*mut function_names::{impl#2}::impl_function::{closure#0});\n-// gdb-check:[...]static fn function_names::generic_func::{{closure}}(*mut function_names::generic_func::{closure#0});\n-// gdb-check:[...]static fn function_names::main::{{closure}}(*mut function_names::main::{closure#0});\n+// gdb-command:info functions -q function_names::.*::{closure.*\n+// gdb-check:[...]static fn function_names::generic_func::{closure#0}<i32>(*mut function_names::generic_func::{closure#0});\n+// gdb-check:[...]static fn function_names::main::{closure#0}(*mut function_names::main::{closure#0});\n+// gdb-check:[...]static fn function_names::{impl#2}::impl_function::{closure#0}<i32, i32>(*mut function_names::{impl#2}::impl_function::{closure#0});\n \n // Generator\n // Generators don't seem to appear in GDB's symbol table.\n \n // Const generic parameter\n // gdb-command:info functions -q function_names::const_generic_fn.*\n-// gdb-check:[...]static fn function_names::const_generic_fn_bool();\n-// gdb-check:[...]static fn function_names::const_generic_fn_non_int();\n-// gdb-check:[...]static fn function_names::const_generic_fn_signed_int();\n-// gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int();\n+// gdb-check:[...]static fn function_names::const_generic_fn_bool<false>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#fe3cfa0214ac55c7}>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_signed_int<-7>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int<14>();\n \n // === CDB TESTS ===================================================================================\n \n@@ -103,7 +104,7 @@ fn main() {\n     GenericStruct::<TestStruct1, usize>::trait_function3();\n \n     // Generic function\n-    let _ = generic_func(42);\n+    let _ = generic_func(42i32);\n \n     // Closure\n     let closure = || { TestStruct1 };"}, {"sha": "88916022c7c82c6536b200b9962e8e780868d92e", "filename": "src/test/run-make/dep-graph/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,12 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-cross-compile\n+\n+# Just verify that we successfully run and produce dep graphs when requested.\n+\n+all:\n+\tRUST_DEP_GRAPH=$(TMPDIR)/dep-graph $(RUSTC) \\\n+        -Cincremental=$(TMPDIR)/incr \\\n+        -Zquery-dep-graph -Zdump-dep-graph foo.rs\n+\ttest -f $(TMPDIR)/dep-graph.txt\n+\ttest -f $(TMPDIR)/dep-graph.dot"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make/dep-graph/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "12677a5648a2d374db1aefa6736fc319bc022bad", "filename": "src/test/rustdoc-gui/docblock-big-code-mobile.goml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,9 @@\n+// If we have a long `<code>`, we need to ensure that it'll be fully displayed on mobile, meaning\n+// that it'll be on two lines.\n+emulate: \"iPhone 8\" // it has the following size: (375, 667)\n+goto: file://|DOC_PATH|/test_docs/long_code_block/index.html\n+// We now check that the block is on two lines:\n+show-text: true // We need to enable text draw to be able to have the \"real\" size\n+// Little explanations for this test: if the text wasn't displayed on two lines, it would take\n+// around 20px (which is the font size).\n+assert-property: (\".docblock p > code\", {\"offsetHeight\": \"42\"})"}, {"sha": "2a147e64d8bf2706f4f137774b07bd79993661aa", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -120,3 +120,6 @@ pub type SomeType = u32;\n pub mod huge_amount_of_consts {\n     include!(concat!(env!(\"OUT_DIR\"), \"/huge_amount_of_consts.rs\"));\n }\n+\n+/// Very long code text `hereIgoWithLongTextBecauseWhyNotAndWhyWouldntI`.\n+pub mod long_code_block {}"}, {"sha": "fd04f04da066a0a161e688f5c2a610bc17adaa82", "filename": "src/test/rustdoc-json/primitives.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,22 @@\n+#![feature(never_type)]\n+\n+// @has primitives.json \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n+pub type PrimNever = !;\n+\n+// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n+pub type PrimStr = str;\n+\n+// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n+pub type PrimBool = bool;\n+\n+// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n+pub type PrimChar = char;\n+\n+// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n+pub type PrimU8 = u8;"}, {"sha": "efc3b21e6da99952af08845e512d4d689c828595", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,37 +6,31 @@\n // @has 'foo/macro.todo.html'\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n-// Note: count = 2 * ('=' + '>') + '+' = 2 * (1 + 1) + 1 = 5\n-// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 5\n+// Note: the only op is the `+`\n+// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 1\n \n-// @has - '{ ()'\n-// @has - '//span[@class=\"op\"]' '='\n-// @has - '//span[@class=\"op\"]' '>'\n-// @has - '{ ... };'\n-\n-// @has - '($('\n+// @has - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n // @has - '),'\n // @has - '//span[@class=\"op\"]' '+'\n-// @has - ')'\n+// @has - ') =&gt; { ... }; }'\n pub use std::todo;\n \n mod mod1 {\n     // @has 'foo/macro.macro1.html'\n     // @has - 'macro_rules!'\n     // @has - 'macro1'\n-    // @has - '{ ()'\n-    // @has - '($('\n+    // @has - '{ () =&gt; { ... }; ($('\n     // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n     // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n     // @has - ':'\n     // @has - 'expr'\n     // @has - '),'\n     // @has - '+'\n-    // @has - ')'\n+    // @has - ') =&gt; { ... }; }'\n     #[macro_export]\n     macro_rules! macro1 {\n         () => {};"}, {"sha": "91d0f8c33f9793c58a0d8b37e6e20f7c3a321036", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -21,10 +21,6 @@ fn main() {\n         //~^ ERROR asm template modifiers are not allowed for `const` arguments\n         asm!(\"{:a}\", sym main);\n         //~^ ERROR asm template modifiers are not allowed for `sym` arguments\n-        asm!(\"{}\", in(zmm_reg) foo);\n-        //~^ ERROR register class `zmm_reg` requires the `avx512f` target feature\n-        asm!(\"\", in(\"zmm0\") foo);\n-        //~^ ERROR register class `zmm_reg` requires the `avx512f` target feature\n         asm!(\"\", in(\"ebp\") foo);\n         //~^ ERROR invalid register `ebp`: the frame pointer cannot be used as an operand\n         asm!(\"\", in(\"rsp\") foo);"}, {"sha": "102a17e981570d4fe857639cbfb50742dc228288", "filename": "src/test/ui/asm/x86_64/bad-reg.stderr", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -46,127 +46,115 @@ LL |         asm!(\"{:a}\", sym main);\n    |               |\n    |               template modifier\n \n-error: register class `zmm_reg` requires the `avx512f` target feature\n-  --> $DIR/bad-reg.rs:24:20\n-   |\n-LL |         asm!(\"{}\", in(zmm_reg) foo);\n-   |                    ^^^^^^^^^^^^^^^\n-\n-error: register class `zmm_reg` requires the `avx512f` target feature\n-  --> $DIR/bad-reg.rs:26:18\n-   |\n-LL |         asm!(\"\", in(\"zmm0\") foo);\n-   |                  ^^^^^^^^^^^^^^\n-\n error: invalid register `ebp`: the frame pointer cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:28:18\n+  --> $DIR/bad-reg.rs:24:18\n    |\n LL |         asm!(\"\", in(\"ebp\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: invalid register `rsp`: the stack pointer cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:30:18\n+  --> $DIR/bad-reg.rs:26:18\n    |\n LL |         asm!(\"\", in(\"rsp\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: invalid register `ip`: the instruction pointer cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:32:18\n+  --> $DIR/bad-reg.rs:28:18\n    |\n LL |         asm!(\"\", in(\"ip\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: invalid register `k0`: the k0 AVX mask register cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:34:18\n+  --> $DIR/bad-reg.rs:30:18\n    |\n LL |         asm!(\"\", in(\"k0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n-  --> $DIR/bad-reg.rs:36:18\n+  --> $DIR/bad-reg.rs:32:18\n    |\n LL |         asm!(\"\", in(\"ah\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:39:18\n+  --> $DIR/bad-reg.rs:35:18\n    |\n LL |         asm!(\"\", in(\"st(2)\") foo);\n    |                  ^^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:41:18\n+  --> $DIR/bad-reg.rs:37:18\n    |\n LL |         asm!(\"\", in(\"mm0\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:45:20\n+  --> $DIR/bad-reg.rs:41:20\n    |\n LL |         asm!(\"{}\", in(x87_reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:47:20\n+  --> $DIR/bad-reg.rs:43:20\n    |\n LL |         asm!(\"{}\", in(mmx_reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:49:20\n+  --> $DIR/bad-reg.rs:45:20\n    |\n LL |         asm!(\"{}\", out(x87_reg) _);\n    |                    ^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:51:20\n+  --> $DIR/bad-reg.rs:47:20\n    |\n LL |         asm!(\"{}\", out(mmx_reg) _);\n    |                    ^^^^^^^^^^^^^^\n \n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:57:33\n+  --> $DIR/bad-reg.rs:53:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:59:33\n+  --> $DIR/bad-reg.rs:55:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:59:18\n+  --> $DIR/bad-reg.rs:55:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:62:34\n+  --> $DIR/bad-reg.rs:58:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:64:34\n+  --> $DIR/bad-reg.rs:60:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:64:18\n+  --> $DIR/bad-reg.rs:60:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "4f82cd8aab9d03ea768165993e85c93aa58a7a7d", "filename": "src/test/ui/asm/x86_64/target-feature-attr.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,40 @@\n+// only-x86_64\n+\n+#![feature(asm, avx512_target_feature)]\n+\n+#[target_feature(enable = \"avx\")]\n+unsafe fn foo() {\n+    let mut x = 1;\n+    let y = 2;\n+    asm!(\"vaddps {2:y}, {0:y}, {1:y}\", in(ymm_reg) x, in(ymm_reg) y, lateout(ymm_reg) x);\n+    assert_eq!(x, 3);\n+}\n+\n+unsafe fn bar() {\n+    let mut x = 1;\n+    let y = 2;\n+    asm!(\"vaddps {2:y}, {0:y}, {1:y}\", in(ymm_reg) x, in(ymm_reg) y, lateout(ymm_reg) x);\n+    //~^ ERROR: register class `ymm_reg` requires the `avx` target feature\n+    //~| ERROR: register class `ymm_reg` requires the `avx` target feature\n+    //~| ERROR: register class `ymm_reg` requires the `avx` target feature\n+    assert_eq!(x, 3);\n+}\n+\n+#[target_feature(enable = \"avx512bw\")]\n+unsafe fn baz() {\n+    let x = 1;\n+    asm!(\"/* {0} */\", in(kreg) x);\n+}\n+\n+unsafe fn baz2() {\n+    let x = 1;\n+    asm!(\"/* {0} */\", in(kreg) x);\n+    //~^ ERROR: register class `kreg` requires at least one of the following target features: avx512bw, avx512f\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo();\n+        bar();\n+    }\n+}"}, {"sha": "295c8a97ed3bc4607a03a7f3a6948f941df349a2", "filename": "src/test/ui/asm/x86_64/target-feature-attr.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftarget-feature-attr.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,26 @@\n+error: register class `ymm_reg` requires the `avx` target feature\n+  --> $DIR/target-feature-attr.rs:16:40\n+   |\n+LL |     asm!(\"vaddps {2:y}, {0:y}, {1:y}\", in(ymm_reg) x, in(ymm_reg) y, lateout(ymm_reg) x);\n+   |                                        ^^^^^^^^^^^^^\n+\n+error: register class `ymm_reg` requires the `avx` target feature\n+  --> $DIR/target-feature-attr.rs:16:55\n+   |\n+LL |     asm!(\"vaddps {2:y}, {0:y}, {1:y}\", in(ymm_reg) x, in(ymm_reg) y, lateout(ymm_reg) x);\n+   |                                                       ^^^^^^^^^^^^^\n+\n+error: register class `ymm_reg` requires the `avx` target feature\n+  --> $DIR/target-feature-attr.rs:16:70\n+   |\n+LL |     asm!(\"vaddps {2:y}, {0:y}, {1:y}\", in(ymm_reg) x, in(ymm_reg) y, lateout(ymm_reg) x);\n+   |                                                                      ^^^^^^^^^^^^^^^^^^\n+\n+error: register class `kreg` requires at least one of the following target features: avx512bw, avx512f\n+  --> $DIR/target-feature-attr.rs:31:23\n+   |\n+LL |     asm!(\"/* {0} */\", in(kreg) x);\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "1bb6aa40f06fafe335845786c6fcf3d81048de25", "filename": "src/test/ui/closures/2229_closure_analysis/issue-89606.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,40 @@\n+// Regression test for #89606. Used to ICE.\n+//\n+// check-pass\n+// revisions: twenty_eighteen twenty_twentyone\n+// [twenty_eighteen]compile-flags: --edition 2018\n+// [twenty_twentyone]compile-flags: --edition 2021\n+\n+struct S<'a>(Option<&'a mut i32>);\n+\n+fn by_ref(s: &mut S<'_>) {\n+    (|| {\n+        let S(_o) = s;\n+        s.0 = None;\n+    })();\n+}\n+\n+fn by_value(s: S<'_>) {\n+    (|| {\n+        let S(ref _o) = s;\n+        let _g = s.0;\n+    })();\n+}\n+\n+struct V<'a>((Option<&'a mut i32>,));\n+\n+fn nested(v: &mut V<'_>) {\n+    (|| {\n+        let V((_o,)) = v;\n+        v.0 = (None, );\n+    })();\n+}\n+\n+fn main() {\n+    let mut s = S(None);\n+    by_ref(&mut s);\n+    by_value(s);\n+\n+    let mut v = V((None, ));\n+    nested(&mut v);\n+}"}, {"sha": "50eaeeb4685009e7d69c8bfa26cd3c4f5bf66afa", "filename": "src/test/ui/consts/const-variant-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, enum_intrinsics_non_enums)]\n #![feature(variant_count)]\n #![feature(never_type)]\n "}, {"sha": "c82dea4aa50dfbc8b9c2f0ade78f5d6aa1e2797b", "filename": "src/test/ui/consts/const_in_pattern/issue-73431.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1 @@\n+WARN rustc_mir_build::thir::pattern::const_to_pat MIR const-checker found novel structural match violation. See #73448."}, {"sha": "65dc9166330d1e701386426fcbe985ea58ecce8e", "filename": "src/test/ui/enum-discriminant/discriminant_value-wrapper.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(enum_intrinsics_non_enums)]\n+\n use std::mem;\n \n enum ADT {"}, {"sha": "0ac03195fa3418481d6d1419f129b2db8aad9af7", "filename": "src/test/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | impl Eq for &dyn DynEq {}\n    |      ^^ lifetime mismatch\n    |\n-   = note: expected trait `PartialEq`\n-              found trait `PartialEq`\n+   = note: expected trait `<&dyn DynEq as PartialEq>`\n+              found trait `<&(dyn DynEq + 'static) as PartialEq>`\n note: the lifetime `'_` as defined on the impl at 9:13...\n   --> $DIR/E0308-2.rs:9:13\n    |"}, {"sha": "2a34ed4d4f64497177c0845538b2158150eed66c", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,31 @@\n+#![deny(non_exhaustive_omitted_patterns)]\n+//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+#![allow(non_exhaustive_omitted_patterns)]\n+//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+\n+fn main() {\n+    enum Foo {\n+        A, B, C,\n+    }\n+\n+    #[allow(non_exhaustive_omitted_patterns)]\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::B => {}\n+    }\n+    //~^^^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::B => {}\n+        #[warn(non_exhaustive_omitted_patterns)]\n+        _ => {}\n+    }\n+    //~^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+}"}, {"sha": "691f64cf0addd443a43f258f9ae7ebeda0671058", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,93 @@\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+   |\n+LL | #![deny(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+   |\n+LL | #![allow(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+   |\n+LL |         #[warn(non_exhaustive_omitted_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+   |\n+LL | #![deny(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+   |\n+LL | #![allow(non_exhaustive_omitted_patterns)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+   |\n+LL |     #[allow(non_exhaustive_omitted_patterns)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+   |\n+LL |         #[warn(non_exhaustive_omitted_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n+   = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "02c80c2940824ca76c02091170d99e0bec7b58a0", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |        ^^^^^^^^^\n-   = note: expected `Publisher<'_>`\n-              found `Publisher<'_>`\n+   = note: expected `<MyStruct<'a> as Publisher<'_>>`\n+              found `<MyStruct<'_> as Publisher<'_>>`\n \n error: aborting due to previous error\n "}, {"sha": "ce8173169b1b3aa2f25510f9b06824d299442e78", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Some(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "e4e9705b07db5e59cf61369e83427b85590f279c", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Some(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "a3b9ac6775805243dd4a23147146762d6907fac9", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Ok(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "98a7091dd0583c8a0f27efae8e7ecac5483e59e8", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Ok(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "54141d2214cd9424041189865bf34d264136ff04", "filename": "src/test/ui/issues/issue-65230.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,11 @@\n+trait T0 {}\n+trait T1: T0 {}\n+\n+trait T2 {}\n+\n+impl<'a> T0 for &'a (dyn T2 + 'static) {}\n+\n+impl T1 for &dyn T2 {}\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "d75428f3d531dd7d1b5acae6fd2e604009c61453", "filename": "src/test/ui/issues/issue-65230.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-65230.rs:8:6\n+   |\n+LL | impl T1 for &dyn T2 {}\n+   |      ^^ lifetime mismatch\n+   |\n+   = note: expected trait `<&dyn T2 as T0>`\n+              found trait `<&(dyn T2 + 'static) as T0>`\n+note: the lifetime `'_` as defined on the impl at 8:13...\n+  --> $DIR/issue-65230.rs:8:13\n+   |\n+LL | impl T1 for &dyn T2 {}\n+   |             ^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8ad337064e5bf34a01df2873517bb203300eb5ca", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,67 @@\n+// Test the enum_intrinsics_non_enums lint.\n+\n+#![feature(variant_count)]\n+\n+use std::mem::{discriminant, variant_count};\n+\n+enum SomeEnum {\n+    A,\n+    B,\n+}\n+\n+struct SomeStruct;\n+\n+fn generic_discriminant<T>(v: &T) {\n+    discriminant::<T>(v);\n+}\n+\n+fn generic_variant_count<T>() -> usize {\n+    variant_count::<T>()\n+}\n+\n+fn test_discriminant() {\n+    discriminant(&SomeEnum::A);\n+    generic_discriminant(&SomeEnum::B);\n+\n+    discriminant(&());\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&SomeEnum::B);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&SomeStruct);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&123u32);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&123i8);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+}\n+\n+fn test_variant_count() {\n+    variant_count::<SomeEnum>();\n+    generic_variant_count::<SomeEnum>();\n+\n+    variant_count::<&str>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<*const u8>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<()>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<&SomeEnum>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+}\n+\n+fn main() {\n+    test_discriminant();\n+    test_variant_count();\n+\n+    // The lint ignores cases where the type is generic, so these should be\n+    // allowed even though their return values are unspecified\n+    generic_variant_count::<SomeStruct>();\n+    generic_discriminant::<SomeStruct>(&SomeStruct);\n+}"}, {"sha": "bec9fb62efac8be6d8a47f39c946f0cb79d62374", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,95 @@\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:5\n+   |\n+LL |     discriminant(&());\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(enum_intrinsics_non_enums)]` on by default\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `()`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:18\n+   |\n+LL |     discriminant(&());\n+   |                  ^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:5\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&SomeEnum`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:18\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:5\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `SomeStruct`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:18\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |                  ^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:5\n+   |\n+LL |     discriminant(&123u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `u32`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:18\n+   |\n+LL |     discriminant(&123u32);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:5\n+   |\n+LL |     discriminant(&&123i8);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&i8`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:18\n+   |\n+LL |     discriminant(&&123i8);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:46:5\n+   |\n+LL |     variant_count::<&str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&str`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:49:5\n+   |\n+LL |     variant_count::<*const u8>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `*const u8`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:52:5\n+   |\n+LL |     variant_count::<()>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `()`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:55:5\n+   |\n+LL |     variant_count::<&SomeEnum>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&SomeEnum`, which is not an enum.\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "614cdff1f80222fd553404239db09f1c36b02e27", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `E: From<()>` is not satisfied\n-  --> $DIR/never-value-fallback-issue-66757.rs:27:5\n+  --> $DIR/never-value-fallback-issue-66757.rs:28:5\n    |\n LL |     <E as From<_>>::from(never);\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`"}, {"sha": "fc6fe6eb5cc021ff518de2696855804d700a9e20", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -22,6 +22,7 @@ impl From<!> for E {\n \n #[allow(unreachable_code)]\n #[allow(dead_code)]\n+#[allow(unused_must_use)]\n fn foo(never: !) {\n     <E as From<!>>::from(never);  // Ok\n     <E as From<_>>::from(never);  //[nofallback]~ ERROR trait bound `E: From<()>` is not satisfied"}, {"sha": "4e69dda8721d641509f0e6abbf7a8565d555f696", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _x = *s;\n    |         ^^ lifetime mismatch\n    |\n-   = note: expected type `Sized`\n-              found type `Sized`\n+   = note: expected type `<<&'a T as A>::X as Sized>`\n+              found type `<<&'static T as A>::X as Sized>`\n note: the lifetime `'a` as defined on the function body at 9:8...\n   --> $DIR/issue-50716.rs:9:8\n    |"}, {"sha": "03f5265e376f060c3a50c4a47d7862ff86055029", "filename": "src/test/ui/proc-macro/auxiliary/is-available.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -2,7 +2,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_is_available)]\n \n extern crate proc_macro;\n "}, {"sha": "b32bb61b495d3177203a02ca52a6dff1cc00fa4b", "filename": "src/test/ui/proc-macro/is-available.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(proc_macro_is_available)]\n-\n extern crate proc_macro;\n \n // aux-build:is-available.rs"}, {"sha": "337ec307ef3261ea57afc3c4f45dee857cee263a", "filename": "src/test/ui/resolve/issue-85671.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+// Some trait with a function that returns a slice:\n+pub trait AsSlice {\n+    type Element;\n+    fn as_slice(&self) -> &[Self::Element];\n+}\n+\n+// Some type\n+pub struct A<Cont>(Cont);\n+\n+// Here we say that if A wraps a slice, then it implements AsSlice\n+impl<'a, Element> AsSlice for A<&'a [Element]> {\n+    type Element = Element;\n+    fn as_slice(&self) -> &[Self::Element] {\n+        self.0\n+    }\n+}\n+\n+impl<Cont> A<Cont> {\n+    // We want this function to work\n+    pub fn failing<Coef>(&self)\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        self.as_ref_a().as_ref_a();\n+    }\n+\n+    pub fn as_ref_a<Coef>(&self) -> A<&[<Self as AsSlice>::Element]>\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        A(self.as_slice())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ce1b5c7c377a49d05ffe10c056a4d506a6739741", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,7 @@\n // Test that the `non_exhaustive_omitted_patterns` lint is triggered correctly.\n \n+#![feature(non_exhaustive_omitted_patterns_lint)]\n+\n // aux-build:enums.rs\n extern crate enums;\n "}, {"sha": "5b21e0402b192795c1008904da22eae97f7d24af", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,47 +1,47 @@\n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:127:9\n+  --> $DIR/reachable-patterns.rs:129:9\n    |\n LL |         VariantNonExhaustive::Bar { x, .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `y` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:124:12\n+  --> $DIR/reachable-patterns.rs:126:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `VariantNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:132:9\n+  --> $DIR/reachable-patterns.rs:134:9\n    |\n LL |     let FunctionalRecord { first_field, second_field, .. } = FunctionalRecord::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `third_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:131:12\n+  --> $DIR/reachable-patterns.rs:133:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `FunctionalRecord` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:140:29\n+  --> $DIR/reachable-patterns.rs:142:29\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `second_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:139:12\n+  --> $DIR/reachable-patterns.rs:141:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `NormalStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:140:9\n+  --> $DIR/reachable-patterns.rs:142:9\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `foo` not listed\n@@ -50,63 +50,63 @@ LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = Nested\n    = note: the pattern is of type `NestedStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:54:9\n+  --> $DIR/reachable-patterns.rs:56:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:53:16\n+  --> $DIR/reachable-patterns.rs:55:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:61:9\n+  --> $DIR/reachable-patterns.rs:63:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Tuple(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:60:16\n+  --> $DIR/reachable-patterns.rs:62:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:71:9\n+  --> $DIR/reachable-patterns.rs:73:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Unit` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:70:16\n+  --> $DIR/reachable-patterns.rs:72:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:88:32\n+  --> $DIR/reachable-patterns.rs:90:32\n    |\n LL |         NestedNonExhaustive::A(_) => {}\n    |                                ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:85:12\n+  --> $DIR/reachable-patterns.rs:87:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:90:9\n+  --> $DIR/reachable-patterns.rs:92:9\n    |\n LL |         _ => {}\n    |         ^ pattern `C` not covered\n@@ -115,27 +115,27 @@ LL |         _ => {}\n    = note: the matched value is of type `NestedNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:120:9\n+  --> $DIR/reachable-patterns.rs:122:9\n    |\n LL |         _ => {}\n    |         ^ patterns `HostUnreachable`, `NetworkUnreachable`, `NetworkDown` and 18 more not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:97:12\n+  --> $DIR/reachable-patterns.rs:99:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `ErrorKind` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:157:9\n+  --> $DIR/reachable-patterns.rs:159:9\n    |\n LL |         _ => {}\n    |         ^ pattern `A(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:155:12\n+  --> $DIR/reachable-patterns.rs:157:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "8eefb375b8c1b9346b1520f9a7c7abeb6c6996bd", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.rs", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n \n trait Tr {\n     fn req(&self);\n@@ -18,11 +19,6 @@ impl const Tr for S {\n     fn req(&self) {}\n } //~^^ ERROR const trait implementations may not use non-const default functions\n \n-impl const Tr for u8 {\n-    fn req(&self) {}\n-    fn prov(&self) {}\n-}\n-\n impl const Tr for u16 {\n     fn prov(&self) {}\n     fn default() {}", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs"}, {"sha": "a0916797041114b373ce94bbf1a541db340269fb", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,5 @@\n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:17:1\n+  --> $DIR/impl-with-default-fn-fail.rs:18:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n@@ -9,7 +9,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:32:1\n+  --> $DIR/impl-with-default-fn-fail.rs:28:1\n    |\n LL | / impl const Tr for u32 {\n LL | |     fn req(&self) {}\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error[E0046]: not all trait items implemented, missing: `req`\n-  --> $DIR/impl-with-default-fn.rs:26:1\n+  --> $DIR/impl-with-default-fn-fail.rs:22:1\n    |\n LL |     fn req(&self);\n    |     -------------- `req` from trait", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr"}, {"sha": "ba3fec0882b02e306b3fd9919cfb1ca83d477a71", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-pass.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+trait Tr {\n+    fn req(&self);\n+\n+    fn prov(&self) {\n+        println!(\"lul\");\n+        self.req();\n+    }\n+\n+    #[default_method_body_is_const]\n+    fn default() {}\n+}\n+\n+impl const Tr for u8 {\n+    fn req(&self) {}\n+    fn prov(&self) {}\n+}\n+\n+macro_rules! impl_tr {\n+    ($ty: ty) => {\n+        impl const Tr for $ty {\n+            fn req(&self) {}\n+            fn prov(&self) {}\n+        }\n+    }\n+}\n+\n+impl_tr!(u64);\n+\n+fn main() {}"}, {"sha": "ed267d8411a22aa26bdaae19336b6b05c0d9fd7b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/36e050b85f5fc9acd27ff5e8cda57a36070f43e2/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e050b85f5fc9acd27ff5e8cda57a36070f43e2/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=36e050b85f5fc9acd27ff5e8cda57a36070f43e2", "patch": "@@ -1,92 +0,0 @@\n-// build-fail\n-\n-// Test that the simd_bitmask intrinsic produces ok-ish error\n-// messages when misused.\n-\n-#![feature(repr_simd, platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-pub struct u32x2(pub u32, pub u32);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x8(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x16(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x32(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x64(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_bitmask<T, U>(x: T) -> U;\n-}\n-\n-fn main() {\n-    let m2 = u32x2(0, 0);\n-    let m4 = u32x4(0, 0, 0, 0);\n-    let m8 = u8x8(0, 0, 0, 0, 0, 0, 0, 0);\n-    let m16 = u8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m32 = u8x32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m64 = u8x64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-\n-    unsafe {\n-        let _: u8 = simd_bitmask(m2);\n-        let _: u8 = simd_bitmask(m4);\n-        let _: u8 = simd_bitmask(m8);\n-        let _: u16 = simd_bitmask(m16);\n-        let _: u32 = simd_bitmask(m32);\n-        let _: u64 = simd_bitmask(m64);\n-\n-        let _: u16 = simd_bitmask(m2);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n-\n-        let _: u16 = simd_bitmask(m8);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n-\n-        let _: u32 = simd_bitmask(m16);\n-        //~^ ERROR bitmask `u32`, expected `u16`\n-\n-        let _: u64 = simd_bitmask(m32);\n-        //~^ ERROR bitmask `u64`, expected `u32`\n-\n-        let _: u128 = simd_bitmask(m64);\n-        //~^ ERROR bitmask `u128`, expected `u64`\n-\n-   }\n-}"}, {"sha": "45c10b378160465102f386905fbc5d5e5933f484", "filename": "src/test/ui/simd/array-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-array-trait.rs"}, {"sha": "765215c393977b54b3ee2204c30400390cae1915", "filename": "src/test/ui/simd/array-trait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,5 +1,5 @@\n error: unconstrained generic constant\n-  --> $DIR/simd-array-trait.rs:23:23\n+  --> $DIR/array-trait.rs:23:23\n    |\n LL | pub struct T<S: Simd>([S::Lane; S::SIZE]);\n    |                       ^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd/simd-array-trait.stderr"}, {"sha": "7d66395a3c80f3f3f4ff1f7bef744dcbc297300a", "filename": "src/test/ui/simd/array-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-array-type.rs"}, {"sha": "fa9d35ee4df854b5c207085c9e4c014faaa25fe2", "filename": "src/test/ui/simd/generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-generics.rs"}, {"sha": "7a4f7466559ffdc69a7cf0b389825bcee9fa9ac0", "filename": "src/test/ui/simd/intrinsic/float-math-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-float-math.rs"}, {"sha": "d79be61f909955abfbdf1713dbe1c3aa25569d95", "filename": "src/test/ui/simd/intrinsic/float-minmax-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-float-minmax.rs"}, {"sha": "3576eed71ab5018e4eb0a150fb95148328c304c7", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.rs"}, {"sha": "0f0a7ea6652d0b9c4ac4c561090fe58d42e41c4b", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-2.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,89 +1,89 @@\n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:69:9\n+  --> $DIR/generic-arithmetic-2.rs:69:9\n    |\n LL |         simd_add(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_sub` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:71:9\n+  --> $DIR/generic-arithmetic-2.rs:71:9\n    |\n LL |         simd_sub(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_mul` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:73:9\n+  --> $DIR/generic-arithmetic-2.rs:73:9\n    |\n LL |         simd_mul(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_div` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:75:9\n+  --> $DIR/generic-arithmetic-2.rs:75:9\n    |\n LL |         simd_div(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:77:9\n+  --> $DIR/generic-arithmetic-2.rs:77:9\n    |\n LL |         simd_shl(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:79:9\n+  --> $DIR/generic-arithmetic-2.rs:79:9\n    |\n LL |         simd_shr(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:81:9\n+  --> $DIR/generic-arithmetic-2.rs:81:9\n    |\n LL |         simd_and(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:83:9\n+  --> $DIR/generic-arithmetic-2.rs:83:9\n    |\n LL |         simd_or(0, 0);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:85:9\n+  --> $DIR/generic-arithmetic-2.rs:85:9\n    |\n LL |         simd_xor(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_neg` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n+  --> $DIR/generic-arithmetic-2.rs:88:9\n    |\n LL |         simd_neg(0);\n    |         ^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:92:9\n+  --> $DIR/generic-arithmetic-2.rs:92:9\n    |\n LL |         simd_shl(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:94:9\n+  --> $DIR/generic-arithmetic-2.rs:94:9\n    |\n LL |         simd_shr(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:96:9\n+  --> $DIR/generic-arithmetic-2.rs:96:9\n    |\n LL |         simd_and(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:98:9\n+  --> $DIR/generic-arithmetic-2.rs:98:9\n    |\n LL |         simd_or(z, z);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:100:9\n+  --> $DIR/generic-arithmetic-2.rs:100:9\n    |\n LL |         simd_xor(z, z);\n    |         ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.stderr"}, {"sha": "c507b8d31ecb4d5d7cbaf8fc0fed0b713eaa29ce", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic.rs"}, {"sha": "9736d1b964da31a49b4dcf0513ee39bb40509351", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs"}, {"sha": "f349cb56560ccdb03ddaaf7908533b80e15fa306", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,11 +1,11 @@\n error[E0511]: invalid monomorphization of `simd_saturating_add` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:33:9\n+  --> $DIR/generic-arithmetic-saturating-2.rs:33:9\n    |\n LL |         simd_saturating_add(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_saturating_sub` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:35:9\n+  --> $DIR/generic-arithmetic-saturating-2.rs:35:9\n    |\n LL |         simd_saturating_sub(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.stderr"}, {"sha": "c11d14b99d482bf526c889345c997701921a0358", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic-saturating.rs"}, {"sha": "8c436841b44e8622be2aebda7f457ab458bdeaba", "filename": "src/test/ui/simd/intrinsic/generic-bitmask-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-bitmask.rs"}, {"sha": "92c4e67dfdd1961b68adaf7b54df1b03dfdec5ef", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -0,0 +1,69 @@\n+// build-fail\n+\n+// Test that the simd_bitmask intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x2([u32; 2]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4([u32; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x8([u8; 8]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x16([u8; 16]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x32([u8; 32]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x64([u8; 64]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n+fn main() {\n+    let m2 = u32x2([0; 2]);\n+    let m4 = u32x4([0; 4]);\n+    let m8 = u8x8([0; 8]);\n+    let m16 = u8x16([0; 16]);\n+    let m32 = u8x32([0; 32]);\n+    let m64 = u8x64([0; 64]);\n+\n+    unsafe {\n+        let _: u8 = simd_bitmask(m2);\n+        let _: u8 = simd_bitmask(m4);\n+        let _: u8 = simd_bitmask(m8);\n+        let _: u16 = simd_bitmask(m16);\n+        let _: u32 = simd_bitmask(m32);\n+        let _: u64 = simd_bitmask(m64);\n+\n+        let _: u16 = simd_bitmask(m2);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u16 = simd_bitmask(m8);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u32 = simd_bitmask(m16);\n+        //~^ ERROR bitmask `u32`, expected `u16`\n+\n+        let _: u64 = simd_bitmask(m32);\n+        //~^ ERROR bitmask `u64`, expected `u32`\n+\n+        let _: u128 = simd_bitmask(m64);\n+        //~^ ERROR bitmask `u128`, expected `u64`\n+\n+   }\n+}"}, {"sha": "5aaae68cafb342501e769ee7a9d8326873a61b8e", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,29 +1,29 @@\n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:76:22\n+  --> $DIR/generic-bitmask.rs:53:22\n    |\n LL |         let _: u16 = simd_bitmask(m2);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:79:22\n+  --> $DIR/generic-bitmask.rs:56:22\n    |\n LL |         let _: u16 = simd_bitmask(m8);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:82:22\n+  --> $DIR/generic-bitmask.rs:59:22\n    |\n LL |         let _: u32 = simd_bitmask(m16);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:85:22\n+  --> $DIR/generic-bitmask.rs:62:22\n    |\n LL |         let _: u64 = simd_bitmask(m32);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:88:23\n+  --> $DIR/generic-bitmask.rs:65:23\n    |\n LL |         let _: u128 = simd_bitmask(m64);\n    |                       ^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.stderr"}, {"sha": "15f232e2c0f70cdae745538e4ae59223c25cb2ba", "filename": "src/test/ui/simd/intrinsic/generic-cast-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-cast.rs"}, {"sha": "4f4fa06b002300a89ae92cb2a894b19631286067", "filename": "src/test/ui/simd/intrinsic/generic-cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.rs"}, {"sha": "2226bbbe1bd552256f99c1453a6003722fa44f31", "filename": "src/test/ui/simd/intrinsic/generic-cast.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,23 +1,23 @@\n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:34:9\n+  --> $DIR/generic-cast.rs:34:9\n    |\n LL |         simd_cast::<i32, i32>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:36:9\n+  --> $DIR/generic-cast.rs:36:9\n    |\n LL |         simd_cast::<i32, i32x4>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:38:9\n+  --> $DIR/generic-cast.rs:38:9\n    |\n LL |         simd_cast::<i32x4, i32>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-cast.rs:40:9\n+  --> $DIR/generic-cast.rs:40:9\n    |\n LL |         simd_cast::<_, i32x8>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.stderr"}, {"sha": "da5c42a1a9888139281cad44f09bd05eb1c8eb46", "filename": "src/test/ui/simd/intrinsic/generic-comparison-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-comparison.rs"}, {"sha": "3cd38042f0f241d77ef13624e38bb025eb631e54", "filename": "src/test/ui/simd/intrinsic/generic-comparison.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.rs"}, {"sha": "0eae2688bced07e92b263fd46dad6c0d7628bcce", "filename": "src/test/ui/simd/intrinsic/generic-comparison.stderr", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,107 +1,107 @@\n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:28:9\n+  --> $DIR/generic-comparison.rs:28:9\n    |\n LL |         simd_eq::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:30:9\n+  --> $DIR/generic-comparison.rs:30:9\n    |\n LL |         simd_ne::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:32:9\n+  --> $DIR/generic-comparison.rs:32:9\n    |\n LL |         simd_lt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:34:9\n+  --> $DIR/generic-comparison.rs:34:9\n    |\n LL |         simd_le::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:36:9\n+  --> $DIR/generic-comparison.rs:36:9\n    |\n LL |         simd_gt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:38:9\n+  --> $DIR/generic-comparison.rs:38:9\n    |\n LL |         simd_ge::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:41:9\n+  --> $DIR/generic-comparison.rs:41:9\n    |\n LL |         simd_eq::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:43:9\n+  --> $DIR/generic-comparison.rs:43:9\n    |\n LL |         simd_ne::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:45:9\n+  --> $DIR/generic-comparison.rs:45:9\n    |\n LL |         simd_lt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:47:9\n+  --> $DIR/generic-comparison.rs:47:9\n    |\n LL |         simd_le::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:49:9\n+  --> $DIR/generic-comparison.rs:49:9\n    |\n LL |         simd_gt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:51:9\n+  --> $DIR/generic-comparison.rs:51:9\n    |\n LL |         simd_ge::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:54:9\n+  --> $DIR/generic-comparison.rs:54:9\n    |\n LL |         simd_eq::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:56:9\n+  --> $DIR/generic-comparison.rs:56:9\n    |\n LL |         simd_ne::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:58:9\n+  --> $DIR/generic-comparison.rs:58:9\n    |\n LL |         simd_lt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:60:9\n+  --> $DIR/generic-comparison.rs:60:9\n    |\n LL |         simd_le::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:62:9\n+  --> $DIR/generic-comparison.rs:62:9\n    |\n LL |         simd_gt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:64:9\n+  --> $DIR/generic-comparison.rs:64:9\n    |\n LL |         simd_ge::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.stderr"}, {"sha": "08544bce45db97dca47c604f50a2b0073337edff", "filename": "src/test/ui/simd/intrinsic/generic-elements-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs"}, {"sha": "abde69163bd4eb1e95e4b39b26030788ad3c9f17", "filename": "src/test/ui/simd/intrinsic/generic-elements.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs"}, {"sha": "5b423f7040f90d49be3ab2e7abd05d9755812067", "filename": "src/test/ui/simd/intrinsic/generic-elements.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0360f3d43442b9d78cb1ba777e13a58506bce6/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr?ref=3e0360f3d43442b9d78cb1ba777e13a58506bce6", "patch": "@@ -1,71 +1,71 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:46:9\n+  --> $DIR/generic-elements.rs:46:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:48:9\n+  --> $DIR/generic-elements.rs:48:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:50:9\n+  --> $DIR/generic-elements.rs:50:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:54:9\n+  --> $DIR/generic-elements.rs:54:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/generic-elements.rs:57:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n+  --> $DIR/generic-elements.rs:60:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n+  --> $DIR/generic-elements.rs:63:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:65:9\n+  --> $DIR/generic-elements.rs:65:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n+  --> $DIR/generic-elements.rs:67:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n+  --> $DIR/generic-elements.rs:70:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n+  --> $DIR/generic-elements.rs:72:9\n    |\n LL |         simd_shuffle4::<_, i32x8>(x, x, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:74:9\n+  --> $DIR/generic-elements.rs:74:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr"}]}