{"sha": "076c5d445b7611995a8d7e26e94c327a79eb20e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NmM1ZDQ0NWI3NjExOTk1YThkN2UyNmU5NGMzMjdhNzllYjIwZTI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-31T22:17:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-02T07:42:37Z"}, "message": "Fix shadowing checking.", "tree": {"sha": "9b414cc6ee85ef62c7b2c7dd33109ecdc6cd78ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b414cc6ee85ef62c7b2c7dd33109ecdc6cd78ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076c5d445b7611995a8d7e26e94c327a79eb20e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076c5d445b7611995a8d7e26e94c327a79eb20e2", "html_url": "https://github.com/rust-lang/rust/commit/076c5d445b7611995a8d7e26e94c327a79eb20e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076c5d445b7611995a8d7e26e94c327a79eb20e2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4b551403624b064c4a5836dfa59971a215cf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4b551403624b064c4a5836dfa59971a215cf4a", "html_url": "https://github.com/rust-lang/rust/commit/6c4b551403624b064c4a5836dfa59971a215cf4a"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "e7d83a64e03eb97b03530a896346574442e093f9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/076c5d445b7611995a8d7e26e94c327a79eb20e2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c5d445b7611995a8d7e26e94c327a79eb20e2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=076c5d445b7611995a8d7e26e94c327a79eb20e2", "patch": "@@ -77,7 +77,7 @@ use std::mem::replace;\n use std::rc::Rc;\n \n use resolve_imports::{ImportDirective, NameResolution};\n-use macros::{InvocationData, LegacyBinding};\n+use macros::{InvocationData, LegacyBinding, LegacyScope};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -1077,6 +1077,7 @@ pub struct Resolver<'a> {\n     crate_loader: &'a mut CrateLoader,\n     macro_names: FnvHashSet<Name>,\n     builtin_macros: FnvHashMap<Name, Rc<SyntaxExtension>>,\n+    lexical_macro_resolutions: Vec<(Name, LegacyScope<'a>)>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FnvHashMap<Mark, &'a InvocationData<'a>>,\n@@ -1267,6 +1268,7 @@ impl<'a> Resolver<'a> {\n             crate_loader: crate_loader,\n             macro_names: FnvHashSet(),\n             builtin_macros: FnvHashMap(),\n+            lexical_macro_resolutions: Vec::new(),\n             invocations: invocations,\n         }\n     }\n@@ -3363,9 +3365,13 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_shadowing_errors(&mut self) {\n+        for (name, scope) in replace(&mut self.lexical_macro_resolutions, Vec::new()) {\n+            self.resolve_macro_name(scope, name);\n+        }\n+\n         let mut reported_errors = FnvHashSet();\n         for binding in replace(&mut self.disallowed_shadowing, Vec::new()) {\n-            if self.resolve_macro_name(binding.parent, binding.name, false).is_some() &&\n+            if self.resolve_macro_name(binding.parent, binding.name).is_some() &&\n                reported_errors.insert((binding.name, binding.span)) {\n                 let msg = format!(\"`{}` is already in scope\", binding.name);\n                 self.session.struct_span_err(binding.span, &msg)"}, {"sha": "356158e58da6f5ce42c158e96f52a9404b9cd089", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/076c5d445b7611995a8d7e26e94c327a79eb20e2/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c5d445b7611995a8d7e26e94c327a79eb20e2/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=076c5d445b7611995a8d7e26e94c327a79eb20e2", "patch": "@@ -174,7 +174,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         if let LegacyScope::Expansion(parent) = invocation.legacy_scope.get() {\n             invocation.legacy_scope.set(LegacyScope::simplify_expansion(parent));\n         }\n-        self.resolve_macro_name(invocation.legacy_scope.get(), name, true).ok_or_else(|| {\n+        self.resolve_macro_name(invocation.legacy_scope.get(), name).ok_or_else(|| {\n             if force {\n                 let msg = format!(\"macro undefined: '{}!'\", name);\n                 let mut err = self.session.struct_span_err(path.span, &msg);\n@@ -189,17 +189,18 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n-    pub fn resolve_macro_name(&mut self,\n-                              mut scope: LegacyScope<'a>,\n-                              name: ast::Name,\n-                              record_used: bool)\n+    pub fn resolve_macro_name(&mut self, mut scope: LegacyScope<'a>, name: ast::Name)\n                               -> Option<Rc<SyntaxExtension>> {\n+        let mut possible_time_travel = None;\n         let mut relative_depth: u32 = 0;\n         loop {\n             scope = match scope {\n                 LegacyScope::Empty => break,\n                 LegacyScope::Expansion(invocation) => {\n                     if let LegacyScope::Empty = invocation.expansion.get() {\n+                        if possible_time_travel.is_none() {\n+                            possible_time_travel = Some(scope);\n+                        }\n                         invocation.legacy_scope.get()\n                     } else {\n                         relative_depth += 1;\n@@ -212,7 +213,10 @@ impl<'a> Resolver<'a> {\n                 }\n                 LegacyScope::Binding(binding) => {\n                     if binding.name == name {\n-                        if record_used && relative_depth > 0 {\n+                        if let Some(scope) = possible_time_travel {\n+                            // Check for disallowed shadowing later\n+                            self.lexical_macro_resolutions.push((name, scope));\n+                        } else if relative_depth > 0 {\n                             self.disallowed_shadowing.push(binding);\n                         }\n                         return Some(binding.ext.clone());\n@@ -222,6 +226,9 @@ impl<'a> Resolver<'a> {\n             };\n         }\n \n+        if let Some(scope) = possible_time_travel {\n+            self.lexical_macro_resolutions.push((name, scope));\n+        }\n         self.builtin_macros.get(&name).cloned()\n     }\n "}]}