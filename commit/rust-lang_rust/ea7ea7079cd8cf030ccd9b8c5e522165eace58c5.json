{"sha": "ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "node_id": "C_kwDOAAsO6NoAKGVhN2VhNzA3OWNkOGNmMDMwY2NkOWI4YzVlNTIyMTY1ZWFjZTU4YzU", "commit": {"author": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-07-02T14:17:29Z"}, "committer": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-07-02T14:17:29Z"}, "message": "fix: escape for enum variant", "tree": {"sha": "1cb717550904cae4d57596ee4d2f3dcb58f1ddf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb717550904cae4d57596ee4d2f3dcb58f1ddf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "html_url": "https://github.com/rust-lang/rust/commit/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622b516c74e31e9759a5531147a669b39ce9d70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/622b516c74e31e9759a5531147a669b39ce9d70c", "html_url": "https://github.com/rust-lang/rust/commit/622b516c74e31e9759a5531147a669b39ce9d70c"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "d6779961c07ed4c27e06e45f8c56e8cd16c2836b", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "patch": "@@ -96,7 +96,7 @@ fn render_pat(\n         StructKind::Record => {\n             render_record_as_pat(ctx.db(), ctx.snippet_cap(), fields, name, fields_omitted)\n         }\n-        StructKind::Unit => return None,\n+        StructKind::Unit => name.to_string(),\n     };\n \n     let needs_ascription = matches!(\n@@ -131,7 +131,7 @@ fn render_record_as_pat(\n             format!(\n                 \"{name} {{ {}{} }}\",\n                 fields.enumerate().format_with(\", \", |(idx, field), f| {\n-                    f(&format_args!(\"{}${}\", field.name(db), idx + 1))\n+                    f(&format_args!(\"{}${}\", field.name(db).escaped(), idx + 1))\n                 }),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n@@ -140,7 +140,7 @@ fn render_record_as_pat(\n         None => {\n             format!(\n                 \"{name} {{ {}{} }}\",\n-                fields.map(|field| field.name(db)).format(\", \"),\n+                fields.map(|field| field.name(db).escaped().to_smol_str()).format(\", \"),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n             )"}, {"sha": "63ccf9003b4fdac9b80586a1881167fc097f52cc", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "patch": "@@ -164,6 +164,7 @@ fn foo() {\n             ev Variant\n             bn Record {\u2026}        Record { field$1 }$0\n             bn Tuple(\u2026)          Tuple($1)$0\n+            bn Variant           Variant$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -243,6 +244,7 @@ fn foo() {\n         expect![[r#\"\n             en E\n             ma m!(\u2026) macro_rules! m\n+            bn E::X  E::X$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -318,6 +320,7 @@ fn func() {\n             ct ASSOC_CONST const ASSOC_CONST: ()\n             bn RecordV {\u2026} RecordV { field$1 }$0\n             bn TupleV(\u2026)   TupleV($1)$0\n+            bn UnitV       UnitV$0\n         \"#]],\n     );\n }\n@@ -490,6 +493,57 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn completes_enum_variant_pat_escape() {\n+    cov_mark::check!(enum_variant_pattern_path);\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    A,\n+    B { r#type: i32 },\n+    r#type,\n+    r#struct { r#type: i32 },\n+}\n+fn foo() {\n+    match (Enum::A) {\n+        $0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            en Enum\n+            bn Enum::A          Enum::A$0\n+            bn Enum::B {\u2026}      Enum::B { r#type$1 }$0\n+            bn Enum::struct {\u2026} Enum::r#struct { r#type$1 }$0\n+            bn Enum::type       Enum::r#type$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    A,\n+    B { r#type: i32 },\n+    r#type,\n+    r#struct { r#type: i32 },\n+}\n+fn foo() {\n+    match (Enum::A) {\n+        Enum::$0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            bn A          A$0\n+            bn B {\u2026}      B { r#type$1 }$0\n+            bn struct {\u2026} r#struct { r#type$1 }$0\n+            bn type       r#type$0\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn completes_associated_const() {\n     check_empty("}]}