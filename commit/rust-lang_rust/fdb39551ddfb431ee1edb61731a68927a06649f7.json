{"sha": "fdb39551ddfb431ee1edb61731a68927a06649f7", "node_id": "C_kwDOAAsO6NoAKGZkYjM5NTUxZGRmYjQzMWVlMWVkYjYxNzMxYTY4OTI3YTA2NjQ5Zjc", "commit": {"author": {"name": "dawnofmidnight", "email": "dawnofmidnight@duck.com", "date": "2022-08-24T16:36:08Z"}, "committer": {"name": "dawnofmidnight", "email": "dawnofmidnight@duck.com", "date": "2022-10-01T21:46:18Z"}, "message": "fix: use git-commit-info for version information\n\nThis PR adds support for fetching version information from the\n`git-commit-info` file when building the compiler from a source tarball.", "tree": {"sha": "dfff66a1931acf004e496027be081b984063625e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfff66a1931acf004e496027be081b984063625e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb39551ddfb431ee1edb61731a68927a06649f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb39551ddfb431ee1edb61731a68927a06649f7", "html_url": "https://github.com/rust-lang/rust/commit/fdb39551ddfb431ee1edb61731a68927a06649f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb39551ddfb431ee1edb61731a68927a06649f7/comments", "author": {"login": "dawnofmidnight", "id": 78233879, "node_id": "MDQ6VXNlcjc4MjMzODc5", "avatar_url": "https://avatars.githubusercontent.com/u/78233879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dawnofmidnight", "html_url": "https://github.com/dawnofmidnight", "followers_url": "https://api.github.com/users/dawnofmidnight/followers", "following_url": "https://api.github.com/users/dawnofmidnight/following{/other_user}", "gists_url": "https://api.github.com/users/dawnofmidnight/gists{/gist_id}", "starred_url": "https://api.github.com/users/dawnofmidnight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dawnofmidnight/subscriptions", "organizations_url": "https://api.github.com/users/dawnofmidnight/orgs", "repos_url": "https://api.github.com/users/dawnofmidnight/repos", "events_url": "https://api.github.com/users/dawnofmidnight/events{/privacy}", "received_events_url": "https://api.github.com/users/dawnofmidnight/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dawnofmidnight", "id": 78233879, "node_id": "MDQ6VXNlcjc4MjMzODc5", "avatar_url": "https://avatars.githubusercontent.com/u/78233879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dawnofmidnight", "html_url": "https://github.com/dawnofmidnight", "followers_url": "https://api.github.com/users/dawnofmidnight/followers", "following_url": "https://api.github.com/users/dawnofmidnight/following{/other_user}", "gists_url": "https://api.github.com/users/dawnofmidnight/gists{/gist_id}", "starred_url": "https://api.github.com/users/dawnofmidnight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dawnofmidnight/subscriptions", "organizations_url": "https://api.github.com/users/dawnofmidnight/orgs", "repos_url": "https://api.github.com/users/dawnofmidnight/repos", "events_url": "https://api.github.com/users/dawnofmidnight/events{/privacy}", "received_events_url": "https://api.github.com/users/dawnofmidnight/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a627fe876ded260d5563751d8d1530275e1c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a627fe876ded260d5563751d8d1530275e1c55", "html_url": "https://github.com/rust-lang/rust/commit/17a627fe876ded260d5563751d8d1530275e1c55"}], "stats": {"total": 174, "additions": 127, "deletions": 47}, "files": [{"sha": "0caa7ea299834ff503003c1b83643746d4e9152b", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -521,6 +521,12 @@ changelog-seen = 2\n # A descriptive string to be appended to `rustc --version` output, which is\n # also used in places like debuginfo `DW_AT_producer`. This may be useful for\n # supplementary build information, like distro-specific package versions.\n+#\n+# The Rust compiler will differentiate between versions of itself, including\n+# based on this string, which means that if you wish to be compatible with\n+# upstream Rust you need to set this to \"\". However, note that if you are not\n+# actually compatible -- for example if you've backported patches that change\n+# behavior -- this may lead to miscompilations or other bugs.\n #description = <none> (string)\n \n # The root location of the musl installation directory. The library directory"}, {"sha": "363556c1edeaebf77bb2a183a067de23f9b34f95", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -5,10 +5,12 @@\n //! `package_vers`, and otherwise indicating to the compiler what it should\n //! print out as part of its version information.\n \n+use std::fs;\n use std::path::Path;\n use std::process::Command;\n \n use crate::util::output;\n+use crate::util::t;\n use crate::Build;\n \n pub enum GitInfo {\n@@ -18,19 +20,25 @@ pub enum GitInfo {\n     /// If the info should be used (`ignore_git` is false), this will be\n     /// `Some`, otherwise it will be `None`.\n     Present(Option<Info>),\n+    /// This is not a git repostory, but the info can be fetched from the\n+    /// `git-commit-info` file.\n+    RecordedForTarball(Info),\n }\n \n pub struct Info {\n-    commit_date: String,\n-    sha: String,\n-    short_sha: String,\n+    pub commit_date: String,\n+    pub sha: String,\n+    pub short_sha: String,\n }\n \n impl GitInfo {\n     pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n         if !dir.join(\".git\").exists() {\n-            return GitInfo::Absent;\n+            match read_commit_info_file(dir) {\n+                Some(info) => return GitInfo::RecordedForTarball(info),\n+                None => return GitInfo::Absent,\n+            }\n         }\n \n         // Make sure git commands work\n@@ -65,10 +73,11 @@ impl GitInfo {\n         }))\n     }\n \n-    fn info(&self) -> Option<&Info> {\n+    pub fn info(&self) -> Option<&Info> {\n         match self {\n-            GitInfo::Present(info) => info.as_ref(),\n             GitInfo::Absent => None,\n+            GitInfo::Present(info) => info.as_ref(),\n+            GitInfo::RecordedForTarball(info) => Some(info),\n         }\n     }\n \n@@ -96,10 +105,48 @@ impl GitInfo {\n         version\n     }\n \n-    pub fn is_git(&self) -> bool {\n+    /// Returns whether this directory has a `.git` directory which should be managed by bootstrap.\n+    pub fn is_managed_git_subrepository(&self) -> bool {\n         match self {\n-            GitInfo::Absent => false,\n+            GitInfo::Absent | GitInfo::RecordedForTarball(_) => false,\n             GitInfo::Present(_) => true,\n         }\n     }\n+\n+    /// Returns whether this is being built from a tarball.\n+    pub fn is_from_tarball(&self) -> bool {\n+        match self {\n+            GitInfo::Absent | GitInfo::Present(_) => false,\n+            GitInfo::RecordedForTarball(_) => true,\n+        }\n+    }\n+}\n+\n+/// Read the commit information from the `git-commit-info` file given the\n+/// project root.\n+pub fn read_commit_info_file(root: &Path) -> Option<Info> {\n+    if let Ok(contents) = fs::read_to_string(root.join(\"git-commit-info\")) {\n+        let mut lines = contents.lines();\n+        let sha = lines.next();\n+        let short_sha = lines.next();\n+        let commit_date = lines.next();\n+        let info = match (commit_date, sha, short_sha) {\n+            (Some(commit_date), Some(sha), Some(short_sha)) => Info {\n+                commit_date: commit_date.to_owned(),\n+                sha: sha.to_owned(),\n+                short_sha: short_sha.to_owned(),\n+            },\n+            _ => panic!(\"the `git-comit-info` file is malformed\"),\n+        };\n+        Some(info)\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Write the commit information to the `git-commit-info` file given the project\n+/// root.\n+pub fn write_commit_info_file(root: &Path, info: &Info) {\n+    let commit_info = format!(\"{}\\n{}\\n{}\\n\", info.sha, info.short_sha, info.commit_date);\n+    t!(fs::write(root.join(\"git-commit-info\"), &commit_info));\n }"}, {"sha": "5cd3eb1f6ac67ffd91fe5d0dd6f230665ad2a4f1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -1280,11 +1280,22 @@ impl Config {\n         git\n     }\n \n-    pub(crate) fn artifact_channel(&self, commit: &str) -> String {\n-        let mut channel = self.git();\n-        channel.arg(\"show\").arg(format!(\"{}:src/ci/channel\", commit));\n-        let channel = output(&mut channel);\n-        channel.trim().to_owned()\n+    pub(crate) fn artifact_channel(&self, builder: &Builder<'_>, commit: &str) -> String {\n+        if builder.rust_info.is_managed_git_subrepository() {\n+            let mut channel = self.git();\n+            channel.arg(\"show\").arg(format!(\"{}:src/ci/channel\", commit));\n+            let channel = output(&mut channel);\n+            channel.trim().to_owned()\n+        } else if let Ok(channel) = fs::read_to_string(builder.src.join(\"src/ci/channel\")) {\n+            channel.trim().to_owned()\n+        } else {\n+            let src = builder.src.display();\n+            eprintln!(\"error: failed to determine artifact channel\");\n+            eprintln!(\n+                \"help: either use git or ensure that {src}/src/ci/channel contains the name of the channel to use\"\n+            );\n+            panic!();\n+        }\n     }\n \n     /// Try to find the relative path of `bindir`, otherwise return it in full.\n@@ -1421,7 +1432,7 @@ impl Config {\n     }\n \n     pub fn submodules(&self, rust_info: &GitInfo) -> bool {\n-        self.submodules.unwrap_or(rust_info.is_git())\n+        self.submodules.unwrap_or(rust_info.is_managed_git_subrepository())\n     }\n }\n \n@@ -1526,7 +1537,7 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n \n fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n     builder.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n-    let channel = builder.config.artifact_channel(commit);\n+    let channel = builder.config.artifact_channel(builder, commit);\n     let host = builder.config.build.triple;\n     let bin_root = builder.out.join(host).join(\"ci-rustc\");\n     let rustc_stamp = bin_root.join(\".rustc-stamp\");"}, {"sha": "02bde0266dc4012f8579be18d4bc538ae976cddc", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -16,6 +16,7 @@ use std::process::Command;\n \n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n+use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n@@ -897,12 +898,12 @@ impl Step for PlainSourceTarball {\n \n         // Create the version file\n         builder.create(&plain_dst_src.join(\"version\"), &builder.rust_version());\n-        if let Some(sha) = builder.rust_sha() {\n-            builder.create(&plain_dst_src.join(\"git-commit-hash\"), &sha);\n+        if let Some(info) = builder.rust_info.info() {\n+            channel::write_commit_info_file(&plain_dst_src, info);\n         }\n \n         // If we're building from git sources, we need to vendor a complete distribution.\n-        if builder.rust_info.is_git() {\n+        if builder.rust_info.is_managed_git_subrepository() {\n             // Ensure we have the submodules checked out.\n             builder.update_submodule(Path::new(\"src/tools/rust-analyzer\"));\n "}, {"sha": "ba1e3f88c14a5ba22b18fb8c918dffc16150137b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -395,7 +395,7 @@ impl Build {\n     /// line and the filesystem `config`.\n     ///\n     /// By default all build output will be placed in the current directory.\n-    pub fn new(config: Config) -> Build {\n+    pub fn new(mut config: Config) -> Build {\n         let src = config.src.clone();\n         let out = config.out.clone();\n \n@@ -470,6 +470,10 @@ impl Build {\n             bootstrap_out\n         };\n \n+        if rust_info.is_from_tarball() && config.description.is_none() {\n+            config.description = Some(\"built from a source tarball\".to_owned());\n+        }\n+\n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n@@ -574,7 +578,9 @@ impl Build {\n \n         // NOTE: The check for the empty directory is here because when running x.py the first time,\n         // the submodule won't be checked out. Check it out now so we can build it.\n-        if !channel::GitInfo::new(false, &absolute_path).is_git() && !dir_is_empty(&absolute_path) {\n+        if !channel::GitInfo::new(false, &absolute_path).is_managed_git_subrepository()\n+            && !dir_is_empty(&absolute_path)\n+        {\n             return;\n         }\n \n@@ -645,7 +651,7 @@ impl Build {\n             // Sample output: `submodule.src/rust-installer.path src/tools/rust-installer`\n             let submodule = Path::new(line.splitn(2, ' ').nth(1).unwrap());\n             // Don't update the submodule unless it's already been cloned.\n-            if channel::GitInfo::new(false, submodule).is_git() {\n+            if channel::GitInfo::new(false, submodule).is_managed_git_subrepository() {\n                 self.update_submodule(submodule);\n             }\n         }\n@@ -1253,7 +1259,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info.is_git() && !self.config.ignore_git {\n+                if self.rust_info.is_managed_git_subrepository() && !self.config.ignore_git {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)"}, {"sha": "c2445b84fcc52d5a265da88a123e0574a86ce74a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -17,6 +17,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::channel;\n use crate::config::TargetSelection;\n use crate::util::get_clang_cl_resource_dir;\n use crate::util::{self, exe, output, program_out_of_date, t, up_to_date};\n@@ -115,32 +116,37 @@ pub fn prebuilt_llvm_config(\n }\n \n /// This retrieves the LLVM sha we *want* to use, according to git history.\n-pub(crate) fn detect_llvm_sha(config: &crate::config::Config) -> String {\n-    let mut rev_list = config.git();\n-    rev_list.args(&[\n-        PathBuf::from(\"rev-list\"),\n-        format!(\"--author={}\", config.stage0_metadata.config.git_merge_commit_email).into(),\n-        \"-n1\".into(),\n-        \"--first-parent\".into(),\n-        \"HEAD\".into(),\n-        \"--\".into(),\n-        config.src.join(\"src/llvm-project\"),\n-        config.src.join(\"src/bootstrap/download-ci-llvm-stamp\"),\n-        // the LLVM shared object file is named `LLVM-12-rust-{version}-nightly`\n-        config.src.join(\"src/version\"),\n-    ]);\n-    let llvm_sha = output(&mut rev_list);\n-    let llvm_sha = llvm_sha.trim();\n-\n-    if llvm_sha == \"\" {\n+pub(crate) fn detect_llvm_sha(config: &crate::config::Config, is_git: bool) -> String {\n+    let llvm_sha = if is_git {\n+        let mut rev_list = config.git();\n+        rev_list.args(&[\n+            PathBuf::from(\"rev-list\"),\n+            format!(\"--author={}\", config.stage0_metadata.config.git_merge_commit_email).into(),\n+            \"-n1\".into(),\n+            \"--first-parent\".into(),\n+            \"HEAD\".into(),\n+            \"--\".into(),\n+            config.src.join(\"src/llvm-project\"),\n+            config.src.join(\"src/bootstrap/download-ci-llvm-stamp\"),\n+            // the LLVM shared object file is named `LLVM-12-rust-{version}-nightly`\n+            config.src.join(\"src/version\"),\n+        ]);\n+        output(&mut rev_list).trim().to_owned()\n+    } else if let Some(info) = channel::read_commit_info_file(&config.src) {\n+        info.sha.trim().to_owned()\n+    } else {\n+        \"\".to_owned()\n+    };\n+\n+    if &llvm_sha == \"\" {\n         eprintln!(\"error: could not find commit hash for downloading LLVM\");\n         eprintln!(\"help: maybe your repository history is too shallow?\");\n         eprintln!(\"help: consider disabling `download-ci-llvm`\");\n         eprintln!(\"help: or fetch enough history to include one upstream commit\");\n         panic!();\n     }\n \n-    llvm_sha.to_owned()\n+    llvm_sha\n }\n \n /// Returns whether the CI-found LLVM is currently usable.\n@@ -194,7 +200,9 @@ pub(crate) fn is_ci_llvm_available(config: &crate::config::Config, asserts: bool\n     }\n \n     if crate::util::CiEnv::is_ci() {\n-        let llvm_sha = detect_llvm_sha(config);\n+        // We assume we have access to git, so it's okay to unconditionally pass\n+        // `true` here.\n+        let llvm_sha = detect_llvm_sha(config, true);\n         let head_sha = output(config.git().arg(\"rev-parse\").arg(\"HEAD\"));\n         let head_sha = head_sha.trim();\n         if llvm_sha == head_sha {\n@@ -215,7 +223,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     }\n     let llvm_root = config.ci_llvm_root();\n     let llvm_stamp = llvm_root.join(\".llvm-stamp\");\n-    let llvm_sha = detect_llvm_sha(&config);\n+    let llvm_sha = detect_llvm_sha(&config, builder.rust_info.is_managed_git_subrepository());\n     let key = format!(\"{}{}\", llvm_sha, config.llvm_assertions);\n     if program_out_of_date(&llvm_stamp, &key) && !config.dry_run {\n         download_ci_llvm(builder, &llvm_sha);\n@@ -260,7 +268,7 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     } else {\n         &builder.config.stage0_metadata.config.artifacts_server\n     };\n-    let channel = builder.config.artifact_channel(llvm_sha);\n+    let channel = builder.config.artifact_channel(builder, llvm_sha);\n     let filename = format!(\"rust-dev-{}-{}.tar.xz\", channel, builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {"}, {"sha": "e905517253c0a364fe54b1e03de42d63063f5a44", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -74,7 +74,7 @@ pub fn check(build: &mut Build) {\n     let mut cmd_finder = Finder::new();\n     // If we've got a git directory we're gonna need git to update\n     // submodules and learn about various other aspects.\n-    if build.rust_info.is_git() {\n+    if build.rust_info.is_managed_git_subrepository() {\n         cmd_finder.must_have(\"git\");\n     }\n "}, {"sha": "3b1beacf0f408c25c5184d98a0bf6c9622ec55ab", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb39551ddfb431ee1edb61731a68927a06649f7/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=fdb39551ddfb431ee1edb61731a68927a06649f7", "patch": "@@ -4,6 +4,7 @@ use std::{\n };\n \n use crate::builder::Builder;\n+use crate::channel;\n use crate::util::t;\n \n #[derive(Copy, Clone)]\n@@ -297,8 +298,8 @@ impl<'a> Tarball<'a> {\n     fn run(self, build_cli: impl FnOnce(&Tarball<'a>, &mut Command)) -> GeneratedTarball {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n         self.builder.create(&self.overlay_dir.join(\"version\"), &self.overlay.version(self.builder));\n-        if let Some(sha) = self.builder.rust_sha() {\n-            self.builder.create(&self.overlay_dir.join(\"git-commit-hash\"), &sha);\n+        if let Some(info) = self.builder.rust_info.info() {\n+            channel::write_commit_info_file(&self.overlay_dir, info);\n         }\n         for file in self.overlay.legal_and_readme() {\n             self.builder.install(&self.builder.src.join(file), &self.overlay_dir, 0o644);"}]}