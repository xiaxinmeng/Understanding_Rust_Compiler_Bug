{"sha": "3eadd754730923936ca2ce9c2d303fcac9af099f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYWRkNzU0NzMwOTIzOTM2Y2EyY2U5YzJkMzAzZmNhYzlhZjA5OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T17:02:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T17:02:25Z"}, "message": "Auto merge of #50354 - varkor:initial-field-alignment-c-int, r=eddyb\n\nCorrect initial field alignment for repr(C)/repr(int)\n\nFixes #50098 following https://github.com/rust-lang/rust/issues/50098#issuecomment-385497333.\n\n(I wasn't sure which kind of test was best suited here \u2014 I picked run-pass simply because that was convenient, but if codegen is more appropriate, let me know and I'll change it.)\n\nr? @eddyb", "tree": {"sha": "48c3b7d31589e1a8bdc55c003fcd1237cc171c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c3b7d31589e1a8bdc55c003fcd1237cc171c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eadd754730923936ca2ce9c2d303fcac9af099f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eadd754730923936ca2ce9c2d303fcac9af099f", "html_url": "https://github.com/rust-lang/rust/commit/3eadd754730923936ca2ce9c2d303fcac9af099f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eadd754730923936ca2ce9c2d303fcac9af099f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40a0b3dc17acd585d3e41d08db6d516842cea96", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40a0b3dc17acd585d3e41d08db6d516842cea96", "html_url": "https://github.com/rust-lang/rust/commit/d40a0b3dc17acd585d3e41d08db6d516842cea96"}, {"sha": "2d0d73ea5a004158e07ec6169b517c7ca6cbe3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0d73ea5a004158e07ec6169b517c7ca6cbe3b0", "html_url": "https://github.com/rust-lang/rust/commit/2d0d73ea5a004158e07ec6169b517c7ca6cbe3b0"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "a319b341ebbf06ee2bbc82d07829668c31393ad8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=3eadd754730923936ca2ce9c2d303fcac9af099f", "patch": "@@ -940,11 +940,15 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 // We increase the size of the discriminant to avoid LLVM copying\n                 // padding when it doesn't need to. This normally causes unaligned\n                 // load/stores and excessive memcpy/memset operations. By using a\n-                // bigger integer size, LLVM can be sure about it's contents and\n+                // bigger integer size, LLVM can be sure about its contents and\n                 // won't be so conservative.\n \n                 // Use the initial field alignment\n-                let mut ity = Integer::for_abi_align(dl, start_align).unwrap_or(min_ity);\n+                let mut ity = if def.repr.c() || def.repr.int.is_some() {\n+                    min_ity\n+                } else {\n+                    Integer::for_abi_align(dl, start_align).unwrap_or(min_ity)\n+                };\n \n                 // If the alignment is not larger than the chosen discriminant size,\n                 // don't use the alignment as the final size."}, {"sha": "af4eb6153029051322507a34d44f7c11ad5b8497", "filename": "src/test/run-pass/repr_c_int_align.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs?ref=3eadd754730923936ca2ce9c2d303fcac9af099f", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![allow(dead_code)]\n+\n+#[repr(C, u8)]\n+enum ReprCu8 {\n+    A(u16),\n+    B,\n+}\n+\n+#[repr(u8)]\n+enum Repru8 {\n+    A(u16),\n+    B,\n+}\n+\n+#[repr(C)]\n+struct ReprC {\n+    tag: u8,\n+    padding: u8,\n+    payload: u16,\n+}\n+\n+fn main() {\n+    // Test `repr(C, u8)`.\n+    let r1 = ReprC { tag: 0, padding: 0, payload: 0 };\n+    let r2 = ReprC { tag: 0, padding: 1, payload: 1 };\n+\n+    let t1: &ReprCu8 = unsafe { std::mem::transmute(&r1) };\n+    let t2: &ReprCu8 = unsafe { std::mem::transmute(&r2) };\n+\n+    match (t1, t2) {\n+        (ReprCu8::A(_), ReprCu8::A(_)) => (),\n+        _ => assert!(false)\n+    };\n+\n+    // Test `repr(u8)`.\n+    let t1: &Repru8 = unsafe { std::mem::transmute(&r1) };\n+    let t2: &Repru8 = unsafe { std::mem::transmute(&r2) };\n+\n+    match (t1, t2) {\n+        (Repru8::A(_), Repru8::A(_)) => (),\n+        _ => assert!(false)\n+    };\n+}"}, {"sha": "04bb2ab26f3d1ff8f91b94282e330d87cfaaafd5", "filename": "src/test/ui/print_type_sizes/repr_int_c.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs?ref=3eadd754730923936ca2ce9c2d303fcac9af099f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+// compile-pass\n+\n+// This test makes sure that the tag is not grown for `repr(C)` or `repr(u8)`\n+// variants (see https://github.com/rust-lang/rust/issues/50098 for the original bug).\n+\n+#![feature(start)]\n+#![allow(dead_code)]\n+\n+#[repr(C, u8)]\n+enum ReprCu8 {\n+    A(u16),\n+    B,\n+}\n+\n+#[repr(u8)]\n+enum Repru8 {\n+    A(u16),\n+    B,\n+}\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    0\n+}"}, {"sha": "254b3c7a8531e61c4234575c1e66f1e6fbd5b0e1", "filename": "src/test/ui/print_type_sizes/repr_int_c.stdout", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3eadd754730923936ca2ce9c2d303fcac9af099f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.stdout?ref=3eadd754730923936ca2ce9c2d303fcac9af099f", "patch": "@@ -0,0 +1,12 @@\n+print-type-size type: `ReprCu8`: 4 bytes, alignment: 2 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 3 bytes\n+print-type-size         padding: 1 bytes\n+print-type-size         field `.0`: 2 bytes, alignment: 2 bytes\n+print-type-size     variant `B`: 1 bytes\n+print-type-size type: `Repru8`: 4 bytes, alignment: 2 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 3 bytes\n+print-type-size         padding: 1 bytes\n+print-type-size         field `.0`: 2 bytes, alignment: 2 bytes\n+print-type-size     variant `B`: 0 bytes"}]}