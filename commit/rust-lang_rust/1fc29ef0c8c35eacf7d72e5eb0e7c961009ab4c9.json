{"sha": "1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYzI5ZWYwYzhjMzVlYWNmN2Q3MmU1ZWIwZTdjOTYxMDA5YWI0Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T21:36:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T21:36:40Z"}, "message": "auto merge of #14444 : huonw/rust/nice-for-errors, r=alexcrichton\n\nChange `for` desugaring & make refutable pattern errors more precise\r\n\r\nThis changes for to desugar to the `let`-based pattern match as described in #14390, and adjusts the compiler to use this information for error messages that even mention that it's in a `for` loop.\r\n\r\nAlso, it makes the compiler record the exact positions of refutable parts of a pattern, to point to exactly them in error messages.", "tree": {"sha": "61913cf89bfd68e5ccfe20e8753b461d4afb3063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61913cf89bfd68e5ccfe20e8753b461d4afb3063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "html_url": "https://github.com/rust-lang/rust/commit/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2bb09bbbbae4470fef295d245304fe08e1acab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2bb09bbbbae4470fef295d245304fe08e1acab", "html_url": "https://github.com/rust-lang/rust/commit/1e2bb09bbbbae4470fef295d245304fe08e1acab"}, {"sha": "0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "html_url": "https://github.com/rust-lang/rust/commit/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7"}], "stats": {"total": 168, "additions": 140, "deletions": 28}, "files": [{"sha": "9b751447504efc0ff63960137ba40852857ce29c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -863,9 +863,18 @@ fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<Vec<@Pat> > {\n \n fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) {\n     visit::walk_local(cx, loc, ());\n-    if is_refutable(cx, loc.pat) {\n-        cx.tcx.sess.span_err(loc.pat.span,\n-                             \"refutable pattern in local binding\");\n+\n+    let name = match loc.source {\n+        LocalLet => \"local\",\n+        LocalFor => \"`for` loop\"\n+    };\n+\n+    let mut spans = vec![];\n+    find_refutable(cx, loc.pat, &mut spans);\n+\n+    for span in spans.iter() {\n+        cx.tcx.sess.span_err(*span,\n+                             format!(\"refutable pattern in {} binding\", name).as_slice());\n     }\n \n     // Check legality of move bindings.\n@@ -879,53 +888,65 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span) {\n     visit::walk_fn(cx, kind, decl, body, sp, ());\n     for input in decl.inputs.iter() {\n-        if is_refutable(cx, input.pat) {\n-            cx.tcx.sess.span_err(input.pat.span,\n+        let mut spans = vec![];\n+        find_refutable(cx, input.pat, &mut spans);\n+\n+        for span in spans.iter() {\n+            cx.tcx.sess.span_err(*span,\n                                  \"refutable pattern in function argument\");\n         }\n     }\n }\n \n-fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n+fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n+    macro_rules! this_pattern {\n+        () => {\n+            {\n+                spans.push(pat.span);\n+                return\n+            }\n+        }\n+    }\n     let opt_def = cx.tcx.def_map.borrow().find_copy(&pat.id);\n     match opt_def {\n       Some(DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n-            return true;\n+            this_pattern!()\n         }\n       }\n-      Some(DefStatic(..)) => return true,\n+      Some(DefStatic(..)) => this_pattern!(),\n       _ => ()\n     }\n \n     match pat.node {\n       PatUniq(sub) | PatRegion(sub) | PatIdent(_, _, Some(sub)) => {\n-        is_refutable(cx, sub)\n+        find_refutable(cx, sub, spans)\n       }\n-      PatWild | PatWildMulti | PatIdent(_, _, None) => { false }\n+      PatWild | PatWildMulti | PatIdent(_, _, None) => {}\n       PatLit(lit) => {\n           match lit.node {\n             ExprLit(lit) => {\n                 match lit.node {\n-                    LitNil => false,    // `()`\n-                    _ => true,\n+                    LitNil => {}    // `()`\n+                    _ => this_pattern!(),\n                 }\n             }\n-            _ => true,\n+            _ => this_pattern!(),\n           }\n       }\n-      PatRange(_, _) => { true }\n+      PatRange(_, _) => { this_pattern!() }\n       PatStruct(_, ref fields, _) => {\n-        fields.iter().any(|f| is_refutable(cx, f.pat))\n-      }\n-      PatTup(ref elts) => {\n-        elts.iter().any(|elt| is_refutable(cx, *elt))\n+          for f in fields.iter() {\n+              find_refutable(cx, f.pat, spans);\n+          }\n       }\n-      PatEnum(_, Some(ref args)) => {\n-        args.iter().any(|a| is_refutable(cx, *a))\n+      PatTup(ref elts) | PatEnum(_, Some(ref elts))=> {\n+          for elt in elts.iter() {\n+              find_refutable(cx, *elt, spans)\n+          }\n       }\n-      PatEnum(_,_) => { false }\n-      PatVec(..) => { true }\n+      PatEnum(_,_) => {}\n+      PatVec(..) => { this_pattern!() }\n     }\n }\n "}, {"sha": "69a92a871855c82158f62cf439a190cd71899866", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -417,6 +417,14 @@ pub enum Stmt_ {\n     StmtMac(Mac, bool),\n }\n \n+/// Where a local declaration came from: either a true `let ... =\n+/// ...;`, or one desugared from the pattern of a for loop.\n+#[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n+pub enum LocalSource {\n+    LocalLet,\n+    LocalFor,\n+}\n+\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -427,6 +435,7 @@ pub struct Local {\n     pub init: Option<@Expr>,\n     pub id: NodeId,\n     pub span: Span,\n+    pub source: LocalSource,\n }\n \n pub type Decl = Spanned<Decl_>;"}, {"sha": "bb7b73c5f81f29b53861f49a868ba23e69b367bf", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -439,6 +439,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n+            source: ast::LocalLet,\n         };\n         let decl = respan(sp, ast::DeclLocal(local));\n         @respan(sp, ast::StmtDecl(@decl, ast::DUMMY_NODE_ID))\n@@ -462,6 +463,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n+            source: ast::LocalLet,\n         };\n         let decl = respan(sp, ast::DeclLocal(local));\n         @respan(sp, ast::StmtDecl(@decl, ast::DUMMY_NODE_ID))"}, {"sha": "b8766200ccd00b413a5c33dbf5353b57a6e73272", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -147,11 +147,17 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n             //       ['<ident>:] loop {\n             //         match i.next() {\n             //           None => break,\n-            //           Some(<src_pat>) => <src_loop_block>\n+            //           Some(mut value) => {\n+            //             let <src_pat> = value;\n+            //             <src_loop_block>\n+            //           }\n             //         }\n             //       }\n             //     }\n             //   }\n+            //\n+            // (The use of the `let` is to give better error messages\n+            // when the pattern is refutable.)\n \n             let local_ident = token::gensym_ident(\"__i\"); // FIXME #13573\n             let next_ident = fld.cx.ident_of(\"next\");\n@@ -167,11 +173,33 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                 fld.cx.arm(span, vec!(none_pat), break_expr)\n             };\n \n-            // `Some(<src_pat>) => <src_loop_block>`\n+            // let <src_pat> = value;\n+            let value_ident = token::gensym_ident(\"__value\");\n+            // this is careful to use src_pat.span so that error\n+            // messages point exact at that.\n+            let local = @ast::Local {\n+                ty: fld.cx.ty_infer(src_pat.span),\n+                pat: src_pat,\n+                init: Some(fld.cx.expr_ident(src_pat.span, value_ident)),\n+                id: ast::DUMMY_NODE_ID,\n+                span: src_pat.span,\n+                source: ast::LocalFor\n+            };\n+            let local = codemap::respan(src_pat.span, ast::DeclLocal(local));\n+            let local = @codemap::respan(span, ast::StmtDecl(@local, ast::DUMMY_NODE_ID));\n+\n+            // { let ...; <src_loop_block> }\n+            let block = fld.cx.block(span, vec![local],\n+                                     Some(fld.cx.expr_block(src_loop_block)));\n+\n+            // `Some(mut value) => { ... }`\n+            // Note the _'s in the name will stop any unused mutability warnings.\n+            let value_pat = fld.cx.pat_ident_binding_mode(span, value_ident,\n+                                                          ast::BindByValue(ast::MutMutable));\n             let some_arm =\n                 fld.cx.arm(span,\n-                           vec!(fld.cx.pat_enum(span, some_path, vec!(src_pat))),\n-                           fld.cx.expr_block(src_loop_block));\n+                           vec!(fld.cx.pat_enum(span, some_path, vec!(value_pat))),\n+                           fld.cx.expr_block(block));\n \n             // `match i.next() { ... }`\n             let match_expr = {\n@@ -669,7 +697,8 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                         pat: pat,\n                         init: init,\n                         id: id,\n-                        span: span\n+                        span: span,\n+                        source: source,\n                     } = **local;\n                     // expand the pat (it might contain exprs... #:(o)>\n                     let expanded_pat = fld.fold_pat(pat);\n@@ -703,6 +732,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                             init: new_init_opt,\n                             id: id,\n                             span: span,\n+                            source: source\n                         };\n                     SmallVector::one(@Spanned {\n                         node: StmtDecl(@Spanned {"}, {"sha": "6a9f26ae83d6812494b745d8da537ac4ff85e799", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -288,6 +288,7 @@ pub trait Folder {\n             pat: self.fold_pat(l.pat),\n             init: l.init.map(|e| self.fold_expr(e)),\n             span: self.new_span(l.span),\n+            source: l.source,\n         }\n     }\n "}, {"sha": "65687ce4d94473ba512841f469fd5e556c164bf3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -34,7 +34,7 @@ use ast::{Ident, NormalFn, Inherited, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, Lit, Lit_};\n use ast::{LitBool, LitFloat, LitFloatUnsuffixed, LitInt, LitChar};\n-use ast::{LitIntUnsuffixed, LitNil, LitStr, LitUint, Local};\n+use ast::{LitIntUnsuffixed, LitNil, LitStr, LitUint, Local, LocalLet};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal};\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{NamedField, UnNeg, NoReturn, UnNot, P, Pat, PatEnum};\n@@ -3034,6 +3034,7 @@ impl<'a> Parser<'a> {\n             init: init,\n             id: ast::DUMMY_NODE_ID,\n             span: mk_sp(lo, self.last_span.hi),\n+            source: LocalLet,\n         }\n     }\n "}, {"sha": "8b00b6149099367c839e4c246af80d281e307dde", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn main() {\n+    for\n+        &1 //~ ERROR refutable pattern in `for` loop binding\n+        in [1].iter() {}\n+}"}, {"sha": "efa2dbad83fdaa9f65c747fc3f61ad2fea730443", "filename": "src/test/compile-fail/precise-refutable-pattern-errors.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs?ref=1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn func(\n+    (\n+        1, //~ ERROR refutable pattern in function argument\n+        (\n+            Some( //~ ERROR refutable pattern in function argument\n+                1), // nested, so no warning.\n+            2..3 //~ ERROR refutable pattern in function argument\n+            )\n+        ): (int, (Option<int>, int))\n+        ) {}\n+\n+fn main() {\n+    let (\n+        1, //~ ERROR refutable pattern in local binding\n+        (\n+            Some( //~ ERROR refutable pattern in local binding\n+                1), // nested, so no warning.\n+            2..3 //~ ERROR refutable pattern in local binding\n+            )\n+        ) = (1, (None, 2));\n+}"}]}