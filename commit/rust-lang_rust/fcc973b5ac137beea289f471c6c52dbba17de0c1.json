{"sha": "fcc973b5ac137beea289f471c6c52dbba17de0c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzk3M2I1YWMxMzdiZWVhMjg5ZjQ3MWM2YzUyZGJiYTE3ZGUwYzE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-03-28T15:34:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:49Z"}, "message": "massaging out struct-size differences between unix and win32", "tree": {"sha": "c266e53a9f205b28d1215f9704422fc88ff77c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c266e53a9f205b28d1215f9704422fc88ff77c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc973b5ac137beea289f471c6c52dbba17de0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc973b5ac137beea289f471c6c52dbba17de0c1", "html_url": "https://github.com/rust-lang/rust/commit/fcc973b5ac137beea289f471c6c52dbba17de0c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc973b5ac137beea289f471c6c52dbba17de0c1/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f920d3880841eb67bb71192866090819af9bd6ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f920d3880841eb67bb71192866090819af9bd6ff", "html_url": "https://github.com/rust-lang/rust/commit/f920d3880841eb67bb71192866090819af9bd6ff"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "69168cc5c600dd7bc0162c7309ef10482291f681", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fcc973b5ac137beea289f471c6c52dbba17de0c1/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc973b5ac137beea289f471c6c52dbba17de0c1/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=fcc973b5ac137beea289f471c6c52dbba17de0c1", "patch": "@@ -108,7 +108,6 @@ type uv_stream_t = {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type uv_tcp_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -120,10 +119,21 @@ type uv_tcp_t = {\n     a24: *u8, a25: *u8, a26: *u8, a27: *u8,\n     a28: *u8, a29: *u8\n };\n+// win32 size: 240 (120)\n+#[cfg(target_os = \"win32\")]\n+type uv_tcp_t = {\n+    fields: uv_handle_fields,\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n+    a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n+    a12: *u8, a13: *u8, a14: *u8, a15: *u8,\n+    a16: *u8, a17: *u8, a18: *u8, a19: *u8,\n+    a20: *u8, a21: *u8, a22: *u8, a23: *u8,\n+    a24: *u8, a25: *u8\n+};\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n     ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                     close_cb: ptr::null(),\n@@ -138,35 +148,51 @@ fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         a28: 0 as *u8, a29: 0 as *u8\n     };\n }\n-\n-/*\n-#[cfg(target_os = \"win32\")]\n-type uv_tcp_t = {\n-    loop_handle: *libc::c_void\n-};\n #[cfg(target_os = \"win32\")]\n fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n-    ret { loop_handle: ptr::null() };\n+    ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                    close_cb: ptr::null(),\n+                    mut data: ptr::null() },\n+        a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n+        a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8, a07: 0 as *u8,\n+        a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8, a11: 0 as *u8,\n+        a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8, a15: 0 as *u8,\n+        a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8, a19: 0 as *u8,\n+        a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8, a23: 0 as *u8,\n+        a24: 0 as *u8, a25: 0 as *u8\n+    };\n }\n-*/\n \n // unix size: 48\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type uv_connect_t = {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8\n };\n+// win32 size: 88 (44)\n+#[cfg(target_os = \"win32\")]\n+type uv_connect_t = {\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n+    a08: *u8, a09: *u8, a10: *u8\n+};\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n fn gen_stub_uv_connect_t() -> uv_connect_t {\n     ret {\n         a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n-        a04: 0 as *u8, a05: 0 as *u8\n+        a01: 0 as *u8, a05: 0 as *u8\n+    };\n+}\n+#[cfg(target_os = \"win32\")]\n+fn gen_stub_uv_connect_t() -> uv_connect_t {\n+    ret { \n+        a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n+        a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8, a07: 0 as *u8,\n+        a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8\n     };\n }\n \n@@ -187,18 +213,25 @@ type uv_buf_t = {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type uv_write_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n     a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n     a12: *u8, a13: *u8\n };\n+// win32 size: 136 (68)\n+#[cfg(target_os = \"win32\")]\n+type uv_write_t = {\n+    fields: uv_handle_fields,\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n+    a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n+    a12: *u8\n+};\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n fn gen_stub_uv_write_t() -> uv_write_t {\n     ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                     close_cb: ptr::null(),\n@@ -209,6 +242,17 @@ fn gen_stub_uv_write_t() -> uv_write_t {\n         a12: 0 as *u8, a13: 0 as *u8\n     };\n }\n+#[cfg(target_os = \"win32\")]\n+fn gen_stub_uv_write_t() -> uv_write_t {\n+    ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                    close_cb: ptr::null(),\n+                    mut data: ptr::null() },\n+        a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n+        a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8, a07: 0 as *u8,\n+        a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8, a11: 0 as *u8,\n+        a12: 0 as *u8\n+    };\n+}\n \n // unix size: 16\n #[cfg(target_os = \"linux\")]\n@@ -260,10 +304,6 @@ native mod rustrt {\n         timeout: libc::c_uint,\n         repeat: libc::c_uint);\n     fn rust_uv_timer_stop(handle: *libc::c_void);\n-\n-    ////////////\n-    // NOT IN rustrt.def.in\n-    ////////////\n     fn rust_uv_free(ptr: *libc::c_void);\n     fn rust_uv_tcp_init(\n         loop_handle: *libc::c_void,"}]}