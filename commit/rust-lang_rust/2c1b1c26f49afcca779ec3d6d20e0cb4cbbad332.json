{"sha": "2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWIxYzI2ZjQ5YWZjY2E3NzllYzNkNmQyMGUwY2I0Y2JiYWQzMzI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-15T13:44:39Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-15T14:14:22Z"}, "message": "Factor out", "tree": {"sha": "c3506358212f36f582343c2a60fabef1281b3dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3506358212f36f582343c2a60fabef1281b3dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "html_url": "https://github.com/rust-lang/rust/commit/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9daa823896402cde563a53934e821609783af835", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daa823896402cde563a53934e821609783af835", "html_url": "https://github.com/rust-lang/rust/commit/9daa823896402cde563a53934e821609783af835"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "0abbfc540e63ce285837d1481f02b87d86d63143", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "patch": "@@ -138,13 +138,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 panic!(\"you should have called add_variants_to_switch instead!\");\n             }\n             PatternKind::Range { ty, lo, hi, end } => {\n-                indices\n-                    .keys()\n-                    .all(|value| {\n-                        !self\n-                            .const_range_contains(ty, lo, hi, end, value)\n-                            .unwrap_or(true)\n-                    })\n+                // Check that none of the switch values are in the range.\n+                self.values_not_contained_in_range(ty, lo, hi, end, indices)\n+                    .unwrap_or(false)\n             }\n             PatternKind::Slice { .. } |\n             PatternKind::Array { .. } |\n@@ -541,16 +537,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             (&TestKind::SwitchInt { switch_ty: _, ref options, ref indices },\n              &PatternKind::Range { ty, lo, hi, end }) => {\n-                let not_contained = indices\n-                    .keys()\n-                    .all(|value| {\n-                        !self\n-                            .const_range_contains(ty, lo, hi, end, value)\n-                            .unwrap_or(true)\n-                    });\n+                let not_contained = self\n+                    .values_not_contained_in_range(ty, lo, hi, end, indices)\n+                    .unwrap_or(false);\n \n                 if not_contained {\n-                    // No values are contained in the pattern range,\n+                    // No switch values are contained in the pattern range,\n                     // so the pattern can be matched only if this test fails.\n                     let otherwise = options.len();\n                     resulting_candidates[otherwise].push(candidate.clone());\n@@ -835,6 +827,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             _ => Some(false),\n         }\n     }\n+\n+    fn values_not_contained_in_range(\n+        &self,\n+        ty: Ty<'tcx>,\n+        lo: &'tcx ty::Const<'tcx>,\n+        hi: &'tcx ty::Const<'tcx>,\n+        end: RangeEnd,\n+        indices: &FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+    ) -> Option<bool> {\n+        for val in indices.keys() {\n+            if self.const_range_contains(ty, lo, hi, end, val)? {\n+                return Some(false);\n+            }\n+        }\n+\n+        Some(true)\n+    }\n }\n \n fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool {"}]}