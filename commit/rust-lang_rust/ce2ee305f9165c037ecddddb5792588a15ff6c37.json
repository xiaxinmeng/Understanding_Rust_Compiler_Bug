{"sha": "ce2ee305f9165c037ecddddb5792588a15ff6c37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMmVlMzA1ZjkxNjVjMDM3ZWNkZGRkYjU3OTI1ODhhMTVmZjZjMzc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:19:34Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:46:15Z"}, "message": "Fixed nits raised in review.", "tree": {"sha": "fcdb33e80e1c1d283d83c5226ddfc8f67f0084fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcdb33e80e1c1d283d83c5226ddfc8f67f0084fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce2ee305f9165c037ecddddb5792588a15ff6c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2ee305f9165c037ecddddb5792588a15ff6c37", "html_url": "https://github.com/rust-lang/rust/commit/ce2ee305f9165c037ecddddb5792588a15ff6c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce2ee305f9165c037ecddddb5792588a15ff6c37/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce75a23c0d56764cef7c633139f01b80f040cd25", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce75a23c0d56764cef7c633139f01b80f040cd25", "html_url": "https://github.com/rust-lang/rust/commit/ce75a23c0d56764cef7c633139f01b80f040cd25"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "fd7a83427efe8caecbd7dc72a4a2d8f9281ec5fb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -2143,7 +2143,7 @@ pub enum UseKind {\n     ListStem,\n }\n \n-/// `TraitRef` are references to traits in impls.\n+/// References to traits in impls.\n ///\n /// `resolve` maps each `TraitRef`'s `ref_id` to its defining trait; that's all\n /// that the `ref_id` is for. Note that `ref_id`'s value is not the `NodeId` of the"}, {"sha": "e1ad5aeea19fcb189ec636562a1eef7d1c3a3019", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -141,9 +141,9 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n     }\n \n     fn recursive_type_bound(&self, ty: Ty<'tcx>) -> VerifyBound<'tcx> {\n-        let mut bounds: Vec<_> = ty.walk_shallow()\n+        let mut bounds = ty.walk_shallow()\n             .map(|subty| self.type_bound(subty))\n-            .collect();\n+            .collect::<Vec<_>>();\n \n         let mut regions = smallvec![];\n         ty.push_regions(&mut regions);"}, {"sha": "8825c94cdb81cb27c3abaef0002ffb80caaccc1c", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -248,20 +248,20 @@ rustc_queries! {\n             desc { \"computing the variances for items in this crate\" }\n         }\n \n-        /// Maps from def-ID of a type or region parameter to its (inferred) variance.\n+        /// Maps from the `DefId` of a type or region parameter to its (inferred) variance.\n         query variances_of(_: DefId) -> &'tcx [ty::Variance] {}\n     }\n \n     TypeChecking {\n-        /// Maps from def-ID of a type to its (inferred) outlives.\n+        /// Maps from thee `DefId` of a type to its (inferred) outlives.\n         query inferred_outlives_crate(_: CrateNum)\n             -> Lrc<ty::CratePredicatesMap<'tcx>> {\n             desc { \"computing the inferred outlives predicates for items in this crate\" }\n         }\n     }\n \n     Other {\n-        /// Maps from an impl/trait def-ID to a list of the def-ids of its items.\n+        /// Maps from an impl/trait `DefId to a list of the `DefId`s of its items.\n         query associated_item_def_ids(_: DefId) -> Lrc<Vec<DefId>> {}\n \n         /// Maps from a trait item to the trait item \"descriptor\".\n@@ -274,7 +274,7 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        /// Maps a def-ID of a type to a list of its inherent impls.\n+        /// Maps a `DefId` of a type to a list of its inherent impls.\n         /// Contains implementations of methods that are inherent to a type.\n         /// Methods in these implementations don't need to be exported.\n         query inherent_impls(_: DefId) -> Lrc<Vec<DefId>> {"}, {"sha": "1fdfcc84926f659f4ed1cd76702b51594a4f456f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -1216,7 +1216,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let hir_id = self.tcx.hir().node_to_hir_id(id);\n         let access = access_from!(self.save_ctxt, root_item, hir_id);\n \n-        // The parent def-ID of a given use tree is always the enclosing item.\n+        // The parent `DefId` of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n             .and_then(|id| self.save_ctxt.tcx.parent(id))\n             .map(id_from_def_id);"}, {"sha": "4110a55840196e950e694b40e9f07b2bba74231b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -702,7 +702,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n-    /// bound to a valid trait type. Returns the def-ID for the defining trait.\n+    /// bound to a valid trait type. Returns the `DefId` of the defining trait.\n     /// The type _cannot_ be a type other than a trait type.\n     ///\n     /// If the `projections` argument is `None`, then assoc type bindings like `Foo<T = X>`\n@@ -994,7 +994,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         // Expand trait aliases recursively and check that only one regular (non-auto) trait\n         // is used and no 'maybe' bounds are used.\n-        let expanded_traits = traits::expand_trait_aliases(tcx, bound_trait_refs.clone());\n+        let expanded_traits = traits::expand_trait_aliases(tcx, bound_trait_refs.iter().cloned());\n         let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n             expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n         if regular_traits.len() > 1 {\n@@ -1240,7 +1240,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n-    // given by `assoc_name`. `ty_param_def_id` is the `DefId` for the type parameter\n+    // given by `assoc_name`. `ty_param_def_id` is the `DefId` of the type parameter\n     // This function will fail if there are no suitable bounds or there is\n     // any ambiguity.\n     fn find_bound_for_assoc_item(&self,"}, {"sha": "7adf86a99bd438765fbbeb46aa455668071cac8e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ee305f9165c037ecddddb5792588a15ff6c37/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ce2ee305f9165c037ecddddb5792588a15ff6c37", "patch": "@@ -713,9 +713,9 @@ fn super_predicates_of<'a, 'tcx>(\n \n     let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n-    // Convert any explicit superbounds in the wheree-clause,\n+    // Convert any explicit superbounds in the where-clause,\n     // e.g., `trait Foo where Self: Bar`.\n-    // In the case of trait aliases, however, we include all bounds in the where clause,\n+    // In the case of trait aliases, however, we include all bounds in the where-clause,\n     // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n     // as one of its \"superpredicates\".\n     let is_trait_alias = tcx.is_trait_alias(trait_def_id);"}]}