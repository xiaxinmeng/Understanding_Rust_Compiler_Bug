{"sha": "af0d548b663da03c9e545ec24a08078532b756d6", "node_id": "C_kwDOAAsO6NoAKGFmMGQ1NDhiNjYzZGEwM2M5ZTU0NWVjMjRhMDgwNzg1MzJiNzU2ZDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-29T10:17:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-30T16:59:03Z"}, "message": "Fix proc-macro server spawning behavior when the server is r-a itself", "tree": {"sha": "97cecc6d28e6925da9f7c8b4531754b08fd38366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97cecc6d28e6925da9f7c8b4531754b08fd38366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0d548b663da03c9e545ec24a08078532b756d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0d548b663da03c9e545ec24a08078532b756d6", "html_url": "https://github.com/rust-lang/rust/commit/af0d548b663da03c9e545ec24a08078532b756d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0d548b663da03c9e545ec24a08078532b756d6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0522503f1445f05b6734085205364f6b1a4365cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0522503f1445f05b6734085205364f6b1a4365cf", "html_url": "https://github.com/rust-lang/rust/commit/0522503f1445f05b6734085205364f6b1a4365cf"}], "stats": {"total": 80, "additions": 51, "deletions": 29}, "files": [{"sha": "8b094f32023d35affb7966a986c60fc3c37506a9", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af0d548b663da03c9e545ec24a08078532b756d6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0d548b663da03c9e545ec24a08078532b756d6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=af0d548b663da03c9e545ec24a08078532b756d6", "patch": "@@ -376,18 +376,23 @@ impl GlobalState {\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n-                        let (path, args): (_, &[_]) = if path_manually_set {\n+                        let path = if path_manually_set {\n                             tracing::debug!(\n                                 \"Pro-macro server path explicitly set: {}\",\n                                 path.display()\n                             );\n-                            (path.clone(), &[])\n+                            path.clone()\n                         } else {\n                             match ws.find_sysroot_proc_macro_srv() {\n-                                Some(server_path) => (server_path, &[]),\n-                                None => (path.clone(), &[\"proc-macro\"]),\n+                                Some(server_path) => server_path,\n+                                None => path.clone(),\n                             }\n                         };\n+                        let args: &[_] = if path.file_stem() == Some(\"rust-analyzer\".as_ref()) {\n+                            &[\"proc-macro\"]\n+                        } else {\n+                            &[]\n+                        };\n \n                         tracing::info!(?args, \"Using proc-macro server at {}\", path.display(),);\n                         ProcMacroServer::spawn(path.clone(), args).map_err(|err| {"}, {"sha": "c46d7c432a2dcf0cb6c87f3ae749729598390966", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/af0d548b663da03c9e545ec24a08078532b756d6/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0d548b663da03c9e545ec24a08078532b756d6/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=af0d548b663da03c9e545ec24a08078532b756d6", "patch": "@@ -59,7 +59,10 @@ use std::collections::Spam;\n \"#,\n     )\n     .with_config(serde_json::json!({\n-        \"cargo\": { \"sysroot\": \"discover\" }\n+        \"cargo\": { \"sysroot\": \"discover\" },\n+        \"procMacro\": {\n+            \"enable\": false,\n+        }\n     }))\n     .server()\n     .wait_until_workspace_is_loaded();\n@@ -508,7 +511,7 @@ fn main() {}\n #[test]\n fn test_missing_module_code_action_in_json_project() {\n     if skip_slow_tests() {\n-        // return;\n+        return;\n     }\n \n     let tmp_dir = TestDir::new();\n@@ -612,7 +615,10 @@ fn main() {{}}\n \"#\n     ))\n     .with_config(serde_json::json!({\n-        \"cargo\": { \"sysroot\": \"discover\" }\n+        \"cargo\": { \"sysroot\": \"discover\" },\n+        \"procMacro\": {\n+            \"enable\": false,\n+        }\n     }))\n     .server()\n     .wait_until_workspace_is_loaded();\n@@ -685,7 +691,7 @@ version = \\\"0.0.0\\\"\n #[test]\n fn out_dirs_check() {\n     if skip_slow_tests() {\n-        // return;\n+        return;\n     }\n \n     let server = Project::with_fixture(\n@@ -711,10 +717,20 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n }\n //- /src/main.rs\n-#[rustc_builtin_macro] macro_rules! include {}\n-#[rustc_builtin_macro] macro_rules! include_str {}\n-#[rustc_builtin_macro] macro_rules! concat {}\n-#[rustc_builtin_macro] macro_rules! env {}\n+#![feature(rustc_attrs)]\n+#[rustc_builtin_macro] macro_rules! include {\n+    ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n+}\n+#[rustc_builtin_macro] macro_rules! include_str {\n+    ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n+}\n+#[rustc_builtin_macro] macro_rules! concat {\n+    ($($e:ident),+ $(,)?) => {{ /* compiler built-in */ }};\n+}\n+#[rustc_builtin_macro] macro_rules! env {\n+    ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n+    ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n+}\n \n include!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n \n@@ -749,7 +765,7 @@ fn main() {\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n-            Position::new(19, 10),\n+            Position::new(29, 10),\n         ),\n         work_done_progress_params: Default::default(),\n     });\n@@ -758,7 +774,7 @@ fn main() {\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n-            Position::new(20, 10),\n+            Position::new(30, 10),\n         ),\n         work_done_progress_params: Default::default(),\n     });\n@@ -768,23 +784,23 @@ fn main() {\n         GotoDefinitionParams {\n             text_document_position_params: TextDocumentPositionParams::new(\n                 server.doc_id(\"src/main.rs\"),\n-                Position::new(17, 9),\n+                Position::new(27, 9),\n             ),\n             work_done_progress_params: Default::default(),\n             partial_result_params: Default::default(),\n         },\n         json!([{\n             \"originSelectionRange\": {\n-                \"end\": { \"character\": 10, \"line\": 17 },\n-                \"start\": { \"character\": 8, \"line\": 17 }\n+                \"end\": { \"character\": 10, \"line\": 27 },\n+                \"start\": { \"character\": 8, \"line\": 27 }\n             },\n             \"targetRange\": {\n-                \"end\": { \"character\": 9, \"line\": 8 },\n-                \"start\": { \"character\": 0, \"line\": 7 }\n+                \"end\": { \"character\": 9, \"line\": 18 },\n+                \"start\": { \"character\": 0, \"line\": 17 }\n             },\n             \"targetSelectionRange\": {\n-                \"end\": { \"character\": 8, \"line\": 8 },\n-                \"start\": { \"character\": 7, \"line\": 8 }\n+                \"end\": { \"character\": 8, \"line\": 18 },\n+                \"start\": { \"character\": 7, \"line\": 18 }\n             },\n             \"targetUri\": \"file:///[..]src/main.rs\"\n         }]),\n@@ -794,23 +810,23 @@ fn main() {\n         GotoDefinitionParams {\n             text_document_position_params: TextDocumentPositionParams::new(\n                 server.doc_id(\"src/main.rs\"),\n-                Position::new(18, 9),\n+                Position::new(28, 9),\n             ),\n             work_done_progress_params: Default::default(),\n             partial_result_params: Default::default(),\n         },\n         json!([{\n             \"originSelectionRange\": {\n-                \"end\": { \"character\": 10, \"line\": 18 },\n-                \"start\": { \"character\": 8, \"line\": 18 }\n+                \"end\": { \"character\": 10, \"line\": 28 },\n+                \"start\": { \"character\": 8, \"line\": 28 }\n             },\n             \"targetRange\": {\n-                \"end\": { \"character\": 9, \"line\": 12 },\n-                \"start\": { \"character\": 0, \"line\":11 }\n+                \"end\": { \"character\": 9, \"line\": 22 },\n+                \"start\": { \"character\": 0, \"line\": 21 }\n             },\n             \"targetSelectionRange\": {\n-                \"end\": { \"character\": 8, \"line\": 12 },\n-                \"start\": { \"character\": 7, \"line\": 12 }\n+                \"end\": { \"character\": 8, \"line\": 22 },\n+                \"start\": { \"character\": 7, \"line\": 22 }\n             },\n             \"targetUri\": \"file:///[..]src/main.rs\"\n         }]),\n@@ -836,6 +852,7 @@ edition = \"2021\"\n bar = {path = \"../bar\"}\n \n //- /foo/src/main.rs\n+#![feature(rustc_attrs, decl_macro)]\n use bar::Bar;\n \n #[rustc_builtin_macro]\n@@ -912,7 +929,7 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"foo/src/main.rs\"),\n-            Position::new(10, 9),\n+            Position::new(11, 9),\n         ),\n         work_done_progress_params: Default::default(),\n     });"}]}