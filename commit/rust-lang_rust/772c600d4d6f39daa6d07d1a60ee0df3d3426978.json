{"sha": "772c600d4d6f39daa6d07d1a60ee0df3d3426978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MmM2MDBkNGQ2ZjM5ZGFhNmQwN2QxYTYwZWUwZGYzZDM0MjY5Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-06T01:58:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-06T01:58:24Z"}, "message": "Auto merge of #32688 - jseyfried:ast_groundwork_for_1422, r=pnkfelix\n\n[breaking-batch] Add support for `pub(restricted)` syntax in the AST\n\nThis PR allows the AST to represent the `pub(restricted)` syntax from RFC 1422 (cc #32409).\n\nMore specifically, it makes `ast::Visibility` non-`Copy` and adds two new variants, `Visibility::Crate` for `pub(crate)` and `Visitibility::Restricted { path: P<Path>, id: NodeId }` for `pub(path)`.\n\nplugin-[breaking-change] cc #31645\nr? @pnkfelix", "tree": {"sha": "49c3b1f52a11f6b3fa9ac7f807c684548de3035c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c3b1f52a11f6b3fa9ac7f807c684548de3035c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/772c600d4d6f39daa6d07d1a60ee0df3d3426978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/772c600d4d6f39daa6d07d1a60ee0df3d3426978", "html_url": "https://github.com/rust-lang/rust/commit/772c600d4d6f39daa6d07d1a60ee0df3d3426978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/772c600d4d6f39daa6d07d1a60ee0df3d3426978/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "241a9d0ddf99fd40d273c615e9b1e8ce6052d94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/241a9d0ddf99fd40d273c615e9b1e8ce6052d94a", "html_url": "https://github.com/rust-lang/rust/commit/241a9d0ddf99fd40d273c615e9b1e8ce6052d94a"}, {"sha": "432eb8a094322a3aa2e40c439f9b50c0d7947d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/432eb8a094322a3aa2e40c439f9b50c0d7947d61", "html_url": "https://github.com/rust-lang/rust/commit/432eb8a094322a3aa2e40c439f9b50c0d7947d61"}], "stats": {"total": 161, "additions": 92, "deletions": 69}, "files": [{"sha": "66b9e217bd387d448103c5c0e2d3103335fec2b1", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -761,7 +761,7 @@ pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         defaultness: lower_defaultness(lctx, i.defaultness),\n         node: match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n@@ -839,7 +839,7 @@ pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item {\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n         node: node,\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         span: i.span,\n     }\n }\n@@ -857,7 +857,7 @@ pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::Forei\n                 hir::ForeignItemStatic(lower_ty(lctx, t), m)\n             }\n         },\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         span: i.span,\n     }\n }\n@@ -1706,10 +1706,11 @@ pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::Captu\n     }\n }\n \n-pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibility {\n-    match v {\n+pub fn lower_visibility(lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n+    match *v {\n         Visibility::Public => hir::Public,\n         Visibility::Inherited => hir::Inherited,\n+        _ => panic!(lctx.diagnostic().fatal(\"pub(restricted) is not implemented yet!\"))\n     }\n }\n "}, {"sha": "a441f2990cd1a23d36e2bfad46982ac7491a9266", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -1868,21 +1868,14 @@ pub struct PolyTraitRef {\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n+    Crate,\n+    Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }\n \n-impl Visibility {\n-    pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n-        match *self {\n-            Visibility::Inherited => parent_visibility,\n-            Visibility::Public => *self\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField_ {\n     pub kind: StructFieldKind,\n@@ -1902,7 +1895,7 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n@@ -1917,9 +1910,9 @@ impl StructFieldKind {\n         }\n     }\n \n-    pub fn visibility(&self) -> Visibility {\n+    pub fn visibility(&self) -> &Visibility {\n         match *self {\n-            NamedField(_, vis) | UnnamedField(vis) => vis\n+            NamedField(_, ref vis) | UnnamedField(ref vis) => vis\n         }\n     }\n }"}, {"sha": "852b153044fea95e4649b22d101062cc0d653007", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n             FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, ref sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n             FnKind::Closure => {}"}, {"sha": "46bcb8067a3b004faf65b7f7db2c9699adcea462", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -288,6 +288,10 @@ pub trait Folder : Sized {\n         noop_fold_where_predicate(where_predicate, self)\n     }\n \n+    fn fold_vis(&mut self, vis: Visibility) -> Visibility {\n+        noop_fold_vis(vis, self)\n+    }\n+\n     fn new_id(&mut self, i: NodeId) -> NodeId {\n         i\n     }\n@@ -992,7 +996,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n-        vis: i.vis,\n+        vis: folder.fold_vis(i.vis),\n         defaultness: i.defaultness,\n         node: match i.node  {\n             ast::ImplItemKind::Const(ty, expr) => {\n@@ -1082,7 +1086,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n         ident: folder.fold_ident(ident),\n         attrs: fold_attrs(attrs, folder),\n         node: node,\n-        vis: vis,\n+        vis: folder.fold_vis(vis),\n         span: folder.new_span(span)\n     }\n }\n@@ -1100,7 +1104,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n                 ForeignItemKind::Static(folder.fold_ty(t), m)\n             }\n         },\n-        vis: ni.vis,\n+        vis: folder.fold_vis(ni.vis),\n         span: folder.new_span(ni.span)\n     }\n }\n@@ -1391,6 +1395,16 @@ pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)\n     }\n }\n \n+pub fn noop_fold_vis<T: Folder>(vis: Visibility, folder: &mut T) -> Visibility {\n+    match vis {\n+        Visibility::Restricted { path, id } => Visibility::Restricted {\n+            path: path.map(|path| folder.fold_path(path)),\n+            id: folder.new_id(id)\n+        },\n+        _ => vis,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::io;"}, {"sha": "89a504e1ebd60e8a9c518395523567cfdb0f530e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -3842,7 +3842,7 @@ impl<'a> Parser<'a> {\n                          attrs: Vec<Attribute> ) -> PResult<'a, StructField> {\n         let lo = match pr {\n             Visibility::Inherited => self.span.lo,\n-            Visibility::Public => self.last_span.lo,\n+            _ => self.last_span.lo,\n         };\n         let name = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n@@ -4952,7 +4952,7 @@ impl<'a> Parser<'a> {\n             self.commit_expr_expecting(&expr, token::Semi)?;\n             (name, ast::ImplItemKind::Const(typ, expr))\n         } else {\n-            let (name, inner_attrs, node) = self.parse_impl_method(vis)?;\n+            let (name, inner_attrs, node) = self.parse_impl_method(&vis)?;\n             attrs.extend(inner_attrs);\n             (name, node)\n         };\n@@ -4968,9 +4968,10 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n-        match visa {\n-            Visibility::Public => {\n+    fn complain_if_pub_macro(&mut self, visa: &Visibility, span: Span) {\n+        match *visa {\n+            Visibility::Inherited => (),\n+            _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n                     _ => false,\n@@ -4988,12 +4989,11 @@ impl<'a> Parser<'a> {\n                                      .emit();\n                 }\n             }\n-            Visibility::Inherited => (),\n         }\n     }\n \n     /// Parse a method or a macro invocation in a trait impl.\n-    fn parse_impl_method(&mut self, vis: Visibility)\n+    fn parse_impl_method(&mut self, vis: &Visibility)\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if !self.token.is_any_keyword()\n@@ -5003,7 +5003,7 @@ impl<'a> Parser<'a> {\n             // method macro.\n \n             let last_span = self.last_span;\n-            self.complain_if_pub_macro(vis, last_span);\n+            self.complain_if_pub_macro(&vis, last_span);\n \n             let lo = self.span.lo;\n             let pth = self.parse_path(NoTypesAllowed)?;\n@@ -6045,7 +6045,7 @@ impl<'a> Parser<'a> {\n             // MACRO INVOCATION ITEM\n \n             let last_span = self.last_span;\n-            self.complain_if_pub_macro(visibility, last_span);\n+            self.complain_if_pub_macro(&visibility, last_span);\n \n             let mac_lo = self.span.lo;\n \n@@ -6096,7 +6096,7 @@ impl<'a> Parser<'a> {\n         // FAILURE TO PARSE ITEM\n         match visibility {\n             Visibility::Inherited => {}\n-            Visibility::Public => {\n+            _ => {\n                 let last_span = self.last_span;\n                 return Err(self.span_fatal(last_span, \"unmatched visibility `pub`\"));\n             }"}, {"sha": "a8f28ed3d9e0d7764e120462d952a8e8e2dafaf5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -388,7 +388,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n     to_string(|s| {\n         s.head(\"\")?;\n         s.print_fn(decl, unsafety, constness, Abi::Rust, Some(name),\n-                   generics, opt_explicit_self, ast::Visibility::Inherited)?;\n+                   generics, opt_explicit_self, &ast::Visibility::Inherited)?;\n         s.end()?; // Close the head box\n         s.end() // Close the outer box\n     })\n@@ -432,9 +432,11 @@ pub fn mac_to_string(arg: &ast::Mac) -> String {\n     to_string(|s| s.print_mac(arg, ::parse::token::Paren))\n }\n \n-pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n-    match vis {\n+pub fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n+    match *vis {\n         ast::Visibility::Public => format!(\"pub {}\", s),\n+        ast::Visibility::Crate => format!(\"pub(crate) {}\", s),\n+        ast::Visibility::Restricted { ref path, .. } => format!(\"pub({}) {}\", path, s),\n         ast::Visibility::Inherited => s.to_string()\n     }\n }\n@@ -1052,13 +1054,13 @@ impl<'a> State<'a> {\n                 self.print_fn(decl, ast::Unsafety::Normal,\n                               ast::Constness::NotConst,\n                               Abi::Rust, Some(item.ident),\n-                              generics, None, item.vis)?;\n+                              generics, None, &item.vis)?;\n                 self.end()?; // end head-ibox\n                 word(&mut self.s, \";\")?;\n                 self.end() // end the outer fn box\n             }\n             ast::ForeignItemKind::Static(ref t, m) => {\n-                self.head(&visibility_qualified(item.vis, \"static\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"static\"))?;\n                 if m {\n                     self.word_space(\"mut\")?;\n                 }\n@@ -1076,7 +1078,7 @@ impl<'a> State<'a> {\n                               ident: ast::Ident,\n                               ty: &ast::Ty,\n                               default: Option<&ast::Expr>,\n-                              vis: ast::Visibility)\n+                              vis: &ast::Visibility)\n                               -> io::Result<()>\n     {\n         word(&mut self.s, &visibility_qualified(vis, \"\"))?;\n@@ -1118,7 +1120,7 @@ impl<'a> State<'a> {\n         self.ann.pre(self, NodeItem(item))?;\n         match item.node {\n             ast::ItemKind::ExternCrate(ref optional_path) => {\n-                self.head(&visibility_qualified(item.vis, \"extern crate\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n                 if let Some(p) = *optional_path {\n                     let val = p.as_str();\n                     if val.contains(\"-\") {\n@@ -1136,14 +1138,14 @@ impl<'a> State<'a> {\n                 self.end()?; // end outer head-block\n             }\n             ast::ItemKind::Use(ref vp) => {\n-                self.head(&visibility_qualified(item.vis, \"use\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"use\"))?;\n                 self.print_view_path(&vp)?;\n                 word(&mut self.s, \";\")?;\n                 self.end()?; // end inner head-block\n                 self.end()?; // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, m, ref expr) => {\n-                self.head(&visibility_qualified(item.vis, \"static\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"static\"))?;\n                 if m == ast::Mutability::Mutable {\n                     self.word_space(\"mut\")?;\n                 }\n@@ -1159,7 +1161,7 @@ impl<'a> State<'a> {\n                 self.end()?; // end the outer cbox\n             }\n             ast::ItemKind::Const(ref ty, ref expr) => {\n-                self.head(&visibility_qualified(item.vis, \"const\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"const\"))?;\n                 self.print_ident(item.ident)?;\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n@@ -1181,13 +1183,13 @@ impl<'a> State<'a> {\n                     Some(item.ident),\n                     typarams,\n                     None,\n-                    item.vis\n+                    &item.vis\n                 )?;\n                 word(&mut self.s, \" \")?;\n                 self.print_block_with_attrs(&body, &item.attrs)?;\n             }\n             ast::ItemKind::Mod(ref _mod) => {\n-                self.head(&visibility_qualified(item.vis, \"mod\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"mod\"))?;\n                 self.print_ident(item.ident)?;\n                 self.nbsp()?;\n                 self.bopen()?;\n@@ -1204,7 +1206,7 @@ impl<'a> State<'a> {\n             ast::ItemKind::Ty(ref ty, ref params) => {\n                 self.ibox(INDENT_UNIT)?;\n                 self.ibox(0)?;\n-                self.word_nbsp(&visibility_qualified(item.vis, \"type\"))?;\n+                self.word_nbsp(&visibility_qualified(&item.vis, \"type\"))?;\n                 self.print_ident(item.ident)?;\n                 self.print_generics(params)?;\n                 self.end()?; // end the inner ibox\n@@ -1222,17 +1224,17 @@ impl<'a> State<'a> {\n                     params,\n                     item.ident,\n                     item.span,\n-                    item.vis\n+                    &item.vis\n                 )?;\n             }\n             ast::ItemKind::Struct(ref struct_def, ref generics) => {\n-                self.head(&visibility_qualified(item.vis,\"struct\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"struct\"))?;\n                 self.print_struct(&struct_def, generics, item.ident, item.span, true)?;\n             }\n \n             ast::ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n                 self.print_trait_ref(trait_ref)?;\n@@ -1249,7 +1251,7 @@ impl<'a> State<'a> {\n                           ref ty,\n                           ref impl_items) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n@@ -1287,7 +1289,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Trait(unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_ident(item.ident)?;\n@@ -1312,7 +1314,7 @@ impl<'a> State<'a> {\n                 self.bclose(item.span)?;\n             }\n             ast::ItemKind::Mac(codemap::Spanned { ref node, .. }) => {\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_path(&node.path, false, 0)?;\n                 word(&mut self.s, \"! \")?;\n                 self.print_ident(item.ident)?;\n@@ -1355,7 +1357,7 @@ impl<'a> State<'a> {\n     pub fn print_enum_def(&mut self, enum_definition: &ast::EnumDef,\n                           generics: &ast::Generics, ident: ast::Ident,\n                           span: codemap::Span,\n-                          visibility: ast::Visibility) -> io::Result<()> {\n+                          visibility: &ast::Visibility) -> io::Result<()> {\n         self.head(&visibility_qualified(visibility, \"enum\"))?;\n         self.print_ident(ident)?;\n         self.print_generics(generics)?;\n@@ -1381,9 +1383,12 @@ impl<'a> State<'a> {\n         self.bclose(span)\n     }\n \n-    pub fn print_visibility(&mut self, vis: ast::Visibility) -> io::Result<()> {\n-        match vis {\n+    pub fn print_visibility(&mut self, vis: &ast::Visibility) -> io::Result<()> {\n+        match *vis {\n             ast::Visibility::Public => self.word_nbsp(\"pub\"),\n+            ast::Visibility::Crate => self.word_nbsp(\"pub(crate)\"),\n+            ast::Visibility::Restricted { ref path, .. } =>\n+                self.word_nbsp(&format!(\"pub({})\", path)),\n             ast::Visibility::Inherited => Ok(())\n         }\n     }\n@@ -1404,7 +1409,7 @@ impl<'a> State<'a> {\n                     |s, field| {\n                         match field.node.kind {\n                             ast::NamedField(..) => panic!(\"unexpected named field\"),\n-                            ast::UnnamedField(vis) => {\n+                            ast::UnnamedField(ref vis) => {\n                                 s.print_visibility(vis)?;\n                                 s.maybe_print_comment(field.span.lo)?;\n                                 s.print_type(&field.node.ty)\n@@ -1429,7 +1434,7 @@ impl<'a> State<'a> {\n             for field in struct_def.fields() {\n                 match field.node.kind {\n                     ast::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    ast::NamedField(ident, visibility) => {\n+                    ast::NamedField(ident, ref visibility) => {\n                         self.hardbreak_if_not_bol()?;\n                         self.maybe_print_comment(field.span.lo)?;\n                         self.print_outer_attributes(&field.node.attrs)?;\n@@ -1528,7 +1533,7 @@ impl<'a> State<'a> {\n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n                             m: &ast::MethodSig,\n-                            vis: ast::Visibility)\n+                            vis: &ast::Visibility)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n                       m.unsafety,\n@@ -1550,13 +1555,13 @@ impl<'a> State<'a> {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n                 self.print_associated_const(ti.ident, &ty,\n                                             default.as_ref().map(|expr| &**expr),\n-                                            ast::Visibility::Inherited)?;\n+                                            &ast::Visibility::Inherited)?;\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     self.head(\"\")?;\n                 }\n-                self.print_method_sig(ti.ident, sig, ast::Visibility::Inherited)?;\n+                self.print_method_sig(ti.ident, sig, &ast::Visibility::Inherited)?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n                     self.print_block_with_attrs(body, &ti.attrs)?;\n@@ -1582,11 +1587,11 @@ impl<'a> State<'a> {\n         }\n         match ii.node {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                self.print_associated_const(ii.ident, &ty, Some(&expr), ii.vis)?;\n+                self.print_associated_const(ii.ident, &ty, Some(&expr), &ii.vis)?;\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.ident, sig, ii.vis)?;\n+                self.print_method_sig(ii.ident, sig, &ii.vis)?;\n                 self.nbsp()?;\n                 self.print_block_with_attrs(body, &ii.attrs)?;\n             }\n@@ -2655,7 +2660,7 @@ impl<'a> State<'a> {\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<&ast::SelfKind>,\n-                    vis: ast::Visibility) -> io::Result<()> {\n+                    vis: &ast::Visibility) -> io::Result<()> {\n         self.print_fn_header_info(unsafety, constness, abi, vis)?;\n \n         if let Some(name) = name {\n@@ -3037,7 +3042,7 @@ impl<'a> State<'a> {\n                       name,\n                       &generics,\n                       opt_explicit_self,\n-                      ast::Visibility::Inherited)?;\n+                      &ast::Visibility::Inherited)?;\n         self.end()\n     }\n \n@@ -3112,7 +3117,7 @@ impl<'a> State<'a> {\n                                 unsafety: ast::Unsafety,\n                                 constness: ast::Constness,\n                                 abi: Abi,\n-                                vis: ast::Visibility) -> io::Result<()> {\n+                                vis: &ast::Visibility) -> io::Result<()> {\n         word(&mut self.s, &visibility_qualified(vis, \"\"))?;\n \n         match constness {"}, {"sha": "1251f9bfe13501599d4084ed42f1b705b6b928c9", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772c600d4d6f39daa6d07d1a60ee0df3d3426978/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=772c600d4d6f39daa6d07d1a60ee0df3d3426978", "patch": "@@ -31,10 +31,10 @@ use codemap::Span;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, &'a Visibility),\n \n     /// fn foo(&self)\n-    Method(Ident, &'a MethodSig, Option<Visibility>),\n+    Method(Ident, &'a MethodSig, Option<&'a Visibility>),\n \n     /// |x, y| {}\n     Closure,\n@@ -129,6 +129,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n         walk_macro_def(self, macro_def)\n     }\n+    fn visit_vis(&mut self, vis: &'v Visibility) {\n+        walk_vis(self, vis)\n+    }\n }\n \n #[macro_export]\n@@ -260,7 +263,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemKind::Fn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n-                                            constness, abi, item.vis),\n+                                            constness, abi, &item.vis),\n                              declaration,\n                              body,\n                              item.span,\n@@ -546,7 +549,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V,\n         FnKind::ItemFn(_, generics, _, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, _) => {\n+        FnKind::Method(_, ref sig, _) => {\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n@@ -597,7 +600,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n+            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n         ImplItemKind::Type(ref ty) => {\n@@ -807,3 +810,10 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);\n }\n+\n+pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n+    match *vis {\n+        Visibility::Restricted { ref path, id } => visitor.visit_path(path, id),\n+        _ => {}\n+    }\n+}"}]}