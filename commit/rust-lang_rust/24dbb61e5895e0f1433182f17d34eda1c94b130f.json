{"sha": "24dbb61e5895e0f1433182f17d34eda1c94b130f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZGJiNjFlNTg5NWUwZjE0MzMxODJmMTdkMzRlZGExYzk0YjEzMGY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-19T18:44:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:57Z"}, "message": "Move query names and Providers to parent module.", "tree": {"sha": "d04c1d39a5d998a81d663423c34ada0bb3201ccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04c1d39a5d998a81d663423c34ada0bb3201ccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24dbb61e5895e0f1433182f17d34eda1c94b130f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24dbb61e5895e0f1433182f17d34eda1c94b130f", "html_url": "https://github.com/rust-lang/rust/commit/24dbb61e5895e0f1433182f17d34eda1c94b130f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24dbb61e5895e0f1433182f17d34eda1c94b130f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "html_url": "https://github.com/rust-lang/rust/commit/8e5d613a11df0e499cf1a006a4b0b2ea9740f991"}], "stats": {"total": 136, "additions": 65, "deletions": 71}, "files": [{"sha": "faef1f048cc2b432a4ccd2f2ef8cd169f1a9004c", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/24dbb61e5895e0f1433182f17d34eda1c94b130f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dbb61e5895e0f1433182f17d34eda1c94b130f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=24dbb61e5895e0f1433182f17d34eda1c94b130f", "patch": "@@ -127,11 +127,52 @@ impl TyCtxt<'tcx> {\n     }\n }\n \n+macro_rules! query_helper_param_ty {\n+    (DefId) => { impl IntoQueryParam<DefId> };\n+    ($K:ty) => { $K };\n+}\n+\n macro_rules! define_callbacks {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n+        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n+        // below, but using type aliases instead of associated types, to bypass\n+        // the limitations around normalizing under HRTB - for example, this:\n+        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n+        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n+        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_keys {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $($K)*;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_values {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $V;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_storage {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_stored {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = <query_storage::$name<$tcx> as QueryStorage>::Stored;)*\n+        }\n+\n+        #[derive(Default)]\n+        pub struct QueryCaches<$tcx> {\n+            $($(#[$attr])* $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n+        }\n+\n         impl TyCtxtEnsure<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n@@ -176,7 +217,30 @@ macro_rules! define_callbacks {\n                 self.tcx.queries.$name(self.tcx, self.span, key, lookup, QueryMode::Get).unwrap()\n             })*\n         }\n-    }\n+\n+        pub struct Providers {\n+            $(pub $name: for<'tcx> fn(\n+                TyCtxt<'tcx>,\n+                query_keys::$name<'tcx>,\n+            ) -> query_values::$name<'tcx>,)*\n+        }\n+\n+        impl Default for Providers {\n+            fn default() -> Self {\n+                Providers {\n+                    $($name: |_, key| bug!(\n+                        \"`tcx.{}({:?})` unsupported by its crate\",\n+                         stringify!($name), key\n+                    ),)*\n+                }\n+            }\n+        }\n+\n+        impl Copy for Providers {}\n+        impl Clone for Providers {\n+            fn clone(&self) -> Self { *self }\n+        }\n+    };\n }\n \n // Each of these queries corresponds to a function pointer field in the"}, {"sha": "32ed7e736351056b2f0e330e1a961cf18762a2ef", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/24dbb61e5895e0f1433182f17d34eda1c94b130f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dbb61e5895e0f1433182f17d34eda1c94b130f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=24dbb61e5895e0f1433182f17d34eda1c94b130f", "patch": "@@ -430,11 +430,6 @@ macro_rules! hash_result {\n     };\n }\n \n-macro_rules! query_helper_param_ty {\n-    (DefId) => { impl IntoQueryParam<DefId> };\n-    ($K:ty) => { $K };\n-}\n-\n macro_rules! define_queries {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -512,42 +507,6 @@ macro_rules! define_queries {\n             })*\n         }\n \n-        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n-        // below, but using type aliases instead of associated types, to bypass\n-        // the limitations around normalizing under HRTB - for example, this:\n-        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n-        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n-        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_keys {\n-            use super::*;\n-\n-            $(pub type $name<$tcx> = $($K)*;)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_values {\n-            use super::*;\n-\n-            $(pub type $name<$tcx> = $V;)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_storage {\n-            use super::*;\n-\n-            $(pub type $name<$tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_stored {\n-            use super::*;\n-\n-            $(pub type $name<$tcx> = <query_storage::$name<$tcx> as QueryStorage>::Stored;)*\n-        }\n-\n-        #[derive(Default)]\n-        pub struct QueryCaches<$tcx> {\n-            $($(#[$attr])* $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n-        }\n-\n         $(impl<$tcx> QueryConfig for queries::$name<$tcx> {\n             type Key = $($K)*;\n             type Value = $V;\n@@ -683,11 +642,6 @@ macro_rules! define_queries {\n         }\n \n         static QUERY_CALLBACKS: &[QueryStruct] = &make_dep_kind_array!(query_callbacks);\n-\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: ($(([$($modifiers)*] [$name] [$($K)*] [$V]))*)\n-        }\n     }\n }\n \n@@ -774,30 +728,6 @@ macro_rules! define_queries_struct {\n     };\n }\n \n-macro_rules! define_provider_struct {\n-    (tcx: $tcx:tt,\n-     input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n-        pub struct Providers {\n-            $(pub $name: for<$tcx> fn(TyCtxt<$tcx>, $K) -> $R,)*\n-        }\n-\n-        impl Default for Providers {\n-            fn default() -> Self {\n-                $(fn $name<$tcx>(_: TyCtxt<$tcx>, key: $K) -> $R {\n-                    bug!(\"`tcx.{}({:?})` unsupported by its crate\",\n-                         stringify!($name), key);\n-                })*\n-                Providers { $($name),* }\n-            }\n-        }\n-\n-        impl Copy for Providers {}\n-        impl Clone for Providers {\n-            fn clone(&self) -> Self { *self }\n-        }\n-    };\n-}\n-\n fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n         \"top-level module\".to_string()"}]}