{"sha": "d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YWIyNDBkMDZkNTBmM2YzZmM2NGViNDQxYWUwOGE5ZDAyNTU2N2U=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2017-01-10T09:21:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-10T09:21:05Z"}, "message": "Merge pull request #1430 from oli-obk/false_false_positive\n\nFOR_KV_MAP can now lint on mutable maps due to values_mut()", "tree": {"sha": "6a167c116c39d8b21685781caf3ccc0c08a3206f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a167c116c39d8b21685781caf3ccc0c08a3206f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "html_url": "https://github.com/rust-lang/rust/commit/d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ab240d06d50f3f3fc64eb441ae08a9d025567e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07062d0da4bf5295c6737dd8ee8427d4e6b63c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07062d0da4bf5295c6737dd8ee8427d4e6b63c7e", "html_url": "https://github.com/rust-lang/rust/commit/07062d0da4bf5295c6737dd8ee8427d4e6b63c7e"}, {"sha": "87db342304ad5d14159a8aa4615380ea6691d7aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/87db342304ad5d14159a8aa4615380ea6691d7aa", "html_url": "https://github.com/rust-lang/rust/commit/87db342304ad5d14159a8aa4615380ea6691d7aa"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "ee80844ae4bd73c1e40990bb32799a171980650e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6ab240d06d50f3f3fc64eb441ae08a9d025567e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ab240d06d50f3f3fc64eb441ae08a9d025567e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "patch": "@@ -16,7 +16,7 @@ use utils::sugg;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg, in_external_macro,\n             is_refutable, span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n-            walk_ptrs_ty, last_path_segment};\n+            last_path_segment};\n use utils::paths;\n \n /// **What it does:** Checks for looping over the range of `0..len` of some\n@@ -712,19 +712,26 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n \n     if let PatKind::Tuple(ref pat, _) = pat.node {\n         if pat.len() == 2 {\n-            let (new_pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n-                (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\"),\n-                (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\"),\n+            let arg_span = arg.span;\n+            let (new_pat_span, kind, ty, mutbl) = match cx.tcx.tables().expr_ty(arg).sty {\n+                ty::TyRef(_, ref tam) => {\n+                    match (&pat[0].node, &pat[1].node) {\n+                        (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", tam.ty, tam.mutbl),\n+                        (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", tam.ty, MutImmutable),\n+                        _ => return,\n+                    }\n+                },\n                 _ => return,\n             };\n-\n-            let (arg_span, arg) = match arg.node {\n-                ExprAddrOf(MutImmutable, ref expr) => (arg.span, &**expr),\n-                ExprAddrOf(MutMutable, _) => return, // for _ in &mut _, there is no {values,keys}_mut method\n-                _ => (arg.span, arg),\n+            let mutbl = match mutbl {\n+                MutImmutable => \"\",\n+                MutMutable => \"_mut\",\n+            };\n+            let arg = match arg.node {\n+                ExprAddrOf(_, ref expr) => &**expr,\n+                _ => arg,\n             };\n \n-            let ty = walk_ptrs_ty(cx.tcx.tables().expr_ty(arg));\n             if match_type(cx, ty, &paths::HASHMAP) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(cx,\n                                    FOR_KV_MAP,\n@@ -735,7 +742,7 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                     multispan_sugg(db,\n                                    \"use the corresponding method\".into(),\n                                    &[(pat_span, &snippet(cx, new_pat_span, kind)),\n-                                     (arg_span, &format!(\"{}.{}s()\", map.maybe_par(), kind))]);\n+                                     (arg_span, &format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n                 });\n             }\n         }"}, {"sha": "659935e6098ed49065c8a0987907cfc7289d5287", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6ab240d06d50f3f3fc64eb441ae08a9d025567e/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ab240d06d50f3f3fc64eb441ae08a9d025567e/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=d6ab240d06d50f3f3fc64eb441ae08a9d025567e", "patch": "@@ -87,7 +87,7 @@ impl Unrelated {\n     }\n }\n \n-#[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n #[deny(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n #[allow(many_single_char_names)]\n@@ -417,11 +417,23 @@ fn main() {\n \n     let mut m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &mut m {\n-        // Ok, there is no values_mut method or equivalent\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in m.values_mut()\n         let _v = v;\n     }\n \n+    let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n+    for (_, v) in &mut *m {\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in (*m).values_mut()\n+        let _v = v;\n+    }\n \n+    let m : HashMap<u64, u64> = HashMap::new();\n     let rm = &m;\n     for (k, _value) in rm {\n         //~^ you seem to want to iterate on a map's keys"}]}