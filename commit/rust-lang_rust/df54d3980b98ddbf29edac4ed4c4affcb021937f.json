{"sha": "df54d3980b98ddbf29edac4ed4c4affcb021937f", "node_id": "C_kwDOAAsO6NoAKGRmNTRkMzk4MGI5OGRkYmYyOWVkYWM0ZWQ0YzRhZmZjYjAyMTkzN2Y", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-14T00:59:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-30T17:41:31Z"}, "message": "Move encode_metadata out of CrateStore.", "tree": {"sha": "cf1158c185488d10d4822c0c00c62e7b4a23ef17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1158c185488d10d4822c0c00c62e7b4a23ef17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df54d3980b98ddbf29edac4ed4c4affcb021937f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df54d3980b98ddbf29edac4ed4c4affcb021937f", "html_url": "https://github.com/rust-lang/rust/commit/df54d3980b98ddbf29edac4ed4c4affcb021937f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df54d3980b98ddbf29edac4ed4c4affcb021937f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11491938f80988c7261a1179cf71a25c379c8783", "url": "https://api.github.com/repos/rust-lang/rust/commits/11491938f80988c7261a1179cf71a25c379c8783", "html_url": "https://github.com/rust-lang/rust/commit/11491938f80988c7261a1179cf71a25c379c8783"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "33814727eb1f6490bc3e9b8cc400465c398f3069", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -96,7 +96,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n             stack = &stack[..index + REPORT_SYMBOL_NAMES.len()];\n         }\n \n-        const ENCODE_METADATA: &str = \"rustc_middle::ty::context::TyCtxt::encode_metadata\";\n+        const ENCODE_METADATA: &str = \"rustc_metadata::encode_metadata\";\n         if let Some(index) = stack.find(ENCODE_METADATA) {\n             stack = &stack[..index + ENCODE_METADATA.len()];\n         }"}, {"sha": "7b769dff3708c4c04b52e49ca80ae3e00a407119", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -7,7 +7,11 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub(crate) fn new_metadata_object(tcx: TyCtxt<'_>, cgu_name: &str, metadata: &EncodedMetadata) -> Vec<u8> {\n+pub(crate) fn new_metadata_object(\n+    tcx: TyCtxt<'_>,\n+    cgu_name: &str,\n+    metadata: &EncodedMetadata,\n+) -> Vec<u8> {\n     use snap::write::FrameEncoder;\n     use std::io::Write;\n "}, {"sha": "9ca11bc8fe9f405c0b98bf989a9f1605bd88ca2a", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n+use rustc_metadata::encode_metadata;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n@@ -1001,7 +1002,7 @@ fn encode_and_write_metadata(\n \n     let metadata = match metadata_kind {\n         MetadataKind::None => middle::cstore::EncodedMetadata::new(),\n-        MetadataKind::Uncompressed | MetadataKind::Compressed => tcx.encode_metadata(),\n+        MetadataKind::Uncompressed | MetadataKind::Compressed => encode_metadata(tcx),\n     };\n \n     let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");"}, {"sha": "c82194bd98720a7c5fde229992a66b2ac114bd20", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -30,4 +30,5 @@ pub mod creader;\n pub mod dynamic_lib;\n pub mod locator;\n \n+pub use rmeta::encode_metadata;\n pub use rmeta::METADATA_HEADER;"}, {"sha": "bd1d99640f81d6256fc55b6e5864a33f8e7550da", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -1,7 +1,6 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n use crate::native_libs;\n-use crate::rmeta::encoder;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n@@ -10,7 +9,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::cstore::ForeignModule;\n-use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n+use rustc_middle::middle::cstore::{CrateSource, CrateStore};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n@@ -511,8 +510,4 @@ impl CrateStore for CStore {\n     fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId {\n         self.get_crate_data(cnum).expn_hash_to_expn_id(index_guess, hash)\n     }\n-\n-    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n-        encoder::encode_metadata(tcx)\n-    }\n }"}, {"sha": "f8e7b486cec5868bb8ee81d48962a0aa554c3aae", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -2101,7 +2101,9 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+    let _prof_timer = tcx.prof.verbose_generic_activity(\"generate_crate_metadata\");\n+\n     // Since encoding metadata is not in a query, and nothing is cached,\n     // there's no need to do dep-graph tracking for any of it.\n     tcx.dep_graph.assert_ignored();"}, {"sha": "adfc9aaba0c6ed19dce015298d2f1f6afdb207a4", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -32,6 +32,7 @@ use std::num::NonZeroUsize;\n use decoder::DecodeContext;\n pub use decoder::{provide, provide_extern};\n crate use decoder::{CrateMetadata, CrateNumMap, MetadataBlob};\n+pub use encoder::encode_metadata;\n use encoder::EncodeContext;\n use rustc_span::hygiene::SyntaxContextData;\n "}, {"sha": "9d8bd0f4c4f0ba0265e6e6cfc82290e6efd7aa2e", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -2,8 +2,6 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use crate::ty::TyCtxt;\n-\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n@@ -204,9 +202,6 @@ pub trait CrateStore: std::fmt::Debug {\n     /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId;\n     fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId;\n-\n-    // utility functions\n-    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "1e8ae81333673e26926c5ce92f1bc068064d2253", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df54d3980b98ddbf29edac4ed4c4affcb021937f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=df54d3980b98ddbf29edac4ed4c4affcb021937f", "patch": "@@ -7,7 +7,6 @@ use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n-use crate::middle::cstore::EncodedMetadata;\n use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::interpret::{self, AllocId, Allocation, ConstValue, Scalar};\n@@ -1324,11 +1323,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n-    pub fn encode_metadata(self) -> EncodedMetadata {\n-        let _prof_timer = self.prof.verbose_generic_activity(\"generate_crate_metadata\");\n-        self.untracked_resolutions.cstore.encode_metadata(self)\n-    }\n-\n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n     pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {"}]}