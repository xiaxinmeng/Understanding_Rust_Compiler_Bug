{"sha": "d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OWIwOTk3ZDdkY2M5OWExODhkNWNiMTkxMzdkZWRjNGZjMDVkMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T06:17:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T06:17:25Z"}, "message": "Auto merge of #75431 - ehuss:platform-support, r=Mark-Simulacrum\n\nMove platform support to the rustc book.\n\nThis moves the [Platform Support](https://forge.rust-lang.org/release/platform-support.html) page from the forge to the rustc book. There are several reasons for doing this:\n\n* The forge is not really oriented towards end-users (it mostly contains infrastructure, governance and policy, internal team pages, etc.). This platform support page is useful to user to know which targets are supported.\n* This page can now be updated in-sync with any PRs that add or remove a target, or change its status.\n* This is now automatically checked on CI to verify the list does not get out of sync. Currently it only checks the presence/absence of an entry, but more sophisticated checks could be added in the future.\n\nI'm not 100% certain this is the best location, but I think it fits. I'd like to see the rustc guide continue to grow, including things like linking information and more platform-specific details.", "tree": {"sha": "5acdb2c21607c96661b0a34e5d7f8c173197101a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5acdb2c21607c96661b0a34e5d7f8c173197101a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "html_url": "https://github.com/rust-lang/rust/commit/d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814bc4fe9364865bfaa94d7825b8eabc11245c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/814bc4fe9364865bfaa94d7825b8eabc11245c7c", "html_url": "https://github.com/rust-lang/rust/commit/814bc4fe9364865bfaa94d7825b8eabc11245c7c"}, {"sha": "ce717476ffc2d7ca1bc737942e778b8e0e813e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce717476ffc2d7ca1bc737942e778b8e0e813e05", "html_url": "https://github.com/rust-lang/rust/commit/ce717476ffc2d7ca1bc737942e778b8e0e813e05"}], "stats": {"total": 349, "additions": 344, "deletions": 5}, "files": [{"sha": "f6b5b317646c363daf2d4954297d3fee77abcf5d", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -4624,6 +4624,10 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"tier-check\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"time\"\n version = \"0.1.42\""}, {"sha": "87e958a1bafe64bea36d84de36c726d940a08bd2", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -13,6 +13,7 @@ members = [\n   \"src/tools/rustbook\",\n   \"src/tools/unstable-book-gen\",\n   \"src/tools/tidy\",\n+  \"src/tools/tier-check\",\n   \"src/tools/build-manifest\",\n   \"src/tools/remote-test-client\",\n   \"src/tools/remote-test-server\","}, {"sha": "4b0905bd6c16c8d14eee46a0c5e45b201b3a89c3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -404,6 +404,7 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::Linkcheck,\n+                test::TierCheck,\n                 test::Cargotest,\n                 test::Cargo,\n                 test::Rls,"}, {"sha": "11e2564305f0db3b54825cc65d556030e267b83b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -2043,3 +2043,47 @@ impl Step for Bootstrap {\n         run.builder.ensure(Bootstrap);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct TierCheck {\n+    pub compiler: Compiler,\n+    target: TargetSelection,\n+}\n+\n+impl Step for TierCheck {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/tier-check\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        run.builder.ensure(TierCheck { compiler, target: run.host });\n+    }\n+\n+    /// Tests the Platform Support page in the rustc book.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            self.compiler,\n+            Mode::ToolRustc,\n+            self.target,\n+            \"run\",\n+            \"src/tools/tier-check\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        cargo.arg(builder.src.join(\"src/doc/rustc/src/platform-support.md\"));\n+        cargo.arg(&builder.rustc(self.compiler));\n+        if builder.is_verbose() {\n+            cargo.arg(\"--verbose\");\n+        }\n+\n+        builder.info(\"platform support check\");\n+        try_run(builder, &mut cargo.into());\n+    }\n+}"}, {"sha": "57013e9194bc110d070bf463ef69f5d4b00f0139", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -11,6 +11,7 @@\n         - [Deny-by-default lints](lints/listing/deny-by-default.md)\n - [Codegen options](codegen-options/index.md)\n - [JSON Output](json.md)\n+- [Platform Support](platform-support.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)"}, {"sha": "b8d3c985cb5b615076add108107f12215c631bc7", "filename": "src/doc/rustc/src/platform-support.md", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -0,0 +1,223 @@\n+# Platform Support\n+\n+<style type=\"text/css\">\n+    td code {\n+        white-space: nowrap;\n+    }\n+</style>\n+\n+Support for different platforms are organized into three tiers, each with a\n+different set of guarantees.\n+\n+Platforms are identified by their \"target triple\" which is the string to\n+inform the compiler what kind of output should be produced. The columns in the\n+tables below have the following meanings:\n+\n+* std:\n+    * \u2713 indicates the full standard library is available.\n+    * \\* indicates the target only supports [`no_std`] development.\n+    * ? indicates the standard library support is unknown or a work-in-progress.\n+* host: A \u2713 indicates that `rustc` and `cargo` can run on the host platform.\n+\n+[`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n+\n+## Tier 1\n+\n+Tier 1 platforms can be thought of as \"guaranteed to work\".\n+Specifically they will each satisfy the following requirements:\n+\n+* Official binary releases are provided for the platform.\n+* Automated testing is set up to run tests for the platform.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated\n+  on tests passing.\n+* Documentation for how to use and how to build the platform is available.\n+\n+target | std | host | notes\n+-------|-----|------|-------\n+`i686-pc-windows-gnu` | \u2713 | \u2713 | 32-bit MinGW (Windows 7+)\n+`i686-pc-windows-msvc` | \u2713 | \u2713 | 32-bit MSVC (Windows 7+)\n+`i686-unknown-linux-gnu` | \u2713 | \u2713 | 32-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+`x86_64-apple-darwin` | \u2713 | \u2713 | 64-bit OSX (10.7+, Lion+)\n+`x86_64-pc-windows-gnu` | \u2713 | \u2713 | 64-bit MinGW (Windows 7+)\n+`x86_64-pc-windows-msvc` | \u2713 | \u2713 | 64-bit MSVC (Windows 7+)\n+`x86_64-unknown-linux-gnu` | \u2713 | \u2713 | 64-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+\n+## Tier 2\n+\n+Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n+are not run so it's not guaranteed to produce a working build, but platforms\n+often work to quite a good degree and patches are always welcome!\n+Specifically, these platforms are required to have each of the following:\n+\n+* Official binary releases are provided for the platform.\n+* Automated building is set up, but may not be running tests.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n+    platforms **building**. For some platforms only the standard library is\n+    compiled, but for others `rustc` and `cargo` are too.\n+\n+target | std | host | notes\n+-------|-----|------|-------\n+`aarch64-apple-ios` | \u2713[^apple] |  | ARM64 iOS\n+`aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n+`aarch64-linux-android` | \u2713 |  | ARM64 Android\n+`aarch64-pc-windows-msvc` | \u2713 |  | ARM64 Windows MSVC\n+`aarch64-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (kernel 4.2, glibc 2.17)\n+`aarch64-unknown-linux-musl` | \u2713 |  | ARM64 Linux with MUSL\n+`aarch64-unknown-none` | * |  | Bare ARM64, hardfloat\n+`aarch64-unknown-none-softfloat` | * |  | Bare ARM64, softfloat\n+`arm-linux-androideabi` | \u2713 |  | ARMv7 Android\n+`arm-unknown-linux-gnueabi` | \u2713 | \u2713 | ARMv6 Linux (kernel 3.2, glibc 2.17)\n+`arm-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`arm-unknown-linux-musleabi` | \u2713 |  | ARMv6 Linux with MUSL\n+`arm-unknown-linux-musleabihf` | \u2713 |  | ARMv6 Linux with MUSL, hardfloat\n+`armebv7r-none-eabi` | * |  | Bare ARMv7-R, Big Endian\n+`armebv7r-none-eabihf` | * |  | Bare ARMv7-R, Big Endian, hardfloat\n+`armv5te-unknown-linux-gnueabi` | \u2713 |  | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n+`armv5te-unknown-linux-musleabi` | \u2713 |  | ARMv5TE Linux with MUSL\n+`armv7-linux-androideabi` | \u2713 |  | ARMv7a Android\n+`armv7a-none-eabi` | * |  | Bare ARMv7-A\n+`armv7r-none-eabi` | * |  | Bare ARMv7-R\n+`armv7r-none-eabihf` | * |  | Bare ARMv7-R, hardfloat\n+`armv7-unknown-linux-gnueabi` | \u2713 |   | ARMv7 Linux (kernel 4.15, glibc 2.27)\n+`armv7-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`armv7-unknown-linux-musleabi` | \u2713 |   | ARMv7 Linux, MUSL\n+`armv7-unknown-linux-musleabihf` | \u2713 |  | ARMv7 Linux with MUSL\n+`asmjs-unknown-emscripten` | \u2713 |  | asm.js via Emscripten\n+`i586-pc-windows-msvc` | \u2713 |  | 32-bit Windows w/o SSE\n+`i586-unknown-linux-gnu` | \u2713 |  | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n+`i586-unknown-linux-musl` | \u2713 |  | 32-bit Linux w/o SSE, MUSL\n+`i686-linux-android` | \u2713 |  | 32-bit x86 Android\n+`i686-unknown-freebsd` | \u2713 | \u2713 | 32-bit FreeBSD\n+`i686-unknown-linux-musl` | \u2713 |  | 32-bit Linux with MUSL\n+`mips-unknown-linux-gnu` | \u2713 | \u2713 | MIPS Linux (kernel 4.4, glibc 2.23)\n+`mips-unknown-linux-musl` | \u2713 |  | MIPS Linux with MUSL\n+`mips64-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mips64-unknown-linux-muslabi64` | \u2713 |  | MIPS64 Linux, n64 ABI, MUSL\n+`mips64el-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mips64el-unknown-linux-muslabi64` | \u2713 |  | MIPS64 (LE) Linux, n64 ABI, MUSL\n+`mipsel-unknown-linux-gnu` | \u2713 | \u2713 | MIPS (LE) Linux (kernel 4.4, glibc 2.23)\n+`mipsel-unknown-linux-musl` | \u2713 |  | MIPS (LE) Linux with MUSL\n+`nvptx64-nvidia-cuda` | \u2713 |  | --emit=asm generates PTX code that [runs on NVIDIA GPUs]\n+`powerpc-unknown-linux-gnu` | \u2713 | \u2713 | PowerPC Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64-unknown-linux-gnu` | \u2713 | \u2713 | PPC64 Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64le-unknown-linux-gnu` | \u2713 | \u2713 | PPC64LE Linux (kernel 3.10, glibc 2.17)\n+`riscv32i-unknown-none-elf` | * |  | Bare RISC-V (RV32I ISA)\n+`riscv32imac-unknown-none-elf` | * |  | Bare RISC-V (RV32IMAC ISA)\n+`riscv32imc-unknown-none-elf` | * |  | Bare RISC-V (RV32IMC ISA)\n+`riscv64gc-unknown-linux-gnu` | \u2713 | \u2713 | RISC-V Linux (kernel 4.20, glibc 2.29)\n+`riscv64gc-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAFDC ISA)\n+`riscv64imac-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAC ISA)\n+`s390x-unknown-linux-gnu` | \u2713 | \u2713 | S390x Linux (kernel 2.6.32, glibc 2.11)\n+`sparc64-unknown-linux-gnu` | \u2713 |  | SPARC Linux (kernel 4.4, glibc 2.23)\n+`sparcv9-sun-solaris` | \u2713 |  | SPARC Solaris 10/11, illumos\n+`thumbv6m-none-eabi` | * |  | Bare Cortex-M0, M0+, M1\n+`thumbv7em-none-eabi` | * |  | Bare Cortex-M4, M7\n+`thumbv7em-none-eabihf` | * |  | Bare Cortex-M4F, M7F, FPU, hardfloat\n+`thumbv7m-none-eabi` | * |  | Bare Cortex-M3\n+`thumbv7neon-linux-androideabi` | \u2713 |  | Thumb2-mode ARMv7a Android with NEON\n+`thumbv7neon-unknown-linux-gnueabihf` | \u2713 |  | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n+`thumbv8m.base-none-eabi` | * |  | ARMv8-M Baseline\n+`thumbv8m.main-none-eabi` | * |  | ARMv8-M Mainline\n+`thumbv8m.main-none-eabihf` | * |  | ARMv8-M Baseline, hardfloat\n+`wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n+`wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n+`wasm32-wasi` | \u2713 |  | WebAssembly with WASI\n+`x86_64-apple-ios` | \u2713[^apple] |  | 64-bit x86 iOS\n+`x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n+`x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n+`x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n+`x86_64-rumprun-netbsd` | \u2713 |  | 64-bit NetBSD Rump Kernel\n+`x86_64-sun-solaris` | \u2713 |  | 64-bit Solaris 10/11, illumos\n+`x86_64-unknown-cloudabi` | \u2713 |  | 64-bit CloudABI\n+`x86_64-unknown-freebsd` | \u2713 | \u2713 | 64-bit FreeBSD\n+`x86_64-unknown-illumos` | \u2713 | \u2713 | illumos\n+`x86_64-unknown-linux-gnux32` | \u2713 |  | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n+`x86_64-unknown-linux-musl` | \u2713 | \u2713 | 64-bit Linux with MUSL\n+`x86_64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/amd64\n+`x86_64-unknown-redox` | \u2713 |  | Redox OS\n+\n+[Fortanix ABI]: https://edp.fortanix.com/\n+\n+## Tier 3\n+\n+Tier 3 platforms are those which the Rust codebase has support for, but which\n+are not built or tested automatically, and may not work. Official builds are\n+not available.\n+\n+target | std | host | notes\n+-------|-----|------|-------\n+`aarch64-apple-darwin` | ? |  | ARM64 macOS\n+`aarch64-apple-tvos` | *[^apple] |  | ARM64 tvOS\n+`aarch64-unknown-cloudabi` | \u2713 |  | ARM64 CloudABI\n+`aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n+`aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-netbsd` | ? |  |\n+`aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n+`aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n+`aarch64-uwp-windows-msvc` | ? |  |\n+`aarch64-wrs-vxworks` | ? |  |\n+`armv4t-unknown-linux-gnueabi` | ? |  |\n+`armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n+`armv6-unknown-netbsd-eabihf` | ? |  |\n+`armv7-apple-ios` | \u2713[^apple] |  | ARMv7 iOS, Cortex-a8\n+`armv7-unknown-cloudabi-eabihf` | \u2713 |  | ARMv7 CloudABI, hardfloat\n+`armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n+`armv7-unknown-netbsd-eabihf` | ? |  |\n+`armv7-wrs-vxworks-eabihf` | ? |  |\n+`armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n+`armv7s-apple-ios` | \u2713[^apple] |  |\n+`avr-unknown-unknown` | ? |  | AVR\n+`hexagon-unknown-linux-musl` | ? |  |\n+`i386-apple-ios` | \u2713[^apple] |  | 32-bit x86 iOS\n+`i686-apple-darwin` | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)\n+`i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n+`i686-unknown-cloudabi` | \u2713 |  | 32-bit CloudABI\n+`i686-unknown-uefi` | ? |  | 32-bit UEFI\n+`i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n+`i686-unknown-netbsd` | \u2713 |  | NetBSD/i386 with SSE2\n+`i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n+`i686-uwp-windows-gnu` | ? |  |\n+`i686-uwp-windows-msvc` | ? |  |\n+`i686-wrs-vxworks` | ? |  |\n+`mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n+`mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n+`mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n+`mipsisa32r6-unknown-linux-gnu` | ? |  |\n+`mipsisa32r6el-unknown-linux-gnu` | ? |  |\n+`mipsisa64r6-unknown-linux-gnuabi64` | ? |  |\n+`mipsisa64r6el-unknown-linux-gnuabi64` | ? |  |\n+`msp430-none-elf` | * |  | 16-bit MSP430 microcontrollers\n+`powerpc-unknown-linux-gnuspe` | \u2713 |  | PowerPC SPE Linux\n+`powerpc-unknown-linux-musl` | ? |  |\n+`powerpc-unknown-netbsd` | ? |  |\n+`powerpc-wrs-vxworks` | ? |  |\n+`powerpc-wrs-vxworks-spe` | ? |  |\n+`powerpc64-unknown-freebsd` | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)\n+`powerpc64-unknown-linux-musl` | ? |  |\n+`powerpc64-wrs-vxworks` | ? |  |\n+`powerpc64le-unknown-linux-musl` | ? |  |\n+`sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n+`sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n+`sparc64-unknown-openbsd` | ? |  |\n+`thumbv7a-pc-windows-msvc` | ? |  |\n+`thumbv7a-uwp-windows-msvc` | \u2713 |  |\n+`thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n+`thumbv4t-none-eabi` | * |  | ARMv4T T32\n+`x86_64-apple-ios-macabi` | \u2713[^apple] |  | Apple Catalyst\n+`x86_64-apple-tvos` | *[^apple] | | x86 64-bit tvOS\n+`x86_64-linux-kernel` | ? |  | Linux kernel modules\n+`x86_64-pc-solaris` | ? |  |\n+`x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n+`x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n+`x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n+`x86_64-unknown-hermit` | ? |  |\n+`x86_64-unknown-hermit-kernel` | ? |  | HermitCore kernel\n+`x86_64-unknown-l4re-uclibc` | ? |  |\n+`x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD\n+`x86_64-unknown-uefi` | ? |  |\n+`x86_64-uwp-windows-gnu` | \u2713 |  |\n+`x86_64-uwp-windows-msvc` | \u2713 |  |\n+`x86_64-wrs-vxworks` | ? |  |\n+\n+[runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets\n+[^apple]: These targets are only available on macOS."}, {"sha": "c33b506cdaefbbe8c7b861e02d6b97bcec0a05ae", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -2,9 +2,14 @@\n \n `rustc` ships with the ability to compile to many targets automatically, we\n call these \"built-in\" targets, and they generally correspond to targets that\n-the team is supporting directly.\n+the team is supporting directly. To see the list of built-in targets, you can\n+run `rustc --print target-list`.\n \n-To see the list of built-in targets, you can run `rustc --print target-list`,\n-or look at [the API\n-docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/index.html#modules).\n-Each module there defines a builder for a particular target.\n\\ No newline at end of file\n+Typically, a target needs a compiled copy of the Rust standard library to\n+work. If using [rustup], then check out the documentation on\n+[Cross-compilation][rustup-cross] on how to download a pre-built standard\n+library built by the official Rust distributions. Most targets will need a\n+system linker, and possibly other things.\n+\n+[rustup]: https://github.com/rust-lang/rustup\n+[rustup-cross]: https://github.com/rust-lang/rustup#cross-compilation"}, {"sha": "9917b383aab37de7842ed6ea17b6c5cba6299c98", "filename": "src/tools/tier-check/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Ftools%2Ftier-check%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Ftools%2Ftier-check%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2FCargo.toml?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"tier-check\"\n+version = \"0.1.0\"\n+authors = [\"Eric Huss\"]\n+edition = \"2018\"\n+license = \"MIT OR Apache-2.0\"\n+\n+[dependencies]"}, {"sha": "b8d60a5e2fef9acd32163914aeeaed61096a97c8", "filename": "src/tools/tier-check/src/main.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b0997d7dcc99a188d5cb19137dedc4fc05d25/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs?ref=d69b0997d7dcc99a188d5cb19137dedc4fc05d25", "patch": "@@ -0,0 +1,52 @@\n+//! This is a script for validating the platform support page in the rustc book.\n+//!\n+//! The script takes two arguments, the path to the Platform Support source\n+//! page, and the second argument is the path to `rustc`.\n+\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let mut args = std::env::args().skip(1);\n+    let src = args.next().expect(\"expected source file as first argument\");\n+    let filename = std::path::Path::new(&src).file_name().unwrap().to_str().unwrap();\n+    let rustc = args.next().expect(\"expected rustc as second argument\");\n+    let output = std::process::Command::new(rustc)\n+        .arg(\"--print=target-list\")\n+        .output()\n+        .expect(\"rustc should run\");\n+    if !output.status.success() {\n+        eprintln!(\"rustc failed to run\");\n+        std::process::exit(0);\n+    }\n+    let stdout = std::str::from_utf8(&output.stdout).expect(\"utf8\");\n+    let target_list: HashSet<_> = stdout.lines().collect();\n+\n+    let doc_targets_md = std::fs::read_to_string(&src).expect(\"failed to read input source\");\n+    let doc_targets: HashSet<_> = doc_targets_md\n+        .lines()\n+        .filter(|line| line.starts_with('`') && line.contains('|'))\n+        // These platforms only exist on macos.\n+        .filter(|line| !line.contains(\"[^apple]\") || cfg!(target_os = \"macos\"))\n+        .map(|line| line.split('`').skip(1).next().expect(\"expected target code span\"))\n+        .collect();\n+\n+    let missing: Vec<_> = target_list.difference(&doc_targets).collect();\n+    let extra: Vec<_> = doc_targets.difference(&target_list).collect();\n+    for target in &missing {\n+        eprintln!(\n+            \"error: target `{}` is missing from {}\\n\\\n+            If this is a new target, please add it to {}.\",\n+            target, filename, src\n+        );\n+    }\n+    for target in &extra {\n+        eprintln!(\n+            \"error: target `{}` is in {}, but does not appear in the rustc target list\\n\\\n+            If the target has been removed, please edit {} and remove the target.\",\n+            target, filename, src\n+        );\n+    }\n+    if !missing.is_empty() || !extra.is_empty() {\n+        std::process::exit(1);\n+    }\n+}"}]}