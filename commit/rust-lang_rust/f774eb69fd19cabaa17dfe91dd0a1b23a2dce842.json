{"sha": "f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NzRlYjY5ZmQxOWNhYmFhMTdkZmU5MWRkMGExYjIzYTJkY2U4NDI=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T16:30:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T18:32:26Z"}, "message": "Use VarLenSlice consistently when splitting constructors\n\nThe previous behaviour ignored slice lengths above a certain length\nbecause it could not do otherwise. We now have VarLenSlice however, that\ncan represent the ignored lengths to make the algorithm more consistent.\nThis does not change the correctness of the algorithm, but makes it\neasier to reason about.\nAs a nice side-effect, exhaustiveness errors have improved: they now\ncapture all missing lengths instead of only the shortest.", "tree": {"sha": "c0e53808a54d03c9ba000c349522eed878075ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e53808a54d03c9ba000c349522eed878075ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "html_url": "https://github.com/rust-lang/rust/commit/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d582ed5684de1951774b637ccfe8b4cf8bd2008b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d582ed5684de1951774b637ccfe8b4cf8bd2008b", "html_url": "https://github.com/rust-lang/rust/commit/d582ed5684de1951774b637ccfe8b4cf8bd2008b"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "8d7e605f7c9aa70179a9702be474dbaec58a5e7d", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "patch": "@@ -2042,7 +2042,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 //\n                 // Of course, if fixed-length patterns exist, we must be sure\n                 // that our length is large enough to miss them all, so\n-                // we can pick `L = max(FIXED_LEN+1 \u222a {max(PREFIX_LEN) + max(SUFFIX_LEN)})`\n+                // we can pick `L = max(max(FIXED_LEN)+1, max(PREFIX_LEN) + max(SUFFIX_LEN))`\n                 //\n                 // for example, with the above pair of patterns, all elements\n                 // but the first and last can be added/removed, so any\n@@ -2080,9 +2080,24 @@ fn split_grouped_constructors<'p, 'tcx>(\n                     }\n                 }\n \n-                let max_slice_length = cmp::max(max_fixed_len + 1, max_prefix_len + max_suffix_len);\n-                split_ctors\n-                    .extend((self_prefix + self_suffix..=max_slice_length).map(FixedLenSlice))\n+                // For diagnostics, we keep the prefix and suffix lengths separate, so in the case\n+                // where `max_fixed_len+1` is the largest, we adapt `max_prefix_len` accordingly,\n+                // so that `L = max_prefix_len + max_suffix_len`.\n+                if max_fixed_len + 1 >= max_prefix_len + max_suffix_len {\n+                    // The subtraction can't overflow thanks to the above check.\n+                    // The new `max_prefix_len` is also guaranteed to be larger than its previous\n+                    // value.\n+                    max_prefix_len = max_fixed_len + 1 - max_suffix_len;\n+                }\n+\n+                // `ctor` originally covered the range `(self_prefix + self_suffix..infinity)`. We\n+                // now split it into two: lengths smaller than `max_prefix_len + max_suffix_len`\n+                // are treated independently as fixed-lengths slices, and lengths above are\n+                // captured by a final VarLenSlice constructor.\n+                split_ctors.extend(\n+                    (self_prefix + self_suffix..max_prefix_len + max_suffix_len).map(FixedLenSlice),\n+                );\n+                split_ctors.push(VarLenSlice(max_prefix_len, max_suffix_len));\n             }\n             // Any other constructor can be used unchanged.\n             _ => split_ctors.push(ctor),"}, {"sha": "af7fd53a1f1e916dc505338cf469b4183ae8a094", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs?ref=f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "patch": "@@ -2,7 +2,7 @@\n \n fn check(list: &[Option<()>]) {\n     match list {\n-    //~^ ERROR `&[_, Some(_), None, _]` not covered\n+    //~^ ERROR `&[_, Some(_), .., None, _]` not covered\n         &[] => {},\n         &[_] => {},\n         &[_, _] => {},"}, {"sha": "72ae5d5fe3b33e172a1a499ee984a3d1ecc2c149", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `&[_, Some(_), None, _]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, Some(_), .., None, _]` not covered\n   --> $DIR/match-slice-patterns.rs:4:11\n    |\n LL |     match list {\n-   |           ^^^^ pattern `&[_, Some(_), None, _]` not covered\n+   |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "da2d40caf1a4026b44558c17a383c868f554d32b", "filename": "src/test/ui/pattern/usefulness/slice-patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs?ref=f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         [.., false] => {}\n     }\n     match s {\n-    //~^ ERROR `&[false, true]` not covered\n+    //~^ ERROR `&[false, .., true]` not covered\n         [] => {}\n         [true, ..] => {}\n         [.., false] => {}\n@@ -57,18 +57,18 @@ fn main() {\n         [_] => {}\n     }\n     match s {\n-    //~^ ERROR `&[false]` not covered\n+    //~^ ERROR `&[false, ..]` not covered\n         [] => {}\n         [true, ..] => {}\n     }\n     match s {\n-    //~^ ERROR `&[false, _]` not covered\n+    //~^ ERROR `&[false, _, ..]` not covered\n         [] => {}\n         [_] => {}\n         [true, ..] => {}\n     }\n     match s {\n-    //~^ ERROR `&[_, false]` not covered\n+    //~^ ERROR `&[_, .., false]` not covered\n         [] => {}\n         [_] => {}\n         [.., true] => {}\n@@ -94,14 +94,14 @@ fn main() {\n         [..] => {}\n     }\n     match s {\n-    //~^ ERROR `&[_, _, true]` not covered\n+    //~^ ERROR `&[_, _, .., true]` not covered\n         [] => {}\n         [_] => {}\n         [_, _] => {}\n         [.., false] => {}\n     }\n     match s {\n-    //~^ ERROR `&[true, _, _]` not covered\n+    //~^ ERROR `&[true, _, .., _]` not covered\n         [] => {}\n         [_] => {}\n         [_, _] => {}"}, {"sha": "6afe4705b0e694c60b3943565c2a62e45a4c0f72", "filename": "src/test/ui/pattern/usefulness/slice-patterns.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f774eb69fd19cabaa17dfe91dd0a1b23a2dce842/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr?ref=f774eb69fd19cabaa17dfe91dd0a1b23a2dce842", "patch": "@@ -14,11 +14,11 @@ LL |     match s3 {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[false, true]` not covered\n+error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns.rs:39:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[false, true]` not covered\n+   |           ^ pattern `&[false, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n@@ -46,27 +46,27 @@ LL |     match s {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[false]` not covered\n+error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns.rs:59:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[false]` not covered\n+   |           ^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[false, _]` not covered\n+error[E0004]: non-exhaustive patterns: `&[false, _, ..]` not covered\n   --> $DIR/slice-patterns.rs:64:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[false, _]` not covered\n+   |           ^ pattern `&[false, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[_, false]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, .., false]` not covered\n   --> $DIR/slice-patterns.rs:70:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[_, false]` not covered\n+   |           ^ pattern `&[_, .., false]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n@@ -112,19 +112,19 @@ error: unreachable pattern\n LL |         [false, true] => {}\n    |         ^^^^^^^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `&[_, _, true]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, _, .., true]` not covered\n   --> $DIR/slice-patterns.rs:96:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[_, _, true]` not covered\n+   |           ^ pattern `&[_, _, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[true, _, _]` not covered\n+error[E0004]: non-exhaustive patterns: `&[true, _, .., _]` not covered\n   --> $DIR/slice-patterns.rs:103:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[true, _, _]` not covered\n+   |           ^ pattern `&[true, _, .., _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}