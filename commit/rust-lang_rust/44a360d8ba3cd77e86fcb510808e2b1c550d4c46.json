{"sha": "44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTM2MGQ4YmEzY2Q3N2U4NmZjYjUxMDgwOGUyYjFjNTUwZDRjNDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-28T14:11:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-28T14:11:48Z"}, "message": "Merge pull request #316 from solson/priroda\n\nFix relocation copying in overlapping copies", "tree": {"sha": "a9a59063b49dd176107e30694c42d49596a6f390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a59063b49dd176107e30694c42d49596a6f390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "html_url": "https://github.com/rust-lang/rust/commit/44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93462a8db2794151a653cc0c01c87216c0c3457", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93462a8db2794151a653cc0c01c87216c0c3457", "html_url": "https://github.com/rust-lang/rust/commit/b93462a8db2794151a653cc0c01c87216c0c3457"}, {"sha": "385b5b9fd138a9d27d05c21876665fdc5dca052a", "url": "https://api.github.com/repos/rust-lang/rust/commits/385b5b9fd138a9d27d05c21876665fdc5dca052a", "html_url": "https://github.com/rust-lang/rust/commit/385b5b9fd138a9d27d05c21876665fdc5dca052a"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "852a4cbe2aa8ac2303c127287d26ac3962c061aa", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "patch": "@@ -6,11 +6,8 @@\n // From rustc.\n #[macro_use]\n extern crate log;\n-extern crate log_settings;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_const_math;\n-extern crate rustc_data_structures;\n extern crate syntax;\n \n use rustc::ty::{self, TyCtxt};\n@@ -146,9 +143,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n }\n \n-struct Evaluator;\n+pub struct Evaluator;\n #[derive(Default)]\n-struct EvaluatorData {\n+pub struct EvaluatorData {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, MemoryPointer>,\n@@ -163,7 +160,7 @@ pub struct TlsEntry<'tcx> {\n }\n \n #[derive(Default)]\n-struct MemoryData<'tcx> {\n+pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n "}, {"sha": "34de9596f246b4d160a01b3fc50ef7157b5fd496", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "patch": "@@ -79,7 +79,7 @@ impl LockInfo {\n pub struct AllocId(u64);\n \n #[derive(Debug)]\n-enum AllocIdKind {\n+pub enum AllocIdKind {\n     /// We can't ever have more than `usize::max_value` functions at the same time\n     /// since we never \"deallocate\" functions\n     Function(usize),\n@@ -89,7 +89,7 @@ enum AllocIdKind {\n }\n \n impl AllocIdKind {\n-    fn into_alloc_id(self) -> AllocId {\n+    pub fn into_alloc_id(self) -> AllocId {\n         match self {\n             AllocIdKind::Function(n) => AllocId(n as u64),\n             AllocIdKind::Runtime(n) => AllocId((1 << 63) | n),\n@@ -103,10 +103,10 @@ impl AllocId {\n         self.0 >> 63\n     }\n     /// Yields everything but the discriminant bits\n-    fn index(self) -> u64 {\n+    pub fn index(self) -> u64 {\n         self.0 & ((1 << 63) - 1)\n     }\n-    fn into_alloc_id_kind(self) -> AllocIdKind {\n+    pub fn into_alloc_id_kind(self) -> AllocIdKind {\n         match self.discriminant() {\n             0 => AllocIdKind::Function(self.index() as usize),\n             1 => AllocIdKind::Runtime(self.index()),\n@@ -1088,6 +1088,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         let dest = dest.to_ptr()?;\n         self.check_relocation_edges(src, size)?;\n \n+        // first copy the relocations to a temporary buffer, because\n+        // `get_bytes_mut` will clear the relocations, which is correct,\n+        // since we don't want to keep any relocations at the target.\n+\n+        let relocations: Vec<_> = self.relocations(src, size)?\n+            .map(|(&offset, &alloc_id)| {\n+                // Update relocation offsets for the new positions in the destination allocation.\n+                (offset + dest.offset - src.offset, alloc_id)\n+            })\n+            .collect();\n+\n         let src_bytes = self.get_bytes_unchecked(src, size, align)?.as_ptr();\n         let dest_bytes = self.get_bytes_mut(dest, size, align)?.as_mut_ptr();\n \n@@ -1113,7 +1124,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n \n         self.copy_undef_mask(src, dest, size)?;\n-        self.copy_relocations(src, dest, size)?;\n+        // copy back the relocations\n+        self.get_mut(dest.alloc_id)?.relocations.extend(relocations);\n \n         Ok(())\n     }\n@@ -1388,22 +1400,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n         Ok(())\n     }\n-\n-    fn copy_relocations(\n-        &mut self,\n-        src: MemoryPointer,\n-        dest: MemoryPointer,\n-        size: u64,\n-    ) -> EvalResult<'tcx> {\n-        let relocations: Vec<_> = self.relocations(src, size)?\n-            .map(|(&offset, &alloc_id)| {\n-                // Update relocation offsets for the new positions in the destination allocation.\n-                (offset + dest.offset - src.offset, alloc_id)\n-            })\n-            .collect();\n-        self.get_mut(dest.alloc_id)?.relocations.extend(relocations);\n-        Ok(())\n-    }\n }\n \n /// Undefined bytes"}, {"sha": "603451a9442545ef1e62a1e535a72b5182a5775c", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "patch": "@@ -27,7 +27,7 @@ pub use self::eval_context::{EvalContext, Frame, ResourceLimits, StackPopCleanup\n \n pub use self::lvalue::{Lvalue, LvalueExtra, GlobalId};\n \n-pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory};\n+pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory, AllocIdKind};\n \n use self::memory::{PointerArithmetic, Lock, AccessKind};\n "}, {"sha": "55e6b07a6585467d8bbef34fd510f9c37a486146", "filename": "tests/run-pass/btreemap.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a360d8ba3cd77e86fcb510808e2b1c550d4c46/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "patch": "@@ -0,0 +1,17 @@\n+// mir validation can't cope with `mem::uninitialized::<SomeEnum>()`\n+// compile-flags: -Zmir-emit-validate=0\n+\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+pub enum Foo {\n+    A(&'static str),\n+    _B,\n+    _C,\n+}\n+\n+pub fn main() {\n+    let mut b = std::collections::BTreeSet::new();\n+    b.insert(Foo::A(\"\\'\"));\n+    b.insert(Foo::A(\"/=\"));\n+    b.insert(Foo::A(\"#\"));\n+    b.insert(Foo::A(\"0o\"));\n+}"}]}