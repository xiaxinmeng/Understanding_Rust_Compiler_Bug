{"sha": "e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDA5MzBkOWM2NDc4ZjdhYTA2OTQwMWZiN2UyOGFiN2M4MGZkMTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T23:19:14Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T23:19:14Z"}, "message": "Merge #316\n\n316: Fix handling of nested self in paths r=matklad a=DJMcNab\n\nSee https://github.com/rust-analyzer/rust-analyzer/issues/231#issuecomment-442449505.\n\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "4e71d0d217137babb706f4277696deaa24c511d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e71d0d217137babb706f4277696deaa24c511d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "html_url": "https://github.com/rust-lang/rust/commit/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f2581a4a2988aca2ac3953b7c5b3b0cbd4934eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2581a4a2988aca2ac3953b7c5b3b0cbd4934eea", "html_url": "https://github.com/rust-lang/rust/commit/f2581a4a2988aca2ac3953b7c5b3b0cbd4934eea"}, {"sha": "bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "html_url": "https://github.com/rust-lang/rust/commit/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "3e29c39541ab489423786d8fb978f566b6aff8ce", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "patch": "@@ -43,6 +43,25 @@ fn item_map_smoke_test() {\n     assert!(resolution.def_id.is_some());\n }\n \n+#[test]\n+fn test_self() {\n+    let (item_map, module_id) = item_map(\n+        \"\n+            //- /lib.rs\n+            mod foo;\n+            use crate::foo::bar::Baz::{self};\n+            <|>\n+            //- /foo/mod.rs\n+            pub mod bar;\n+            //- /foo/bar.rs\n+            pub struct Baz;\n+        \",\n+    );\n+    let name = SmolStr::from(\"Baz\");\n+    let resolution = &item_map.per_module[&module_id].items[&name];\n+    assert!(resolution.def_id.is_some());\n+}\n+\n #[test]\n fn item_map_across_crates() {\n     let (mut db, sr) = MockDatabase::with_files("}, {"sha": "e04d00900aa8b1de0976260288beeb5907e238ae", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "patch": "@@ -76,17 +76,32 @@ fn expand_use_tree(\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n+            // E.g. use something::{{{inner}}};\n             None => prefix,\n+            // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n+            // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n             Some(path) => match convert_path(prefix, path) {\n                 Some(it) => Some(it),\n                 None => return, // TODO: report errors somewhere\n             },\n         };\n-        for tree in use_tree_list.use_trees() {\n-            expand_use_tree(prefix.clone(), tree, cb);\n+        for child_tree in use_tree_list.use_trees() {\n+            expand_use_tree(prefix.clone(), child_tree, cb);\n         }\n     } else {\n         if let Some(ast_path) = tree.path() {\n+            // Handle self in a path.\n+            // E.g. `use something::{self, <...>}`\n+            if ast_path.qualifier().is_none() {\n+                if let Some(segment) = ast_path.segment() {\n+                    if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n+                        if let Some(prefix) = prefix {\n+                            cb(prefix, Some(segment.syntax().range()));\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n             if let Some(path) = convert_path(prefix, ast_path) {\n                 let range = if tree.has_star() {\n                     None\n@@ -96,6 +111,8 @@ fn expand_use_tree(\n                 };\n                 cb(path, range)\n             }\n+            // TODO: report errors somewhere\n+            // We get here if we do\n         }\n     }\n }"}, {"sha": "f12479fb46e19658d96ad6984e1df2fae0dbc574", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "patch": "@@ -284,7 +284,7 @@ impl<'a> IfExpr<'a> {\n     }\n }\n \n-#[derive(Debug, Clone, Copy)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum PathSegmentKind<'a> {\n     Name(NameRef<'a>),\n     SelfKw,"}]}