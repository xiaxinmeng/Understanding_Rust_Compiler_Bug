{"sha": "e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWZjMDM3MDE4OGVmZjBiZDNlNmYyN2Y3MmJhNGRlMGQxYTZjMjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-17T13:12:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T16:32:36Z"}, "message": "Various minor cases where errors are reported in slightly different ways.", "tree": {"sha": "50c83f1c7f748f75453ec76bf8df91c5595b2f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50c83f1c7f748f75453ec76bf8df91c5595b2f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "html_url": "https://github.com/rust-lang/rust/commit/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8ca53669e71481201892e37ec57939e5f1ec85", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ca53669e71481201892e37ec57939e5f1ec85", "html_url": "https://github.com/rust-lang/rust/commit/7f8ca53669e71481201892e37ec57939e5f1ec85"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "d5a1040d4b4d929c8b5bac5b21d8fbdd78f7aede", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "patch": "@@ -8,17 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test the mechanism for warning about possible missing `self` declarations.\n+\n trait CtxtFn {\n     fn f8(self, uint) -> uint;\n-    fn f9(uint) -> uint; //~ NOTE candidate #\n+    fn f9(uint) -> uint; //~ NOTE candidate\n }\n \n trait OtherTrait {\n-    fn f9(uint) -> uint; //~ NOTE candidate #\n+    fn f9(uint) -> uint; //~ NOTE candidate\n }\n \n-trait UnusedTrait { // This should never show up as a candidate\n-    fn f9(uint) -> uint;\n+// Note: this trait is not implemented, but we can't really tell\n+// whether or not an impl would match anyhow without a self\n+// declaration to match against, so we wind up printing it as a\n+// candidate. This seems not unreasonable -- perhaps the user meant to\n+// implement it, after all.\n+trait UnusedTrait {\n+    fn f9(uint) -> uint; //~ NOTE candidate\n }\n \n impl CtxtFn for uint {\n@@ -40,13 +47,13 @@ impl OtherTrait for uint {\n struct MyInt(int);\n \n impl MyInt {\n-    fn fff(i: int) -> int { //~ NOTE candidate #1 is `MyInt::fff`\n+    fn fff(i: int) -> int { //~ NOTE candidate\n         i\n     }\n }\n \n trait ManyImplTrait {\n-    fn is_str() -> bool { //~ NOTE candidate #1 is\n+    fn is_str() -> bool { //~ NOTE candidate\n         false\n     }\n }"}, {"sha": "44ee5002dce3d409a2d391ecd0e732dede7a7e20", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "patch": "@@ -14,7 +14,7 @@ trait add {\n }\n \n fn do_add(x: Box<add+'static>, y: Box<add+'static>) -> Box<add+'static> {\n-    x.plus(y) //~ ERROR cannot call a method whose type contains a self-type through an object\n+    x.plus(y) //~ ERROR E0038\n }\n \n fn main() {}"}, {"sha": "0e1e66b40ce33060c5fb99b7754616d05eeae8d3", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "patch": "@@ -19,6 +19,6 @@ impl Drop for r {\n \n fn main() {\n     let i = box r { b: true };\n-    let _j = i.clone(); //~ ERROR not implemented\n+    let _j = i.clone(); //~ ERROR not implement\n     println!(\"{}\", i);\n }"}, {"sha": "62fabc0b33f3db18f7bd13400f79f3879ba022e0", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "patch": "@@ -35,8 +35,8 @@ fn main() {\n     let r1 = vec!(box r { i: i1 });\n     let r2 = vec!(box r { i: i2 });\n     f(r1.clone(), r2.clone());\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented\n-    //~^^ ERROR the trait `core::clone::Clone` is not implemented\n+    //~^ ERROR does not implement any method in scope named `clone`\n+    //~^^ ERROR does not implement any method in scope named `clone`\n     println!(\"{}\", (r2, i1.get()));\n     println!(\"{}\", (r1, i2.get()));\n }"}, {"sha": "6221806642c990c6d4dadfe39ed064565aa66d04", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=e09fc0370188eff0bd3e6f27f72ba4de0d1a6c24", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[deriving(Show)]\n struct r {\n   i:int\n }\n@@ -23,7 +24,6 @@ fn main() {\n     let i = vec!(r(0));\n     let j = vec!(r(1));\n     let k = i + j;\n-    //~^ ERROR not implemented\n+    //~^ ERROR binary operation `+` cannot be applied to type\n     println!(\"{}\", j);\n-    //~^ ERROR not implemented\n }"}]}