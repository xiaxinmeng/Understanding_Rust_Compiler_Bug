{"sha": "8d3fd03855c597ebaf81d727bae76217237f0a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkM2ZkMDM4NTVjNTk3ZWJhZjgxZDcyN2JhZTc2MjE3MjM3ZjBhM2Y=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-09-04T14:16:25Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-09-04T14:16:25Z"}, "message": "Clean up thread-local storage docs\n\n`std` no longer contains an implementation of scoped TLS.", "tree": {"sha": "f17c59a19e0a9033ddc55e982ae0b4776338419c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17c59a19e0a9033ddc55e982ae0b4776338419c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3fd03855c597ebaf81d727bae76217237f0a3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXzCzvAAoJENpc3BX5vtsrIt4P/0iv9HFuOha6VRx4B64C0/FE\nlINgHBixK9h7zvOupK0hX472jUgj5rGFWmrjtFn1p3M2Gin1+vFo+6faNQYf2WQn\niTu61sFcfJNd4TOkfGtS7dm2lOba5UGgmTLAbAMElFi4DGbJALjxsOPMKXQial8c\n9c1UeAYeQVH/qBMpvDppPtPJRArqkM/7LfivPhE6WxIjDOBmgiMJKBYeD4PeiyHk\n5gVeuIbVVGT77aCcWfE1fZMeQS1kOOiBtYa70+xIJMLutua0Do4b3hYKCOruog/a\njOzsVZOSbV9KOA0mOK23czGMETuevPwcaYQrJ6qo1dX8QUCJf6SjHIx7SnREpZXp\nIxab7b6ORxG9OehQvhhKfbdBJQ5tEdzez7Z/S57MQhpc2xgo5RXptBS66tvUjiS3\nCWtM9mUfsY9Rmvm9iUs3ox4ypQU0QdtGtmAGxKULJg0V7xXz0nSXW/2UFXRXmgqf\nYqTTumhbJE9rCpr6HK0eTgTwWd3i5UPGUxbpoK1Z2JiCDNjeedc2PiMnxLIUZ6H2\nAf/c9lXo/R4yJoWWKDX3gJL41UCdFZOdi36F79HtmMzjs2feJpAVYX3tbeDMrLnd\n1Il/WgdQMIjE6a/C3QwktaMYF0cj44PBMukdrDBTf55fc56ILdwHLz7YM7ApCUYc\nCD1GV0W75wmKYBoUTk9d\n=mkAn\n-----END PGP SIGNATURE-----", "payload": "tree f17c59a19e0a9033ddc55e982ae0b4776338419c\nparent e77d86c142ae668038dd43594d04022cbd6bf4d8\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1472998585 -0400\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1472998585 -0400\n\nClean up thread-local storage docs\n\n`std` no longer contains an implementation of scoped TLS.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3fd03855c597ebaf81d727bae76217237f0a3f", "html_url": "https://github.com/rust-lang/rust/commit/8d3fd03855c597ebaf81d727bae76217237f0a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3fd03855c597ebaf81d727bae76217237f0a3f/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77d86c142ae668038dd43594d04022cbd6bf4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77d86c142ae668038dd43594d04022cbd6bf4d8", "html_url": "https://github.com/rust-lang/rust/commit/e77d86c142ae668038dd43594d04022cbd6bf4d8"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "d8e021bb04ff9d9aeaead09365b762e20c7401cf", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8d3fd03855c597ebaf81d727bae76217237f0a3f/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3fd03855c597ebaf81d727bae76217237f0a3f/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=8d3fd03855c597ebaf81d727bae76217237f0a3f", "patch": "@@ -135,29 +135,24 @@\n //!\n //! ## Thread-local storage\n //!\n-//! This module also provides an implementation of thread local storage for Rust\n-//! programs. Thread local storage is a method of storing data into a global\n-//! variable which each thread in the program will have its own copy of.\n+//! This module also provides an implementation of thread-local storage for Rust\n+//! programs. Thread-local storage is a method of storing data into a global\n+//! variable that each thread in the program will have its own copy of.\n //! Threads do not share this data, so accesses do not need to be synchronized.\n //!\n-//! At a high level, this module provides two variants of storage:\n-//!\n-//! * Owned thread-local storage. This is a type of thread local key which\n-//!   owns the value that it contains, and will destroy the value when the\n-//!   thread exits. This variant is created with the `thread_local!` macro and\n-//!   can contain any value which is `'static` (no borrowed pointers).\n-//!\n-//! * Scoped thread-local storage. This type of key is used to store a reference\n-//!   to a value into local storage temporarily for the scope of a function\n-//!   call. There are no restrictions on what types of values can be placed\n-//!   into this key.\n-//!\n-//! Both forms of thread local storage provide an accessor function, `with`,\n-//! which will yield a shared reference to the value to the specified\n-//! closure. Thread-local keys only allow shared access to values as there is no\n-//! way to guarantee uniqueness if a mutable borrow was allowed. Most values\n+//! A thread-local key owns the value it contains and will destroy the value when the\n+//! thread exits. It is created with the [`thread_local!`] macro and can contain any\n+//! value that is `'static` (no borrowed pointers). It provides an accessor function,\n+//! [`with`], that yields a shared reference to the value to the specified\n+//! closure. Thread-local keys allow only shared access to values, as there would be no\n+//! way to guarantee uniqueness if mutable borrows were allowed. Most values\n //! will want to make use of some form of **interior mutability** through the\n-//! `Cell` or `RefCell` types.\n+//! [`Cell`] or [`RefCell`] types.\n+//!\n+//! [`Cell`]: ../cell/struct.Cell.html\n+//! [`RefCell`]: ../cell/struct.RefCell.html\n+//! [`thread_local!`]: ../macro.thread_local!.html\n+//! [`with`]: struct.LocalKey.html#method.with\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}