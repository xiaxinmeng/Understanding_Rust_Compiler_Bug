{"sha": "dd9e5892f4d5b678fd645807f8fee2770ec15438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOWU1ODkyZjRkNWI2NzhmZDY0NTgwN2Y4ZmVlMjc3MGVjMTU0Mzg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-24T23:13:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-24T23:13:12Z"}, "message": "Rollup merge of #40739 - cuviper:hash-rev-drop, r=arthurprs\n\nSimplify hash table drops\n\nThis replaces the `std::collections::hash::table::RevMoveBuckets`\niterator with a simpler `while` loop.  This iterator was only used for\ndropping the remaining elements of a `RawTable`, so instead we can just\nloop through directly and drop them in place.\n\nThis should be functionally equivalent to the former code, but a little\neasier to read.  I was hoping it might have some performance benefit\ntoo, but it seems the optimizer was already good enough to see through\nthe iterator -- the generated code is nearly the same.  Maybe it will\nstill help if an element type has more complicated drop code.", "tree": {"sha": "b53e461c36fca2109df84011a29eef0b781952e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b53e461c36fca2109df84011a29eef0b781952e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9e5892f4d5b678fd645807f8fee2770ec15438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9e5892f4d5b678fd645807f8fee2770ec15438", "html_url": "https://github.com/rust-lang/rust/commit/dd9e5892f4d5b678fd645807f8fee2770ec15438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9e5892f4d5b678fd645807f8fee2770ec15438/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "html_url": "https://github.com/rust-lang/rust/commit/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b"}, {"sha": "a033f1a8eeb55bdf93749a5d0c4d803bbe0d8dfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a033f1a8eeb55bdf93749a5d0c4d803bbe0d8dfc", "html_url": "https://github.com/rust-lang/rust/commit/a033f1a8eeb55bdf93749a5d0c4d803bbe0d8dfc"}], "stats": {"total": 65, "additions": 18, "deletions": 47}, "files": [{"sha": "da5fb1a47333ea1757bfa47845fec5baeca9324f", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dd9e5892f4d5b678fd645807f8fee2770ec15438/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9e5892f4d5b678fd645807f8fee2770ec15438/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=dd9e5892f4d5b678fd645807f8fee2770ec15438", "patch": "@@ -896,15 +896,23 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n-    /// Returns an iterator that copies out each entry. Used while the table\n-    /// is being dropped.\n-    unsafe fn rev_move_buckets(&mut self) -> RevMoveBuckets<K, V> {\n-        let raw_bucket = self.first_bucket_raw();\n-        RevMoveBuckets {\n-            raw: raw_bucket.offset(self.capacity as isize),\n-            hashes_end: raw_bucket.hash,\n-            elems_left: self.size,\n-            marker: marker::PhantomData,\n+    /// Drops buckets in reverse order. It leaves the table in an inconsistent\n+    /// state and should only be used for dropping the table's remaining\n+    /// entries. It's used in the implementation of Drop.\n+    unsafe fn rev_drop_buckets(&mut self) {\n+        let first_raw = self.first_bucket_raw();\n+        let mut raw = first_raw.offset(self.capacity as isize);\n+        let mut elems_left = self.size;\n+\n+        while elems_left != 0 {\n+            debug_assert!(raw.hash != first_raw.hash);\n+\n+            raw = raw.offset(-1);\n+\n+            if *raw.hash != EMPTY_BUCKET {\n+                elems_left -= 1;\n+                ptr::drop_in_place(raw.pair as *mut (K, V));\n+            }\n         }\n     }\n \n@@ -964,43 +972,6 @@ impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {\n     }\n }\n \n-/// An iterator that moves out buckets in reverse order. It leaves the table\n-/// in an inconsistent state and should only be used for dropping\n-/// the table's remaining entries. It's used in the implementation of Drop.\n-struct RevMoveBuckets<'a, K, V> {\n-    raw: RawBucket<K, V>,\n-    hashes_end: *mut HashUint,\n-    elems_left: usize,\n-\n-    // As above, `&'a (K,V)` would seem better, but we often use\n-    // 'static for the lifetime, and this is not a publicly exposed\n-    // type.\n-    marker: marker::PhantomData<&'a ()>,\n-}\n-\n-impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {\n-    type Item = (K, V);\n-\n-    fn next(&mut self) -> Option<(K, V)> {\n-        if self.elems_left == 0 {\n-            return None;\n-        }\n-\n-        loop {\n-            debug_assert!(self.raw.hash != self.hashes_end);\n-\n-            unsafe {\n-                self.raw = self.raw.offset(-1);\n-\n-                if *self.raw.hash != EMPTY_BUCKET {\n-                    self.elems_left -= 1;\n-                    return Some(ptr::read(self.raw.pair));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n /// Iterator over shared references to entries in a table.\n pub struct Iter<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'a, K, V>,\n@@ -1227,7 +1198,7 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n         unsafe {\n             if needs_drop::<(K, V)>() {\n                 // avoid linear runtime for types that don't need drop\n-                for _ in self.rev_move_buckets() {}\n+                self.rev_drop_buckets();\n             }\n         }\n "}]}