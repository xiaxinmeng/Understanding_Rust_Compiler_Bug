{"sha": "c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "node_id": "C_kwDOAAsO6NoAKGM0NDNmOGZiOTVkYTE2Y2I5YmQzMGJjOTY2MmY1MDZhOWU5YzVhNWM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-20T01:02:49Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-20T01:02:49Z"}, "message": "Fix `strlen_on_c_strings` when not used with a full path", "tree": {"sha": "aa3f1bc5a6f053d82178863ab7034a38ffcb4234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3f1bc5a6f053d82178863ab7034a38ffcb4234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "html_url": "https://github.com/rust-lang/rust/commit/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38bd2514ad7d039f6836b0a05dda4dc5f0849942", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd2514ad7d039f6836b0a05dda4dc5f0849942", "html_url": "https://github.com/rust-lang/rust/commit/38bd2514ad7d039f6836b0a05dda4dc5f0849942"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "dc28bb974005d1445b437823f247767bbc4055c9", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::paths;\n-use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::ty::{is_type_diagnostic_item, is_type_ref_to_diagnostic_item};\n+use clippy_utils::match_libc_symbol;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -40,28 +40,23 @@ declare_lint_pass!(StrlenOnCStrings => [STRLEN_ON_C_STRINGS]);\n \n impl LateLintPass<'tcx> for StrlenOnCStrings {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n         if_chain! {\n+            if !expr.span.from_expansion();\n             if let hir::ExprKind::Call(func, [recv]) = expr.kind;\n-            if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = func.kind;\n-\n-            if (&paths::LIBC_STRLEN).iter().map(|x| Symbol::intern(x)).eq(\n-                path.segments.iter().map(|seg| seg.ident.name));\n-            if let hir::ExprKind::MethodCall(path, _, args, _) = recv.kind;\n-            if args.len() == 1;\n-            if !args.iter().any(|e| e.span.from_expansion());\n+            if let hir::ExprKind::Path(path) = &func.kind;\n+            if let Some(did) = cx.qpath_res(path, func.hir_id).opt_def_id();\n+            if match_libc_symbol(cx, did, \"strlen\");\n+            if let hir::ExprKind::MethodCall(path, _, [self_arg], _) = recv.kind;\n+            if !recv.span.from_expansion();\n             if path.ident.name == sym::as_ptr;\n             then {\n-                let cstring = &args[0];\n-                let ty = cx.typeck_results().expr_ty(cstring);\n-                let val_name = snippet_with_macro_callsite(cx, cstring.span, \"..\");\n-                let sugg = if is_type_diagnostic_item(cx, ty, sym::cstring_type){\n-                    format!(\"{}.as_bytes().len()\", val_name)\n-                } else if is_type_ref_to_diagnostic_item(cx, ty, sym::CStr){\n-                    format!(\"{}.to_bytes().len()\", val_name)\n+                let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n+                let mut app = Applicability::Unspecified;\n+                let val_name = snippet_with_context(cx, self_arg.span, expr.span.ctxt(), \"..\", &mut app).0;\n+                let method_name = if is_type_diagnostic_item(cx, ty, sym::cstring_type) {\n+                    \"as_bytes\"\n+                } else if is_type_diagnostic_item(cx, ty, sym::CStr) {\n+                    \"to_bytes\"\n                 } else {\n                     return;\n                 };\n@@ -72,7 +67,7 @@ impl LateLintPass<'tcx> for StrlenOnCStrings {\n                     expr.span,\n                     \"using `libc::strlen` on a `CString` or `CStr` value\",\n                     \"try this (you might also need to get rid of `unsafe` block in some cases):\",\n-                    sugg,\n+                    format!(\"{}.{}().len()\", val_name, method_name),\n                     Applicability::Unspecified // Sometimes unnecessary `unsafe` block\n                 );\n             }"}, {"sha": "f011380c127a25c10939ed22c1cb07796248e5a4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "patch": "@@ -1597,6 +1597,14 @@ pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -\n     syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().copied())\n }\n \n+/// Checks if the given `DefId` matches the `libc` item.\n+pub fn match_libc_symbol(cx: &LateContext<'_>, did: DefId, name: &str) -> bool {\n+    let path = cx.get_def_path(did);\n+    // libc is meant to be used as a flat list of names, but they're all actually defined in different\n+    // modules based on the target platform. Ignore everything but crate name and the item name.\n+    path.first().map_or(false, |s| s.as_str() == \"libc\") && path.last().map_or(false, |s| s.as_str() == name)\n+}\n+\n pub fn match_panic_call(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if let ExprKind::Call(func, [arg]) = expr.kind {\n         expr_path_res(cx, func)"}, {"sha": "3ffa548e4701f809a7f068454ca4796625376068", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "patch": "@@ -86,7 +86,6 @@ pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tup\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n-pub const LIBC_STRLEN: [&str; 2] = [\"libc\", \"strlen\"];\n #[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];"}, {"sha": "121ddf1b9b120efa021aa431e4198db62155eee5", "filename": "tests/ui/strlen_on_c_strings.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/tests%2Fui%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/tests%2Fui%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.rs?ref=c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "patch": "@@ -3,6 +3,7 @@\n #![feature(rustc_private)]\n extern crate libc;\n \n+use libc::strlen;\n use std::ffi::{CStr, CString};\n \n fn main() {\n@@ -13,4 +14,6 @@ fn main() {\n     // CStr\n     let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     let len = unsafe { libc::strlen(cstr.as_ptr()) };\n+\n+    let len = unsafe { strlen(cstr.as_ptr()) };\n }"}, {"sha": "5576d9d2676679776ec815b89d7e80812d17d48b", "filename": "tests/ui/strlen_on_c_strings.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/tests%2Fui%2Fstrlen_on_c_strings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c/tests%2Fui%2Fstrlen_on_c_strings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.stderr?ref=c443f8fb95da16cb9bd30bc9662f506a9e9c5a5c", "patch": "@@ -1,5 +1,5 @@\n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:11:24\n+  --> $DIR/strlen_on_c_strings.rs:12:24\n    |\n LL |     let len = unsafe { libc::strlen(cstring.as_ptr()) };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     let len = unsafe { cstring.as_bytes().len() };\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:15:24\n+  --> $DIR/strlen_on_c_strings.rs:16:24\n    |\n LL |     let len = unsafe { libc::strlen(cstr.as_ptr()) };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,5 +21,16 @@ help: try this (you might also need to get rid of `unsafe` block in some cases):\n LL |     let len = unsafe { cstr.to_bytes().len() };\n    |                        ~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 2 previous errors\n+error: using `libc::strlen` on a `CString` or `CStr` value\n+  --> $DIR/strlen_on_c_strings.rs:18:24\n+   |\n+LL |     let len = unsafe { strlen(cstr.as_ptr()) };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try this (you might also need to get rid of `unsafe` block in some cases):\n+   |\n+LL |     let len = unsafe { cstr.to_bytes().len() };\n+   |                        ~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 3 previous errors\n "}]}