{"sha": "b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MjNhMGY5ZWY0ODhjYTRjZDlmZjYyMGE0NDU2NmJiNDQxZWIyMWY=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-06-13T20:15:03Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:28Z"}, "message": "Split TyBareFn into TyFnDef and TyFnPtr.\n\nThere's a lot of stuff wrong with the representation of these types:\nTyFnDef doesn't actually uniquely identify a function, TyFnPtr is used to\nrepresent method calls, TyFnDef in the sub-expression of a cast isn't\ncorrectly reified, and probably some other stuff I haven't discovered yet.\nSplitting them seems like the right first step, though.", "tree": {"sha": "ae43c17551512f743c1de53035a7f523b32aa6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae43c17551512f743c1de53035a7f523b32aa6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "html_url": "https://github.com/rust-lang/rust/commit/b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b868411afee1208cfb18f7440df991b9f94265f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b868411afee1208cfb18f7440df991b9f94265f", "html_url": "https://github.com/rust-lang/rust/commit/4b868411afee1208cfb18f7440df991b9f94265f"}], "stats": {"total": 730, "additions": 406, "deletions": 324}, "files": [{"sha": "5f9fb791598d62f6f845749dead84401ce407ebb", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -44,7 +44,8 @@ enum RootUnsafeContext {\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyBareFn(_, ref f) => f.unsafety == hir::Unsafety::Unsafe,\n+        ty::TyFnDef(_, ref f) |\n+        ty::TyFnPtr(ref f) => f.unsafety == hir::Unsafety::Unsafe,\n         _ => false,\n     }\n }"}, {"sha": "a87ce1206b408f2217782d52cf772476d2238954", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -556,7 +556,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                callee, callee_ty);\n         let call_scope = self.tcx().region_maps.node_extent(call.id);\n         match callee_ty.sty {\n-            ty::TyBareFn(..) => {\n+            ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                 self.consume_expr(callee);\n             }\n             ty::TyError => { }"}, {"sha": "6c0dd9b608d5674e529f23d9082b015e15a3600a", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -161,7 +161,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TySlice(..) |\n             ty::TyRawPtr(..) |\n             ty::TyRef(..) |\n-            ty::TyBareFn(..) |\n+            ty::TyFnDef(..) |\n+            ty::TyFnPtr(_) |\n             ty::TyTrait(..) |\n             ty::TyStruct(..) |\n             ty::TyClosure(..) |"}, {"sha": "1293d8e833f0098b683db9eb8139386912c30ec5", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -12,7 +12,7 @@ use dep_graph::DepNode;\n use middle::def::Def;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n-use middle::ty::{TransmuteRestriction, TyCtxt, TyBareFn};\n+use middle::ty::{TransmuteRestriction, TyCtxt};\n use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n@@ -53,7 +53,7 @@ struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         let intrinsic = match self.tcx.lookup_item_type(def_id).ty.sty {\n-            ty::TyBareFn(_, ref bfty) => bfty.abi == RustIntrinsic,\n+            ty::TyFnDef(_, ref bfty) => bfty.abi == RustIntrinsic,\n             _ => return false\n         };\n         intrinsic && self.tcx.item_name(def_id).as_str() == \"transmute\"\n@@ -238,7 +238,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 Def::Fn(did) if self.def_id_is_transmute(did) => {\n                     let typ = self.tcx.node_id_to_type(expr.id);\n                     match typ.sty {\n-                        TyBareFn(_, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n+                        ty::TyFnDef(_, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n                             if let ty::FnConverging(to) = bare_fn_ty.sig.0.output {\n                                 let from = bare_fn_ty.sig.0.inputs[0];\n                                 self.check_transmute(expr.span, from, to, expr.id);"}, {"sha": "b79849e87ffacc3a50737646e003667fe324a280", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -301,7 +301,8 @@ fn ty_is_local_constructor<'tcx>(tcx: &TyCtxt<'tcx>,\n         ty::TyUint(..) |\n         ty::TyFloat(..) |\n         ty::TyStr |\n-        ty::TyBareFn(..) |\n+        ty::TyFnDef(..) |\n+        ty::TyFnPtr(_) |\n         ty::TyArray(..) |\n         ty::TySlice(..) |\n         ty::TyRawPtr(..) |"}, {"sha": "6cd85a522b5ff7a62df85b036c9c223aa9cc97f0", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1286,7 +1286,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::TyBareFn(_, &ty::BareFnTy {\n+            ty::TyFnDef(_, &ty::BareFnTy {\n+                unsafety: hir::Unsafety::Normal,\n+                abi: Abi::Rust,\n+                sig: ty::Binder(ty::FnSig {\n+                    inputs: _,\n+                    output: ty::FnConverging(_),\n+                    variadic: false\n+                })\n+            }) |\n+            ty::TyFnPtr(&ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -1646,7 +1655,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyInt(_) |\n             ty::TyBool |\n             ty::TyFloat(_) |\n-            ty::TyBareFn(..) |\n+            ty::TyFnDef(..) |\n+            ty::TyFnPtr(_) |\n             ty::TyChar => {\n                 // safe for everything\n                 ok_if(Vec::new())\n@@ -1850,7 +1860,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyInt(_) |\n             ty::TyBool |\n             ty::TyFloat(_) |\n-            ty::TyBareFn(..) |\n+            ty::TyFnDef(..) |\n+            ty::TyFnPtr(_) |\n             ty::TyStr |\n             ty::TyError |\n             ty::TyInfer(ty::IntVar(_)) |"}, {"sha": "ca614f84c0b4b144bde9a0628f507f85ee0e7df3", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -155,8 +155,8 @@ impl<'tcx> ty::TyS<'tcx> {\n                 match *adjustment {\n                     AdjustReifyFnPointer => {\n                         match self.sty {\n-                            ty::TyBareFn(Some(_), b) => {\n-                                cx.mk_fn(None, b)\n+                            ty::TyFnDef(_, b) => {\n+                                cx.mk_ty(ty::TyFnPtr(b))\n                             }\n                             _ => {\n                                 cx.sess.bug(\n@@ -168,7 +168,7 @@ impl<'tcx> ty::TyS<'tcx> {\n \n                     AdjustUnsafeFnPointer => {\n                         match self.sty {\n-                            ty::TyBareFn(None, b) => cx.safe_to_unsafe_fn_ty(b),\n+                            ty::TyFnPtr(b) => cx.safe_to_unsafe_fn_ty(b),\n                             ref b => {\n                                 cx.sess.bug(\n                                     &format!(\"AdjustUnsafeFnPointer adjustment on non-fn-ptr: \\"}, {"sha": "ac308f564340c318c934c7990a70f1d6e0ce465c", "filename": "src/librustc/middle/ty/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -69,7 +69,9 @@ impl<'tcx> CastTy<'tcx> {\n                 Some(CastTy::Int(IntTy::CEnum)),\n             ty::TyRawPtr(ref mt) => Some(CastTy::Ptr(mt)),\n             ty::TyRef(_, ref mt) => Some(CastTy::RPtr(mt)),\n-            ty::TyBareFn(..) => Some(CastTy::FnPtr),\n+            // FIXME: Treating TyFnDef as a pointer here is a bit dubious;\n+            // we should be coercing the operand to an actual pointer.\n+            ty::TyFnDef(..) | ty::TyFnPtr(..) => Some(CastTy::FnPtr),\n             _ => None,\n         }\n     }"}, {"sha": "47a15a14b41ee43fb74b2532e022ed7e4952b1b1", "filename": "src/librustc/middle/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -187,7 +187,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 // Scalar and unique types are sendable, and durable\n                 ty::TyInfer(ty::FreshIntTy(_)) | ty::TyInfer(ty::FreshFloatTy(_)) |\n                 ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-                ty::TyBareFn(..) | ty::TyChar => {\n+                ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar => {\n                     TC::None\n                 }\n "}, {"sha": "8d74c5f3193fc1be14628450fb74a95b0c603d28", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -734,8 +734,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn print_debug_stats(&self) {\n         sty_debug_print!(\n             self,\n-            TyEnum, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyBareFn, TyTrait,\n-            TyStruct, TyClosure, TyTuple, TyParam, TyInfer, TyProjection);\n+            TyEnum, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr,\n+            TyTrait, TyStruct, TyClosure, TyTuple, TyParam, TyInfer, TyProjection);\n \n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n         println!(\"BareFnTy interner: #{}\", self.bare_fn_interner.borrow().len());\n@@ -792,12 +792,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Create an unsafe fn ty based on a safe fn ty.\n     pub fn safe_to_unsafe_fn_ty(&self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> {\n         assert_eq!(bare_fn.unsafety, hir::Unsafety::Normal);\n-        let unsafe_fn_ty_a = self.mk_bare_fn(ty::BareFnTy {\n+        self.mk_fn_ptr(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n             abi: bare_fn.abi,\n             sig: bare_fn.sig.clone()\n-        });\n-        self.mk_fn(None, unsafe_fn_ty_a)\n+        })\n     }\n \n     pub fn mk_bare_fn(&self, bare_fn: BareFnTy<'tcx>) -> &'tcx BareFnTy<'tcx> {\n@@ -946,26 +945,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(TyBool)\n     }\n \n-    pub fn mk_fn(&self,\n-                 opt_def_id: Option<DefId>,\n-                 fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(TyBareFn(opt_def_id, fty))\n+    pub fn mk_fn_def(&self, def_id: DefId,\n+                     fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(TyFnDef(def_id, self.mk_bare_fn(fty)))\n+    }\n+\n+    pub fn mk_fn_ptr(&self, fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(TyFnPtr(self.mk_bare_fn(fty)))\n     }\n \n     pub fn mk_ctor_fn(&self,\n                       def_id: DefId,\n                       input_tys: &[Ty<'tcx>],\n                       output: Ty<'tcx>) -> Ty<'tcx> {\n         let input_args = input_tys.iter().cloned().collect();\n-        self.mk_fn(Some(def_id), self.mk_bare_fn(BareFnTy {\n+        self.mk_fn_def(def_id, BareFnTy {\n             unsafety: hir::Unsafety::Normal,\n             abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: input_args,\n                 output: ty::FnConverging(output),\n                 variadic: false\n             })\n-        }))\n+        })\n     }\n \n     pub fn mk_trait(&self,"}, {"sha": "1033af5f331a7c5ad932f44292c54d2131dec427", "filename": "src/librustc/middle/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -223,8 +223,8 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::TySlice(_) => \"slice\".to_string(),\n             ty::TyRawPtr(_) => \"*-ptr\".to_string(),\n             ty::TyRef(_, _) => \"&-ptr\".to_string(),\n-            ty::TyBareFn(Some(_), _) => format!(\"fn item\"),\n-            ty::TyBareFn(None, _) => \"fn pointer\".to_string(),\n+            ty::TyFnDef(..) => format!(\"fn item\"),\n+            ty::TyFnPtr(_) => \"fn pointer\".to_string(),\n             ty::TyTrait(ref inner) => {\n                 format!(\"trait {}\", cx.item_path_str(inner.principal_def_id()))\n             }"}, {"sha": "285fa5d8827bdd0cee0c2c3f020ca6e623e20254", "filename": "src/librustc/middle/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -83,7 +83,7 @@ pub fn simplify_type(tcx: &TyCtxt,\n         ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n-        ty::TyBareFn(_, ref f) => {\n+        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n         ty::TyProjection(_) | ty::TyParam(_) => {"}, {"sha": "04afb45bcf1750ae5d73828de438355bd33c3e73", "filename": "src/librustc/middle/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -134,7 +134,7 @@ impl FlagComputation {\n                 self.add_tys(&ts[..]);\n             }\n \n-            &ty::TyBareFn(_, ref f) => {\n+            &ty::TyFnDef(_, ref f) | &ty::TyFnPtr(ref f) => {\n                 self.add_fn_sig(&f.sig);\n             }\n         }"}, {"sha": "9439180a6cd211243727e1e7892140bc7294ca5e", "filename": "src/librustc/middle/ty/outlives.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -182,7 +182,8 @@ fn compute_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n         ty::TyRawPtr(..) |      // ...\n         ty::TyRef(..) |         // OutlivesReference\n         ty::TyTuple(..) |       // ...\n-        ty::TyBareFn(..) |      // OutlivesFunction (*)\n+        ty::TyFnDef(..) |       // OutlivesFunction (*)\n+        ty::TyFnPtr(_) |        // OutlivesFunction (*)\n         ty::TyTrait(..) |       // OutlivesObject, OutlivesFragment (*)\n         ty::TyError => {\n             // (*) Bare functions and traits are both binders. In the"}, {"sha": "4c146e9317435444401f5024dcd78230ec00cd19", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -568,11 +568,17 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             }\n         }\n \n-        (&ty::TyBareFn(a_opt_def_id, a_fty), &ty::TyBareFn(b_opt_def_id, b_fty))\n-            if a_opt_def_id == b_opt_def_id =>\n+        (&ty::TyFnDef(a_def_id, a_fty), &ty::TyFnDef(b_def_id, b_fty))\n+            if a_def_id == b_def_id =>\n         {\n             let fty = try!(relation.relate(a_fty, b_fty));\n-            Ok(tcx.mk_fn(a_opt_def_id, tcx.mk_bare_fn(fty)))\n+            Ok(tcx.mk_fn_def(a_def_id, fty))\n+        }\n+\n+        (&ty::TyFnPtr(a_fty), &ty::TyFnPtr(b_fty)) =>\n+        {\n+            let fty = try!(relation.relate(a_fty, b_fty));\n+            Ok(tcx.mk_fn_ptr(fty))\n         }\n \n         (&ty::TyProjection(ref a_data), &ty::TyProjection(ref b_data)) =>"}, {"sha": "b504bba01b90ef19843fffbdfde6577c17387bc7", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -282,9 +282,13 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             }\n             ty::TyTrait(ref trait_ty) => ty::TyTrait(trait_ty.fold_with(folder)),\n             ty::TyTuple(ref ts) => ty::TyTuple(ts.fold_with(folder)),\n-            ty::TyBareFn(opt_def_id, ref f) => {\n+            ty::TyFnDef(def_id, ref f) => {\n                 let bfn = f.fold_with(folder);\n-                ty::TyBareFn(opt_def_id, folder.tcx().mk_bare_fn(bfn))\n+                ty::TyFnDef(def_id, folder.tcx().mk_bare_fn(bfn))\n+            }\n+            ty::TyFnPtr(ref f) => {\n+                let bfn = f.fold_with(folder);\n+                ty::TyFnPtr(folder.tcx().mk_bare_fn(bfn))\n             }\n             ty::TyRef(r, ref tm) => {\n                 let r = r.fold_with(folder);\n@@ -318,7 +322,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyEnum(_tid, ref substs) => substs.visit_with(visitor),\n             ty::TyTrait(ref trait_ty) => trait_ty.visit_with(visitor),\n             ty::TyTuple(ref ts) => ts.visit_with(visitor),\n-            ty::TyBareFn(_opt_def_id, ref f) => f.visit_with(visitor),\n+            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n             ty::TyStruct(_did, ref substs) => substs.visit_with(visitor),\n             ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),"}, {"sha": "217ae8fd494f5c111807dc862e8b40ada9022efa", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -127,14 +127,16 @@ pub enum TypeVariants<'tcx> {\n     /// `&a mut T` or `&'a T`.\n     TyRef(&'tcx Region, TypeAndMut<'tcx>),\n \n-    /// If the def-id is Some(_), then this is the type of a specific\n-    /// fn item. Otherwise, if None(_), it is a fn pointer type.\n-    ///\n-    /// FIXME: Conflating function pointers and the type of a\n-    /// function is probably a terrible idea; a function pointer is a\n-    /// value with a specific type, but a function can be polymorphic\n-    /// or dynamically dispatched.\n-    TyBareFn(Option<DefId>, &'tcx BareFnTy<'tcx>),\n+    /// The anonymous type of a function declaration/definition. Each\n+    /// function has a unique type.\n+    /// FIXME: Does this need to include substitutions?\n+    /// `g::<i32>` and `g::<u32>` should have different types.\n+    TyFnDef(DefId, &'tcx BareFnTy<'tcx>),\n+\n+    /// A pointer to a function.  Written as `fn() -> i32`.\n+    /// FIXME: This is currently also used to represent the callee of a method;\n+    /// see ty::MethodCallee etc.\n+    TyFnPtr(&'tcx BareFnTy<'tcx>),\n \n     /// A trait, defined with `trait`.\n     TyTrait(Box<TraitTy<'tcx>>),\n@@ -1029,7 +1031,7 @@ impl<'tcx> TyS<'tcx> {\n         match self.sty {\n             TyBool | TyChar | TyInt(_) | TyFloat(_) | TyUint(_) |\n             TyInfer(IntVar(_)) | TyInfer(FloatVar(_)) |\n-            TyBareFn(..) | TyRawPtr(_) => true,\n+            TyFnDef(..) | TyFnPtr(_) | TyRawPtr(_) => true,\n             _ => false\n         }\n     }\n@@ -1080,20 +1082,6 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_bare_fn(&self) -> bool {\n-        match self.sty {\n-            TyBareFn(..) => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub fn is_bare_fn_item(&self) -> bool {\n-        match self.sty {\n-            TyBareFn(Some(_), _) => true,\n-            _ => false\n-        }\n-    }\n-\n     pub fn is_fp(&self) -> bool {\n         match self.sty {\n             TyInfer(FloatVar(_)) | TyFloat(_) => true,\n@@ -1154,15 +1142,15 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> {\n         match self.sty {\n-            TyBareFn(_, ref f) => &f.sig,\n+            TyFnDef(_, ref f) | TyFnPtr(ref f) => &f.sig,\n             _ => panic!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n         }\n     }\n \n     /// Returns the ABI of the given function.\n     pub fn fn_abi(&self) -> abi::Abi {\n         match self.sty {\n-            TyBareFn(_, ref f) => f.abi,\n+            TyFnDef(_, ref f) | TyFnPtr(ref f) => f.abi,\n             _ => panic!(\"Ty::fn_abi() called on non-fn type\"),\n         }\n     }\n@@ -1178,7 +1166,7 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn is_fn(&self) -> bool {\n         match self.sty {\n-            TyBareFn(..) => true,\n+            TyFnDef(..) | TyFnPtr(_) => true,\n             _ => false\n         }\n     }\n@@ -1224,7 +1212,8 @@ impl<'tcx> TyS<'tcx> {\n             TyProjection(ref data) => {\n                 data.trait_ref.substs.regions().as_slice().to_vec()\n             }\n-            TyBareFn(..) |\n+            TyFnDef(..) |\n+            TyFnPtr(_) |\n             TyBool |\n             TyChar |\n             TyInt(_) |"}, {"sha": "6947c7dd4dc10105e820ce1eae1da0431a835379", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -514,9 +514,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                         region(state, *r);\n                         mt(state, m);\n                     }\n-                    TyBareFn(opt_def_id, ref b) => {\n+                    TyFnDef(def_id, ref b) => {\n                         byte!(14);\n-                        hash!(opt_def_id);\n+                        hash!(def_id);\n+                        hash!(b.unsafety);\n+                        hash!(b.abi);\n+                        fn_sig(state, &b.sig);\n+                        return false;\n+                    }\n+                    TyFnPtr(ref b) => {\n+                        byte!(15);\n                         hash!(b.unsafety);\n                         hash!(b.abi);\n                         fn_sig(state, &b.sig);\n@@ -677,7 +684,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         // Fast-path for primitive types\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyRawPtr(..) | TyBareFn(..) | TyRef(_, TypeAndMut {\n+            TyRawPtr(..) | TyFnDef(..) | TyFnPtr(_) | TyRef(_, TypeAndMut {\n                 mutbl: hir::MutImmutable, ..\n             }) => Some(false),\n \n@@ -719,7 +726,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         // Fast-path for primitive types\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyBox(..) | TyRawPtr(..) | TyRef(..) | TyBareFn(..) |\n+            TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n             TyArray(..) | TyTuple(..) | TyClosure(..) => Some(true),\n \n             TyStr | TyTrait(..) | TySlice(_) => Some(false),"}, {"sha": "0d226e22db99afb46da26cba54a7067b1527c6db", "filename": "src/librustc/middle/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -98,7 +98,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n         ty::TyTuple(ref ts) => {\n             push_reversed(stack, ts);\n         }\n-        ty::TyBareFn(_, ref ft) => {\n+        ty::TyFnDef(_, ref ft) | ty::TyFnPtr(ref ft) => {\n             push_sig_subtypes(stack, &ft.sig);\n         }\n     }"}, {"sha": "5f81d27a1f688b23cbe06c24cecc1cf42d821c1b", "filename": "src/librustc/middle/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -354,8 +354,8 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n                     // WFedness.)\n                 }\n \n-                ty::TyBareFn(..) => {\n-                    // let the loop iterator into the argument/return\n+                ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n+                    // let the loop iterate into the argument/return\n                     // types appearing in the fn signature\n                 }\n "}, {"sha": "2bf8879f3a0b1d94e8097b548a38f30d696cdc02", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -13,7 +13,7 @@ use middle::def_id::DefId;\n use middle::subst::{self, Subst};\n use middle::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use middle::ty::{TyBool, TyChar, TyStruct, TyEnum};\n-use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n+use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n@@ -812,7 +812,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n                 write!(f, \")\")\n             }\n-            TyBareFn(opt_def_id, ref bare_fn) => {\n+            TyFnDef(def_id, ref bare_fn) => {\n                 if bare_fn.unsafety == hir::Unsafety::Unsafe {\n                     try!(write!(f, \"unsafe \"));\n                 }\n@@ -823,12 +823,20 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n \n                 try!(write!(f, \"{}\", bare_fn.sig.0));\n \n-                if let Some(def_id) = opt_def_id {\n-                    try!(write!(f, \" {{{}}}\", ty::tls::with(|tcx| {\n-                        tcx.item_path_str(def_id)\n-                    })));\n+                write!(f, \" {{{}}}\", ty::tls::with(|tcx| {\n+                    tcx.item_path_str(def_id)\n+                }))\n+            }\n+            TyFnPtr(ref bare_fn) => {\n+                if bare_fn.unsafety == hir::Unsafety::Unsafe {\n+                    try!(write!(f, \"unsafe \"));\n                 }\n-                Ok(())\n+\n+                if bare_fn.abi != Abi::Rust {\n+                    try!(write!(f, \"extern {} \", bare_fn.abi));\n+                }\n+\n+                write!(f, \"{}\", bare_fn.sig.0)\n             }\n             TyInfer(infer_ty) => write!(f, \"{}\", infer_ty),\n             TyError => write!(f, \"[type error]\"),"}, {"sha": "ce84147559c190b7f2d5cc0a3daa26002919d1ef", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -261,16 +261,15 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n \n     pub fn t_fn(&self, input_tys: &[Ty<'tcx>], output_ty: Ty<'tcx>) -> Ty<'tcx> {\n         let input_args = input_tys.iter().cloned().collect();\n-        self.infcx.tcx.mk_fn(None,\n-                             self.infcx.tcx.mk_bare_fn(ty::BareFnTy {\n-                                 unsafety: hir::Unsafety::Normal,\n-                                 abi: Abi::Rust,\n-                                 sig: ty::Binder(ty::FnSig {\n-                                     inputs: input_args,\n-                                     output: ty::FnConverging(output_ty),\n-                                     variadic: false,\n-                                 }),\n-                             }))\n+        self.infcx.tcx.mk_fn_ptr(ty::BareFnTy {\n+            unsafety: hir::Unsafety::Normal,\n+            abi: Abi::Rust,\n+            sig: ty::Binder(ty::FnSig {\n+                inputs: input_args,\n+                output: ty::FnConverging(output_ty),\n+                variadic: false,\n+            }),\n+        })\n     }\n \n     pub fn t_nil(&self) -> Ty<'tcx> {"}, {"sha": "05a0eab4150cae115ff3df5043dfd61aaf8f9ea5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1065,7 +1065,7 @@ impl LateLintPass for MutableTransmutes {\n                 }\n                 let typ = cx.tcx.node_id_to_type(expr.id);\n                 match typ.sty {\n-                    ty::TyBareFn(_, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n+                    ty::TyFnDef(_, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n                         if let ty::FnConverging(to) = bare_fn.sig.0.output {\n                             let from = bare_fn.sig.0.inputs[0];\n                             return Some((&from.sty, &to.sty));\n@@ -1079,7 +1079,7 @@ impl LateLintPass for MutableTransmutes {\n \n         fn def_id_is_transmute(cx: &LateContext, def_id: DefId) -> bool {\n             match cx.tcx.lookup_item_type(def_id).ty.sty {\n-                ty::TyBareFn(_, ref bfty) if bfty.abi == RustIntrinsic => (),\n+                ty::TyFnDef(_, ref bfty) if bfty.abi == RustIntrinsic => (),\n                 _ => return false\n             }\n             cx.tcx.with_path(def_id, |path| match path.last() {"}, {"sha": "10535549ceb7715f8d9818bcecd8bd5b0240d8a6", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -391,7 +391,7 @@ fn is_repr_nullable_ptr<'tcx>(tcx: &TyCtxt<'tcx>,\n \n         if def.variants[data_idx].fields.len() == 1 {\n             match def.variants[data_idx].fields[0].ty(tcx, substs).sty {\n-                ty::TyBareFn(None, _) => { return true; }\n+                ty::TyFnPtr(_) => { return true; }\n                 ty::TyRef(..) => { return true; }\n                 _ => { }\n             }\n@@ -556,7 +556,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 self.check_type_for_ffi(cache, ty)\n             }\n \n-            ty::TyBareFn(None, bare_fn) => {\n+            ty::TyFnPtr(bare_fn) => {\n                 match bare_fn.abi {\n                     Abi::Rust |\n                     Abi::RustIntrinsic |\n@@ -595,7 +595,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::TyParam(..) | ty::TyInfer(..) | ty::TyError |\n             ty::TyClosure(..) | ty::TyProjection(..) |\n-            ty::TyBareFn(Some(_), _) => {\n+            ty::TyFnDef(..) => {\n                 panic!(\"Unexpected type in foreign function\")\n             }\n         }"}, {"sha": "3ddfa1d27302ac9722fac46d1977c67de0f0b3df", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -472,7 +472,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                    variant.name,\n                    ctor_ty);\n             let field_tys = match ctor_ty.sty {\n-                ty::TyBareFn(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                     ref inputs, ..\n                 }), ..}) => {\n                     // tuple-struct constructors don't have escaping regions\n@@ -988,7 +988,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n             let predicates = doc_predicates(item_doc, tcx, cdata, tag_method_ty_generics);\n             let ity = tcx.lookup_item_type(def_id).ty;\n             let fty = match ity.sty {\n-                ty::TyBareFn(_, fty) => fty.clone(),\n+                ty::TyFnDef(_, fty) => fty.clone(),\n                 _ => tcx.sess.bug(&format!(\n                     \"the type {:?} of the method {:?} is not a function?\",\n                     ity, name))\n@@ -1582,7 +1582,8 @@ pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &TyCtxt) -> bool {\n             let ty::TypeScheme { generics, ty } = get_type(cdata, id, tcx);\n             let no_generics = generics.types.is_empty();\n             match ty.sty {\n-                ty::TyBareFn(_, fn_ty) if fn_ty.abi != Abi::Rust => return no_generics,\n+                ty::TyFnDef(_, fn_ty) | ty::TyFnPtr(fn_ty)\n+                    if fn_ty.abi != Abi::Rust => return no_generics,\n                 _ => no_generics,\n             }\n         },"}, {"sha": "b263a0c166ffc47afd7536f03e2c3141dd9af923", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -380,10 +380,10 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             }\n             'F' => {\n                 let def_id = self.parse_def();\n-                return tcx.mk_fn(Some(def_id), tcx.mk_bare_fn(self.parse_bare_fn_ty()));\n+                return tcx.mk_fn_def(def_id, self.parse_bare_fn_ty());\n             }\n             'G' => {\n-                return tcx.mk_fn(None, tcx.mk_bare_fn(self.parse_bare_fn_ty()));\n+                return tcx.mk_fn_ptr(self.parse_bare_fn_ty());\n             }\n             '#' => {\n                 // This is a hacky little caching scheme. The idea is that if we encode"}, {"sha": "bf180b19b3f15876a6f0898b47bbd7c0af925eea", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -135,12 +135,12 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n         ty::TyStr => {\n             write!(w, \"v\");\n         }\n-        ty::TyBareFn(Some(def_id), f) => {\n+        ty::TyFnDef(def_id, f) => {\n             write!(w, \"F\");\n             write!(w, \"{}|\", (cx.ds)(def_id));\n             enc_bare_fn_ty(w, cx, f);\n         }\n-        ty::TyBareFn(None, f) => {\n+        ty::TyFnPtr(f) => {\n             write!(w, \"G\");\n             enc_bare_fn_ty(w, cx, f);\n         }"}, {"sha": "b55843305578e07f5384895e1b16165196f6ce5d", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -239,7 +239,9 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Call { ty, fun, args } => {\n                 let diverges = match ty.sty {\n-                    ty::TyBareFn(_, ref f) => f.sig.0.output.diverges(),\n+                    ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+                        f.sig.0.output.diverges()\n+                    }\n                     _ => false\n                 };\n                 let fun = unpack!(block = this.as_operand(block, fun));"}, {"sha": "801f4388ebd9e63ebc5aa8cd61822c6665eb7e9a", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     let method = method_callee(cx, self, ty::MethodCall::expr(self.id));\n \n                     let sig = match method.ty.sty {\n-                        ty::TyBareFn(_, fn_ty) => &fn_ty.sig,\n+                        ty::TyFnDef(_, fn_ty) => &fn_ty.sig,\n                         _ => cx.tcx.sess.span_bug(self.span, \"type of method is not an fn\")\n                     };\n \n@@ -625,7 +625,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n         Def::Struct(def_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A tuple-struct constructor. Should only be reached if not called in the same\n             // expression.\n-            ty::TyBareFn(..) => (def_id, ItemKind::Function),\n+            ty::TyFnDef(..) => (def_id, ItemKind::Function),\n             // A unit struct which is used as a value. We return a completely different ExprKind\n             // here to account for this special case.\n             ty::TyStruct(adt_def, substs) => return ExprKind::Adt {\n@@ -640,7 +640,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n         Def::Variant(enum_id, variant_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A variant constructor. Should only be reached if not called in the same\n             // expression.\n-            ty::TyBareFn(..) => (variant_id, ItemKind::Function),\n+            ty::TyFnDef(..) => (variant_id, ItemKind::Function),\n             // A unit variant, similar special case to the struct case above.\n             ty::TyEnum(adt_def, substs) => {\n                 debug_assert!(adt_def.did == enum_id);"}, {"sha": "96ea9c11e319002d8b026d594ce1c5bc0ec02f84", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -421,7 +421,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let func_ty = mir.operand_ty(tcx, func);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 let func_ty = match func_ty.sty {\n-                    ty::TyBareFn(_, func_ty) => func_ty,\n+                    ty::TyFnDef(_, func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n                     _ => {\n                         span_mirbug!(self, term, \"call to non-function {:?}\", func_ty);\n                         return;"}, {"sha": "3a39a3c6dd1947ecb18c1feb08144e98114f85c6", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -582,7 +582,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                 }\n                 Some(Def::Struct(..)) => {\n-                    if let ty::TyBareFn(..) = node_ty.sty {\n+                    if let ty::TyFnDef(..) = node_ty.sty {\n                         // Count the function pointer.\n                         v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                     }"}, {"sha": "59518a97c6f588e61fdf7e41ae489e220683ceee", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -857,7 +857,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 if let Def::Struct(..) = self.tcx.resolve_expr(expr) {\n                     let expr_ty = self.tcx.expr_ty(expr);\n                     let def = match expr_ty.sty {\n-                        ty::TyBareFn(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                        ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                             output: ty::FnConverging(ty), ..\n                         }), ..}) => ty,\n                         _ => expr_ty"}, {"sha": "c5508a8268fe2ea80f51647ca8d40540bbb849dd", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -451,8 +451,8 @@ fn find_discr_field_candidate<'tcx>(tcx: &TyCtxt<'tcx>,\n         // Regular thin pointer: &T/&mut T/Box<T>\n         ty::TyRef(..) | ty::TyBox(..) => Some(path),\n \n-        // Functions are just pointers\n-        ty::TyBareFn(..) => Some(path),\n+        // Function pointer: `fn() -> i32`\n+        ty::TyFnPtr(_) => Some(path),\n \n         // Is this the NonZero lang item wrapping a pointer or integer type?\n         ty::TyStruct(def, substs) if Some(def.did) == tcx.lang_items.non_zero() => {"}, {"sha": "d6dc7d45d2b8c3e95de363db6c884f52a6e932a8", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -131,7 +131,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n \n     let function_type;\n     let (fn_sig, abi, env_ty) = match fn_type.sty {\n-        ty::TyBareFn(_, ref f) => (&f.sig, f.abi, None),\n+        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => (&f.sig, f.abi, None),\n         ty::TyClosure(closure_did, ref substs) => {\n             let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables);\n             function_type = infcx.closure_type(closure_did, substs);\n@@ -162,7 +162,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")\n             }\n         },\n-        ty::TyBareFn(..) if abi == Abi::RustCall => {\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) if abi == Abi::RustCall => {\n             let mut inputs = vec![fn_sig.inputs[0]];\n \n             match fn_sig.inputs[1].sty {"}, {"sha": "bd541067d14ab43cddc6966d21fb9f3b27297840", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -390,7 +390,7 @@ pub fn compare_scalar_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 _ => bcx.sess().bug(\"compare_scalar_types: must be a comparison operator\"),\n             }\n         }\n-        ty::TyBareFn(..) | ty::TyBool | ty::TyUint(_) | ty::TyChar => {\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyBool | ty::TyUint(_) | ty::TyChar => {\n             ICmp(bcx,\n                  bin_op_to_icmp_predicate(bcx.ccx(), op, false),\n                  lhs,\n@@ -906,7 +906,7 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      -> ValueRef {\n     let name = ccx.sess().cstore.item_symbol(did);\n     match t.sty {\n-        ty::TyBareFn(_, ref fn_ty) => {\n+        ty::TyFnDef(_, ref fn_ty) => {\n             match ccx.sess().target.target.adjust_abi(fn_ty.abi) {\n                 Abi::Rust | Abi::RustCall => {\n                     get_extern_rust_fn(ccx, t, &name[..], did)\n@@ -2610,7 +2610,7 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_id: ast::NodeId,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n-    if let ty::TyBareFn(_, ref f) = node_type.sty {\n+    if let ty::TyFnDef(_, ref f) = node_type.sty {\n         if f.abi != Abi::Rust && f.abi != Abi::RustCall {\n             ccx.sess().span_bug(sp,\n                                 &format!(\"only the `{}` or `{}` calling conventions are valid \\\n@@ -2915,7 +2915,7 @@ fn register_method(ccx: &CrateContext,\n \n     let sym = exported_name(ccx, id, mty, &attrs);\n \n-    if let ty::TyBareFn(_, ref f) = mty.sty {\n+    if let ty::TyFnDef(_, ref f) = mty.sty {\n         let llfn = if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n             register_fn(ccx, span, sym, id, mty)\n         } else {"}, {"sha": "c472e5fa62fa6b5d502699effeb02da00f518715", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -107,7 +107,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                                 -> Callee<'blk, 'tcx> {\n         let DatumBlock { bcx, datum, .. } = expr::trans(bcx, expr);\n         match datum.ty.sty {\n-            ty::TyBareFn(..) => {\n+            ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                 Callee {\n                     bcx: bcx,\n                     ty: datum.ty,\n@@ -157,8 +157,8 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 }\n             }\n             Def::Fn(did) if match expr_ty.sty {\n-                ty::TyBareFn(_, ref f) => f.abi == Abi::RustIntrinsic ||\n-                                          f.abi == Abi::PlatformIntrinsic,\n+                ty::TyFnDef(_, ref f) => f.abi == Abi::RustIntrinsic ||\n+                                         f.abi == Abi::PlatformIntrinsic,\n                 _ => false\n             } => {\n                 let substs = common::node_id_substs(bcx.ccx(),\n@@ -292,11 +292,16 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n     let (opt_def_id, sig) =\n         match bare_fn_ty.sty {\n-            ty::TyBareFn(opt_def_id,\n-                           &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n-                                           abi: Abi::Rust,\n-                                           ref sig }) => {\n-                (opt_def_id, sig)\n+            ty::TyFnDef(def_id,\n+                        &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n+                                        abi: Abi::Rust,\n+                                        ref sig }) => {\n+                (Some(def_id), sig)\n+            }\n+            ty::TyFnPtr(&ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n+                                        abi: Abi::Rust,\n+                                        ref sig }) => {\n+                (None, sig)\n             }\n \n             _ => {\n@@ -307,16 +312,20 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let sig = tcx.erase_late_bound_regions(sig);\n     let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n     let tuple_input_ty = tcx.mk_tup(sig.inputs.to_vec());\n-    let tuple_fn_ty = tcx.mk_fn(opt_def_id,\n-        tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: hir::Unsafety::Normal,\n-            abi: Abi::RustCall,\n-            sig: ty::Binder(ty::FnSig {\n-                inputs: vec![bare_fn_ty_maybe_ref,\n-                             tuple_input_ty],\n-                output: sig.output,\n-                variadic: false\n-            })}));\n+    let bare_tuple_fn = ty::BareFnTy {\n+        unsafety: hir::Unsafety::Normal,\n+        abi: Abi::RustCall,\n+        sig: ty::Binder(ty::FnSig {\n+            inputs: vec![bare_fn_ty_maybe_ref,\n+                         tuple_input_ty],\n+            output: sig.output,\n+            variadic: false\n+        })\n+    };\n+    let tuple_fn_ty = match opt_def_id {\n+        Some(def_id) => tcx.mk_fn_def(def_id, bare_tuple_fn),\n+        None => tcx.mk_fn_ptr(bare_tuple_fn),\n+    };\n     debug!(\"tuple_fn_ty: {:?}\", tuple_fn_ty);\n \n     //\n@@ -606,7 +615,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = callee.bcx;\n \n     let (abi, ret_ty) = match callee.ty.sty {\n-        ty::TyBareFn(_, ref f) => {\n+        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n             let sig = bcx.tcx().erase_late_bound_regions(&f.sig);\n             let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n             (f.abi, sig.output)"}, {"sha": "023ab02bc38d03e91a19f75d8c1f37479318b2b2", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -355,40 +355,43 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Make a version with the type of by-ref closure.\n     let ty::ClosureTy { unsafety, abi, mut sig } = infcx.closure_type(closure_def_id, &substs);\n     sig.0.inputs.insert(0, ref_closure_ty); // sig has no self type as of yet\n-    let llref_bare_fn_ty = tcx.mk_bare_fn(ty::BareFnTy { unsafety: unsafety,\n-                                                               abi: abi,\n-                                                               sig: sig.clone() });\n-    let llref_fn_ty = tcx.mk_fn(None, llref_bare_fn_ty);\n+    let llref_fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {\n+        unsafety: unsafety,\n+        abi: abi,\n+        sig: sig.clone()\n+    });\n     debug!(\"trans_fn_once_adapter_shim: llref_fn_ty={:?}\",\n            llref_fn_ty);\n \n+    let ret_ty = tcx.erase_late_bound_regions(&sig.output());\n+    let ret_ty = infer::normalize_associated_type(ccx.tcx(), &ret_ty);\n+\n     // Make a version of the closure type with the same arguments, but\n     // with argument #0 being by value.\n     assert_eq!(abi, RustCall);\n     sig.0.inputs[0] = closure_ty;\n-    let llonce_bare_fn_ty = tcx.mk_bare_fn(ty::BareFnTy { unsafety: unsafety,\n-                                                                abi: abi,\n-                                                                sig: sig });\n-    let llonce_fn_ty = tcx.mk_fn(None, llonce_bare_fn_ty);\n+    let llonce_fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {\n+        unsafety: unsafety,\n+        abi: abi,\n+        sig: sig\n+    });\n \n     // Create the by-value helper.\n     let function_name = link::mangle_internal_name_by_type_and_seq(ccx, llonce_fn_ty, \"once_shim\");\n     let lloncefn = declare::define_internal_rust_fn(ccx, &function_name,\n                                                     llonce_fn_ty);\n-    let sig = tcx.erase_late_bound_regions(&llonce_bare_fn_ty.sig);\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n \n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n     fcx = new_fn_ctxt(ccx,\n                       lloncefn,\n                       ast::DUMMY_NODE_ID,\n                       false,\n-                      sig.output,\n+                      ret_ty,\n                       substs.func_substs,\n                       None,\n                       &block_arena);\n-    let mut bcx = init_function(&fcx, false, sig.output);\n+    let mut bcx = init_function(&fcx, false, ret_ty);\n \n     let llargs = get_params(fcx.llfn);\n \n@@ -408,7 +411,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     let dest =\n         fcx.llretslotptr.get().map(\n-            |_| expr::SaveIn(fcx.get_ret_slot(bcx, sig.output, \"ret_slot\")));\n+            |_| expr::SaveIn(fcx.get_ret_slot(bcx, ret_ty, \"ret_slot\")));\n \n     let callee_data = TraitItem(MethodData { llfn: llreffn,\n                                              llself: env_datum.val });\n@@ -423,7 +426,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     fcx.pop_and_trans_custom_cleanup_scope(bcx, self_scope);\n \n-    finish_fn(&fcx, bcx, sig.output, DebugLoc::None);\n+    finish_fn(&fcx, bcx, ret_ty, DebugLoc::None);\n \n     lloncefn\n }"}, {"sha": "14cbcb2086cef6041cd45b779f265a230b827198", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -600,13 +600,14 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                               def_id: DefId)\n                                               -> bool {\n             if !match ccx.tcx().lookup_item_type(def_id).ty.sty {\n-                ty::TyBareFn(Some(def_id), _) => {\n-                    // Some constructors also have type TyBareFn but they are\n+                ty::TyFnDef(def_id, _) => {\n+                    // Some constructors also have type TyFnDef but they are\n                     // always instantiated inline and don't result in\n-                    // translation item.\n+                    // translation item. Same for FFI functions.\n                     match ccx.tcx().map.get_if_local(def_id) {\n                         Some(hir_map::NodeVariant(_))    |\n-                        Some(hir_map::NodeStructCtor(_)) => false,\n+                        Some(hir_map::NodeStructCtor(_)) |\n+                        Some(hir_map::NodeForeignItem(_)) => false,\n                         Some(_) => true,\n                         None => {\n                             ccx.sess().cstore.variant_kind(def_id).is_none()\n@@ -697,17 +698,18 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // Finally add the types of nested values\n     match ty.sty {\n-        ty::TyBool       |\n-        ty::TyChar       |\n-        ty::TyInt(_)     |\n-        ty::TyUint(_)    |\n-        ty::TyStr        |\n-        ty::TyFloat(_)   |\n-        ty::TyRawPtr(_)  |\n-        ty::TyRef(..)    |\n-        ty::TyBareFn(..) |\n-        ty::TySlice(_)   |\n-        ty::TyTrait(_)   => {\n+        ty::TyBool      |\n+        ty::TyChar      |\n+        ty::TyInt(_)    |\n+        ty::TyUint(_)   |\n+        ty::TyStr       |\n+        ty::TyFloat(_)  |\n+        ty::TyRawPtr(_) |\n+        ty::TyRef(..)   |\n+        ty::TyFnDef(..) |\n+        ty::TyFnPtr(_)  |\n+        ty::TySlice(_)  |\n+        ty::TyTrait(_)  => {\n             /* nothing to do */\n         }\n         ty::TyStruct(ref adt_def, substs) |\n@@ -1289,7 +1291,8 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                              &trait_data.bounds.projection_bounds,\n                              output);\n         },\n-        ty::TyBareFn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+        ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }"}, {"sha": "5d8c5653b3edc16beb95c9f889f7790a35001e0a", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1277,7 +1277,7 @@ pub fn inlined_variant_def<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"inlined_variant_def: ctor_ty={:?} inlined_vid={:?}\", ctor_ty,\n            inlined_vid);\n     let adt_def = match ctor_ty.sty {\n-        ty::TyBareFn(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+        ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n             output: ty::FnConverging(ty), ..\n         }), ..}) => ty,\n         _ => ctor_ty"}, {"sha": "bec73c7cedc09e533266d56a0dcc4a9f8336483b", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -917,7 +917,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     }\n                 }\n                 Def::Struct(..) => {\n-                    if let ty::TyBareFn(..) = ety.sty {\n+                    if let ty::TyFnDef(..) = ety.sty {\n                         // Tuple struct.\n                         expr::trans_def_fn_unadjusted(cx, e, def, param_substs).val\n                     } else {"}, {"sha": "895adb397089777f4d31da2301db99be2678b15d", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -253,7 +253,8 @@ impl<'tcx> TypeMap<'tcx> {\n                                        principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::TyBareFn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+            ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+            ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == hir::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n                 }\n@@ -765,7 +766,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::TyBareFn(_, ref barefnty) => {\n+        ty::TyFnDef(_, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n             let fn_metadata = subroutine_type_metadata(cx,\n                                                        unique_type_id,\n                                                        &barefnty.sig,"}, {"sha": "5052bece8c14670d88d8d9bc822908cbb6392742", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -430,7 +430,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let fn_type = monomorphize::apply_param_substs(cx.tcx(), param_substs, &fn_type);\n \n         let (sig, abi) = match fn_type.sty {\n-            ty::TyBareFn(_, ref barefnty) => {\n+            ty::TyFnDef(_, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n                 let sig = cx.tcx().erase_late_bound_regions(&barefnty.sig);\n                 let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n                 (sig, barefnty.abi)"}, {"sha": "6539900cf3b2a20c594e47ba7cfe89278593ed17", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -101,7 +101,8 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, principal.def_id, false, output);\n             push_type_params(cx, principal.substs, output);\n         },\n-        ty::TyBareFn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+        ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }"}, {"sha": "17278f3a1400e40e13c9fec8b966a05ac7909965", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -106,7 +106,8 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n \n     let function_type; // placeholder so that the memory ownership works out ok\n     let (sig, abi, env) = match fn_type.sty {\n-        ty::TyBareFn(_, ref f) => {\n+        ty::TyFnDef(_, f) |\n+        ty::TyFnPtr(f) => {\n             (&f.sig, f.abi, None)\n         }\n         ty::TyClosure(closure_did, ref substs) => {"}, {"sha": "00ce0f8109491fa2f64c823a4f0482a440f353b1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -2525,7 +2525,7 @@ fn expr_kind(tcx: &TyCtxt, expr: &hir::Expr) -> ExprKind {\n         hir::ExprPath(..) => {\n             match tcx.resolve_expr(expr) {\n                 Def::Struct(..) | Def::Variant(..) => {\n-                    if let ty::TyBareFn(..) = tcx.node_id_to_type(expr.id).sty {\n+                    if let ty::TyFnDef(..) = tcx.node_id_to_type(expr.id).sty {\n                         // ctor function\n                         ExprKind::RvalueDatum\n                     } else {"}, {"sha": "805454df6847ee160470854aaee71dd152eda32e", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -262,7 +262,8 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            ccx.tn().val_to_string(llretptr));\n \n     let (fn_abi, fn_sig) = match callee_ty.sty {\n-        ty::TyBareFn(_, ref fn_ty) => (fn_ty.abi, &fn_ty.sig),\n+        ty::TyFnDef(_, ref fn_ty) |\n+        ty::TyFnPtr(ref fn_ty) => (fn_ty.abi, &fn_ty.sig),\n         _ => ccx.sess().bug(\"trans_native_call called on non-function type\")\n     };\n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);\n@@ -501,7 +502,8 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n                 abi => {\n                     let ty = ccx.tcx().node_id_to_type(foreign_item.id);\n                     match ty.sty {\n-                        ty::TyBareFn(_, bft) => gate_simd_ffi(ccx.tcx(), &decl, bft),\n+                        ty::TyFnDef(_, bft) |\n+                        ty::TyFnPtr(bft) => gate_simd_ffi(ccx.tcx(), &decl, bft),\n                         _ => ccx.tcx().sess.span_bug(foreign_item.span,\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n                     }\n@@ -552,7 +554,7 @@ pub fn decl_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let tys = foreign_types_for_fn_ty(ccx, t);\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let cconv = match t.sty {\n-        ty::TyBareFn(_, ref fn_ty) => {\n+        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in decl_rust_fn_with_foreign_abi\")\n@@ -574,7 +576,7 @@ pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n     let t = ccx.tcx().node_id_to_type(node_id);\n     let cconv = match t.sty {\n-        ty::TyBareFn(_, ref fn_ty) => {\n+        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n@@ -634,7 +636,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Compute the type that the function would have if it were just a\n         // normal Rust function. This will be the type of the wrappee fn.\n         match t.sty {\n-            ty::TyBareFn(_, ref f) => {\n+            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f)=> {\n                 assert!(f.abi != Abi::Rust);\n                 assert!(f.abi != Abi::RustIntrinsic);\n                 assert!(f.abi != Abi::PlatformIntrinsic);\n@@ -957,7 +959,7 @@ fn foreign_signature<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn foreign_types_for_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      ty: Ty<'tcx>) -> ForeignTypes<'tcx> {\n     let fn_sig = match ty.sty {\n-        ty::TyBareFn(_, ref fn_ty) => &fn_ty.sig,\n+        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => &fn_ty.sig,\n         _ => ccx.sess().bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);"}, {"sha": "70c8681dbc1c311f15b81422d5d457e84329bf48", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1264,7 +1264,7 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     // Define the type up front for the signature of the rust_try function.\n     let tcx = ccx.tcx();\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n-    let fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n+    let fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: Abi::Rust,\n         sig: ty::Binder(ty::FnSig {\n@@ -1273,18 +1273,17 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n             variadic: false,\n         }),\n     });\n-    let fn_ty = tcx.mk_fn(None, fn_ty);\n     let output = ty::FnOutput::FnConverging(tcx.types.i32);\n-    let try_fn_ty  = tcx.mk_bare_fn(ty::BareFnTy {\n+    let try_fn_ty  = ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: Abi::Rust,\n         sig: ty::Binder(ty::FnSig {\n             inputs: vec![fn_ty, i8p, i8p],\n             output: output,\n             variadic: false,\n         }),\n-    });\n-    let rust_try = gen_fn(fcx, \"__rust_try\", tcx.mk_fn(None, try_fn_ty), output,\n+    };\n+    let rust_try = gen_fn(fcx, \"__rust_try\", tcx.mk_fn_ptr(try_fn_ty), output,\n                           trans);\n     *ccx.rust_try_fn().borrow_mut() = Some(rust_try);\n     return rust_try\n@@ -1353,7 +1352,7 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         // going on here, all I can say is that there's a few tests cases in\n         // LLVM's test suite which follow this pattern of instructions, so we\n         // just do the same.\n-        let filter_fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n+        let filter_fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n             abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n@@ -1362,7 +1361,6 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                 variadic: false,\n             }),\n         });\n-        let filter_fn_ty = tcx.mk_fn(None, filter_fn_ty);\n         gen_fn(fcx, \"__rustc_try_filter\", filter_fn_ty, output, &mut |bcx| {\n             let ebp = Call(bcx, frameaddress, &[C_i32(ccx, 1)], None, dloc);\n             let exn = InBoundsGEP(bcx, ebp, &[C_i32(ccx, -20)]);\n@@ -1373,7 +1371,7 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         // Conveniently on x86_64 the EXCEPTION_POINTERS handle and base pointer\n         // are passed in as arguments to the filter function, so we just pass\n         // those along.\n-        let filter_fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n+        let filter_fn_ty = tcx.mk_fn_ptr(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n             abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n@@ -1382,7 +1380,6 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                 variadic: false,\n             }),\n         });\n-        let filter_fn_ty = tcx.mk_fn(None, filter_fn_ty);\n         gen_fn(fcx, \"__rustc_try_filter\", filter_fn_ty, output, &mut |bcx| {\n             let exn = llvm::get_param(bcx.fcx.llfn, 0);\n             let rbp = llvm::get_param(bcx.fcx.llfn, 1);"}, {"sha": "0898d2b4f9fd13c7002132226474fc94d876e8a7", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -259,8 +259,8 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         traits::VtableObject(ref data) => {\n             let idx = traits::get_vtable_index_of_object_method(bcx.tcx(), data, method_id);\n             if let Some(self_expr) = self_expr {\n-                if let ty::TyBareFn(_, ref fty) = monomorphize_type(bcx, method_ty).sty {\n-                    let ty = bcx.tcx().mk_fn(None, opaque_method_ty(bcx.tcx(), fty));\n+                if let ty::TyFnDef(_, ref fty) = monomorphize_type(bcx, method_ty).sty {\n+                    let ty = opaque_method_ty(bcx.tcx(), fty);\n                     return trans_trait_callee(bcx, ty, idx, self_expr, arg_cleanup_scope);\n                 }\n             }\n@@ -401,31 +401,31 @@ pub fn trans_object_shim<'a, 'tcx>(\n         }\n     };\n     let fty = monomorphize::apply_param_substs(tcx, &object_substs, &method_ty.fty);\n-    let fty = tcx.mk_bare_fn(fty);\n-    let method_ty = opaque_method_ty(tcx, fty);\n-    debug!(\"trans_object_shim: fty={:?} method_ty={:?}\", fty, method_ty);\n+\n+    let ret_ty = ccx.tcx().erase_late_bound_regions(&fty.sig.output());\n+    let ret_ty = infer::normalize_associated_type(ccx.tcx(), &ret_ty);\n+\n+    let method_fn_ty = opaque_method_ty(tcx, &fty);\n+    let shim_fn_ty = tcx.mk_fn_ptr(fty);\n+    debug!(\"trans_object_shim: shim_fn_ty={:?} method_fn_ty={:?}\",\n+           shim_fn_ty, method_fn_ty);\n \n     //\n-    let shim_fn_ty = tcx.mk_fn(None, fty);\n-    let method_bare_fn_ty = tcx.mk_fn(None, method_ty);\n     let function_name = link::mangle_internal_name_by_type_and_seq(ccx, shim_fn_ty, \"object_shim\");\n     let llfn = declare::define_internal_rust_fn(ccx, &function_name, shim_fn_ty);\n \n-    let sig = ccx.tcx().erase_late_bound_regions(&fty.sig);\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n-\n     let empty_substs = tcx.mk_substs(Substs::trans_empty());\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n     fcx = new_fn_ctxt(ccx,\n                       llfn,\n                       ast::DUMMY_NODE_ID,\n                       false,\n-                      sig.output,\n+                      ret_ty,\n                       empty_substs,\n                       None,\n                       &block_arena);\n-    let mut bcx = init_function(&fcx, false, sig.output);\n+    let mut bcx = init_function(&fcx, false, ret_ty);\n \n     let llargs = get_params(fcx.llfn);\n \n@@ -440,21 +440,21 @@ pub fn trans_object_shim<'a, 'tcx>(\n \n     let dest =\n         fcx.llretslotptr.get().map(\n-            |_| expr::SaveIn(fcx.get_ret_slot(bcx, sig.output, \"ret_slot\")));\n+            |_| expr::SaveIn(fcx.get_ret_slot(bcx, ret_ty, \"ret_slot\")));\n \n     debug!(\"trans_object_shim: method_offset_in_vtable={}\",\n            vtable_index);\n \n     bcx = trans_call_inner(bcx,\n                            DebugLoc::None,\n                            |bcx, _| trans_trait_callee_from_llval(bcx,\n-                                                                  method_bare_fn_ty,\n+                                                                  method_fn_ty,\n                                                                   vtable_index,\n                                                                   llself, llvtable),\n                            ArgVals(&llargs[(self_idx + 2)..]),\n                            dest).bcx;\n \n-    finish_fn(&fcx, bcx, sig.output, DebugLoc::None);\n+    finish_fn(&fcx, bcx, ret_ty, DebugLoc::None);\n \n     immediate_rvalue(llfn, shim_fn_ty)\n }\n@@ -642,11 +642,11 @@ pub fn get_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n /// Replace the self type (&Self or Box<Self>) with an opaque pointer.\n fn opaque_method_ty<'tcx>(tcx: &TyCtxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)\n-                          -> &'tcx ty::BareFnTy<'tcx> {\n+                          -> Ty<'tcx> {\n     let mut inputs = method_ty.sig.0.inputs.clone();\n     inputs[0] = tcx.mk_mut_ptr(tcx.mk_mach_int(ast::IntTy::I8));\n \n-    tcx.mk_bare_fn(ty::BareFnTy {\n+    tcx.mk_fn_ptr(ty::BareFnTy {\n         unsafety: method_ty.unsafety,\n         abi: method_ty.abi,\n         sig: ty::Binder(ty::FnSig {"}, {"sha": "0bbd32da049bc173f3b53a13991f0f2033542377", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -37,17 +37,18 @@ enum AbiStyle {\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     fn abi_style(&self, fn_ty: Ty<'tcx>) -> AbiStyle {\n-        if let ty::TyBareFn(_, ref f) = fn_ty.sty {\n-            // We do not translate intrinsics here (they shouldn\u2019t be functions)\n-            assert!(f.abi != Abi::RustIntrinsic && f.abi != Abi::PlatformIntrinsic);\n+        match fn_ty.sty {\n+            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+                // We do not translate intrinsics here (they shouldn\u2019t be functions)\n+                assert!(f.abi != Abi::RustIntrinsic && f.abi != Abi::PlatformIntrinsic);\n \n-            match f.abi {\n-                Abi::Rust => AbiStyle::Rust,\n-                Abi::RustCall => AbiStyle::RustCall,\n-                _ => AbiStyle::Foreign\n+                match f.abi {\n+                    Abi::Rust => AbiStyle::Rust,\n+                    Abi::RustCall => AbiStyle::RustCall,\n+                    _ => AbiStyle::Foreign\n+                }\n             }\n-        } else {\n-            unreachable!()\n+            _ => unreachable!()\n         }\n     }\n "}, {"sha": "eed7ae6e72e22ece853bdf82f9a362aad6b326fb", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -153,7 +153,7 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n // Given a function type and a count of ty params, construct an llvm type\n pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type {\n     match fty.sty {\n-        ty::TyBareFn(_, ref f) => {\n+        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n             if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n@@ -210,7 +210,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             }\n         }\n \n-        ty::TyBareFn(..) => Type::i8p(cx),\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => Type::i8p(cx),\n \n         ty::TyArray(ty, size) => {\n             let llty = sizing_type_of(cx, ty);\n@@ -415,7 +415,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TySlice(ty) => in_memory_type_of(cx, ty),\n       ty::TyStr | ty::TyTrait(..) => Type::i8(cx),\n \n-      ty::TyBareFn(..) => {\n+      ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n           type_of_fn_from_ty(cx, t).ptr_to()\n       }\n       ty::TyTuple(ref tys) if tys.is_empty() => Type::nil(cx),"}, {"sha": "1938fa7582918dc57836f5d4453d9ac4757c07da", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1636,8 +1636,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n         }\n         hir::TyBareFn(ref bf) => {\n             require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n-            let bare_fn = ty_of_bare_fn(this, bf.unsafety, bf.abi, &bf.decl);\n-            tcx.mk_fn(None, tcx.mk_bare_fn(bare_fn))\n+            tcx.mk_fn_ptr(ty_of_bare_fn(this, bf.unsafety, bf.abi, &bf.decl))\n         }\n         hir::TyPolyTraitRef(ref bounds) => {\n             conv_ty_poly_trait_ref(this, rscope, ast_ty.span, bounds)"}, {"sha": "f3bf7d895ea80c2c798994609d9157074c06413f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -130,7 +130,7 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // If the callee is a bare function or a closure, then we're all set.\n     match structurally_resolved_type(fcx, callee_expr.span, adjusted_ty).sty {\n-        ty::TyBareFn(..) => {\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n             fcx.write_autoderef_adjustment(callee_expr.id, autoderefs);\n             return Some(CallStep::Builtin);\n         }\n@@ -225,7 +225,8 @@ fn confirm_builtin_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let error_fn_sig;\n \n     let fn_sig = match callee_ty.sty {\n-        ty::TyBareFn(_, &ty::BareFnTy {ref sig, ..}) => {\n+        ty::TyFnDef(_, &ty::BareFnTy {ref sig, ..}) |\n+        ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => {\n             sig\n         }\n         _ => {"}, {"sha": "c7184500159a8c88a35e08401ec61689130fe945", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -141,13 +141,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         match a.sty {\n-            ty::TyBareFn(Some(_), a_f) => {\n+            ty::TyFnDef(_, a_f) => {\n                 // Function items are coercible to any closure\n                 // type; function pointers are not (that would\n                 // require double indirection).\n                 self.coerce_from_fn_item(a, a_f, b)\n             }\n-            ty::TyBareFn(None, a_f) => {\n+            ty::TyFnPtr(a_f) => {\n                 // We permit coercion of fn pointers to drop the\n                 // unsafe qualifier.\n                 self.coerce_from_fn_pointer(a, a_f, b)\n@@ -357,7 +357,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\",\n                    a, b);\n \n-            if let ty::TyBareFn(None, fn_ty_b) = b.sty {\n+            if let ty::TyFnPtr(fn_ty_b) = b.sty {\n                 match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n                     (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n                         let unsafe_a = self.tcx().safe_to_unsafe_fn_ty(fn_ty_a);\n@@ -386,8 +386,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                    a, b);\n \n             match b.sty {\n-                ty::TyBareFn(None, _) => {\n-                    let a_fn_pointer = self.tcx().mk_fn(None, fn_ty_a);\n+                ty::TyFnPtr(_) => {\n+                    let a_fn_pointer = self.tcx().mk_ty(ty::TyFnPtr(fn_ty_a));\n                     try!(self.subtype(a_fn_pointer, b));\n                     Ok(Some(AdjustReifyFnPointer))\n                 }"}, {"sha": "ff7b809577f64a693f13d36fc1e7be3ac7efcea7", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -276,9 +276,9 @@ pub fn compare_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n     // type.\n \n     // Compute skolemized form of impl and trait method tys.\n-    let impl_fty = tcx.mk_fn(None, tcx.mk_bare_fn(impl_m.fty.clone()));\n+    let impl_fty = tcx.mk_fn_ptr(impl_m.fty.clone());\n     let impl_fty = impl_fty.subst(tcx, impl_to_skol_substs);\n-    let trait_fty = tcx.mk_fn(None, tcx.mk_bare_fn(trait_m.fty.clone()));\n+    let trait_fty = tcx.mk_fn_ptr(trait_m.fty.clone());\n     let trait_fty = trait_fty.subst(tcx, &trait_to_skol_substs);\n \n     let err = infcx.commit_if_ok(|snapshot| {\n@@ -296,11 +296,11 @@ pub fn compare_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &impl_sig);\n-        let impl_fty = tcx.mk_fn(None, tcx.mk_bare_fn(ty::BareFnTy {\n+        let impl_fty = tcx.mk_fn_ptr(ty::BareFnTy {\n             unsafety: impl_m.fty.unsafety,\n             abi: impl_m.fty.abi,\n             sig: ty::Binder(impl_sig)\n-        }));\n+        });\n         debug!(\"compare_impl_method: impl_fty={:?}\",\n                impl_fty);\n \n@@ -314,11 +314,11 @@ pub fn compare_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &trait_sig);\n-        let trait_fty = tcx.mk_fn(None, tcx.mk_bare_fn(ty::BareFnTy {\n+        let trait_fty = tcx.mk_fn_ptr(ty::BareFnTy {\n             unsafety: trait_m.fty.unsafety,\n             abi: trait_m.fty.abi,\n             sig: ty::Binder(trait_sig)\n-        }));\n+        });\n \n         debug!(\"compare_impl_method: trait_fty={:?}\",\n                trait_fty);"}, {"sha": "4ebe4c25dd1d3799f3c813f1045fa5ceeb93963c", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -479,7 +479,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n             Ok(())\n         }\n \n-        ty::TyBareFn(..) => {\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n             // FIXME(#26656): this type is always destruction-safe, but\n             // it implicitly witnesses Self: Fn, which can be false.\n             Ok(())"}, {"sha": "525e4888fdbfb518f025b352de5c06e55cbfb902", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -33,16 +33,17 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n                                    abi: Abi,\n                                    inputs: Vec<ty::Ty<'tcx>>,\n                                    output: ty::FnOutput<'tcx>) {\n-    let fty = tcx.mk_fn(None, tcx.mk_bare_fn(ty::BareFnTy {\n+    let def_id = tcx.map.local_def_id(it.id);\n+    let fty = tcx.mk_fn_def(def_id, ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: abi,\n         sig: ty::Binder(FnSig {\n             inputs: inputs,\n             output: output,\n             variadic: false,\n         }),\n-    }));\n-    let i_ty = tcx.lookup_item_type(tcx.map.local_def_id(it.id));\n+    });\n+    let i_ty = tcx.lookup_item_type(def_id);\n     let i_n_tps = i_ty.generics.types.len(subst::FnSpace);\n     if i_n_tps != n_tps {\n         span_err!(tcx.sess, it.span, E0094,\n@@ -296,8 +297,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                         variadic: false,\n                     }),\n                 };\n-                let fn_ty = tcx.mk_bare_fn(fn_ty);\n-                (0, vec![tcx.mk_fn(None, fn_ty), mut_u8, mut_u8], tcx.types.i32)\n+                (0, vec![tcx.mk_fn_ptr(fn_ty), mut_u8, mut_u8], tcx.types.i32)\n             }\n \n             ref other => {"}, {"sha": "6b00beb5f395c984b7a8f6a8f88ea7394d128317", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -105,11 +105,11 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n \n         // Create the method type\n         let method_ty = pick.item.as_opt_method().unwrap();\n-        let fty = self.tcx().mk_fn(None, self.tcx().mk_bare_fn(ty::BareFnTy {\n+        let fty = self.tcx().mk_fn_ptr(ty::BareFnTy {\n             sig: ty::Binder(method_sig),\n             unsafety: method_ty.fty.unsafety,\n             abi: method_ty.fty.abi.clone(),\n-        }));\n+        });\n \n         // Add any trait/regions obligations specified on the method's type parameters.\n         self.add_obligations(fty, &all_substs, &method_predicates);\n@@ -457,7 +457,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn fixup_derefs_on_method_receiver_if_necessary(&self,\n                                                     method_callee: &ty::MethodCallee) {\n         let sig = match method_callee.ty.sty {\n-            ty::TyBareFn(_, ref f) => f.sig.clone(),\n+            ty::TyFnPtr(ref f) => f.sig.clone(),\n             _ => return,\n         };\n "}, {"sha": "f86034d9aff5677b260ec3016143c005f45a13e7", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -230,11 +230,11 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                                        &method_ty.fty.sig).0;\n     let fn_sig = fcx.instantiate_type_scheme(span, trait_ref.substs, &fn_sig);\n     let transformed_self_ty = fn_sig.inputs[0];\n-    let fty = tcx.mk_fn(None, tcx.mk_bare_fn(ty::BareFnTy {\n+    let fty = tcx.mk_fn_ptr(ty::BareFnTy {\n         sig: ty::Binder(fn_sig),\n         unsafety: method_ty.fty.unsafety,\n         abi: method_ty.fty.abi.clone(),\n-    }));\n+    });\n \n     debug!(\"lookup_in_trait_adjusted: matched method fty={:?} obligation={:?}\",\n            fty,"}, {"sha": "e63366966636a7d7a493ce21805b6653189f8ab6", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -101,7 +101,7 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     match field_ty.sty {\n                         // Not all of these (e.g. unsafe fns) implement FnOnce\n                         // so we look for these beforehand\n-                        ty::TyClosure(..) | ty::TyBareFn(..) => {\n+                        ty::TyClosure(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                             span_stored_function!();\n                         }\n                         // If it's not a simple function, look for things which implement FnOnce"}, {"sha": "acac32fe38cf1ba197cfaa8f6fccbf313e9a7236", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -434,7 +434,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            param_env: ty::ParameterEnvironment<'a, 'tcx>)\n {\n     match raw_fty.sty {\n-        ty::TyBareFn(_, ref fn_ty) => {\n+        ty::TyFnDef(_, ref fn_ty) => {\n             let tables = RefCell::new(ty::Tables::empty());\n             let inh = Inherited::new(ccx.tcx, &tables, param_env);\n \n@@ -2340,7 +2340,7 @@ fn check_method_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         ty::FnConverging(fcx.tcx().types.err)\n     } else {\n         match method_fn_ty.sty {\n-            ty::TyBareFn(_, ref fty) => {\n+            ty::TyFnPtr(ref fty) => {\n                 // HACK(eddyb) ignore self in the definition (see above).\n                 let expected_arg_tys = expected_types_for_fn_args(fcx,\n                                                                   sp,\n@@ -2619,7 +2619,7 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     ty::TyInt(_) | ty::TyUint(_) => Some(ty),\n                     ty::TyChar => Some(tcx.types.u8),\n                     ty::TyRawPtr(..) => Some(tcx.types.usize),\n-                    ty::TyBareFn(..) => Some(tcx.types.usize),\n+                    ty::TyFnDef(..) | ty::TyFnPtr(_) => Some(tcx.types.usize),\n                     _ => None\n                 }\n             });"}, {"sha": "e428fc927f05cf925caded37c7dfa77a947a0c63", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -881,7 +881,7 @@ fn constrain_callee(rcx: &mut Rcx,\n                     _callee_expr: &hir::Expr) {\n     let callee_ty = rcx.resolve_node_type(callee_id);\n     match callee_ty.sty {\n-        ty::TyBareFn(..) => { }\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => { }\n         _ => {\n             // this should not happen, but it does if the program is\n             // erroneous"}, {"sha": "5aa810c7e411cd8d3f7740fcc4d54376109ea635", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -255,9 +255,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let type_scheme = fcx.tcx().lookup_item_type(fcx.tcx().map.local_def_id(item.id));\n             let item_ty = fcx.instantiate_type_scheme(item.span, free_substs, &type_scheme.ty);\n             let bare_fn_ty = match item_ty.sty {\n-                ty::TyBareFn(_, ref bare_fn_ty) => bare_fn_ty,\n+                ty::TyFnDef(_, ref bare_fn_ty) => bare_fn_ty,\n                 _ => {\n-                    this.tcx().sess.span_bug(item.span, \"Fn item without bare fn type\");\n+                    this.tcx().sess.span_bug(item.span, \"Fn item without fn type\");\n                 }\n             };\n "}, {"sha": "28fbaf21367daa30639e36032124eb4b3f16a67c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -27,7 +27,7 @@ use middle::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n use middle::ty::{TyParam, TyRawPtr};\n use middle::ty::{TyRef, TyStruct, TyTrait, TyTuple};\n use middle::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n-use middle::ty::{TyUint, TyClosure, TyBox, TyBareFn};\n+use middle::ty::{TyUint, TyClosure, TyBox, TyFnDef, TyFnPtr};\n use middle::ty::TyProjection;\n use middle::ty::util::CopyImplementationError;\n use middle::free_region::FreeRegionMap;\n@@ -67,8 +67,8 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-        TyStr | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n-        TyParam(..) | TyError |\n+        TyStr | TyArray(..) | TySlice(..) | TyFnDef(..) | TyFnPtr(_) |\n+        TyTuple(..) | TyParam(..) | TyError |\n         TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n             None\n         }"}, {"sha": "ab781ea57d413f26c7bd90c1ecf686bbcb6082ea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -552,8 +552,7 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id,\n                                     container);\n \n-    let fty = ccx.tcx.mk_fn(Some(def_id),\n-                            ccx.tcx.mk_bare_fn(ty_method.fty.clone()));\n+    let fty = ccx.tcx.mk_fn_def(def_id, ty_method.fty.clone());\n     debug!(\"method {} (id {}) has type {:?}\",\n             name, id, fty);\n     ccx.tcx.register_item_type(def_id, TypeScheme {\n@@ -1436,7 +1435,7 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         hir::ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn(ccx, generics, &ty::Generics::empty());\n             let tofd = astconv::ty_of_bare_fn(&ccx.icx(generics), unsafety, abi, &decl);\n-            let ty = tcx.mk_fn(Some(ccx.tcx.map.local_def_id(it.id)), tcx.mk_bare_fn(tofd));\n+            let ty = tcx.mk_fn_def(ccx.tcx.map.local_def_id(it.id), tofd);\n             ty::TypeScheme { ty: ty, generics: ty_generics }\n         }\n         hir::ItemTy(ref t, ref generics) => {\n@@ -1556,7 +1555,9 @@ fn compute_type_scheme_of_foreign_item<'a, 'tcx>(\n {\n     match it.node {\n         hir::ForeignItemFn(ref fn_decl, ref generics) => {\n-            compute_type_scheme_of_foreign_fn_decl(ccx, fn_decl, generics, abi)\n+            compute_type_scheme_of_foreign_fn_decl(\n+                ccx, ccx.tcx.map.local_def_id(it.id),\n+                fn_decl, generics, abi)\n         }\n         hir::ForeignItemStatic(ref t, _) => {\n             ty::TypeScheme {\n@@ -2107,6 +2108,7 @@ fn conv_param_bounds<'a,'tcx>(astconv: &AstConv<'tcx>,\n \n fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n     ccx: &CrateCtxt<'a, 'tcx>,\n+    id: DefId,\n     decl: &hir::FnDecl,\n     ast_generics: &hir::Generics,\n     abi: abi::Abi)\n@@ -2140,14 +2142,13 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n             ty::FnDiverging\n     };\n \n-    let t_fn = ccx.tcx.mk_fn(None,\n-        ccx.tcx.mk_bare_fn(ty::BareFnTy {\n-            abi: abi,\n-            unsafety: hir::Unsafety::Unsafe,\n-            sig: ty::Binder(ty::FnSig {inputs: input_tys,\n-                                       output: output,\n-                                       variadic: decl.variadic}),\n-        }));\n+    let t_fn = ccx.tcx.mk_fn_def(id, ty::BareFnTy {\n+        abi: abi,\n+        unsafety: hir::Unsafety::Unsafe,\n+        sig: ty::Binder(ty::FnSig {inputs: input_tys,\n+                                    output: output,\n+                                    variadic: decl.variadic}),\n+    });\n \n     ty::TypeScheme {\n         generics: ty_generics,"}, {"sha": "907ee15c41ba0238ba1c6e3ad725f2c248ca29ab", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -72,7 +72,8 @@ fn parameters_for_type_shallow<'tcx>(ty: Ty<'tcx>) -> Vec<Parameter> {\n             parameters_for_regions_in_substs(&pi.trait_ref.substs),\n         ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n         ty::TyFloat(..) | ty::TyBox(..) | ty::TyStr |\n-        ty::TyArray(..) | ty::TySlice(..) | ty::TyBareFn(..) |\n+        ty::TyArray(..) | ty::TySlice(..) |\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) |\n         ty::TyTuple(..) | ty::TyRawPtr(..) |\n         ty::TyInfer(..) | ty::TyClosure(..) | ty::TyError =>\n             vec![]"}, {"sha": "d986d19e0f079f79a6c3cbc0b4bbbf77ab59f330", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -220,7 +220,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n     let tcx = ccx.tcx;\n     let main_t = tcx.node_id_to_type(main_id);\n     match main_t.sty {\n-        ty::TyBareFn(..) => {\n+        ty::TyFnDef(..) => {\n             match tcx.map.find(main_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n@@ -236,15 +236,15 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let main_def_id = tcx.map.local_def_id(main_id);\n-            let se_ty = tcx.mk_fn(Some(main_def_id), tcx.mk_bare_fn(ty::BareFnTy {\n+            let se_ty = tcx.mk_fn_def(main_def_id, ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n                     inputs: Vec::new(),\n                     output: ty::FnConverging(tcx.mk_nil()),\n                     variadic: false\n                 })\n-            }));\n+            });\n \n             require_same_types(tcx, None, false, main_span, main_t, se_ty,\n                 || {\n@@ -266,7 +266,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n     let tcx = ccx.tcx;\n     let start_t = tcx.node_id_to_type(start_id);\n     match start_t.sty {\n-        ty::TyBareFn(..) => {\n+        ty::TyFnDef(..) => {\n             match tcx.map.find(start_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n@@ -282,8 +282,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n \n-            let se_ty = tcx.mk_fn(Some(ccx.tcx.map.local_def_id(start_id)),\n-                                  tcx.mk_bare_fn(ty::BareFnTy {\n+            let se_ty = tcx.mk_fn_def(ccx.tcx.map.local_def_id(start_id), ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -294,7 +293,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     output: ty::FnConverging(tcx.types.isize),\n                     variadic: false,\n                 }),\n-            }));\n+            });\n \n             require_same_types(tcx, None, false, start_span, start_t, se_ty,\n                 || {"}, {"sha": "8e24a5cc1ea7465878c90b9c9f346c8fbd5d144f", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -429,7 +429,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyBareFn(_, &ty::BareFnTy { ref sig, .. }) => {\n+            ty::TyFnDef(_, &ty::BareFnTy { ref sig, .. }) |\n+            ty::TyFnPtr(&ty::BareFnTy { ref sig, .. }) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }\n "}, {"sha": "90cdd7e583326de1707e6f581b7b857a4cd88d54", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -164,7 +164,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &TyCtxt,\n fn build_external_function(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::Function {\n     let t = tcx.lookup_item_type(did);\n     let (decl, style, abi) = match t.ty.sty {\n-        ty::TyBareFn(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n+        ty::TyFnDef(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n         _ => panic!(\"bad function\"),\n     };\n "}, {"sha": "579bef0ec9c8fa1089874ec30bfe0e87be406b5b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -1663,7 +1663,8 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 mutability: mt.mutbl.clean(cx),\n                 type_: box mt.ty.clean(cx),\n             },\n-            ty::TyBareFn(_, ref fty) => BareFunction(box BareFunctionDecl {\n+            ty::TyFnDef(_, ref fty) |\n+            ty::TyFnPtr(ref fty) => BareFunction(box BareFunctionDecl {\n                 unsafety: fty.unsafety,\n                 generics: Generics {\n                     lifetimes: Vec::new(),"}, {"sha": "4cb846b51868fc9d62ded630170e5a3e62d817af", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -14,26 +14,26 @@ pub mod testtypes {\n     use std::any::TypeId;\n \n     pub fn type_ids() -> Vec<TypeId> {\n-        let mut ids = vec!();\n-        ids.push(TypeId::of::<FooNil>());\n-        ids.push(TypeId::of::<FooBool>());\n-        ids.push(TypeId::of::<FooInt>());\n-        ids.push(TypeId::of::<FooUint>());\n-        ids.push(TypeId::of::<FooFloat>());\n-        ids.push(TypeId::of::<FooEnum>());\n-        ids.push(TypeId::of::<FooUniq>());\n-        ids.push(TypeId::of::<FooPtr>());\n-        ids.push(TypeId::of::<&'static FooTrait>());\n-        ids.push(TypeId::of::<FooStruct>());\n-        ids.push(TypeId::of::<FooTuple>());\n-        ids\n+        vec![\n+            TypeId::of::<FooBool>(),\n+            TypeId::of::<FooInt>(),\n+            TypeId::of::<FooUint>(),\n+            TypeId::of::<FooFloat>(),\n+            TypeId::of::<FooStr>(),\n+            TypeId::of::<FooArray>(),\n+            TypeId::of::<FooSlice>(),\n+            TypeId::of::<FooBox>(),\n+            TypeId::of::<FooPtr>(),\n+            TypeId::of::<FooRef>(),\n+            TypeId::of::<FooFnPtr>(),\n+            TypeId::of::<FooNil>(),\n+            TypeId::of::<FooTuple>(),\n+            TypeId::of::<FooTrait>(),\n+            TypeId::of::<FooStruct>(),\n+            TypeId::of::<FooEnum>()\n+        ]\n     }\n \n-    // Tests ty_nil\n-    pub type FooNil = ();\n-\n-    // Skipping ty_bot\n-\n     // Tests TyBool\n     pub type FooBool = bool;\n \n@@ -49,25 +49,26 @@ pub mod testtypes {\n     // Tests TyFloat (does not test all variants of FloatTy)\n     pub type FooFloat = f64;\n \n-    // For TyStr, what kind of string should I use? &'static str? String? Raw str?\n+    // Tests TyStr\n+    pub type FooStr = str;\n \n-    // Tests TyEnum\n-    pub enum FooEnum {\n-        VarA(usize),\n-        VarB(usize, usize)\n-    }\n+    // Tests TyArray\n+    pub type FooArray = [u8; 1];\n \n-    // Tests TyBox (of u8)\n-    pub type FooUniq = Box<u8>;\n+    // Tests TySlice\n+    pub type FooSlice = [u8];\n \n-    // As with TyStr, what type should be used for TyArray?\n+    // Tests TyBox (of u8)\n+    pub type FooBox = Box<u8>;\n \n     // Tests TyRawPtr\n     pub type FooPtr = *const u8;\n \n-    // Skipping TyRef\n+    // Tests TyRef\n+    pub type FooRef = &'static u8;\n \n-    // Skipping TyBareFn (how do you get a bare function type, rather than proc or closure?)\n+    // Tests TyFnPtr\n+    pub type FooFnPtr = fn(u8) -> bool;\n \n     // Tests TyTrait\n     pub trait FooTrait {\n@@ -80,14 +81,17 @@ pub mod testtypes {\n         foo_field: usize\n     }\n \n+    // Tests TyEnum\n+    pub enum FooEnum {\n+        VarA(usize),\n+        VarB(usize, usize)\n+    }\n+\n     // Tests TyTuple\n+    pub type FooNil = ();\n     pub type FooTuple = (u8, i8, bool);\n \n-    // Skipping ty_param\n-\n-    // Skipping ty_self\n-\n-    // Skipping ty_self\n+    // Skipping TyParam\n \n     // Skipping TyInfer\n "}, {"sha": "2aa2546cb9fe124b0ca324be16ed9c3e430193df", "filename": "src/test/compile-fail/invalid-intrinsic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fcompile-fail%2Finvalid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fcompile-fail%2Finvalid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-intrinsic.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    pub static breakpoint : unsafe extern \"rust-intrinsic\" fn();\n+    //~^ ERROR intrinsic has wrong type\n+}\n+fn main() { unsafe { breakpoint(); } }\n\\ No newline at end of file"}, {"sha": "1d5ebdbae3e2e959fa182046412a33f3bf7334a7", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n         //~^ ERROR: mismatched types\n         //~| expected `unsafe extern \"C\" fn(isize, u8)`\n-        //~| found `unsafe extern \"C\" fn(isize, u8, ...)`\n+        //~| found `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n         //~| expected non-variadic fn\n         //~| found variadic function\n "}, {"sha": "084b7a166cdd36c4f9a24d18ec61996c5051216e", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b423a0f9ef488ca4cd9ff620a44566bb441eb21f/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "patch": "@@ -19,23 +19,29 @@ use issue13507::testtypes;\n use std::any::TypeId;\n \n pub fn type_ids() -> Vec<TypeId> {\n-    let mut ids = vec!();\n-    ids.push(TypeId::of::<testtypes::FooNil>());\n-    ids.push(TypeId::of::<testtypes::FooBool>());\n-    ids.push(TypeId::of::<testtypes::FooInt>());\n-    ids.push(TypeId::of::<testtypes::FooUint>());\n-    ids.push(TypeId::of::<testtypes::FooFloat>());\n-    ids.push(TypeId::of::<testtypes::FooEnum>());\n-    ids.push(TypeId::of::<testtypes::FooUniq>());\n-    ids.push(TypeId::of::<testtypes::FooPtr>());\n-    ids.push(TypeId::of::<&'static testtypes::FooTrait>());\n-    ids.push(TypeId::of::<testtypes::FooStruct>());\n-    ids.push(TypeId::of::<testtypes::FooTuple>());\n-    ids\n+    use issue13507::testtypes::*;\n+    vec![\n+        TypeId::of::<FooBool>(),\n+        TypeId::of::<FooInt>(),\n+        TypeId::of::<FooUint>(),\n+        TypeId::of::<FooFloat>(),\n+        TypeId::of::<FooStr>(),\n+        TypeId::of::<FooArray>(),\n+        TypeId::of::<FooSlice>(),\n+        TypeId::of::<FooBox>(),\n+        TypeId::of::<FooPtr>(),\n+        TypeId::of::<FooRef>(),\n+        TypeId::of::<FooFnPtr>(),\n+        TypeId::of::<FooNil>(),\n+        TypeId::of::<FooTuple>(),\n+        TypeId::of::<FooTrait>(),\n+        TypeId::of::<FooStruct>(),\n+        TypeId::of::<FooEnum>()\n+    ]\n }\n \n pub fn main() {\n-    let othercrate = testtypes::type_ids();\n+    let othercrate = issue13507::testtypes::type_ids();\n     let thiscrate = type_ids();\n     assert_eq!(thiscrate, othercrate);\n }"}]}