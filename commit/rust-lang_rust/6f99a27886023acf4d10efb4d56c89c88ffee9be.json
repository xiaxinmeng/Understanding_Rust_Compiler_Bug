{"sha": "6f99a27886023acf4d10efb4d56c89c88ffee9be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOTlhMjc4ODYwMjNhY2Y0ZDEwZWZiNGQ1NmM4OWM4OGZmZWU5YmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-18T04:44:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-19T20:10:58Z"}, "message": "librustc: Implement lifetime elision.\n\nThis implements RFC 39. Omitted lifetimes in return values will now be\ninferred to more useful defaults, and an error is reported if a lifetime\nin a return type is omitted and one of the two lifetime elision rules\ndoes not specify what it should be.\n\nThis primarily breaks two uncommon code patterns. The first is this:\n\n    unsafe fn get_foo_out_of_thin_air() -> &Foo {\n        ...\n    }\n\nThis should be changed to:\n\n    unsafe fn get_foo_out_of_thin_air() -> &'static Foo {\n        ...\n    }\n\nThe second pattern that needs to be changed is this:\n\n    enum MaybeBorrowed<'a> {\n        Borrowed(&'a str),\n        Owned(String),\n    }\n\n    fn foo() -> MaybeBorrowed {\n        Owned(format!(\"hello world\"))\n    }\n\nChange code like this to:\n\n    enum MaybeBorrowed<'a> {\n        Borrowed(&'a str),\n        Owned(String),\n    }\n\n    fn foo() -> MaybeBorrowed<'static> {\n        Owned(format!(\"hello world\"))\n    }\n\nCloses #15552.\n\n[breaking-change]", "tree": {"sha": "ec05b0c028ea286b9c7ff4d0e3552e004462e488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec05b0c028ea286b9c7ff4d0e3552e004462e488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f99a27886023acf4d10efb4d56c89c88ffee9be", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f99a27886023acf4d10efb4d56c89c88ffee9be", "html_url": "https://github.com/rust-lang/rust/commit/6f99a27886023acf4d10efb4d56c89c88ffee9be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f99a27886023acf4d10efb4d56c89c88ffee9be/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793b1424ac52b7d1cb20e508e313ce516530cea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/793b1424ac52b7d1cb20e508e313ce516530cea7", "html_url": "https://github.com/rust-lang/rust/commit/793b1424ac52b7d1cb20e508e313ce516530cea7"}], "stats": {"total": 471, "additions": 303, "deletions": 168}, "files": [{"sha": "48ea1bd1c0150d72fcd641c600c88dfcac9f5ac5", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -87,12 +87,14 @@ impl<T> Rawlink<T> {\n     }\n \n     /// Convert the `Rawlink` into an Option value\n-    fn resolve_immut(&self) -> Option<&T> {\n-        unsafe { self.p.to_option() }\n+    fn resolve_immut<'a>(&self) -> Option<&'a T> {\n+        unsafe {\n+            mem::transmute(self.p.to_option())\n+        }\n     }\n \n     /// Convert the `Rawlink` into an Option value\n-    fn resolve(&mut self) -> Option<&mut T> {\n+    fn resolve<'a>(&mut self) -> Option<&'a mut T> {\n         if self.p.is_null() {\n             None\n         } else {"}, {"sha": "3c93a795071a6719831719aa4007036a7119d08e", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -455,12 +455,12 @@ impl<'a> LabelText<'a> {\n     }\n \n     /// Puts `prefix` on a line above this label, with a blank line separator.\n-    pub fn prefix_line(self, prefix: LabelText) -> LabelText {\n+    pub fn prefix_line(self, prefix: LabelText) -> LabelText<'static> {\n         prefix.suffix_line(self)\n     }\n \n     /// Puts `suffix` on a line below this label, with a blank line separator.\n-    pub fn suffix_line(self, suffix: LabelText) -> LabelText {\n+    pub fn suffix_line(self, suffix: LabelText) -> LabelText<'static> {\n         let prefix = self.pre_escaped_content().into_string();\n         let suffix = suffix.pre_escaped_content();\n         EscStr(str::Owned(prefix.append(r\"\\n\\n\").append(suffix.as_slice())))"}, {"sha": "9e52af72138bba2fb839a25a8554b733956677d6", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -109,7 +109,7 @@ impl<'b,T> slice::Vector<T> for MaybeOwnedVector<'b,T> {\n }\n \n impl<'a,T> FromIterator<T> for MaybeOwnedVector<'a,T> {\n-    fn from_iter<I:Iterator<T>>(iterator: I) -> MaybeOwnedVector<T> {\n+    fn from_iter<I:Iterator<T>>(iterator: I) -> MaybeOwnedVector<'a,T> {\n         // If we are building from scratch, might as well build the\n         // most flexible variant.\n         Growable(FromIterator::from_iter(iterator))"}, {"sha": "7151a78eacd43159380f5fd6fe4a99109e569d2e", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -959,13 +959,13 @@ impl CleanupJob {\n type UnsafeTaskReceiver = raw::Closure;\n trait ClosureConverter {\n     fn from_fn(|&mut Scheduler, Box<GreenTask>|) -> Self;\n-    fn to_fn(self) -> |&mut Scheduler, Box<GreenTask>|;\n+    fn to_fn(self) -> |&mut Scheduler, Box<GreenTask>|:'static ;\n }\n impl ClosureConverter for UnsafeTaskReceiver {\n     fn from_fn(f: |&mut Scheduler, Box<GreenTask>|) -> UnsafeTaskReceiver {\n         unsafe { mem::transmute(f) }\n     }\n-    fn to_fn(self) -> |&mut Scheduler, Box<GreenTask>| {\n+    fn to_fn(self) -> |&mut Scheduler, Box<GreenTask>|:'static {\n         unsafe { mem::transmute(self) }\n     }\n }"}, {"sha": "013350717171cefd2f74c1da3fbce71e9b274a32", "filename": "src/librustc/middle/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -31,7 +31,7 @@ impl BasicBlock {\n         }\n     }\n \n-    pub fn pred_iter(self) -> Preds {\n+    pub fn pred_iter(self) -> Preds<'static> {\n         self.as_value().user_iter()\n             .filter(|user| user.is_a_terminator_inst())\n             .map(|user| user.get_parent().unwrap())"}, {"sha": "9b55ee657fc00de0e585fc55a814c43dd5859827", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -4872,3 +4872,55 @@ pub enum ExplicitSelfCategory {\n     ByBoxExplicitSelfCategory,\n }\n \n+/// Pushes all the lifetimes in the given type onto the given list. A\n+/// \"lifetime in a type\" is a lifetime specified by a reference or a lifetime\n+/// in a list of type substitutions. This does *not* traverse into nominal\n+/// types, nor does it resolve fictitious types.\n+pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n+                                    typ: t) {\n+    walk_ty(typ, |typ| {\n+        match get(typ).sty {\n+            ty_rptr(region, _) => accumulator.push(region),\n+            ty_enum(_, ref substs) |\n+            ty_trait(box TyTrait {\n+                substs: ref substs,\n+                ..\n+            }) |\n+            ty_struct(_, ref substs) => {\n+                match substs.regions {\n+                    subst::ErasedRegions => {}\n+                    subst::NonerasedRegions(ref regions) => {\n+                        for region in regions.iter() {\n+                            accumulator.push(*region)\n+                        }\n+                    }\n+                }\n+            }\n+            ty_closure(ref closure_ty) => {\n+                match closure_ty.store {\n+                    RegionTraitStore(region, _) => accumulator.push(region),\n+                    UniqTraitStore => {}\n+                }\n+            }\n+            ty_nil |\n+            ty_bot |\n+            ty_bool |\n+            ty_char |\n+            ty_int(_) |\n+            ty_uint(_) |\n+            ty_float(_) |\n+            ty_box(_) |\n+            ty_uniq(_) |\n+            ty_str |\n+            ty_vec(_, _) |\n+            ty_ptr(_) |\n+            ty_bare_fn(_) |\n+            ty_tup(_) |\n+            ty_param(_) |\n+            ty_infer(_) |\n+            ty_unboxed_closure(_) |\n+            ty_err => {}\n+        }\n+    })\n+}\n+"}, {"sha": "e129492dbc2f8f5e3a67fe426c2aa5a32a9c4f99", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 72, "deletions": 22, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -55,6 +55,7 @@ use middle::lang_items::FnMutTraitLangItem;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::ty;\n use middle::ty_fold::TypeFolder;\n+use middle::typeck::rscope::{ExplicitRscope, ImpliedSingleRscope};\n use middle::typeck::rscope::RegionScope;\n use middle::typeck::{TypeAndSubsts, infer, lookup_def_tcx, rscope};\n use middle::typeck;\n@@ -931,31 +932,45 @@ fn ty_of_method_or_bare_fn<AC:AstConv>(\n                                Option<ty::ExplicitSelfCategory>) {\n     debug!(\"ty_of_method_or_bare_fn\");\n \n-    // new region names that appear inside of the fn decl are bound to\n-    // that function type\n+    // New region names that appear inside of the arguments of the function\n+    // declaration are bound to that function type.\n     let rb = rscope::BindingRscope::new(id);\n \n+    // `implied_output_region` is the region that will be assumed for any\n+    // region parameters in the return type. In accordance with the rules for\n+    // lifetime elision, we can determine it in two ways. First (determined\n+    // here), if self is by-reference, then the implied output region is the\n+    // region of the self parameter.\n     let mut explicit_self_category_result = None;\n-    let self_ty = opt_self_info.and_then(|self_info| {\n-        // Figure out and record the explicit self category.\n-        let explicit_self_category =\n-            determine_explicit_self_category(this, &rb, &self_info);\n-        explicit_self_category_result = Some(explicit_self_category);\n-        match explicit_self_category {\n-            ty::StaticExplicitSelfCategory => None,\n-            ty::ByValueExplicitSelfCategory => {\n-                Some(self_info.untransformed_self_ty)\n-            }\n-            ty::ByReferenceExplicitSelfCategory(region, mutability) => {\n-                Some(ty::mk_rptr(this.tcx(), region,\n-                                 ty::mt {ty: self_info.untransformed_self_ty,\n-                                         mutbl: mutability}))\n-            }\n-            ty::ByBoxExplicitSelfCategory => {\n-                Some(ty::mk_uniq(this.tcx(), self_info.untransformed_self_ty))\n+    let (self_ty, mut implied_output_region) = match opt_self_info {\n+        None => (None, None),\n+        Some(self_info) => {\n+            // Figure out and record the explicit self category.\n+            let explicit_self_category =\n+                determine_explicit_self_category(this, &rb, &self_info);\n+            explicit_self_category_result = Some(explicit_self_category);\n+            match explicit_self_category {\n+                ty::StaticExplicitSelfCategory => (None, None),\n+                ty::ByValueExplicitSelfCategory => {\n+                    (Some(self_info.untransformed_self_ty), None)\n+                }\n+                ty::ByReferenceExplicitSelfCategory(region, mutability) => {\n+                    (Some(ty::mk_rptr(this.tcx(),\n+                                      region,\n+                                      ty::mt {\n+                                        ty: self_info.untransformed_self_ty,\n+                                        mutbl: mutability\n+                                      })),\n+                     Some(region))\n+                }\n+                ty::ByBoxExplicitSelfCategory => {\n+                    (Some(ty::mk_uniq(this.tcx(),\n+                                      self_info.untransformed_self_ty)),\n+                     None)\n+                }\n             }\n         }\n-    });\n+    };\n \n     // HACK(eddyb) replace the fake self type in the AST with the actual type.\n     let input_tys = if self_ty.is_some() {\n@@ -964,12 +979,47 @@ fn ty_of_method_or_bare_fn<AC:AstConv>(\n         decl.inputs.as_slice()\n     };\n     let input_tys = input_tys.iter().map(|a| ty_of_arg(this, &rb, a, None));\n+    let self_and_input_tys: Vec<_> =\n+        self_ty.move_iter().chain(input_tys).collect();\n+\n+    // Second, if there was exactly one lifetime (either a substitution or a\n+    // reference) in the arguments, then any anonymous regions in the output\n+    // have that lifetime.\n+    if implied_output_region.is_none() {\n+        let mut self_and_input_tys_iter = self_and_input_tys.iter();\n+        if self_ty.is_some() {\n+            // Skip the first argument if `self` is present.\n+            drop(self_and_input_tys_iter.next())\n+        }\n \n-    let self_and_input_tys = self_ty.move_iter().chain(input_tys).collect();\n+        let mut accumulator = Vec::new();\n+        for input_type in self_and_input_tys_iter {\n+            ty::accumulate_lifetimes_in_type(&mut accumulator, *input_type)\n+        }\n+        if accumulator.len() == 1 {\n+            implied_output_region = Some(*accumulator.get(0));\n+        }\n+    }\n \n     let output_ty = match decl.output.node {\n         ast::TyInfer => this.ty_infer(decl.output.span),\n-        _ => ast_ty_to_ty(this, &rb, &*decl.output)\n+        _ => {\n+            match implied_output_region {\n+                Some(implied_output_region) => {\n+                    let rb = ImpliedSingleRscope {\n+                        region: implied_output_region,\n+                    };\n+                    ast_ty_to_ty(this, &rb, &*decl.output)\n+                }\n+                None => {\n+                    // All regions must be explicitly specified in the output\n+                    // if the lifetime elision rules do not apply. This saves\n+                    // the user from potentially-confusing errors.\n+                    let rb = ExplicitRscope;\n+                    ast_ty_to_ty(this, &rb, &*decl.output)\n+                }\n+            }\n+        }\n     };\n \n     (ty::BareFnTy {"}, {"sha": "cdb691073cd3608c6ae4881f31c4748e19d7be32", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -64,10 +64,24 @@ impl RegionScope for BindingRscope {\n     fn anon_regions(&self,\n                     _: Span,\n                     count: uint)\n-                    -> Result<Vec<ty::Region> , ()> {\n+                    -> Result<Vec<ty::Region>, ()> {\n         let idx = self.anon_bindings.get();\n         self.anon_bindings.set(idx + count);\n         Ok(Vec::from_fn(count, |i| ty::ReLateBound(self.binder_id,\n                                                    ty::BrAnon(idx + i))))\n     }\n }\n+\n+/// A scope in which we generate one specific region. This occurs after the\n+/// `->` (i.e. in the return type) of function signatures.\n+pub struct ImpliedSingleRscope {\n+    pub region: ty::Region,\n+}\n+\n+impl RegionScope for ImpliedSingleRscope {\n+    fn anon_regions(&self, _: Span, count: uint)\n+                    -> Result<Vec<ty::Region>,()> {\n+        Ok(Vec::from_elem(count, self.region.clone()))\n+    }\n+}\n+"}, {"sha": "7434951d3ee9166db99cd67c3502b862dd1ab8f7", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -94,7 +94,7 @@ pub type Map = Vec<Option<(*const u8, TLSValue, uint)>>;\n type TLSValue = Box<LocalData + Send>;\n \n // Gets the map from the runtime. Lazily initialises if not done so already.\n-unsafe fn get_local_map() -> Option<&mut Map> {\n+unsafe fn get_local_map<'a>() -> Option<&'a mut Map> {\n     if !Local::exists(None::<Task>) { return None }\n \n     let task: *mut Task = Local::unsafe_borrow();"}, {"sha": "81a033e4c987ea7345543dad69154043cce118eb", "filename": "src/librustrt/rtio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustrt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustrt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Frtio.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -134,7 +134,7 @@ impl<'a> Drop for LocalIo<'a> {\n impl<'a> LocalIo<'a> {\n     /// Returns the local I/O: either the local scheduler's I/O services or\n     /// the native I/O services.\n-    pub fn borrow() -> Option<LocalIo> {\n+    pub fn borrow() -> Option<LocalIo<'a>> {\n         // FIXME(#11053): bad\n         //\n         // This is currently very unsafely implemented. We don't actually"}, {"sha": "f42f42d2111601e28190a0c4de3ec4fa8df2d6fc", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -469,7 +469,7 @@ mod test {\n     use super::super::Loop;\n     use super::super::local_loop;\n \n-    fn l() -> &mut Loop { &mut local_loop().loop_ }\n+    fn l() -> &'static mut Loop { &mut local_loop().loop_ }\n \n     #[test]\n     fn file_test_full_simple_sync() {"}, {"sha": "26d61e166f26be51fd694185de0fd69c3e51aa83", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -15,17 +15,17 @@ struct DerefWithHelper<H, T> {\n }\n \n trait Helper<T> {\n-    fn helper_borrow<'a>(&'a self) -> &'a T;\n+    fn helper_borrow(&self) -> &T;\n }\n \n impl<T> Helper<T> for Option<T> {\n-    fn helper_borrow<'a>(&'a self) -> &'a T {\n+    fn helper_borrow(&self) -> &T {\n         self.as_ref().unwrap()\n     }\n }\n \n impl<T, H: Helper<T>> Deref<T> for DerefWithHelper<H, T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self.helper.helper_borrow()\n     }\n }"}, {"sha": "b31b524cf9b45d8a4aa9de2b2e25fcff9c543684", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -156,7 +156,7 @@ impl Table {\n         }\n     }\n \n-    fn iter<'a>(&'a self) -> Items<'a> {\n+    fn iter(&self) -> Items {\n         Items { cur: None, items: self.items.iter() }\n     }\n }"}, {"sha": "784bd1e8ae45d15d95e97e3b30d1b1135f959afa", "filename": "src/test/compile-fail/borrowck-borrow-from-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -13,7 +13,7 @@\n \n struct Foo(int);\n \n-fn foo() -> &int {\n+fn foo<'a>() -> &'a int {\n     let &Foo(ref x) = &Foo(3); //~ ERROR borrowed value does not live long enough\n     x\n }"}, {"sha": "7175194355b0aa3b47cc273a1e3a39c831b8205a", "filename": "src/test/compile-fail/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@\n // other `&mut` pointers.\n \n trait Foo {\n-    fn f1<'a>(&'a mut self) -> &'a ();\n+    fn f1(&mut self) -> &();\n     fn f2(&mut self);\n }\n "}, {"sha": "05bc0d1e13b2dea51e0ead40ea1595d8cbe5cbb8", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -18,13 +18,13 @@ struct Own<T> {\n }\n \n impl<T> Deref<T> for Own<T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         unsafe { &*self.value }\n     }\n }\n \n impl<T> DerefMut<T> for Own<T> {\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.value }\n     }\n }\n@@ -44,11 +44,11 @@ impl Point {\n         self.y = y;\n     }\n \n-    fn x_ref<'a>(&'a self) -> &'a int {\n+    fn x_ref(&self) -> &int {\n         &self.x\n     }\n \n-    fn y_mut<'a>(&'a mut self) -> &'a mut int {\n+    fn y_mut(&mut self) -> &mut int {\n         &mut self.y\n     }\n }\n@@ -65,19 +65,19 @@ fn deref_mut_field2(mut x: Own<Point>) {\n     let _i = &mut x.y;\n }\n \n-fn deref_extend_field<'a>(x: &'a Own<Point>) -> &'a int {\n+fn deref_extend_field(x: &Own<Point>) -> &int {\n     &x.y\n }\n \n-fn deref_extend_mut_field1<'a>(x: &'a Own<Point>) -> &'a mut int {\n+fn deref_extend_mut_field1(x: &Own<Point>) -> &mut int {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2<'a>(x: &'a mut Own<Point>) -> &'a mut int {\n+fn deref_extend_mut_field2(x: &mut Own<Point>) -> &mut int {\n     &mut x.y\n }\n \n-fn deref_extend_mut_field3<'a>(x: &'a mut Own<Point>) {\n+fn deref_extend_mut_field3(x: &mut Own<Point>) {\n     // Hmm, this is unfortunate, because with box it would work,\n     // but it's presently the expected outcome. See `deref_extend_mut_field4`\n     // for the workaround.\n@@ -124,15 +124,15 @@ fn deref_mut_method2(mut x: Own<Point>) {\n     x.set(0, 0);\n }\n \n-fn deref_extend_method<'a>(x: &'a Own<Point>) -> &'a int {\n+fn deref_extend_method(x: &Own<Point>) -> &int {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1<'a>(x: &'a Own<Point>) -> &'a mut int {\n+fn deref_extend_mut_method1(x: &Own<Point>) -> &mut int {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2<'a>(x: &'a mut Own<Point>) -> &'a mut int {\n+fn deref_extend_mut_method2(x: &mut Own<Point>) -> &mut int {\n     x.y_mut()\n }\n "}, {"sha": "5aaefd01739908d2ebb15c271bf52e7a8255a0d6", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -18,7 +18,7 @@ struct Rc<T> {\n }\n \n impl<T> Deref<T> for Rc<T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         unsafe { &*self.value }\n     }\n }\n@@ -38,11 +38,11 @@ impl Point {\n         self.y = y;\n     }\n \n-    fn x_ref<'a>(&'a self) -> &'a int {\n+    fn x_ref(&self) -> &int {\n         &self.x\n     }\n \n-    fn y_mut<'a>(&'a mut self) -> &'a mut int {\n+    fn y_mut(&mut self) -> &mut int {\n         &mut self.y\n     }\n }\n@@ -59,15 +59,15 @@ fn deref_mut_field2(mut x: Rc<Point>) {\n     let _i = &mut x.y; //~ ERROR cannot borrow\n }\n \n-fn deref_extend_field<'a>(x: &'a Rc<Point>) -> &'a int {\n+fn deref_extend_field(x: &Rc<Point>) -> &int {\n     &x.y\n }\n \n-fn deref_extend_mut_field1<'a>(x: &'a Rc<Point>) -> &'a mut int {\n+fn deref_extend_mut_field1(x: &Rc<Point>) -> &mut int {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2<'a>(x: &'a mut Rc<Point>) -> &'a mut int {\n+fn deref_extend_mut_field2(x: &mut Rc<Point>) -> &mut int {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n@@ -95,15 +95,15 @@ fn deref_mut_method2(mut x: Rc<Point>) {\n     x.set(0, 0); //~ ERROR cannot borrow\n }\n \n-fn deref_extend_method<'a>(x: &'a Rc<Point>) -> &'a int {\n+fn deref_extend_method(x: &Rc<Point>) -> &int {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1<'a>(x: &'a Rc<Point>) -> &'a mut int {\n+fn deref_extend_mut_method1(x: &Rc<Point>) -> &mut int {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2<'a>(x: &'a mut Rc<Point>) -> &'a mut int {\n+fn deref_extend_mut_method2(x: &mut Rc<Point>) -> &mut int {\n     x.y_mut() //~ ERROR cannot borrow\n }\n "}, {"sha": "9e6bafa1eba7c35853e7b11134feab953fb46856", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -15,7 +15,7 @@\n \n use std::gc::{GC, Gc};\n \n-fn foo<'a>(x: &'a Gc<int>) -> &'a int {\n+fn foo(x: &Gc<int>) -> &int {\n     match x {\n         &ref y => {\n             &**y // Do not expect an error here"}, {"sha": "c55a5a30538d8caa2d7f26fecd591c5996f4625b", "filename": "src/test/compile-fail/borrowck-object-lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -10,14 +10,14 @@\n \n \n trait Foo {\n-    fn borrowed<'a>(&'a self) -> &'a ();\n+    fn borrowed(&self) -> &();\n }\n \n-fn borrowed_receiver<'a>(x: &'a Foo) -> &'a () {\n+fn borrowed_receiver(x: &Foo) -> &() {\n     x.borrowed()\n }\n \n-fn owned_receiver(x: Box<Foo>) -> &() {\n+fn owned_receiver(x: Box<Foo>) -> &'static () {\n     x.borrowed() //~ ERROR `*x` does not live long enough\n }\n "}, {"sha": "6d2eae8bc1e12e3cbdcfafa311238514901b9968", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -13,7 +13,7 @@ struct MyVec<T> {\n }\n \n impl<T> Index<uint, T> for MyVec<T> {\n-    fn index<'a>(&'a self, &i: &uint) -> &'a T {\n+    fn index(&self, &i: &uint) -> &T {\n         self.data.get(i)\n     }\n }"}, {"sha": "53ebaa38fddba7f4ddf796758ef814980ff7c8b7", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn a() -> &[int] {\n+fn a<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let tail = match vec {\n@@ -18,7 +18,7 @@ fn a() -> &[int] {\n     tail\n }\n \n-fn b() -> &[int] {\n+fn b<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let init = match vec {\n@@ -28,7 +28,7 @@ fn b() -> &[int] {\n     init\n }\n \n-fn c() -> &[int] {\n+fn c<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let slice = match vec {"}, {"sha": "57a276bec81bc4f8a78f908e269de05bf0ae7416", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn a() -> &int {\n+fn a<'a>() -> &'a int {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n     let tail = match vec {"}, {"sha": "b79f4507d4673876825707ae5ea2cc06e24eb993", "filename": "src/test/compile-fail/cleanup-rvalue-scopes-cf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -24,12 +24,12 @@ fn AddFlags(bits: u64) -> AddFlags {\n     AddFlags { bits: bits }\n }\n \n-fn arg<'a>(x: &'a AddFlags) -> &'a AddFlags {\n+fn arg(x: &AddFlags) -> &AddFlags {\n     x\n }\n \n impl AddFlags {\n-    fn get<'a>(&'a self) -> &'a AddFlags {\n+    fn get(&self) -> &AddFlags {\n         self\n     }\n }"}, {"sha": "1cbd6292e9907713d4eaecbc7bad812fc56ee76e", "filename": "src/test/compile-fail/drop-with-active-borrows-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn read_lines_borrowed() -> Vec<&str> {\n+fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n     let raw_lines: Vec<String> = vec!(\"foo  \".to_string(), \"  bar\".to_string());\n     raw_lines.iter().map(|l| l.as_slice().trim()).collect()\n     //~^ ERROR `raw_lines` does not live long enough"}, {"sha": "e4c6fa7d47f4a1d5f3e3ebf55bf2cca616d90710", "filename": "src/test/compile-fail/infinite-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -15,7 +15,7 @@ use std::ops::Deref;\n struct Foo;\n \n impl Deref<Foo> for Foo {\n-    fn deref<'a>(&'a self) -> &'a Foo {\n+    fn deref(&self) -> &Foo {\n         self\n     }\n }"}, {"sha": "71f1d5dcc9af4af1007fbf40ff0c8fdd57574a38", "filename": "src/test/compile-fail/issue-11681.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-11681.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-11681.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11681.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -18,7 +18,7 @@ impl Drop for Test {\n     fn drop (&mut self) {}\n }\n \n-fn createTest() -> &Test {\n+fn createTest<'a>() -> &'a Test {\n   let testValue = &Test; //~ ERROR borrowed value does not live long enough\n   return testValue;\n }"}, {"sha": "141bf2b42791b632a71393bb3f496000da660899", "filename": "src/test/compile-fail/issue-3154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@ struct thing<'a, Q> {\n     x: &'a Q\n }\n \n-fn thing<Q>(x: &Q) -> thing<Q> {\n+fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n     thing{ x: x } //~ ERROR cannot infer\n }\n "}, {"sha": "d684d1b376b8f5ebbf5f1f8c930bb5d0c2a34445", "filename": "src/test/compile-fail/issue-4972.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -15,7 +15,7 @@ pub enum TraitWrapper {\n     A(Box<MyTrait>),\n }\n \n-fn get_tw_map<'lt>(tw: &'lt TraitWrapper) -> &'lt MyTrait {\n+fn get_tw_map(tw: &TraitWrapper) -> &MyTrait {\n     match *tw {\n         A(box ref map) => map, //~ ERROR cannot be dereferenced\n     }"}, {"sha": "bf13b7ebbdbbe0ad45d32926687c2db286d1db32", "filename": "src/test/compile-fail/isuue-12470.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -31,7 +31,7 @@ fn make_a<'a>(p: &'a X) -> A<'a> {\n     A { p: p }\n }\n \n-fn make_make_a() -> A {\n+fn make_make_a<'a>() -> A<'a> {\n     let b: Box<B> = box B {i:1};\n     let bb: &B = &*b;    //~ ERROR does not live long enough\n     make_a(bb)"}, {"sha": "2e05dda719080c77ed2c7064fe9eed6f0ccab143", "filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Lifetime annotation needed because we have no arguments.\n+fn f() -> &int {    //~ ERROR missing lifetime specifier\n+    fail!()\n+}\n+\n+// Lifetime annotation needed because we have two by-reference parameters.\n+fn g(_: &int, _: &int) -> &int {    //~ ERROR missing lifetime specifier\n+    fail!()\n+}\n+\n+struct Foo<'a> {\n+    x: &'a int,\n+}\n+\n+// Lifetime annotation needed because we have two lifetime: one as a parameter\n+// and one on the reference.\n+fn h(_: &Foo) -> &int { //~ ERROR missing lifetime specifier\n+    fail!()\n+}\n+\n+fn main() {}\n+"}, {"sha": "ef5a45fcf70ae820a74659349a26012f983d0786", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -11,7 +11,7 @@\n // ignore-tidy-linelength\n \n struct Foo<'x> { bar: int }\n-fn foo1(x: &Foo) -> &int {\n+fn foo1<'a>(x: &Foo) -> &'a int {\n //~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a int\n     &x.bar //~ ERROR: cannot infer\n }\n@@ -21,65 +21,50 @@ fn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n     &x.bar //~ ERROR: cannot infer\n }\n \n-fn foo3(x: &Foo) -> (&int, &int) {\n+fn foo3<'a>(x: &Foo) -> (&'a int, &'a int) {\n //~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo3<'a>(x: &'a Foo) -> (&'a int, &'a int)\n     (&x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n \n-fn foo4<'a, 'b>(x: &'a Foo) -> (&'b int, &'a int, &int) {\n+fn foo4<'a, 'b>(x: &'a Foo) -> (&'b int, &'a int, &'b int) {\n //~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo4<'a>(x: &'a Foo) -> (&'a int, &'a int, &'a int)\n     (&x.bar, &x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n \n-fn foo5(x: &int) -> &int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo5<'a>(x: &'a int) -> &'a int\n-    x //~ ERROR: mismatched types\n-    //~^ ERROR: cannot infer\n-}\n-\n struct Bar<'x, 'y, 'z> { bar: &'y int, baz: int }\n-fn bar1(x: &Bar) -> (&int, &int, &int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar1<'a, 'b, 'c, 'd>(x: &'d Bar<'b, 'a, 'c>) -> (&'a int, &'d int, &'d int)\n+fn bar1<'a>(x: &Bar) -> (&'a int, &'a int, &'a int) {\n+//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n     (x.bar, &x.baz, &x.baz) //~ ERROR: mismatched types\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer\n }\n \n-fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&int, &int, &int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar2<'d, 'a, 'b, 'c>(x: &'d Bar<'a, 'b, 'c>) -> (&'b int, &'d int, &'d int)\n+fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&'a int, &'a int, &'a int) {\n+//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n     (x.bar, &x.baz, &x.baz) //~ ERROR: mismatched types\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer\n }\n \n struct Cat<'x, T> { cat: &'x int, t: T }\n struct Dog<'y> { dog: &'y int }\n-fn cat<'x>(x: Cat<'x, Dog>) -> &int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn cat<'a, 'x>(x: Cat<'x, Dog<'a>>) -> &'a int\n-    x.t.dog //~ ERROR: mismatched types\n-}\n \n-fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'y int\n+fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'x int {\n+//~^ NOTE: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x int\n     x.t.dog //~ ERROR: mismatched types\n }\n \n struct Baz<'x> {\n     bar: &'x int\n }\n \n-impl<'x> Baz<'x> {\n-    fn baz1(&self) -> &int {\n-    //~^ NOTE: consider using an explicit lifetime parameter as shown: fn baz1(&self) -> &'x int\n-        self.bar //~ ERROR: mismatched types\n-    }\n-}\n \n impl<'a> Baz<'a> {\n-    fn baz2(&self, x: &int) -> (&int, &int) {\n-    //~^ NOTE: consider using an explicit lifetime parameter as shown: fn baz2<'b>(&self, x: &'b int) -> (&'a int, &'b int)\n+    fn baz2<'b>(&self, x: &int) -> (&'b int, &'b int) {\n+        // The lifetime that gets assigned to `x` seems somewhat random.\n+        // I have disabled this test for the time being. --pcwalton\n         (self.bar, x) //~ ERROR: cannot infer\n         //~^ ERROR: mismatched types\n         //~^^ ERROR: mismatched types"}, {"sha": "ed3ce1fd0f077dea7131ee9a3c05aea15b5fc5ed", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -27,7 +27,7 @@ fn compute(x: &ast) -> uint {\n     }\n }\n \n-fn map_nums(x: &ast, f: |uint| -> uint) -> &ast {\n+fn map_nums<'a,'b>(x: &ast, f: |uint| -> uint) -> &'a ast<'b> {\n     match *x {\n       num(x) => {\n         return &num(f(x)); //~ ERROR borrowed value does not live long enough"}, {"sha": "082ba0f0cf10395c7ca4522619be3a64f8f3264f", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -13,7 +13,7 @@ enum ast<'a> {\n     add(&'a ast<'a>, &'a ast<'a>)\n }\n \n-fn mk_add_bad2<'a>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast {\n+fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n     add(x, y) //~ ERROR cannot infer\n }\n "}, {"sha": "2d20634cdc41de8a9bcdfe0d8fa336f227cf68c6", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -40,7 +40,7 @@ fn bar<'a,'b>(x: &'a S) -> &'b S {\n }\n \n // Meets F, but not G.\n-fn baz<'a>(x: &'a S) -> &'a S {\n+fn baz(x: &S) -> &S {\n     fail!()\n }\n "}, {"sha": "30b33e82a4b79b32dd71aed7c7b87ca6d0f6b2eb", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> |T| { fail!(); }\n+fn of<'a,T>() -> |T|:'a { fail!(); }\n fn subtype<T>(x: |T|) { fail!(); }\n \n fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {"}, {"sha": "e5444aadc1ca64d650992cf50ca746a7e337a714", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -20,7 +20,7 @@ struct not_parameterized2 {\n     g: ||: 'static\n }\n \n-fn take1(p: parameterized1) -> parameterized1 { p }\n+fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }\n //~^ ERROR mismatched types\n //~^^ ERROR cannot infer\n "}, {"sha": "b00ceec028782d917e65b872baa1ae5b9bae42cc", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -21,7 +21,7 @@ fn x_coord<'r>(p: &'r point) -> &'r int {\n     return &p.x;\n }\n \n-fn foo(p: Gc<point>) -> &int {\n+fn foo<'a>(p: Gc<point>) -> &'a int {\n     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;"}, {"sha": "ce6a51e8fb5e75dcd4ad6f7e6bf2ea9c2008082b", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@\n \n use std::gc::Gc;\n \n-fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n+fn borrow<T>(x: &T) -> &T {x}\n \n fn foo(cond: || -> bool, make_box: || -> Gc<int>) {\n     let mut y: &int;"}, {"sha": "cadf66c3286869fdc72776e5f97682a1769323cd", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -22,12 +22,12 @@ struct indirect2<'a> {\n     g: |direct<'a>|: 'static\n }\n \n-fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types\n+fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n //~^ ERROR cannot infer\n \n fn take_indirect1(p: indirect1) -> indirect1 { p }\n \n-fn take_indirect2(p: indirect2) -> indirect2 { p } //~ ERROR mismatched types\n+fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n //~^ ERROR cannot infer\n \n fn main() {}"}, {"sha": "27e2f5582f5a449eb4b5a939bb2f9e042a275f18", "filename": "src/test/compile-fail/regions-lifetime-of-struct-or-enum-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -18,12 +18,12 @@ enum MyEnum {\n     Variant1\n }\n \n-fn structLifetime() -> &Test {\n+fn structLifetime<'a>() -> &'a Test {\n   let testValue = &Test; //~ ERROR borrowed value does not live long enough\n   testValue\n }\n \n-fn variantLifetime() -> &MyEnum {\n+fn variantLifetime<'a>() -> &'a MyEnum {\n   let testValue = &Variant1; //~ ERROR borrowed value does not live long enough\n   testValue\n }"}, {"sha": "f9983bcf80172207e26449ebd4245f163516bd8b", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -19,7 +19,7 @@ fn with<R>(f: |x: &int| -> R) -> R {\n     f(&3)\n }\n \n-fn return_it() -> &int {\n+fn return_it<'a>() -> &'a int {\n     with(|o| o) //~ ERROR mismatched types\n         //~^ ERROR lifetime of return value does not outlive the function call\n         //~^^ ERROR cannot infer"}, {"sha": "4986771c79397375745cf2a1dc2f5a0230354cd4", "filename": "src/test/compile-fail/regions-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<'a>(_x : &'a int) -> &'a int {\n+fn f(_x: &int) -> &int {\n     return &3; //~ ERROR borrowed value does not live long enough\n }\n "}, {"sha": "53cfd4e0324977221a374f23236cc177c18b79c3", "filename": "src/test/compile-fail/regions-trait-variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -34,11 +34,11 @@ struct A<'r> {\n     p: &'r X\n }\n \n-fn make_a<'r>(p:&'r X) -> A<'r> {\n+fn make_a(p:&X) -> A {\n     A{p:p}\n }\n \n-fn make_make_a() -> A {\n+fn make_make_a<'a>() -> A<'a> {\n     let b: Box<B> = box B {\n         i: 1,\n     };"}, {"sha": "02c7dc38db00fe9198b8b6ce2d62396177044f8c", "filename": "src/test/run-pass/borrowck-scope-of-deref-issue-4666.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -17,7 +17,7 @@ struct Box {\n }\n \n impl Box {\n-    fn get<'a>(&'a self) -> &'a uint {\n+    fn get(&self) -> &uint {\n         &self.x\n     }\n     fn set(&mut self, x: uint) {"}, {"sha": "dd3a7b86bea830b98840f99fb232beba55c673fd", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -60,7 +60,7 @@ impl<T> Mutable for cat<T> {\n impl<T> Map<int, T> for cat<T> {\n     fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    fn find<'a>(&'a self, k: &int) -> Option<&'a T> {\n+    fn find(&self, k: &int) -> Option<&T> {\n         if *k <= self.meows {\n             Some(&self.name)\n         } else {\n@@ -75,7 +75,7 @@ impl<T> MutableMap<int, T> for cat<T> {\n         true\n     }\n \n-    fn find_mut<'a>(&'a mut self, _k: &int) -> Option<&'a mut T> { fail!() }\n+    fn find_mut(&mut self, _k: &int) -> Option<&mut T> { fail!() }\n \n     fn remove(&mut self, k: &int) -> bool {\n         if self.find(k).is_some() {\n@@ -91,7 +91,7 @@ impl<T> MutableMap<int, T> for cat<T> {\n }\n \n impl<T> cat<T> {\n-    pub fn get<'a>(&'a self, k: &int) -> &'a T {\n+    pub fn get(&self, k: &int) -> &T {\n         match self.find(k) {\n           Some(v) => { v }\n           None    => { fail!(\"epic fail\"); }"}, {"sha": "932a5a044ad3e2bfda211090ac662ec64734ab7b", "filename": "src/test/run-pass/cleanup-rvalue-for-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -42,7 +42,7 @@ fn check_flags(exp: u64) {\n }\n \n impl AddFlags {\n-    fn check_flags<'a>(&'a self, exp: u64) -> &'a AddFlags {\n+    fn check_flags(&self, exp: u64) -> &AddFlags {\n         check_flags(exp);\n         self\n     }"}, {"sha": "a62e329f106f542914543a8062475755ead843d7", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -19,7 +19,7 @@ impl<'a> font<'a> {\n     }\n }\n \n-fn font<'r>(fontbuf: &'r Vec<u8> ) -> font<'r> {\n+fn font(fontbuf: &Vec<u8> ) -> font {\n     font {\n         fontbuf: fontbuf\n     }"}, {"sha": "23e26ca5665c5a5a3e658baa1f153c85a1198915", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@ struct CMap<'a> {\n     buf: &'a [u8],\n }\n \n-fn CMap<'r>(buf: &'r [u8]) -> CMap<'r> {\n+fn CMap(buf: &[u8]) -> CMap {\n     CMap {\n         buf: buf\n     }"}, {"sha": "822fda8a18ec825c3f93ca39d6379fe5d99e0305", "filename": "src/test/run-pass/issue-4464.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-4464.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-4464.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4464.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn broken<'r>(v: &'r [u8], i: uint, j: uint) -> &'r [u8] { v.slice(i, j) }\n+fn broken(v: &[u8], i: uint, j: uint) -> &[u8] { v.slice(i, j) }\n \n pub fn main() {}"}, {"sha": "2bb320e55623514f0532e0438508488c809de445", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -33,7 +33,7 @@ struct Outer<'a> {\n }\n \n impl<'a> Outer<'a> {\n-    fn new<'r>(inner: &'r Inner) -> Outer<'r> {\n+    fn new(inner: &Inner) -> Outer {\n         Outer {\n             inner: inner\n         }"}, {"sha": "d8bb61477a0c8750904cc845edae4c1e08cf0542", "filename": "src/test/run-pass/issue-7911.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7911.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -23,17 +23,17 @@ struct Foo { bar: Bar }\n impl FooBar for Bar {}\n \n trait Test {\n-    fn get_immut<'r>(&'r self) -> &'r FooBar;\n-    fn get_mut<'r>(&'r mut self) -> &'r mut FooBar;\n+    fn get_immut(&self) -> &FooBar;\n+    fn get_mut(&mut self) -> &mut FooBar;\n }\n \n macro_rules! generate_test(($type_:path, $slf:ident, $field:expr) => (\n     impl Test for $type_ {\n-        fn get_immut<'r>(&'r $slf) -> &'r FooBar {\n+        fn get_immut(&$slf) -> &FooBar {\n             &$field as &FooBar\n         }\n \n-        fn get_mut<'r>(&'r mut $slf) -> &'r mut FooBar {\n+        fn get_mut(&mut $slf) -> &mut FooBar {\n             &mut $field as &mut FooBar\n         }\n     }"}, {"sha": "10c07e6435400476f7d42ba56ad4f0f769823331", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -29,7 +29,7 @@ impl<T> E<T> {\n             Nothing(..) => true\n         }\n     }\n-    fn get_ref<'r>(&'r self) -> (int, &'r T) {\n+    fn get_ref(&self) -> (int, &T) {\n         match *self {\n             Nothing(..) => fail!(\"E::get_ref(Nothing::<{}>)\",  stringify!(T)),\n             Thing(x, ref y) => (x, y)"}, {"sha": "a896d2b06f7bddbf3de1e66e130252892db001d8", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -43,7 +43,7 @@ impl ops::Not<Point> for Point {\n }\n \n impl ops::Index<bool,int> for Point {\n-    fn index<'a>(&'a self, x: &bool) -> &'a int {\n+    fn index(&self, x: &bool) -> &int {\n         if *x {\n             &self.x\n         } else {"}, {"sha": "24146c4a6ea6a46ab1845d45ed7a9e43275f5e47", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -33,14 +33,14 @@ impl<T> DerefCounter<T> {\n }\n \n impl<T> Deref<T> for DerefCounter<T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self.count_imm.set(self.count_imm.get() + 1);\n         &self.value\n     }\n }\n \n impl<T> DerefMut<T> for DerefCounter<T> {\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T {\n         self.count_mut += 1;\n         &mut self.value\n     }"}, {"sha": "0a9ac734c26fdd96a5f6d06e61503ed9459def91", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -22,7 +22,7 @@ impl<X, Y> DerefWrapper<X, Y> {\n }\n \n impl<X, Y> Deref<Y> for DerefWrapper<X, Y> {\n-    fn deref<'a>(&'a self) -> &'a Y {\n+    fn deref(&self) -> &Y {\n         &self.y\n     }\n }\n@@ -43,7 +43,7 @@ mod priv_test {\n     }\n \n     impl<X, Y> Deref<Y> for DerefWrapperHideX<X, Y> {\n-        fn deref<'a>(&'a self) -> &'a Y {\n+        fn deref(&self) -> &Y {\n             &self.y\n         }\n     }"}, {"sha": "f71afb96507432390009310b9d237e4505dc609d", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -15,17 +15,17 @@ struct DerefWithHelper<H, T> {\n }\n \n trait Helper<T> {\n-    fn helper_borrow<'a>(&'a self) -> &'a T;\n+    fn helper_borrow(&self) -> &T;\n }\n \n impl<T> Helper<T> for Option<T> {\n-    fn helper_borrow<'a>(&'a self) -> &'a T {\n+    fn helper_borrow(&self) -> &T {\n         self.as_ref().unwrap()\n     }\n }\n \n impl<T, H: Helper<T>> Deref<T> for DerefWithHelper<H, T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self.helper.helper_borrow()\n     }\n }"}, {"sha": "0b5406b8f67d5a7c645c2228567debaaa43dc25d", "filename": "src/test/run-pass/overloaded-deref-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -33,14 +33,14 @@ impl<T> DerefCounter<T> {\n }\n \n impl<T> Deref<T> for DerefCounter<T> {\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self.count_imm.set(self.count_imm.get() + 1);\n         &self.value\n     }\n }\n \n impl<T> DerefMut<T> for DerefCounter<T> {\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T {\n         self.count_mut += 1;\n         &mut self.value\n     }"}, {"sha": "1187e066950704a9765cb9106bb4f5313ec75f32", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n }\n \n impl Index<int,int> for Foo {\n-    fn index<'a>(&'a self, z: &int) -> &'a int {\n+    fn index(&self, z: &int) -> &int {\n         if *z == 0 {\n             &self.x\n         } else {\n@@ -24,7 +24,7 @@ impl Index<int,int> for Foo {\n }\n \n impl IndexMut<int,int> for Foo {\n-    fn index_mut<'a>(&'a mut self, z: &int) -> &'a mut int {\n+    fn index_mut(&mut self, z: &int) -> &mut int {\n         if *z == 0 {\n             &mut self.x\n         } else {"}, {"sha": "bb2885a21778525045bc9cae919fa85a8d2013f0", "filename": "src/test/run-pass/regions-addr-of-interior-of-unique-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -18,7 +18,7 @@ struct Character {\n     pos: Box<Point>,\n }\n \n-fn get_x<'r>(x: &'r Character) -> &'r int {\n+fn get_x(x: &Character) -> &int {\n     // interesting case because the scope of this\n     // borrow of the unique pointer is in fact\n     // larger than the fn itself"}, {"sha": "a046ba456a6b06e9eb306a764986fca97bfb0ec3", "filename": "src/test/run-pass/regions-addr-of-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<'a>(x : &'a int) -> &'a int {\n+fn f(x: &int) -> &int {\n     return &*x;\n }\n "}, {"sha": "b4523ce41ce751af93ba7c58690fa58ea2727666", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@ struct closure_box<'a> {\n     cl: ||: 'a,\n }\n \n-fn box_it<'r>(x: ||: 'r) -> closure_box<'r> {\n+fn box_it(x: ||) -> closure_box {\n     closure_box {cl: x}\n }\n "}, {"sha": "252c0b5578ac65bfd3e8348a7f2bde749c8cbad2", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -29,54 +29,54 @@ struct C {\n     f: int\n }\n \n-fn get_v1<'v>(a: &'v A) -> &'v int {\n+fn get_v1(a: &A) -> &int {\n     // Region inferencer must deduce that &v < L2 < L1\n     let foo = &a.value; // L1\n     &foo.v1             // L2\n }\n \n-fn get_v2<'v>(a: &'v A, i: uint) -> &'v int {\n+fn get_v2(a: &A, i: uint) -> &int {\n     let foo = &a.value;\n     &foo.v2[i]\n }\n \n-fn get_v3<'v>(a: &'v A, i: uint) -> &'v int {\n+fn get_v3(a: &A, i: uint) -> &int {\n     let foo = &a.value;\n     foo.v3.get(i)\n }\n \n-fn get_v4<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v4(a: &A, _i: uint) -> &int {\n     let foo = &a.value;\n     &foo.v4.f\n }\n \n-fn get_v5<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v5(a: &A, _i: uint) -> &int {\n     let foo = &a.value;\n     &foo.v5.f\n }\n \n-fn get_v6_a<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v6_a(a: &A, _i: uint) -> &int {\n     match a.value.v6 {\n         Some(ref v) => &v.f,\n         None => fail!()\n     }\n }\n \n-fn get_v6_b<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v6_b(a: &A, _i: uint) -> &int {\n     match *a {\n         A { value: B { v6: Some(ref v), .. } } => &v.f,\n         _ => fail!()\n     }\n }\n \n-fn get_v6_c<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v6_c(a: &A, _i: uint) -> &int {\n     match a {\n         &A { value: B { v6: Some(ref v), .. } } => &v.f,\n         _ => fail!()\n     }\n }\n \n-fn get_v5_ref<'v>(a: &'v A, _i: uint) -> &'v int {\n+fn get_v5_ref(a: &A, _i: uint) -> &int {\n     match &a.value {\n         &B {v5: box C {f: ref v}, ..} => v\n     }"}, {"sha": "311fd1bcdf2e06cb72392b50a06ab7fe61db7bad", "filename": "src/test/run-pass/regions-dependent-autofn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we autoslice a vector.\n // Issue #3148.\n \n-fn subslice<'r>(v: ||: 'r) -> ||: 'r { v }\n+fn subslice(v: ||) -> || { v }\n \n-fn both<'r>(v: ||: 'r) -> ||: 'r {\n+fn both(v: ||) -> || {\n     subslice(subslice(v))\n }\n "}, {"sha": "46e1aaa3a241b180a6b51204ecddc554535567fa", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@\n \n use std::gc::GC;\n \n-fn foo<'r>(x: &'r uint) -> &'r uint { x }\n+fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {"}, {"sha": "c4e0e3bb4fc11ec674f441f019be179243394b1e", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn view<'r, T>(x: &'r [T]) -> &'r [T] {x}\n+fn view<T>(x: &[T]) -> &[T] {x}\n \n pub fn main() {\n     let v = vec!(1i, 2, 3);"}, {"sha": "4d4417189c9081f805566c8235cf64e47bb07c13", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -10,7 +10,7 @@\n \n use std::gc::GC;\n \n-fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n+fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n     let x = box(GC) 3i;"}, {"sha": "65e753ddee12d384f21b4293a11f02b460a3ab03", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -14,7 +14,7 @@ use std::gc::GC;\n \n struct Point {x: int, y: int}\n \n-fn x_coord<'r>(p: &'r Point) -> &'r int {\n+fn x_coord(p: &Point) -> &int {\n     return &p.x;\n }\n "}, {"sha": "845ef4017447c58ab0e083efdbf7c476ad2d621d", "filename": "src/test/run-pass/regions-nullary-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@ enum roption<'a> {\n     a, b(&'a uint)\n }\n \n-fn mk<'r>(cond: bool, ptr: &'r uint) -> roption<'r> {\n+fn mk(cond: bool, ptr: &uint) -> roption {\n     if cond {a} else {b(ptr)}\n }\n "}, {"sha": "c0e821b8d3854424fe960f2f7eba8bec0a2ed8a8", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn region_identity<'r>(x: &'r uint) -> &'r uint { x }\n+fn region_identity(x: &uint) -> &uint { x }\n \n fn apply<T>(t: T, f: |T| -> T) -> T { f(t) }\n "}, {"sha": "f6971a8b4ad30e189cc61b720ae589e78ba30a86", "filename": "src/test/run-pass/regions-return-interior-of-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn get<'r, T>(opt: &'r Option<T>) -> &'r T {\n+fn get<T>(opt: &Option<T>) -> &T {\n     match *opt {\n       Some(ref v) => v,\n       None => fail!(\"none\")"}, {"sha": "f1d2adcaf94d876478fe142df78353b6e4388427", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f99a27886023acf4d10efb4d56c89c88ffee9be/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=6f99a27886023acf4d10efb4d56c89c88ffee9be", "patch": "@@ -12,7 +12,7 @@ struct closure_box<'a> {\n     cl: ||: 'a,\n }\n \n-fn box_it<'r>(x: ||: 'r) -> closure_box<'r> {\n+fn box_it(x: ||) -> closure_box {\n     closure_box {cl: x}\n }\n "}]}