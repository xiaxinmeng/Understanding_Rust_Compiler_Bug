{"sha": "2ce2d145c2cbcb93389dbea429d7e034ff367f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTJkMTQ1YzJjYmNiOTMzODlkYmVhNDI5ZDdlMDM0ZmYzNjdmNDg=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-01-30T05:18:50Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-01-30T05:18:50Z"}, "message": "Account for union", "tree": {"sha": "346a1ae112aef60652cfcafa4adcf8ea54367f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/346a1ae112aef60652cfcafa4adcf8ea54367f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce2d145c2cbcb93389dbea429d7e034ff367f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce2d145c2cbcb93389dbea429d7e034ff367f48", "html_url": "https://github.com/rust-lang/rust/commit/2ce2d145c2cbcb93389dbea429d7e034ff367f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce2d145c2cbcb93389dbea429d7e034ff367f48/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d31e0f09f79a41e0cfc26247d41fea1489adf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d31e0f09f79a41e0cfc26247d41fea1489adf9", "html_url": "https://github.com/rust-lang/rust/commit/08d31e0f09f79a41e0cfc26247d41fea1489adf9"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "447b4f6d1e5f62ebe6af4a59d689b1aec54bcd75", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ce2d145c2cbcb93389dbea429d7e034ff367f48/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce2d145c2cbcb93389dbea429d7e034ff367f48/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2ce2d145c2cbcb93389dbea429d7e034ff367f48", "patch": "@@ -1842,13 +1842,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             {\n                 if let ObligationCauseCode::Pattern { span: Some(span), .. } = cause.code {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        let suggestion = if expected_def.is_struct() {\n+                            format!(\"{}.{}\", snippet, name)\n+                        } else if expected_def.is_union() {\n+                            format!(\"unsafe {{ {}.{} }}\", snippet, name)\n+                        } else {\n+                            return;\n+                        };\n                         diag.span_suggestion(\n                             span,\n                             &format!(\n                                 \"you might have meant to use field `{}` of type `{}`\",\n                                 name, ty\n                             ),\n-                            format!(\"{}.{}\", snippet, name),\n+                            suggestion,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "05a4a0eb1266debed55155a0fa6b9651ca88b17f", "filename": "src/test/ui/suggestions/field-access.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed?ref=2ce2d145c2cbcb93389dbea429d7e034ff367f48", "patch": "@@ -10,6 +10,11 @@ enum B {\n     Snd,\n }\n \n+union Foo {\n+    bar: u32,\n+    qux: f32,\n+}\n+\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a.b {}; //~ ERROR mismatched types [E0308]\n@@ -20,4 +25,11 @@ fn main() {\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n+\n+    let foo = Foo { bar: 42 };\n+    match unsafe { foo.bar } {\n+        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        1u32 => (), //~ ERROR mismatched types [E0308]\n+        _ => (),\n+    }\n }"}, {"sha": "ad23c0ffa2e74c60abba1ea2c1969a16331ad633", "filename": "src/test/ui/suggestions/field-access.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs?ref=2ce2d145c2cbcb93389dbea429d7e034ff367f48", "patch": "@@ -10,6 +10,11 @@ enum B {\n     Snd,\n }\n \n+union Foo {\n+    bar: u32,\n+    qux: f32,\n+}\n+\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a {}; //~ ERROR mismatched types [E0308]\n@@ -20,4 +25,11 @@ fn main() {\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n+\n+    let foo = Foo { bar: 42 };\n+    match foo {\n+        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        1u32 => (), //~ ERROR mismatched types [E0308]\n+        _ => (),\n+    }\n }"}, {"sha": "aad9872032a2a85b8bd5db6a5c0fdefe01ddbc82", "filename": "src/test/ui/suggestions/field-access.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ce2d145c2cbcb93389dbea429d7e034ff367f48/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=2ce2d145c2cbcb93389dbea429d7e034ff367f48", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/field-access.rs:15:12\n+  --> $DIR/field-access.rs:20:12\n    |\n LL |     Fst,\n    |     --- unit variant defined here\n@@ -15,7 +15,7 @@ LL |     if let B::Fst = a.b {};\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/field-access.rs:20:9\n+  --> $DIR/field-access.rs:25:9\n    |\n LL |     Fst,\n    |     --- unit variant defined here\n@@ -32,7 +32,7 @@ LL |     match a.b {\n    |           ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/field-access.rs:21:9\n+  --> $DIR/field-access.rs:26:9\n    |\n LL |     Snd,\n    |     --- unit variant defined here\n@@ -48,6 +48,20 @@ help: you might have meant to use field `b` of type `B`\n LL |     match a.b {\n    |           ^^^\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:32:9\n+   |\n+LL |     match foo {\n+   |           --- this expression has type `Foo`\n+LL |\n+LL |         1u32 => (),\n+   |         ^^^^ expected union `Foo`, found `u32`\n+   |\n+help: you might have meant to use field `bar` of type `u32`\n+   |\n+LL |     match unsafe { foo.bar } {\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}