{"sha": "8e7fc7be65791c76c363d0a1191f45902564909c", "node_id": "C_kwDOAAsO6NoAKDhlN2ZjN2JlNjU3OTFjNzZjMzYzZDBhMTE5MWY0NTkwMjU2NDkwOWM", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T13:28:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "simplify", "tree": {"sha": "e8a6967e27e23e890a8c9b1349c4d4d51769ebe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a6967e27e23e890a8c9b1349c4d4d51769ebe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7fc7be65791c76c363d0a1191f45902564909c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7fc7be65791c76c363d0a1191f45902564909c", "html_url": "https://github.com/rust-lang/rust/commit/8e7fc7be65791c76c363d0a1191f45902564909c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7fc7be65791c76c363d0a1191f45902564909c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "369001615f7ce8624139e51a42e2751da8584766", "url": "https://api.github.com/repos/rust-lang/rust/commits/369001615f7ce8624139e51a42e2751da8584766", "html_url": "https://github.com/rust-lang/rust/commit/369001615f7ce8624139e51a42e2751da8584766"}], "stats": {"total": 131, "additions": 27, "deletions": 104}, "files": [{"sha": "bcda2381a486452d599bd6d4f48ce646146c8ea9", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=8e7fc7be65791c76c363d0a1191f45902564909c", "patch": "@@ -61,7 +61,6 @@\n \n use std::rc::Rc;\n \n-use parser::ParserEntryPoint;\n use smallvec::{smallvec, SmallVec};\n use syntax::SmolStr;\n \n@@ -690,41 +689,21 @@ fn match_leaf(lhs: &tt::Leaf, src: &mut TtIter) -> Result<(), ExpandError> {\n \n fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragment>> {\n     let fragment = match kind {\n-        \"path\" => {\n-            return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Path)\n-                .map(|tt| tt.map(Fragment::Tokens));\n-        }\n-        \"expr\" => {\n-            return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Expr)\n-                .map(|tt| tt.map(Fragment::Expr));\n-        }\n-        \"ty\" => {\n-            return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Ty)\n-                .map(|tt| tt.map(Fragment::Tokens));\n-        }\n+        \"path\" => parser::PrefixEntryPoint::Path,\n+        \"ty\" => parser::PrefixEntryPoint::Ty,\n         // FIXME: These two should actually behave differently depending on the edition.\n         //\n         // https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html\n-        \"pat\" | \"pat_param\" => {\n-            return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Pat)\n-                .map(|tt| tt.map(Fragment::Tokens));\n-        }\n-        \"stmt\" => {\n-            return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Stmt)\n-                .map(|tt| tt.map(Fragment::Tokens));\n-        }\n-        \"block\" => {\n+        \"pat\" | \"pat_param\" => parser::PrefixEntryPoint::Pat,\n+        \"stmt\" => parser::PrefixEntryPoint::Stmt,\n+        \"block\" => parser::PrefixEntryPoint::Block,\n+        \"meta\" => parser::PrefixEntryPoint::MetaItem,\n+        \"item\" => parser::PrefixEntryPoint::Item,\n+        \"expr\" => {\n             return input\n-                .expect_fragment2(parser::PrefixEntryPoint::Block)\n-                .map(|tt| tt.map(Fragment::Tokens));\n+                .expect_fragment(parser::PrefixEntryPoint::Expr)\n+                .map(|tt| tt.map(Fragment::Expr))\n         }\n-        \"meta\" => ParserEntryPoint::MetaItem,\n-        \"item\" => ParserEntryPoint::Item,\n         _ => {\n             let tt_result = match kind {\n                 \"ident\" => input\n@@ -752,14 +731,13 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                         .map_err(|()| err!())\n                 }\n                 // `vis` is optional\n-                \"vis\" => Ok(input.expect_fragment2(parser::PrefixEntryPoint::Vis).value),\n+                \"vis\" => Ok(input.expect_fragment(parser::PrefixEntryPoint::Vis).value),\n                 _ => Err(ExpandError::UnexpectedToken),\n             };\n             return tt_result.map(|it| it.map(Fragment::Tokens)).into();\n         }\n     };\n-    let result = input.expect_fragment(fragment);\n-    result.map(|tt| if kind == \"expr\" { tt.map(Fragment::Expr) } else { tt.map(Fragment::Tokens) })\n+    input.expect_fragment(fragment).map(|it| it.map(Fragment::Tokens))\n }\n \n fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &MetaTemplate) {"}, {"sha": "896e33663eff52df2e9c2ef534ee449a54d3cf67", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=8e7fc7be65791c76c363d0a1191f45902564909c", "patch": "@@ -106,7 +106,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n     let mut res = Vec::new();\n \n     while iter.peek_n(0).is_some() {\n-        let expanded = iter.expect_fragment(ParserEntryPoint::Expr);\n+        let expanded = iter.expect_fragment(parser::PrefixEntryPoint::Expr);\n \n         res.push(match expanded.value {\n             None => break,"}, {"sha": "6c9f615c7a92dc38294c8d313d1d08fa810b7c01", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 1, "deletions": 58, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=8e7fc7be65791c76c363d0a1191f45902564909c", "patch": "@@ -1,7 +1,7 @@\n //! A \"Parser\" structure for token trees. We use this when parsing a declarative\n //! macro definition into a list of patterns and templates.\n \n-use crate::{to_parser_input::to_parser_input, ExpandError, ExpandResult, ParserEntryPoint};\n+use crate::{to_parser_input::to_parser_input, ExpandError, ExpandResult};\n \n use syntax::SyntaxKind;\n use tt::buffer::TokenBuffer;\n@@ -90,63 +90,6 @@ impl<'a> TtIter<'a> {\n     }\n \n     pub(crate) fn expect_fragment(\n-        &mut self,\n-        entry_point: ParserEntryPoint,\n-    ) -> ExpandResult<Option<tt::TokenTree>> {\n-        let buffer = TokenBuffer::from_tokens(self.inner.as_slice());\n-        let parser_input = to_parser_input(&buffer);\n-        let tree_traversal = parser::parse(&parser_input, entry_point);\n-\n-        let mut cursor = buffer.begin();\n-        let mut error = false;\n-        for step in tree_traversal.iter() {\n-            match step {\n-                parser::Step::Token { kind, mut n_input_tokens } => {\n-                    if kind == SyntaxKind::LIFETIME_IDENT {\n-                        n_input_tokens = 2;\n-                    }\n-                    for _ in 0..n_input_tokens {\n-                        cursor = cursor.bump_subtree();\n-                    }\n-                }\n-                parser::Step::Enter { .. } | parser::Step::Exit => (),\n-                parser::Step::Error { .. } => error = true,\n-            }\n-        }\n-\n-        let mut err = if !cursor.is_root() || error {\n-            Some(err!(\"expected {:?}\", entry_point))\n-        } else {\n-            None\n-        };\n-\n-        let mut curr = buffer.begin();\n-        let mut res = vec![];\n-\n-        if cursor.is_root() {\n-            while curr != cursor {\n-                if let Some(token) = curr.token_tree() {\n-                    res.push(token);\n-                }\n-                curr = curr.bump();\n-            }\n-        }\n-        self.inner = self.inner.as_slice()[res.len()..].iter();\n-        if res.is_empty() && err.is_none() {\n-            err = Some(err!(\"no tokens consumed\"));\n-        }\n-        let res = match res.len() {\n-            1 => Some(res[0].cloned()),\n-            0 => None,\n-            _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n-                delimiter: None,\n-                token_trees: res.into_iter().map(|it| it.cloned()).collect(),\n-            })),\n-        };\n-        ExpandResult { value: res, err }\n-    }\n-\n-    pub(crate) fn expect_fragment2(\n         &mut self,\n         entry_point: parser::PrefixEntryPoint,\n     ) -> ExpandResult<Option<tt::TokenTree>> {"}, {"sha": "0e663b9ac01cfe2c96a37c56d31e98d8e1068c07", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=8e7fc7be65791c76c363d0a1191f45902564909c", "patch": "@@ -75,6 +75,13 @@ pub(crate) mod entry {\n         pub(crate) fn path(p: &mut Parser) {\n             let _ = paths::type_path(p);\n         }\n+        pub(crate) fn item(p: &mut Parser) {\n+            items::item_or_macro(p, true);\n+        }\n+        // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n+        pub(crate) fn meta_item(p: &mut Parser) {\n+            attributes::meta(p);\n+        }\n     }\n }\n \n@@ -92,15 +99,6 @@ pub(crate) mod entry_points {\n         expressions::stmt(p, expressions::StmtWithSemi::Optional, false);\n     }\n \n-    // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n-    pub(crate) fn meta_item(p: &mut Parser) {\n-        attributes::meta(p);\n-    }\n-\n-    pub(crate) fn item(p: &mut Parser) {\n-        items::item_or_macro(p, true);\n-    }\n-\n     pub(crate) fn macro_items(p: &mut Parser) {\n         let m = p.start();\n         items::mod_contents(p, false);"}, {"sha": "9039985da2b334d881a6892334688da30ef752d2", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fc7be65791c76c363d0a1191f45902564909c/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=8e7fc7be65791c76c363d0a1191f45902564909c", "patch": "@@ -59,6 +59,8 @@ pub enum PrefixEntryPoint {\n     Ty,\n     Expr,\n     Path,\n+    Item,\n+    MetaItem,\n }\n \n impl PrefixEntryPoint {\n@@ -71,6 +73,8 @@ impl PrefixEntryPoint {\n             PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n             PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n             PrefixEntryPoint::Path => grammar::entry::prefix::path,\n+            PrefixEntryPoint::Item => grammar::entry::prefix::item,\n+            PrefixEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);\n@@ -118,8 +122,8 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n         ParserEntryPoint::Expr => grammar::entry::prefix::expr,\n         ParserEntryPoint::Type => grammar::entry::prefix::ty,\n         ParserEntryPoint::Pattern => grammar::entry::prefix::pat,\n-        ParserEntryPoint::Item => grammar::entry_points::item,\n-        ParserEntryPoint::MetaItem => grammar::entry_points::meta_item,\n+        ParserEntryPoint::Item => grammar::entry::prefix::item,\n+        ParserEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,\n         ParserEntryPoint::Items => grammar::entry_points::macro_items,\n         ParserEntryPoint::Statements => grammar::entry_points::macro_stmts,"}]}