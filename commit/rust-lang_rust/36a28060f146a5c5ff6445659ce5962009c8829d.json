{"sha": "36a28060f146a5c5ff6445659ce5962009c8829d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTI4MDYwZjE0NmE1YzVmZjY0NDU2NTljZTU5NjIwMDljODgyOWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-05T14:47:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-25T10:18:56Z"}, "message": "Merge the BTreeMap in hir::Crate.", "tree": {"sha": "ccdb28560a1d92afd48fea0f7cab640b0842e33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccdb28560a1d92afd48fea0f7cab640b0842e33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a28060f146a5c5ff6445659ce5962009c8829d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a28060f146a5c5ff6445659ce5962009c8829d", "html_url": "https://github.com/rust-lang/rust/commit/36a28060f146a5c5ff6445659ce5962009c8829d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a28060f146a5c5ff6445659ce5962009c8829d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0443424954f32d94f847322e85c77df50d44f80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0443424954f32d94f847322e85c77df50d44f80f", "html_url": "https://github.com/rust-lang/rust/commit/0443424954f32d94f847322e85c77df50d44f80f"}], "stats": {"total": 387, "additions": 268, "deletions": 119}, "files": [{"sha": "852f696ef1400b74ac739e9366524ad936215883", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -82,15 +82,11 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.with_hir_id_owner(item.id, |lctx| match ctxt {\n             AssocCtxt::Trait => {\n                 let hir_item = lctx.lower_trait_item(item);\n-                let id = hir_item.trait_item_id();\n-                lctx.trait_items.insert(id, hir_item);\n-                lctx.modules.entry(lctx.current_module).or_default().trait_items.insert(id);\n+                lctx.insert_trait_item(hir_item);\n             }\n             AssocCtxt::Impl => {\n                 let hir_item = lctx.lower_impl_item(item);\n-                let id = hir_item.impl_item_id();\n-                lctx.impl_items.insert(id, hir_item);\n-                lctx.modules.entry(lctx.current_module).or_default().impl_items.insert(id);\n+                lctx.insert_impl_item(hir_item);\n             }\n         });\n \n@@ -101,9 +97,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.allocate_hir_id_counter(item.id);\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_foreign_item(item);\n-            let id = hir_item.foreign_item_id();\n-            lctx.foreign_items.insert(id, hir_item);\n-            lctx.modules.entry(lctx.current_module).or_default().foreign_items.insert(id);\n+            lctx.insert_foreign_item(hir_item);\n         });\n \n         visit::walk_foreign_item(self, item);\n@@ -123,7 +117,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> T {\n         let old_len = self.in_scope_lifetimes.len();\n \n-        let parent_generics = match self.items.get(&parent_hir_id).unwrap().kind {\n+        let parent_generics = match self.owners[parent_hir_id.def_id].unwrap().expect_item().kind {\n             hir::ItemKind::Impl(hir::Impl { ref generics, .. })\n             | hir::ItemKind::Trait(_, _, ref generics, ..) => generics.params,\n             _ => &[],\n@@ -224,7 +218,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let hir_id = self.lower_node_id(i.id);\n                 self.lower_attrs(hir_id, &i.attrs);\n                 let body = P(self.lower_mac_args(body));\n-                self.exported_macros.push(hir::MacroDef {\n+                self.insert_macro_def(hir::MacroDef {\n                     ident,\n                     vis,\n                     def_id: hir_id.expect_owner(),"}, {"sha": "540abe6e48ef9e46ee3724a285019596da4af353", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -101,13 +101,8 @@ struct LoweringContext<'a, 'hir: 'a> {\n     arena: &'hir Arena<'hir>,\n \n     /// The items being lowered are collected here.\n-    items: BTreeMap<hir::ItemId, hir::Item<'hir>>,\n-\n-    trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n-    impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem<'hir>>,\n-    foreign_items: BTreeMap<hir::ForeignItemId, hir::ForeignItem<'hir>>,\n+    owners: IndexVec<LocalDefId, Option<hir::OwnerNode<'hir>>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n-    exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,\n \n     trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n@@ -330,15 +325,11 @@ pub fn lower_crate<'a, 'hir>(\n         resolver,\n         nt_to_tokenstream,\n         arena,\n-        items: BTreeMap::new(),\n-        trait_items: BTreeMap::new(),\n-        impl_items: BTreeMap::new(),\n-        foreign_items: BTreeMap::new(),\n+        owners: IndexVec::default(),\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n-        exported_macros: Vec::new(),\n         non_exported_macro_attrs: Vec::new(),\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n@@ -558,12 +549,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let krate = hir::Crate {\n             item: module,\n-            exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n-            items: self.items,\n-            trait_items: self.trait_items,\n-            impl_items: self.impl_items,\n-            foreign_items: self.foreign_items,\n+            owners: self.owners,\n             bodies: self.bodies,\n             body_ids,\n             trait_impls: self.trait_impls,\n@@ -576,12 +563,48 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn insert_item(&mut self, item: hir::Item<'hir>) -> hir::ItemId {\n-        let id = hir::ItemId { def_id: item.def_id };\n-        self.items.insert(id, item);\n+        let id = item.item_id();\n+        let item = self.arena.alloc(item);\n+        self.owners.ensure_contains_elem(id.def_id, || None);\n+        self.owners[id.def_id] = Some(hir::OwnerNode::Item(item));\n         self.modules.entry(self.current_module).or_default().items.insert(id);\n         id\n     }\n \n+    fn insert_foreign_item(&mut self, item: hir::ForeignItem<'hir>) -> hir::ForeignItemId {\n+        let id = item.foreign_item_id();\n+        let item = self.arena.alloc(item);\n+        self.owners.ensure_contains_elem(id.def_id, || None);\n+        self.owners[id.def_id] = Some(hir::OwnerNode::ForeignItem(item));\n+        self.modules.entry(self.current_module).or_default().foreign_items.insert(id);\n+        id\n+    }\n+\n+    fn insert_impl_item(&mut self, item: hir::ImplItem<'hir>) -> hir::ImplItemId {\n+        let id = item.impl_item_id();\n+        let item = self.arena.alloc(item);\n+        self.owners.ensure_contains_elem(id.def_id, || None);\n+        self.owners[id.def_id] = Some(hir::OwnerNode::ImplItem(item));\n+        self.modules.entry(self.current_module).or_default().impl_items.insert(id);\n+        id\n+    }\n+\n+    fn insert_trait_item(&mut self, item: hir::TraitItem<'hir>) -> hir::TraitItemId {\n+        let id = item.trait_item_id();\n+        let item = self.arena.alloc(item);\n+        self.owners.ensure_contains_elem(id.def_id, || None);\n+        self.owners[id.def_id] = Some(hir::OwnerNode::TraitItem(item));\n+        self.modules.entry(self.current_module).or_default().trait_items.insert(id);\n+        id\n+    }\n+\n+    fn insert_macro_def(&mut self, item: hir::MacroDef<'hir>) {\n+        let def_id = item.def_id;\n+        let item = self.arena.alloc(item);\n+        self.owners.ensure_contains_elem(def_id, || None);\n+        self.owners[def_id] = Some(hir::OwnerNode::MacroDef(item));\n+    }\n+\n     fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {\n         // Set up the counter if needed.\n         self.item_local_id_counters.entry(owner).or_insert(0);"}, {"sha": "4e8cf009495ebe633efeccccc2a3a40f5ee28756", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -29,7 +29,9 @@ macro_rules! arena_types {\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n             [few] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n+            [] impl_item: rustc_hir::ImplItem<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [] item: rustc_hir::Item<$tcx>,\n             [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n@@ -42,6 +44,7 @@ macro_rules! arena_types {\n             [] qpath: rustc_hir::QPath<$tcx>,\n             [] stmt: rustc_hir::Stmt<$tcx>,\n             [] field_def: rustc_hir::FieldDef<$tcx>,\n+            [] trait_item: rustc_hir::TraitItem<$tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n             [] ty: rustc_hir::Ty<$tcx>,\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,"}, {"sha": "f9b83f88ee4b919b668d11fe941330d68dc89f46", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 196, "deletions": 56, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -12,6 +12,7 @@ pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n+use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -628,21 +629,10 @@ pub struct ModuleItems {\n #[derive(Debug)]\n pub struct Crate<'hir> {\n     pub item: Mod<'hir>,\n-    pub exported_macros: &'hir [MacroDef<'hir>],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n \n-    // N.B., we use a `BTreeMap` here so that `visit_all_items` iterates\n-    // over the ids in increasing order. In principle it should not\n-    // matter what order we visit things in, but in *practice* it\n-    // does, because it can affect the order in which errors are\n-    // detected, which in turn can make UI tests yield\n-    // slightly different results.\n-    pub items: BTreeMap<ItemId, Item<'hir>>,\n-\n-    pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n-    pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n-    pub foreign_items: BTreeMap<ForeignItemId, ForeignItem<'hir>>,\n+    pub owners: IndexVec<LocalDefId, Option<OwnerNode<'hir>>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n     pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n@@ -668,20 +658,20 @@ pub struct Crate<'hir> {\n }\n \n impl Crate<'hir> {\n-    pub fn item(&self, id: ItemId) -> &Item<'hir> {\n-        &self.items[&id]\n+    pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n+        self.owners[id.def_id].as_ref().unwrap().expect_item()\n     }\n \n-    pub fn trait_item(&self, id: TraitItemId) -> &TraitItem<'hir> {\n-        &self.trait_items[&id]\n+    pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.owners[id.def_id].as_ref().unwrap().expect_trait_item()\n     }\n \n-    pub fn impl_item(&self, id: ImplItemId) -> &ImplItem<'hir> {\n-        &self.impl_items[&id]\n+    pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.owners[id.def_id].as_ref().unwrap().expect_impl_item()\n     }\n \n-    pub fn foreign_item(&self, id: ForeignItemId) -> &ForeignItem<'hir> {\n-        &self.foreign_items[&id]\n+    pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n+        self.owners[id.def_id].as_ref().unwrap().expect_foreign_item()\n     }\n \n     pub fn body(&self, id: BodyId) -> &Body<'hir> {\n@@ -702,20 +692,14 @@ impl Crate<'_> {\n     where\n         V: itemlikevisit::ItemLikeVisitor<'hir>,\n     {\n-        for item in self.items.values() {\n-            visitor.visit_item(item);\n-        }\n-\n-        for trait_item in self.trait_items.values() {\n-            visitor.visit_trait_item(trait_item);\n-        }\n-\n-        for impl_item in self.impl_items.values() {\n-            visitor.visit_impl_item(impl_item);\n-        }\n-\n-        for foreign_item in self.foreign_items.values() {\n-            visitor.visit_foreign_item(foreign_item);\n+        for owner in self.owners.iter().filter_map(Option::as_ref) {\n+            match owner {\n+                OwnerNode::Item(item) => visitor.visit_item(item),\n+                OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n+                OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n+                OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n+                OwnerNode::MacroDef(_) => {}\n+            }\n         }\n     }\n \n@@ -724,28 +708,27 @@ impl Crate<'_> {\n     where\n         V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,\n     {\n-        parallel!(\n-            {\n-                par_for_each_in(&self.items, |(_, item)| {\n-                    visitor.visit_item(item);\n-                });\n-            },\n-            {\n-                par_for_each_in(&self.trait_items, |(_, trait_item)| {\n-                    visitor.visit_trait_item(trait_item);\n-                });\n-            },\n-            {\n-                par_for_each_in(&self.impl_items, |(_, impl_item)| {\n-                    visitor.visit_impl_item(impl_item);\n-                });\n-            },\n-            {\n-                par_for_each_in(&self.foreign_items, |(_, foreign_item)| {\n-                    visitor.visit_foreign_item(foreign_item);\n-                });\n-            }\n-        );\n+        par_for_each_in(&self.owners.raw, |owner| match owner {\n+            Some(OwnerNode::Item(item)) => visitor.visit_item(item),\n+            Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n+            Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n+            Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n+            Some(OwnerNode::MacroDef(_)) | None => {}\n+        })\n+    }\n+\n+    pub fn items<'hir>(&'hir self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {\n+        self.owners.iter().filter_map(|owner| match owner {\n+            Some(OwnerNode::Item(item)) => Some(*item),\n+            _ => None,\n+        })\n+    }\n+\n+    pub fn exported_macros<'hir>(&'hir self) -> impl Iterator<Item = &'hir MacroDef<'hir>> + 'hir {\n+        self.owners.iter().filter_map(|owner| match owner {\n+            Some(OwnerNode::MacroDef(macro_def)) => Some(*macro_def),\n+            _ => None,\n+        })\n     }\n }\n \n@@ -2953,6 +2936,163 @@ pub struct TraitCandidate {\n     pub import_ids: SmallVec<[LocalDefId; 1]>,\n }\n \n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n+pub enum OwnerNode<'hir> {\n+    Item(&'hir Item<'hir>),\n+    ForeignItem(&'hir ForeignItem<'hir>),\n+    TraitItem(&'hir TraitItem<'hir>),\n+    ImplItem(&'hir ImplItem<'hir>),\n+    MacroDef(&'hir MacroDef<'hir>),\n+}\n+\n+impl<'hir> OwnerNode<'hir> {\n+    pub fn ident(&self) -> Ident {\n+        match self {\n+            OwnerNode::Item(Item { ident, .. })\n+            | OwnerNode::ForeignItem(ForeignItem { ident, .. })\n+            | OwnerNode::ImplItem(ImplItem { ident, .. })\n+            | OwnerNode::TraitItem(TraitItem { ident, .. })\n+            | OwnerNode::MacroDef(MacroDef { ident, .. }) => *ident,\n+        }\n+    }\n+\n+    pub fn fn_decl(&self) -> Option<&FnDecl<'hir>> {\n+        match self {\n+            OwnerNode::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n+            | OwnerNode::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n+            | OwnerNode::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n+            OwnerNode::ForeignItem(ForeignItem {\n+                kind: ForeignItemKind::Fn(fn_decl, _, _),\n+                ..\n+            }) => Some(fn_decl),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn body_id(&self) -> Option<BodyId> {\n+        match self {\n+            OwnerNode::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(_, TraitFn::Provided(body_id)),\n+                ..\n+            })\n+            | OwnerNode::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })\n+            | OwnerNode::Item(Item { kind: ItemKind::Fn(.., body_id), .. }) => Some(*body_id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n+        match self {\n+            OwnerNode::TraitItem(TraitItem { generics, .. })\n+            | OwnerNode::ImplItem(ImplItem { generics, .. }) => Some(generics),\n+            OwnerNode::Item(item) => item.kind.generics(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn def_id(self) -> LocalDefId {\n+        match self {\n+            OwnerNode::Item(Item { def_id, .. })\n+            | OwnerNode::TraitItem(TraitItem { def_id, .. })\n+            | OwnerNode::ImplItem(ImplItem { def_id, .. })\n+            | OwnerNode::ForeignItem(ForeignItem { def_id, .. })\n+            | OwnerNode::MacroDef(MacroDef { def_id, .. }) => *def_id,\n+        }\n+    }\n+\n+    pub fn expect_item(self) -> &'hir Item<'hir> {\n+        match self {\n+            OwnerNode::Item(n) => n,\n+            OwnerNode::ForeignItem(_)\n+            | OwnerNode::ImplItem(_)\n+            | OwnerNode::TraitItem(_)\n+            | OwnerNode::MacroDef(_) => panic!(),\n+        }\n+    }\n+\n+    pub fn expect_foreign_item(self) -> &'hir ForeignItem<'hir> {\n+        match self {\n+            OwnerNode::ForeignItem(n) => n,\n+            OwnerNode::Item(_)\n+            | OwnerNode::ImplItem(_)\n+            | OwnerNode::TraitItem(_)\n+            | OwnerNode::MacroDef(_) => panic!(),\n+        }\n+    }\n+\n+    pub fn expect_impl_item(self) -> &'hir ImplItem<'hir> {\n+        match self {\n+            OwnerNode::ImplItem(n) => n,\n+            OwnerNode::ForeignItem(_)\n+            | OwnerNode::Item(_)\n+            | OwnerNode::TraitItem(_)\n+            | OwnerNode::MacroDef(_) => panic!(),\n+        }\n+    }\n+\n+    pub fn expect_trait_item(self) -> &'hir TraitItem<'hir> {\n+        match self {\n+            OwnerNode::TraitItem(n) => n,\n+            OwnerNode::ForeignItem(_)\n+            | OwnerNode::ImplItem(_)\n+            | OwnerNode::Item(_)\n+            | OwnerNode::MacroDef(_) => panic!(),\n+        }\n+    }\n+\n+    pub fn expect_macro_def(self) -> &'hir MacroDef<'hir> {\n+        match self {\n+            OwnerNode::MacroDef(n) => n,\n+            OwnerNode::ForeignItem(_)\n+            | OwnerNode::ImplItem(_)\n+            | OwnerNode::TraitItem(_)\n+            | OwnerNode::Item(_) => panic!(),\n+        }\n+    }\n+}\n+\n+impl<'hir> Into<OwnerNode<'hir>> for &'hir Item<'hir> {\n+    fn into(self) -> OwnerNode<'hir> {\n+        OwnerNode::Item(self)\n+    }\n+}\n+\n+impl<'hir> Into<OwnerNode<'hir>> for &'hir ForeignItem<'hir> {\n+    fn into(self) -> OwnerNode<'hir> {\n+        OwnerNode::ForeignItem(self)\n+    }\n+}\n+\n+impl<'hir> Into<OwnerNode<'hir>> for &'hir ImplItem<'hir> {\n+    fn into(self) -> OwnerNode<'hir> {\n+        OwnerNode::ImplItem(self)\n+    }\n+}\n+\n+impl<'hir> Into<OwnerNode<'hir>> for &'hir TraitItem<'hir> {\n+    fn into(self) -> OwnerNode<'hir> {\n+        OwnerNode::TraitItem(self)\n+    }\n+}\n+\n+impl<'hir> Into<OwnerNode<'hir>> for &'hir MacroDef<'hir> {\n+    fn into(self) -> OwnerNode<'hir> {\n+        OwnerNode::MacroDef(self)\n+    }\n+}\n+\n+impl<'hir> Into<Node<'hir>> for OwnerNode<'hir> {\n+    fn into(self) -> Node<'hir> {\n+        match self {\n+            OwnerNode::Item(n) => Node::Item(n),\n+            OwnerNode::ForeignItem(n) => Node::ForeignItem(n),\n+            OwnerNode::ImplItem(n) => Node::ImplItem(n),\n+            OwnerNode::TraitItem(n) => Node::TraitItem(n),\n+            OwnerNode::MacroDef(n) => Node::MacroDef(n),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),"}, {"sha": "83a4b2370d07688187bbb44031007c0a4009bb05", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -479,7 +479,7 @@ pub trait Visitor<'v>: Sized {\n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     visitor.visit_mod(&krate.item, krate.item.inner, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_macro_def, krate.exported_macros);\n+    walk_list!(visitor, visit_macro_def, krate.exported_macros());\n     for (&id, attrs) in krate.attrs.iter() {\n         for a in *attrs {\n             visitor.visit_attribute(id, a)"}, {"sha": "7d87e708eae52f9661ca6c23bb95abdef25cd432", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -570,7 +570,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n         self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.item.inner, \"the\", \"crate\");\n \n-        for macro_def in krate.exported_macros {\n+        for macro_def in krate.exported_macros() {\n             // Non exported macros should be skipped, since `missing_docs` only\n             // applies to externally visible items.\n             if !cx.access_levels.is_exported(macro_def.hir_id()) {"}, {"sha": "4f223afcc27a0055613882dde239db97172d66f6", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -33,11 +33,11 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n-    builder.levels.id_to_set.reserve(krate.exported_macros.len() + 1);\n+    builder.levels.id_to_set.reserve(krate.owners.len() + 1);\n \n     let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    for macro_def in krate.exported_macros {\n+    for macro_def in krate.exported_macros() {\n         builder.levels.register_id(macro_def.hir_id());\n     }\n     intravisit::walk_crate(&mut builder, krate);"}, {"sha": "e40c885fce90c69a6b678648e591ef18464f4233", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n \n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n-        for macro_def in krate.exported_macros {\n+        for macro_def in krate.exported_macros() {\n             self.visit_macro_def(macro_def);\n         }\n     }"}, {"sha": "be8863be62733019a1372072e5c445f6e6f06e37", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -81,14 +81,10 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             let Crate {\n                 ref item,\n                 // These fields are handled separately:\n-                exported_macros: _,\n                 non_exported_macro_attrs: _,\n-                items: _,\n-                trait_items: _,\n-                impl_items: _,\n-                foreign_items: _,\n-                bodies: _,\n+                owners: _,\n                 trait_impls: _,\n+                bodies: _,\n                 body_ids: _,\n                 modules: _,\n                 proc_macros: _,"}, {"sha": "edcbce6b09881cb80031e7fc21e1870a201f7443", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -554,8 +554,8 @@ impl<'hir> Map<'hir> {\n     where\n         V: Visitor<'hir>,\n     {\n-        for id in self.krate().exported_macros {\n-            visitor.visit_macro_def(self.expect_macro_def(id.hir_id()));\n+        for macro_def in self.krate().exported_macros() {\n+            visitor.visit_macro_def(macro_def);\n         }\n     }\n "}, {"sha": "dc94124e62ab6a031d22990bfeeb87dc9a8aac40", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -2307,7 +2307,7 @@ define_print_and_forward_display! {\n fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, Namespace, DefId)) {\n     // Iterate all local crate items no matter where they are defined.\n     let hir = tcx.hir();\n-    for item in hir.krate().items.values() {\n+    for item in hir.krate().items() {\n         if item.ident.name.as_str().is_empty() || matches!(item.kind, ItemKind::Use(_, _)) {\n             continue;\n         }"}, {"sha": "3cf1d0cdd94b7a59e9b79771ecce68031ea523e6", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -108,7 +108,7 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol\n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    for m in tcx.hir().krate().exported_macros {\n+    for m in tcx.hir().krate().exported_macros() {\n         collector.observe_item(m.def_id);\n     }\n "}, {"sha": "b5033897ae65fff1c648e634491bdd35a3fbfc97", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -1015,24 +1015,17 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                                 // Ensure that the parent of the def is an item, not HRTB\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-                                let parent_is_item = if let Some(parent_def_id) =\n-                                    parent_id.as_owner()\n-                                {\n-                                    let parent_item_id = hir::ItemId { def_id: parent_def_id };\n-                                    let parent_impl_id = hir::ImplItemId { def_id: parent_def_id };\n-                                    let parent_trait_id =\n-                                        hir::TraitItemId { def_id: parent_def_id };\n-                                    let parent_foreign_id =\n-                                        hir::ForeignItemId { def_id: parent_def_id };\n-                                    let krate = self.tcx.hir().krate();\n-\n-                                    krate.items.contains_key(&parent_item_id)\n-                                        || krate.impl_items.contains_key(&parent_impl_id)\n-                                        || krate.trait_items.contains_key(&parent_trait_id)\n-                                        || krate.foreign_items.contains_key(&parent_foreign_id)\n-                                } else {\n-                                    false\n-                                };\n+                                // FIXME(cjgillot) Can this check be replaced by\n+                                // `let parent_is_item = parent_id.is_owner();`?\n+                                let parent_is_item =\n+                                    if let Some(parent_def_id) = parent_id.as_owner() {\n+                                        matches!(\n+                                            self.tcx.hir().krate().owners.get(parent_def_id),\n+                                            Some(Some(_)),\n+                                        )\n+                                    } else {\n+                                        false\n+                                    };\n \n                                 if !parent_is_item {\n                                     if !self.trait_definition_only {"}, {"sha": "3621a6cb7d81a7d9f0bdf7f47589160408fb235e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a28060f146a5c5ff6445659ce5962009c8829d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a28060f146a5c5ff6445659ce5962009c8829d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=36a28060f146a5c5ff6445659ce5962009c8829d", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as\n         // well (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by\n         // moving them back to their correct locations.\n-        'exported_macros: for def in krate.exported_macros {\n+        'exported_macros: for def in krate.exported_macros() {\n             // The `def` of a macro in `exported_macros` should correspond to either:\n             //  - a `#[macro_export] macro_rules!` macro,\n             //  - a built-in `derive` (or attribute) macro such as the ones in `::core`,"}]}