{"sha": "535db2f357eaae4b42be783859df6233ab4beff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWRiMmYzNTdlYWFlNGI0MmJlNzgzODU5ZGY2MjMzYWI0YmVmZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-07T17:30:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-07T17:30:06Z"}, "message": "Rollup merge of #60535 - taiki-e:async-fn-arguments, r=cramertj\n\nCorrect handling of arguments in async fn\n\nFixes #60509\nFixes #60566\n\nr? @cramertj or @davidtwco", "tree": {"sha": "5d19a8576bcab732d0d7ef38c9cf942be799a342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d19a8576bcab732d0d7ef38c9cf942be799a342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535db2f357eaae4b42be783859df6233ab4beff1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc0cCeCRBK7hj4Ov3rIwAAdHIIAHOlxZa88uWMOFIkcy5hRIzY\nQcLp6QMKSv9y3udklBokIqXWzgrdKyJ1eKXuMEjz7cuoaVwOE7CuFq8A4tqROxjs\n73kbur+Cev1SxptjfrP+1RZMcfplTjQ0NqQCUuHha+uiEsqxGcw7GkMZo1cDOVAY\n/1fVSo9/bKvqc7zUK4AdJan7a05uWYB/L9BmcgkUEFJnpxYpIKNMLCeAEmYFzhGC\nacRNgd4H9QxmsGWR3h6bu9cQhb1prSSTA8DSTSKM6cm0w9Gw3bQTQtg1feWve/HV\n9WnjCvZ56EUWcKRzJ5EqO2zX9SFN/g6gFzVvC7CIykb0cGaN12e8/q69ae1R/s4=\n=KRNN\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d19a8576bcab732d0d7ef38c9cf942be799a342\nparent 4e233583d0616dc208bbc9acfc78c367ae0d38f6\nparent 57ec63c76c97028b6627289caec3c6a83cea92a7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557250206 +0200\ncommitter GitHub <noreply@github.com> 1557250206 +0200\n\nRollup merge of #60535 - taiki-e:async-fn-arguments, r=cramertj\n\nCorrect handling of arguments in async fn\n\nFixes #60509\nFixes #60566\n\nr? @cramertj or @davidtwco\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535db2f357eaae4b42be783859df6233ab4beff1", "html_url": "https://github.com/rust-lang/rust/commit/535db2f357eaae4b42be783859df6233ab4beff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535db2f357eaae4b42be783859df6233ab4beff1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e233583d0616dc208bbc9acfc78c367ae0d38f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e233583d0616dc208bbc9acfc78c367ae0d38f6", "html_url": "https://github.com/rust-lang/rust/commit/4e233583d0616dc208bbc9acfc78c367ae0d38f6"}, {"sha": "57ec63c76c97028b6627289caec3c6a83cea92a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ec63c76c97028b6627289caec3c6a83cea92a7", "html_url": "https://github.com/rust-lang/rust/commit/57ec63c76c97028b6627289caec3c6a83cea92a7"}], "stats": {"total": 363, "additions": 341, "deletions": 22}, "files": [{"sha": "60f685859eee3b61ff752d994891bc0b5887a5fa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/535db2f357eaae4b42be783859df6233ab4beff1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535db2f357eaae4b42be783859df6233ab4beff1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=535db2f357eaae4b42be783859df6233ab4beff1", "patch": "@@ -1576,7 +1576,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let d = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n+            let mut decl = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n                 // This is somewhat dubious; We don't want to allow\n                 // argument names to be left off if there is a\n                 // definition...\n@@ -1585,7 +1585,7 @@ impl<'a> Parser<'a> {\n                 p.parse_arg_general(p.span.rust_2018(), true, false)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &d);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n \n             let sig = ast::MethodSig {\n                 header: FnHeader {\n@@ -1594,7 +1594,7 @@ impl<'a> Parser<'a> {\n                     abi,\n                     asyncness,\n                 },\n-                decl: d,\n+                decl,\n             };\n \n             let body = match self.token {\n@@ -6475,10 +6475,10 @@ impl<'a> Parser<'a> {\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n         let allow_c_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n-        let decl = self.parse_fn_decl(allow_c_variadic)?;\n+        let mut decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        self.construct_async_arguments(&mut asyncness, &decl);\n+        self.construct_async_arguments(&mut asyncness, &mut decl);\n         let header = FnHeader { unsafety, asyncness, constness, abi };\n         Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n     }\n@@ -6662,9 +6662,9 @@ impl<'a> Parser<'a> {\n             let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n-            let decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n+            let mut decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &decl);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n             let header = ast::FnHeader { abi, unsafety, constness, asyncness };\n@@ -8710,9 +8710,9 @@ impl<'a> Parser<'a> {\n     ///\n     /// The arguments of the function are replaced in HIR lowering with the arguments created by\n     /// this function and the statements created here are inserted at the top of the closure body.\n-    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &FnDecl) {\n+    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &mut FnDecl) {\n         if let IsAsync::Async { ref mut arguments, .. } = asyncness.node {\n-            for (index, input) in decl.inputs.iter().enumerate() {\n+            for (index, input) in decl.inputs.iter_mut().enumerate() {\n                 let id = ast::DUMMY_NODE_ID;\n                 let span = input.pat.span;\n \n@@ -8724,8 +8724,10 @@ impl<'a> Parser<'a> {\n                 // `let <pat> = __argN;` statement, instead just adding a `let <pat> = <pat>;`\n                 // statement.\n                 let (binding_mode, ident, is_simple_pattern) = match input.pat.node {\n-                    PatKind::Ident(binding_mode, ident, _) => (binding_mode, ident, true),\n-                    _ => (BindingMode::ByValue(Mutability::Immutable), ident, false),\n+                    PatKind::Ident(binding_mode @ BindingMode::ByValue(_), ident, _) => {\n+                        (binding_mode, ident, true)\n+                    }\n+                    _ => (BindingMode::ByValue(Mutability::Mutable), ident, false),\n                 };\n \n                 // Construct an argument representing `__argN: <ty>` to replace the argument of the\n@@ -8792,6 +8794,15 @@ impl<'a> Parser<'a> {\n                     })\n                 };\n \n+                // Remove mutability from arguments. If this is not a simple pattern,\n+                // those arguments are replaced by `__argN`, so there is no need to do this.\n+                if let PatKind::Ident(BindingMode::ByValue(mutability @ Mutability::Mutable), ..) =\n+                    &mut input.pat.node\n+                {\n+                    assert!(is_simple_pattern);\n+                    *mutability = Mutability::Immutable;\n+                }\n+\n                 let move_stmt = Stmt { id, node: StmtKind::Local(P(move_local)), span };\n                 arguments.push(AsyncArgument { ident, arg, pat_stmt, move_stmt });\n             }"}, {"sha": "3750c2bcb701a0172906cd7a7ca4a4832478fe47", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=535db2f357eaae4b42be783859df6233ab4beff1", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![deny(unused_mut)]\n+#![feature(async_await)]\n+\n+type A = Vec<u32>;\n+\n+async fn a(n: u32, mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn b(n: u32, ref mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn c(ref vec: A) {\n+    vec.contains(&0);\n+}\n+\n+async fn d((a, mut b): (A, A)) {\n+    b.push(1);\n+}\n+\n+async fn f((ref mut a, ref b): (A, A)) {}\n+\n+async fn g(((ref a, ref mut b), (ref mut c, ref d)): ((A, A), (A, A))) {}\n+\n+fn main() {}"}, {"sha": "c2b59eecb999304092f9ca8ccbea128017293d6d", "filename": "src/test/ui/async-await/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=535db2f357eaae4b42be783859df6233ab4beff1", "patch": "@@ -0,0 +1,271 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await, await_macro)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn completes execution.\n+// See also #54716.\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::sync::Arc;\n+use std::rc::Rc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo_async(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foo_sync(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar_async(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn bar_sync(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz_async((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn baz_sync((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar_async(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foobar_sync(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo_async(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar_async(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz_async((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar_async(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo_async(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar_async(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz_async(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar_async(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_poll<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| Foo::foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| Foo::foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| Foo::bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| Foo::baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            Foo::foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            Foo::foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_poll(|l| b.foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| b.foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| b.bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| b.baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            b.foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            b.foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+}"}, {"sha": "bcdb8878eb5d225333dfc6f15c6da9d61f4be331", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs?ref=535db2f357eaae4b42be783859df6233ab4beff1", "patch": "@@ -8,4 +8,9 @@ async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n     assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]\n }\n \n+async fn baz_async(ref mut x: u32, ref y: u32) {\n+    assert_eq!(__arg0, 1); //~ ERROR cannot find value `__arg0` in this scope [E0425]\n+    assert_eq!(__arg1, 2); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n+}\n+\n fn main() {}"}, {"sha": "484e1f4f4269ede5589f301a640046ca957eed2d", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535db2f357eaae4b42be783859df6233ab4beff1/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr?ref=535db2f357eaae4b42be783859df6233ab4beff1", "patch": "@@ -10,6 +10,18 @@ error[E0425]: cannot find value `__arg2` in this scope\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error[E0425]: cannot find value `__arg0` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+   |\n+LL |     assert_eq!(__arg0, 1);\n+   |                ^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `__arg1` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+   |\n+LL |     assert_eq!(__arg1, 2);\n+   |                ^^^^^^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "4d6dba74097ca77f240a4d6ff436b5466882924e", "filename": "src/test/ui/async-await/mutable-arguments.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e233583d0616dc208bbc9acfc78c367ae0d38f6/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e233583d0616dc208bbc9acfc78c367ae0d38f6/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs?ref=4e233583d0616dc208bbc9acfc78c367ae0d38f6", "patch": "@@ -1,10 +0,0 @@\n-// edition:2018\n-// run-pass\n-\n-#![feature(async_await)]\n-\n-async fn foo(n: u32, mut vec: Vec<u32>) {\n-    vec.push(n);\n-}\n-\n-fn main() {}"}]}