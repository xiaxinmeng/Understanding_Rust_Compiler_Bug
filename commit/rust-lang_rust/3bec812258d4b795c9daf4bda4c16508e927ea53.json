{"sha": "3bec812258d4b795c9daf4bda4c16508e927ea53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWM4MTIyNThkNGI3OTVjOWRhZjRiZGE0YzE2NTA4ZTkyN2VhNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:11:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:11:09Z"}, "message": "remove ast::*Kind enums from assists", "tree": {"sha": "794d6dec1910191be7edf1a4fb2a87466d7e1984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794d6dec1910191be7edf1a4fb2a87466d7e1984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bec812258d4b795c9daf4bda4c16508e927ea53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bec812258d4b795c9daf4bda4c16508e927ea53", "html_url": "https://github.com/rust-lang/rust/commit/3bec812258d4b795c9daf4bda4c16508e927ea53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bec812258d4b795c9daf4bda4c16508e927ea53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50a04827c13af00314eb9869d3cc125b2419971", "url": "https://api.github.com/repos/rust-lang/rust/commits/b50a04827c13af00314eb9869d3cc125b2419971", "html_url": "https://github.com/rust-lang/rust/commit/b50a04827c13af00314eb9869d3cc125b2419971"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "78f0f7f28a54c5efde3913c47bfe06075e718c69", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=3bec812258d4b795c9daf4bda4c16508e927ea53", "patch": "@@ -1,6 +1,6 @@\n use hir::{db::HirDatabase, HirDisplay, Ty};\n use ra_syntax::{\n-    ast::{AstNode, LetStmt, NameOwner, PatKind},\n+    ast::{self, AstNode, LetStmt, NameOwner},\n     T,\n };\n \n@@ -12,8 +12,8 @@ pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;\n     // Must be a binding\n-    let pat = match pat.kind() {\n-        PatKind::BindPat(bind_pat) => bind_pat,\n+    let pat = match pat {\n+        ast::Pat::BindPat(bind_pat) => bind_pat,\n         _ => return None,\n     };\n     let pat_range = pat.syntax().text_range();"}, {"sha": "31c7d4e804ee40192f72a79237ddd6636c251575", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=3bec812258d4b795c9daf4bda4c16508e927ea53", "patch": "@@ -5,7 +5,7 @@ use crate::{\n \n use hir::{db::HirDatabase, HasSource};\n use ra_db::FilePosition;\n-use ra_syntax::ast::{self, AstNode, ImplItemKind, NameOwner};\n+use ra_syntax::ast::{self, AstNode, NameOwner};\n use ra_syntax::SmolStr;\n \n #[derive(PartialEq)]\n@@ -49,11 +49,11 @@ fn add_missing_impl_members_inner(\n         resolve_target_trait_def(ctx.db, &analyzer, &impl_node)?\n     };\n \n-    let def_name = |kind| -> Option<SmolStr> {\n-        match kind {\n-            ast::ImplItemKind::FnDef(def) => def.name(),\n-            ast::ImplItemKind::TypeAliasDef(def) => def.name(),\n-            ast::ImplItemKind::ConstDef(def) => def.name(),\n+    let def_name = |item: &ast::ImplItem| -> Option<SmolStr> {\n+        match item {\n+            ast::ImplItem::FnDef(def) => def.name(),\n+            ast::ImplItem::TypeAliasDef(def) => def.name(),\n+            ast::ImplItem::ConstDef(def) => def.name(),\n         }\n         .map(|it| it.text().clone())\n     };\n@@ -62,24 +62,24 @@ fn add_missing_impl_members_inner(\n     let impl_items = impl_item_list.impl_items().collect::<Vec<_>>();\n \n     let missing_items: Vec<_> = trait_items\n-        .filter(|t| def_name(t.kind()).is_some())\n-        .filter(|t| match t.kind() {\n-            ImplItemKind::FnDef(def) => match mode {\n+        .filter(|t| def_name(t).is_some())\n+        .filter(|t| match t {\n+            ast::ImplItem::FnDef(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n             },\n             _ => mode == AddMissingImplMembersMode::NoDefaultMethods,\n         })\n-        .filter(|t| impl_items.iter().all(|i| def_name(i.kind()) != def_name(t.kind())))\n+        .filter(|t| impl_items.iter().all(|i| def_name(i) != def_name(t)))\n         .collect();\n     if missing_items.is_empty() {\n         return None;\n     }\n \n     ctx.add_action(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n-        let items = missing_items.into_iter().map(|it| match it.kind() {\n-            ImplItemKind::FnDef(def) => strip_docstring(add_body(def).into()),\n+        let items = missing_items.into_iter().map(|it| match it {\n+            ast::ImplItem::FnDef(def) => strip_docstring(add_body(def).into()),\n             _ => strip_docstring(it),\n         });\n         let mut ast_editor = AstEditor::new(impl_item_list);"}, {"sha": "85ff5c052a990e785c3344cb318eb9a36e54a74c", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=3bec812258d4b795c9daf4bda4c16508e927ea53", "patch": "@@ -7,12 +7,12 @@ use ra_syntax::ast::{self, AstNode};\n use crate::{Assist, AssistCtx, AssistId};\n \n fn is_trivial_arm(arm: &ast::MatchArm) -> bool {\n-    fn single_pattern(arm: &ast::MatchArm) -> Option<ast::PatKind> {\n+    fn single_pattern(arm: &ast::MatchArm) -> Option<ast::Pat> {\n         let (pat,) = arm.pats().collect_tuple()?;\n-        Some(pat.kind())\n+        Some(pat)\n     }\n     match single_pattern(arm) {\n-        Some(ast::PatKind::PlaceholderPat(..)) => true,\n+        Some(ast::Pat::PlaceholderPat(..)) => true,\n         _ => false,\n     }\n }"}, {"sha": "eedb2919943b9b66a6483804abe7ad0b6f375588", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=3bec812258d4b795c9daf4bda4c16508e927ea53", "patch": "@@ -1,6 +1,6 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n-    ast::{self, AstNode, AstToken, ExprKind, PatKind},\n+    ast::{self, AstNode, AstToken},\n     TextRange,\n };\n \n@@ -9,8 +9,8 @@ use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.node_at_offset::<ast::LetStmt>()?;\n-    let bind_pat = match let_stmt.pat()?.kind() {\n-        PatKind::BindPat(pat) => pat,\n+    let bind_pat = match let_stmt.pat()? {\n+        ast::Pat::BindPat(pat) => pat,\n         _ => return None,\n     };\n     if bind_pat.is_mutable() {\n@@ -48,28 +48,28 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n             }\n         };\n \n-        wrap_in_parens[i] = match (initializer_expr.kind(), usage_parent.kind()) {\n-            (ExprKind::CallExpr(_), _)\n-            | (ExprKind::IndexExpr(_), _)\n-            | (ExprKind::MethodCallExpr(_), _)\n-            | (ExprKind::FieldExpr(_), _)\n-            | (ExprKind::TryExpr(_), _)\n-            | (ExprKind::RefExpr(_), _)\n-            | (ExprKind::Literal(_), _)\n-            | (ExprKind::TupleExpr(_), _)\n-            | (ExprKind::ArrayExpr(_), _)\n-            | (ExprKind::ParenExpr(_), _)\n-            | (ExprKind::PathExpr(_), _)\n-            | (ExprKind::BlockExpr(_), _)\n-            | (_, ExprKind::CallExpr(_))\n-            | (_, ExprKind::TupleExpr(_))\n-            | (_, ExprKind::ArrayExpr(_))\n-            | (_, ExprKind::ParenExpr(_))\n-            | (_, ExprKind::ForExpr(_))\n-            | (_, ExprKind::WhileExpr(_))\n-            | (_, ExprKind::BreakExpr(_))\n-            | (_, ExprKind::ReturnExpr(_))\n-            | (_, ExprKind::MatchExpr(_)) => false,\n+        wrap_in_parens[i] = match (&initializer_expr, usage_parent) {\n+            (ast::Expr::CallExpr(_), _)\n+            | (ast::Expr::IndexExpr(_), _)\n+            | (ast::Expr::MethodCallExpr(_), _)\n+            | (ast::Expr::FieldExpr(_), _)\n+            | (ast::Expr::TryExpr(_), _)\n+            | (ast::Expr::RefExpr(_), _)\n+            | (ast::Expr::Literal(_), _)\n+            | (ast::Expr::TupleExpr(_), _)\n+            | (ast::Expr::ArrayExpr(_), _)\n+            | (ast::Expr::ParenExpr(_), _)\n+            | (ast::Expr::PathExpr(_), _)\n+            | (ast::Expr::BlockExpr(_), _)\n+            | (_, ast::Expr::CallExpr(_))\n+            | (_, ast::Expr::TupleExpr(_))\n+            | (_, ast::Expr::ArrayExpr(_))\n+            | (_, ast::Expr::ParenExpr(_))\n+            | (_, ast::Expr::ForExpr(_))\n+            | (_, ast::Expr::WhileExpr(_))\n+            | (_, ast::Expr::BreakExpr(_))\n+            | (_, ast::Expr::ReturnExpr(_))\n+            | (_, ast::Expr::MatchExpr(_)) => false,\n             _ => true,\n         };\n     }"}, {"sha": "225a48d3adc60ea953a0bbfe9f0e6213780f9ccf", "filename": "crates/ra_assists/src/merge_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec812258d4b795c9daf4bda4c16508e927ea53/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs?ref=3bec812258d4b795c9daf4bda4c16508e927ea53", "patch": "@@ -30,8 +30,8 @@ pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n \n     ctx.add_action(AssistId(\"merge_match_arms\"), \"merge match arms\", |edit| {\n         fn contains_placeholder(a: &MatchArm) -> bool {\n-            a.pats().any(|x| match x.kind() {\n-                ra_syntax::ast::PatKind::PlaceholderPat(..) => true,\n+            a.pats().any(|x| match x {\n+                ra_syntax::ast::Pat::PlaceholderPat(..) => true,\n                 _ => false,\n             })\n         }"}]}