{"sha": "6f527ea810b304bf7da2b97d27fe979cdc7c8612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTI3ZWE4MTBiMzA0YmY3ZGEyYjk3ZDI3ZmU5NzljZGM3Yzg2MTI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-15T12:13:34Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-15T12:13:34Z"}, "message": "Merge pull request #55 from Manishearth/ineffective_bit_mask\n\nAdded 'ineffective bit mask' lint", "tree": {"sha": "94171a3cbdee01e92aa9a280df4b22ee4f137ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94171a3cbdee01e92aa9a280df4b22ee4f137ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f527ea810b304bf7da2b97d27fe979cdc7c8612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f527ea810b304bf7da2b97d27fe979cdc7c8612", "html_url": "https://github.com/rust-lang/rust/commit/6f527ea810b304bf7da2b97d27fe979cdc7c8612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f527ea810b304bf7da2b97d27fe979cdc7c8612/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905509083c73a0d5f98f6dbfe4b82679dae1c8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/905509083c73a0d5f98f6dbfe4b82679dae1c8d2", "html_url": "https://github.com/rust-lang/rust/commit/905509083c73a0d5f98f6dbfe4b82679dae1c8d2"}, {"sha": "6bec4f35dff0d0fe58d4bfdeeb63ed4695d62c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bec4f35dff0d0fe58d4bfdeeb63ed4695d62c5a", "html_url": "https://github.com/rust-lang/rust/commit/6bec4f35dff0d0fe58d4bfdeeb63ed4695d62c5a"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "3ea3659dd1de83f48ae326d9bad2a186f8acee5a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f527ea810b304bf7da2b97d27fe979cdc7c8612/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f527ea810b304bf7da2b97d27fe979cdc7c8612/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6f527ea810b304bf7da2b97d27fe979cdc7c8612", "patch": "@@ -13,6 +13,7 @@ Lints included in this crate:\n  - `toplevel_ref_arg`: Warns when a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n  - `eq_op`: Warns on equal operands on both sides of a comparison or bitwise combination\n  - `bad_bit_mask`: Denies expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+ - `ineffective_bit_mask`: Warns on expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n  - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n  - `ptr_arg`: Warns on fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n  - `approx_constant`: Warns if the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found and suggests to use the constant"}, {"sha": "42e3003d336d2ab84a66cf48e46a33776f143f2e", "filename": "src/bit_mask.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f527ea810b304bf7da2b97d27fe979cdc7c8612/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f527ea810b304bf7da2b97d27fe979cdc7c8612/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=6f527ea810b304bf7da2b97d27fe979cdc7c8612", "patch": "@@ -32,12 +32,18 @@ declare_lint! {\n     \"Deny the use of incompatible bit masks in comparisons, e.g. '(a & 1) == 2'\"\n }\n \n+declare_lint! {\n+\tpub INEFFECTIVE_BIT_MASK,\n+\tWarn,\n+\t\"Warn on the use of an ineffective bit mask in comparisons, e.g. '(a & 1) > 2'\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct BitMask;\n \n impl LintPass for BitMask {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BAD_BIT_MASK)\n+        lint_array!(BAD_BIT_MASK, INEFFECTIVE_BIT_MASK)\n     }\n     \n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n@@ -102,31 +108,47 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64,\n \t\t},\n \t\tBiLt | BiGe => match bit_op {\n \t\t\tBiBitAnd => if mask_value < cmp_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ & {} will always be lower than {}\", mask_value,\n-\t\t\t\t\tcmp_value));\n+\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\"incompatible bit mask: _ & {} will always be lower than {}\", \n+\t\t\t\t\tmask_value, cmp_value));\n \t\t\t} else { \n \t\t\t\tif mask_value == 0 {\n \t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"&-masking with zero\"));\n \t\t\t\t}\n \t\t\t},\n \t\t\tBiBitOr => if mask_value >= cmp_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ | {} will never be lower than {}\", mask_value,\n-\t\t\t\t\tcmp_value));\n+\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\"incompatible bit mask: _ | {} will never be lower than {}\", \n+\t\t\t\t\tmask_value, cmp_value));\n+\t\t\t} else {\n+\t\t\t\tif mask_value < cmp_value {\n+\t\t\t\t\tcx.span_lint(INEFFECTIVE_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\t\"ineffective bit mask: x | {} compared to {} is the same as x compared directly\", \n+\t\t\t\t\t\tmask_value, cmp_value)); \n+\t\t\t\t}\n \t\t\t},\n \t\t\t_ => ()\n \t\t},\n \t\tBiLe | BiGt => match bit_op {\n \t\t\tBiBitAnd => if mask_value <= cmp_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ & {} will never be higher than {}\", mask_value,\n-\t\t\t\t\tcmp_value));\n+\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\"incompatible bit mask: _ & {} will never be higher than {}\", \n+\t\t\t\t\tmask_value, cmp_value));\n \t\t\t} else { \n \t\t\t\tif mask_value == 0 {\n \t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"&-masking with zero\"));\n \t\t\t\t}\n \t\t\t},\n \t\t\tBiBitOr => if mask_value > cmp_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ | {} will always be higher than {}\", mask_value,\n-\t\t\t\t\tcmp_value));\t\t\t\t\n+\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\"incompatible bit mask: _ | {} will always be higher than {}\", \n+\t\t\t\t\tmask_value, cmp_value));\t\t\t\t\n+\t\t\t} else {\n+\t\t\t\tif mask_value < cmp_value {\n+\t\t\t\t\tcx.span_lint(INEFFECTIVE_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\t\"ineffective bit mask: x | {} compared to {} is the same as x compared directly\", \n+\t\t\t\t\t\tmask_value, cmp_value)); \n+\t\t\t\t}\n \t\t\t},\n \t\t\t_ => ()\n \t\t},"}, {"sha": "1655faaf8b0d36f396ac843b1d91b68a21b444b2", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f527ea810b304bf7da2b97d27fe979cdc7c8612/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f527ea810b304bf7da2b97d27fe979cdc7c8612/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6f527ea810b304bf7da2b97d27fe979cdc7c8612", "patch": "@@ -42,7 +42,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n-                                           bit_mask::BAD_BIT_MASK, ptr_arg::PTR_ARG,\n+                                           bit_mask::BAD_BIT_MASK, \n+                                           bit_mask::INEFFECTIVE_BIT_MASK,\n+                                           ptr_arg::PTR_ARG,\n                                            needless_bool::NEEDLESS_BOOL,\n                                            approx_const::APPROX_CONSTANT,\n                                            misc::CMP_NAN, misc::FLOAT_CMP,"}, {"sha": "d2646d2589e4816c26b3e929ddb29e48ef760f0b", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f527ea810b304bf7da2b97d27fe979cdc7c8612/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f527ea810b304bf7da2b97d27fe979cdc7c8612/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=6f527ea810b304bf7da2b97d27fe979cdc7c8612", "patch": "@@ -5,6 +5,7 @@ const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n #[deny(bad_bit_mask)]\n+#[allow(ineffective_bit_mask)]\n fn main() {\n \tlet x = 5;\n \t\n@@ -34,4 +35,18 @@ fn main() {\n \t1 < 2 | x; //~ERROR\n \t2 == 3 | x; //~ERROR\n \t1 == x & 2; //~ERROR\n+\t\n+\tx | 1 > 2; // no error, because we allowed ineffective bit masks\n+\tineffective();\n+}\n+\n+#[deny(ineffective_bit_mask)]\n+#[allow(bad_bit_mask)]\n+fn ineffective() {\n+\tlet x = 5;\n+\t\n+\tx | 1 > 2; //~ERROR\n+\tx | 1 < 3; //~ERROR\n+\tx | 1 <= 3; //~ERROR\n+\tx | 1 >= 2; //~ERROR\n }"}]}