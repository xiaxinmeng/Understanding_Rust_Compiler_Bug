{"sha": "1e33c742ca572a93d97106876041c241c23a562a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzNjNzQyY2E1NzJhOTNkOTcxMDY4NzYwNDFjMjQxYzIzYTU2MmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T02:15:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T02:15:16Z"}, "message": "Auto merge of #75971 - Amjad50:libstd-deny-unsafe_op_in_unsafe_fn, r=Mark-Simulacrum\n\nApplied `#![deny(unsafe_op_in_unsafe_fn)]` in library/std/src/wasi\n\npartial fix for #73904\n\nThere are still more that was not applied in [mod.rs]( https://github.com/rust-lang/rust/blob/38fab2ea92a48980219989817201bf2094ae826a/library/std/src/sys/wasi/mod.rs) and that is due to its using files from `../unsupported`\n\nlike:\n```\n#[path = \"../unsupported/cmath.rs\"]\npub mod cmath;\n```", "tree": {"sha": "44de59378b5c4c44b930d7522bdee9344475d800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44de59378b5c4c44b930d7522bdee9344475d800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e33c742ca572a93d97106876041c241c23a562a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e33c742ca572a93d97106876041c241c23a562a", "html_url": "https://github.com/rust-lang/rust/commit/1e33c742ca572a93d97106876041c241c23a562a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e33c742ca572a93d97106876041c241c23a562a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f66117945df3b21e46ee9013e1c8a88f4b27842", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f66117945df3b21e46ee9013e1c8a88f4b27842", "html_url": "https://github.com/rust-lang/rust/commit/4f66117945df3b21e46ee9013e1c8a88f4b27842"}, {"sha": "559679b8c30b5422aaa77a2839231ea6a60292ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/559679b8c30b5422aaa77a2839231ea6a60292ff", "html_url": "https://github.com/rust-lang/rust/commit/559679b8c30b5422aaa77a2839231ea6a60292ff"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "4d0afe27bb8b2ed0943676ca253a180b92fae215", "filename": "library/std/src/sys/wasi/alloc.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Falloc.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,42 +1,69 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n \n+// SAFETY: All methods implemented follow the contract rules defined\n+// in `GlobalAlloc`.\n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n-            libc::malloc(layout.size()) as *mut u8\n+            // SAFETY: `libc::malloc` is guaranteed to be safe, it will allocate\n+            // `layout.size()` bytes of memory and return a pointer to it\n+            unsafe { libc::malloc(layout.size()) as *mut u8 }\n         } else {\n-            libc::aligned_alloc(layout.align(), layout.size()) as *mut u8\n+            // SAFETY: `libc::aligned_alloc` is guaranteed to be safe if\n+            // `layout.size()` is a multiple of `layout.align()`. This\n+            // constraint can be satisfied if `pad_to_align` is called,\n+            // which creates a layout by rounding the size of this layout up\n+            // to a multiple of the layout's alignment\n+            let aligned_layout = layout.pad_to_align();\n+            unsafe { libc::aligned_alloc(aligned_layout.align(), aligned_layout.size()) as *mut u8 }\n         }\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n-            libc::calloc(layout.size(), 1) as *mut u8\n+            // SAFETY: `libc::calloc` is safe as long that `layout.size() * 1`\n+            // would not result in integer overflow which cannot happen,\n+            // multiplying by one never overflows\n+            unsafe { libc::calloc(layout.size(), 1) as *mut u8 }\n         } else {\n-            let ptr = self.alloc(layout.clone());\n+            // SAFETY: The safety contract for `alloc` must be upheld by the caller\n+            let ptr = unsafe { self.alloc(layout.clone()) };\n             if !ptr.is_null() {\n-                ptr::write_bytes(ptr, 0, layout.size());\n+                // SAFETY: in the case of the `ptr` being not null\n+                // it will be properly aligned and a valid ptr\n+                // which satisfies `ptr::write_bytes` safety constrains\n+                unsafe { ptr::write_bytes(ptr, 0, layout.size()) };\n             }\n             ptr\n         }\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {\n-        libc::free(ptr as *mut libc::c_void)\n+        // SAFETY: `libc::free` is guaranteed to be safe if `ptr` is allocated\n+        // by this allocator or if `ptr` is NULL\n+        unsafe { libc::free(ptr as *mut libc::c_void) }\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n         if layout.align() <= MIN_ALIGN && layout.align() <= new_size {\n-            libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8\n+            // SAFETY: `libc::realloc` is safe if `ptr` is allocated by this\n+            // allocator or NULL\n+            // - If `new_size` is 0 and `ptr` is not NULL, it will act as `libc::free`\n+            // - If `new_size` is not 0 and `ptr` is NULL, it will act as `libc::malloc`\n+            // - Else, it will resize the block accordingly\n+            unsafe { libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8 }\n         } else {\n-            realloc_fallback(self, ptr, layout, new_size)\n+            // SAFETY: The safety contract for `realloc_fallback` must be upheld by the caller\n+            unsafe { realloc_fallback(self, ptr, layout, new_size) }\n         }\n     }\n }"}, {"sha": "9a27218e1fb70cb2510b36260277d8f7497ad81a", "filename": "library/std/src/sys/wasi/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::ffi::{CStr, OsStr, OsString};\n use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStrExt;"}, {"sha": "4f7cf6018d90fe99d9b2be792c86e84c6c71fe6b", "filename": "library/std/src/sys/wasi/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,5 +1,6 @@\n //! WASI-specific extensions to primitives in the `std::fs` module.\n \n+#![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n use crate::fs::{self, File, Metadata, OpenOptions};"}, {"sha": "4e8fa65eb20f093fe4906a1220582696e3deff09", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,5 +1,6 @@\n //! WASI-specific extensions to general I/O primitives\n \n+#![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n use crate::fs;"}, {"sha": "1cda30edcad0a4e17ffe18d9cdb399ae4f2d06ac", "filename": "library/std/src/sys/wasi/ext/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n pub mod ffi;\n pub mod fs;\n pub mod io;"}, {"sha": "ba66eba2ad38b7f605ffd1322d347eea3d4d5940", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,4 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![allow(dead_code)]\n \n use super::err2io;"}, {"sha": "93a92b49cfc01bad1b8b663b0d5ee6715f681052", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};"}, {"sha": "ee017d13a4ca00a09007a2ad1f622ab09c1a6166", "filename": "library/std/src/sys/wasi/io.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::marker::PhantomData;\n use crate::slice;\n "}, {"sha": "8fd4bb76d854fe0d3f0e9a055cd6608f50af1f8f", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};"}, {"sha": "33c796ae9415deae4357c89783a65aa8f3016a78", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::any::Any;\n use crate::error::Error as StdError;\n use crate::ffi::{CStr, CString, OsStr, OsString};"}, {"sha": "180fc114d86db2753290503ae629f66e58976792", "filename": "library/std/src/sys/wasi/pipe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n "}, {"sha": "c69d6376b0138d0a89b08143d47bcd1e0fe1f01b", "filename": "library/std/src/sys/wasi/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::io;"}, {"sha": "d82f6f411863d76e0a3907b03791ec7876ec3558", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::sys::fd::WasiFd;"}, {"sha": "8eaa5f09cb65691cae8944a93d7141bfc256cee9", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;"}, {"sha": "2e720d11603a7239fa410276c8e2464cd0a6c16b", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e33c742ca572a93d97106876041c241c23a562a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=1e33c742ca572a93d97106876041c241c23a562a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::time::Duration;\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]"}]}