{"sha": "ec5c5a750d2b9ed7b32902f216a1ae28604c4acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNWM1YTc1MGQyYjllZDdiMzI5MDJmMjE2YTFhZTI4NjA0YzRhY2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T01:24:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T01:31:01Z"}, "message": "rustc: Rework the API for trans_malloc() to be generic-aware and so that clients don't need to call trans_malloc_inner()", "tree": {"sha": "09a271b540d006d945141d7118b0c27bd7c5c47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a271b540d006d945141d7118b0c27bd7c5c47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb", "html_url": "https://github.com/rust-lang/rust/commit/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddeba19d33a1aa2e7681ae84424dbe4d7b510b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddeba19d33a1aa2e7681ae84424dbe4d7b510b7", "html_url": "https://github.com/rust-lang/rust/commit/dddeba19d33a1aa2e7681ae84424dbe4d7b510b7"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "8b0747d5045a221a750f7f9f75d86b33e9654331", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5c5a750d2b9ed7b32902f216a1ae28604c4acb/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ec5c5a750d2b9ed7b32902f216a1ae28604c4acb", "patch": "@@ -1060,22 +1060,26 @@ fn GEP_tup_like(@block_ctxt cx, @ty.t t,\n }\n \n \n-fn trans_malloc_inner(@block_ctxt cx, TypeRef llptr_ty) -> result {\n-    auto llbody_ty = lib.llvm.llvm.LLVMGetElementType(llptr_ty);\n+fn trans_raw_malloc(@block_ctxt cx, TypeRef llptr_ty, ValueRef llsize)\n+        -> result {\n     // FIXME: need a table to collect tydesc globals.\n     auto tydesc = C_int(0);\n-    auto sz = llsize_of(llbody_ty);\n-    auto sub = trans_upcall(cx, \"upcall_malloc\", vec(sz, tydesc));\n-    sub.val = vi2p(sub.bcx, sub.val, llptr_ty);\n-    ret sub;\n+    auto rslt = trans_upcall(cx, \"upcall_malloc\", vec(llsize, tydesc));\n+    rslt = res(rslt.bcx, vi2p(cx, rslt.val, llptr_ty));\n+    ret rslt;\n+}\n+\n+fn trans_malloc_without_cleanup(@block_ctxt cx, @ty.t t) -> result {\n+    auto llty = type_of(cx.fcx.ccx, t);\n+    auto rslt = size_of(cx, t);\n+    ret trans_raw_malloc(rslt.bcx, llty, rslt.val);\n }\n \n fn trans_malloc(@block_ctxt cx, @ty.t t) -> result {\n     auto scope_cx = find_scope_cx(cx);\n-    auto llptr_ty = type_of(cx.fcx.ccx, t);\n-    auto sub = trans_malloc_inner(cx, llptr_ty);\n-    scope_cx.cleanups += clean(bind drop_ty(_, sub.val, t));\n-    ret sub;\n+    auto rslt = trans_malloc_without_cleanup(cx, t);\n+    scope_cx.cleanups += clean(bind drop_ty(_, rslt.val, t));\n+    ret rslt;\n }\n \n \n@@ -3216,7 +3220,9 @@ fn trans_bind(@block_ctxt cx, @ast.expr f,\n                                                      ty_param_count);\n \n             // Malloc a box for the body.\n-            auto r = trans_malloc_inner(bcx, llclosure_ty);\n+            // FIXME: this isn't generic-safe\n+            auto r = trans_raw_malloc(bcx, llclosure_ty,\n+                llsize_of(llvm.LLVMGetElementType(llclosure_ty)));\n             auto box = r.val;\n             bcx = r.bcx;\n             auto rc = bcx.build.GEP(box,\n@@ -4453,7 +4459,8 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n         let TypeRef llboxed_body_ty = type_of(cx, boxed_body_ty);\n \n         // Malloc a box for the body.\n-        auto box = trans_malloc_inner(bcx, llboxed_body_ty);\n+        auto box = trans_raw_malloc(bcx, llboxed_body_ty,\n+            llsize_of(llvm.LLVMGetElementType(llboxed_body_ty)));\n         bcx = box.bcx;\n         auto rc = GEP_tup_like(bcx, boxed_body_ty, box.val,\n                                vec(0, abi.box_rc_field_refcnt));"}]}