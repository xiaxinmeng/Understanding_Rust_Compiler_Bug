{"sha": "6c42ef31dc7f3469bce7f6844069882b0029580e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNDJlZjMxZGM3ZjM0NjliY2U3ZjY4NDQwNjk4ODJiMDAyOTU4MGU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-06T16:47:24Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-17T07:53:07Z"}, "message": "De-@ trans contexts.", "tree": {"sha": "5786108e0a463a66bb012cd2100d57f959038e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5786108e0a463a66bb012cd2100d57f959038e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c42ef31dc7f3469bce7f6844069882b0029580e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c42ef31dc7f3469bce7f6844069882b0029580e", "html_url": "https://github.com/rust-lang/rust/commit/6c42ef31dc7f3469bce7f6844069882b0029580e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c42ef31dc7f3469bce7f6844069882b0029580e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869c96dbf088203867c62776c9c28a19658edd8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/869c96dbf088203867c62776c9c28a19658edd8d", "html_url": "https://github.com/rust-lang/rust/commit/869c96dbf088203867c62776c9c28a19658edd8d"}], "stats": {"total": 142, "additions": 70, "deletions": 72}, "files": [{"sha": "984fafb86ba7dfc5e288045504e93c2a07e28e13", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -15,7 +15,6 @@ use middle::astencode;\n \n use middle::ty;\n use middle::typeck::astconv;\n-use middle;\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n use syntax::ast::*;\n@@ -335,7 +334,6 @@ pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> const_val {\n \n pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n                             -> Result<const_val, ~str> {\n-    use middle::ty;\n     fn fromb(b: bool) -> Result<const_val, ~str> { Ok(const_int(b as i64)) }\n     match e.node {\n       ExprUnary(UnNeg, inner) => {"}, {"sha": "b151799e504f0a7dece764a5717264bc4f191e78", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -136,14 +136,14 @@ pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n }\n \n pub struct StatRecorder<'a> {\n-    ccx: @CrateContext<'a>,\n+    ccx: &'a CrateContext<'a>,\n     name: Option<~str>,\n     start: u64,\n     istart: uint,\n }\n \n impl<'a> StatRecorder<'a> {\n-    pub fn new(ccx: @CrateContext<'a>, name: ~str) -> StatRecorder<'a> {\n+    pub fn new(ccx: &'a CrateContext<'a>, name: ~str) -> StatRecorder<'a> {\n         let start = if ccx.sess().trans_stats() {\n             time::precise_time_ns()\n         } else {\n@@ -528,7 +528,7 @@ pub fn note_unique_llvm_symbol(ccx: &CrateContext, sym: ~str) {\n }\n \n \n-pub fn get_res_dtor(ccx: @CrateContext,\n+pub fn get_res_dtor(ccx: &CrateContext,\n                     did: ast::DefId,\n                     parent_id: ast::DefId,\n                     substs: &[ty::t])\n@@ -1225,7 +1225,7 @@ pub fn make_return_pointer(fcx: &FunctionContext, output_type: ty::t)\n //\n // Be warned! You must call `init_function` before doing anything with the\n // returned function context.\n-pub fn new_fn_ctxt<'a>(ccx: @CrateContext<'a>,\n+pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext<'a>,\n                        llfndecl: ValueRef,\n                        id: ast::NodeId,\n                        has_env: bool,\n@@ -1443,15 +1443,15 @@ pub fn build_return_block(fcx: &FunctionContext, ret_cx: &Block) {\n // trans_closure: Builds an LLVM function out of a source function.\n // If the function closes over its environment a closure will be\n // returned.\n-pub fn trans_closure<'a>(ccx: @CrateContext,\n-                         decl: &ast::FnDecl,\n-                         body: &ast::Block,\n-                         llfndecl: ValueRef,\n-                         param_substs: Option<@param_substs>,\n-                         id: ast::NodeId,\n-                         _attributes: &[ast::Attribute],\n-                         output_type: ty::t,\n-                         maybe_load_env: <'b> |&'b Block<'b>| -> &'b Block<'b>) {\n+pub fn trans_closure(ccx: &CrateContext,\n+                     decl: &ast::FnDecl,\n+                     body: &ast::Block,\n+                     llfndecl: ValueRef,\n+                     param_substs: Option<@param_substs>,\n+                     id: ast::NodeId,\n+                     _attributes: &[ast::Attribute],\n+                     output_type: ty::t,\n+                     maybe_load_env: <'a> |&'a Block<'a>| -> &'a Block<'a>) {\n     ccx.stats.n_closures.set(ccx.stats.n_closures.get() + 1);\n \n     let _icx = push_ctxt(\"trans_closure\");\n@@ -1543,7 +1543,7 @@ pub fn trans_closure<'a>(ccx: @CrateContext,\n \n // trans_fn: creates an LLVM function corresponding to a source language\n // function.\n-pub fn trans_fn(ccx: @CrateContext,\n+pub fn trans_fn(ccx: &CrateContext,\n                 decl: &ast::FnDecl,\n                 body: &ast::Block,\n                 llfndecl: ValueRef,\n@@ -1558,7 +1558,7 @@ pub fn trans_fn(ccx: @CrateContext,\n                   param_substs, id, attrs, output_type, |bcx| bcx);\n }\n \n-pub fn trans_enum_variant(ccx: @CrateContext,\n+pub fn trans_enum_variant(ccx: &CrateContext,\n                           _enum_id: ast::NodeId,\n                           variant: &ast::Variant,\n                           _args: &[ast::VariantArg],\n@@ -1575,7 +1575,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n         llfndecl);\n }\n \n-pub fn trans_tuple_struct(ccx: @CrateContext,\n+pub fn trans_tuple_struct(ccx: &CrateContext,\n                           _fields: &[ast::StructField],\n                           ctor_id: ast::NodeId,\n                           param_substs: Option<@param_substs>,\n@@ -1590,7 +1590,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n         llfndecl);\n }\n \n-fn trans_enum_variant_or_tuple_like_struct(ccx: @CrateContext,\n+fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n                                            ctor_id: ast::NodeId,\n                                            disr: ty::Disr,\n                                            param_substs: Option<@param_substs>,\n@@ -1647,8 +1647,8 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: @CrateContext,\n     finish_fn(&fcx, bcx);\n }\n \n-pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::EnumDef,\n-                      id: ast::NodeId, vi: @Vec<@ty::VariantInfo> ,\n+pub fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n+                      id: ast::NodeId, vi: @Vec<@ty::VariantInfo>,\n                       i: &mut uint) {\n     for &variant in enum_definition.variants.iter() {\n         let disr_val = vi.get(*i).disr_val;\n@@ -1671,7 +1671,7 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::EnumDef,\n }\n \n pub struct TransItemVisitor<'a> {\n-    ccx: @CrateContext<'a>,\n+    ccx: &'a CrateContext<'a>,\n }\n \n impl<'a> Visitor<()> for TransItemVisitor<'a> {\n@@ -1680,7 +1680,7 @@ impl<'a> Visitor<()> for TransItemVisitor<'a> {\n     }\n }\n \n-pub fn trans_item(ccx: @CrateContext, item: &ast::Item) {\n+pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let _icx = push_ctxt(\"trans_item\");\n     match item.node {\n       ast::ItemFn(decl, purity, _abis, ref generics, body) => {\n@@ -1757,7 +1757,7 @@ pub fn trans_item(ccx: @CrateContext, item: &ast::Item) {\n     }\n }\n \n-pub fn trans_struct_def(ccx: @CrateContext, struct_def: @ast::StructDef) {\n+pub fn trans_struct_def(ccx: &CrateContext, struct_def: @ast::StructDef) {\n     // If this is a tuple-like struct, translate the constructor.\n     match struct_def.ctor_id {\n         // We only need to translate a constructor if there are fields;\n@@ -1776,14 +1776,14 @@ pub fn trans_struct_def(ccx: @CrateContext, struct_def: @ast::StructDef) {\n // separate modules in the compiled program.  That's because modules exist\n // only as a convenience for humans working with the code, to organize names\n // and control visibility.\n-pub fn trans_mod(ccx: @CrateContext, m: &ast::Mod) {\n+pub fn trans_mod(ccx: &CrateContext, m: &ast::Mod) {\n     let _icx = push_ctxt(\"trans_mod\");\n     for item in m.items.iter() {\n         trans_item(ccx, *item);\n     }\n }\n \n-fn finish_register_fn(ccx: @CrateContext, sp: Span, sym: ~str, node_id: ast::NodeId,\n+fn finish_register_fn(ccx: &CrateContext, sp: Span, sym: ~str, node_id: ast::NodeId,\n                       llfn: ValueRef) {\n     {\n         let mut item_symbols = ccx.item_symbols.borrow_mut();\n@@ -1802,7 +1802,7 @@ fn finish_register_fn(ccx: @CrateContext, sp: Span, sym: ~str, node_id: ast::Nod\n     }\n }\n \n-fn register_fn(ccx: @CrateContext,\n+fn register_fn(ccx: &CrateContext,\n                sp: Span,\n                sym: ~str,\n                node_id: ast::NodeId,\n@@ -1826,7 +1826,7 @@ fn register_fn(ccx: @CrateContext,\n }\n \n // only use this for foreign function ABIs and glue, use `register_fn` for Rust functions\n-pub fn register_fn_llvmty(ccx: @CrateContext,\n+pub fn register_fn_llvmty(ccx: &CrateContext,\n                           sp: Span,\n                           sym: ~str,\n                           node_id: ast::NodeId,\n@@ -1849,7 +1849,7 @@ pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool {\n \n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n-pub fn create_entry_wrapper(ccx: @CrateContext,\n+pub fn create_entry_wrapper(ccx: &CrateContext,\n                            _sp: Span,\n                            main_llfn: ValueRef) {\n     let et = ccx.sess().entry_type.get().unwrap();\n@@ -1861,7 +1861,7 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n         session::EntryNone => {}    // Do nothing.\n     }\n \n-    fn create_entry_fn(ccx: @CrateContext,\n+    fn create_entry_fn(ccx: &CrateContext,\n                        rust_main: ValueRef,\n                        use_start_lang_item: bool) {\n         let llfty = Type::func([ccx.int_type, Type::i8().ptr_to().ptr_to()],\n@@ -1941,7 +1941,7 @@ fn exported_name(ccx: &CrateContext, id: ast::NodeId,\n     }\n }\n \n-pub fn get_item_val(ccx: @CrateContext, id: ast::NodeId) -> ValueRef {\n+pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n     debug!(\"get_item_val(id=`{:?}`)\", id);\n \n     let val = {\n@@ -2194,7 +2194,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::NodeId) -> ValueRef {\n     }\n }\n \n-fn register_method(ccx: @CrateContext, id: ast::NodeId,\n+fn register_method(ccx: &CrateContext, id: ast::NodeId,\n                    m: &ast::Method) -> ValueRef {\n     let mty = ty::node_id_to_type(ccx.tcx, id);\n \n@@ -2444,7 +2444,7 @@ pub fn decl_crate_map(sess: &Session, mapmeta: LinkMeta,\n     return (sym_name, map);\n }\n \n-pub fn fill_crate_map(ccx: @CrateContext, map: ValueRef) {\n+pub fn fill_crate_map(ccx: &CrateContext, map: ValueRef) {\n     let event_loop_factory = match ccx.tcx.lang_items.event_loop_factory() {\n         Some(did) => unsafe {\n             if is_local(did) {\n@@ -2551,7 +2551,7 @@ pub fn trans_crate(krate: ast::Crate,\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n     let llmod_id = link_meta.crateid.name + \".rs\";\n \n-    let ccx = @CrateContext::new(llmod_id,\n+    let ccx = &CrateContext::new(llmod_id,\n                                  &analysis.ty_cx,\n                                  analysis.exp_map2,\n                                  analysis.maps,"}, {"sha": "f85a2b1b6c4d3d2bfa6dd2c3e4924c4caa74262d", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -409,7 +409,7 @@ pub fn trans_expr_fn<'a>(\n     bcx\n }\n \n-pub fn get_wrapper_for_bare_fn(ccx: @CrateContext,\n+pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n                                closure_ty: ty::t,\n                                def: ast::Def,\n                                fn_ptr: ValueRef,"}, {"sha": "1f077a07a26190730c6cdb137b784efc3d9f2e02", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -286,7 +286,7 @@ pub struct FunctionContext<'a> {\n     block_arena: &'a TypedArena<Block<'a>>,\n \n     // This function's enclosing crate context.\n-    ccx: @CrateContext<'a>,\n+    ccx: &'a CrateContext<'a>,\n \n     // Used and maintained by the debuginfo module.\n     debug_context: debuginfo::FunctionDebugContext,\n@@ -435,7 +435,7 @@ impl<'a> Block<'a> {\n         })\n     }\n \n-    pub fn ccx(&self) -> @CrateContext<'a> { self.fcx.ccx }\n+    pub fn ccx(&self) -> &'a CrateContext<'a> { self.fcx.ccx }\n     pub fn tcx(&self) -> &'a ty::ctxt {\n         self.fcx.ccx.tcx\n     }"}, {"sha": "61c89ca0c5ff9760ff5ff3464db6095d7b08a45e", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -89,7 +89,7 @@ pub fn const_ptrcast(cx: &CrateContext, a: ValueRef, t: Type) -> ValueRef {\n     }\n }\n \n-fn const_vec(cx: @CrateContext, e: &ast::Expr,\n+fn const_vec(cx: &CrateContext, e: &ast::Expr,\n              es: &[@ast::Expr], is_local: bool) -> (ValueRef, Type, bool) {\n     let vec_ty = ty::expr_ty(cx.tcx, e);\n     let unit_ty = ty::sequence_element_type(cx.tcx, vec_ty);\n@@ -160,7 +160,7 @@ fn const_deref(cx: &CrateContext, v: ValueRef, t: ty::t, explicit: bool)\n     }\n }\n \n-pub fn get_const_val(cx: @CrateContext,\n+pub fn get_const_val(cx: &CrateContext,\n                      mut def_id: ast::DefId) -> (ValueRef, bool) {\n     let contains_key = {\n         let const_values = cx.const_values.borrow();\n@@ -185,7 +185,7 @@ pub fn get_const_val(cx: @CrateContext,\n      !non_inlineable_statics.get().contains(&def_id.node))\n }\n \n-pub fn const_expr(cx: @CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef, bool) {\n+pub fn const_expr(cx: &CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef, bool) {\n     let (llconst, inlineable) = const_expr_unadjusted(cx, e, is_local);\n     let mut llconst = llconst;\n     let mut inlineable = inlineable;\n@@ -298,7 +298,7 @@ pub fn const_expr(cx: @CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef\n \n // the bool returned is whether this expression can be inlined into other crates\n // if it's assigned to a static.\n-fn const_expr_unadjusted(cx: @CrateContext, e: &ast::Expr,\n+fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                          is_local: bool) -> (ValueRef, bool) {\n     let map_list = |exprs: &[@ast::Expr]| {\n         exprs.iter().map(|&e| const_expr(cx, e, is_local))\n@@ -694,7 +694,7 @@ fn const_expr_unadjusted(cx: @CrateContext, e: &ast::Expr,\n     }\n }\n \n-pub fn trans_const(ccx: @CrateContext, m: ast::Mutability, id: ast::NodeId) {\n+pub fn trans_const(ccx: &CrateContext, m: ast::Mutability, id: ast::NodeId) {\n     unsafe {\n         let _icx = push_ctxt(\"trans_const\");\n         let g = base::get_item_val(ccx, id);"}, {"sha": "a22af684a9ee9d90a824940104c20aa41688b15e", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -709,7 +709,7 @@ impl<'a> DatumBlock<'a, Expr> {\n         self.datum.shallow_copy(self.bcx, dst)\n     }\n \n-    pub fn ccx(&self) -> @CrateContext<'a> {\n+    pub fn ccx(&self) -> &'a CrateContext<'a> {\n         self.bcx.ccx()\n     }\n "}, {"sha": "5ad5c81333961470607e35c2e94a5e2bf6fef1fc", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -253,7 +253,7 @@ enum VariableKind {\n }\n \n /// Create any deferred debug metadata nodes\n-pub fn finalize(cx: @CrateContext) {\n+pub fn finalize(cx: &CrateContext) {\n     if cx.dbg_cx.is_none() {\n         return;\n     }"}, {"sha": "d013c8fa1b93c8a141a67c5812ca82a9a5e91921", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -548,7 +548,7 @@ fn trans_def<'a>(bcx: &'a Block<'a>,\n         ast::DefStatic(did, _) => {\n             let const_ty = expr_ty(bcx, ref_expr);\n \n-            fn get_did(ccx: @CrateContext, did: ast::DefId)\n+            fn get_did(ccx: &CrateContext, did: ast::DefId)\n                        -> ast::DefId {\n                 if did.krate != ast::LOCAL_CRATE {\n                     inline::maybe_instantiate_inline(ccx, did)"}, {"sha": "721a924af0cd124a63db3664b8c6250f41f8b5f3", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -132,8 +132,8 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n     }\n }\n \n-pub fn register_static(ccx: @CrateContext,\n-                       foreign_item: @ast::ForeignItem) -> ValueRef {\n+pub fn register_static(ccx: &CrateContext,\n+                       foreign_item: &ast::ForeignItem) -> ValueRef {\n     let ty = ty::node_id_to_type(ccx.tcx, foreign_item.id);\n     let llty = type_of::type_of(ccx, ty);\n \n@@ -145,7 +145,7 @@ pub fn register_static(ccx: @CrateContext,\n     // library then we've already declared the crate map\n     // so use that instead.\n     if attr::contains_name(foreign_item.attrs.as_slice(), \"crate_map\") {\n-        return if ccx.sess.building_library.get() {\n+        return if ccx.sess().building_library.get() {\n             let s = \"_rust_crate_map_toplevel\";\n             let g = unsafe {\n                 s.with_c_str(|buf| {\n@@ -171,15 +171,15 @@ pub fn register_static(ccx: @CrateContext,\n             let linkage = match llvm_linkage_by_name(name.get()) {\n                 Some(linkage) => linkage,\n                 None => {\n-                    ccx.sess.span_fatal(foreign_item.span,\n-                                        \"invalid linkage specified\");\n+                    ccx.sess().span_fatal(foreign_item.span,\n+                                          \"invalid linkage specified\");\n                 }\n             };\n             let llty2 = match ty::get(ty).sty {\n                 ty::ty_ptr(ref mt) => type_of::type_of(ccx, mt.ty),\n                 _ => {\n-                    ccx.sess.span_fatal(foreign_item.span,\n-                                        \"must have type `*T` or `*mut T`\");\n+                    ccx.sess().span_fatal(foreign_item.span,\n+                                          \"must have type `*T` or `*mut T`\");\n                 }\n             };\n             unsafe {\n@@ -205,8 +205,8 @@ pub fn register_static(ccx: @CrateContext,\n     }\n }\n \n-pub fn register_foreign_item_fn(ccx: @CrateContext, abis: AbiSet,\n-                                foreign_item: @ast::ForeignItem) -> ValueRef {\n+pub fn register_foreign_item_fn(ccx: &CrateContext, abis: AbiSet,\n+                                foreign_item: &ast::ForeignItem) -> ValueRef {\n     /*!\n      * Registers a foreign function found in a library.\n      * Just adds a LLVM global.\n@@ -455,7 +455,7 @@ pub fn trans_native_call<'a>(\n     return bcx;\n }\n \n-pub fn trans_foreign_mod(ccx: @CrateContext, foreign_mod: &ast::ForeignMod) {\n+pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n     let _icx = push_ctxt(\"foreign::trans_foreign_mod\");\n     for &foreign_item in foreign_mod.items.iter() {\n         match foreign_item.node {\n@@ -499,7 +499,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext, foreign_mod: &ast::ForeignMod) {\n // inline the one into the other. Of course we could just generate the\n // correct code in the first place, but this is much simpler.\n \n-pub fn register_rust_fn_with_foreign_abi(ccx: @CrateContext,\n+pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                                          sp: Span,\n                                          sym: ~str,\n                                          node_id: ast::NodeId)\n@@ -523,7 +523,7 @@ pub fn register_rust_fn_with_foreign_abi(ccx: @CrateContext,\n     llfn\n }\n \n-pub fn trans_rust_fn_with_foreign_abi(ccx: @CrateContext,\n+pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                                       decl: &ast::FnDecl,\n                                       body: &ast::Block,\n                                       attrs: &[ast::Attribute],\n@@ -540,7 +540,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @CrateContext,\n         return build_wrap_fn(ccx, llrustfn, llwrapfn, &tys);\n     }\n \n-    fn build_rust_fn(ccx: @CrateContext,\n+    fn build_rust_fn(ccx: &CrateContext,\n                      decl: &ast::FnDecl,\n                      body: &ast::Block,\n                      attrs: &[ast::Attribute],\n@@ -584,7 +584,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @CrateContext,\n         llfn\n     }\n \n-    unsafe fn build_wrap_fn(ccx: @CrateContext,\n+    unsafe fn build_wrap_fn(ccx: &CrateContext,\n                             llrustfn: ValueRef,\n                             llwrapfn: ValueRef,\n                             tys: &ForeignTypes) {\n@@ -824,7 +824,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @CrateContext,\n // This code is kind of a confused mess and needs to be reworked given\n // the massive simplifications that have occurred.\n \n-pub fn link_name(i: @ast::ForeignItem) -> InternedString {\n+pub fn link_name(i: &ast::ForeignItem) -> InternedString {\n      match attr::first_attr_value_str_by_name(i.attrs.as_slice(),\n                                               \"link_name\") {\n         None => token::get_ident(i.ident),"}, {"sha": "5f2d4936ec10954918e88951b85c2b7fb0d21cfb", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -126,7 +126,7 @@ pub fn drop_ty_immediate<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n     drop_ty(bcx, vp, t)\n }\n \n-pub fn get_drop_glue(ccx: @CrateContext, t: ty::t) -> ValueRef {\n+pub fn get_drop_glue(ccx: &CrateContext, t: ty::t) -> ValueRef {\n     let t = get_drop_glue_type(ccx, t);\n     {\n         let drop_glues = ccx.drop_glues.borrow();\n@@ -149,7 +149,7 @@ pub fn get_drop_glue(ccx: @CrateContext, t: ty::t) -> ValueRef {\n     glue\n }\n \n-pub fn lazily_emit_visit_glue(ccx: @CrateContext, ti: @tydesc_info) {\n+pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: @tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_visit_glue\");\n \n     let llfnty = Type::glue_fn(type_of(ccx, ti.ty).ptr_to());\n@@ -444,7 +444,7 @@ fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,\n     return llfn;\n }\n \n-fn make_generic_glue(ccx: @CrateContext,\n+fn make_generic_glue(ccx: &CrateContext,\n                      t: ty::t,\n                      llfn: ValueRef,\n                      helper: <'a> |&'a Block<'a>, ValueRef, ty::t|\n@@ -478,7 +478,7 @@ fn make_generic_glue(ccx: @CrateContext,\n     llfn\n }\n \n-pub fn emit_tydescs(ccx: @CrateContext) {\n+pub fn emit_tydescs(ccx: &CrateContext) {\n     let _icx = push_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs.set(true);"}, {"sha": "260f173f42a73782ffe66d400b95607b3b680b83", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -19,7 +19,7 @@ use syntax::ast;\n use syntax::ast_util::local_def;\n use syntax::attr;\n \n-pub fn maybe_instantiate_inline(ccx: @CrateContext, fn_id: ast::DefId)\n+pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     -> ast::DefId {\n     let _icx = push_ctxt(\"maybe_instantiate_inline\");\n     {"}, {"sha": "941814984fa9790acb49662601fd87da83553616", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -31,7 +31,7 @@ use syntax::ast_map;\n use syntax::parse::token;\n use util::ppaux::ty_to_str;\n \n-pub fn get_simple_intrinsic(ccx: @CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> {\n+pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> {\n     let name = match token::get_ident(item.ident).get() {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n         \"sqrtf64\" => \"llvm.sqrt.f64\",\n@@ -83,7 +83,7 @@ pub fn get_simple_intrinsic(ccx: @CrateContext, item: &ast::ForeignItem) -> Opti\n     Some(ccx.intrinsics.get_copy(&name))\n }\n \n-pub fn trans_intrinsic(ccx: @CrateContext,\n+pub fn trans_intrinsic(ccx: &CrateContext,\n                        decl: ValueRef,\n                        item: &ast::ForeignItem,\n                        substs: @param_substs,"}, {"sha": "b41035b6de8c5bb5bca850e6841f140082d469b8", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -45,7 +45,7 @@ for non-monomorphized methods only.  Other methods will\n be generated once they are invoked with specific type parameters,\n see `trans::base::lval_static_fn()` or `trans::base::monomorphic_fn()`.\n */\n-pub fn trans_impl(ccx: @CrateContext,\n+pub fn trans_impl(ccx: &CrateContext,\n                   name: ast::Ident,\n                   methods: &[@ast::Method],\n                   generics: &ast::Generics,\n@@ -84,7 +84,7 @@ pub fn trans_impl(ccx: @CrateContext,\n ///   type parameters and so forth, else None\n /// * `llfn`: the LLVM ValueRef for the method\n ///\n-pub fn trans_method(ccx: @CrateContext, method: &ast::Method,\n+pub fn trans_method(ccx: &CrateContext, method: &ast::Method,\n                     param_substs: Option<@param_substs>,\n                     llfn: ValueRef) -> ValueRef {\n     trans_fn(ccx, method.decl, method.body,\n@@ -445,7 +445,7 @@ pub fn trans_trait_callee_from_llval<'a>(bcx: &'a Block<'a>,\n     };\n }\n \n-pub fn vtable_id(ccx: @CrateContext,\n+pub fn vtable_id(ccx: &CrateContext,\n                  origin: &typeck::vtable_origin)\n               -> mono_id {\n     match origin {"}, {"sha": "0f327d131c8b97ffb9f5a76fdfdbf2c2fd0aaa12", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c42ef31dc7f3469bce7f6844069882b0029580e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=6c42ef31dc7f3469bce7f6844069882b0029580e", "patch": "@@ -28,7 +28,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::local_def;\n \n-pub fn monomorphic_fn(ccx: @CrateContext,\n+pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n                       real_substs: &ty::substs,\n                       vtables: Option<typeck::vtable_res>,\n@@ -294,7 +294,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n     (lldecl, must_cast)\n }\n \n-pub fn make_mono_id(ccx: @CrateContext,\n+pub fn make_mono_id(ccx: &CrateContext,\n                     item: ast::DefId,\n                     substs: &param_substs) -> mono_id {\n     // FIXME (possibly #5801): Need a lot of type hints to get"}]}