{"sha": "e394bb763be932c6748a16ddb49688e60464274a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTRiYjc2M2JlOTMyYzY3NDhhMTZkZGI0OTY4OGU2MDQ2NDI3NGE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-08-01T09:06:21Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-08-17T09:15:08Z"}, "message": "BTree: refine some comments", "tree": {"sha": "1566344cb255ef5f02f702539a8412a90bd524bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566344cb255ef5f02f702539a8412a90bd524bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e394bb763be932c6748a16ddb49688e60464274a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e394bb763be932c6748a16ddb49688e60464274a", "html_url": "https://github.com/rust-lang/rust/commit/e394bb763be932c6748a16ddb49688e60464274a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e394bb763be932c6748a16ddb49688e60464274a/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23461b210f1b0a121592a18fc4fb666106006668", "url": "https://api.github.com/repos/rust-lang/rust/commits/23461b210f1b0a121592a18fc4fb666106006668", "html_url": "https://github.com/rust-lang/rust/commit/23461b210f1b0a121592a18fc4fb666106006668"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "40aa91da75a35e89da1a3152526c758219df49eb", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=e394bb763be932c6748a16ddb49688e60464274a", "patch": "@@ -17,16 +17,16 @@ mod entry;\n pub use entry::{Entry, OccupiedEntry, OccupiedError, VacantEntry};\n use Entry::*;\n \n-/// Minimum number of elements in nodes that are not a root.\n+/// Minimum number of elements in a node that is not a root.\n /// We might temporarily have fewer elements during methods.\n pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n \n // A tree in a `BTreeMap` is a tree in the `node` module with additional invariants:\n // - Keys must appear in ascending order (according to the key's type).\n-// - If the root node is internal, it must contain at least 1 element.\n+// - Every non-leaf node contains at least 1 element (has at least 2 children).\n // - Every non-root node contains at least MIN_LEN elements.\n //\n-// An empty map may be represented both by the absence of a root node or by a\n+// An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n /// A map based on a [B-Tree].\n@@ -1723,8 +1723,8 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     pub(super) fn size_hint(&self) -> (usize, Option<usize>) {\n         // In most of the btree iterators, `self.length` is the number of elements\n         // yet to be visited. Here, it includes elements that were visited and that\n-        // the predicate decided not to drain. Making this upper bound more accurate\n-        // requires maintaining an extra field and is not worth while.\n+        // the predicate decided not to drain. Making this upper bound more tight\n+        // during iteration would require an extra field.\n         (0, Some(*self.length))\n     }\n }"}, {"sha": "9d0db345009459e3d8eae92336251a1d5a941d58", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=e394bb763be932c6748a16ddb49688e60464274a", "patch": "@@ -440,8 +440,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next_back`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next_back`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>\n@@ -470,8 +469,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next_back(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>"}, {"sha": "dfce98f97bd4496f280e2dab003a8891fed80f86", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e394bb763be932c6748a16ddb49688e60464274a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=e394bb763be932c6748a16ddb49688e60464274a", "patch": "@@ -574,7 +574,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// no cleanup is done on any of the keys, values and other children.\n     /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n     ///\n-    /// Requires exclusive access to the `Root` object but not to the root node;\n+    /// Requires exclusive access to the `NodeRef` object but not to the root node;\n     /// it will not invalidate other handles or references to the root node.\n     ///\n     /// Panics if there is no internal level, i.e., if the root node is a leaf.\n@@ -1663,7 +1663,7 @@ pub mod marker {\n         const PERMITS_TRAVERSAL: bool = true;\n     }\n     impl BorrowType for Owned {\n-        // Traversal isn't needede, it happens using the result of `borrow_mut`.\n+        // Traversal isn't needed, it happens using the result of `borrow_mut`.\n         // By disabling traversal, and only creating new references to roots,\n         // we know that every reference of the `Owned` type is to a root node.\n         const PERMITS_TRAVERSAL: bool = false;"}]}