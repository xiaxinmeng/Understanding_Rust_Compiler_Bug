{"sha": "39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Yjc5Mjg1YmVmOGQxYzFhOWJlYTdlMmE1ZjQ4ZmMxZjkyNzk3ZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-15T10:11:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-17T14:05:33Z"}, "message": "Augment the constrainted parameter check to ensure that all regions\nwhich get mentioned in an associated type are constrained.  Arguably we\nshould just require that all regions are constrained, but that is more\nof a breaking change.", "tree": {"sha": "cda71515b267e38fb8d2e84222a724d90151bb97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda71515b267e38fb8d2e84222a724d90151bb97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "html_url": "https://github.com/rust-lang/rust/commit/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3cbacd0256c76f1b8ff8ae71b073ddd58cb777", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3cbacd0256c76f1b8ff8ae71b073ddd58cb777", "html_url": "https://github.com/rust-lang/rust/commit/ad3cbacd0256c76f1b8ff8ae71b073ddd58cb777"}], "stats": {"total": 137, "additions": 127, "deletions": 10}, "files": [{"sha": "5ed93703d977f25ced3824755210b2a0648739fd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "patch": "@@ -902,9 +902,10 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 tcx.impl_trait_refs.borrow_mut().insert(it.id, trait_ref);\n             }\n \n-            enforce_impl_ty_params_are_constrained(tcx,\n-                                                   generics,\n-                                                   local_def(it.id));\n+            enforce_impl_params_are_constrained(tcx,\n+                                                generics,\n+                                                local_def(it.id),\n+                                                impl_items);\n         },\n         ast::ItemTrait(_, _, _, ref trait_items) => {\n             let trait_def = trait_def_of_item(ccx, it);\n@@ -2188,9 +2189,10 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n }\n \n /// Checks that all the type parameters on an impl\n-fn enforce_impl_ty_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                                ast_generics: &ast::Generics,\n-                                                impl_def_id: ast::DefId)\n+fn enforce_impl_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                             ast_generics: &ast::Generics,\n+                                             impl_def_id: ast::DefId,\n+                                             impl_items: &[P<ast::ImplItem>])\n {\n     let impl_scheme = ty::lookup_item_type(tcx, impl_def_id);\n     let impl_predicates = ty::lookup_predicates(tcx, impl_def_id);\n@@ -2215,10 +2217,66 @@ fn enforce_impl_ty_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      idx: index as u32,\n                                      name: ty_param.ident.name };\n         if !input_parameters.contains(&ctp::Parameter::Type(param_ty)) {\n-            span_err!(tcx.sess, ty_param.span, E0207,\n-                \"the type parameter `{}` is not constrained by the \\\n-                         impl trait, self type, or predicates\",\n-                        param_ty.user_string(tcx));\n+            report_unused_parameter(tcx, ty_param.span, \"type\", &param_ty.user_string(tcx));\n+        }\n+    }\n+\n+    // Every lifetime used in an associated type must be constrained.\n+\n+    let lifetimes_in_associated_types: HashSet<_> =\n+        impl_items.iter()\n+                  .filter_map(|item| match item.node {\n+                      ast::TypeImplItem(..) => Some(ty::node_id_to_type(tcx, item.id)),\n+                      ast::MethodImplItem(..) | ast::MacImplItem(..) => None,\n+                  })\n+                  .flat_map(|ty| ctp::parameters_for_type(ty).into_iter())\n+                  .filter_map(|p| match p {\n+                      ctp::Parameter::Type(_) => None,\n+                      ctp::Parameter::Region(r) => Some(r),\n+                  })\n+                  .collect();\n+\n+    for (index, lifetime_def) in ast_generics.lifetimes.iter().enumerate() {\n+        let region = ty::EarlyBoundRegion { param_id: lifetime_def.lifetime.id,\n+                                            space: TypeSpace,\n+                                            index: index as u32,\n+                                            name: lifetime_def.lifetime.name };\n+        if\n+            lifetimes_in_associated_types.contains(&region) && // (*)\n+            !input_parameters.contains(&ctp::Parameter::Region(region))\n+        {\n+            report_unused_parameter(tcx, lifetime_def.lifetime.span,\n+                                    \"lifetime\", &region.name.user_string(tcx));\n         }\n     }\n+\n+    // (*) This is a horrible concession to reality. I think it'd be\n+    // better to just ban unconstrianed lifetimes outright, but in\n+    // practice people do non-hygenic macros like:\n+    //\n+    // ```\n+    // macro_rules! __impl_slice_eq1 {\n+    //     ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+    //         impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+    //            ....\n+    //         }\n+    //     }\n+    // }\n+    // ```\n+    //\n+    // In a concession to backwards compatbility, we continue to\n+    // permit those, so long as the lifetimes aren't used in\n+    // associated types. I believe this is sound, because lifetimes\n+    // used elsewhere are not projected back out.\n+}\n+\n+fn report_unused_parameter(tcx: &ty::ctxt,\n+                           span: Span,\n+                           kind: &str,\n+                           name: &str)\n+{\n+    span_err!(tcx.sess, span, E0207,\n+              \"the {} parameter `{}` is not constrained by the \\\n+               impl trait, self type, or predicates\",\n+              kind, name);\n }"}, {"sha": "23401db21d89063643045ccf10d4fcac92783807", "filename": "src/test/compile-fail/impl-unused-rps-in-assoc-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Ftest%2Fcompile-fail%2Fimpl-unused-rps-in-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Ftest%2Fcompile-fail%2Fimpl-unused-rps-in-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-unused-rps-in-assoc-type.rs?ref=39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that lifetime parameters must be constrained if they appear in\n+// an associated type def'n. Issue #22077.\n+\n+trait Fun {\n+    type Output;\n+    fn call<'x>(&'x self) -> Self::Output;\n+}\n+\n+struct Holder { x: String }\n+\n+impl<'a> Fun for Holder { //~ ERROR E0207\n+    type Output = &'a str;\n+    fn call<'b>(&'b self) -> &'b str {\n+        &self.x[..]\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "4aa2571cad0cc9418709407687ff5ba9ac19056d", "filename": "src/test/compile-fail/issue-22886.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Ftest%2Fcompile-fail%2Fissue-22886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5/src%2Ftest%2Fcompile-fail%2Fissue-22886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22886.rs?ref=39b79285bef8d1c1a9bea7e2a5f48fc1f92797f5", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #22886.\n+\n+fn crash_please() {\n+    let mut iter = Newtype(Some(Box::new(0)));\n+    let saved = iter.next().unwrap();\n+    println!(\"{}\", saved);\n+    iter.0 = None;\n+    println!(\"{}\", saved);\n+}\n+\n+struct Newtype(Option<Box<usize>>);\n+\n+impl<'a> Iterator for Newtype { //~ ERROR E0207\n+    type Item = &'a Box<usize>;\n+\n+    fn next(&mut self) -> Option<&Box<usize>> {\n+        self.0.as_ref()\n+    }\n+}\n+\n+fn main() { }"}]}