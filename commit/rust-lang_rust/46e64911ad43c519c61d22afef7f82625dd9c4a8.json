{"sha": "46e64911ad43c519c61d22afef7f82625dd9c4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTY0OTExYWQ0M2M1MTljNjFkMjJhZmVmN2Y4MjYyNWRkOWM0YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-26T15:36:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-26T15:36:38Z"}, "message": "Auto merge of #4145 - rust-lang:rustup, r=oli-obk\n\nRustup to rustc 1.36.0-nightly (2268d9923 2019-05-26)\n\nchangelog: none", "tree": {"sha": "0f70bb4040963a62e3bb4f888213517d4bb7f2e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f70bb4040963a62e3bb4f888213517d4bb7f2e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e64911ad43c519c61d22afef7f82625dd9c4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e64911ad43c519c61d22afef7f82625dd9c4a8", "html_url": "https://github.com/rust-lang/rust/commit/46e64911ad43c519c61d22afef7f82625dd9c4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e64911ad43c519c61d22afef7f82625dd9c4a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "577ee796689e1a4108bd1dda496b292bbc7a39c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/577ee796689e1a4108bd1dda496b292bbc7a39c3", "html_url": "https://github.com/rust-lang/rust/commit/577ee796689e1a4108bd1dda496b292bbc7a39c3"}, {"sha": "637e6564511499393f30ec1c0dc03206b90f8fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/637e6564511499393f30ec1c0dc03206b90f8fe7", "html_url": "https://github.com/rust-lang/rust/commit/637e6564511499393f30ec1c0dc03206b90f8fe7"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "8f18102101d34283003ba4745ab643daf7d4f3b5", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46e64911ad43c519c61d22afef7f82625dd9c4a8/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e64911ad43c519c61d22afef7f82625dd9c4a8/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=46e64911ad43c519c61d22afef7f82625dd9c4a8", "patch": "@@ -11,7 +11,6 @@ use rustc::{bug, span_bug};\n use rustc_data_structures::sync::Lrc;\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n-use std::convert::TryFrom;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{FloatTy, LitKind};\n@@ -341,7 +340,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 };\n \n                 let result = self.lcx.tcx.const_eval(self.param_env.and(gid)).ok()?;\n-                let result = miri_to_const(self.lcx.tcx, &result);\n+                let result = miri_to_const(&result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n                 }\n@@ -466,7 +465,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     }\n }\n \n-pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'tcx>) -> Option<Constant> {\n+pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n     use rustc::mir::interpret::{ConstValue, Scalar};\n     match result.val {\n         ConstValue::Scalar(Scalar::Bits { bits: b, .. }) => match result.ty.sty {\n@@ -487,16 +486,11 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             // FIXME: implement other conversions.\n             _ => None,\n         },\n-        ConstValue::Slice(Scalar::Ptr(ptr), n) => match result.ty.sty {\n+        ConstValue::Slice { data, start, end } => match result.ty.sty {\n             ty::Ref(_, tam, _) => match tam.sty {\n-                ty::Str => {\n-                    let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                    let offset = ptr.offset.bytes().try_into().expect(\"too-large pointer offset\");\n-                    let n = usize::try_from(n).unwrap();\n-                    String::from_utf8(alloc.bytes[offset..(offset + n)].to_owned())\n-                        .ok()\n-                        .map(Constant::Str)\n-                },\n+                ty::Str => String::from_utf8(data.bytes[start..end].to_owned())\n+                    .ok()\n+                    .map(Constant::Str),\n                 _ => None,\n             },\n             _ => None,"}, {"sha": "d2931acc538bd92e2220fe4ad9677829c32a6f88", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e64911ad43c519c61d22afef7f82625dd9c4a8/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e64911ad43c519c61d22afef7f82625dd9c4a8/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=46e64911ad43c519c61d22afef7f82625dd9c4a8", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                         promoted: None,\n                     };\n                     let constant = cx.tcx.const_eval(param_env.and(c_id)).ok();\n-                    if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, &c)) {\n+                    if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n                         let mut ty = cx.tcx.type_of(def_id);\n                         if let ty::Adt(adt, _) = ty.sty {\n                             if adt.is_enum() {"}]}