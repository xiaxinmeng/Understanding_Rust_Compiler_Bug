{"sha": "51580d46f919c1f97d82aeca1ea1086c545c7484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTgwZDQ2ZjkxOWMxZjk3ZDgyYWVjYTFlYTEwODZjNTQ1Yzc0ODQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-25T23:44:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-08T09:53:09Z"}, "message": "Add tests for themes", "tree": {"sha": "9c14eccb3366b76e988077a9d12bc1724c612a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c14eccb3366b76e988077a9d12bc1724c612a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51580d46f919c1f97d82aeca1ea1086c545c7484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51580d46f919c1f97d82aeca1ea1086c545c7484", "html_url": "https://github.com/rust-lang/rust/commit/51580d46f919c1f97d82aeca1ea1086c545c7484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51580d46f919c1f97d82aeca1ea1086c545c7484/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ee1cd846b92eb3a124ec345d4889bdb5bca8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ee1cd846b92eb3a124ec345d4889bdb5bca8e3", "html_url": "https://github.com/rust-lang/rust/commit/63ee1cd846b92eb3a124ec345d4889bdb5bca8e3"}], "stats": {"total": 163, "additions": 138, "deletions": 25}, "files": [{"sha": "6c68ee18506bb14eab21aa03ff329f9d44f24454", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -258,7 +258,7 @@ impl<'a> Builder<'a> {\n                 test::HostCompiletest, test::Crate, test::CrateLibrustc, test::Rustdoc,\n                 test::Linkcheck, test::Cargotest, test::Cargo, test::Rls, test::Docs,\n                 test::ErrorIndex, test::Distcheck, test::Rustfmt, test::Miri, test::Clippy,\n-                test::RustdocJS),\n+                test::RustdocJS, test::RustdocTheme),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,"}, {"sha": "ede403491d7fcea4bc12ac3b38226c10b7c7623b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -160,4 +160,3 @@ pub fn libtest_stamp(build: &Build, compiler: Compiler, target: Interned<String>\n pub fn librustc_stamp(build: &Build, compiler: Compiler, target: Interned<String>) -> PathBuf {\n     build.cargo_out(compiler, Mode::Librustc, target).join(\".librustc-check.stamp\")\n }\n-"}, {"sha": "1c6cd066ad99e427ece65d135cedf1e297c3524a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -424,6 +424,48 @@ fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocTheme {\n+    pub compiler: Compiler,\n+    pub host: Interned<String>,\n+}\n+\n+impl Step for RustdocTheme {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustdoc-themes\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+\n+        run.builder.ensure(RustdocTheme {\n+            compiler: compiler,\n+            host: run.builder.build.build,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        let rustdoc = builder.rustdoc(self.compiler.host);\n+        let mut cmd = Command::new(builder.config.python.clone().expect(\"python not defined\"));\n+        cmd.args(&[\"src/tools/rustdoc-themes/test-themes.py\", rustdoc.to_str().unwrap()]);\n+        cmd.env(\"RUSTC_STAGE\", self.compiler.stage.to_string())\n+           .env(\"RUSTC_SYSROOT\", builder.sysroot(self.compiler))\n+           .env(\"RUSTDOC_LIBDIR\", builder.sysroot_libdir(self.compiler, self.compiler.host))\n+           .env(\"CFG_RELEASE_CHANNEL\", &builder.build.config.channel)\n+           .env(\"RUSTDOC_REAL\", builder.rustdoc(self.host))\n+           .env(\"RUSTDOC_CRATE_VERSION\", builder.build.rust_version())\n+           .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        if let Some(linker) = builder.build.linker(self.host) {\n+            cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n+        }\n+        builder.run(&mut cmd);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocJS {\n     pub host: Interned<String>,"}, {"sha": "17cf2b7349b28f723a80c1643559bc5d257dffec", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -324,13 +324,13 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let to_check = matches.opt_strs(\"theme-checker\");\n     if !to_check.is_empty() {\n-        let pathes = theme::load_css_pathes(include_bytes!(\"html/static/themes/main.css\"));\n+        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/main.css\"));\n         let mut errors = 0;\n \n         println!(\"rustdoc: [theme-checker] Starting tests!\");\n         for theme_file in to_check.iter() {\n             print!(\" - Checking \\\"{}\\\"...\", theme_file);\n-            let (success, differences) = theme::test_theme_against(theme_file, &pathes);\n+            let (success, differences) = theme::test_theme_against(theme_file, &paths);\n             if !differences.is_empty() || !success {\n                 eprintln!(\" FAILED\");\n                 errors += 1;\n@@ -401,7 +401,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let mut themes = Vec::new();\n     if matches.opt_present(\"themes\") {\n-        let pathes = theme::load_css_pathes(include_bytes!(\"html/static/themes/main.css\"));\n+        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/main.css\"));\n \n         for (theme_file, theme_s) in matches.opt_strs(\"themes\")\n                                             .iter()\n@@ -410,7 +410,7 @@ pub fn main_args(args: &[String]) -> isize {\n                 eprintln!(\"rustdoc: option --themes arguments must all be files\");\n                 return 1;\n             }\n-            let (success, ret) = theme::test_theme_against(&theme_file, &pathes);\n+            let (success, ret) = theme::test_theme_against(&theme_file, &paths);\n             if !success || !ret.is_empty() {\n                 eprintln!(\"rustdoc: invalid theme: \\\"{}\\\"\", theme_s);\n                 eprintln!(\"         Check what's wrong with the \\\"theme-checker\\\" option\");"}, {"sha": "39c9a6e2aa4005211a78ed43ba3eb0a1d10f0c21", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -170,45 +170,59 @@ fn get_useful_next(events: &[Events], pos: &mut usize) -> Option<Events> {\n fn get_previous_positions(events: &[Events], mut pos: usize) -> Vec<usize> {\n     let mut ret = Vec::with_capacity(3);\n \n-    ret.push(events[pos].get_pos() - 1);\n+    ret.push(events[pos].get_pos());\n     if pos > 0 {\n         pos -= 1;\n     }\n     loop {\n-        ret.push(events[pos].get_pos());\n         if pos < 1 || !events[pos].is_comment() {\n+            let x = events[pos].get_pos();\n+            if *ret.last().unwrap() != x {\n+                ret.push(x);\n+            } else {\n+                ret.push(0);\n+            }\n             break\n         }\n+        ret.push(events[pos].get_pos());\n         pos -= 1;\n     }\n-    if events[pos].is_comment() {\n+    if ret.len() & 1 != 0 && events[pos].is_comment() {\n         ret.push(0);\n     }\n     ret.iter().rev().cloned().collect()\n }\n \n fn build_rule(v: &[u8], positions: &[usize]) -> String {\n     positions.chunks(2)\n-             .map(|x| ::std::str::from_utf8(&v[x[0]..x[1]]).unwrap_or(\"\").to_owned())\n+             .map(|x| ::std::str::from_utf8(&v[x[0]..x[1]]).unwrap_or(\"\"))\n              .collect::<String>()\n              .trim()\n              .replace(\"\\n\", \" \")\n+             .replace(\"/\", \"\")\n+             .replace(\"\\t\", \" \")\n+             .replace(\"{\", \"\")\n+             .replace(\"}\", \"\")\n+             .split(\" \")\n+             .filter(|s| s.len() > 0)\n+             .collect::<Vec<&str>>()\n+             .join(\" \")\n }\n \n fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> HashSet<CssPath> {\n-    let mut pathes = Vec::with_capacity(50);\n+    let mut paths = Vec::with_capacity(50);\n \n     while *pos < events.len() {\n         if let Some(Events::OutBlock(_)) = get_useful_next(events, pos) {\n             *pos += 1;\n             break\n         }\n         if let Some(Events::InBlock(_)) = get_useful_next(events, pos) {\n-            pathes.push(CssPath::new(build_rule(v, &get_previous_positions(events, *pos))));\n+            paths.push(CssPath::new(build_rule(v, &get_previous_positions(events, *pos))));\n             *pos += 1;\n         }\n         while let Some(Events::InBlock(_)) = get_useful_next(events, pos) {\n-            if let Some(ref mut path) = pathes.last_mut() {\n+            if let Some(ref mut path) = paths.last_mut() {\n                 for entry in inner(v, events, pos).iter() {\n                     path.children.insert(entry.clone());\n                 }\n@@ -218,10 +232,10 @@ fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> HashSet<CssPath> {\n             *pos += 1;\n         }\n     }\n-    pathes.iter().cloned().collect()\n+    paths.iter().cloned().collect()\n }\n \n-pub fn load_css_pathes(v: &[u8]) -> CssPath {\n+pub fn load_css_paths(v: &[u8]) -> CssPath {\n     let events = load_css_events(v);\n     let mut pos = 0;\n \n@@ -264,9 +278,9 @@ pub fn test_theme_against<P: AsRef<Path>>(f: &P, against: &CssPath) -> (bool, Ve\n     let mut data = Vec::with_capacity(1000);\n \n     try_something!(file.read_to_end(&mut data), (false, Vec::new()));\n-    let pathes = load_css_pathes(&data);\n+    let paths = load_css_paths(&data);\n     let mut ret = Vec::new();\n-    get_differences(against, &pathes, &mut ret);\n+    get_differences(against, &paths, &mut ret);\n     (true, ret)\n }\n \n@@ -317,8 +331,11 @@ rule gh i {}\n rule j end {}\n \"#;\n \n-        assert!(get_differences(&load_css_pathes(against.as_bytes()),\n-                                &load_css_pathes(text.as_bytes())).is_empty());\n+        let mut ret = Vec::new();\n+        get_differences(&load_css_paths(against.as_bytes()),\n+                        &load_css_paths(text.as_bytes()),\n+                        &mut ret);\n+        assert!(ret.is_empty());\n     }\n \n     #[test]\n@@ -330,8 +347,8 @@ a\n c // sdf\n d {}\n \"#;\n-        let pathes = load_css_pathes(text.as_bytes());\n-        assert!(pathes.children.get(\"a  b c d\").is_some());\n+        let paths = load_css_paths(text.as_bytes());\n+        assert!(paths.children.get(&CssPath::new(\"a b c d\".to_owned())).is_some());\n     }\n \n     #[test]\n@@ -350,10 +367,13 @@ a {\n }\n \"#;\n \n-        let against = load_css_pathes(y.as_bytes());\n-        let other = load_css_pathes(x.as_bytes());\n+        let against = load_css_paths(y.as_bytes());\n+        let other = load_css_paths(x.as_bytes());\n \n-        assert!(get_differences(&against, &other).is_empty());\n-        assert_eq!(get_differences(&other, &against), vec![\"  Missing \\\"c\\\" rule\".to_owned()])\n+        let mut ret = Vec::new();\n+        get_differences(&against, &other, &mut ret);\n+        assert!(ret.is_empty());\n+        get_differences(&other, &against, &mut ret);\n+        assert_eq!(ret, vec![\"  Missing \\\"c\\\" rule\".to_owned()]);\n     }\n }"}, {"sha": "27756e3bef6b351342708c57b924ec4c73385b08", "filename": "src/tools/rustdoc-themes/test-themes.py", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py", "raw_url": "https://github.com/rust-lang/rust/raw/51580d46f919c1f97d82aeca1ea1086c545c7484/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py?ref=51580d46f919c1f97d82aeca1ea1086c545c7484", "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+from os import listdir\n+from os.path import isfile, join\n+import subprocess\n+import sys\n+\n+FILES_TO_IGNORE = ['main.css']\n+THEME_DIR_PATH = \"src/librustdoc/html/static/themes\"\n+\n+\n+def print_err(msg):\n+    sys.stderr.write('{}\\n'.format(msg))\n+\n+\n+def exec_command(command):\n+    child = subprocess.Popen(command)\n+    stdout, stderr = child.communicate()\n+    return child.returncode\n+\n+\n+def main(argv):\n+    if len(argv) < 1:\n+        print_err(\"Needs rustdoc binary path\")\n+        return 1\n+    rustdoc_bin = argv[0]\n+    themes = [join(THEME_DIR_PATH, f) for f in listdir(THEME_DIR_PATH)\n+              if isfile(join(THEME_DIR_PATH, f)) and f not in FILES_TO_IGNORE]\n+    if len(themes) < 1:\n+        print_err('No theme found in \"{}\"...'.format(THEME_DIR_PATH))\n+        return 1\n+    args = [rustdoc_bin, '-Z', 'unstable-options', '--theme-checker']\n+    args.extend(themes)\n+    return exec_command(args)\n+\n+\n+if __name__ != '__main__':\n+    print_err(\"Needs to be run as main\")\n+    sys.exit(1)\n+else:\n+    sys.exit(main(sys.argv[1:]))"}]}