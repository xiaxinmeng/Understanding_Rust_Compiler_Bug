{"sha": "f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZWI5Y2M2ZTY2YTY1ZDJkZjQyYzY2MjQ5OWViZDc3ZWE5ODBkZTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:49:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:49:44Z"}, "message": "Remove last traces of nameres from hir", "tree": {"sha": "7673a9cc57111683c4f679e5bb8c2bd1c1b5378c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7673a9cc57111683c4f679e5bb8c2bd1c1b5378c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "html_url": "https://github.com/rust-lang/rust/commit/f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "url": "https://api.github.com/repos/rust-lang/rust/commits/73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "html_url": "https://github.com/rust-lang/rust/commit/73fcf9a2d6ae14afa4e822370c0a46bf1d336081"}], "stats": {"total": 126, "additions": 59, "deletions": 67}, "files": [{"sha": "181c5d47afebd559a1c83dc071702331887fc3f9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -28,11 +28,10 @@ use crate::{\n         TypeAliasId,\n     },\n     impl_block::ImplBlock,\n-    nameres::{ImportId, Namespace},\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n     ty::{InferenceResult, TraitRef},\n-    Either, HasSource, Name, ScopeDef, Ty,\n+    Either, HasSource, Name, ScopeDef, Ty, {ImportId, Namespace},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which"}, {"sha": "eb66325f7f12624f32ba8650306386125424b0f4", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -11,14 +11,13 @@ use crate::{\n     ids,\n     impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::Namespace,\n     traits::TraitData,\n     ty::{\n         method_resolution::CrateImplBlocks, traits::Impl, CallableDef, FnSig, GenericPredicate,\n         InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Static,\n+    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Namespace, Static,\n     StructField, Trait, TypeAlias,\n };\n "}, {"sha": "3ba99d92d70313671925d31696b150e9bd90dd7d", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -34,7 +34,6 @@ pub mod mock;\n pub mod source_binder;\n \n mod ids;\n-mod nameres;\n mod adt;\n mod traits;\n mod type_alias;\n@@ -73,7 +72,6 @@ pub use crate::{\n     generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n-    nameres::{ImportId, Namespace, PerNs},\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n@@ -83,6 +81,10 @@ pub use crate::{\n \n pub use hir_def::{\n     builtin_type::BuiltinType,\n+    nameres::{\n+        per_ns::{Namespace, PerNs},\n+        raw::ImportId,\n+    },\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "875addc84a5e3b8020e423fca9bd9a1d2126f382", "filename": "crates/ra_hir/src/nameres.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -1,53 +0,0 @@\n-//! This module implements import-resolution/macro expansion algorithm.\n-//!\n-//! The result of this module is `CrateDefMap`: a data structure which contains:\n-//!\n-//!   * a tree of modules for the crate\n-//!   * for each module, a set of items visible in the module (directly declared\n-//!     or imported)\n-//!\n-//! Note that `CrateDefMap` contains fully macro expanded code.\n-//!\n-//! Computing `CrateDefMap` can be partitioned into several logically\n-//! independent \"phases\". The phases are mutually recursive though, there's no\n-//! strict ordering.\n-//!\n-//! ## Collecting RawItems\n-//!\n-//!  This happens in the `raw` module, which parses a single source file into a\n-//!  set of top-level items. Nested imports are desugared to flat imports in\n-//!  this phase. Macro calls are represented as a triple of (Path, Option<Name>,\n-//!  TokenTree).\n-//!\n-//! ## Collecting Modules\n-//!\n-//! This happens in the `collector` module. In this phase, we recursively walk\n-//! tree of modules, collect raw items from submodules, populate module scopes\n-//! with defined items (so, we assign item ids in this phase) and record the set\n-//! of unresolved imports and macros.\n-//!\n-//! While we walk tree of modules, we also record macro_rules definitions and\n-//! expand calls to macro_rules defined macros.\n-//!\n-//! ## Resolving Imports\n-//!\n-//! We maintain a list of currently unresolved imports. On every iteration, we\n-//! try to resolve some imports from this list. If the import is resolved, we\n-//! record it, by adding an item to current module scope and, if necessary, by\n-//! recursively populating glob imports.\n-//!\n-//! ## Resolving Macros\n-//!\n-//! macro_rules from the same crate use a global mutable namespace. We expand\n-//! them immediately, when we collect modules.\n-//!\n-//! Macros from other crates (including proc-macros) can be used with\n-//! `foo::bar!` syntax. We handle them similarly to imports. There's a list of\n-//! unexpanded macros. On every iteration, we try to resolve each macro call\n-//! path and, upon success, we run macro expansion and \"collect module\" phase\n-//! on the result\n-\n-pub use hir_def::nameres::{\n-    per_ns::{Namespace, PerNs},\n-    raw::ImportId,\n-};"}, {"sha": "b932b0c8cdbca0000a12172da3c3cb978fe9995c", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -19,8 +19,8 @@ use crate::{\n     },\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    nameres::PerNs,\n-    Adt, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct, Trait, TypeAlias,\n+    Adt, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, PerNs, Static, Struct, Trait,\n+    TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]"}, {"sha": "a09ef5c5d3afc09247f635dfdd577872eb9ec1ae", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -11,12 +11,11 @@ use crate::{\n     db::HirDatabase,\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n-    nameres::Namespace,\n     ty::{\n         autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Obligation,\n         ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n-    Adt, Name,\n+    Adt, Name, Namespace,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {"}, {"sha": "e29ab8492a5eed2a5bc107d34f76072661196229", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -23,15 +23,14 @@ use crate::{\n     db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n-    nameres::Namespace,\n     resolve::{Resolver, TypeNs},\n     ty::{\n         primitive::{FloatTy, IntTy},\n         Adt,\n     },\n     util::make_mut_slice,\n-    Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField, Trait,\n-    TypeAlias, Union,\n+    Const, Enum, EnumVariant, Function, ModuleDef, Namespace, Path, Static, Struct, StructField,\n+    Trait, TypeAlias, Union,\n };\n \n impl Ty {"}, {"sha": "fbd4248e6a7495123b69bc8c79614882a5828be6", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eb9cc6e66a65d2df42c662499ebd77ea980de5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=f0eb9cc6e66a65d2df42c662499ebd77ea980de5", "patch": "@@ -1,4 +1,51 @@\n-//! FIXME: write short doc here\n+//! This module implements import-resolution/macro expansion algorithm.\n+//!\n+//! The result of this module is `CrateDefMap`: a data structure which contains:\n+//!\n+//!   * a tree of modules for the crate\n+//!   * for each module, a set of items visible in the module (directly declared\n+//!     or imported)\n+//!\n+//! Note that `CrateDefMap` contains fully macro expanded code.\n+//!\n+//! Computing `CrateDefMap` can be partitioned into several logically\n+//! independent \"phases\". The phases are mutually recursive though, there's no\n+//! strict ordering.\n+//!\n+//! ## Collecting RawItems\n+//!\n+//!  This happens in the `raw` module, which parses a single source file into a\n+//!  set of top-level items. Nested imports are desugared to flat imports in\n+//!  this phase. Macro calls are represented as a triple of (Path, Option<Name>,\n+//!  TokenTree).\n+//!\n+//! ## Collecting Modules\n+//!\n+//! This happens in the `collector` module. In this phase, we recursively walk\n+//! tree of modules, collect raw items from submodules, populate module scopes\n+//! with defined items (so, we assign item ids in this phase) and record the set\n+//! of unresolved imports and macros.\n+//!\n+//! While we walk tree of modules, we also record macro_rules definitions and\n+//! expand calls to macro_rules defined macros.\n+//!\n+//! ## Resolving Imports\n+//!\n+//! We maintain a list of currently unresolved imports. On every iteration, we\n+//! try to resolve some imports from this list. If the import is resolved, we\n+//! record it, by adding an item to current module scope and, if necessary, by\n+//! recursively populating glob imports.\n+//!\n+//! ## Resolving Macros\n+//!\n+//! macro_rules from the same crate use a global mutable namespace. We expand\n+//! them immediately, when we collect modules.\n+//!\n+//! Macros from other crates (including proc-macros) can be used with\n+//! `foo::bar!` syntax. We handle them similarly to imports. There's a list of\n+//! unexpanded macros. On every iteration, we try to resolve each macro call\n+//! path and, upon success, we run macro expansion and \"collect module\" phase\n+//! on the result\n \n // FIXME: review privacy of submodules\n pub mod raw;"}]}