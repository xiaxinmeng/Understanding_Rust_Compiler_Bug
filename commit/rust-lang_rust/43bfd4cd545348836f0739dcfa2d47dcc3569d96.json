{"sha": "43bfd4cd545348836f0739dcfa2d47dcc3569d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYmZkNGNkNTQ1MzQ4ODM2ZjA3MzlkY2ZhMmQ0N2RjYzM1NjlkOTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T13:00:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T13:00:49Z"}, "message": "Fix some nits", "tree": {"sha": "c8004f934a081c53e6ec0edd705d4d6653bd18ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8004f934a081c53e6ec0edd705d4d6653bd18ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bfd4cd545348836f0739dcfa2d47dcc3569d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bfd4cd545348836f0739dcfa2d47dcc3569d96", "html_url": "https://github.com/rust-lang/rust/commit/43bfd4cd545348836f0739dcfa2d47dcc3569d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bfd4cd545348836f0739dcfa2d47dcc3569d96/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "html_url": "https://github.com/rust-lang/rust/commit/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "06c3dae68e338b4b64b44df372a8ec296eb6506f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43bfd4cd545348836f0739dcfa2d47dcc3569d96/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bfd4cd545348836f0739dcfa2d47dcc3569d96/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=43bfd4cd545348836f0739dcfa2d47dcc3569d96", "patch": "@@ -275,7 +275,11 @@ pub fn compile_input(sess: &Session,\n                             phase5_result);\n     phase5_result?;\n \n-    phase_6_link_output::<DefaultTransCrate>(sess, &trans, &outputs);\n+    // Run the linker on any artifacts that resulted from the LLVM run.\n+    // This should produce either a finished executable or library.\n+    time(sess.time_passes(), \"linking\", || {\n+        DefaultTransCrate::link_binary(sess, &trans, &outputs)\n+    });\n \n     // Now that we won't touch anything in the incremental compilation directory\n     // any more, we can finalize it (which involves renaming it)\n@@ -1112,9 +1116,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm<'a, 'tcx, T: TransCrate>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn phase_4_translate_to_llvm<'a, 'tcx, Trans: TransCrate>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            rx: mpsc::Receiver<Box<Any + Send>>)\n-                                           -> <T as TransCrate>::OngoingCrateTranslation {\n+                                           -> <Trans as TransCrate>::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes,\n@@ -1123,7 +1127,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx, T: TransCrate>(tcx: TyCtxt<'a, 'tcx,\n \n     let translation =\n         time(time_passes, \"translation\", move || {\n-            T::trans_crate(tcx, rx)\n+            Trans::trans_crate(tcx, rx)\n         });\n     if tcx.sess.profile_queries() {\n         profile::dump(\"profile_queries\".to_string())\n@@ -1134,14 +1138,14 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx, T: TransCrate>(tcx: TyCtxt<'a, 'tcx,\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n-pub fn phase_5_run_llvm_passes<T: TransCrate>(sess: &Session,\n+pub fn phase_5_run_llvm_passes<Trans: TransCrate>(sess: &Session,\n                                dep_graph: &DepGraph,\n-                               trans: <T as TransCrate>::OngoingCrateTranslation)\n-                               -> (CompileResult, <T as TransCrate>::TranslatedCrate) {\n-    let trans = T::join_trans(trans, sess, dep_graph);\n+                               trans: <Trans as TransCrate>::OngoingCrateTranslation)\n+                               -> (CompileResult, <Trans as TransCrate>::TranslatedCrate) {\n+    let trans = Trans::join_trans(trans, sess, dep_graph);\n \n     if sess.opts.debugging_opts.incremental_info {\n-        T::dump_incremental_data(&trans);\n+        Trans::dump_incremental_data(&trans);\n     }\n \n     time(sess.time_passes(),\n@@ -1151,16 +1155,6 @@ pub fn phase_5_run_llvm_passes<T: TransCrate>(sess: &Session,\n     (sess.compile_status(), trans)\n }\n \n-/// Run the linker on any artifacts that resulted from the LLVM run.\n-/// This should produce either a finished executable or library.\n-pub fn phase_6_link_output<T: TransCrate>(sess: &Session,\n-                           trans: &<T as TransCrate>::TranslatedCrate,\n-                           outputs: &OutputFilenames) {\n-    time(sess.time_passes(), \"linking\", || {\n-        T::link_binary(sess, trans, outputs)\n-    });\n-}\n-\n fn escape_dep_filename(filename: &str) -> String {\n     // Apparently clang and gcc *only* escape spaces:\n     // http://llvm.org/klaus/clang/commit/9d50634cfc268ecc9a7250226dd5ca0e945240d4"}, {"sha": "1a03d95ebaa79faf24d04c7b72c4876630d4da53", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43bfd4cd545348836f0739dcfa2d47dcc3569d96/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bfd4cd545348836f0739dcfa2d47dcc3569d96/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=43bfd4cd545348836f0739dcfa2d47dcc3569d96", "patch": "@@ -153,7 +153,6 @@ impl MetadataLoaderTrait for NoLlvmMetadataLoader {\n     }\n }\n \n-#[allow(dead_code)]\n pub struct MetadataOnlyTransCrate;\n pub struct OngoingCrateTranslation {\n     metadata: EncodedMetadata,"}]}