{"sha": "3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzVkODFhMzNjOThkYTJhNWI0NTBjODE3YzA5ZjVhNDFiMDNlOTg=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T15:25:41Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T15:25:41Z"}, "message": "Make relevance tests display references, suggest derefs only when needed", "tree": {"sha": "f7cfc356e6f14673eaee0096bb1d63ab2a8298b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cfc356e6f14673eaee0096bb1d63ab2a8298b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBM2XUACgkQ2MS9WuTZ\nzE3fVwgAqp1k8usPMcTBUAVJHn3XViwQ2A0St7PVV5juwiQm76K97yiD4/kqX30R\nmRc2CJMDJzh7QqixVOHuE8GYP+Xy+mIGK/Y5QXnuVr8fv6QQilbNkJQgTrT7rejm\nhQAWzCfI0ULob5bbPovelpd6NWdUPstcy9pV8EgXMozYS/YdnrELupu0jPTyE7N+\nBOltgBttOeyd9R65ebssfwviY7reAS5wi2ehUf9oV0YZYBcBd7ly2VjQ3a8utMWe\nIOtNOn5rszaSdju7gNdrp//x1QFHvkPkmZQCtqGvdeGnvlJ3/a5Ofk8kmXnJX4r1\nfvEdmnSp+WqimG+I4zmFJGmaVUxw3A==\n=y859\n-----END PGP SIGNATURE-----", "payload": "tree f7cfc356e6f14673eaee0096bb1d63ab2a8298b5\nparent 75cb441fba111bed153f519f1f2906843360cfc7\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615649141 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615649141 +0200\n\nMake relevance tests display references, suggest derefs only when needed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "html_url": "https://github.com/rust-lang/rust/commit/3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc5d81a33c98da2a5b450c817c09f5a41b03e98/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75cb441fba111bed153f519f1f2906843360cfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cb441fba111bed153f519f1f2906843360cfc7", "html_url": "https://github.com/rust-lang/rust/commit/75cb441fba111bed153f519f1f2906843360cfc7"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "1f4a8173ae2d4811df4f2cd5b980bbc1c1a94487", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 83, "deletions": 15, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3bc5d81a33c98da2a5b450c817c09f5a41b03e98/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc5d81a33c98da2a5b450c817c09f5a41b03e98/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "patch": "@@ -253,12 +253,14 @@ impl<'a> Render<'a> {\n \n         if let ScopeDef::Local(local) = resolution {\n             let ty = local.ty(self.ctx.db());\n+\n             if let Some(relevance) = compute_relevance(&self.ctx, &ty, &local_name) {\n                 item.set_relevance(relevance);\n             }\n+\n             if let Some((_expected_name, expected_type)) = self.ctx.expected_name_and_type() {\n                 if let Some(ty_without_ref) = expected_type.remove_ref() {\n-                    if ty_without_ref == ty {\n+                    if relevance_type_match(self.ctx.db().upcast(), &ty, &ty_without_ref) {\n                         cov_mark::hit!(suggest_ref);\n                         let mutability = if expected_type.is_mutable_reference() {\n                             Mutability::Mut\n@@ -327,25 +329,21 @@ impl<'a> Render<'a> {\n fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> Option<CompletionRelevance> {\n     let (expected_name, expected_type) = ctx.expected_name_and_type()?;\n     let mut res = CompletionRelevance::default();\n-    res.exact_type_match = relevance_type_match(ctx.db().upcast(), ty, expected_type);\n+    res.exact_type_match = ty == &expected_type;\n     res.exact_name_match = name == &expected_name;\n     Some(res)\n }\n \n-fn relevance_type_match(db: &dyn HirDatabase, ty: &Type, expected_type: Type) -> bool {\n-    if ty == &expected_type {\n-        return true;\n-    }\n-\n-    let ty_without_ref = expected_type.remove_ref().unwrap_or(expected_type);\n-    ty.autoderef(db).any(|deref_ty| deref_ty == ty_without_ref)\n+fn relevance_type_match(db: &dyn HirDatabase, ty: &Type, expected_type: &Type) -> bool {\n+    ty == expected_type || ty.autoderef(db).any(|deref_ty| &deref_ty == expected_type)\n }\n \n #[cfg(test)]\n mod tests {\n     use std::cmp::Reverse;\n \n     use expect_test::{expect, Expect};\n+    use hir::Mutability;\n \n     use crate::{\n         test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n@@ -369,15 +367,31 @@ mod tests {\n             }\n         }\n \n+        fn display_label(label: &str, mutability: Option<Mutability>) -> String {\n+            let mutability_label = match mutability {\n+                Some(Mutability::Shared) => \"&\",\n+                Some(Mutability::Mut) => \"&mut \",\n+                None => \"\",\n+            };\n+\n+            format!(\"{}{}\", mutability_label, label)\n+        }\n+\n         let mut completions = get_all_items(TEST_CONFIG, ra_fixture);\n-        completions.sort_by_key(|it| (Reverse(it.relevance()), it.label().to_string()));\n+        completions.sort_by_key(|it| {\n+            (Reverse(it.ref_match().map(|m| m.1).unwrap_or(it.relevance())), it.label().to_string())\n+        });\n         let actual = completions\n             .into_iter()\n             .filter(|it| it.completion_kind == CompletionKind::Reference)\n             .map(|it| {\n                 let tag = it.kind().unwrap().tag();\n-                let relevance = display_relevance(it.relevance());\n-                format!(\"{} {} {}\\n\", tag, it.label(), relevance)\n+                let (mutability, relevance) = it\n+                    .ref_match()\n+                    .map(|(mutability, relevance)| (Some(mutability), relevance))\n+                    .unwrap_or((None, it.relevance()));\n+                let relevance = display_relevance(relevance);\n+                format!(\"{} {} {}\\n\", tag, display_label(it.label(), mutability), relevance)\n             })\n             .collect::<String>();\n         expect.assert_eq(&actual);\n@@ -911,7 +925,7 @@ struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n-                lc world [type+name]\n+                lc &world [type+name]\n                 st WorldSnapshot []\n                 fn go(\u2026) []\n             \"#]],\n@@ -990,7 +1004,7 @@ fn main() {\n                         detail: \"S\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: true,\n-                            exact_type_match: true,\n+                            exact_type_match: false,\n                         },\n                         ref_match: \"&mut \",\n                     },\n@@ -1030,8 +1044,62 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n-                lc t [type]\n+                lc &t [type]\n+                tt Deref []\n+                st S []\n+                st T []\n+                fn foo(\u2026) []\n+                lc m []\n+                fn main() []\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn suggest_deref_mut() {\n+        check_relevance(\n+            r#\"\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[lang = \"deref_mut\"]\n+pub trait DerefMut: Deref {\n+    fn deref_mut(&mut self) -> &mut Self::Target;\n+}\n+\n+struct S;\n+struct T(S);\n+\n+impl Deref for T {\n+    type Target = S;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+impl DerefMut for T {\n+    fn deref_mut(&self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+\n+fn foo(s: &mut S) {}\n+\n+fn main() {\n+    let t = T(S);\n+    let m = 123;\n+\n+    foo($0);\n+}\n+            \"#,\n+            expect![[r#\"\n+                lc &mut t [type]\n                 tt Deref []\n+                tt DerefMut []\n                 st S []\n                 st T []\n                 fn foo(\u2026) []"}, {"sha": "1a8cdadad0084d6c91ca2c9401a888dd4b300a72", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc5d81a33c98da2a5b450c817c09f5a41b03e98/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc5d81a33c98da2a5b450c817c09f5a41b03e98/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3bc5d81a33c98da2a5b450c817c09f5a41b03e98", "patch": "@@ -1123,7 +1123,7 @@ mod tests {\n                 (\n                     \"arg\",\n                     Some(\n-                        \"fffffffd\",\n+                        \"fffffffe\",\n                     ),\n                 ),\n             ]"}]}