{"sha": "ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNGY2YTEyNTg5MWIzNDc0ZmFjMWNmZDJlODY3ODRkNGVjMDczYTk=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-21T18:44:12Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-12-18T10:31:35Z"}, "message": "record previous unresolve span for generator error reporting", "tree": {"sha": "6735051ae63b52e6373bd14fe00137d7603b8f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6735051ae63b52e6373bd14fe00137d7603b8f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "html_url": "https://github.com/rust-lang/rust/commit/ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4f6a125891b3474fac1cfd2e86784d4ec073a9/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "html_url": "https://github.com/rust-lang/rust/commit/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "2cffcc5bfade8a72175bc91d2322093e6bb33b4c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff4f6a125891b3474fac1cfd2e86784d4ec073a9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4f6a125891b3474fac1cfd2e86784d4ec073a9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "patch": "@@ -1857,22 +1857,16 @@ impl fmt::Display for YieldSource {\n     }\n }\n \n-impl core::convert::From<GeneratorKind> for YieldSource {\n-    fn from(gen_kind: GeneratorKind) -> Self {\n-        match gen_kind {\n+impl From<GeneratorKind> for YieldSource {\n+    fn from(kind: GeneratorKind) -> Self {\n+        match kind {\n             // Guess based on the kind of the current generator.\n             GeneratorKind::Gen => Self::Yield,\n             GeneratorKind::Async(_) => Self::Await,\n         }\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum CaptureClause {\n-    CaptureByValue,\n-    CaptureByRef,\n-}\n-\n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "607efca88dd704379a3d35f3ad2155569d055050", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff4f6a125891b3474fac1cfd2e86784d4ec073a9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4f6a125891b3474fac1cfd2e86784d4ec073a9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "patch": "@@ -19,6 +19,7 @@ struct InteriorVisitor<'a, 'tcx> {\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n     kind: hir::GeneratorKind,\n+    prev_unresolved_span: Option<Span>,\n }\n \n impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n@@ -69,9 +70,12 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                    yield_data.source);\n \n                 // If unresolved type isn't a ty_var then unresolved_type_span is None\n+                let span = self.prev_unresolved_span.unwrap_or_else(\n+                    || unresolved_type_span.unwrap_or(source_span)\n+                );\n                 self.fcx.need_type_info_err_in_generator(\n                     self.kind,\n-                    unresolved_type_span.unwrap_or(source_span),\n+                    span,\n                     unresolved_type,\n                 )\n                     .span_note(yield_data.span, &*note)\n@@ -90,9 +94,11 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             debug!(\"no type in expr = {:?}, count = {:?}, span = {:?}\",\n                    expr, self.expr_count, expr.map(|e| e.span));\n             let ty = self.fcx.resolve_vars_if_possible(&ty);\n-            if let Some((unresolved_type, unresolved_type_span)) = self.fcx.unresolved_type_vars(&ty) {\n+            if let Some((unresolved_type, unresolved_type_span))\n+                = self.fcx.unresolved_type_vars(&ty) {\n                 debug!(\"remained unresolved_type = {:?}, unresolved_type_span: {:?}\",\n                     unresolved_type, unresolved_type_span);\n+                self.prev_unresolved_span = unresolved_type_span;\n             }\n         }\n     }\n@@ -112,6 +118,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n         kind,\n+        prev_unresolved_span: None,\n     };\n     intravisit::walk_body(&mut visitor, body);\n "}]}