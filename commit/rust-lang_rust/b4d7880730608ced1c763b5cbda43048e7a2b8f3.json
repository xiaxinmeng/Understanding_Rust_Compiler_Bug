{"sha": "b4d7880730608ced1c763b5cbda43048e7a2b8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDc4ODA3MzA2MDhjZWQxYzc2M2I1Y2JkYTQzMDQ4ZTdhMmI4ZjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-25T17:08:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-25T17:08:03Z"}, "message": "Merge pull request #954 from oli-obk/ininneffective_unsafe_block\n\nfix no_effect lint", "tree": {"sha": "07eaf226d0e3be8fba8dd5b4dc89f2c4ad4cf620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07eaf226d0e3be8fba8dd5b4dc89f2c4ad4cf620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d7880730608ced1c763b5cbda43048e7a2b8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7880730608ced1c763b5cbda43048e7a2b8f3", "html_url": "https://github.com/rust-lang/rust/commit/b4d7880730608ced1c763b5cbda43048e7a2b8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7880730608ced1c763b5cbda43048e7a2b8f3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ed8999418828f05bd48a5dee9b3b2daa3be441", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ed8999418828f05bd48a5dee9b3b2daa3be441", "html_url": "https://github.com/rust-lang/rust/commit/77ed8999418828f05bd48a5dee9b3b2daa3be441"}, {"sha": "bb69e60b3088f5db72e359c19271b8561e882a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb69e60b3088f5db72e359c19271b8561e882a39", "html_url": "https://github.com/rust-lang/rust/commit/bb69e60b3088f5db72e359c19271b8561e882a39"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "ae3bac0045518dca45409346edf1f7b962ae5442", "filename": "src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4d7880730608ced1c763b5cbda43048e7a2b8f3/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d7880730608ced1c763b5cbda43048e7a2b8f3/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=b4d7880730608ced1c763b5cbda43048e7a2b8f3", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::def::{Def, PathResolution};\n-use rustc::hir::{Expr, Expr_, Stmt, StmtSemi};\n+use rustc::hir::{Expr, Expr_, Stmt, StmtSemi, BlockCheckMode, UnsafeSource};\n use utils::{in_macro, span_lint, snippet_opt, span_lint_and_then};\n use std::ops::Deref;\n \n@@ -140,11 +140,11 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         }\n         Expr_::ExprBlock(ref block) => {\n             if block.stmts.is_empty() {\n-                block.expr.as_ref().and_then(|e| if e.span == expr.span {\n+                block.expr.as_ref().and_then(|e| match block.rules {\n+                    BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) => None,\n+                    BlockCheckMode::DefaultBlock => Some(vec![&**e]),\n                     // in case of compiler-inserted signaling blocks\n-                    reduce_expression(cx, e)\n-                } else {\n-                    Some(vec![e])\n+                    _ => reduce_expression(cx, e),\n                 })\n             } else {\n                 None"}, {"sha": "c1d9b1754284cf72bbb98713a796e80c484ccae6", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4d7880730608ced1c763b5cbda43048e7a2b8f3/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d7880730608ced1c763b5cbda43048e7a2b8f3/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=b4d7880730608ced1c763b5cbda43048e7a2b8f3", "patch": "@@ -18,6 +18,8 @@ enum Enum {\n fn get_number() -> i32 { 0 }\n fn get_struct() -> Struct { Struct { field: 0 } }\n \n+unsafe fn unsafe_fn() -> i32 { 0 }\n+\n fn main() {\n     let s = get_struct();\n     let s2 = get_struct();\n@@ -50,6 +52,7 @@ fn main() {\n \n     // Do not warn\n     get_number();\n+    unsafe { unsafe_fn() };\n \n     Tuple(get_number()); //~ERROR statement can be reduced\n     //~^HELP replace it with\n@@ -105,4 +108,7 @@ fn main() {\n     [42; 55][get_number() as usize]; //~ERROR statement can be reduced\n     //~^HELP replace it with\n     //~|SUGGESTION [42; 55];get_number() as usize;\n+    {get_number()}; //~ERROR statement can be reduced\n+    //~^HELP replace it with\n+    //~|SUGGESTION get_number();\n }"}]}