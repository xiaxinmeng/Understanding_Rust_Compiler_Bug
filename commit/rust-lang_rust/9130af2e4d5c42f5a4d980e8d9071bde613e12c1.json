{"sha": "9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "node_id": "C_kwDOAAsO6NoAKDkxMzBhZjJlNGQ1YzQyZjVhNGQ5ODBlOGQ5MDcxYmRlNjEzZTEyYzE", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-12T11:18:21Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-12T11:23:53Z"}, "message": "change docs on `Res::SelfTy`", "tree": {"sha": "fb32013011ab7c2ca1fb519899243c1975a22e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb32013011ab7c2ca1fb519899243c1975a22e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "html_url": "https://github.com/rust-lang/rust/commit/9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9130af2e4d5c42f5a4d980e8d9071bde613e12c1/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81e09a24e5e1862969aef9ba3a9e71519259eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81e09a24e5e1862969aef9ba3a9e71519259eb8", "html_url": "https://github.com/rust-lang/rust/commit/e81e09a24e5e1862969aef9ba3a9e71519259eb8"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "9f58693cf05298f17fab59f24a6757aec24c2949", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9130af2e4d5c42f5a4d980e8d9071bde613e12c1/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130af2e4d5c42f5a4d980e8d9071bde613e12c1/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "patch": "@@ -266,57 +266,65 @@ pub enum Res<Id = hir::HirId> {\n     ///\n     /// **Belongs to the type namespace.**\n     PrimTy(hir::PrimTy),\n-    /// The `Self` type, optionally with the trait it is associated with\n-    /// and optionally with the [`DefId`] of the impl it is associated with.\n+    /// The `Self` type, optionally with the [`DefId`] of the trait it belongs to and\n+    /// optionally with the [`DefId`] of the item introducing the `Self` type alias.\n     ///\n     /// **Belongs to the type namespace.**\n     ///\n-    /// For example, the `Self` in\n-    ///\n+    /// Examples:\n     /// ```\n+    /// struct Bar(Box<Self>);\n+    /// // `Res::SelfTy { trait_: None, alias_of: Some(Bar) }`\n+    /// \n     /// trait Foo {\n     ///     fn foo() -> Box<Self>;\n+    ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: None }`\n     /// }\n-    /// ```\n-    ///\n-    /// would have the [`DefId`] of `Foo` associated with it. The `Self` in\n-    ///\n-    /// ```\n-    /// struct Bar;\n-    ///\n+    /// \n     /// impl Bar {\n-    ///     fn new() -> Self { Bar }\n+    ///     fn blah() {\n+    ///         let _: Self;\n+    ///         // `Res::SelfTy { trait_: None, alias_of: Some(::{impl#0}) }`\n+    ///     }\n     /// }\n-    /// ```\n-    ///\n-    /// would have the [`DefId`] of the impl associated with it. Finally, the `Self` in\n-    ///\n-    /// ```\n+    /// \n     /// impl Foo for Bar {\n-    ///     fn foo() -> Box<Self> { Box::new(Bar) }\n+    ///     fn foo() -> Box<Self> {\n+    ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n+    ///         let _: Self;\n+    ///         // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n+    /// \n+    ///         todo!()\n+    ///     }\n     /// }\n     /// ```\n     ///\n-    /// would have both the [`DefId`] of `Foo` and the [`DefId`] of the impl\n-    /// associated with it.\n-    ///\n     /// *See also [`Res::SelfCtor`].*\n     ///\n     /// -----\n     ///\n-    /// HACK(min_const_generics): impl self types also have an optional requirement to **not** mention\n+    /// HACK(min_const_generics): self types also have an optional requirement to **not** mention\n     /// any generic parameters to allow the following with `min_const_generics`:\n     /// ```\n     /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] { todo!() } }\n+    /// \n+    /// struct Bar([u8; baz::<Self>()]);\n+    /// const fn baz<T>() -> usize { 10 }\n     /// ```\n     /// We do however allow `Self` in repeat expression even if it is generic to not break code\n-    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint.\n-    ///\n-    /// FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n+    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint:\n+    /// ```\n+    /// fn foo<T>() {\n+    ///     let _bar = [1_u8; std::mem::size_of::<*mut T>()];\n+    /// }\n+    /// ```\n+    // FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n     SelfTy {\n-        /// Optionally, the trait associated with this `Self` type.\n+        /// The trait this `Self` is a generic arg for.\n         trait_: Option<DefId>,\n-        /// Optionally, the impl or adt associated with this `Self` type.\n+        /// The item introducing the `Self` type alias. Can be used in the `type_of` query\n+        /// to get the underlying type. Additionally whether the `Self` type is disallowed \n+        /// from mentioning generics (i.e. when used in an anonymous constant).\n         alias_to: Option<(DefId, bool)>,\n     },\n     /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`."}]}