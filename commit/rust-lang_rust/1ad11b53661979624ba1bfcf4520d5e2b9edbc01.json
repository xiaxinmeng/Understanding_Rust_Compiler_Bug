{"sha": "1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "node_id": "C_kwDOAAsO6NoAKDFhZDExYjUzNjYxOTc5NjI0YmExYmZjZjQ1MjBkNWUyYjllZGJjMDE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-16T10:54:07Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-16T11:01:55Z"}, "message": "fix: resolve inference variable before applying adjustments", "tree": {"sha": "041c23d43510e8b901544690ce4fd054c567029c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041c23d43510e8b901544690ce4fd054c567029c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmN0wyMACgkQ4laYqTBY\nYXGrMBAAlhSLxATMbpHWJEbm8zLOhQn9vDCV0T72foWKwAGxqDF5LulAxhPyWzbp\nzAibNnlRPMJpypjrSnyYJNatANYOOiCRc6MI7ztwZoDldSXDly+MAN0YdtN+NGgr\n5AJz8m8WRiYXKBPthmFKx4HEZ4LQB+bWKyZMc0TQ5LpyFLyzbsVCoYqyfxx0d8rJ\nWi/I3xSM5BvO8HLQta7j67r7N7nv5NrGopzOOpVkvDgG84DWQPlvzu4r+6dOTOuS\nyhFJjUNDpdyyrEMNz7lU2BUPemMh67M2iIl4QhjKVA1uAZhx1ppPNx9VyuSJQjfH\nX2ynhhpstU1iw+QDxIgJYob9ghoxv77Hnj54C7Tw4YcM8sHUxTOp1XMfM4Hwa10o\nFCJ5jEeM/hSLgj/DlKvgO876kW0ZlL7D7/ypZ5WI6Off9UZf7/jFlsiRx0A2FhCy\n78Kg4p+qN8QOEKyvA+OWqq877ZKXWw5okQtJr4/UaPsx6nXWbY/SNiENBBsnVMIj\njhqUe4p7pVOmvG+TJQeo4z4oT984Qb5Ts6d7kg8b4FvcNyeHTENPfbFYLwh3Ll8f\nbwalVwWDu9iKQXfjFRCB9y0j0+MrGd6Vj9s19d71FKBF3lkpcqtiJsVo2qC8JjYI\ndHVAq2Nby10/shjDlofjXbhgAQKwHBDCCgLtQhnVRl8fe52Y/u0=\n=GWh6\n-----END PGP SIGNATURE-----", "payload": "tree 041c23d43510e8b901544690ce4fd054c567029c\nparent 0dd0dfb7dfe723bbfa81197c23d73c9bdc4022c1\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1668596047 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1668596515 +0900\n\nfix: resolve inference variable before applying adjustments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "html_url": "https://github.com/rust-lang/rust/commit/1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad11b53661979624ba1bfcf4520d5e2b9edbc01/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd0dfb7dfe723bbfa81197c23d73c9bdc4022c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd0dfb7dfe723bbfa81197c23d73c9bdc4022c1", "html_url": "https://github.com/rust-lang/rust/commit/0dd0dfb7dfe723bbfa81197c23d73c9bdc4022c1"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "20bed7bf3cc4743b37b2dc7195cb62a3a19742bf", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad11b53661979624ba1bfcf4520d5e2b9edbc01/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad11b53661979624ba1bfcf4520d5e2b9edbc01/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "patch": "@@ -541,7 +541,7 @@ pub struct ReceiverAdjustments {\n \n impl ReceiverAdjustments {\n     pub(crate) fn apply(&self, table: &mut InferenceTable<'_>, ty: Ty) -> (Ty, Vec<Adjustment>) {\n-        let mut ty = ty;\n+        let mut ty = table.resolve_ty_shallow(&ty);\n         let mut adjust = Vec::new();\n         for _ in 0..self.autoderefs {\n             match autoderef::autoderef_step(table, ty.clone()) {"}, {"sha": "4e46397459d5d6b26a16e4729d799bcaa244f4c1", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ad11b53661979624ba1bfcf4520d5e2b9edbc01/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad11b53661979624ba1bfcf4520d5e2b9edbc01/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=1ad11b53661979624ba1bfcf4520d5e2b9edbc01", "patch": "@@ -1707,3 +1707,19 @@ impl<T, const N: usize> Trait for [T; N] {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn unsize_array_with_inference_variable() {\n+    check_types(\n+        r#\"\n+//- minicore: try, slice\n+use core::ops::ControlFlow;\n+fn foo() -> ControlFlow<(), [usize; 1]> { loop {} }\n+fn bar() -> ControlFlow<(), ()> {\n+    let a = foo()?.len();\n+      //^ usize\n+    ControlFlow::Continue(())\n+}\n+\"#,\n+    );\n+}"}]}