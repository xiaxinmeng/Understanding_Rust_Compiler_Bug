{"sha": "93b6d9e086c6910118a57e4332c9448ab550931f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYjZkOWUwODZjNjkxMDExOGE1N2U0MzMyYzk0NDhhYjU1MDkzMWY=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-10T19:23:21Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-27T19:06:15Z"}, "message": "libstd => 2018", "tree": {"sha": "26b124bf1caa9fb65c7af0c2d115e9317572c37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b124bf1caa9fb65c7af0c2d115e9317572c37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b6d9e086c6910118a57e4332c9448ab550931f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b6d9e086c6910118a57e4332c9448ab550931f", "html_url": "https://github.com/rust-lang/rust/commit/93b6d9e086c6910118a57e4332c9448ab550931f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b6d9e086c6910118a57e4332c9448ab550931f/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e001e5c6c7c090b41416a57d4be412ed3ccd937", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e001e5c6c7c090b41416a57d4be412ed3ccd937", "html_url": "https://github.com/rust-lang/rust/commit/7e001e5c6c7c090b41416a57d4be412ed3ccd937"}], "stats": {"total": 4045, "additions": 2005, "deletions": 2040}, "files": [{"sha": "1a6b58f35b398c30047935133a59816534760925", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -6,6 +6,7 @@ build = \"build.rs\"\n license = \"MIT/Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust.git\"\n description = \"The Rust Standard Library\"\n+edition = \"2018\"\n \n [lib]\n name = \"std\""}, {"sha": "a13da2901df94cac80cd831c6c5e7eda856c7828", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -64,7 +64,8 @@\n use core::sync::atomic::{AtomicPtr, Ordering};\n use core::{mem, ptr};\n use core::ptr::NonNull;\n-use sys_common::util::dumb_print;\n+\n+use crate::sys_common::util::dumb_print;\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n@@ -208,7 +209,7 @@ pub fn rust_oom(layout: Layout) -> ! {\n         unsafe { mem::transmute(hook) }\n     };\n     hook(layout);\n-    unsafe { ::sys::abort_internal(); }\n+    unsafe { crate::sys::abort_internal(); }\n }\n \n #[cfg(not(test))]"}, {"sha": "726c27321538d2024dfd7944ce563eb38f771db5", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,5 @@\n #![deny(warnings)]\n \n-extern crate cc;\n-\n use std::env;\n \n fn main() {"}, {"sha": "7f5add0543685f756ff97a7594c04dfbbf510aa3", "filename": "src/libstd/collections/hash/bench.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,6 @@\n #![cfg(test)]\n \n-extern crate test;\n-\n-use self::test::Bencher;\n+use test::Bencher;\n \n #[bench]\n fn new_drop(b: &mut Bencher) {"}, {"sha": "a51847c92b51e2bf964969843501f55c867afd9e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,18 +1,18 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use intrinsics::unlikely;\n-use collections::CollectionAllocErr;\n-use cell::Cell;\n-use borrow::Borrow;\n-use cmp::max;\n-use fmt::{self, Debug};\n+use crate::intrinsics::unlikely;\n+use crate::collections::CollectionAllocErr;\n+use crate::cell::Cell;\n+use crate::borrow::Borrow;\n+use crate::cmp::max;\n+use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n-use hash::{Hash, Hasher, BuildHasher, SipHasher13};\n-use iter::{FromIterator, FusedIterator};\n-use mem::{self, replace};\n-use ops::{Deref, DerefMut, Index};\n-use sys;\n+use crate::hash::{Hash, Hasher, BuildHasher, SipHasher13};\n+use crate::iter::{FromIterator, FusedIterator};\n+use crate::mem::{self, replace};\n+use crate::ops::{Deref, DerefMut, Index};\n+use crate::sys;\n \n use super::table::{self, Bucket, EmptyBucket, Fallibility, FullBucket, FullBucketMut, RawTable,\n                    SafeHash};\n@@ -3328,7 +3328,7 @@ mod test_map {\n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n     use super::RandomState;\n-    use cell::RefCell;\n+    use crate::cell::RefCell;\n     use rand::{thread_rng, Rng};\n     use realstd::collections::CollectionAllocErr::*;\n     use realstd::mem::size_of;"}, {"sha": "8a599c11b2095985dd2cda4dd700dd3548361a06", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use borrow::Borrow;\n-use fmt;\n-use hash::{Hash, BuildHasher};\n-use iter::{Chain, FromIterator, FusedIterator};\n-use ops::{BitOr, BitAnd, BitXor, Sub};\n+use crate::borrow::Borrow;\n+use crate::fmt;\n+use crate::hash::{Hash, BuildHasher};\n+use crate::iter::{Chain, FromIterator, FusedIterator};\n+use crate::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use super::Recover;\n use super::map::{self, HashMap, Keys, RandomState};\n@@ -1751,7 +1751,7 @@ mod test_set {\n \n     #[test]\n     fn test_replace() {\n-        use hash;\n+        use crate::hash;\n \n         #[derive(Debug)]\n         struct Foo(&'static str, i32);"}, {"sha": "31e7a6931356cc15b3fcc3a928d7199e7c6770bc", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,11 @@\n-use alloc::{Global, Alloc, Layout, LayoutErr, handle_alloc_error};\n-use collections::CollectionAllocErr;\n-use hash::{BuildHasher, Hash, Hasher};\n-use marker;\n-use mem::{size_of, needs_drop};\n-use mem;\n-use ops::{Deref, DerefMut};\n-use ptr::{self, Unique, NonNull};\n-use hint;\n+use crate::alloc::{Global, Alloc, Layout, LayoutErr, handle_alloc_error};\n+use crate::collections::CollectionAllocErr;\n+use crate::hash::{BuildHasher, Hash, Hasher};\n+use crate::marker;\n+use crate::mem::{self, size_of, needs_drop};\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr::{self, Unique, NonNull};\n+use crate::hint;\n \n use self::BucketState::*;\n "}, {"sha": "286ce2d389b8ca78fb6c9d6b56a8fac044f70b82", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -412,7 +412,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n #[doc(hidden)]\n-pub use ops::Bound;\n+pub use crate::ops::Bound;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::collections::{BinaryHeap, BTreeMap, BTreeSet};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "97c67f562a7dfac171052b854ec03ce49b91219f", "filename": "src/libstd/env.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -13,13 +13,13 @@\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n-use error::Error;\n-use ffi::{OsStr, OsString};\n-use fmt;\n-use io;\n-use path::{Path, PathBuf};\n-use sys;\n-use sys::os as os_imp;\n+use crate::error::Error;\n+use crate::ffi::{OsStr, OsString};\n+use crate::fmt;\n+use crate::io;\n+use crate::path::{Path, PathBuf};\n+use crate::sys;\n+use crate::sys::os as os_imp;\n \n /// Returns the current working directory as a [`PathBuf`].\n ///\n@@ -800,7 +800,7 @@ impl fmt::Debug for ArgsOs {\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {\n-    use sys::env::os;\n+    use crate::sys::env::os;\n \n     /// A string describing the architecture of the CPU that is currently\n     /// in use.\n@@ -972,7 +972,7 @@ mod arch {\n mod tests {\n     use super::*;\n \n-    use path::Path;\n+    use crate::path::Path;\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n@@ -995,7 +995,7 @@ mod tests {\n     #[test]\n     #[cfg(windows)]\n     fn split_paths_windows() {\n-        use path::PathBuf;\n+        use crate::path::PathBuf;\n \n         fn check_parse(unparsed: &str, parsed: &[&str]) -> bool {\n             split_paths(unparsed).collect::<Vec<_>>() ==\n@@ -1017,7 +1017,7 @@ mod tests {\n     #[test]\n     #[cfg(unix)]\n     fn split_paths_unix() {\n-        use path::PathBuf;\n+        use crate::path::PathBuf;\n \n         fn check_parse(unparsed: &str, parsed: &[&str]) -> bool {\n             split_paths(unparsed).collect::<Vec<_>>() ==\n@@ -1034,7 +1034,7 @@ mod tests {\n     #[test]\n     #[cfg(unix)]\n     fn join_paths_unix() {\n-        use ffi::OsStr;\n+        use crate::ffi::OsStr;\n \n         fn test_eq(input: &[&str], output: &str) -> bool {\n             &*join_paths(input.iter().cloned()).unwrap() ==\n@@ -1052,7 +1052,7 @@ mod tests {\n     #[test]\n     #[cfg(windows)]\n     fn join_paths_windows() {\n-        use ffi::OsStr;\n+        use crate::ffi::OsStr;\n \n         fn test_eq(input: &[&str], output: &str) -> bool {\n             &*join_paths(input.iter().cloned()).unwrap() =="}, {"sha": "2858308e8f8d59a4303eac8aff88492d4d2f423e", "filename": "src/libstd/error.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -13,17 +13,18 @@\n // coherence challenge (e.g., specialization, neg impls, etc) we can\n // reconsider what crate these items belong in.\n \n-use alloc::{AllocErr, LayoutErr, CannotReallocInPlace};\n-use any::TypeId;\n-use borrow::Cow;\n-use cell;\n-use char;\n use core::array;\n-use fmt::{self, Debug, Display};\n-use mem::transmute;\n-use num;\n-use str;\n-use string;\n+\n+use crate::alloc::{AllocErr, LayoutErr, CannotReallocInPlace};\n+use crate::any::TypeId;\n+use crate::borrow::Cow;\n+use crate::cell;\n+use crate::char;\n+use crate::fmt::{self, Debug, Display};\n+use crate::mem::transmute;\n+use crate::num;\n+use crate::str;\n+use crate::string;\n \n /// `Error` is a trait representing the basic expectations for error values,\n /// i.e., values of type `E` in [`Result<T, E>`]. Errors must describe\n@@ -852,7 +853,7 @@ impl dyn Error + Send + Sync {\n #[cfg(test)]\n mod tests {\n     use super::Error;\n-    use fmt;\n+    use crate::fmt;\n \n     #[derive(Debug, PartialEq)]\n     struct A;"}, {"sha": "f6cd9e82abd40ca16c0b91286e51d62c3f0004bd", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -9,9 +9,9 @@\n #![allow(missing_docs)]\n \n #[cfg(not(test))]\n-use intrinsics;\n+use crate::intrinsics;\n #[cfg(not(test))]\n-use sys::cmath;\n+use crate::sys::cmath;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n@@ -488,7 +488,7 @@ impl f32 {\n     #[inline]\n     pub fn log2(self) -> f32 {\n         #[cfg(target_os = \"android\")]\n-        return ::sys::android::log2f32(self);\n+        return crate::sys::android::log2f32(self);\n         #[cfg(not(target_os = \"android\"))]\n         return unsafe { intrinsics::log2f32(self) };\n     }\n@@ -932,7 +932,7 @@ impl f32 {\n     #[inline]\n     pub fn acosh(self) -> f32 {\n         match self {\n-            x if x < 1.0 => ::f32::NAN,\n+            x if x < 1.0 => crate::f32::NAN,\n             x => (x + ((x * x) - 1.0).sqrt()).ln(),\n         }\n     }\n@@ -960,10 +960,10 @@ impl f32 {\n \n #[cfg(test)]\n mod tests {\n-    use f32;\n-    use f32::*;\n-    use num::*;\n-    use num::FpCategory as Fp;\n+    use crate::f32;\n+    use crate::f32::*;\n+    use crate::num::*;\n+    use crate::num::FpCategory as Fp;\n \n     #[test]\n     fn test_num_f32() {"}, {"sha": "8ff97ab828a735eab873a98857a5ca841661cb74", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -9,9 +9,9 @@\n #![allow(missing_docs)]\n \n #[cfg(not(test))]\n-use intrinsics;\n+use crate::intrinsics;\n #[cfg(not(test))]\n-use sys::cmath;\n+use crate::sys::cmath;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n@@ -436,7 +436,7 @@ impl f64 {\n     pub fn log2(self) -> f64 {\n         self.log_wrapper(|n| {\n             #[cfg(target_os = \"android\")]\n-            return ::sys::android::log2f64(n);\n+            return crate::sys::android::log2f64(n);\n             #[cfg(not(target_os = \"android\"))]\n             return unsafe { intrinsics::log2f64(n) };\n         })\n@@ -906,10 +906,10 @@ impl f64 {\n \n #[cfg(test)]\n mod tests {\n-    use f64;\n-    use f64::*;\n-    use num::*;\n-    use num::FpCategory as Fp;\n+    use crate::f64;\n+    use crate::f64::*;\n+    use crate::num::*;\n+    use crate::num::FpCategory as Fp;\n \n     #[test]\n     fn test_num_f64() {"}, {"sha": "139680e526fd6b2fc24ad1a94f308f00b71bf9d4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,19 +1,19 @@\n-use ascii;\n-use borrow::{Cow, Borrow};\n-use cmp::Ordering;\n-use error::Error;\n-use fmt::{self, Write};\n-use io;\n-use mem;\n-use memchr;\n-use ops;\n-use os::raw::c_char;\n-use ptr;\n-use rc::Rc;\n-use slice;\n-use str::{self, Utf8Error};\n-use sync::Arc;\n-use sys;\n+use crate::ascii;\n+use crate::borrow::{Cow, Borrow};\n+use crate::cmp::Ordering;\n+use crate::error::Error;\n+use crate::fmt::{self, Write};\n+use crate::io;\n+use crate::mem;\n+use crate::memchr;\n+use crate::ops;\n+use crate::os::raw::c_char;\n+use crate::ptr;\n+use crate::rc::Rc;\n+use crate::slice;\n+use crate::str::{self, Utf8Error};\n+use crate::sync::Arc;\n+use crate::sys;\n \n /// A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\n /// middle.\n@@ -1303,12 +1303,12 @@ impl AsRef<CStr> for CString {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use os::raw::c_char;\n-    use borrow::Cow::{Borrowed, Owned};\n-    use hash::{Hash, Hasher};\n-    use collections::hash_map::DefaultHasher;\n-    use rc::Rc;\n-    use sync::Arc;\n+    use crate::os::raw::c_char;\n+    use crate::borrow::Cow::{Borrowed, Owned};\n+    use crate::hash::{Hash, Hasher};\n+    use crate::collections::hash_map::DefaultHasher;\n+    use crate::rc::Rc;\n+    use crate::sync::Arc;\n \n     #[test]\n     fn c_to_rust() {"}, {"sha": "f68eaeb9c7e1f20d3169abe13e03e478452b9de3", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n-use borrow::{Borrow, Cow};\n-use fmt;\n-use ops;\n-use cmp;\n-use hash::{Hash, Hasher};\n-use rc::Rc;\n-use sync::Arc;\n+use crate::borrow::{Borrow, Cow};\n+use crate::fmt;\n+use crate::ops;\n+use crate::cmp;\n+use crate::hash::{Hash, Hasher};\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n \n-use sys::os_str::{Buf, Slice};\n-use sys_common::{AsInner, IntoInner, FromInner};\n+use crate::sys::os_str::{Buf, Slice};\n+use crate::sys_common::{AsInner, IntoInner, FromInner};\n \n /// A type that can represent owned, mutable platform-native strings, but is\n /// cheaply inter-convertible with Rust strings.\n@@ -968,10 +968,10 @@ impl AsInner<Slice> for OsStr {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use sys_common::{AsInner, IntoInner};\n+    use crate::sys_common::{AsInner, IntoInner};\n \n-    use rc::Rc;\n-    use sync::Arc;\n+    use crate::rc::Rc;\n+    use crate::sync::Arc;\n \n     #[test]\n     fn test_os_string_with_capacity() {"}, {"sha": "25f2dd73504ae87619bf4543230af7b3bcfbb6ee", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -7,13 +7,13 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-use ffi::OsString;\n-use io::{self, SeekFrom, Seek, Read, Initializer, Write};\n-use path::{Path, PathBuf};\n-use sys::fs as fs_imp;\n-use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n-use time::SystemTime;\n+use crate::fmt;\n+use crate::ffi::OsString;\n+use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write};\n+use crate::path::{Path, PathBuf};\n+use crate::sys::fs as fs_imp;\n+use crate::sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n+use crate::time::SystemTime;\n \n /// A reference to an open file on the filesystem.\n ///\n@@ -2096,26 +2096,27 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n \n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n-    use io::prelude::*;\n+    use crate::io::prelude::*;\n+\n+    use crate::fs::{self, File, OpenOptions};\n+    use crate::io::{ErrorKind, SeekFrom};\n+    use crate::path::Path;\n+    use crate::str;\n+    use crate::sys_common::io::test::{TempDir, tmpdir};\n+    use crate::thread;\n \n-    use fs::{self, File, OpenOptions};\n-    use io::{ErrorKind, SeekFrom};\n-    use path::Path;\n     use rand::{rngs::StdRng, FromEntropy, RngCore};\n-    use str;\n-    use sys_common::io::test::{TempDir, tmpdir};\n-    use thread;\n \n     #[cfg(windows)]\n-    use os::windows::fs::{symlink_dir, symlink_file};\n+    use crate::os::windows::fs::{symlink_dir, symlink_file};\n     #[cfg(windows)]\n-    use sys::fs::symlink_junction;\n+    use crate::sys::fs::symlink_junction;\n     #[cfg(unix)]\n-    use os::unix::fs::symlink as symlink_dir;\n+    use crate::os::unix::fs::symlink as symlink_dir;\n     #[cfg(unix)]\n-    use os::unix::fs::symlink as symlink_file;\n+    use crate::os::unix::fs::symlink as symlink_file;\n     #[cfg(unix)]\n-    use os::unix::fs::symlink as symlink_junction;\n+    use crate::os::unix::fs::symlink as symlink_junction;\n \n     macro_rules! check { ($e:expr) => (\n         match $e {\n@@ -2334,7 +2335,7 @@ mod tests {\n     #[test]\n     #[cfg(unix)]\n     fn file_test_io_read_write_at() {\n-        use os::unix::fs::FileExt;\n+        use crate::os::unix::fs::FileExt;\n \n         let tmpdir = tmpdir();\n         let filename = tmpdir.join(\"file_rt_io_file_test_read_write_at.txt\");\n@@ -2390,7 +2391,7 @@ mod tests {\n     #[test]\n     #[cfg(unix)]\n     fn set_get_unix_permissions() {\n-        use os::unix::fs::PermissionsExt;\n+        use crate::os::unix::fs::PermissionsExt;\n \n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"set_get_unix_permissions\");\n@@ -2411,7 +2412,7 @@ mod tests {\n     #[test]\n     #[cfg(windows)]\n     fn file_test_io_seek_read_write() {\n-        use os::windows::fs::FileExt;\n+        use crate::os::windows::fs::FileExt;\n \n         let tmpdir = tmpdir();\n         let filename = tmpdir.join(\"file_rt_io_file_test_seek_read_write.txt\");\n@@ -3013,7 +3014,7 @@ mod tests {\n \n     #[test]\n     fn open_flavors() {\n-        use fs::OpenOptions as OO;\n+        use crate::fs::OpenOptions as OO;\n         fn c<T: Clone>(t: &T) -> T { t.clone() }\n \n         let tmpdir = tmpdir();"}, {"sha": "559a54d3c8aca0e2fb732f374b339fc7abe0b19e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,12 @@\n //! Buffering wrappers for I/O traits\n \n-use io::prelude::*;\n+use crate::io::prelude::*;\n \n-use cmp;\n-use error;\n-use fmt;\n-use io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n-use memchr;\n+use crate::cmp;\n+use crate::error;\n+use crate::fmt;\n+use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n+use crate::memchr;\n \n /// The `BufReader` struct adds buffering to any reader.\n ///\n@@ -977,11 +977,10 @@ impl<W: Write> fmt::Debug for LineWriter<W> where W: fmt::Debug {\n \n #[cfg(test)]\n mod tests {\n-    use io::prelude::*;\n-    use io::{self, BufReader, BufWriter, LineWriter, SeekFrom};\n-    use sync::atomic::{AtomicUsize, Ordering};\n-    use thread;\n-    use test;\n+    use crate::io::prelude::*;\n+    use crate::io::{self, BufReader, BufWriter, LineWriter, SeekFrom};\n+    use crate::sync::atomic::{AtomicUsize, Ordering};\n+    use crate::thread;\n \n     /// A dummy reader intended at testing short-reads propagation.\n     pub struct ShortReader {"}, {"sha": "873da0898c7fe01c4765c20e42a101bd0dca4e91", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,9 @@\n-use io::prelude::*;\n+use crate::io::prelude::*;\n+\n+use crate::cmp;\n+use crate::io::{self, Initializer, SeekFrom, Error, ErrorKind, IoVec, IoVecMut};\n \n use core::convert::TryInto;\n-use cmp;\n-use io::{self, Initializer, SeekFrom, Error, ErrorKind, IoVec, IoVecMut};\n \n /// A `Cursor` wraps an in-memory buffer and provides it with a\n /// [`Seek`] implementation.\n@@ -378,8 +379,8 @@ impl Write for Cursor<Box<[u8]>> {\n \n #[cfg(test)]\n mod tests {\n-    use io::prelude::*;\n-    use io::{Cursor, SeekFrom, IoVec, IoVecMut};\n+    use crate::io::prelude::*;\n+    use crate::io::{Cursor, SeekFrom, IoVec, IoVecMut};\n \n     #[test]\n     fn test_vec_writer() {"}, {"sha": "fdc5625ff1841c1eb82b93b765d730f8984b0e23", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use error;\n-use fmt;\n-use result;\n-use sys;\n-use convert::From;\n+use crate::error;\n+use crate::fmt;\n+use crate::result;\n+use crate::sys;\n+use crate::convert::From;\n \n /// A specialized [`Result`](../result/enum.Result.html) type for I/O\n /// operations.\n@@ -566,10 +566,10 @@ fn _assert_error_is_sync_send() {\n #[cfg(test)]\n mod test {\n     use super::{Error, ErrorKind, Repr, Custom};\n-    use error;\n-    use fmt;\n-    use sys::os::error_string;\n-    use sys::decode_error_kind;\n+    use crate::error;\n+    use crate::fmt;\n+    use crate::sys::os::error_string;\n+    use crate::sys::decode_error_kind;\n \n     #[test]\n     fn test_debug_error() {"}, {"sha": "bd3d0a4163869b5266736a2a011754896d766ba0", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use cmp;\n-use io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoVecMut,\n+use crate::cmp;\n+use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoVecMut,\n          IoVec};\n-use fmt;\n-use mem;\n+use crate::fmt;\n+use crate::mem;\n \n // =============================================================================\n // Forwarding implementations\n@@ -323,8 +323,7 @@ impl Write for Vec<u8> {\n \n #[cfg(test)]\n mod tests {\n-    use io::prelude::*;\n-    use test;\n+    use crate::io::prelude::*;\n \n     #[bench]\n     fn bench_read_slice(b: &mut test::Bencher) {"}, {"sha": "e864aa2c864bbd69246b18d1a145273d7e310840", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use cell::Cell;\n-use ptr;\n-use sync::Arc;\n-use sys_common;\n-use sys_common::mutex::Mutex;\n+use crate::cell::Cell;\n+use crate::ptr;\n+use crate::sync::Arc;\n+use crate::sys_common;\n+use crate::sys_common::mutex::Mutex;\n \n pub struct Lazy<T> {\n     // We never call `lock.init()`, so it is UB to attempt to acquire this mutex reentrantly!"}, {"sha": "e3e2754a7aa092a62d6e2fdd1803413d16683c54", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -259,14 +259,14 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cmp;\n-use fmt;\n-use slice;\n-use str;\n-use memchr;\n-use ops::{Deref, DerefMut};\n-use ptr;\n-use sys;\n+use crate::cmp;\n+use crate::fmt;\n+use crate::slice;\n+use crate::str;\n+use crate::memchr;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr;\n+use crate::sys;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::{BufReader, BufWriter, LineWriter};\n@@ -297,7 +297,7 @@ mod lazy;\n mod util;\n mod stdio;\n \n-const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n+const DEFAULT_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n struct Guard<'a> { buf: &'a mut Vec<u8>, len: usize }\n \n@@ -2155,10 +2155,9 @@ impl<B: BufRead> Iterator for Lines<B> {\n \n #[cfg(test)]\n mod tests {\n-    use io::prelude::*;\n-    use io;\n+    use crate::io::prelude::*;\n+    use crate::io;\n     use super::Cursor;\n-    use test;\n     use super::repeat;\n \n     #[test]"}, {"sha": "13bf357e2eb8f45adbab532c95bf7c9110bcee97", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n-use io::prelude::*;\n+use crate::io::prelude::*;\n \n-use cell::RefCell;\n-use fmt;\n-use io::lazy::Lazy;\n-use io::{self, Initializer, BufReader, LineWriter};\n-use sync::{Arc, Mutex, MutexGuard};\n-use sys::stdio;\n-use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::LocalKey;\n+use crate::cell::RefCell;\n+use crate::fmt;\n+use crate::io::lazy::Lazy;\n+use crate::io::{self, Initializer, BufReader, LineWriter};\n+use crate::sync::{Arc, Mutex, MutexGuard};\n+use crate::sys::stdio;\n+use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n+use crate::thread::LocalKey;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -668,8 +668,8 @@ impl fmt::Debug for StderrLock<'_> {\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n-    use panicking::LOCAL_STDERR;\n-    use mem;\n+    use crate::panicking::LOCAL_STDERR;\n+    use crate::mem;\n     LOCAL_STDERR.with(move |slot| {\n         mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n@@ -692,7 +692,7 @@ pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n-    use mem;\n+    use crate::mem;\n     LOCAL_STDOUT.with(move |slot| {\n         mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n@@ -749,14 +749,14 @@ pub fn _print(args: fmt::Arguments) {\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn _eprint(args: fmt::Arguments) {\n-    use panicking::LOCAL_STDERR;\n+    use crate::panicking::LOCAL_STDERR;\n     print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n }\n \n #[cfg(test)]\n mod tests {\n-    use panic::{UnwindSafe, RefUnwindSafe};\n-    use thread;\n+    use crate::panic::{UnwindSafe, RefUnwindSafe};\n+    use crate::thread;\n     use super::*;\n \n     #[test]"}, {"sha": "6aaf8f1889ac0eaac0746917602980f29c8539df", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n #![allow(missing_copy_implementations)]\n \n-use fmt;\n-use io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoVec, IoVecMut};\n-use mem;\n+use crate::fmt;\n+use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoVec, IoVecMut};\n+use crate::mem;\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -224,8 +224,8 @@ impl fmt::Debug for Sink {\n \n #[cfg(test)]\n mod tests {\n-    use io::prelude::*;\n-    use io::{copy, sink, empty, repeat};\n+    use crate::io::prelude::*;\n+    use crate::io::{copy, sink, empty, repeat};\n \n     #[test]\n     fn copy_copies() {"}, {"sha": "92197e8014a05f3c8763c84ea8903a062d56ec65", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -209,6 +209,10 @@\n #![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+#![allow(elided_lifetimes_in_paths)]\n+\n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n \n@@ -272,7 +276,6 @@\n #![feature(maybe_uninit)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n-#![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n@@ -313,29 +316,25 @@ use prelude::v1::*;\n \n // Access to Bencher, etc.\n #[cfg(test)] extern crate test;\n-#[cfg(test)] extern crate rand;\n \n // Re-export a few macros from core\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::{assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::{unreachable, unimplemented, write, writeln, try};\n+pub use core::{unreachable, unimplemented, write, writeln, r#try};\n \n #[allow(unused_imports)] // macros from `alloc` are not used on all platforms\n #[macro_use]\n extern crate alloc as alloc_crate;\n #[doc(masked)]\n+#[allow(unused_extern_crates)]\n extern crate libc;\n-extern crate rustc_demangle;\n \n // We always need an unwinder currently for backtraces\n #[doc(masked)]\n #[allow(unused_extern_crates)]\n extern crate unwind;\n \n-#[cfg(feature = \"backtrace\")]\n-extern crate backtrace_sys;\n-\n // During testing, this crate is not actually the \"real\" std library, but rather\n // it links to the real std library, which was compiled from this same source\n // code. So any lang items std defines are conditionally excluded (or else they"}, {"sha": "281641c3c12321f0b5f3248c17b53d9eeeffe880", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -333,7 +333,7 @@ macro_rules! dbg {\n #[cfg_attr(stage0, allow_internal_unstable)]\n #[cfg_attr(not(stage0), allow_internal_unstable(gen_future, generators))]\n #[allow_internal_unsafe]\n-macro_rules! await {\n+macro_rules! r#await {\n     ($e:expr) => { {\n         let mut pinned = $e;\n         loop {"}, {"sha": "d69294b2d200c81ebca63723f7581e2eb291b888", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -22,7 +22,7 @@\n /// ```\n #[inline]\n pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    ::sys::memchr::memchr(needle, haystack)\n+    crate::sys::memchr::memchr(needle, haystack)\n }\n \n /// A safe interface to `memrchr`.\n@@ -42,7 +42,7 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// ```\n #[inline]\n pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    ::sys::memchr::memrchr(needle, haystack)\n+    crate::sys::memchr::memrchr(needle, haystack)\n }\n \n #[cfg(test)]"}, {"sha": "f5a87cc3ea67a057759d62e562b8e9b3927fca08", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,16 +1,16 @@\n-use fmt;\n-use hash;\n-use io;\n-use mem;\n-use net::{ntoh, hton, IpAddr, Ipv4Addr, Ipv6Addr};\n-use option;\n-use sys::net::netc as c;\n-use sys_common::{FromInner, AsInner, IntoInner};\n-use sys_common::net::LookupHost;\n-use vec;\n-use iter;\n-use slice;\n-use convert::TryInto;\n+use crate::fmt;\n+use crate::hash;\n+use crate::io;\n+use crate::mem;\n+use crate::net::{ntoh, hton, IpAddr, Ipv4Addr, Ipv6Addr};\n+use crate::option;\n+use crate::sys::net::netc as c;\n+use crate::sys_common::{FromInner, AsInner, IntoInner};\n+use crate::sys_common::net::LookupHost;\n+use crate::vec;\n+use crate::iter;\n+use crate::slice;\n+use crate::convert::TryInto;\n \n /// An internet socket address, either IPv4 or IPv6.\n ///\n@@ -921,8 +921,8 @@ impl ToSocketAddrs for String {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use net::*;\n-    use net::test::{tsa, sa6, sa4};\n+    use crate::net::*;\n+    use crate::net::test::{tsa, sa6, sa4};\n \n     #[test]\n     fn to_socket_addr_ipaddr_u16() {"}, {"sha": "fa256ce508655b4bd2e6e640bcf5a6dd96f3aa06", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,11 +3,11 @@\n                                       be to be stable\",\n             issue = \"27709\")]\n \n-use cmp::Ordering;\n-use fmt;\n-use hash;\n-use sys::net::netc as c;\n-use sys_common::{AsInner, FromInner};\n+use crate::cmp::Ordering;\n+use crate::fmt;\n+use crate::hash;\n+use crate::sys::net::netc as c;\n+use crate::sys_common::{AsInner, FromInner};\n \n /// An IP address, either IPv4 or IPv6.\n ///\n@@ -1509,9 +1509,9 @@ impl From<[u16; 8]> for IpAddr {\n // Tests for this module\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use net::*;\n-    use net::Ipv6MulticastScope::*;\n-    use net::test::{tsa, sa6, sa4};\n+    use crate::net::*;\n+    use crate::net::Ipv6MulticastScope::*;\n+    use crate::net::test::{tsa, sa6, sa4};\n \n     #[test]\n     fn test_from_str_ipv4() {"}, {"sha": "b68146939fdcc2dc2fc99a87110deb5464a46eeb", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -28,7 +28,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use io::{self, Error, ErrorKind};\n+use crate::io::{self, Error, ErrorKind};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};"}, {"sha": "7951cd6bcf28ca589e92dfb016e204f2dee21a07", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,10 +3,10 @@\n //! This module is \"publicly exported\" through the `FromStr` implementations\n //! below.\n \n-use error::Error;\n-use fmt;\n-use net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n-use str::FromStr;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n+use crate::str::FromStr;\n \n struct Parser<'a> {\n     // parsing as ASCII, so can use byte array"}, {"sha": "275557da96f67d80b75961ba09c2dac6b122fbd9", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,11 +1,11 @@\n-use io::prelude::*;\n+use crate::io::prelude::*;\n \n-use fmt;\n-use io::{self, Initializer, IoVec, IoVecMut};\n-use net::{ToSocketAddrs, SocketAddr, Shutdown};\n-use sys_common::net as net_imp;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use time::Duration;\n+use crate::fmt;\n+use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::net::{ToSocketAddrs, SocketAddr, Shutdown};\n+use crate::sys_common::net as net_imp;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::time::Duration;\n \n /// A TCP stream between a local and a remote socket.\n ///\n@@ -929,14 +929,14 @@ impl fmt::Debug for TcpListener {\n \n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n-    use io::{ErrorKind, IoVec, IoVecMut};\n-    use io::prelude::*;\n-    use net::*;\n-    use net::test::{next_test_ip4, next_test_ip6};\n-    use sync::mpsc::channel;\n-    use sys_common::AsInner;\n-    use time::{Instant, Duration};\n-    use thread;\n+    use crate::io::{ErrorKind, IoVec, IoVecMut};\n+    use crate::io::prelude::*;\n+    use crate::net::*;\n+    use crate::net::test::{next_test_ip4, next_test_ip6};\n+    use crate::sync::mpsc::channel;\n+    use crate::sys_common::AsInner;\n+    use crate::time::{Instant, Duration};\n+    use crate::thread;\n \n     fn each_ip(f: &mut dyn FnMut(SocketAddr)) {\n         f(next_test_ip4());"}, {"sha": "89fefd9d1d5e069f8bd3a58398b6b4782b1cf5f5", "filename": "src/libstd/net/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftest.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n #![allow(warnings)] // not used on emscripten\n \n-use env;\n-use net::{SocketAddr, SocketAddrV4, SocketAddrV6, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n-use sync::atomic::{AtomicUsize, Ordering};\n+use crate::env;\n+use crate::net::{SocketAddr, SocketAddrV4, SocketAddrV6, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n \n static PORT: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "edc9d665444a035ebe396fe1c08bf40f5f6f627f", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n-use fmt;\n-use io::{self, Error, ErrorKind};\n-use net::{ToSocketAddrs, SocketAddr, Ipv4Addr, Ipv6Addr};\n-use sys_common::net as net_imp;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use time::Duration;\n+use crate::fmt;\n+use crate::io::{self, Error, ErrorKind};\n+use crate::net::{ToSocketAddrs, SocketAddr, Ipv4Addr, Ipv6Addr};\n+use crate::sys_common::net as net_imp;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::time::Duration;\n \n /// A UDP socket.\n ///\n@@ -808,13 +808,13 @@ impl fmt::Debug for UdpSocket {\n \n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n-    use io::ErrorKind;\n-    use net::*;\n-    use net::test::{next_test_ip4, next_test_ip6};\n-    use sync::mpsc::channel;\n-    use sys_common::AsInner;\n-    use time::{Instant, Duration};\n-    use thread;\n+    use crate::io::ErrorKind;\n+    use crate::net::*;\n+    use crate::net::test::{next_test_ip4, next_test_ip6};\n+    use crate::sync::mpsc::channel;\n+    use crate::sys_common::AsInner;\n+    use crate::time::{Instant, Duration};\n+    use crate::thread;\n \n     fn each_ip(f: &mut dyn FnMut(SocketAddr, SocketAddr)) {\n         f(next_test_ip4(), next_test_ip4());"}, {"sha": "828d5720eec1eeff9a2be7bb84aabd01e75418cc", "filename": "src/libstd/num.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,8 +14,8 @@ pub use core::num::Wrapping;\n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n \n-#[cfg(test)] use fmt;\n-#[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+#[cfg(test)] use crate::fmt;\n+#[cfg(test)] use crate::ops::{Add, Sub, Mul, Div, Rem};\n \n /// Helper function for testing numeric operations\n #[cfg(test)]\n@@ -35,16 +35,16 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod tests {\n-    use u8;\n-    use u16;\n-    use u32;\n-    use u64;\n-    use usize;\n-    use ops::Mul;\n+    use crate::u8;\n+    use crate::u16;\n+    use crate::u32;\n+    use crate::u64;\n+    use crate::usize;\n+    use crate::ops::Mul;\n \n     #[test]\n     fn test_saturating_add_uint() {\n-        use usize::MAX;\n+        use crate::usize::MAX;\n         assert_eq!(3_usize.saturating_add(5_usize), 8_usize);\n         assert_eq!(3_usize.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n@@ -53,7 +53,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_sub_uint() {\n-        use usize::MAX;\n+        use crate::usize::MAX;\n         assert_eq!(5_usize.saturating_sub(3_usize), 2_usize);\n         assert_eq!(3_usize.saturating_sub(5_usize), 0_usize);\n         assert_eq!(0_usize.saturating_sub(1_usize), 0_usize);\n@@ -62,7 +62,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_add_int() {\n-        use isize::{MIN,MAX};\n+        use crate::isize::{MIN,MAX};\n         assert_eq!(3i32.saturating_add(5), 8);\n         assert_eq!(3isize.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n@@ -74,7 +74,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_sub_int() {\n-        use isize::{MIN,MAX};\n+        use crate::isize::{MIN,MAX};\n         assert_eq!(3i32.saturating_sub(5), -2);\n         assert_eq!(MIN.saturating_sub(1), MIN);\n         assert_eq!((-2isize).saturating_sub(MAX), MIN);\n@@ -232,8 +232,8 @@ mod tests {\n         assert_eq!(u64_val.to_string(), \"0\");\n     }\n \n-    fn from_str<T: ::str::FromStr>(t: &str) -> Option<T> {\n-        ::str::FromStr::from_str(t).ok()\n+    fn from_str<T: crate::str::FromStr>(t: &str) -> Option<T> {\n+        crate::str::FromStr::from_str(t).ok()\n     }\n \n     #[test]\n@@ -275,8 +275,7 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {"}, {"sha": "9b24f86204bb6d0ca156ba84bc7d64572655a0eb", "filename": "src/libstd/os/android/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::android::raw;\n+use crate::os::android::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "acf5ca1e4297bc6b23497960fe86d75959f47b06", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_long;\n@@ -19,8 +19,8 @@ pub use self::arch::{dev_t, mode_t, blkcnt_t, blksize_t, ino_t, nlink_t, off_t,\n \n #[cfg(any(target_arch = \"arm\", target_arch = \"x86\"))]\n mod arch {\n-    use os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n-    use os::unix::raw::{uid_t, gid_t};\n+    use crate::os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n+    use crate::os::unix::raw::{uid_t, gid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;\n@@ -89,8 +89,8 @@ mod arch {\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use os::raw::{c_uchar, c_ulong};\n-    use os::unix::raw::{uid_t, gid_t};\n+    use crate::os::raw::{c_uchar, c_ulong};\n+    use crate::os::unix::raw::{uid_t, gid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;\n@@ -157,8 +157,8 @@ mod arch {\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    use os::raw::{c_uint, c_long, c_ulong};\n-    use os::unix::raw::{uid_t, gid_t};\n+    use crate::os::raw::{c_uint, c_long, c_ulong};\n+    use crate::os::unix::raw::{uid_t, gid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;"}, {"sha": "849d4aa67f20411b88e6b0b9276deca3af15ec35", "filename": "src/libstd/os/bitrig/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::bitrig::raw;\n+use crate::os::bitrig::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "c966d5a8e5b4938caaa4748407e771b04fd332a2", "filename": "src/libstd/os/bitrig/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,8 +8,8 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t};\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{uid_t, gid_t};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "ba38660224f24b1321aa7687bc0dfe765536859f", "filename": "src/libstd/os/dragonfly/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::dragonfly::raw;\n+use crate::os::dragonfly::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "46ef5a1e7cf7bce3b7c5984bb5dd8ccf5b32e35d", "filename": "src/libstd/os/dragonfly/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "aa6aa38283def97e7dd6b18e0289338c7cfc11dd", "filename": "src/libstd/os/emscripten/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::emscripten::raw;\n+use crate::os::emscripten::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "e55134879794288edfcb28078b2cd0a6649549bb", "filename": "src/libstd/os/emscripten/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -10,7 +10,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::{c_long, c_short, c_uint, c_ulong};\n+use crate::os::raw::{c_long, c_short, c_uint, c_ulong};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;"}, {"sha": "bca22e717d7245cfa496bbdaf6aa5f234e38ff83", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -11,34 +11,35 @@\n ///\n /// [ABI documentation]: https://docs.rs/fortanix-sgx-abi/\n pub mod usercalls {\n-    pub use sys::abi::usercalls::*;\n+    pub use crate::sys::abi::usercalls::*;\n \n     /// Primitives for allocating memory in userspace as well as copying data\n     /// to and from user memory.\n     pub mod alloc {\n-        pub use sys::abi::usercalls::alloc::*;\n+        pub use crate::sys::abi::usercalls::alloc::*;\n     }\n \n     /// Lowest-level interfaces to usercalls and usercall ABI type definitions.\n     pub mod raw {\n-        pub use sys::abi::usercalls::raw::{do_usercall, Usercalls as UsercallNrs};\n-        pub use sys::abi::usercalls::raw::{accept_stream, alloc, async_queues, bind_stream, close,\n-                                           connect_stream, exit, flush, free, insecure_time,\n+        pub use crate::sys::abi::usercalls::raw::{do_usercall, Usercalls as UsercallNrs};\n+        pub use crate::sys::abi::usercalls::raw::{accept_stream, alloc, async_queues, bind_stream,\n+                                           close, connect_stream, exit, flush, free, insecure_time,\n                                            launch_thread, read, read_alloc, send, wait, write};\n \n         // fortanix-sgx-abi re-exports\n-        pub use sys::abi::usercalls::raw::{ByteBuffer, FifoDescriptor, Return, Usercall};\n-        pub use sys::abi::usercalls::raw::Error;\n-        pub use sys::abi::usercalls::raw::{EV_RETURNQ_NOT_EMPTY, EV_UNPARK, EV_USERCALLQ_NOT_FULL,\n-                                           FD_STDERR, FD_STDIN, FD_STDOUT, RESULT_SUCCESS,\n-                                           USERCALL_USER_DEFINED, WAIT_INDEFINITE, WAIT_NO};\n-        pub use sys::abi::usercalls::raw::{Fd, Result, Tcs};\n+        pub use crate::sys::abi::usercalls::raw::{ByteBuffer, FifoDescriptor, Return, Usercall};\n+        pub use crate::sys::abi::usercalls::raw::Error;\n+        pub use crate::sys::abi::usercalls::raw::{EV_RETURNQ_NOT_EMPTY, EV_UNPARK,\n+                                           EV_USERCALLQ_NOT_FULL, FD_STDERR, FD_STDIN, FD_STDOUT,\n+                                           RESULT_SUCCESS, USERCALL_USER_DEFINED, WAIT_INDEFINITE,\n+                                           WAIT_NO};\n+        pub use crate::sys::abi::usercalls::raw::{Fd, Result, Tcs};\n     }\n }\n \n /// Functions for querying mapping information for pointers.\n pub mod mem {\n-    pub use sys::abi::mem::*;\n+    pub use crate::sys::abi::mem::*;\n }\n \n-pub use sys::ext::{io, arch, ffi};\n+pub use crate::sys::ext::{io, arch, ffi};"}, {"sha": "4cc3a4b91fbd8beb3b4b02e5222273bdea8ac74f", "filename": "src/libstd/os/freebsd/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::freebsd::raw;\n+use crate::os::freebsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "0c58154ae607d578a9cab0ff247d0a100cf5f01c", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "1544bdfbe0cde19b79917a7a45cfdd0efc92b803", "filename": "src/libstd/os/fuchsia/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "7e44a79b371ce5ea3ff88186ef81f9537ae9144c", "filename": "src/libstd/os/fuchsia/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_ulong;\n+use crate::os::raw::c_ulong;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n@@ -25,7 +25,7 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n           target_arch = \"powerpc\",\n           target_arch = \"arm\"))]\n mod arch {\n-    use os::raw::{c_long, c_short, c_uint};\n+    use crate::os::raw::{c_long, c_short, c_uint};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n@@ -81,7 +81,7 @@ mod arch {\n \n #[cfg(target_arch = \"mips\")]\n mod arch {\n-    use os::raw::{c_long, c_ulong};\n+    use crate::os::raw::{c_long, c_ulong};\n \n     #[cfg(target_env = \"musl\")]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n@@ -151,7 +151,7 @@ mod arch {\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_long, c_int};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n@@ -207,7 +207,7 @@ mod arch {\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    use os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_long, c_int};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "4097f8c26a62f26d6ac42f32a863c27349c11384", "filename": "src/libstd/os/haiku/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::haiku::raw;\n+use crate::os::haiku::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "d86f4f3ba57cb8dbe8bd23ad85494b771d28e257", "filename": "src/libstd/os/haiku/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,8 +4,8 @@\n \n #![allow(deprecated)]\n \n-use os::raw::{c_long};\n-use os::unix::raw::{uid_t, gid_t};\n+use crate::os::raw::{c_long};\n+use crate::os::unix::raw::{uid_t, gid_t};\n \n // Use the direct definition of usize, instead of uintptr_t like in libc\n #[stable(feature = \"pthread_t\", since = \"1.8.0\")] pub type pthread_t = usize;"}, {"sha": "eb28a839ba86582871bcecba8922aeb7b49f144d", "filename": "src/libstd/os/hermit/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::hermit::raw;\n+use crate::os::hermit::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "7b625f5e3fe36fd3584cc5bef7401b2170e3b579", "filename": "src/libstd/os/ios/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::ios::raw;\n+use crate::os::ios::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "fa38bca09e26a9843981b23030d4e6dcdeb11390", "filename": "src/libstd/os/ios/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "ec5e98370768d81fd2a2074164325a436ac33b8b", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::linux::raw;\n+use crate::os::linux::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "77eeacb4b477c4a8c7af9576be4205acec3a34c3", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -9,7 +9,7 @@\n #![allow(deprecated)]\n #![allow(missing_debug_implementations)]\n \n-use os::raw::c_ulong;\n+use crate::os::raw::c_ulong;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n@@ -28,7 +28,7 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n           target_arch = \"asmjs\",\n           target_arch = \"wasm32\"))]\n mod arch {\n-    use os::raw::{c_long, c_short, c_uint};\n+    use crate::os::raw::{c_long, c_short, c_uint};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n@@ -84,7 +84,7 @@ mod arch {\n \n #[cfg(target_arch = \"mips\")]\n mod arch {\n-    use os::raw::{c_long, c_ulong};\n+    use crate::os::raw::{c_long, c_ulong};\n \n     #[cfg(target_env = \"musl\")]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n@@ -156,7 +156,7 @@ mod arch {\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_long, c_int};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n@@ -212,7 +212,7 @@ mod arch {\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\"))]\n mod arch {\n-    use os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_long, c_int};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "1bd66ad4c764c10316559dc517b2922922ad9c1a", "filename": "src/libstd/os/macos/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::macos::raw;\n+use crate::os::macos::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "5685642c07ff8ac7c854ec642b777dab1192deab", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "5cce3df71d6a926a9df7d09177153378420b41a7", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -12,10 +12,10 @@ cfg_if! {\n         // cross-platform way in the documentation\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use sys::unix_ext as unix;\n+        pub use crate::sys::unix_ext as unix;\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use sys::windows_ext as windows;\n+        pub use crate::sys::windows_ext as windows;\n \n         #[doc(cfg(target_os = \"linux\"))]\n         pub mod linux;\n@@ -26,11 +26,11 @@ cfg_if! {\n \n         #[cfg(any(target_os = \"redox\", unix))]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use sys::ext as unix;\n+        pub use crate::sys::ext as unix;\n \n         #[cfg(windows)]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use sys::ext as windows;\n+        pub use crate::sys::ext as windows;\n \n         #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n         pub mod linux;"}, {"sha": "6dffb70b5dc7bdb6c158e4e59b480f164cb1afe9", "filename": "src/libstd/os/netbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::netbsd::raw;\n+use crate::os::netbsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "1d5d5c6891e3fec8ed2bc5e6fca0d64e639d9b7f", "filename": "src/libstd/os/netbsd/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,8 +8,8 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t};\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{uid_t, gid_t};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "73f9757f3b794bb8ca7673ef908c32a7a7e6005e", "filename": "src/libstd/os/openbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::openbsd::raw;\n+use crate::os::openbsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "094168453d792303c421121a56295285b7387543", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,7 +8,7 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n+use crate::os::raw::c_long;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "e9043b4b40d73d0474f265e9505f6ef4ce355a56", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -86,9 +86,8 @@ pub use core::ffi::c_void;\n #[cfg(test)]\n #[allow(unused_imports)]\n mod tests {\n-    use any::TypeId;\n-    use libc;\n-    use mem;\n+    use crate::any::TypeId;\n+    use crate::mem;\n \n     macro_rules! ok {\n         ($($t:ident)*) => {$(\n@@ -99,7 +98,7 @@ mod tests {\n \n     #[test]\n     fn same() {\n-        use os::raw;\n+        use crate::os::raw;\n         ok!(c_char c_schar c_uchar c_short c_ushort c_int c_uint c_long c_ulong\n             c_longlong c_ulonglong c_float c_double);\n     }"}, {"sha": "55a8d5d1ef0078fd62614e2ecf7dca504dfb648b", "filename": "src/libstd/os/solaris/fs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,10 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n \n #[allow(deprecated)]\n-use os::solaris::raw;\n+use crate::os::solaris::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///"}, {"sha": "93270efea2b68340319d43330c370b824045861b", "filename": "src/libstd/os/solaris/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,8 +8,8 @@\n                               definitions\")]\n #![allow(deprecated)]\n \n-use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t};\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{uid_t, gid_t};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;"}, {"sha": "6a16414c1417e067501edeae16ade9b181c4c38d", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,21 +2,21 @@\n \n #![stable(feature = \"std_panic\", since = \"1.9.0\")]\n \n-use any::Any;\n-use cell::UnsafeCell;\n-use fmt;\n-use future::Future;\n-use pin::Pin;\n-use ops::{Deref, DerefMut};\n-use panicking;\n-use ptr::{Unique, NonNull};\n-use rc::Rc;\n-use sync::{Arc, Mutex, RwLock, atomic};\n-use task::{Waker, Poll};\n-use thread::Result;\n+use crate::any::Any;\n+use crate::cell::UnsafeCell;\n+use crate::fmt;\n+use crate::future::Future;\n+use crate::pin::Pin;\n+use crate::ops::{Deref, DerefMut};\n+use crate::panicking;\n+use crate::ptr::{Unique, NonNull};\n+use crate::rc::Rc;\n+use crate::sync::{Arc, Mutex, RwLock, atomic};\n+use crate::task::{Waker, Poll};\n+use crate::thread::Result;\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub use panicking::{take_hook, set_hook};\n+pub use crate::panicking::{take_hook, set_hook};\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use core::panic::{PanicInfo, Location};\n@@ -385,7 +385,7 @@ impl<F: Future> Future for AssertUnwindSafe<F> {\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n     unsafe {\n-        panicking::try(f)\n+        panicking::r#try(f)\n     }\n }\n "}, {"sha": "868b309686cf61e47086d729aa0af97c438ab096", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,22 +8,22 @@\n //! * Shims around \"try\"\n \n use core::panic::BoxMeUp;\n-\n-use io::prelude::*;\n-\n-use any::Any;\n-use cell::RefCell;\n use core::panic::{PanicInfo, Location};\n-use fmt;\n-use intrinsics;\n-use mem;\n-use ptr;\n-use raw;\n-use sys::stdio::panic_output;\n-use sys_common::rwlock::RWLock;\n-use sys_common::thread_info;\n-use sys_common::util;\n-use thread;\n+\n+use crate::io::prelude::*;\n+\n+use crate::any::Any;\n+use crate::cell::RefCell;\n+use crate::fmt;\n+use crate::intrinsics;\n+use crate::mem;\n+use crate::ptr;\n+use crate::raw;\n+use crate::sys::stdio::panic_output;\n+use crate::sys_common::rwlock::RWLock;\n+use crate::sys_common::thread_info;\n+use crate::sys_common::util;\n+use crate::thread;\n \n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n@@ -159,7 +159,7 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo) + 'static + Sync + Send> {\n \n fn default_hook(info: &PanicInfo) {\n     #[cfg(feature = \"backtrace\")]\n-    use sys_common::backtrace;\n+    use crate::sys_common::backtrace;\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n@@ -186,13 +186,13 @@ fn default_hook(info: &PanicInfo) {\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n-    let write = |err: &mut dyn (::io::Write)| {\n+    let write = |err: &mut dyn crate::io::Write| {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n         #[cfg(feature = \"backtrace\")]\n         {\n-            use sync::atomic::{AtomicBool, Ordering};\n+            use crate::sync::atomic::{AtomicBool, Ordering};\n \n             static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n@@ -221,7 +221,7 @@ fn default_hook(info: &PanicInfo) {\n #[doc(hidden)]\n #[unstable(feature = \"update_panic_count\", issue = \"0\")]\n pub fn update_panic_count(amt: isize) -> usize {\n-    use cell::Cell;\n+    use crate::cell::Cell;\n     thread_local! { static PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n     PANIC_COUNT.with(|c| {\n@@ -235,7 +235,7 @@ pub fn update_panic_count(amt: isize) -> usize {\n pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n-pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {\n+pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {\n     #[allow(unions_with_drop_fields)]\n     union Data<F, R> {\n         f: F,\n@@ -352,7 +352,7 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n         }\n \n         fn fill(&mut self) -> &mut String {\n-            use fmt::Write;\n+            use crate::fmt::Write;\n \n             let inner = self.inner;\n             self.string.get_or_insert_with(|| {"}, {"sha": "858a5778b8161f593a9fbc22d3728daeb41a7e67", "filename": "src/libstd/path.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -67,22 +67,22 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use borrow::{Borrow, Cow};\n-use cmp;\n-use error::Error;\n-use fmt;\n-use fs;\n-use hash::{Hash, Hasher};\n-use io;\n-use iter::{self, FusedIterator};\n-use ops::{self, Deref};\n-use rc::Rc;\n-use str::FromStr;\n-use sync::Arc;\n-\n-use ffi::{OsStr, OsString};\n-\n-use sys::path::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n+use crate::borrow::{Borrow, Cow};\n+use crate::cmp;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::fs;\n+use crate::hash::{Hash, Hasher};\n+use crate::io;\n+use crate::iter::{self, FusedIterator};\n+use crate::ops::{self, Deref};\n+use crate::rc::Rc;\n+use crate::str::FromStr;\n+use crate::sync::Arc;\n+\n+use crate::ffi::{OsStr, OsString};\n+\n+use crate::sys::path::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n \n ////////////////////////////////////////////////////////////////////////////////\n // GENERAL NOTES\n@@ -279,7 +279,7 @@ pub fn is_separator(c: char) -> bool {\n ///\n /// For example, `/` on Unix and `\\` on Windows.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAIN_SEPARATOR: char = ::sys::path::MAIN_SEP;\n+pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Misc helpers\n@@ -2819,8 +2819,8 @@ impl Error for StripPrefixError {\n mod tests {\n     use super::*;\n \n-    use rc::Rc;\n-    use sync::Arc;\n+    use crate::rc::Rc;\n+    use crate::sync::Arc;\n \n     macro_rules! t(\n         ($path:expr, iter: $iter:expr) => (\n@@ -2907,7 +2907,7 @@ mod tests {\n \n     #[test]\n     fn into() {\n-        use borrow::Cow;\n+        use crate::borrow::Cow;\n \n         let static_path = Path::new(\"/home/foo\");\n         let static_cow_path: Cow<'static, Path> = static_path.into();\n@@ -4007,7 +4007,7 @@ mod tests {\n \n     #[test]\n     fn test_eq_receivers() {\n-        use borrow::Cow;\n+        use crate::borrow::Cow;\n \n         let borrowed: &Path = Path::new(\"foo/bar\");\n         let mut owned: PathBuf = PathBuf::new();\n@@ -4032,8 +4032,8 @@ mod tests {\n \n     #[test]\n     pub fn test_compare() {\n-        use hash::{Hash, Hasher};\n-        use collections::hash_map::DefaultHasher;\n+        use crate::hash::{Hash, Hasher};\n+        use crate::collections::hash_map::DefaultHasher;\n \n         fn hash<T: Hash>(t: T) -> u64 {\n             let mut s = DefaultHasher::new();"}, {"sha": "ce1e8e3319cf8b4884d940151446abccb2251726", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -9,41 +9,41 @@\n // Re-exported core operators\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use marker::{Copy, Send, Sized, Sync, Unpin};\n+pub use crate::marker::{Copy, Send, Sized, Sync, Unpin};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use ops::{Drop, Fn, FnMut, FnOnce};\n+pub use crate::ops::{Drop, Fn, FnMut, FnOnce};\n \n // Re-exported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use mem::drop;\n+pub use crate::mem::drop;\n \n // Re-exported types and traits\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use clone::Clone;\n+pub use crate::clone::Clone;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+pub use crate::cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use convert::{AsRef, AsMut, Into, From};\n+pub use crate::convert::{AsRef, AsMut, Into, From};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use default::Default;\n+pub use crate::default::Default;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use iter::{Iterator, Extend, IntoIterator};\n+pub use crate::iter::{Iterator, Extend, IntoIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n+pub use crate::iter::{DoubleEndedIterator, ExactSizeIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use option::Option::{self, Some, None};\n+pub use crate::option::Option::{self, Some, None};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use result::Result::{self, Ok, Err};\n+pub use crate::result::Result::{self, Ok, Err};\n \n \n // The file so far is equivalent to src/libcore/prelude/v1.rs,\n@@ -54,16 +54,16 @@ pub use result::Result::{self, Ok, Err};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use boxed::Box;\n+pub use crate::boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use borrow::ToOwned;\n+pub use crate::borrow::ToOwned;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use slice::SliceConcatExt;\n+pub use crate::slice::SliceConcatExt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use string::{String, ToString};\n+pub use crate::string::{String, ToString};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n-pub use vec::Vec;\n+pub use crate::vec::Vec;"}, {"sha": "568400093440c14fff09248ac6e5c7f034194028", "filename": "src/libstd/process.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -106,17 +106,17 @@\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n \n-use io::prelude::*;\n-\n-use ffi::OsStr;\n-use fmt;\n-use fs;\n-use io::{self, Initializer};\n-use path::Path;\n-use str;\n-use sys::pipe::{read2, AnonPipe};\n-use sys::process as imp;\n-use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n+use crate::io::prelude::*;\n+\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::fs;\n+use crate::io::{self, Initializer};\n+use crate::path::Path;\n+use crate::str;\n+use crate::sys::pipe::{read2, AnonPipe};\n+use crate::sys::process as imp;\n+use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Representation of a running or exited child process.\n ///\n@@ -1481,8 +1481,8 @@ impl Child {\n /// [platform-specific behavior]: #platform-specific-behavior\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn exit(code: i32) -> ! {\n-    ::sys_common::cleanup();\n-    ::sys::os::exit(code)\n+    crate::sys_common::cleanup();\n+    crate::sys::os::exit(code)\n }\n \n /// Terminates the process in an abnormal fashion.\n@@ -1543,7 +1543,7 @@ pub fn exit(code: i32) -> ! {\n /// [panic hook]: ../../std/panic/fn.set_hook.html\n #[stable(feature = \"process_abort\", since = \"1.17.0\")]\n pub fn abort() -> ! {\n-    unsafe { ::sys::abort_internal() };\n+    unsafe { crate::sys::abort_internal() };\n }\n \n /// Returns the OS-assigned process identifier associated with this process.\n@@ -1561,7 +1561,7 @@ pub fn abort() -> ! {\n ///\n #[stable(feature = \"getpid\", since = \"1.26.0\")]\n pub fn id() -> u32 {\n-    ::sys::os::getpid()\n+    crate::sys::os::getpid()\n }\n \n /// A trait for implementing arbitrary return types in the `main` function.\n@@ -1623,10 +1623,10 @@ impl Termination for ExitCode {\n \n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n-    use io::prelude::*;\n+    use crate::io::prelude::*;\n \n-    use io::ErrorKind;\n-    use str;\n+    use crate::io::ErrorKind;\n+    use crate::str;\n     use super::{Command, Output, Stdio};\n \n     // FIXME(#10380) these tests should not all be ignored on android.\n@@ -1671,7 +1671,7 @@ mod tests {\n     #[cfg(unix)]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn signal_reported_right() {\n-        use os::unix::process::ExitStatusExt;\n+        use crate::os::unix::process::ExitStatusExt;\n \n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read a\")\n@@ -1741,8 +1741,8 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     #[cfg(unix)]\n     fn uid_works() {\n-        use os::unix::prelude::*;\n-        use libc;\n+        use crate::os::unix::prelude::*;\n+\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"true\")\n                             .uid(unsafe { libc::getuid() })\n@@ -1755,8 +1755,7 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     #[cfg(unix)]\n     fn uid_to_root_fails() {\n-        use os::unix::prelude::*;\n-        use libc;\n+        use crate::os::unix::prelude::*;\n \n         // if we're already root, this isn't a valid test. Most of the bots run\n         // as non-root though (android is an exception).\n@@ -1881,7 +1880,7 @@ mod tests {\n \n     #[test]\n     fn test_override_env() {\n-        use env;\n+        use crate::env;\n \n         // In some build environments (such as chrooted Nix builds), `env` can\n         // only be found in the explicitly-provided PATH env variable, not in\n@@ -1910,7 +1909,7 @@ mod tests {\n \n     #[test]\n     fn test_capture_env_at_spawn() {\n-        use env;\n+        use crate::env;\n \n         let mut cmd = env_cmd();\n         cmd.env(\"RUN_TEST_NEW_ENV1\", \"123\");\n@@ -1985,8 +1984,8 @@ mod tests {\n     #[test]\n     #[cfg(windows)]\n     fn test_creation_flags() {\n-        use os::windows::process::CommandExt;\n-        use sys::c::{BOOL, DWORD, INFINITE};\n+        use crate::os::windows::process::CommandExt;\n+        use crate::sys::c::{BOOL, DWORD, INFINITE};\n         #[repr(C, packed)]\n         struct DEBUG_EVENT {\n             pub event_code: DWORD,"}, {"sha": "cf45eb0daba3988b5626730c3988ca8a732dcd80", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,18 +14,18 @@\n \n \n // Re-export some of our utilities which are expected by other crates.\n-pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n+pub use crate::panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work.\n #[cfg(not(test))]\n-fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n+fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindSafe),\n                        argc: isize, argv: *const *const u8) -> isize {\n-    use panic;\n-    use sys;\n-    use sys_common;\n-    use sys_common::thread_info;\n-    use thread::Thread;\n+    use crate::panic;\n+    use crate::sys;\n+    use crate::sys_common;\n+    use crate::sys_common::thread_info;\n+    use crate::thread::Thread;\n \n     sys::init();\n \n@@ -46,7 +46,7 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n         // Let's run some code!\n         #[cfg(feature = \"backtrace\")]\n         let exit_code = panic::catch_unwind(|| {\n-            ::sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n+            sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n         #[cfg(not(feature = \"backtrace\"))]\n         let exit_code = panic::catch_unwind(move || main());\n@@ -58,7 +58,7 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n \n #[cfg(not(test))]\n #[lang = \"start\"]\n-fn lang_start<T: ::process::Termination + 'static>\n+fn lang_start<T: crate::process::Termination + 'static>\n     (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n {\n     lang_start_internal(&move || main().report(), argc, argv)"}, {"sha": "a4205daba8b6e53f38fbaf99c31fd326aab492d9", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use fmt;\n-use sync::{Mutex, Condvar};\n+use crate::fmt;\n+use crate::sync::{Mutex, Condvar};\n \n /// A barrier enables multiple threads to synchronize the beginning\n /// of some computation.\n@@ -181,9 +181,9 @@ impl BarrierWaitResult {\n \n #[cfg(test)]\n mod tests {\n-    use sync::{Arc, Barrier};\n-    use sync::mpsc::{channel, TryRecvError};\n-    use thread;\n+    use crate::sync::{Arc, Barrier};\n+    use crate::sync::mpsc::{channel, TryRecvError};\n+    use crate::thread;\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]"}, {"sha": "5ebb61754e1ff75fb2b581104d1c3587856430cb", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use fmt;\n-use sync::atomic::{AtomicUsize, Ordering};\n-use sync::{mutex, MutexGuard, PoisonError};\n-use sys_common::condvar as sys;\n-use sys_common::mutex as sys_mutex;\n-use sys_common::poison::{self, LockResult};\n-use time::{Duration, Instant};\n+use crate::fmt;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sync::{mutex, MutexGuard, PoisonError};\n+use crate::sys_common::condvar as sys;\n+use crate::sys_common::mutex as sys_mutex;\n+use crate::sys_common::poison::{self, LockResult};\n+use crate::time::{Duration, Instant};\n \n /// A type indicating whether a timed wait on a condition variable returned\n /// due to a time out or not.\n@@ -612,12 +612,12 @@ impl Drop for Condvar {\n #[cfg(test)]\n mod tests {\n     /// #![feature(wait_until)]\n-    use sync::mpsc::channel;\n-    use sync::{Condvar, Mutex, Arc};\n-    use sync::atomic::{AtomicBool, Ordering};\n-    use thread;\n-    use time::Duration;\n-    use u64;\n+    use crate::sync::mpsc::channel;\n+    use crate::sync::{Condvar, Mutex, Arc};\n+    use crate::sync::atomic::{AtomicBool, Ordering};\n+    use crate::thread;\n+    use crate::time::Duration;\n+    use crate::u64;\n \n     #[test]\n     fn smoke() {"}, {"sha": "809ee8826981b21a65ff5705e35cda0751725862", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -165,7 +165,7 @@ pub use self::mutex::{Mutex, MutexGuard};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys_common::poison::{PoisonError, TryLockError, TryLockResult, LockResult};\n+pub use crate::sys_common::poison::{PoisonError, TryLockError, TryLockResult, LockResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n "}, {"sha": "6eacfaec25358fde2b83e6cd5c17175ffac63c17", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n //! Generic support for building blocking abstractions.\n \n-use thread::{self, Thread};\n-use sync::atomic::{AtomicBool, Ordering};\n-use sync::Arc;\n-use mem;\n-use time::Instant;\n+use crate::thread::{self, Thread};\n+use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sync::Arc;\n+use crate::mem;\n+use crate::time::Instant;\n \n struct Inner {\n     thread: Thread,"}, {"sha": "b14a9e5d61bd93c751c2ed38bec0e01f45feba5e", "filename": "src/libstd/sync/mpsc/cache_aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fcache_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fcache_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fcache_aligned.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use ops::{Deref, DerefMut};\n+use crate::ops::{Deref, DerefMut};\n \n #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[repr(align(64))]"}, {"sha": "90c5c50c23b9cc3304d78e434be7aba27f9191db", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -266,12 +266,12 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n-use sync::Arc;\n-use error;\n-use fmt;\n-use mem;\n-use cell::UnsafeCell;\n-use time::{Duration, Instant};\n+use crate::sync::Arc;\n+use crate::error;\n+use crate::fmt;\n+use crate::mem;\n+use crate::cell::UnsafeCell;\n+use crate::time::{Duration, Instant};\n \n #[unstable(feature = \"mpsc_select\", issue = \"27800\")]\n pub use self::select::{Select, Handle};\n@@ -1822,10 +1822,10 @@ impl From<RecvError> for RecvTimeoutError {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use env;\n     use super::*;\n-    use thread;\n-    use time::{Duration, Instant};\n+    use crate::env;\n+    use crate::thread;\n+    use crate::time::{Duration, Instant};\n \n     pub fn stress_factor() -> usize {\n         match env::var(\"RUST_TEST_STRESS\") {\n@@ -2514,10 +2514,10 @@ mod tests {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod sync_tests {\n-    use env;\n-    use thread;\n     use super::*;\n-    use time::Duration;\n+    use crate::env;\n+    use crate::thread;\n+    use crate::time::Duration;\n \n     pub fn stress_factor() -> usize {\n         match env::var(\"RUST_TEST_STRESS\") {"}, {"sha": "8f5681b97f44d87370e116952d6f1634fc9d5e54", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -15,8 +15,9 @@ pub use self::PopResult::*;\n \n use core::ptr;\n use core::cell::UnsafeCell;\n-use boxed::Box;\n-use sync::atomic::{AtomicPtr, Ordering};\n+\n+use crate::boxed::Box;\n+use crate::sync::atomic::{AtomicPtr, Ordering};\n \n /// A result of the `pop` function.\n pub enum PopResult<T> {\n@@ -120,10 +121,10 @@ impl<T> Drop for Queue<T> {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use sync::mpsc::channel;\n     use super::{Queue, Data, Empty, Inconsistent};\n-    use sync::Arc;\n-    use thread;\n+    use crate::sync::mpsc::channel;\n+    use crate::sync::Arc;\n+    use crate::thread;\n \n     #[test]\n     fn test_full() {"}, {"sha": "5c516d5de0f176ed735d8e2cc7a6de488d5e83c2", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -27,12 +27,12 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::MyUpgrade::*;\n \n-use sync::mpsc::Receiver;\n-use sync::mpsc::blocking::{self, SignalToken};\n-use cell::UnsafeCell;\n-use ptr;\n-use sync::atomic::{AtomicUsize, Ordering};\n-use time::Instant;\n+use crate::sync::mpsc::Receiver;\n+use crate::sync::mpsc::blocking::{self, SignalToken};\n+use crate::cell::UnsafeCell;\n+use crate::ptr;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::time::Instant;\n \n // Various states you can find a port in.\n const EMPTY: usize = 0;          // initial state: no data, no blocked receiver"}, {"sha": "19c949086454548e99997e2347512d08c1288db6", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -46,16 +46,14 @@\n #![rustc_deprecated(since = \"1.32.0\",\n                     reason = \"channel selection will be removed in a future release\")]\n \n-\n-use fmt;\n-\n use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::ptr;\n use core::usize;\n \n-use sync::mpsc::{Receiver, RecvError};\n-use sync::mpsc::blocking::{self, SignalToken};\n+use crate::fmt;\n+use crate::sync::mpsc::{Receiver, RecvError};\n+use crate::sync::mpsc::blocking::{self, SignalToken};\n \n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over."}, {"sha": "18d93462c78db4b6d789eac898c40d2aea631784", "filename": "src/libstd/sync/mpsc/select_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,8 +2,8 @@\n \n /// This file exists to hack around https://github.com/rust-lang/rust/issues/47238\n \n-use thread;\n-use sync::mpsc::*;\n+use crate::thread;\n+use crate::sync::mpsc::*;\n \n // Don't use the libstd version so we can pull in the right Select structure\n // (std::comm points at the wrong one)"}, {"sha": "6a5d861f0e9cdf749b7a5369276daf14d530cc9a", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,16 +14,16 @@ use core::cmp;\n use core::intrinsics::abort;\n use core::isize;\n \n-use cell::UnsafeCell;\n-use ptr;\n-use sync::atomic::{AtomicUsize, AtomicIsize, AtomicBool, Ordering};\n-use sync::mpsc::blocking::{self, SignalToken};\n-use sync::mpsc::mpsc_queue as mpsc;\n-use sync::mpsc::select::StartResult::*;\n-use sync::mpsc::select::StartResult;\n-use sync::{Mutex, MutexGuard};\n-use thread;\n-use time::Instant;\n+use crate::cell::UnsafeCell;\n+use crate::ptr;\n+use crate::sync::atomic::{AtomicUsize, AtomicIsize, AtomicBool, Ordering};\n+use crate::sync::mpsc::blocking::{self, SignalToken};\n+use crate::sync::mpsc::mpsc_queue as mpsc;\n+use crate::sync::mpsc::select::StartResult::*;\n+use crate::sync::mpsc::select::StartResult;\n+use crate::sync::{Mutex, MutexGuard};\n+use crate::thread;\n+use crate::time::Instant;\n \n const DISCONNECTED: isize = isize::MIN;\n const FUDGE: isize = 1024;"}, {"sha": "0edb1c24e801675adcabb5d86d907a16f1bd94a0", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -6,11 +6,11 @@\n \n // http://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n \n-use boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;\n \n-use sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\n+use crate::boxed::Box;\n+use crate::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\n \n use super::cache_aligned::CacheAligned;\n \n@@ -233,10 +233,10 @@ impl<T, ProducerAddition, ConsumerAddition> Drop for Queue<T, ProducerAddition,\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use sync::Arc;\n     use super::Queue;\n-    use thread;\n-    use sync::mpsc::channel;\n+    use crate::sync::Arc;\n+    use crate::thread;\n+    use crate::sync::mpsc::channel;\n \n     #[test]\n     fn smoke() {"}, {"sha": "7ae6f68b514595d305bb993f1a73896f622a4f49", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -12,17 +12,18 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::Message::*;\n \n-use cell::UnsafeCell;\n use core::cmp;\n use core::isize;\n-use ptr;\n-use thread;\n-use time::Instant;\n-\n-use sync::atomic::{AtomicIsize, AtomicUsize, Ordering, AtomicBool};\n-use sync::mpsc::Receiver;\n-use sync::mpsc::blocking::{self, SignalToken};\n-use sync::mpsc::spsc_queue as spsc;\n+\n+use crate::cell::UnsafeCell;\n+use crate::ptr;\n+use crate::thread;\n+use crate::time::Instant;\n+\n+use crate::sync::atomic::{AtomicIsize, AtomicUsize, Ordering, AtomicBool};\n+use crate::sync::mpsc::Receiver;\n+use crate::sync::mpsc::blocking::{self, SignalToken};\n+use crate::sync::mpsc::spsc_queue as spsc;\n \n const DISCONNECTED: isize = isize::MIN;\n #[cfg(test)]"}, {"sha": "485234a9495f3721d838b54bc7f1503ea3669665", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -31,11 +31,11 @@ use core::isize;\n use core::mem;\n use core::ptr;\n \n-use sync::atomic::{Ordering, AtomicUsize};\n-use sync::mpsc::blocking::{self, WaitToken, SignalToken};\n-use sync::mpsc::select::StartResult::{self, Installed, Abort};\n-use sync::{Mutex, MutexGuard};\n-use time::Instant;\n+use crate::sync::atomic::{Ordering, AtomicUsize};\n+use crate::sync::mpsc::blocking::{self, WaitToken, SignalToken};\n+use crate::sync::mpsc::select::StartResult::{self, Installed, Abort};\n+use crate::sync::{Mutex, MutexGuard};\n+use crate::time::Instant;\n \n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n "}, {"sha": "6b812e65b7269fc2eeecd980357cc67ee96da289", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use cell::UnsafeCell;\n-use fmt;\n-use mem;\n-use ops::{Deref, DerefMut};\n-use ptr;\n-use sys_common::mutex as sys;\n-use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n+use crate::cell::UnsafeCell;\n+use crate::fmt;\n+use crate::mem;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr;\n+use crate::sys_common::mutex as sys;\n+use crate::sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///\n@@ -471,10 +471,10 @@ pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Fla\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use sync::mpsc::channel;\n-    use sync::{Arc, Mutex, Condvar};\n-    use sync::atomic::{AtomicUsize, Ordering};\n-    use thread;\n+    use crate::sync::mpsc::channel;\n+    use crate::sync::{Arc, Mutex, Condvar};\n+    use crate::sync::atomic::{AtomicUsize, Ordering};\n+    use crate::thread;\n \n     struct Packet<T>(Arc<(Mutex<T>, Condvar)>);\n "}, {"sha": "a036c2666625ca23f561de0c7511b0210a6a34bd", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -52,11 +52,11 @@\n // You'll find a few more details in the implementation, but that's the gist of\n // it!\n \n-use fmt;\n-use marker;\n-use ptr;\n-use sync::atomic::{AtomicUsize, AtomicBool, Ordering};\n-use thread::{self, Thread};\n+use crate::fmt;\n+use crate::marker;\n+use crate::ptr;\n+use crate::sync::atomic::{AtomicUsize, AtomicBool, Ordering};\n+use crate::thread::{self, Thread};\n \n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n@@ -514,9 +514,9 @@ impl OnceState {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use panic;\n-    use sync::mpsc::channel;\n-    use thread;\n+    use crate::panic;\n+    use crate::sync::mpsc::channel;\n+    use crate::thread;\n     use super::Once;\n \n     #[test]"}, {"sha": "0be83c76d6259c7ed475dd7436e80faf0e2b5e54", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use cell::UnsafeCell;\n-use fmt;\n-use mem;\n-use ops::{Deref, DerefMut};\n-use ptr;\n-use sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n-use sys_common::rwlock as sys;\n+use crate::cell::UnsafeCell;\n+use crate::fmt;\n+use crate::mem;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr;\n+use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n+use crate::sys_common::rwlock as sys;\n \n /// A reader-writer lock\n ///\n@@ -554,10 +554,10 @@ impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use rand::{self, Rng};\n-    use sync::mpsc::channel;\n-    use thread;\n-    use sync::{Arc, RwLock, TryLockError};\n-    use sync::atomic::{AtomicUsize, Ordering};\n+    use crate::sync::mpsc::channel;\n+    use crate::thread;\n+    use crate::sync::{Arc, RwLock, TryLockError};\n+    use crate::sync::atomic::{AtomicUsize, Ordering};\n \n     #[derive(Eq, PartialEq, Debug)]\n     struct NonCopy(i32);"}, {"sha": "2307e2167c5c11e32c177c7c0996a475273f7f43", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1090,10 +1090,10 @@ pub union auxv_union {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn auxv_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<auxv>(), 8);\n-  assert_eq!(::core::mem::align_of::<auxv>(), 4);\n+  assert_eq!(core::mem::size_of::<auxv>(), 8);\n+  assert_eq!(core::mem::align_of::<auxv>(), 4);\n   unsafe {\n-    let obj: auxv = ::core::mem::uninitialized();\n+    let obj: auxv = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.a_type as *const _ as usize - base, 0);\n     assert_eq!(&obj.union.a_val as *const _ as usize - base, 4);\n@@ -1103,10 +1103,10 @@ fn auxv_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn auxv_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<auxv>(), 16);\n-  assert_eq!(::core::mem::align_of::<auxv>(), 8);\n+  assert_eq!(core::mem::size_of::<auxv>(), 16);\n+  assert_eq!(core::mem::align_of::<auxv>(), 8);\n   unsafe {\n-    let obj: auxv = ::core::mem::uninitialized();\n+    let obj: auxv = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.a_type as *const _ as usize - base, 0);\n     assert_eq!(&obj.union.a_val as *const _ as usize - base, 8);\n@@ -1124,10 +1124,10 @@ pub struct ciovec {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn ciovec_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<ciovec>(), 8);\n-  assert_eq!(::core::mem::align_of::<ciovec>(), 4);\n+  assert_eq!(core::mem::size_of::<ciovec>(), 8);\n+  assert_eq!(core::mem::align_of::<ciovec>(), 4);\n   unsafe {\n-    let obj: ciovec = ::core::mem::uninitialized();\n+    let obj: ciovec = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.buf.1 as *const _ as usize - base, 4);\n@@ -1136,10 +1136,10 @@ fn ciovec_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn ciovec_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<ciovec>(), 16);\n-  assert_eq!(::core::mem::align_of::<ciovec>(), 8);\n+  assert_eq!(core::mem::size_of::<ciovec>(), 16);\n+  assert_eq!(core::mem::align_of::<ciovec>(), 8);\n   unsafe {\n-    let obj: ciovec = ::core::mem::uninitialized();\n+    let obj: ciovec = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.buf.1 as *const _ as usize - base, 8);\n@@ -1164,10 +1164,10 @@ pub struct dirent {\n }\n #[test]\n fn dirent_layout_test() {\n-  assert_eq!(::core::mem::size_of::<dirent>(), 24);\n-  assert_eq!(::core::mem::align_of::<dirent>(), 8);\n+  assert_eq!(core::mem::size_of::<dirent>(), 24);\n+  assert_eq!(core::mem::align_of::<dirent>(), 8);\n   unsafe {\n-    let obj: dirent = ::core::mem::uninitialized();\n+    let obj: dirent = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.d_next as *const _ as usize - base, 0);\n     assert_eq!(&obj.d_ino as *const _ as usize - base, 8);\n@@ -1228,10 +1228,10 @@ pub struct event_proc_terminate {\n }\n #[test]\n fn event_layout_test() {\n-  assert_eq!(::core::mem::size_of::<event>(), 32);\n-  assert_eq!(::core::mem::align_of::<event>(), 8);\n+  assert_eq!(core::mem::size_of::<event>(), 32);\n+  assert_eq!(core::mem::align_of::<event>(), 8);\n   unsafe {\n-    let obj: event = ::core::mem::uninitialized();\n+    let obj: event = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n     assert_eq!(&obj.error as *const _ as usize - base, 8);\n@@ -1262,10 +1262,10 @@ pub struct fdstat {\n }\n #[test]\n fn fdstat_layout_test() {\n-  assert_eq!(::core::mem::size_of::<fdstat>(), 24);\n-  assert_eq!(::core::mem::align_of::<fdstat>(), 8);\n+  assert_eq!(core::mem::size_of::<fdstat>(), 24);\n+  assert_eq!(core::mem::align_of::<fdstat>(), 8);\n   unsafe {\n-    let obj: fdstat = ::core::mem::uninitialized();\n+    let obj: fdstat = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.fs_filetype as *const _ as usize - base, 0);\n     assert_eq!(&obj.fs_flags as *const _ as usize - base, 2);\n@@ -1299,10 +1299,10 @@ pub struct filestat {\n }\n #[test]\n fn filestat_layout_test() {\n-  assert_eq!(::core::mem::size_of::<filestat>(), 56);\n-  assert_eq!(::core::mem::align_of::<filestat>(), 8);\n+  assert_eq!(core::mem::size_of::<filestat>(), 56);\n+  assert_eq!(core::mem::align_of::<filestat>(), 8);\n   unsafe {\n-    let obj: filestat = ::core::mem::uninitialized();\n+    let obj: filestat = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.st_dev as *const _ as usize - base, 0);\n     assert_eq!(&obj.st_ino as *const _ as usize - base, 8);\n@@ -1325,10 +1325,10 @@ pub struct iovec {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn iovec_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<iovec>(), 8);\n-  assert_eq!(::core::mem::align_of::<iovec>(), 4);\n+  assert_eq!(core::mem::size_of::<iovec>(), 8);\n+  assert_eq!(core::mem::align_of::<iovec>(), 4);\n   unsafe {\n-    let obj: iovec = ::core::mem::uninitialized();\n+    let obj: iovec = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.buf.1 as *const _ as usize - base, 4);\n@@ -1337,10 +1337,10 @@ fn iovec_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn iovec_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<iovec>(), 16);\n-  assert_eq!(::core::mem::align_of::<iovec>(), 8);\n+  assert_eq!(core::mem::size_of::<iovec>(), 16);\n+  assert_eq!(core::mem::align_of::<iovec>(), 8);\n   unsafe {\n-    let obj: iovec = ::core::mem::uninitialized();\n+    let obj: iovec = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.buf.1 as *const _ as usize - base, 8);\n@@ -1360,10 +1360,10 @@ pub struct lookup {\n }\n #[test]\n fn lookup_layout_test() {\n-  assert_eq!(::core::mem::size_of::<lookup>(), 8);\n-  assert_eq!(::core::mem::align_of::<lookup>(), 4);\n+  assert_eq!(core::mem::size_of::<lookup>(), 8);\n+  assert_eq!(core::mem::align_of::<lookup>(), 4);\n   unsafe {\n-    let obj: lookup = ::core::mem::uninitialized();\n+    let obj: lookup = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.fd as *const _ as usize - base, 0);\n     assert_eq!(&obj.flags as *const _ as usize - base, 4);\n@@ -1394,10 +1394,10 @@ pub struct recv_in {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn recv_in_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<recv_in>(), 20);\n-  assert_eq!(::core::mem::align_of::<recv_in>(), 4);\n+  assert_eq!(core::mem::size_of::<recv_in>(), 20);\n+  assert_eq!(core::mem::align_of::<recv_in>(), 4);\n   unsafe {\n-    let obj: recv_in = ::core::mem::uninitialized();\n+    let obj: recv_in = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.ri_data.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.ri_data.1 as *const _ as usize - base, 4);\n@@ -1409,10 +1409,10 @@ fn recv_in_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn recv_in_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<recv_in>(), 40);\n-  assert_eq!(::core::mem::align_of::<recv_in>(), 8);\n+  assert_eq!(core::mem::size_of::<recv_in>(), 40);\n+  assert_eq!(core::mem::align_of::<recv_in>(), 8);\n   unsafe {\n-    let obj: recv_in = ::core::mem::uninitialized();\n+    let obj: recv_in = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.ri_data.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.ri_data.1 as *const _ as usize - base, 8);\n@@ -1438,10 +1438,10 @@ pub struct recv_out {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn recv_out_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<recv_out>(), 52);\n-  assert_eq!(::core::mem::align_of::<recv_out>(), 4);\n+  assert_eq!(core::mem::size_of::<recv_out>(), 52);\n+  assert_eq!(core::mem::align_of::<recv_out>(), 4);\n   unsafe {\n-    let obj: recv_out = ::core::mem::uninitialized();\n+    let obj: recv_out = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.ro_datalen as *const _ as usize - base, 0);\n     assert_eq!(&obj.ro_fdslen as *const _ as usize - base, 4);\n@@ -1452,10 +1452,10 @@ fn recv_out_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn recv_out_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<recv_out>(), 64);\n-  assert_eq!(::core::mem::align_of::<recv_out>(), 8);\n+  assert_eq!(core::mem::size_of::<recv_out>(), 64);\n+  assert_eq!(core::mem::align_of::<recv_out>(), 8);\n   unsafe {\n-    let obj: recv_out = ::core::mem::uninitialized();\n+    let obj: recv_out = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.ro_datalen as *const _ as usize - base, 0);\n     assert_eq!(&obj.ro_fdslen as *const _ as usize - base, 8);\n@@ -1480,10 +1480,10 @@ pub struct send_in {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn send_in_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<send_in>(), 20);\n-  assert_eq!(::core::mem::align_of::<send_in>(), 4);\n+  assert_eq!(core::mem::size_of::<send_in>(), 20);\n+  assert_eq!(core::mem::align_of::<send_in>(), 4);\n   unsafe {\n-    let obj: send_in = ::core::mem::uninitialized();\n+    let obj: send_in = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.si_data.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.si_data.1 as *const _ as usize - base, 4);\n@@ -1495,10 +1495,10 @@ fn send_in_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn send_in_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<send_in>(), 40);\n-  assert_eq!(::core::mem::align_of::<send_in>(), 8);\n+  assert_eq!(core::mem::size_of::<send_in>(), 40);\n+  assert_eq!(core::mem::align_of::<send_in>(), 8);\n   unsafe {\n-    let obj: send_in = ::core::mem::uninitialized();\n+    let obj: send_in = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.si_data.0 as *const _ as usize - base, 0);\n     assert_eq!(&obj.si_data.1 as *const _ as usize - base, 8);\n@@ -1518,21 +1518,21 @@ pub struct send_out {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn send_out_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<send_out>(), 4);\n-  assert_eq!(::core::mem::align_of::<send_out>(), 4);\n+  assert_eq!(core::mem::size_of::<send_out>(), 4);\n+  assert_eq!(core::mem::align_of::<send_out>(), 4);\n   unsafe {\n-    let obj: send_out = ::core::mem::uninitialized();\n+    let obj: send_out = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.so_datalen as *const _ as usize - base, 0);\n   }\n }\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn send_out_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<send_out>(), 8);\n-  assert_eq!(::core::mem::align_of::<send_out>(), 8);\n+  assert_eq!(core::mem::size_of::<send_out>(), 8);\n+  assert_eq!(core::mem::align_of::<send_out>(), 8);\n   unsafe {\n-    let obj: send_out = ::core::mem::uninitialized();\n+    let obj: send_out = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.so_datalen as *const _ as usize - base, 0);\n   }\n@@ -1647,10 +1647,10 @@ pub struct subscription_proc_terminate {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn subscription_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<subscription>(), 56);\n-  assert_eq!(::core::mem::align_of::<subscription>(), 8);\n+  assert_eq!(core::mem::size_of::<subscription>(), 56);\n+  assert_eq!(core::mem::align_of::<subscription>(), 8);\n   unsafe {\n-    let obj: subscription = ::core::mem::uninitialized();\n+    let obj: subscription = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n     assert_eq!(&obj.unused as *const _ as usize - base, 8);\n@@ -1674,10 +1674,10 @@ fn subscription_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn subscription_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<subscription>(), 56);\n-  assert_eq!(::core::mem::align_of::<subscription>(), 8);\n+  assert_eq!(core::mem::size_of::<subscription>(), 56);\n+  assert_eq!(core::mem::align_of::<subscription>(), 8);\n   unsafe {\n-    let obj: subscription = ::core::mem::uninitialized();\n+    let obj: subscription = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n     assert_eq!(&obj.unused as *const _ as usize - base, 8);\n@@ -1728,21 +1728,21 @@ pub struct tcb {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn tcb_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<tcb>(), 4);\n-  assert_eq!(::core::mem::align_of::<tcb>(), 4);\n+  assert_eq!(core::mem::size_of::<tcb>(), 4);\n+  assert_eq!(core::mem::align_of::<tcb>(), 4);\n   unsafe {\n-    let obj: tcb = ::core::mem::uninitialized();\n+    let obj: tcb = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.parent as *const _ as usize - base, 0);\n   }\n }\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn tcb_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<tcb>(), 8);\n-  assert_eq!(::core::mem::align_of::<tcb>(), 8);\n+  assert_eq!(core::mem::size_of::<tcb>(), 8);\n+  assert_eq!(core::mem::align_of::<tcb>(), 8);\n   unsafe {\n-    let obj: tcb = ::core::mem::uninitialized();\n+    let obj: tcb = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.parent as *const _ as usize - base, 0);\n   }\n@@ -1773,10 +1773,10 @@ pub struct threadattr {\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn threadattr_layout_test_32() {\n-  assert_eq!(::core::mem::size_of::<threadattr>(), 16);\n-  assert_eq!(::core::mem::align_of::<threadattr>(), 4);\n+  assert_eq!(core::mem::size_of::<threadattr>(), 16);\n+  assert_eq!(core::mem::align_of::<threadattr>(), 4);\n   unsafe {\n-    let obj: threadattr = ::core::mem::uninitialized();\n+    let obj: threadattr = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.entry_point as *const _ as usize - base, 0);\n     assert_eq!(&obj.stack.0 as *const _ as usize - base, 4);\n@@ -1787,10 +1787,10 @@ fn threadattr_layout_test_32() {\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn threadattr_layout_test_64() {\n-  assert_eq!(::core::mem::size_of::<threadattr>(), 32);\n-  assert_eq!(::core::mem::align_of::<threadattr>(), 8);\n+  assert_eq!(core::mem::size_of::<threadattr>(), 32);\n+  assert_eq!(core::mem::align_of::<threadattr>(), 8);\n   unsafe {\n-    let obj: threadattr = ::core::mem::uninitialized();\n+    let obj: threadattr = core::mem::uninitialized();\n     let base = &obj as *const _ as usize;\n     assert_eq!(&obj.entry_point as *const _ as usize - base, 0);\n     assert_eq!(&obj.stack.0 as *const _ as usize - base, 8);"}, {"sha": "dea562abad3ffbebf84e0916551dea92bd54d371", "filename": "src/libstd/sys/cloudabi/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-pub use sys::cloudabi::shims::args::*;\n+pub use crate::sys::cloudabi::shims::args::*;\n \n #[allow(dead_code)]\n pub fn init(_: isize, _: *const *const u8) {}"}, {"sha": "a15d2238e5563e7152bcc98342b15bafe71e4776", "filename": "src/libstd/sys/cloudabi/backtrace.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,10 @@\n-use error::Error;\n-use ffi::CStr;\n-use intrinsics;\n-use io;\n-use libc;\n-use sys_common::backtrace::Frame;\n+use crate::error::Error;\n+use crate::ffi::CStr;\n+use crate::fmt;\n+use crate::intrinsics;\n+use crate::io;\n+use crate::sys_common::backtrace::Frame;\n+\n use unwind as uw;\n \n pub struct BacktraceContext;\n@@ -22,8 +23,8 @@ impl Error for UnwindError {\n     }\n }\n \n-impl ::fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+impl fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }"}, {"sha": "7aa0b0b6f4912e670f731706e8d496fbafd40d5b", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use cell::UnsafeCell;\n-use mem;\n-use sync::atomic::{AtomicU32, Ordering};\n-use sys::cloudabi::abi;\n-use sys::mutex::{self, Mutex};\n-use sys::time::checked_dur2intervals;\n-use time::Duration;\n+use crate::cell::UnsafeCell;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicU32, Ordering};\n+use crate::sys::cloudabi::abi;\n+use crate::sys::mutex::{self, Mutex};\n+use crate::sys::time::checked_dur2intervals;\n+use crate::time::Duration;\n \n extern \"C\" {\n     #[thread_local]"}, {"sha": "47c90fddd867f72c071a2e928e092506de14b261", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use libc;\n-use mem;\n+use crate::io::ErrorKind;\n+use crate::mem;\n \n #[path = \"../unix/alloc.rs\"]\n pub mod alloc;\n@@ -32,29 +32,29 @@ pub use self::shims::*;\n #[allow(dead_code)]\n pub fn init() {}\n \n-pub fn decode_error_kind(errno: i32) -> ::io::ErrorKind {\n+pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno {\n-        x if x == abi::errno::ACCES as i32 => ::io::ErrorKind::PermissionDenied,\n-        x if x == abi::errno::ADDRINUSE as i32 => ::io::ErrorKind::AddrInUse,\n-        x if x == abi::errno::ADDRNOTAVAIL as i32 => ::io::ErrorKind::AddrNotAvailable,\n-        x if x == abi::errno::AGAIN as i32 => ::io::ErrorKind::WouldBlock,\n-        x if x == abi::errno::CONNABORTED as i32 => ::io::ErrorKind::ConnectionAborted,\n-        x if x == abi::errno::CONNREFUSED as i32 => ::io::ErrorKind::ConnectionRefused,\n-        x if x == abi::errno::CONNRESET as i32 => ::io::ErrorKind::ConnectionReset,\n-        x if x == abi::errno::EXIST as i32 => ::io::ErrorKind::AlreadyExists,\n-        x if x == abi::errno::INTR as i32 => ::io::ErrorKind::Interrupted,\n-        x if x == abi::errno::INVAL as i32 => ::io::ErrorKind::InvalidInput,\n-        x if x == abi::errno::NOENT as i32 => ::io::ErrorKind::NotFound,\n-        x if x == abi::errno::NOTCONN as i32 => ::io::ErrorKind::NotConnected,\n-        x if x == abi::errno::PERM as i32 => ::io::ErrorKind::PermissionDenied,\n-        x if x == abi::errno::PIPE as i32 => ::io::ErrorKind::BrokenPipe,\n-        x if x == abi::errno::TIMEDOUT as i32 => ::io::ErrorKind::TimedOut,\n-        _ => ::io::ErrorKind::Other,\n+        x if x == abi::errno::ACCES as i32 => ErrorKind::PermissionDenied,\n+        x if x == abi::errno::ADDRINUSE as i32 => ErrorKind::AddrInUse,\n+        x if x == abi::errno::ADDRNOTAVAIL as i32 => ErrorKind::AddrNotAvailable,\n+        x if x == abi::errno::AGAIN as i32 => ErrorKind::WouldBlock,\n+        x if x == abi::errno::CONNABORTED as i32 => ErrorKind::ConnectionAborted,\n+        x if x == abi::errno::CONNREFUSED as i32 => ErrorKind::ConnectionRefused,\n+        x if x == abi::errno::CONNRESET as i32 => ErrorKind::ConnectionReset,\n+        x if x == abi::errno::EXIST as i32 => ErrorKind::AlreadyExists,\n+        x if x == abi::errno::INTR as i32 => ErrorKind::Interrupted,\n+        x if x == abi::errno::INVAL as i32 => ErrorKind::InvalidInput,\n+        x if x == abi::errno::NOENT as i32 => ErrorKind::NotFound,\n+        x if x == abi::errno::NOTCONN as i32 => ErrorKind::NotConnected,\n+        x if x == abi::errno::PERM as i32 => ErrorKind::PermissionDenied,\n+        x if x == abi::errno::PIPE as i32 => ErrorKind::BrokenPipe,\n+        x if x == abi::errno::TIMEDOUT as i32 => ErrorKind::TimedOut,\n+        _ => ErrorKind::Other,\n     }\n }\n \n pub unsafe fn abort_internal() -> ! {\n-    ::core::intrinsics::abort();\n+    core::intrinsics::abort();\n }\n \n pub use libc::strlen;"}, {"sha": "5e191e31d5fc47c347f3b0c72ddde601ef4e53b7", "filename": "src/libstd/sys/cloudabi/mutex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use cell::UnsafeCell;\n-use mem;\n-use sync::atomic::{AtomicU32, Ordering};\n-use sys::cloudabi::abi;\n-use sys::rwlock::{self, RWLock};\n+use crate::cell::UnsafeCell;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicU32, Ordering};\n+use crate::sys::cloudabi::abi;\n+use crate::sys::rwlock::{self, RWLock};\n \n extern \"C\" {\n     #[thread_local]"}, {"sha": "7db7808a08783a6fb0f8b4e53e853928d277c095", "filename": "src/libstd/sys/cloudabi/os.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,9 @@\n-use ffi::CStr;\n-use libc::{self, c_int};\n-use str;\n+use crate::ffi::CStr;\n+use crate::str;\n \n-pub use sys::cloudabi::shims::os::*;\n+use libc::c_int;\n+\n+pub use crate::sys::cloudabi::shims::os::*;\n \n pub fn errno() -> i32 {\n     extern \"C\" {"}, {"sha": "6da3f3841b6c6d79d31553bc40e13d14e6407cc8", "filename": "src/libstd/sys/cloudabi/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n-use cell::UnsafeCell;\n-use mem;\n-use sync::atomic::{AtomicU32, Ordering};\n-use sys::cloudabi::abi;\n+use crate::cell::UnsafeCell;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicU32, Ordering};\n+use crate::sys::cloudabi::abi;\n \n extern \"C\" {\n     #[thread_local]"}, {"sha": "f5cf71caf6c048f28f98bdc621066b3b32f34f3b", "filename": "src/libstd/sys/cloudabi/shims/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use ffi::OsString;\n+use crate::ffi::OsString;\n \n pub struct Args(());\n "}, {"sha": "56667bef007068ace3e29b56cbaff3b44e9a0dab", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsString;\n-use fmt;\n-use hash::{Hash, Hasher};\n-use io::{self, SeekFrom};\n-use path::{Path, PathBuf};\n-use sys::time::SystemTime;\n-use sys::{unsupported, Void};\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n+use crate::io::{self, SeekFrom};\n+use crate::path::{Path, PathBuf};\n+use crate::sys::time::SystemTime;\n+use crate::sys::{unsupported, Void};\n \n pub struct File(Void);\n "}, {"sha": "fbb5ff55f22241e4f06cf0acf12f0e45a15f9180", "filename": "src/libstd/sys/cloudabi/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use io;\n+use crate::io;\n \n pub mod args;\n pub mod env;"}, {"sha": "50d72dc7b240bdf2c7d4d6adc545fcbe546bcaa8", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,11 @@\n-use fmt;\n-use io::{self, IoVec, IoVecMut};\n-use net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use time::Duration;\n-use sys::{unsupported, Void};\n-use convert::TryFrom;\n-\n+use crate::fmt;\n+use crate::io::{self, IoVec, IoVecMut};\n+use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+use crate::time::Duration;\n+use crate::sys::{unsupported, Void};\n+use crate::convert::TryFrom;\n+\n+#[allow(unused_extern_crates)]\n pub extern crate libc as netc;\n \n pub struct TcpStream(Void);"}, {"sha": "0c4690e12b052338be67efa0c914ff92f744b593", "filename": "src/libstd/sys/cloudabi/shims/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use error::Error as StdError;\n-use ffi::{OsStr, OsString};\n-use fmt;\n-use io;\n-use iter;\n-use path::{self, PathBuf};\n-use sys::{unsupported, Void};\n+use crate::error::Error as StdError;\n+use crate::ffi::{OsStr, OsString};\n+use crate::fmt;\n+use crate::io;\n+use crate::iter;\n+use crate::path::{self, PathBuf};\n+use crate::sys::{unsupported, Void};\n \n pub fn getcwd() -> io::Result<PathBuf> {\n     unsupported()"}, {"sha": "f3debb9504742c72baad48cb957745d9242625b2", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io;\n-use sys::Void;\n+use crate::io;\n+use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n "}, {"sha": "710c42c1149022a212bbd38d85d9282b6a160de3", "filename": "src/libstd/sys/cloudabi/shims/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsStr;\n-use fmt;\n-use io;\n-use sys::fs::File;\n-use sys::pipe::AnonPipe;\n-use sys::{unsupported, Void};\n-use sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::fs::File;\n+use crate::sys::pipe::AnonPipe;\n+use crate::sys::{unsupported, Void};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command"}, {"sha": "601563c5b1fcbdebe7e5dca84bea6f5432a42f61", "filename": "src/libstd/sys/cloudabi/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io;\n-use sys::cloudabi::abi;\n+use crate::io;\n+use crate::sys::cloudabi::abi;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -59,7 +59,7 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n     err.raw_os_error() == Some(abi::errno::BADF as i32)\n }\n \n-pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n+pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n     Stderr::new().ok()"}, {"sha": "f853346e0e63c156c717b95d4382393b0d2e9568", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,13 @@\n-use boxed::FnBox;\n-use cmp;\n-use ffi::CStr;\n-use io;\n-use libc;\n-use mem;\n-use ptr;\n-use sys::cloudabi::abi;\n-use sys::time::checked_dur2intervals;\n-use sys_common::thread::*;\n-use time::Duration;\n+use crate::boxed::FnBox;\n+use crate::cmp;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sys::cloudabi::abi;\n+use crate::sys::time::checked_dur2intervals;\n+use crate::sys_common::thread::*;\n+use crate::time::Duration;\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n "}, {"sha": "d7502c61eff2c044359123990b4ca321134344b6", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use mem;\n-use sys::cloudabi::abi;\n-use time::Duration;\n+use crate::mem;\n+use crate::sys::cloudabi::abi;\n+use crate::time::Duration;\n \n const NSEC_PER_SEC: abi::timestamp = 1_000_000_000;\n "}, {"sha": "5ba9304c09b995b875ea2116ca573a61e96be460", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -67,7 +67,7 @@ cfg_if! {\n         pub mod unix_ext {}\n     } else {\n         // On other platforms like Windows document the bare bones of unix\n-        use os::linux as platform;\n+        use crate::os::linux as platform;\n         #[path = \"unix/ext/mod.rs\"]\n         pub mod unix_ext;\n     }"}, {"sha": "f9e2f5ba311a090da85d043e45aba6ae539b0e3a", "filename": "src/libstd/sys/redox/args.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -5,9 +5,9 @@\n \n #![allow(dead_code)] // runtime init functions not used during testing\n \n-use ffi::OsString;\n-use marker::PhantomData;\n-use vec;\n+use crate::ffi::OsString;\n+use crate::marker::PhantomData;\n+use crate::vec;\n \n /// One-time global initialization.\n pub unsafe fn init(argc: isize, argv: *const *const u8) { imp::init(argc, argv) }\n@@ -46,14 +46,13 @@ impl DoubleEndedIterator for Args {\n }\n \n mod imp {\n-    use os::unix::prelude::*;\n-    use mem;\n-    use ffi::{CStr, OsString};\n-    use marker::PhantomData;\n-    use libc;\n+    use crate::os::unix::prelude::*;\n+    use crate::mem;\n+    use crate::ffi::{CStr, OsString};\n+    use crate::marker::PhantomData;\n     use super::Args;\n \n-    use sys_common::mutex::Mutex;\n+    use crate::sys_common::mutex::Mutex;\n \n     static mut GLOBAL_ARGS_PTR: usize = 0;\n     static LOCK: Mutex = Mutex::new();"}, {"sha": "8ea2783580a4769358c171a55db26782df707e33", "filename": "src/libstd/sys/redox/backtrace/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -9,13 +9,13 @@ mod tracing;\n mod printing;\n \n pub mod gnu {\n-    use io;\n-    use fs;\n+    use crate::io;\n+    use crate::fs;\n+    use crate::vec::Vec;\n+    use crate::ffi::OsStr;\n+    use crate::os::unix::ffi::OsStrExt;\n+    use crate::io::Read;\n     use libc::c_char;\n-    use vec::Vec;\n-    use ffi::OsStr;\n-    use os::unix::ffi::OsStrExt;\n-    use io::Read;\n \n     pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n         let mut exefile = fs::File::open(\"sys:exe\")?;"}, {"sha": "489eed4562debf3a1a88bf359456a98baff3b4af", "filename": "src/libstd/sys/redox/backtrace/printing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1 +1 @@\n-pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n+pub use crate::sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};"}, {"sha": "e7a68eadbde3a18e17fcd86b50ba39725f414550", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use error::Error;\n-use io;\n-use libc;\n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n \n use unwind as uw;\n \n@@ -20,8 +20,8 @@ impl Error for UnwindError {\n     }\n }\n \n-impl ::fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+impl fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }"}, {"sha": "a6365cac23ea740f5ef7f74a61b05068f5bdffa4", "filename": "src/libstd/sys/redox/condvar.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use cell::UnsafeCell;\n-use intrinsics::{atomic_cxchg, atomic_load, atomic_xadd, atomic_xchg};\n-use ptr;\n-use time::Duration;\n+use crate::cell::UnsafeCell;\n+use crate::intrinsics::{atomic_cxchg, atomic_load, atomic_xadd, atomic_xchg};\n+use crate::ptr;\n+use crate::time::Duration;\n \n-use sys::mutex::{mutex_unlock, Mutex};\n-use sys::syscall::{futex, TimeSpec, FUTEX_WAIT, FUTEX_WAKE, FUTEX_REQUEUE};\n+use crate::sys::mutex::{mutex_unlock, Mutex};\n+use crate::sys::syscall::{futex, TimeSpec, FUTEX_WAIT, FUTEX_WAKE, FUTEX_REQUEUE};\n \n pub struct Condvar {\n     lock: UnsafeCell<*mut i32>,\n@@ -48,7 +48,7 @@ impl Condvar {\n \n             atomic_xadd(seq, 1);\n \n-            let _ = futex(seq, FUTEX_REQUEUE, 1, ::usize::MAX, *lock);\n+            let _ = futex(seq, FUTEX_REQUEUE, 1, crate::usize::MAX, *lock);\n         }\n     }\n "}, {"sha": "671498bc39037e29fc813eb21637c8a40a7eff3c", "filename": "src/libstd/sys/redox/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use ffi::{OsStr, OsString};\n-use mem;\n-use sys::os_str::Buf;\n-use sys_common::{FromInner, IntoInner, AsInner};\n+use crate::ffi::{OsStr, OsString};\n+use crate::mem;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{FromInner, IntoInner, AsInner};\n \n /// Redox-specific extensions to [`OsString`].\n ///"}, {"sha": "53b9dd68f734f3053899718e1a5738c4a666e7cd", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs::{self, Permissions, OpenOptions};\n-use io;\n-use path::Path;\n-use sys;\n-use sys_common::{FromInner, AsInner, AsInnerMut};\n+use crate::fs::{self, Permissions, OpenOptions};\n+use crate::io;\n+use crate::path::Path;\n+use crate::sys;\n+use crate::sys_common::{FromInner, AsInner, AsInnerMut};\n \n /// Redox-specific extensions to [`fs::Permissions`].\n ///"}, {"sha": "f431f96c541f7e7f143caa97f5f1eec54dda624b", "filename": "src/libstd/sys/redox/ext/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs;\n-use net;\n-use sys;\n-use io;\n-use sys_common::{self, AsInner, FromInner, IntoInner};\n+use crate::fs;\n+use crate::net;\n+use crate::sys;\n+use crate::io;\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2c121787804d1b6aa91a03787e968137f6418e39", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,13 +2,13 @@\n \n //! Unix-specific networking functionality\n \n-use fmt;\n-use io::{self, Error, ErrorKind, Initializer};\n-use net::Shutdown;\n-use os::unix::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n-use path::Path;\n-use time::Duration;\n-use sys::{cvt, fd::FileDesc, syscall};\n+use crate::fmt;\n+use crate::io::{self, Error, ErrorKind, Initializer};\n+use crate::net::Shutdown;\n+use crate::os::unix::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n+use crate::path::Path;\n+use crate::time::Duration;\n+use crate::sys::{cvt, fd::FileDesc, syscall};\n \n /// An address associated with a Unix socket.\n ///"}, {"sha": "e981cb93d441fd987c09adbbcd838ecb75b2af52", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use io;\n-use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n-use process;\n-use sys;\n-use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n+use crate::io;\n+use crate::os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n+use crate::process;\n+use crate::sys;\n+use crate::sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n /// Redox-specific extensions to the [`process::Command`] builder,\n ///"}, {"sha": "629eaef04ce36fcf0636e533358cc7c6f3319408", "filename": "src/libstd/sys/redox/ext/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,8 +2,8 @@\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n \n-use sys_common::{AsInner, IntoInner};\n-use thread::JoinHandle;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::thread::JoinHandle;\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n #[allow(deprecated)]"}, {"sha": "1202708a4769a56bc916e6b1a43f819bedff543b", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n-use cell::{Cell, UnsafeCell};\n-use mem;\n-use ptr;\n+use crate::cell::{Cell, UnsafeCell};\n+use crate::mem;\n+use crate::ptr;\n \n \n pub struct Key<T> {\n@@ -15,7 +15,7 @@ pub struct Key<T> {\n     dtor_running: Cell<bool>,\n }\n \n-unsafe impl<T> ::marker::Sync for Key<T> { }\n+unsafe impl<T> Sync for Key<T> { }\n \n impl<T> Key<T> {\n     pub const fn new() -> Key<T> {\n@@ -57,7 +57,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     // *should* be the case that this loop always terminates because we\n     // provide the guarantee that a TLS key cannot be set after it is\n     // flagged for destruction.\n-    use sys_common::thread_local as os;\n+    use crate::sys_common::thread_local as os;\n \n     static DTORS: os::StaticKey = os::StaticKey::new(Some(run_dtors));\n     type List = Vec<(*mut u8, unsafe extern fn(*mut u8))>;"}, {"sha": "a42e486db2239b54a39052881e9a7e274af11e91", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n-use io::{self, Read};\n-use mem;\n-use sys::{cvt, syscall};\n-use sys_common::AsInner;\n+use crate::io::{self, Read};\n+use crate::mem;\n+use crate::sys::{cvt, syscall};\n+use crate::sys_common::AsInner;\n \n pub struct FileDesc {\n     fd: usize,"}, {"sha": "159ee9911bd3ac0bfd1a3e14006b71e119405090", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,14 @@\n-use os::unix::prelude::*;\n-\n-use ffi::{OsString, OsStr};\n-use fmt;\n-use io::{self, Error, ErrorKind, SeekFrom};\n-use path::{Path, PathBuf};\n-use sync::Arc;\n-use sys::fd::FileDesc;\n-use sys::time::SystemTime;\n-use sys::{cvt, syscall};\n-use sys_common::{AsInner, FromInner};\n+use crate::os::unix::prelude::*;\n+\n+use crate::ffi::{OsString, OsStr};\n+use crate::fmt;\n+use crate::io::{self, Error, ErrorKind, SeekFrom};\n+use crate::path::{Path, PathBuf};\n+use crate::sync::Arc;\n+use crate::sys::fd::FileDesc;\n+use crate::sys::time::SystemTime;\n+use crate::sys::{cvt, syscall};\n+use crate::sys_common::{AsInner, FromInner};\n \n pub struct File(FileDesc);\n \n@@ -457,7 +457,7 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-    use fs::{File, set_permissions};\n+    use crate::fs::{File, set_permissions};\n     if !from.is_file() {\n         return Err(Error::new(ErrorKind::InvalidInput,\n                               \"the source path is not an existing regular file\"))"}, {"sha": "7f3ac1f1bb5b3f99fb6e30e80504377d0c5dd233", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code, missing_docs, nonstandard_style)]\n \n-use ::io::{ErrorKind};\n+use crate::io::ErrorKind;\n \n pub use libc::strlen;\n pub use self::rand::hashmap_random_keys;\n@@ -64,8 +64,8 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-pub fn cvt(result: Result<usize, syscall::Error>) -> ::io::Result<usize> {\n-    result.map_err(|err| ::io::Error::from_raw_os_error(err.errno))\n+pub fn cvt(result: Result<usize, syscall::Error>) -> crate::io::Result<usize> {\n+    result.map_err(|err| crate::io::Error::from_raw_os_error(err.errno))\n }\n \n #[doc(hidden)]\n@@ -83,15 +83,15 @@ macro_rules! impl_is_minus_one {\n \n impl_is_minus_one! { i8 i16 i32 i64 isize }\n \n-pub fn cvt_libc<T: IsMinusOne>(t: T) -> ::io::Result<T> {\n+pub fn cvt_libc<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n     if t.is_minus_one() {\n-        Err(::io::Error::last_os_error())\n+        Err(crate::io::Error::last_os_error())\n     } else {\n         Ok(t)\n     }\n }\n \n /// On Redox, use an illegal instruction to abort\n pub unsafe fn abort_internal() -> ! {\n-    ::core::intrinsics::abort();\n+    core::intrinsics::abort();\n }"}, {"sha": "59399df0294c8b0e3b5036bc497d276ed81577ae", "filename": "src/libstd/sys/redox/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use cell::UnsafeCell;\n-use intrinsics::{atomic_cxchg, atomic_xchg};\n-use ptr;\n+use crate::cell::UnsafeCell;\n+use crate::intrinsics::{atomic_cxchg, atomic_xchg};\n+use crate::ptr;\n \n-use sys::syscall::{futex, getpid, FUTEX_WAIT, FUTEX_WAKE};\n+use crate::sys::syscall::{futex, getpid, FUTEX_WAIT, FUTEX_WAKE};\n \n pub unsafe fn mutex_try_lock(m: *mut i32) -> bool {\n     atomic_cxchg(m, 0, 1).0 == 0"}, {"sha": "e9b406bc685a1c01f7df1d846f9e37f17984ae39", "filename": "src/libstd/sys/redox/net/dns/answer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fanswer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fanswer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fanswer.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use string::String;\n-use vec::Vec;\n+use crate::string::String;\n+use crate::vec::Vec;\n \n #[derive(Clone, Debug)]\n pub struct DnsAnswer {"}, {"sha": "6533e0d5efb77b90b932b5fe631c70a34e3dfc42", "filename": "src/libstd/sys/redox/net/dns/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n pub use self::answer::DnsAnswer;\n pub use self::query::DnsQuery;\n \n-use slice;\n-use u16;\n-use string::String;\n-use vec::Vec;\n+use crate::slice;\n+use crate::u16;\n+use crate::string::String;\n+use crate::vec::Vec;\n \n mod answer;\n mod query;"}, {"sha": "65fb241b03737d3f62c2424ffd7c001e844b5fd8", "filename": "src/libstd/sys/redox/net/dns/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fquery.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use string::String;\n+use crate::string::String;\n \n #[derive(Clone, Debug)]\n pub struct DnsQuery {"}, {"sha": "a172763f61313b771e06082b9f2f2a2e4a36f3ad", "filename": "src/libstd/sys/redox/net/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n-use fs::File;\n-use io::{Error, Read, self};\n-use iter::Iterator;\n-use net::{Ipv4Addr, SocketAddr, SocketAddrV4};\n-use str::FromStr;\n-use string::{String, ToString};\n-use sys::syscall::EINVAL;\n-use time::{self, Duration};\n-use vec::{IntoIter, Vec};\n-use convert::{TryFrom, TryInto};\n+use crate::fs::File;\n+use crate::io::{Error, Read, self};\n+use crate::iter::Iterator;\n+use crate::net::{Ipv4Addr, SocketAddr, SocketAddrV4};\n+use crate::str::FromStr;\n+use crate::string::{String, ToString};\n+use crate::sys::syscall::EINVAL;\n+use crate::time::{self, Duration};\n+use crate::vec::{IntoIter, Vec};\n+use crate::convert::{TryFrom, TryInto};\n \n use self::dns::{Dns, DnsQuery};\n "}, {"sha": "5081c3de73c5a51b05c07fbd3e03dc416bb40fad", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,12 @@\n-use cmp;\n-use io::{self, Error, ErrorKind, Result, IoVec, IoVecMut};\n-use mem;\n-use net::{SocketAddr, Shutdown};\n-use path::Path;\n-use sys::fs::{File, OpenOptions};\n-use sys::syscall::TimeSpec;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use time::Duration;\n+use crate::cmp;\n+use crate::io::{self, Error, ErrorKind, Result, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::net::{SocketAddr, Shutdown};\n+use crate::path::Path;\n+use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::syscall::TimeSpec;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::time::Duration;\n \n use super::{path_to_peer_addr, path_to_local_addr};\n "}, {"sha": "b1a60b14570836fb9e3ba4b270f09a3c564914e9", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n-use cell::UnsafeCell;\n-use cmp;\n-use io::{self, Error, ErrorKind, Result};\n-use mem;\n-use net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n-use path::Path;\n-use sys::fs::{File, OpenOptions};\n-use sys::syscall::TimeSpec;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use time::Duration;\n+use crate::cell::UnsafeCell;\n+use crate::cmp;\n+use crate::io::{self, Error, ErrorKind, Result};\n+use crate::mem;\n+use crate::net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n+use crate::path::Path;\n+use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::syscall::TimeSpec;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::time::Duration;\n \n use super::{path_to_peer_addr, path_to_local_addr};\n "}, {"sha": "76e43a83b73724eaf0ad955c67d00bf3061c2847", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,25 +2,25 @@\n \n #![allow(unused_imports)] // lots of cfg code here\n \n-use libc::{self, c_char};\n-\n-use os::unix::prelude::*;\n-\n-use error::Error as StdError;\n-use ffi::{CStr, CString, OsStr, OsString};\n-use fmt;\n-use io::{self, Read, Write};\n-use iter;\n-use marker::PhantomData;\n-use mem;\n-use memchr;\n-use path::{self, PathBuf};\n-use ptr;\n-use slice;\n-use str;\n-use sys_common::mutex::Mutex;\n-use sys::{cvt, cvt_libc, fd, syscall};\n-use vec;\n+use libc::c_char;\n+\n+use crate::os::unix::prelude::*;\n+\n+use crate::error::Error as StdError;\n+use crate::ffi::{CStr, CString, OsStr, OsString};\n+use crate::fmt;\n+use crate::io::{self, Read, Write};\n+use crate::iter;\n+use crate::marker::PhantomData;\n+use crate::mem;\n+use crate::memchr;\n+use crate::path::{self, PathBuf};\n+use crate::ptr;\n+use crate::slice;\n+use crate::str;\n+use crate::sys_common::mutex::Mutex;\n+use crate::sys::{cvt, cvt_libc, fd, syscall};\n+use crate::vec;\n \n extern {\n     #[link_name = \"__errno_location\"]\n@@ -107,7 +107,7 @@ impl StdError for JoinPathsError {\n }\n \n pub fn current_exe() -> io::Result<PathBuf> {\n-    use fs::File;\n+    use crate::fs::File;\n \n     let mut file = File::open(\"sys:exe\")?;\n \n@@ -218,13 +218,13 @@ pub fn page_size() -> usize {\n }\n \n pub fn temp_dir() -> PathBuf {\n-    ::env::var_os(\"TMPDIR\").map(PathBuf::from).unwrap_or_else(|| {\n+    crate::env::var_os(\"TMPDIR\").map(PathBuf::from).unwrap_or_else(|| {\n         PathBuf::from(\"/tmp\")\n     })\n }\n \n pub fn home_dir() -> Option<PathBuf> {\n-    return ::env::var_os(\"HOME\").map(PathBuf::from);\n+    return crate::env::var_os(\"HOME\").map(PathBuf::from);\n }\n \n pub fn exit(code: i32) -> ! {"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,15 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-use borrow::Cow;\n-use fmt;\n-use str;\n-use mem;\n-use rc::Rc;\n-use sync::Arc;\n-use sys_common::{AsInner, IntoInner};\n-use sys_common::bytestring::debug_fmt_bytestring;\n+use crate::borrow::Cow;\n+use crate::fmt;\n+use crate::str;\n+use crate::mem;\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::bytestring::debug_fmt_bytestring;\n+\n use core::str::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]"}, {"sha": "618d61e6fcb45eb6d9226286ab8757b5417ed0a3", "filename": "src/libstd/sys/redox/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use ffi::OsStr;\n-use path::Prefix;\n+use crate::ffi::OsStr;\n+use crate::path::Prefix;\n \n #[inline]\n pub fn is_sep_byte(b: u8) -> bool {"}, {"sha": "911ba9c3f65244801e3f2bb60f0f1f54bd00b5f0", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use io;\n-use sys::{cvt, syscall};\n-use sys::fd::FileDesc;\n+use crate::io;\n+use crate::sys::{cvt, syscall};\n+use crate::sys::fd::FileDesc;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Anonymous pipes"}, {"sha": "8830cdf333ef8b6e6a2e449c3752ebb310305bbb", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,20 +1,21 @@\n-use env::{split_paths};\n-use ffi::{CStr, OsStr};\n-use fmt;\n-use fs::File;\n-use io::{self, prelude::*, BufReader, Error, ErrorKind, SeekFrom};\n+use crate::env::{self, split_paths};\n+use crate::ffi::{CStr, OsStr};\n+use crate::fmt;\n+use crate::fs::File;\n+use crate::io::{self, prelude::*, BufReader, Error, ErrorKind, SeekFrom};\n+use crate::os::unix::ffi::OsStrExt;\n+use crate::path::{Path, PathBuf};\n+use crate::ptr;\n+use crate::sys::ext::fs::MetadataExt;\n+use crate::sys::ext::io::AsRawFd;\n+use crate::sys::fd::FileDesc;\n+use crate::sys::fs::{File as SysFile, OpenOptions};\n+use crate::sys::os::{ENV_LOCK, environ};\n+use crate::sys::pipe::{self, AnonPipe};\n+use crate::sys::{cvt, syscall};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+\n use libc::{EXIT_SUCCESS, EXIT_FAILURE};\n-use os::unix::ffi::OsStrExt;\n-use path::{Path, PathBuf};\n-use ptr;\n-use sys::ext::fs::MetadataExt;\n-use sys::ext::io::AsRawFd;\n-use sys::fd::FileDesc;\n-use sys::fs::{File as SysFile, OpenOptions};\n-use sys::os::{ENV_LOCK, environ};\n-use sys::pipe::{self, AnonPipe};\n-use sys::{cvt, syscall};\n-use sys_common::process::{CommandEnv, DefaultEnvKey};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -297,7 +298,7 @@ impl Command {\n \n         let program = if self.program.contains(':') || self.program.contains('/') {\n             Some(PathBuf::from(&self.program))\n-        } else if let Ok(path_env) = ::env::var(\"PATH\") {\n+        } else if let Ok(path_env) = env::var(\"PATH\") {\n             let mut program = None;\n             for mut path in split_paths(&path_env) {\n                 path.push(&self.program);"}, {"sha": "33f5bdbb5d358e908d8a01b689d0bb933648850b", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use io;\n-use sys::{cvt, syscall};\n-use sys::fd::FileDesc;\n+use crate::io;\n+use crate::sys::{cvt, syscall};\n+use crate::sys::fd::FileDesc;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -54,10 +54,10 @@ impl io::Write for Stderr {\n }\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(::sys::syscall::EBADF as i32)\n+    err.raw_os_error() == Some(crate::sys::syscall::EBADF as i32)\n }\n \n-pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n+pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n     Stderr::new().ok()"}, {"sha": "ae0b91b4d6c7da6aa9ca52c17f814da1ebdb4305", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use boxed::FnBox;\n-use ffi::CStr;\n-use io;\n-use mem;\n-use sys_common::thread::start_thread;\n-use sys::{cvt, syscall};\n-use time::Duration;\n+use crate::boxed::FnBox;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::mem;\n+use crate::sys_common::thread::start_thread;\n+use crate::sys::{cvt, syscall};\n+use crate::time::Duration;\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n "}, {"sha": "4bc8c4d5883da0a8e41340be42e55e9c063166f6", "filename": "src/libstd/sys/redox/thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n #![allow(dead_code)] // not used on all platforms\n \n-use collections::BTreeMap;\n-use ptr;\n-use sync::atomic::{AtomicUsize, Ordering};\n+use crate::collections::BTreeMap;\n+use crate::ptr;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n \n pub type Key = usize;\n "}, {"sha": "9db3e85ca9c8b3505bb779010f2503348e1f6067", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,9 @@\n-use cmp::Ordering;\n-use fmt;\n-use sys::{cvt, syscall};\n-use time::Duration;\n-use convert::TryInto;\n+use crate::cmp::Ordering;\n+use crate::fmt;\n+use crate::sys::{cvt, syscall};\n+use crate::time::Duration;\n+use crate::convert::TryInto;\n+\n use core::hash::{Hash, Hasher};\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;"}, {"sha": "7426f7be9e9615063e4fc419883c78e046451e5f", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n use core::sync::atomic::{AtomicUsize, Ordering};\n-use io::Write;\n+use crate::io::Write;\n \n // runtime features\n mod reloc;\n@@ -37,7 +37,7 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n         },\n         // We need to wait until the initialization is done.\n         BUSY => while RELOC_STATE.load(Ordering::Acquire) == BUSY  {\n-            ::core::arch::x86_64::_mm_pause()\n+            core::arch::x86_64::_mm_pause()\n         },\n         // Initialization is done.\n         DONE => {},"}, {"sha": "83411cb5b4c26fd9e58672510b2093c9f7f88be0", "filename": "src/libstd/sys/sgx/abi/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n use super::usercalls::{alloc::UserRef, self};\n-use cmp;\n-use io::{self, Write};\n-use mem;\n+use crate::cmp;\n+use crate::io::{self, Write};\n+use crate::mem;\n \n extern \"C\" {\n     fn take_debug_panic_buf_ptr() -> *mut u8;"}, {"sha": "a39841bc36f537939d85aa7f5a1628388b7e6861", "filename": "src/libstd/sys/sgx/abi/reloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Freloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Freloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Freloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use slice::from_raw_parts;\n+use crate::slice::from_raw_parts;\n use super::mem;\n \n const R_X86_64_RELATIVE: u32 = 8;"}, {"sha": "b2a812c7231da4159a88462b82e18e63151f532c", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use sync::atomic::{AtomicUsize, Ordering};\n-use ptr;\n-use mem;\n-use cell::Cell;\n-use num::NonZeroUsize;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::ptr;\n+use crate::mem;\n+use crate::cell::Cell;\n+use crate::num::NonZeroUsize;\n use self::sync_bitset::*;\n \n #[cfg(target_pointer_width=\"64\")]\n@@ -152,9 +152,9 @@ impl Tls {\n }\n \n mod sync_bitset {\n-    use sync::atomic::{AtomicUsize, Ordering};\n-    use iter::{Enumerate, Peekable};\n-    use slice::Iter;\n+    use crate::sync::atomic::{AtomicUsize, Ordering};\n+    use crate::iter::{Enumerate, Peekable};\n+    use crate::slice::Iter;\n     use super::{TLS_KEYS_BITSET_SIZE, USIZE_BITS};\n \n     /// A bitset that can be used synchronously."}, {"sha": "b787bd1a5abac44b088bc00fe8b8dea2d3f006ab", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,11 +1,11 @@\n #![allow(unused)]\n \n-use ptr::{self, NonNull};\n-use mem;\n-use cell::UnsafeCell;\n-use slice;\n-use ops::{Deref, DerefMut, Index, IndexMut, CoerceUnsized};\n-use slice::SliceIndex;\n+use crate::ptr::{self, NonNull};\n+use crate::mem;\n+use crate::cell::UnsafeCell;\n+use crate::slice;\n+use crate::ops::{Deref, DerefMut, Index, IndexMut, CoerceUnsized};\n+use crate::slice::SliceIndex;\n \n use fortanix_sgx_abi::*;\n use super::super::mem::is_user_range;"}, {"sha": "7361011e92d3369d216838c6587e84ae9088eab0", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io::{Error as IoError, Result as IoResult};\n-use time::Duration;\n+use crate::io::{Error as IoError, Result as IoResult};\n+use crate::time::Duration;\n \n pub(crate) mod alloc;\n #[macro_use]"}, {"sha": "ad0b6d7b3d8ecb65e5f95476a5042b7bf7ba500a", "filename": "src/libstd/sys/sgx/abi/usercalls/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,8 +3,8 @@\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub use fortanix_sgx_abi::*;\n \n-use ptr::NonNull;\n-use num::NonZeroU64;\n+use crate::ptr::NonNull;\n+use crate::num::NonZeroU64;\n \n #[repr(C)]\n struct UsercallReturn(u64, u64);\n@@ -35,7 +35,7 @@ pub unsafe fn do_usercall(nr: NonZeroU64, p1: u64, p2: u64, p3: u64, p4: u64, ab\n type Register = u64;\n \n trait RegisterArgument {\n-    fn from_register(Register) -> Self;\n+    fn from_register(_: Register) -> Self;\n     fn into_register(self) -> Register;\n }\n "}, {"sha": "94dc8ec25b5872e5f9339c0c6260388740944b02", "filename": "src/libstd/sys/sgx/alloc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,4 @@\n-extern crate dlmalloc;\n-\n-use alloc::{GlobalAlloc, Layout, System};\n+use crate::alloc::{GlobalAlloc, Layout, System};\n \n use super::waitqueue::SpinMutex;\n "}, {"sha": "b73bf9213b7727ec677bebff4af9618db050a990", "filename": "src/libstd/sys/sgx/args.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n-use ffi::OsString;\n use super::abi::usercalls::{alloc, raw::ByteBuffer};\n-use sync::atomic::{AtomicUsize, Ordering};\n-use sys::os_str::Buf;\n-use sys_common::FromInner;\n-use slice;\n+use crate::ffi::OsString;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::FromInner;\n+use crate::slice;\n \n static ARGS: AtomicUsize = AtomicUsize::new(0);\n type ArgsStore = Vec<OsString>;"}, {"sha": "d0361574e39d66811209a0211e244cba965c332b", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,10 @@\n-use io;\n-use error::Error;\n-use libc;\n-use sys_common::backtrace::Frame;\n+use crate::io;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::sys_common::backtrace::Frame;\n+use crate::sys::sgx::abi::mem::image_base;\n+\n use unwind as uw;\n-use sys::sgx::abi::mem::image_base;\n \n pub struct BacktraceContext;\n \n@@ -21,8 +22,8 @@ impl Error for UnwindError {\n     }\n }\n \n-impl ::fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+impl fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }"}, {"sha": "e9a7684f74d00f3b6b26568799bf8695c3ffa3a3", "filename": "src/libstd/sys/sgx/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use sys::mutex::Mutex;\n-use time::Duration;\n+use crate::sys::mutex::Mutex;\n+use crate::time::Duration;\n \n use super::waitqueue::{WaitVariable, WaitQueue, SpinMutex};\n "}, {"sha": "53fb371947a99c9dabc1caea52b282d17bcdffac", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,7 +4,7 @@\n //! Software Developer's Manual, Volume 3, Chapter 40.\n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n-use mem::MaybeUninit;\n+use crate::mem::MaybeUninit;\n \n /// Wrapper struct to force 16-byte alignment.\n #[repr(align(16))]"}, {"sha": "ad7ade9b17d81c2ce54cc11b589100d20919eff9", "filename": "src/libstd/sys/sgx/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n \n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n-use ffi::{OsStr, OsString};\n-use mem;\n-use sys::os_str::Buf;\n-use sys_common::{FromInner, IntoInner, AsInner};\n+use crate::ffi::{OsStr, OsString};\n+use crate::mem;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{FromInner, IntoInner, AsInner};\n \n /// SGX-specific extensions to [`OsString`].\n ///"}, {"sha": "fc88d10d3eddba72eb824abc4218f306123a75fc", "filename": "src/libstd/sys/sgx/ext/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,9 +4,9 @@\n //! description of [`TryIntoRawFd`](trait.TryIntoRawFd.html) for more details.\n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n-pub use sys::abi::usercalls::raw::Fd as RawFd;\n-use net;\n-use sys::{self, AsInner, FromInner, IntoInner, TryIntoInner};\n+pub use crate::sys::abi::usercalls::raw::Fd as RawFd;\n+use crate::net;\n+use crate::sys::{self, AsInner, FromInner, IntoInner, TryIntoInner};\n \n /// A trait to extract the raw SGX file descriptor from an underlying\n /// object."}, {"sha": "a9924f55f12b0504bdf65c42017b5af2dd42780d", "filename": "src/libstd/sys/sgx/fd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n use fortanix_sgx_abi::Fd;\n \n-use io;\n-use mem;\n-use sys::{AsInner, FromInner, IntoInner};\n+use crate::io;\n+use crate::mem;\n+use crate::sys::{AsInner, FromInner, IntoInner};\n use super::abi::usercalls;\n \n #[derive(Debug)]"}, {"sha": "485d2c87fbd2d2003f2bf7dea01f192ae4e1243c", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsString;\n-use fmt;\n-use hash::{Hash, Hasher};\n-use io::{self, SeekFrom};\n-use path::{Path, PathBuf};\n-use sys::time::SystemTime;\n-use sys::{unsupported, Void};\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n+use crate::io::{self, SeekFrom};\n+use crate::path::{Path, PathBuf};\n+use crate::sys::time::SystemTime;\n+use crate::sys::{unsupported, Void};\n \n pub struct File(Void);\n "}, {"sha": "325df7688f37b21ca39b1ef69a15faa37484403d", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,8 +3,9 @@\n //! This module contains the facade (aka platform-specific) implementations of\n //! OS level functionality for Fortanix SGX.\n \n-use os::raw::c_char;\n-use sync::atomic::{AtomicBool, Ordering};\n+use crate::io::ErrorKind;\n+use crate::os::raw::c_char;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n \n pub mod abi;\n mod waitqueue;\n@@ -41,12 +42,12 @@ pub fn init() {\n \n /// This function is used to implement functionality that simply doesn't exist.\n /// Programs relying on this functionality will need to deal with the error.\n-pub fn unsupported<T>() -> ::io::Result<T> {\n+pub fn unsupported<T>() -> crate::io::Result<T> {\n     Err(unsupported_err())\n }\n \n-pub fn unsupported_err() -> ::io::Error {\n-    ::io::Error::new(::io::ErrorKind::Other,\n+pub fn unsupported_err() -> crate::io::Error {\n+    crate::io::Error::new(ErrorKind::Other,\n                    \"operation not supported on SGX yet\")\n }\n \n@@ -55,58 +56,58 @@ pub fn unsupported_err() -> ::io::Error {\n /// returned, the program might very well be able to function normally. This is\n /// what happens when `SGX_INEFFECTIVE_ERROR` is set to `true`. If it is\n /// `false`, the behavior is the same as `unsupported`.\n-pub fn sgx_ineffective<T>(v: T) -> ::io::Result<T> {\n+pub fn sgx_ineffective<T>(v: T) -> crate::io::Result<T> {\n     static SGX_INEFFECTIVE_ERROR: AtomicBool = AtomicBool::new(false);\n     if SGX_INEFFECTIVE_ERROR.load(Ordering::Relaxed) {\n-        Err(::io::Error::new(::io::ErrorKind::Other,\n+        Err(crate::io::Error::new(ErrorKind::Other,\n                        \"operation can't be trusted to have any effect on SGX\"))\n     } else {\n         Ok(v)\n     }\n }\n \n-pub fn decode_error_kind(code: i32) -> ::io::ErrorKind {\n+pub fn decode_error_kind(code: i32) -> ErrorKind {\n     use fortanix_sgx_abi::Error;\n \n     // FIXME: not sure how to make sure all variants of Error are covered\n     if code == Error::NotFound as _ {\n-        ::io::ErrorKind::NotFound\n+        ErrorKind::NotFound\n     } else if code == Error::PermissionDenied as _ {\n-        ::io::ErrorKind::PermissionDenied\n+        ErrorKind::PermissionDenied\n     } else if code == Error::ConnectionRefused as _ {\n-        ::io::ErrorKind::ConnectionRefused\n+        ErrorKind::ConnectionRefused\n     } else if code == Error::ConnectionReset as _ {\n-        ::io::ErrorKind::ConnectionReset\n+        ErrorKind::ConnectionReset\n     } else if code == Error::ConnectionAborted as _ {\n-        ::io::ErrorKind::ConnectionAborted\n+        ErrorKind::ConnectionAborted\n     } else if code == Error::NotConnected as _ {\n-        ::io::ErrorKind::NotConnected\n+        ErrorKind::NotConnected\n     } else if code == Error::AddrInUse as _ {\n-        ::io::ErrorKind::AddrInUse\n+        ErrorKind::AddrInUse\n     } else if code == Error::AddrNotAvailable as _ {\n-        ::io::ErrorKind::AddrNotAvailable\n+        ErrorKind::AddrNotAvailable\n     } else if code == Error::BrokenPipe as _ {\n-        ::io::ErrorKind::BrokenPipe\n+        ErrorKind::BrokenPipe\n     } else if code == Error::AlreadyExists as _ {\n-        ::io::ErrorKind::AlreadyExists\n+        ErrorKind::AlreadyExists\n     } else if code == Error::WouldBlock as _ {\n-        ::io::ErrorKind::WouldBlock\n+        ErrorKind::WouldBlock\n     } else if code == Error::InvalidInput as _ {\n-        ::io::ErrorKind::InvalidInput\n+        ErrorKind::InvalidInput\n     } else if code == Error::InvalidData as _ {\n-        ::io::ErrorKind::InvalidData\n+        ErrorKind::InvalidData\n     } else if code == Error::TimedOut as _ {\n-        ::io::ErrorKind::TimedOut\n+        ErrorKind::TimedOut\n     } else if code == Error::WriteZero as _ {\n-        ::io::ErrorKind::WriteZero\n+        ErrorKind::WriteZero\n     } else if code == Error::Interrupted as _ {\n-        ::io::ErrorKind::Interrupted\n+        ErrorKind::Interrupted\n     } else if code == Error::Other as _ {\n-        ::io::ErrorKind::Other\n+        ErrorKind::Other\n     } else if code == Error::UnexpectedEof as _ {\n-        ::io::ErrorKind::UnexpectedEof\n+        ErrorKind::UnexpectedEof\n     } else {\n-        ::io::ErrorKind::Other\n+        ErrorKind::Other\n     }\n }\n \n@@ -131,9 +132,9 @@ pub unsafe fn abort_internal() -> ! {\n pub fn hashmap_random_keys() -> (u64, u64) {\n     fn rdrand64() -> u64 {\n         unsafe {\n-            let mut ret: u64 = ::mem::uninitialized();\n+            let mut ret: u64 = crate::mem::uninitialized();\n             for _ in 0..10 {\n-                if ::arch::x86_64::_rdrand64_step(&mut ret) == 1 {\n+                if crate::arch::x86_64::_rdrand64_step(&mut ret) == 1 {\n                     return ret;\n                 }\n             }\n@@ -143,7 +144,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     (rdrand64(), rdrand64())\n }\n \n-pub use sys_common::{AsInner, FromInner, IntoInner};\n+pub use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n pub trait TryIntoInner<Inner>: Sized {\n     fn try_into_inner(self) -> Result<Inner, Self>;"}, {"sha": "ab8b2681393f89a4fea26b6261e4b4f1182cacfc", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,12 @@\n-use fmt;\n-use io::{self, IoVec, IoVecMut};\n-use net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n-use time::Duration;\n-use sys::{unsupported, Void, sgx_ineffective, AsInner, FromInner, IntoInner, TryIntoInner};\n-use sys::fd::FileDesc;\n-use convert::TryFrom;\n-use error;\n-use sync::Arc;\n+use crate::fmt;\n+use crate::io::{self, IoVec, IoVecMut};\n+use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n+use crate::time::Duration;\n+use crate::sys::{unsupported, Void, sgx_ineffective, AsInner, FromInner, IntoInner, TryIntoInner};\n+use crate::sys::fd::FileDesc;\n+use crate::convert::TryFrom;\n+use crate::error;\n+use crate::sync::Arc;\n \n use super::abi::usercalls;\n "}, {"sha": "2725e66ce5de4001d43489e1e517b8264e0118fd", "filename": "src/libstd/sys/sgx/os.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,17 +1,17 @@\n use fortanix_sgx_abi::{Error, RESULT_SUCCESS};\n \n-use error::Error as StdError;\n-use ffi::{OsString, OsStr};\n-use fmt;\n-use io;\n-use path::{self, PathBuf};\n-use str;\n-use sys::{unsupported, Void, sgx_ineffective, decode_error_kind};\n-use collections::HashMap;\n-use vec;\n-use sync::Mutex;\n-use sync::atomic::{AtomicUsize, Ordering};\n-use sync::Once;\n+use crate::error::Error as StdError;\n+use crate::ffi::{OsString, OsStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::path::{self, PathBuf};\n+use crate::str;\n+use crate::sys::{unsupported, Void, sgx_ineffective, decode_error_kind};\n+use crate::collections::HashMap;\n+use crate::vec;\n+use crate::sync::Mutex;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sync::Once;\n \n pub fn errno() -> i32 {\n     RESULT_SUCCESS"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/sgx/os_str.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,15 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-use borrow::Cow;\n-use fmt;\n-use str;\n-use mem;\n-use rc::Rc;\n-use sync::Arc;\n-use sys_common::{AsInner, IntoInner};\n-use sys_common::bytestring::debug_fmt_bytestring;\n+use crate::borrow::Cow;\n+use crate::fmt;\n+use crate::str;\n+use crate::mem;\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::bytestring::debug_fmt_bytestring;\n+\n use core::str::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]"}, {"sha": "1115de1fbe5bafa40b043a2d0dfd02d1b79f960d", "filename": "src/libstd/sys/sgx/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use path::Prefix;\n-use ffi::OsStr;\n+use crate::path::Prefix;\n+use crate::ffi::OsStr;\n \n #[inline]\n pub fn is_sep_byte(b: u8) -> bool {"}, {"sha": "2582b993b608eda93136a5558784899814987cae", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io;\n-use sys::Void;\n+use crate::io;\n+use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n "}, {"sha": "c49daaa16320e2b04385cf5e1212948e6b4f7edd", "filename": "src/libstd/sys/sgx/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsStr;\n-use fmt;\n-use io;\n-use sys::fs::File;\n-use sys::pipe::AnonPipe;\n-use sys::{unsupported, Void};\n-use sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::fs::File;\n+use crate::sys::pipe::AnonPipe;\n+use crate::sys::{unsupported, Void};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command"}, {"sha": "372760bbf26b4221959e1f7a243932d630785c5e", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,12 @@\n-use alloc::{self, Layout};\n-use num::NonZeroUsize;\n-use slice;\n-use str;\n+use crate::alloc::{self, Layout};\n+use crate::num::NonZeroUsize;\n+use crate::slice;\n+use crate::str;\n \n use super::waitqueue::{\n     try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n };\n-use mem;\n+use crate::mem;\n \n pub struct RWLock {\n     readers: SpinMutex<WaitVariable<Option<NonZeroUsize>>>,\n@@ -206,7 +206,7 @@ pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n #[no_mangle]\n // NB. used by both libunwind and libpanic_abort\n pub unsafe extern \"C\" fn __rust_abort() {\n-    ::sys::abort_internal();\n+    crate::sys::abort_internal();\n }\n \n #[no_mangle]\n@@ -224,8 +224,8 @@ mod tests {\n \n     use super::*;\n     use core::array::FixedSizeArray;\n-    use mem::MaybeUninit;\n-    use {mem, ptr};\n+    use crate::mem::MaybeUninit;\n+    use crate::{mem, ptr};\n \n     // The below test verifies that the bytes of initialized RWLock are the ones\n     // we use in libunwind."}, {"sha": "f2c6892bfb7fde6f773ea8613b0ba927745063cd", "filename": "src/libstd/sys/sgx/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n use fortanix_sgx_abi as abi;\n \n-use io;\n-use sys::fd::FileDesc;\n+use crate::io;\n+use crate::sys::fd::FileDesc;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -52,7 +52,7 @@ impl io::Write for Stderr {\n     }\n }\n \n-pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n+pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n     // FIXME: Rust normally maps Unix EBADF to `Other`"}, {"sha": "13569062ac184cfd99675c800c0c0bb9d33de149", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n-use boxed::FnBox;\n-use ffi::CStr;\n-use io;\n-use time::Duration;\n+use crate::boxed::FnBox;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::time::Duration;\n \n use super::abi::usercalls;\n \n@@ -10,9 +10,9 @@ pub struct Thread(task_queue::JoinHandle);\n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n mod task_queue {\n-    use sync::{Mutex, MutexGuard, Once};\n-    use sync::mpsc;\n-    use boxed::FnBox;\n+    use crate::sync::{Mutex, MutexGuard, Once};\n+    use crate::sync::mpsc;\n+    use crate::boxed::FnBox;\n \n     pub type JoinHandle = mpsc::Receiver<()>;\n "}, {"sha": "e4f789c3e36565db4086523f55706df3820db074", "filename": "src/libstd/sys/sgx/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use time::Duration;\n+use crate::time::Duration;\n use super::abi::usercalls;\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]"}, {"sha": "1dbf2afbf4987e7b47368d7ecca303b69200922f", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -10,8 +10,8 @@\n /// recorded in the enclave. The wakeup event state is protected by a spinlock.\n /// The queue and associated wait state are stored in a `WaitVariable`.\n \n-use ops::{Deref, DerefMut};\n-use num::NonZeroUsize;\n+use crate::ops::{Deref, DerefMut};\n+use crate::num::NonZeroUsize;\n \n use fortanix_sgx_abi::{Tcs, EV_UNPARK, WAIT_INDEFINITE};\n use super::abi::usercalls;\n@@ -211,8 +211,8 @@ impl WaitQueue {\n /// A doubly-linked list where callers are in charge of memory allocation\n /// of the nodes in the list.\n mod unsafe_list {\n-    use ptr::NonNull;\n-    use mem;\n+    use crate::ptr::NonNull;\n+    use crate::mem;\n \n     pub struct UnsafeListEntry<T> {\n         next: NonNull<UnsafeListEntry<T>>,\n@@ -341,7 +341,7 @@ mod unsafe_list {\n     #[cfg(test)]\n     mod tests {\n         use super::*;\n-        use cell::Cell;\n+        use crate::cell::Cell;\n \n         unsafe fn assert_empty<T>(list: &mut UnsafeList<T>) {\n             assert!(list.pop().is_none(), \"assertion failed: list is not empty\");\n@@ -404,9 +404,9 @@ mod unsafe_list {\n /// Trivial spinlock-based implementation of `sync::Mutex`.\n // FIXME: Perhaps use Intel TSX to avoid locking?\n mod spin_mutex {\n-    use cell::UnsafeCell;\n-    use sync::atomic::{AtomicBool, Ordering, spin_loop_hint};\n-    use ops::{Deref, DerefMut};\n+    use crate::cell::UnsafeCell;\n+    use crate::sync::atomic::{AtomicBool, Ordering, spin_loop_hint};\n+    use crate::ops::{Deref, DerefMut};\n \n     #[derive(Default)]\n     pub struct SpinMutex<T> {\n@@ -496,8 +496,8 @@ mod spin_mutex {\n         #![allow(deprecated)]\n \n         use super::*;\n-        use sync::Arc;\n-        use thread;\n+        use crate::sync::Arc;\n+        use crate::thread;\n \n         #[test]\n         fn sleep() {\n@@ -519,8 +519,8 @@ mod spin_mutex {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use sync::Arc;\n-    use thread;\n+    use crate::sync::Arc;\n+    use crate::thread;\n \n     #[test]\n     fn queue() {"}, {"sha": "8e8f5017da75a1abc8fde700edb510caa45a13d0", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,6 @@\n-use ptr;\n-use libc;\n-use sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n-use alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr;\n+use crate::sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n+use crate::alloc::{GlobalAlloc, Layout, System};\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "6774160bb2561596117de3b16800bd8e7ff31fcf", "filename": "src/libstd/sys/unix/android.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -21,7 +21,7 @@\n use libc::{c_int, c_void, sighandler_t, size_t, ssize_t};\n use libc::{ftruncate, pread, pwrite};\n \n-use io;\n+use crate::io;\n use super::{cvt, cvt_r};\n \n // The `log2` and `log2f` functions apparently appeared in android-18, or at\n@@ -49,12 +49,12 @@ use super::{cvt, cvt_r};\n \n #[cfg(not(test))]\n pub fn log2f32(f: f32) -> f32 {\n-    f.ln() * ::f32::consts::LOG2_E\n+    f.ln() * crate::f32::consts::LOG2_E\n }\n \n #[cfg(not(test))]\n pub fn log2f64(f: f64) -> f64 {\n-    f.ln() * ::f64::consts::LOG2_E\n+    f.ln() * crate::f64::consts::LOG2_E\n }\n \n // Back in the day [1] the `signal` function was just an inline wrapper\n@@ -117,7 +117,7 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n pub unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: i64)\n     -> io::Result<ssize_t>\n {\n-    use convert::TryInto;\n+    use crate::convert::TryInto;\n     weak!(fn pread64(c_int, *mut c_void, size_t, i64) -> ssize_t);\n     pread64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n         if let Ok(o) = offset.try_into() {\n@@ -133,7 +133,7 @@ pub unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: i6\n pub unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: size_t, offset: i64)\n     -> io::Result<ssize_t>\n {\n-    use convert::TryInto;\n+    use crate::convert::TryInto;\n     weak!(fn pwrite64(c_int, *const c_void, size_t, i64) -> ssize_t);\n     pwrite64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n         if let Ok(o) = offset.try_into() {"}, {"sha": "18de1096df2a208a3121447a8548c0ff804c7b72", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -5,9 +5,9 @@\n \n #![allow(dead_code)] // runtime init functions not used during testing\n \n-use ffi::OsString;\n-use marker::PhantomData;\n-use vec;\n+use crate::ffi::OsString;\n+use crate::marker::PhantomData;\n+use crate::vec;\n \n /// One-time global initialization.\n pub unsafe fn init(argc: isize, argv: *const *const u8) { imp::init(argc, argv) }\n@@ -59,14 +59,13 @@ impl DoubleEndedIterator for Args {\n           target_os = \"fuchsia\",\n           target_os = \"hermit\"))]\n mod imp {\n-    use os::unix::prelude::*;\n-    use ptr;\n-    use ffi::{CStr, OsString};\n-    use marker::PhantomData;\n-    use libc;\n+    use crate::os::unix::prelude::*;\n+    use crate::ptr;\n+    use crate::ffi::{CStr, OsString};\n+    use crate::marker::PhantomData;\n     use super::Args;\n \n-    use sys_common::mutex::Mutex;\n+    use crate::sys_common::mutex::Mutex;\n \n     static mut ARGC: isize = 0;\n     static mut ARGV: *const *const u8 = ptr::null();\n@@ -107,9 +106,8 @@ mod imp {\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\"))]\n mod imp {\n-    use ffi::CStr;\n-    use marker::PhantomData;\n-    use libc;\n+    use crate::ffi::CStr;\n+    use crate::marker::PhantomData;\n     use super::Args;\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n@@ -120,7 +118,7 @@ mod imp {\n \n     #[cfg(target_os = \"macos\")]\n     pub fn args() -> Args {\n-        use os::unix::prelude::*;\n+        use crate::os::unix::prelude::*;\n         extern {\n             // These functions are in crt_externs.h.\n             fn _NSGetArgc() -> *mut libc::c_int;\n@@ -155,9 +153,9 @@ mod imp {\n     // res\n     #[cfg(target_os = \"ios\")]\n     pub fn args() -> Args {\n-        use ffi::OsString;\n-        use mem;\n-        use str;\n+        use crate::ffi::OsString;\n+        use crate::mem;\n+        use crate::str;\n \n         extern {\n             fn sel_registerName(name: *const libc::c_uchar) -> Sel;"}, {"sha": "0887e5a4df937ed97486ceb77367defe4ab1f833", "filename": "src/libstd/sys/unix/backtrace/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -83,8 +83,9 @@ mod printing;\n \n #[cfg(not(target_os = \"emscripten\"))]\n pub mod gnu {\n-    use io;\n-    use fs;\n+    use crate::io;\n+    use crate::fs;\n+\n     use libc::c_char;\n \n     #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n@@ -94,8 +95,8 @@ pub mod gnu {\n \n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n-        use env;\n-        use os::unix::ffi::OsStrExt;\n+        use crate::env;\n+        use crate::os::unix::ffi::OsStrExt;\n \n         let filename = env::current_exe()?;\n         let file = fs::File::open(&filename)?;"}, {"sha": "cf3bda640e92b52a16bb1680153dc0a6e7d03d39", "filename": "src/libstd/sys/unix/backtrace/printing/dladdr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,8 @@\n-use io;\n-use intrinsics;\n-use ffi::CStr;\n-use libc;\n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n+use crate::io;\n+use crate::intrinsics;\n+use crate::ffi::CStr;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n \n pub fn resolve_symname<F>(frame: Frame,\n                           callback: F,"}, {"sha": "d090caede437abc25749831a46fe2d99896a7300", "filename": "src/libstd/sys/unix/backtrace/printing/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n mod dladdr;\n \n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n-use io;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n+use crate::io;\n \n #[cfg(target_os = \"emscripten\")]\n pub use self::dladdr::resolve_symname;\n@@ -16,14 +16,14 @@ where\n }\n \n #[cfg(not(target_os = \"emscripten\"))]\n-pub use sys_common::gnu::libbacktrace::foreach_symbol_fileline;\n+pub use crate::sys_common::gnu::libbacktrace::foreach_symbol_fileline;\n \n #[cfg(not(target_os = \"emscripten\"))]\n pub fn resolve_symname<F>(frame: Frame, callback: F, bc: &BacktraceContext) -> io::Result<()>\n where\n     F: FnOnce(Option<&str>) -> io::Result<()>\n {\n-    ::sys_common::gnu::libbacktrace::resolve_symname(frame, |symname| {\n+    crate::sys_common::gnu::libbacktrace::resolve_symname(frame, |symname| {\n         if symname.is_some() {\n             callback(symname)\n         } else {"}, {"sha": "a628d107ad6fbd94f523f7c49a951cdea4c941c6", "filename": "src/libstd/sys/unix/backtrace/tracing/backtrace_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -8,10 +8,10 @@\n /// simple to use it should be used only on iOS devices as the only viable\n /// option.\n \n-use io;\n-use libc;\n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n+use crate::io;\n+use crate::ptr;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n \n #[inline(never)] // if we know this is a function call, we can skip it when\n                  // tracing\n@@ -20,7 +20,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n {\n     const FRAME_LEN: usize = 100;\n     assert!(FRAME_LEN >= frames.len());\n-    let mut raw_frames = [::ptr::null_mut(); FRAME_LEN];\n+    let mut raw_frames = [ptr::null_mut(); FRAME_LEN];\n     let nb_frames = unsafe {\n         backtrace(raw_frames.as_mut_ptr(), raw_frames.len() as libc::c_int)\n     } as usize;"}, {"sha": "abbeca0fde6e7e26056b6453edec68a69820a8c3", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use error::Error;\n-use io;\n-use libc;\n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n \n use unwind as uw;\n \n@@ -20,8 +20,8 @@ impl Error for UnwindError {\n     }\n }\n \n-impl ::fmt::Display for UnwindError {\n-    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+impl fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}: {:?}\", self.description(), self.0)\n     }\n }"}, {"sha": "47fb6792f08ae9966319de6d0cab3a522151955f", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,6 @@\n-use cell::UnsafeCell;\n-use libc;\n-use sys::mutex::{self, Mutex};\n-use time::Duration;\n+use crate::cell::UnsafeCell;\n+use crate::sys::mutex::{self, Mutex};\n+use crate::time::Duration;\n \n pub struct Condvar { inner: UnsafeCell<libc::pthread_cond_t> }\n \n@@ -41,7 +40,7 @@ impl Condvar {\n                   target_os = \"android\",\n                   target_os = \"hermit\")))]\n     pub unsafe fn init(&mut self) {\n-        use mem;\n+        use crate::mem;\n         let mut attr: libc::pthread_condattr_t = mem::uninitialized();\n         let r = libc::pthread_condattr_init(&mut attr);\n         assert_eq!(r, 0);\n@@ -80,7 +79,7 @@ impl Condvar {\n                   target_os = \"android\",\n                   target_os = \"hermit\")))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n-        use mem;\n+        use crate::mem;\n \n         let mut now: libc::timespec = mem::zeroed();\n         let r = libc::clock_gettime(libc::CLOCK_MONOTONIC, &mut now);\n@@ -110,8 +109,8 @@ impl Condvar {\n     // https://github.com/llvm-mirror/libcxx/blob/release_35/include/__mutex_base#L367\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\", target_os = \"hermit\"))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, mut dur: Duration) -> bool {\n-        use ptr;\n-        use time::Instant;\n+        use crate::ptr;\n+        use crate::time::Instant;\n \n         // 1000 years\n         let max_dur = Duration::from_secs(1000 * 365 * 86400);"}, {"sha": "0c02323981521cbd3a561e99d2b8bac78043c8b3", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use ffi::{OsStr, OsString};\n-use mem;\n-use sys::os_str::Buf;\n-use sys_common::{FromInner, IntoInner, AsInner};\n+use crate::ffi::{OsStr, OsString};\n+use crate::mem;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{FromInner, IntoInner, AsInner};\n \n /// Unix-specific extensions to [`OsString`].\n ///"}, {"sha": "d9baac993c42c9419bef73c3d5d9dd54984cd908", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,13 +2,12 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs::{self, Permissions, OpenOptions};\n-use io;\n-use libc;\n-use path::Path;\n-use sys;\n-use sys_common::{FromInner, AsInner, AsInnerMut};\n-use sys::platform::fs::MetadataExt as UnixMetadataExt;\n+use crate::fs::{self, Permissions, OpenOptions};\n+use crate::io;\n+use crate::path::Path;\n+use crate::sys;\n+use crate::sys_common::{FromInner, AsInner, AsInnerMut};\n+use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n \n /// Unix-specific extensions to [`File`].\n ///"}, {"sha": "1a0b3b8962bd1f028872d5f89df0133de396818d", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,12 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs;\n-use os::raw;\n-use sys;\n-use io;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use libc;\n+use crate::fs;\n+use crate::os::raw;\n+use crate::sys;\n+use crate::io;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4fc79efe7ceb54bf40fe51aad495ac8c786b79dc", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -15,19 +15,19 @@ mod libc {\n     pub struct sockaddr_un;\n }\n \n-use ascii;\n-use ffi::OsStr;\n-use fmt;\n-use io::{self, Initializer, IoVec, IoVecMut};\n-use mem;\n-use net::{self, Shutdown};\n-use os::unix::ffi::OsStrExt;\n-use os::unix::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n-use path::Path;\n-use time::Duration;\n-use sys::{self, cvt};\n-use sys::net::Socket;\n-use sys_common::{self, AsInner, FromInner, IntoInner};\n+use crate::ascii;\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::net::{self, Shutdown};\n+use crate::os::unix::ffi::OsStrExt;\n+use crate::os::unix::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n+use crate::path::Path;\n+use crate::time::Duration;\n+use crate::sys::{self, cvt};\n+use crate::sys::net::Socket;\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n           target_os = \"dragonfly\", target_os = \"freebsd\",\n@@ -1481,11 +1481,11 @@ impl IntoRawFd for UnixDatagram {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod test {\n-    use thread;\n-    use io::{self, ErrorKind};\n-    use io::prelude::*;\n-    use time::Duration;\n-    use sys_common::io::test::tmpdir;\n+    use crate::thread;\n+    use crate::io::{self, ErrorKind};\n+    use crate::io::prelude::*;\n+    use crate::time::Duration;\n+    use crate::sys_common::io::test::tmpdir;\n \n     use super::*;\n "}, {"sha": "7ace95edef9fb46e8da2039efef53c87af78e2e9", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use io;\n-use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n-use process;\n-use sys;\n-use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n+use crate::io;\n+use crate::os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n+use crate::process;\n+use crate::sys;\n+use crate::sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n ///\n@@ -209,5 +209,5 @@ impl IntoRawFd for process::ChildStderr {\n /// Returns the OS-assigned process identifier associated with this process's parent.\n #[stable(feature = \"unix_ppid\", since = \"1.27.0\")]\n pub fn parent_id() -> u32 {\n-    ::sys::os::getppid()\n+    crate::sys::os::getppid()\n }"}, {"sha": "75ae54a919ab3e5c04ffdb6081acdfbedf64c8e3", "filename": "src/libstd/sys/unix/ext/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,10 +14,10 @@\n \n #[doc(inline)]\n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub use sys::platform::raw::pthread_t;\n+pub use crate::sys::platform::raw::pthread_t;\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use sys::platform::raw::{dev_t, ino_t, mode_t, nlink_t, off_t, blksize_t};\n+pub use crate::sys::platform::raw::{dev_t, ino_t, mode_t, nlink_t, off_t, blksize_t};\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use sys::platform::raw::{blkcnt_t, time_t};\n+pub use crate::sys::platform::raw::{blkcnt_t, time_t};"}, {"sha": "759ef6236e80459f272ca07f71aa33fa1ba0527a", "filename": "src/libstd/sys/unix/ext/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,9 +3,9 @@\n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n \n #[allow(deprecated)]\n-use os::unix::raw::pthread_t;\n-use sys_common::{AsInner, IntoInner};\n-use thread::JoinHandle;\n+use crate::os::unix::raw::pthread_t;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::thread::JoinHandle;\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n #[allow(deprecated)]"}, {"sha": "17478dce4fe518a2e4a1d18a922175f773d5ea60", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -12,9 +12,8 @@\n // Due to rust-lang/rust#18804, make sure this is not generic!\n #[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-    use libc;\n-    use mem;\n-    use sys_common::thread_local::register_dtor_fallback;\n+    use crate::mem;\n+    use crate::sys_common::thread_local::register_dtor_fallback;\n \n     extern {\n         #[linkage = \"extern_weak\"]\n@@ -45,8 +44,8 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n // _tlv_atexit.\n #[cfg(target_os = \"macos\")]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-    use cell::Cell;\n-    use ptr;\n+    use crate::cell::Cell;\n+    use crate::ptr;\n \n     #[thread_local]\n     static REGISTERED: Cell<bool> = Cell::new(false);"}, {"sha": "c274ad26cb1fe9d4b827b6d9d8d26ae56dfb25f1", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,13 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n-use cmp;\n-use io::{self, Read, Initializer, IoVec, IoVecMut};\n-use libc::{self, c_int, c_void, ssize_t};\n-use mem;\n-use sync::atomic::{AtomicBool, Ordering};\n-use sys::cvt;\n-use sys_common::AsInner;\n+use crate::cmp;\n+use crate::io::{self, Read, Initializer, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sys::cvt;\n+use crate::sys_common::AsInner;\n+\n+use libc::{c_int, c_void, ssize_t};\n \n #[derive(Debug)]\n pub struct FileDesc {\n@@ -74,7 +75,7 @@ impl FileDesc {\n         unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            use convert::TryInto;\n+            use crate::convert::TryInto;\n             use libc::pread64;\n             // pread64 on emscripten actually takes a 32 bit offset\n             if let Ok(o) = offset.try_into() {\n@@ -131,7 +132,7 @@ impl FileDesc {\n         unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            use convert::TryInto;\n+            use crate::convert::TryInto;\n             use libc::pwrite64;\n             // pwrite64 on emscripten actually takes a 32 bit offset\n             if let Ok(o) = offset.try_into() {"}, {"sha": "3b80b475a93db164a27993d914c7e2da9f4eb8f5", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,17 +1,18 @@\n-use os::unix::prelude::*;\n-\n-use ffi::{CString, CStr, OsString, OsStr};\n-use fmt;\n-use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{self, c_int, mode_t};\n-use mem;\n-use path::{Path, PathBuf};\n-use ptr;\n-use sync::Arc;\n-use sys::fd::FileDesc;\n-use sys::time::SystemTime;\n-use sys::{cvt, cvt_r};\n-use sys_common::{AsInner, FromInner};\n+use crate::os::unix::prelude::*;\n+\n+use crate::ffi::{CString, CStr, OsString, OsStr};\n+use crate::fmt;\n+use crate::io::{self, Error, ErrorKind, SeekFrom};\n+use crate::mem;\n+use crate::path::{Path, PathBuf};\n+use crate::ptr;\n+use crate::sync::Arc;\n+use crate::sys::fd::FileDesc;\n+use crate::sys::time::SystemTime;\n+use crate::sys::{cvt, cvt_r};\n+use crate::sys_common::{AsInner, FromInner};\n+\n+use libc::{c_int, mode_t};\n \n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"l4re\"))]\n use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r, open64};\n@@ -217,6 +218,8 @@ impl Iterator for ReadDir {\n \n     #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\"))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n+        use crate::slice;\n+\n         unsafe {\n             loop {\n                 // Although readdir_r(3) would be a correct function to use here because\n@@ -239,8 +242,8 @@ impl Iterator for ReadDir {\n \n                 let ret = DirEntry {\n                     entry: *entry_ptr,\n-                    name: ::slice::from_raw_parts(name as *const u8,\n-                                                  namelen as usize).to_owned().into_boxed_slice(),\n+                    name: slice::from_raw_parts(name as *const u8,\n+                                                namelen as usize).to_owned().into_boxed_slice(),\n                     dir: self.clone()\n                 };\n                 if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {\n@@ -365,9 +368,10 @@ impl DirEntry {\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\"))]\n     fn name_bytes(&self) -> &[u8] {\n+        use crate::slice;\n         unsafe {\n-            ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n-                                    self.entry.d_namlen as usize)\n+            slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n+                                  self.entry.d_namlen as usize)\n         }\n     }\n     #[cfg(any(target_os = \"android\",\n@@ -475,7 +479,7 @@ impl File {\n         // that we support, so we only do this on Linux currently.\n         #[cfg(target_os = \"linux\")]\n         fn ensure_cloexec(fd: &FileDesc) -> io::Result<()> {\n-            use sync::atomic::{AtomicUsize, Ordering};\n+            use crate::sync::atomic::{AtomicUsize, Ordering};\n \n             const OPEN_CLOEXEC_UNKNOWN: usize = 0;\n             const OPEN_CLOEXEC_SUPPORTED: usize = 1;\n@@ -542,7 +546,7 @@ impl File {\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n         #[cfg(target_os = \"android\")]\n-        return ::sys::android::ftruncate64(self.0.raw(), size);\n+        return crate::sys::android::ftruncate64(self.0.raw(), size);\n \n         #[cfg(not(target_os = \"android\"))]\n         return cvt_r(|| unsafe {\n@@ -825,7 +829,7 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-    use fs::File;\n+    use crate::fs::File;\n     if !from.is_file() {\n         return Err(Error::new(ErrorKind::InvalidInput,\n                               \"the source path is not an existing regular file\"))\n@@ -842,9 +846,9 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-    use cmp;\n-    use fs::File;\n-    use sync::atomic::{AtomicBool, Ordering};\n+    use crate::cmp;\n+    use crate::fs::File;\n+    use crate::sync::atomic::{AtomicBool, Ordering};\n \n     // Kernel prior to 4.5 don't have copy_file_range\n     // We store the availability in a global to avoid unnecessary syscalls"}, {"sha": "b6e8cc738946b9a1a4429471598b46ca8eb2ef82", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,15 +4,15 @@ macro_rules! unimpl {\n \n pub mod net {\n     #![allow(warnings)]\n-    use fmt;\n-    use io::{self, IoVec, IoVecMut};\n-    use libc;\n-    use net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n-    use sys_common::{AsInner, FromInner, IntoInner};\n-    use sys::fd::FileDesc;\n-    use time::Duration;\n-    use convert::TryFrom;\n-\n+    use crate::fmt;\n+    use crate::io::{self, IoVec, IoVecMut};\n+    use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n+    use crate::sys_common::{AsInner, FromInner, IntoInner};\n+    use crate::sys::fd::FileDesc;\n+    use crate::time::Duration;\n+    use crate::convert::TryFrom;\n+\n+    #[allow(unused_extern_crates)]\n     pub extern crate libc as netc;\n \n     pub struct Socket(FileDesc);"}, {"sha": "1984678bdde4e5d27c14db1db6a7bfd05a9e582b", "filename": "src/libstd/sys/unix/memchr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,8 +2,6 @@\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    use libc;\n-\n     let p = unsafe {\n         libc::memchr(\n             haystack.as_ptr() as *const libc::c_void,\n@@ -21,8 +19,6 @@ pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n \n     #[cfg(target_os = \"linux\")]\n     fn memrchr_specific(needle: u8, haystack: &[u8]) -> Option<usize> {\n-        use libc;\n-\n         // GNU's memrchr() will - unlike memchr() - error if haystack is empty.\n         if haystack.is_empty() {return None}\n         let p = unsafe {\n@@ -40,7 +36,7 @@ pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n \n     #[cfg(not(target_os = \"linux\"))]\n     fn memrchr_specific(needle: u8, haystack: &[u8]) -> Option<usize> {\n-        ::core::slice::memchr::memrchr(needle, haystack)\n+        core::slice::memchr::memrchr(needle, haystack)\n     }\n \n     memrchr_specific(needle, haystack)"}, {"sha": "fbe3444311e5fff704c97be43b7c04a013eda68e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,24 +1,23 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use io::ErrorKind;\n-use libc;\n-\n-#[cfg(any(rustdoc, target_os = \"linux\"))] pub use os::linux as platform;\n-\n-#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use os::android as platform;\n-#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n-#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n-#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use os::haiku as platform;\n-#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use os::ios as platform;\n-#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use os::solaris as platform;\n-#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n-#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n-#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use os::linux as platform;\n-#[cfg(all(not(rustdoc), target_os = \"hermit\"))]    pub use os::hermit as platform;\n+use crate::io::ErrorKind;\n+\n+#[cfg(any(rustdoc, target_os = \"linux\"))] pub use crate::os::linux as platform;\n+\n+#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use crate::os::android as platform;\n+#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use crate::os::bitrig as platform;\n+#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use crate::os::dragonfly as platform;\n+#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use crate::os::freebsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use crate::os::haiku as platform;\n+#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use crate::os::ios as platform;\n+#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use crate::os::macos as platform;\n+#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use crate::os::netbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use crate::os::openbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use crate::os::solaris as platform;\n+#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use crate::os::emscripten as platform;\n+#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use crate::os::fuchsia as platform;\n+#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use crate::os::linux as platform;\n+#[cfg(all(not(rustdoc), target_os = \"hermit\"))]    pub use crate::os::hermit as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;\n@@ -82,7 +81,7 @@ pub fn init() {\n }\n \n #[cfg(target_os = \"android\")]\n-pub use sys::android::signal;\n+pub use crate::sys::android::signal;\n #[cfg(not(target_os = \"android\"))]\n pub use libc::signal;\n \n@@ -127,15 +126,15 @@ macro_rules! impl_is_minus_one {\n \n impl_is_minus_one! { i8 i16 i32 i64 isize }\n \n-pub fn cvt<T: IsMinusOne>(t: T) -> ::io::Result<T> {\n+pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n     if t.is_minus_one() {\n-        Err(::io::Error::last_os_error())\n+        Err(crate::io::Error::last_os_error())\n     } else {\n         Ok(t)\n     }\n }\n \n-pub fn cvt_r<T, F>(mut f: F) -> ::io::Result<T>\n+pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>\n     where T: IsMinusOne,\n           F: FnMut() -> T\n {\n@@ -155,5 +154,5 @@ pub fn cvt_r<T, F>(mut f: F) -> ::io::Result<T>\n // instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n // implemented as an illegal instruction.\n pub unsafe fn abort_internal() -> ! {\n-    ::libc::abort()\n+    libc::abort()\n }"}, {"sha": "b6a22e1962ab83237af605c93055f744f8df7694", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,5 @@\n-use cell::UnsafeCell;\n-use libc;\n-use mem;\n+use crate::cell::UnsafeCell;\n+use crate::mem;\n \n pub struct Mutex { inner: UnsafeCell<libc::pthread_mutex_t> }\n \n@@ -74,7 +73,6 @@ impl Mutex {\n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n     pub unsafe fn destroy(&self) {\n-        use libc;\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n         // mutex that was just initialized with libc::PTHREAD_MUTEX_INITIALIZER."}, {"sha": "8e8cdf837a9e2ad7248c9fc07b5e1b939743df95", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,16 +1,19 @@\n-use ffi::CStr;\n-use io::{self, IoVec, IoVecMut};\n-use libc::{self, c_int, c_void, size_t, sockaddr, socklen_t, EAI_SYSTEM, MSG_PEEK};\n-use mem;\n-use net::{SocketAddr, Shutdown};\n-use str;\n-use sys::fd::FileDesc;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use sys_common::net::{getsockopt, setsockopt, sockaddr_to_addr};\n-use time::{Duration, Instant};\n-use cmp;\n+use crate::ffi::CStr;\n+use crate::io::{self, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::net::{SocketAddr, Shutdown};\n+use crate::str;\n+use crate::sys::fd::FileDesc;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::sys_common::net::{getsockopt, setsockopt, sockaddr_to_addr};\n+use crate::time::{Duration, Instant};\n+use crate::cmp;\n+\n+use libc::{c_int, c_void, size_t, sockaddr, socklen_t, EAI_SYSTEM, MSG_PEEK};\n \n pub use sys::{cvt, cvt_r};\n+\n+#[allow(unused_extern_crates)]\n pub extern crate libc as netc;\n \n pub type wrlen_t = size_t;\n@@ -384,7 +387,7 @@ impl IntoInner<c_int> for Socket {\n // believe it's thread-safe).\n #[cfg(target_env = \"gnu\")]\n fn on_resolver_failure() {\n-    use sys;\n+    use crate::sys;\n \n     // If the version fails to parse, we treat it the same as \"not glibc\".\n     if let Some(version) = sys::os::glibc_version() {"}, {"sha": "e16d50d437b220a73fe56f090148b950c58ef21e", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,25 +2,26 @@\n \n #![allow(unused_imports)] // lots of cfg code here\n \n-use os::unix::prelude::*;\n-\n-use error::Error as StdError;\n-use ffi::{CString, CStr, OsString, OsStr};\n-use fmt;\n-use io;\n-use iter;\n-use libc::{self, c_int, c_char, c_void};\n-use marker::PhantomData;\n-use mem;\n-use memchr;\n-use path::{self, PathBuf};\n-use ptr;\n-use slice;\n-use str;\n-use sys_common::mutex::{Mutex, MutexGuard};\n-use sys::cvt;\n-use sys::fd;\n-use vec;\n+use crate::os::unix::prelude::*;\n+\n+use crate::error::Error as StdError;\n+use crate::ffi::{CString, CStr, OsString, OsStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::iter;\n+use crate::marker::PhantomData;\n+use crate::mem;\n+use crate::memchr;\n+use crate::path::{self, PathBuf};\n+use crate::ptr;\n+use crate::slice;\n+use crate::str;\n+use crate::sys_common::mutex::{Mutex, MutexGuard};\n+use crate::sys::cvt;\n+use crate::sys::fd;\n+use crate::vec;\n+\n+use libc::{c_int, c_char, c_void};\n \n const TMPBUF_SZ: usize = 128;\n \n@@ -207,13 +208,13 @@ pub fn current_exe() -> io::Result<PathBuf> {\n                        libc::KERN_PROC_PATHNAME as c_int,\n                        -1 as c_int];\n         let mut sz = 0;\n-        cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n+        cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as libc::c_uint,\n                          ptr::null_mut(), &mut sz, ptr::null_mut(), 0))?;\n         if sz == 0 {\n             return Err(io::Error::last_os_error())\n         }\n         let mut v: Vec<u8> = Vec::with_capacity(sz);\n-        cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n+        cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as libc::c_uint,\n                          v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n                          ptr::null_mut(), 0))?;\n         if sz == 0 {\n@@ -230,15 +231,15 @@ pub fn current_exe() -> io::Result<PathBuf> {\n         unsafe {\n             let mib = [libc::CTL_KERN, libc::KERN_PROC_ARGS, -1, libc::KERN_PROC_PATHNAME];\n             let mut path_len: usize = 0;\n-            cvt(libc::sysctl(mib.as_ptr(), mib.len() as ::libc::c_uint,\n+            cvt(libc::sysctl(mib.as_ptr(), mib.len() as libc::c_uint,\n                              ptr::null_mut(), &mut path_len,\n                              ptr::null(), 0))?;\n             if path_len <= 1 {\n                 return Err(io::Error::new(io::ErrorKind::Other,\n                            \"KERN_PROC_PATHNAME sysctl returned zero-length string\"))\n             }\n             let mut path: Vec<u8> = Vec::with_capacity(path_len);\n-            cvt(libc::sysctl(mib.as_ptr(), mib.len() as ::libc::c_uint,\n+            cvt(libc::sysctl(mib.as_ptr(), mib.len() as libc::c_uint,\n                              path.as_ptr() as *mut libc::c_void, &mut path_len,\n                              ptr::null(), 0))?;\n             path.set_len(path_len - 1); // chop off NUL\n@@ -248,7 +249,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     fn procfs() -> io::Result<PathBuf> {\n         let curproc_exe = path::Path::new(\"/proc/curproc/exe\");\n         if curproc_exe.is_file() {\n-            return ::fs::read_link(curproc_exe);\n+            return crate::fs::read_link(curproc_exe);\n         }\n         Err(io::Error::new(io::ErrorKind::Other,\n                            \"/proc/curproc/exe doesn't point to regular file.\"))\n@@ -277,7 +278,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n         }\n         let argv0 = CStr::from_ptr(argv[0]).to_bytes();\n         if argv0[0] == b'.' || argv0.iter().any(|b| *b == b'/') {\n-            ::fs::canonicalize(OsStr::from_bytes(argv0))\n+            crate::fs::canonicalize(OsStr::from_bytes(argv0))\n         } else {\n             Ok(PathBuf::from(OsStr::from_bytes(argv0)))\n         }\n@@ -286,7 +287,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    match ::fs::read_link(\"/proc/self/exe\") {\n+    match crate::fs::read_link(\"/proc/self/exe\") {\n         Err(ref e) if e.kind() == io::ErrorKind::NotFound => {\n             Err(io::Error::new(\n                 io::ErrorKind::Other,\n@@ -373,7 +374,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n         let result = _get_next_image_info(0, &mut cookie, &mut info,\n             mem::size_of::<image_info>() as i32);\n         if result != 0 {\n-            use io::ErrorKind;\n+            use crate::io::ErrorKind;\n             Err(io::Error::new(ErrorKind::Other, \"Error getting executable path\"))\n         } else {\n             let name = CStr::from_ptr(info.name.as_ptr()).to_bytes();\n@@ -384,7 +385,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\", target_os = \"hermit\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    use io::ErrorKind;\n+    use crate::io::ErrorKind;\n     Err(io::Error::new(ErrorKind::Other, \"Not yet implemented!\"))\n }\n \n@@ -495,7 +496,7 @@ pub fn page_size() -> usize {\n }\n \n pub fn temp_dir() -> PathBuf {\n-    ::env::var_os(\"TMPDIR\").map(PathBuf::from).unwrap_or_else(|| {\n+    crate::env::var_os(\"TMPDIR\").map(PathBuf::from).unwrap_or_else(|| {\n         if cfg!(target_os = \"android\") {\n             PathBuf::from(\"/data/local/tmp\")\n         } else {\n@@ -505,7 +506,7 @@ pub fn temp_dir() -> PathBuf {\n }\n \n pub fn home_dir() -> Option<PathBuf> {\n-    return ::env::var_os(\"HOME\").or_else(|| unsafe {\n+    return crate::env::var_os(\"HOME\").or_else(|| unsafe {\n         fallback()\n     }).map(PathBuf::from);\n "}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,15 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-use borrow::Cow;\n-use fmt;\n-use str;\n-use mem;\n-use rc::Rc;\n-use sync::Arc;\n-use sys_common::{AsInner, IntoInner};\n-use sys_common::bytestring::debug_fmt_bytestring;\n+use crate::borrow::Cow;\n+use crate::fmt;\n+use crate::str;\n+use crate::mem;\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::bytestring::debug_fmt_bytestring;\n+\n use core::str::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]"}, {"sha": "5c062e7c97cd3d5072843a62b02c5b1fbe25eb25", "filename": "src/libstd/sys/unix/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use path::Prefix;\n-use ffi::OsStr;\n+use crate::path::Prefix;\n+use crate::ffi::OsStr;\n \n #[inline]\n pub fn is_sep_byte(b: u8) -> bool {"}, {"sha": "bc3c026adab8f453b951d897da0b50fc1d5ab899", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,10 @@\n-use io;\n-use libc::{self, c_int};\n-use mem;\n-use sync::atomic::{AtomicBool, Ordering};\n-use sys::fd::FileDesc;\n-use sys::{cvt, cvt_r};\n+use crate::io;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sys::fd::FileDesc;\n+use crate::sys::{cvt, cvt_r};\n+\n+use libc::c_int;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Anonymous pipes"}, {"sha": "856d202be03f3388b32c3f99b4341b5428a05910", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,15 +1,16 @@\n-use os::unix::prelude::*;\n-\n-use ffi::{OsString, OsStr, CString, CStr};\n-use fmt;\n-use io;\n-use libc::{self, c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n-use ptr;\n-use sys::fd::FileDesc;\n-use sys::fs::{File, OpenOptions};\n-use sys::pipe::{self, AnonPipe};\n-use sys_common::process::{CommandEnv, DefaultEnvKey};\n-use collections::BTreeMap;\n+use crate::os::unix::prelude::*;\n+\n+use crate::ffi::{OsString, OsStr, CString, CStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::ptr;\n+use crate::sys::fd::FileDesc;\n+use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::pipe::{self, AnonPipe};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::collections::BTreeMap;\n+\n+use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -406,11 +407,10 @@ impl ExitCode {\n mod tests {\n     use super::*;\n \n-    use ffi::OsStr;\n-    use mem;\n-    use ptr;\n-    use libc;\n-    use sys::cvt;\n+    use crate::ffi::OsStr;\n+    use crate::mem;\n+    use crate::ptr;\n+    use crate::sys::cvt;\n \n     macro_rules! t {\n         ($e:expr) => {\n@@ -443,7 +443,7 @@ mod tests {\n \n     #[cfg(target_os = \"android\")]\n     unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n-        use slice;\n+        use crate::slice;\n \n         let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<libc::sigset_t>());\n         let bit = (signum - 1) as usize;"}, {"sha": "7c6be9b0a6047f4a513d38e8bb2b35c14a9c7d4c", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,11 @@\n-use io;\n-use libc::{self, size_t};\n-use mem;\n-use ptr;\n+use crate::io;\n+use crate::mem;\n+use crate::ptr;\n \n-use sys::process::zircon::{Handle, zx_handle_t};\n-use sys::process::process_common::*;\n+use crate::sys::process::zircon::{Handle, zx_handle_t};\n+use crate::sys::process::process_common::*;\n+\n+use libc::size_t;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -44,7 +45,7 @@ impl Command {\n \n     unsafe fn do_exec(&mut self, stdio: ChildPipes, maybe_envp: Option<&CStringArray>)\n                       -> io::Result<zx_handle_t> {\n-        use sys::process::zircon::*;\n+        use crate::sys::process::zircon::*;\n \n         let envp = match maybe_envp {\n             Some(envp) => envp.as_ptr(),\n@@ -109,16 +110,16 @@ impl Process {\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n-        use sys::process::zircon::*;\n+        use crate::sys::process::zircon::*;\n \n         unsafe { zx_cvt(zx_task_kill(self.handle.raw()))?; }\n \n         Ok(())\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        use default::Default;\n-        use sys::process::zircon::*;\n+        use crate::default::Default;\n+        use crate::sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();\n         let mut actual: size_t = 0;\n@@ -140,8 +141,8 @@ impl Process {\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        use default::Default;\n-        use sys::process::zircon::*;\n+        use crate::default::Default;\n+        use crate::sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();\n         let mut actual: size_t = 0;"}, {"sha": "220b1fd453131e1ffd2cfb75c3867bd97b956266", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,10 @@\n-use io::{self, Error, ErrorKind};\n-use libc::{self, c_int, gid_t, pid_t, uid_t};\n-use ptr;\n-use sys::cvt;\n-use sys::process::process_common::*;\n-use sys;\n+use crate::io::{self, Error, ErrorKind};\n+use crate::ptr;\n+use crate::sys::cvt;\n+use crate::sys::process::process_common::*;\n+use crate::sys;\n+\n+use libc::{c_int, gid_t, pid_t, uid_t};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -164,7 +165,7 @@ impl Command {\n         stdio: ChildPipes,\n         maybe_envp: Option<&CStringArray>\n     ) -> io::Error {\n-        use sys::{self, cvt_r};\n+        use crate::sys::{self, cvt_r};\n \n         macro_rules! t {\n             ($e:expr) => (match $e {\n@@ -207,7 +208,7 @@ impl Command {\n         // emscripten has no signal support.\n         #[cfg(not(any(target_os = \"emscripten\")))]\n         {\n-            use mem;\n+            use crate::mem;\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored\n@@ -278,8 +279,8 @@ impl Command {\n     fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n         -> io::Result<Option<Process>>\n     {\n-        use mem;\n-        use sys;\n+        use crate::mem;\n+        use crate::sys;\n \n         if self.get_gid().is_some() ||\n             self.get_uid().is_some() ||\n@@ -427,7 +428,7 @@ impl Process {\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        use sys::cvt_r;\n+        use crate::sys::cvt_r;\n         if let Some(status) = self.status {\n             return Ok(status)\n         }"}, {"sha": "ec715d5490f6f967adfc0eead6bc0198d32a7230", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n #![allow(non_camel_case_types, unused)]\n \n-use convert::TryInto;\n-use io;\n-use os::raw::c_char;\n-use u64;\n+use crate::convert::TryInto;\n+use crate::io;\n+use crate::os::raw::c_char;\n+use crate::u64;\n \n use libc::{c_int, c_void, size_t};\n "}, {"sha": "122f22b37a26b4794e5e2c8d9f294491ce177dc4", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use mem;\n-use slice;\n+use crate::mem;\n+use crate::slice;\n \n pub fn hashmap_random_keys() -> (u64, u64) {\n     let mut v = (0, 0);\n@@ -17,10 +17,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n           not(target_os = \"freebsd\"),\n           not(target_os = \"fuchsia\")))]\n mod imp {\n-    use fs::File;\n-    use io::Read;\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    use libc;\n+    use crate::fs::File;\n+    use crate::io::Read;\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n@@ -34,8 +32,8 @@ mod imp {\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn getrandom_fill_bytes(v: &mut [u8]) -> bool {\n-        use sync::atomic::{AtomicBool, Ordering};\n-        use sys::os::errno;\n+        use crate::sync::atomic::{AtomicBool, Ordering};\n+        use crate::sys::os::errno;\n \n         static GETRANDOM_UNAVAILABLE: AtomicBool = AtomicBool::new(false);\n         if GETRANDOM_UNAVAILABLE.load(Ordering::Relaxed) {\n@@ -86,8 +84,7 @@ mod imp {\n \n #[cfg(target_os = \"openbsd\")]\n mod imp {\n-    use libc;\n-    use sys::os::errno;\n+    use crate::sys::os::errno;\n \n     pub fn fill_bytes(v: &mut [u8]) {\n         // getentropy(2) permits a maximum buffer size of 256 bytes\n@@ -104,9 +101,9 @@ mod imp {\n \n #[cfg(target_os = \"ios\")]\n mod imp {\n-    use io;\n+    use crate::io;\n+    use crate::ptr;\n     use libc::{c_int, size_t};\n-    use ptr;\n \n     enum SecRandom {}\n \n@@ -134,8 +131,7 @@ mod imp {\n \n #[cfg(target_os = \"freebsd\")]\n mod imp {\n-    use libc;\n-    use ptr;\n+    use crate::ptr;\n \n     pub fn fill_bytes(v: &mut [u8]) {\n         let mib = [libc::CTL_KERN, libc::KERN_ARND];"}, {"sha": "e48bfdae6104756bfc9b03232af5e3bb2aca020f", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,5 @@\n-use libc;\n-use cell::UnsafeCell;\n-use sync::atomic::{AtomicUsize, Ordering};\n+use crate::cell::UnsafeCell;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct RWLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,"}, {"sha": "cfa019634bd0597bc72f02ec39a46ff513a8b78f", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(test, allow(dead_code))]\n \n-use libc;\n use self::imp::{make_handler, drop_handler};\n \n pub use self::imp::cleanup;\n@@ -34,8 +33,9 @@ impl Drop for Handler {\n           target_os = \"openbsd\"))]\n mod imp {\n     use super::Handler;\n-    use mem;\n-    use ptr;\n+    use crate::mem;\n+    use crate::ptr;\n+\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n     use libc::{sigaction, SIGBUS, SIG_DFL,\n                SA_SIGINFO, SA_ONSTACK, sighandler_t};\n@@ -44,7 +44,7 @@ mod imp {\n     use libc::{SIGSEGV, PROT_READ, PROT_WRITE, MAP_PRIVATE, MAP_ANON};\n     use libc::MAP_FAILED;\n \n-    use sys_common::thread_info;\n+    use crate::sys_common::thread_info;\n \n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -87,7 +87,7 @@ mod imp {\n     unsafe extern fn signal_handler(signum: libc::c_int,\n                                     info: *mut libc::siginfo_t,\n                                     _data: *mut libc::c_void) {\n-        use sys_common::util::report_overflow;\n+        use crate::sys_common::util::report_overflow;\n \n         let guard = thread_info::stack_guard().unwrap_or(0..0);\n         let addr = siginfo_si_addr(info);\n@@ -193,7 +193,7 @@ mod imp {\n               all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n               target_os = \"openbsd\")))]\n mod imp {\n-    use ptr;\n+    use crate::ptr;\n \n     pub unsafe fn init() {\n     }"}, {"sha": "35f163bbdb10fd7db3c2ebbd2b80450743e1256e", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,5 @@\n-use io;\n-use libc;\n-use sys::fd::FileDesc;\n+use crate::io;\n+use crate::sys::fd::FileDesc;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -57,7 +56,7 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n     err.raw_os_error() == Some(libc::EBADF as i32)\n }\n \n-pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n+pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n     Stderr::new().ok()"}, {"sha": "feb15e8f585abb99042b0dee4da166413b8b51c7", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,13 @@\n-use boxed::FnBox;\n-use cmp;\n-use ffi::CStr;\n-use io;\n-use libc;\n-use mem;\n-use ptr;\n-use sys::os;\n-use time::Duration;\n-\n-use sys_common::thread::*;\n+use crate::boxed::FnBox;\n+use crate::cmp;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sys::os;\n+use crate::time::Duration;\n+\n+use crate::sys_common::thread::*;\n \n #[cfg(not(target_os = \"l4re\"))]\n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n@@ -118,7 +117,7 @@ impl Thread {\n \n     #[cfg(target_os = \"netbsd\")]\n     pub fn set_name(name: &CStr) {\n-        use ffi::CString;\n+        use crate::ffi::CString;\n         let cname = CString::new(&b\"%s\"[..]).unwrap();\n         unsafe {\n             libc::pthread_setname_np(libc::pthread_self(), cname.as_ptr(),\n@@ -197,7 +196,7 @@ impl Drop for Thread {\n           not(target_os = \"solaris\")))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    use ops::Range;\n+    use crate::ops::Range;\n     pub type Guard = Range<usize>;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n@@ -213,11 +212,11 @@ pub mod guard {\n           target_os = \"solaris\"))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    use libc;\n     use libc::{mmap, mprotect};\n     use libc::{PROT_NONE, PROT_READ, PROT_WRITE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};\n-    use ops::Range;\n-    use sys::os;\n+\n+    use crate::ops::Range;\n+    use crate::sys::os;\n \n     // This is initialized in init() and only read from after\n     static mut PAGE_SIZE: usize = 0;\n@@ -226,7 +225,7 @@ pub mod guard {\n \n     #[cfg(target_os = \"solaris\")]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n-        let mut current_stack: libc::stack_t = ::mem::zeroed();\n+        let mut current_stack: libc::stack_t = crate::mem::zeroed();\n         assert_eq!(libc::stack_getbounds(&mut current_stack), 0);\n         Some(current_stack.ss_sp)\n     }\n@@ -240,7 +239,7 @@ pub mod guard {\n \n     #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n-        let mut current_stack: libc::stack_t = ::mem::zeroed();\n+        let mut current_stack: libc::stack_t = crate::mem::zeroed();\n         assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(),\n                                              &mut current_stack), 0);\n \n@@ -259,14 +258,14 @@ pub mod guard {\n               target_os = \"linux\", target_os = \"netbsd\", target_os = \"l4re\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n+        let mut attr: libc::pthread_attr_t = crate::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n         #[cfg(target_os = \"freebsd\")]\n             let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n         #[cfg(not(target_os = \"freebsd\"))]\n             let e = libc::pthread_getattr_np(libc::pthread_self(), &mut attr);\n         if e == 0 {\n-            let mut stackaddr = ::ptr::null_mut();\n+            let mut stackaddr = crate::ptr::null_mut();\n             let mut stacksize = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut stacksize), 0);\n@@ -357,7 +356,7 @@ pub mod guard {\n               target_os = \"linux\", target_os = \"netbsd\", target_os = \"l4re\"))]\n     pub unsafe fn current() -> Option<Guard> {\n         let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n+        let mut attr: libc::pthread_attr_t = crate::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n         #[cfg(target_os = \"freebsd\")]\n             let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n@@ -369,7 +368,7 @@ pub mod guard {\n             if guardsize == 0 {\n                 panic!(\"there is no guard page\");\n             }\n-            let mut stackaddr = ::ptr::null_mut();\n+            let mut stackaddr = crate::ptr::null_mut();\n             let mut size = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut size), 0);"}, {"sha": "ac615b76b36245650492eb3d883557f5b9ed2ae3", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)] // not used on all platforms\n \n-use mem;\n-use libc;\n+use crate::mem;\n \n pub type Key = libc::pthread_key_t;\n "}, {"sha": "cbb0615911adf8298f58760cde61bdecdb45a4a6", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use cmp::Ordering;\n-use libc;\n-use time::Duration;\n+use crate::cmp::Ordering;\n+use crate::time::Duration;\n+\n use core::hash::{Hash, Hasher};\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n-use convert::TryInto;\n+use crate::convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -113,12 +113,11 @@ impl Hash for Timespec {\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod inner {\n-    use fmt;\n-    use libc;\n-    use sync::Once;\n-    use sys::cvt;\n-    use sys_common::mul_div_u64;\n-    use time::Duration;\n+    use crate::fmt;\n+    use crate::sync::Once;\n+    use crate::sys::cvt;\n+    use crate::sys_common::mul_div_u64;\n+    use crate::time::Duration;\n \n     use super::NSEC_PER_SEC;\n     use super::Timespec;\n@@ -173,7 +172,7 @@ mod inner {\n \n     impl SystemTime {\n         pub fn now() -> SystemTime {\n-            use ptr;\n+            use crate::ptr;\n \n             let mut s = libc::timeval {\n                 tv_sec: 0,\n@@ -249,10 +248,9 @@ mod inner {\n \n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n mod inner {\n-    use fmt;\n-    use libc;\n-    use sys::cvt;\n-    use time::Duration;\n+    use crate::fmt;\n+    use crate::sys::cvt;\n+    use crate::time::Duration;\n \n     use super::Timespec;\n "}, {"sha": "9a7691e54bc1aa98f671be9200f8afc7c28f222d", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -16,17 +16,15 @@\n //! symbol, but that caused Debian to detect an unnecessarily strict versioned\n //! dependency on libc6 (#23628).\n \n-use libc;\n-\n-use ffi::CStr;\n-use marker;\n-use mem;\n-use sync::atomic::{AtomicUsize, Ordering};\n+use crate::ffi::CStr;\n+use crate::marker;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n \n macro_rules! weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n-        static $name: ::sys::weak::Weak<unsafe extern fn($($t),*) -> $ret> =\n-            ::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n+        static $name: crate::sys::weak::Weak<unsafe extern fn($($t),*) -> $ret> =\n+            crate::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n     )\n }\n \n@@ -71,7 +69,6 @@ unsafe fn fetch(name: &str) -> usize {\n macro_rules! syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name: $t),*) -> $ret {\n-            use libc;\n             use super::os;\n \n             weak! { fn $name($($t),*) -> $ret }"}, {"sha": "b9098548b9c1e08481ba8ab2630630eaab6d9a5e", "filename": "src/libstd/sys/wasm/alloc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -16,9 +16,7 @@\n //! The crate itself provides a global allocator which on wasm has no\n //! synchronization as there are no threads!\n \n-extern crate dlmalloc;\n-\n-use alloc::{GlobalAlloc, Layout, System};\n+use crate::alloc::{GlobalAlloc, Layout, System};\n \n static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n \n@@ -51,8 +49,8 @@ unsafe impl GlobalAlloc for System {\n \n #[cfg(target_feature = \"atomics\")]\n mod lock {\n-    use arch::wasm32;\n-    use sync::atomic::{AtomicI32, Ordering::SeqCst};\n+    use crate::arch::wasm32;\n+    use crate::sync::atomic::{AtomicI32, Ordering::SeqCst};\n \n     static LOCKED: AtomicI32 = AtomicI32::new(0);\n "}, {"sha": "b3c77b869956364326312711471bff4e66fa2556", "filename": "src/libstd/sys/wasm/args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n-use ffi::OsString;\n-use marker::PhantomData;\n-use vec;\n-use sys::ArgsSysCall;\n+use crate::ffi::OsString;\n+use crate::marker::PhantomData;\n+use crate::vec;\n+use crate::sys::ArgsSysCall;\n \n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n     // On wasm these should always be null, so there's nothing for us to do here"}, {"sha": "7d56b298997aa33631d953f2dbd2a24849d8f9bb", "filename": "src/libstd/sys/wasm/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fbacktrace.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use io;\n-use sys::unsupported;\n-use sys_common::backtrace::Frame;\n+use crate::io;\n+use crate::sys::unsupported;\n+use crate::sys_common::backtrace::Frame;\n \n pub struct BacktraceContext;\n "}, {"sha": "9c7cc3c63b15f06db3ffdff14e8ed9405546640b", "filename": "src/libstd/sys/wasm/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use sys::mutex::Mutex;\n-use time::Duration;\n+use crate::sys::mutex::Mutex;\n+use crate::time::Duration;\n \n pub struct Condvar { }\n "}, {"sha": "580d21218445f34bbec26c09cbada498992b4b5f", "filename": "src/libstd/sys/wasm/condvar_atomics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n-use arch::wasm32;\n-use cmp;\n-use mem;\n-use sync::atomic::{AtomicUsize, Ordering::SeqCst};\n-use sys::mutex::Mutex;\n-use time::Duration;\n+use crate::arch::wasm32;\n+use crate::cmp;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+use crate::sys::mutex::Mutex;\n+use crate::time::Duration;\n \n pub struct Condvar {\n     cnt: AtomicUsize,"}, {"sha": "485d2c87fbd2d2003f2bf7dea01f192ae4e1243c", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsString;\n-use fmt;\n-use hash::{Hash, Hasher};\n-use io::{self, SeekFrom};\n-use path::{Path, PathBuf};\n-use sys::time::SystemTime;\n-use sys::{unsupported, Void};\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n+use crate::io::{self, SeekFrom};\n+use crate::path::{Path, PathBuf};\n+use crate::sys::time::SystemTime;\n+use crate::sys::{unsupported, Void};\n \n pub struct File(Void);\n "}, {"sha": "1828cce4e520e2bd81f03d5d8e16a5f4cce97078", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,12 +14,12 @@\n //! compiling for wasm. That way it's a compile time error for something that's\n //! guaranteed to be a runtime error!\n \n-use os::raw::c_char;\n-use ptr;\n-use sys::os_str::Buf;\n-use sys_common::{AsInner, FromInner};\n-use ffi::{OsString, OsStr};\n-use time::Duration;\n+use crate::os::raw::c_char;\n+use crate::ptr;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{AsInner, FromInner};\n+use crate::ffi::{OsString, OsStr};\n+use crate::time::Duration;\n \n pub mod alloc;\n pub mod args;\n@@ -63,17 +63,17 @@ cfg_if! {\n pub fn init() {\n }\n \n-pub fn unsupported<T>() -> ::io::Result<T> {\n+pub fn unsupported<T>() -> crate::io::Result<T> {\n     Err(unsupported_err())\n }\n \n-pub fn unsupported_err() -> ::io::Error {\n-    ::io::Error::new(::io::ErrorKind::Other,\n+pub fn unsupported_err() -> crate::io::Error {\n+    crate::io::Error::new(crate::io::ErrorKind::Other,\n                    \"operation not supported on wasm yet\")\n }\n \n-pub fn decode_error_kind(_code: i32) -> ::io::ErrorKind {\n-    ::io::ErrorKind::Other\n+pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {\n+    crate::io::ErrorKind::Other\n }\n \n // This enum is used as the storage for a bunch of types which can't actually\n@@ -168,7 +168,7 @@ impl ExitSysCall {\n         };\n         unsafe {\n             syscall(SysCallIndex::Exit, &mut call_record);\n-            ::intrinsics::abort();\n+            crate::intrinsics::abort();\n         }\n     }\n }"}, {"sha": "9d713e9b439038c19dd8c197060cda611f354076", "filename": "src/libstd/sys/wasm/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use cell::UnsafeCell;\n+use crate::cell::UnsafeCell;\n \n pub struct Mutex {\n     locked: UnsafeCell<bool>,"}, {"sha": "0e4f3d80aa93870341d82f32466e3cf0a3db8cd0", "filename": "src/libstd/sys/wasm/mutex_atomics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use arch::wasm32;\n-use cell::UnsafeCell;\n-use mem;\n-use sync::atomic::{AtomicUsize, AtomicU32, Ordering::SeqCst};\n-use sys::thread;\n+use crate::arch::wasm32;\n+use crate::cell::UnsafeCell;\n+use crate::mem;\n+use crate::sync::atomic::{AtomicUsize, AtomicU32, Ordering::SeqCst};\n+use crate::sys::thread;\n \n pub struct Mutex {\n     locked: AtomicUsize,"}, {"sha": "1249832fb09d2db0b232df85e58a775a562b23da", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n-use fmt;\n-use io::{self, IoVec, IoVecMut};\n-use net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n-use time::Duration;\n-use sys::{unsupported, Void};\n-use convert::TryFrom;\n+use crate::fmt;\n+use crate::io::{self, IoVec, IoVecMut};\n+use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n+use crate::time::Duration;\n+use crate::sys::{unsupported, Void};\n+use crate::convert::TryFrom;\n \n pub struct TcpStream(Void);\n "}, {"sha": "145f9ccd73a8fe49343327aa5151b6521afcb185", "filename": "src/libstd/sys/wasm/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use error::Error as StdError;\n-use ffi::{OsString, OsStr};\n-use fmt;\n-use io;\n-use path::{self, PathBuf};\n-use str;\n-use sys::{unsupported, Void, ExitSysCall, GetEnvSysCall, SetEnvSysCall};\n+use crate::error::Error as StdError;\n+use crate::ffi::{OsString, OsStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::path::{self, PathBuf};\n+use crate::str;\n+use crate::sys::{unsupported, Void, ExitSysCall, GetEnvSysCall, SetEnvSysCall};\n \n pub fn errno() -> i32 {\n     0"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,15 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-use borrow::Cow;\n-use fmt;\n-use str;\n-use mem;\n-use rc::Rc;\n-use sync::Arc;\n-use sys_common::{AsInner, IntoInner};\n-use sys_common::bytestring::debug_fmt_bytestring;\n+use crate::borrow::Cow;\n+use crate::fmt;\n+use crate::str;\n+use crate::mem;\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::bytestring::debug_fmt_bytestring;\n+\n use core::str::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]"}, {"sha": "5c062e7c97cd3d5072843a62b02c5b1fbe25eb25", "filename": "src/libstd/sys/wasm/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use path::Prefix;\n-use ffi::OsStr;\n+use crate::path::Prefix;\n+use crate::ffi::OsStr;\n \n #[inline]\n pub fn is_sep_byte(b: u8) -> bool {"}, {"sha": "2582b993b608eda93136a5558784899814987cae", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io;\n-use sys::Void;\n+use crate::io;\n+use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n "}, {"sha": "c49daaa16320e2b04385cf5e1212948e6b4f7edd", "filename": "src/libstd/sys/wasm/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n-use ffi::OsStr;\n-use fmt;\n-use io;\n-use sys::fs::File;\n-use sys::pipe::AnonPipe;\n-use sys::{unsupported, Void};\n-use sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::fs::File;\n+use crate::sys::pipe::AnonPipe;\n+use crate::sys::{unsupported, Void};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command"}, {"sha": "a2b07c7fa1fc02db7dda41d3adcd510096e56678", "filename": "src/libstd/sys/wasm/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use cell::UnsafeCell;\n+use crate::cell::UnsafeCell;\n \n pub struct RWLock {\n     mode: UnsafeCell<isize>,"}, {"sha": "c705568cec992a0923ce82b194c5d5ae6bb4d4dc", "filename": "src/libstd/sys/wasm/rwlock_atomics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Frwlock_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Frwlock_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Frwlock_atomics.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use cell::UnsafeCell;\n-use sys::mutex::Mutex;\n-use sys::condvar::Condvar;\n+use crate::cell::UnsafeCell;\n+use crate::sys::mutex::Mutex;\n+use crate::sys::condvar::Condvar;\n \n pub struct RWLock {\n     lock: Mutex,"}, {"sha": "b8899a9c847465e13d944ee57cd7a6319cedd43e", "filename": "src/libstd/sys/wasm/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use io;\n-use sys::{ReadSysCall, WriteSysCall};\n+use crate::io;\n+use crate::sys::{ReadSysCall, WriteSysCall};\n \n pub struct Stdin;\n pub struct Stdout;"}, {"sha": "a65c413119f8c7d13a0c975f7f836cedb4fbf170", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use boxed::FnBox;\n-use ffi::CStr;\n-use io;\n-use sys::{unsupported, Void};\n-use time::Duration;\n+use crate::boxed::FnBox;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::sys::{unsupported, Void};\n+use crate::time::Duration;\n \n pub struct Thread(Void);\n \n@@ -31,8 +31,8 @@ impl Thread {\n \n     #[cfg(target_feature = \"atomics\")]\n     pub fn sleep(dur: Duration) {\n-        use arch::wasm32;\n-        use cmp;\n+        use crate::arch::wasm32;\n+        use crate::cmp;\n \n         // Use an atomic wait to block the current thread artificially with a\n         // timeout listed. Note that we should never be notified (return value\n@@ -76,7 +76,7 @@ cfg_if! {\n         // you'd like to use them be sure to update that and make sure everyone\n         // agrees what's what.\n         pub fn tcb_get() -> *mut u8 {\n-            use mem;\n+            use crate::mem;\n             assert_eq!(mem::size_of::<*mut u8>(), mem::size_of::<u32>());\n             unsafe { __wbindgen_tcb_get() as *mut u8 }\n         }"}, {"sha": "29e9854bcfccb1f984981a39bcb55ff3efd6a35e", "filename": "src/libstd/sys/wasm/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use boxed::Box;\n-use ptr;\n+use crate::boxed::Box;\n+use crate::ptr;\n \n pub type Key = usize;\n "}, {"sha": "b408ad0d5c1f82ca3e6e5b04baff907765530b58", "filename": "src/libstd/sys/wasm/thread_local_atomics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use sys::thread;\n-use sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+use crate::sys::thread;\n+use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n \n const MAX_KEYS: usize = 128;\n static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "c1228a1b75e39e35741e271eee31891b5b2cf401", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use time::Duration;\n-use sys::{TimeSysCall, TimeClock};\n+use crate::time::Duration;\n+use crate::sys::{TimeSysCall, TimeClock};\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant(Duration);"}, {"sha": "a33c4019a2e6b51d7d6dca46c6a8708d9240cd2a", "filename": "src/libstd/sys/windows/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use alloc::{GlobalAlloc, Layout, System};\n-use sys::c;\n-use sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n+use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::sys::c;\n+use crate::sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n \n #[repr(C)]\n struct Header(*mut u8);"}, {"sha": "3f10e6e5983eb6b433e9110973dadd56cf48a5c5", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,14 +1,15 @@\n #![allow(dead_code)] // runtime init functions not used during testing\n \n-use os::windows::prelude::*;\n-use sys::windows::os::current_exe;\n-use sys::c;\n-use ffi::OsString;\n-use fmt;\n-use vec;\n+use crate::os::windows::prelude::*;\n+use crate::sys::windows::os::current_exe;\n+use crate::sys::c;\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::vec;\n+use crate::slice;\n+use crate::path::PathBuf;\n+\n use core::iter;\n-use slice;\n-use path::PathBuf;\n \n pub unsafe fn init(_argc: isize, _argv: *const *const u8) { }\n \n@@ -80,7 +81,7 @@ unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_na\n         // \"However, if lpCmdLine starts with any amount of whitespace, CommandLineToArgvW\n         // will consider the first argument to be an empty string. Excess whitespace at the\n         // end of lpCmdLine is ignored.\"\n-        0...SPACE => {\n+        0..=SPACE => {\n             ret_val.push(OsString::new());\n             &cmd_line[1..]\n         },\n@@ -192,8 +193,8 @@ impl ExactSizeIterator for Args {\n \n #[cfg(test)]\n mod tests {\n-    use sys::windows::args::*;\n-    use ffi::OsString;\n+    use crate::sys::windows::args::*;\n+    use crate::ffi::OsString;\n \n     fn chk(string: &str, parts: &[&str]) {\n         let mut wide: Vec<u16> = OsString::from(string).encode_wide().collect();"}, {"sha": "7ac1f8122f781ce5e2a5a5bf04cbb12caa219851", "filename": "src/libstd/sys/windows/backtrace/backtrace_gnu.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fbacktrace_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fbacktrace_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fbacktrace_gnu.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,11 @@\n-use io;\n-use sys::c;\n+use crate::io;\n+use crate::sys::c;\n+use crate::path::PathBuf;\n+use crate::fs::{OpenOptions, File};\n+use crate::sys::ext::fs::OpenOptionsExt;\n+use crate::sys::handle::Handle;\n+\n use libc::c_char;\n-use path::PathBuf;\n-use fs::{OpenOptions, File};\n-use sys::ext::fs::OpenOptionsExt;\n-use sys::handle::Handle;\n use super::super::{fill_utf16_buf, os2path, to_u16s, wide_char_to_multi_byte};\n \n fn query_full_process_image_name() -> io::Result<PathBuf> {"}, {"sha": "c5b0cc8721087d1e0ffcbbf86bfb12c8233179e4", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -14,13 +14,14 @@\n \n #![allow(deprecated)] // dynamic_lib\n \n-use io;\n+use crate::io;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sys::c;\n+use crate::sys::dynamic_lib::DynamicLibrary;\n+use crate::sys_common::backtrace::Frame;\n+\n use libc::c_void;\n-use mem;\n-use ptr;\n-use sys::c;\n-use sys::dynamic_lib::DynamicLibrary;\n-use sys_common::backtrace::Frame;\n \n macro_rules! sym {\n     ($lib:expr, $e:expr, $t:ident) => ("}, {"sha": "9497d51ac1799b0f361f14fd6b762b505781f9a2", "filename": "src/libstd/sys/windows/backtrace/printing/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,11 +4,11 @@ mod printing;\n \n #[cfg(target_env = \"gnu\")]\n mod printing {\n-    pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n+    pub use crate::sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n \n     // dummy functions to mirror those present in msvc version.\n-    use sys::dynamic_lib::DynamicLibrary;\n-    use io;\n+    use crate::sys::dynamic_lib::DynamicLibrary;\n+    use crate::io;\n     pub struct PrintingFnsEx {}\n     pub struct PrintingFns64 {}\n     pub fn load_printing_fns_ex(_: &DynamicLibrary) -> io::Result<PrintingFnsEx> {"}, {"sha": "13a1512d0eb39e421a9dc4195bd43b46a6859776", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,13 @@\n-use ffi::CStr;\n-use io;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::mem;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys::backtrace::StackWalkVariant;\n+use crate::sys::c;\n+use crate::sys::dynamic_lib::DynamicLibrary;\n+use crate::sys_common::backtrace::Frame;\n+\n use libc::{c_char, c_ulong};\n-use mem;\n-use sys::backtrace::BacktraceContext;\n-use sys::backtrace::StackWalkVariant;\n-use sys::c;\n-use sys::dynamic_lib::DynamicLibrary;\n-use sys_common::backtrace::Frame;\n \n // Structs holding printing functions and loaders for them\n // Two versions depending on whether dbghelp.dll has StackWalkEx or not\n@@ -190,7 +191,7 @@ where\n {\n     unsafe {\n         let mut line: c::IMAGEHLP_LINE64 = mem::zeroed();\n-        line.SizeOfStruct = ::mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n+        line.SizeOfStruct = mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n \n         let ret = line_getter(\n             context.handle,"}, {"sha": "518eccf754cffa008ad1cefce354a02b8a7cc62f", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -4,11 +4,12 @@\n #![cfg_attr(test, allow(dead_code))]\n #![unstable(issue = \"0\", feature = \"windows_c\")]\n \n-use os::raw::{c_int, c_uint, c_ulong, c_long, c_longlong, c_ushort, c_char};\n+use crate::os::raw::{c_int, c_uint, c_ulong, c_long, c_longlong, c_ushort, c_char};\n #[cfg(target_arch = \"x86_64\")]\n-use os::raw::c_ulonglong;\n+use crate::os::raw::c_ulonglong;\n+use crate::ptr;\n+\n use libc::{wchar_t, size_t, c_void};\n-use ptr;\n \n pub use self::FILE_INFO_BY_HANDLE_CLASS::*;\n pub use self::EXCEPTION_DISPOSITION::*;\n@@ -65,7 +66,7 @@ pub type PCONDITION_VARIABLE = *mut CONDITION_VARIABLE;\n pub type PLARGE_INTEGER = *mut c_longlong;\n pub type PSRWLOCK = *mut SRWLOCK;\n \n-pub type SOCKET = ::os::windows::raw::SOCKET;\n+pub type SOCKET = crate::os::windows::raw::SOCKET;\n pub type socklen_t = c_int;\n pub type ADDRESS_FAMILY = USHORT;\n \n@@ -450,7 +451,7 @@ pub struct MOUNT_POINT_REPARSE_BUFFER {\n     pub PathBuffer: WCHAR,\n }\n \n-pub type LPPROGRESS_ROUTINE = ::option::Option<unsafe extern \"system\" fn(\n+pub type LPPROGRESS_ROUTINE = crate::option::Option<unsafe extern \"system\" fn(\n     TotalFileSize: LARGE_INTEGER,\n     TotalBytesTransferred: LARGE_INTEGER,\n     StreamSize: LARGE_INTEGER,"}, {"sha": "748c1616d1d32304a42e74e20489ffff1f8c657f", "filename": "src/libstd/sys/windows/compat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -11,9 +11,9 @@\n //! manner we pay a semi-large one-time cost up front for detecting whether a\n //! function is available but afterwards it's just a load and a jump.\n \n-use ffi::CString;\n-use sync::atomic::{AtomicUsize, Ordering};\n-use sys::c;\n+use crate::ffi::CString;\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys::c;\n \n pub fn lookup(module: &str, symbol: &str) -> Option<usize> {\n     let mut module: Vec<u16> = module.encode_utf16().collect();\n@@ -44,14 +44,14 @@ macro_rules! compat_fn {\n     )*) => ($(\n         #[allow(unused_variables)]\n         pub unsafe fn $symbol($($argname: $argtype),*) -> $rettype {\n-            use sync::atomic::{AtomicUsize, Ordering};\n-            use mem;\n+            use crate::sync::atomic::{AtomicUsize, Ordering};\n+            use crate::mem;\n             type F = unsafe extern \"system\" fn($($argtype),*) -> $rettype;\n \n             static PTR: AtomicUsize = AtomicUsize::new(0);\n \n             fn load() -> usize {\n-                ::sys::compat::store_func(&PTR,\n+                crate::sys::compat::store_func(&PTR,\n                                           stringify!($module),\n                                           stringify!($symbol),\n                                           fallback as usize)"}, {"sha": "62835ea7c94f3acbcb5272c77f776f9e5ea88f82", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use cell::UnsafeCell;\n-use sys::c;\n-use sys::mutex::{self, Mutex};\n-use sys::os;\n-use time::Duration;\n+use crate::cell::UnsafeCell;\n+use crate::sys::c;\n+use crate::sys::mutex::{self, Mutex};\n+use crate::sys::os;\n+use crate::time::Duration;\n \n pub struct Condvar { inner: UnsafeCell<c::CONDITION_VARIABLE> }\n "}, {"sha": "b9d5105cb73070e484055b050165eb3d42bfffe7", "filename": "src/libstd/sys/windows/dynamic_lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use os::windows::prelude::*;\n+use crate::os::windows::prelude::*;\n \n-use ffi::{CString, OsStr};\n-use io;\n-use sys::c;\n+use crate::ffi::{CString, OsStr};\n+use crate::io;\n+use crate::sys::c;\n \n pub struct DynamicLibrary {\n     handle: c::HMODULE,"}, {"sha": "547b1ef796b4a10d046736ce5da8c0842f9c4e3e", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -59,13 +59,13 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use ffi::{OsString, OsStr};\n-use sys::os_str::Buf;\n-use sys_common::wtf8::Wtf8Buf;\n-use sys_common::{FromInner, AsInner};\n+use crate::ffi::{OsString, OsStr};\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::wtf8::Wtf8Buf;\n+use crate::sys_common::{FromInner, AsInner};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys_common::wtf8::EncodeWide;\n+pub use crate::sys_common::wtf8::EncodeWide;\n \n /// Windows-specific extensions to [`OsString`].\n ///"}, {"sha": "b6da59502806b7f016cc63d18171fd745dd23fe5", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs::{self, OpenOptions, Metadata};\n-use io;\n-use path::Path;\n-use sys;\n-use sys_common::{AsInnerMut, AsInner};\n+use crate::fs::{self, OpenOptions, Metadata};\n+use crate::io;\n+use crate::path::Path;\n+use crate::sys;\n+use crate::sys_common::{AsInnerMut, AsInner};\n \n /// Windows-specific extensions to [`File`].\n ///"}, {"sha": "1a7d734b89e4ba8bacb0dacf35e3ade81f8757ad", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,12 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fs;\n-use os::windows::raw;\n-use net;\n-use sys_common::{self, AsInner, FromInner, IntoInner};\n-use sys;\n-use io;\n-use sys::c;\n+use crate::fs;\n+use crate::os::windows::raw;\n+use crate::net;\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n+use crate::sys;\n+use crate::sys::c;\n+use crate::io;\n \n /// Raw HANDLEs.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b2e6cdead4f3b2a19b5fd84c0e2c3d41f12d02ef", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n \n #![stable(feature = \"process_extensions\", since = \"1.2.0\")]\n \n-use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle, IntoRawHandle};\n-use process;\n-use sys;\n-use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n+use crate::os::windows::io::{FromRawHandle, RawHandle, AsRawHandle, IntoRawHandle};\n+use crate::process;\n+use crate::sys;\n+use crate::sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {"}, {"sha": "d2bab2720369fbe13c050a0962347642730947c0", "filename": "src/libstd/sys/windows/ext/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,7 +2,7 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-use os::raw::c_void;\n+use crate::os::raw::c_void;\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type HANDLE = *mut c_void;\n #[cfg(target_pointer_width = \"32\")]"}, {"sha": "fdc7e7fa32f0e6248df4ec9e9da25795ffa0c19e", "filename": "src/libstd/sys/windows/ext/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,9 +2,9 @@\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n \n-use os::windows::io::{RawHandle, AsRawHandle, IntoRawHandle};\n-use thread;\n-use sys_common::{AsInner, IntoInner};\n+use crate::os::windows::io::{RawHandle, AsRawHandle, IntoRawHandle};\n+use crate::thread;\n+use crate::sys_common::{AsInner, IntoInner};\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n impl<T> AsRawHandle for thread::JoinHandle<T> {"}, {"sha": "0ccc67e3fd54ebb1fc0ace58dfd366e7b976fe5f", "filename": "src/libstd/sys/windows/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n #![cfg(target_thread_local)]\n \n-pub use sys_common::thread_local::register_dtor_fallback as register_dtor;\n+pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n \n pub fn requires_move_before_drop() -> bool {\n     false"}, {"sha": "f19c111f09aa2ed4da8bb319bc37d62c1a0ef098", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,17 +1,17 @@\n-use os::windows::prelude::*;\n-\n-use ffi::OsString;\n-use fmt;\n-use io::{self, Error, SeekFrom};\n-use mem;\n-use path::{Path, PathBuf};\n-use ptr;\n-use slice;\n-use sync::Arc;\n-use sys::handle::Handle;\n-use sys::time::SystemTime;\n-use sys::{c, cvt};\n-use sys_common::FromInner;\n+use crate::os::windows::prelude::*;\n+\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::io::{self, Error, SeekFrom};\n+use crate::mem;\n+use crate::path::{Path, PathBuf};\n+use crate::ptr;\n+use crate::slice;\n+use crate::sync::Arc;\n+use crate::sys::handle::Handle;\n+use crate::sys::time::SystemTime;\n+use crate::sys::{c, cvt};\n+use crate::sys_common::FromInner;\n \n use super::to_u16s;\n "}, {"sha": "02549088c8704f158329fc8d610bafd970ad934e", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,12 @@\n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n-use cmp;\n-use io::{ErrorKind, Read};\n-use io;\n-use mem;\n-use ops::Deref;\n-use ptr;\n-use sys::c;\n-use sys::cvt;\n+use crate::cmp;\n+use crate::io::{self, ErrorKind, Read};\n+use crate::mem;\n+use crate::ops::Deref;\n+use crate::ptr;\n+use crate::sys::c;\n+use crate::sys::cvt;\n \n /// An owned container for `HANDLE` object, closing them on Drop.\n ///"}, {"sha": "1425254a2e12605911778573a6e3225352d64ca9", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,11 +1,11 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use ptr;\n-use ffi::{OsStr, OsString};\n-use io::ErrorKind;\n-use os::windows::ffi::{OsStrExt, OsStringExt};\n-use path::PathBuf;\n-use time::Duration;\n+use crate::ptr;\n+use crate::ffi::{OsStr, OsString};\n+use crate::io::ErrorKind;\n+use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n+use crate::path::PathBuf;\n+use crate::time::Duration;\n \n pub use libc::strlen;\n pub use self::rand::hashmap_random_keys;\n@@ -76,11 +76,11 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> ::io::Result<Vec<u16>> {\n-    fn inner(s: &OsStr) -> ::io::Result<Vec<u16>> {\n+pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> crate::io::Result<Vec<u16>> {\n+    fn inner(s: &OsStr) -> crate::io::Result<Vec<u16>> {\n         let mut maybe_result: Vec<u16> = s.encode_wide().collect();\n         if maybe_result.iter().any(|&u| u == 0) {\n-            return Err(::io::Error::new(::io::ErrorKind::InvalidInput,\n+            return Err(crate::io::Error::new(ErrorKind::InvalidInput,\n                                         \"strings passed to WinAPI cannot contain NULs\"));\n         }\n         maybe_result.push(0);\n@@ -103,7 +103,7 @@ pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> ::io::Result<Vec<u16>> {\n // Once the syscall has completed (errors bail out early) the second closure is\n // yielded the data which has been read from the syscall. The return value\n // from this closure is then the return value of the function.\n-fn fill_utf16_buf<F1, F2, T>(mut f1: F1, f2: F2) -> ::io::Result<T>\n+fn fill_utf16_buf<F1, F2, T>(mut f1: F1, f2: F2) -> crate::io::Result<T>\n     where F1: FnMut(*mut u16, c::DWORD) -> c::DWORD,\n           F2: FnOnce(&[u16]) -> T\n {\n@@ -135,7 +135,7 @@ fn fill_utf16_buf<F1, F2, T>(mut f1: F1, f2: F2) -> ::io::Result<T>\n             c::SetLastError(0);\n             let k = match f1(buf.as_mut_ptr(), n as c::DWORD) {\n                 0 if c::GetLastError() == 0 => 0,\n-                0 => return Err(::io::Error::last_os_error()),\n+                0 => return Err(crate::io::Error::last_os_error()),\n                 n => n,\n             } as usize;\n             if k == n && c::GetLastError() == c::ERROR_INSUFFICIENT_BUFFER {\n@@ -158,7 +158,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n                            flags: u32,\n                            s: &[u16],\n                            no_default_char: bool)\n-                           -> ::io::Result<Vec<i8>> {\n+                           -> crate::io::Result<Vec<i8>> {\n     unsafe {\n         let mut size = c::WideCharToMultiByte(code_page,\n                                               flags,\n@@ -169,7 +169,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n                                               ptr::null(),\n                                               ptr::null_mut());\n         if size == 0 {\n-            return Err(::io::Error::last_os_error());\n+            return Err(crate::io::Error::last_os_error());\n         }\n \n         let mut buf = Vec::with_capacity(size as usize);\n@@ -186,10 +186,10 @@ fn wide_char_to_multi_byte(code_page: u32,\n                                       if no_default_char { &mut used_default_char }\n                                       else { ptr::null_mut() });\n         if size == 0 {\n-            return Err(::io::Error::last_os_error());\n+            return Err(crate::io::Error::last_os_error());\n         }\n         if no_default_char && used_default_char == c::TRUE {\n-            return Err(::io::Error::new(::io::ErrorKind::InvalidData,\n+            return Err(crate::io::Error::new(crate::io::ErrorKind::InvalidData,\n                                       \"string cannot be converted to requested code page\"));\n         }\n \n@@ -221,9 +221,9 @@ macro_rules! impl_is_zero {\n \n impl_is_zero! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n \n-pub fn cvt<I: IsZero>(i: I) -> ::io::Result<I> {\n+pub fn cvt<I: IsZero>(i: I) -> crate::io::Result<I> {\n     if i.is_zero() {\n-        Err(::io::Error::last_os_error())\n+        Err(crate::io::Error::last_os_error())\n     } else {\n         Ok(i)\n     }\n@@ -263,7 +263,7 @@ pub unsafe fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n     {\n         asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n-        ::intrinsics::unreachable();\n+        crate::intrinsics::unreachable();\n     }\n-    ::intrinsics::abort();\n+    crate::intrinsics::abort();\n }"}, {"sha": "1aa910f05c9c325d093d77e9308aafd63b4c1ff2", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -19,11 +19,11 @@\n //! CriticalSection is used and we keep track of who's holding the mutex to\n //! detect recursive locks.\n \n-use cell::UnsafeCell;\n-use mem::{self, MaybeUninit};\n-use sync::atomic::{AtomicUsize, Ordering};\n-use sys::c;\n-use sys::compat;\n+use crate::cell::UnsafeCell;\n+use crate::mem::{self, MaybeUninit};\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys::c;\n+use crate::sys::compat;\n \n pub struct Mutex {\n     lock: AtomicUsize,"}, {"sha": "1231fd55e252e127d63a8a678089010f8afb3c16", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,26 +1,27 @@\n #![unstable(issue = \"0\", feature = \"windows_net\")]\n \n-use cmp;\n-use io::{self, Read, IoVec, IoVecMut};\n+use crate::cmp;\n+use crate::io::{self, Read, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::net::{SocketAddr, Shutdown};\n+use crate::ptr;\n+use crate::sync::Once;\n+use crate::sys::c;\n+use crate::sys;\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n+use crate::sys_common::net;\n+use crate::time::Duration;\n+\n use libc::{c_int, c_void, c_ulong, c_long};\n-use mem;\n-use net::{SocketAddr, Shutdown};\n-use ptr;\n-use sync::Once;\n-use sys::c;\n-use sys;\n-use sys_common::{self, AsInner, FromInner, IntoInner};\n-use sys_common::net;\n-use time::Duration;\n \n pub type wrlen_t = i32;\n \n pub mod netc {\n-    pub use sys::c::*;\n-    pub use sys::c::SOCKADDR as sockaddr;\n-    pub use sys::c::SOCKADDR_STORAGE_LH as sockaddr_storage;\n-    pub use sys::c::ADDRINFOA as addrinfo;\n-    pub use sys::c::ADDRESS_FAMILY as sa_family_t;\n+    pub use crate::sys::c::*;\n+    pub use crate::sys::c::SOCKADDR as sockaddr;\n+    pub use crate::sys::c::SOCKADDR_STORAGE_LH as sockaddr_storage;\n+    pub use crate::sys::c::ADDRINFOA as addrinfo;\n+    pub use crate::sys::c::ADDRESS_FAMILY as sa_family_t;\n }\n \n pub struct Socket(c::SOCKET);"}, {"sha": "5b433ddfb4a384955470f8ac6168a90821883ecf", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,18 +2,18 @@\n \n #![allow(nonstandard_style)]\n \n-use os::windows::prelude::*;\n-\n-use error::Error as StdError;\n-use ffi::{OsString, OsStr};\n-use fmt;\n-use io;\n-use os::windows::ffi::EncodeWide;\n-use path::{self, PathBuf};\n-use ptr;\n-use slice;\n-use sys::{c, cvt};\n-use sys::handle::Handle;\n+use crate::os::windows::prelude::*;\n+\n+use crate::error::Error as StdError;\n+use crate::ffi::{OsString, OsStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::os::windows::ffi::EncodeWide;\n+use crate::path::{self, PathBuf};\n+use crate::ptr;\n+use crate::slice;\n+use crate::sys::{c, cvt};\n+use crate::sys::handle::Handle;\n \n use super::to_u16s;\n \n@@ -285,8 +285,8 @@ pub fn temp_dir() -> PathBuf {\n }\n \n pub fn home_dir() -> Option<PathBuf> {\n-    ::env::var_os(\"HOME\").or_else(|| {\n-        ::env::var_os(\"USERPROFILE\")\n+    crate::env::var_os(\"HOME\").or_else(|| {\n+        crate::env::var_os(\"USERPROFILE\")\n     }).map(PathBuf::from).or_else(|| unsafe {\n         let me = c::GetCurrentProcess();\n         let mut token = ptr::null_mut();\n@@ -314,8 +314,8 @@ pub fn getpid() -> u32 {\n \n #[cfg(test)]\n mod tests {\n-    use io::Error;\n-    use sys::c;\n+    use crate::io::Error;\n+    use crate::sys::c;\n \n     // tests `error_string` above\n     #[test]"}, {"sha": "8befa66ecdc9cda69dc5b85557131f0fe077b4b3", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n /// The underlying OsString/OsStr implementation on Windows is a\n /// wrapper around the \"WTF-8\" encoding; see the `wtf8` module for more.\n \n-use borrow::Cow;\n-use fmt;\n-use sys_common::wtf8::{Wtf8, Wtf8Buf};\n-use mem;\n-use rc::Rc;\n-use sync::Arc;\n-use sys_common::{AsInner, IntoInner, FromInner};\n+use crate::borrow::Cow;\n+use crate::fmt;\n+use crate::sys_common::wtf8::{Wtf8, Wtf8Buf};\n+use crate::mem;\n+use crate::rc::Rc;\n+use crate::sync::Arc;\n+use crate::sys_common::{AsInner, IntoInner, FromInner};\n \n #[derive(Clone, Hash)]\n pub struct Buf {"}, {"sha": "b8532ca9b0d4ebbae4a5b408bc35e2a4cc9b30d3", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use path::Prefix;\n-use ffi::OsStr;\n-use mem;\n+use crate::path::Prefix;\n+use crate::ffi::OsStr;\n+use crate::mem;\n \n fn os_str_as_u8_slice(s: &OsStr) -> &[u8] {\n     unsafe { mem::transmute(s) }\n@@ -20,7 +20,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n }\n \n pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix> {\n-    use path::Prefix::*;\n+    use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]\n         // and back. This is safe to do because (1) we only look at ASCII"}, {"sha": "07f4f5f0e58c40281479084e86d3c3d7c4aaeb25", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,17 +1,17 @@\n-use os::windows::prelude::*;\n+use crate::os::windows::prelude::*;\n \n-use ffi::OsStr;\n-use io;\n-use mem;\n-use path::Path;\n-use ptr;\n-use slice;\n-use sync::atomic::Ordering::SeqCst;\n-use sync::atomic::AtomicUsize;\n-use sys::c;\n-use sys::fs::{File, OpenOptions};\n-use sys::handle::Handle;\n-use sys::hashmap_random_keys;\n+use crate::ffi::OsStr;\n+use crate::io;\n+use crate::mem;\n+use crate::path::Path;\n+use crate::ptr;\n+use crate::slice;\n+use crate::sync::atomic::Ordering::SeqCst;\n+use crate::sync::atomic::AtomicUsize;\n+use crate::sys::c;\n+use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::handle::Handle;\n+use crate::sys::hashmap_random_keys;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Anonymous pipes"}, {"sha": "95f061d22bd43f6ecc7664d2009f8f27a92cd835", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,27 +1,28 @@\n #![unstable(feature = \"process_internals\", issue = \"0\")]\n \n-use collections::BTreeMap;\n-use env::split_paths;\n-use env;\n-use ffi::{OsString, OsStr};\n-use fmt;\n-use fs;\n-use io::{self, Error, ErrorKind};\n+use crate::collections::BTreeMap;\n+use crate::env::split_paths;\n+use crate::env;\n+use crate::ffi::{OsString, OsStr};\n+use crate::fmt;\n+use crate::fs;\n+use crate::io::{self, Error, ErrorKind};\n+use crate::mem;\n+use crate::os::windows::ffi::OsStrExt;\n+use crate::path::Path;\n+use crate::ptr;\n+use crate::sys::mutex::Mutex;\n+use crate::sys::c;\n+use crate::sys::fs::{OpenOptions, File};\n+use crate::sys::handle::Handle;\n+use crate::sys::pipe::{self, AnonPipe};\n+use crate::sys::stdio;\n+use crate::sys::cvt;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::sys_common::process::{CommandEnv, EnvKey};\n+use crate::borrow::Borrow;\n+\n use libc::{c_void, EXIT_SUCCESS, EXIT_FAILURE};\n-use mem;\n-use os::windows::ffi::OsStrExt;\n-use path::Path;\n-use ptr;\n-use sys::mutex::Mutex;\n-use sys::c;\n-use sys::fs::{OpenOptions, File};\n-use sys::handle::Handle;\n-use sys::pipe::{self, AnonPipe};\n-use sys::stdio;\n-use sys::cvt;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use sys_common::process::{CommandEnv, EnvKey};\n-use borrow::Borrow;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -537,7 +538,7 @@ fn make_dirp(d: Option<&OsString>) -> io::Result<(*const u16, Vec<u16>)> {\n \n #[cfg(test)]\n mod tests {\n-    use ffi::{OsStr, OsString};\n+    use crate::ffi::{OsStr, OsString};\n     use super::make_command_line;\n \n     #[test]"}, {"sha": "0193f4defa1fff6f8d52968ed3e95748d1b33a39", "filename": "src/libstd/sys/windows/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use io;\n-use mem;\n-use sys::c;\n+use crate::io;\n+use crate::mem;\n+use crate::sys::c;\n \n pub fn hashmap_random_keys() -> (u64, u64) {\n     let mut v = (0, 0);"}, {"sha": "ef57562fc3a0b1157b232c7e38602a170304f3b4", "filename": "src/libstd/sys/windows/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,5 @@\n-use cell::UnsafeCell;\n-use sys::c;\n+use crate::cell::UnsafeCell;\n+use crate::sys::c;\n \n pub struct RWLock { inner: UnsafeCell<c::SRWLOCK> }\n "}, {"sha": "d5b7765f9ff5fcce2b6bd1b8512857fe02512e0c", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n #![cfg_attr(test, allow(dead_code))]\n \n-use sys_common::util::report_overflow;\n-use sys::c;\n+use crate::sys_common::util::report_overflow;\n+use crate::sys::c;\n \n pub struct Handler;\n "}, {"sha": "b2beaca41b1d66403b05f31cc874260092a51a68", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,13 @@\n #![unstable(issue = \"0\", feature = \"windows_stdio\")]\n \n-use char::decode_utf16;\n-use cmp;\n-use io;\n-use ptr;\n-use str;\n-use sys::c;\n-use sys::cvt;\n-use sys::handle::Handle;\n+use crate::char::decode_utf16;\n+use crate::cmp;\n+use crate::io;\n+use crate::ptr;\n+use crate::str;\n+use crate::sys::c;\n+use crate::sys::cvt;\n+use crate::sys::handle::Handle;\n \n // Don't cache handles but get them fresh for every read/write. This allows us to track changes to\n // the value over time (such as if a process calls `SetStdHandle` while it's running). See #40490."}, {"sha": "1b0a811f13b72f5652e66b52c846c3f0fda6241a", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,13 +1,14 @@\n-use boxed::FnBox;\n-use io;\n-use ffi::CStr;\n-use mem;\n+use crate::boxed::FnBox;\n+use crate::io;\n+use crate::ffi::CStr;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sys::c;\n+use crate::sys::handle::Handle;\n+use crate::sys_common::thread::*;\n+use crate::time::Duration;\n+\n use libc::c_void;\n-use ptr;\n-use sys::c;\n-use sys::handle::Handle;\n-use sys_common::thread::*;\n-use time::Duration;\n \n use super::to_u16s;\n "}, {"sha": "4c9734fa0aa61843736d056b71d55ac12b674519", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use mem;\n-use ptr;\n-use sync::atomic::AtomicPtr;\n-use sync::atomic::Ordering::SeqCst;\n-use sys::c;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sync::atomic::AtomicPtr;\n+use crate::sync::atomic::Ordering::SeqCst;\n+use crate::sys::c;\n \n pub type Key = c::DWORD;\n pub type Dtor = unsafe extern fn(*mut u8);\n@@ -211,7 +211,7 @@ unsafe extern \"system\" fn on_tls_callback(h: c::LPVOID,\n     #[cfg(target_env = \"msvc\")]\n     unsafe fn reference_tls_used() {\n         extern { static _tls_used: u8; }\n-        ::intrinsics::volatile_load(&_tls_used);\n+        crate::intrinsics::volatile_load(&_tls_used);\n     }\n     #[cfg(not(target_env = \"msvc\"))]\n     unsafe fn reference_tls_used() {}"}, {"sha": "2c99bca70095cb5fb26427592ef2b7b24eca42b1", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,10 @@\n-use cmp::Ordering;\n-use fmt;\n-use mem;\n-use sys::c;\n-use time::Duration;\n-use convert::TryInto;\n+use crate::cmp::Ordering;\n+use crate::fmt;\n+use crate::mem;\n+use crate::sys::c;\n+use crate::time::Duration;\n+use crate::convert::TryInto;\n+\n use core::hash::{Hash, Hasher};\n \n const NANOS_PER_SEC: u64 = 1_000_000_000;\n@@ -172,11 +173,11 @@ fn intervals2dur(intervals: u64) -> Duration {\n \n mod perf_counter {\n     use super::{NANOS_PER_SEC};\n-    use sync::Once;\n-    use sys_common::mul_div_u64;\n-    use sys::c;\n-    use sys::cvt;\n-    use time::Duration;\n+    use crate::sync::Once;\n+    use crate::sys_common::mul_div_u64;\n+    use crate::sys::c;\n+    use crate::sys::cvt;\n+    use crate::time::Duration;\n \n     pub struct PerformanceCounterInstant {\n         ts: c::LARGE_INTEGER"}, {"sha": "978a70bee09835c65f0b4bdae0377cadd652f344", "filename": "src/libstd/sys_common/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Falloc.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n #![allow(dead_code)]\n \n-use alloc::{GlobalAlloc, Layout, System};\n-use cmp;\n-use ptr;\n+use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::cmp;\n+use crate::ptr;\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values."}, {"sha": "1181b86161199e3d8401d5e1044e5e96be92f612", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n //!\n //! Documentation can be found on the `rt::at_exit` function.\n \n-use boxed::FnBox;\n-use ptr;\n-use mem;\n-use sys_common::mutex::Mutex;\n+use crate::boxed::FnBox;\n+use crate::ptr;\n+use crate::mem;\n+use crate::sys_common::mutex::Mutex;\n \n type Queue = Vec<Box<dyn FnBox()>>;\n "}, {"sha": "1a80908779e1ac81eabbf027f00e842a7e2aa2e5", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,17 +1,18 @@\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n \n-use env;\n-use io::prelude::*;\n-use io;\n-use path::{self, Path};\n-use ptr;\n+use crate::env;\n+use crate::io::prelude::*;\n+use crate::io;\n+use crate::path::{self, Path};\n+use crate::ptr;\n+use crate::str;\n+use crate::sync::atomic::{self, Ordering};\n+use crate::sys::mutex::Mutex;\n+\n use rustc_demangle::demangle;\n-use str;\n-use sync::atomic::{self, Ordering};\n-use sys::mutex::Mutex;\n \n-pub use sys::backtrace::{\n+pub use crate::sys::backtrace::{\n     unwind_backtrace,\n     resolve_symname,\n     foreach_symbol_fileline,"}, {"sha": "273d586a5a0b2d189898b3c383ce0a89bb1bb65b", "filename": "src/libstd/sys_common/bytestring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbytestring.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n \n-use fmt::{Formatter, Result, Write};\n+use crate::fmt::{Formatter, Result, Write};\n use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n \n pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {\n@@ -25,7 +25,7 @@ pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use fmt::{Formatter, Result, Debug};\n+    use crate::fmt::{Formatter, Result, Debug};\n \n     #[test]\n     fn smoke() {"}, {"sha": "fc59c8356f46a1ebd871d4386953a6395868fd6a", "filename": "src/libstd/sys_common/condvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fcondvar.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,6 +1,6 @@\n-use time::Duration;\n-use sys_common::mutex::{self, Mutex};\n-use sys::condvar as imp;\n+use crate::time::Duration;\n+use crate::sys_common::mutex::{self, Mutex};\n+use crate::sys::condvar as imp;\n \n /// An OS-based condition variable.\n ///"}, {"sha": "6cd050242dd950e6090f725a969dc157193418a0", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,12 +1,11 @@\n-use libc;\n-use backtrace_sys::{self, backtrace_state};\n+use backtrace_sys::backtrace_state;\n \n-use ffi::CStr;\n-use io;\n-use mem;\n-use ptr;\n-use sys::backtrace::BacktraceContext;\n-use sys_common::backtrace::Frame;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::mem;\n+use crate::ptr;\n+use crate::sys::backtrace::BacktraceContext;\n+use crate::sys_common::backtrace::Frame;\n \n pub fn foreach_symbol_fileline<F>(frame: Frame,\n                                   mut f: F,\n@@ -153,7 +152,7 @@ unsafe fn init_state() -> *mut backtrace_state {\n     static mut STATE: *mut backtrace_state = ptr::null_mut();\n     if !STATE.is_null() { return STATE  }\n \n-    let filename = match ::sys::backtrace::gnu::get_executable_filename() {\n+    let filename = match crate::sys::backtrace::gnu::get_executable_filename() {\n         Ok((filename, file)) => {\n             // filename is purposely leaked here since libbacktrace requires\n             // it to stay allocated permanently, file is also leaked so that"}, {"sha": "44b0963302ddfe5491d5c020dd5edcc7f487b7a5", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -3,10 +3,10 @@ pub const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n #[cfg(test)]\n #[allow(dead_code)] // not used on emscripten\n pub mod test {\n-    use path::{Path, PathBuf};\n-    use env;\n-    use rand::{self, RngCore};\n-    use fs;\n+    use crate::path::{Path, PathBuf};\n+    use crate::env;\n+    use crate::fs;\n+    use rand::RngCore;\n \n     pub struct TempDir(PathBuf);\n "}, {"sha": "1fc32365408b86659a2ae3583c41625e30b3a4a9", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -15,11 +15,11 @@\n #![allow(missing_docs)]\n #![allow(missing_debug_implementations)]\n \n-use sync::Once;\n-use sys;\n+use crate::sync::Once;\n+use crate::sys;\n \n macro_rules! rtabort {\n-    ($($t:tt)*) => (::sys_common::util::abort(format_args!($($t)*)))\n+    ($($t:tt)*) => (crate::sys_common::util::abort(format_args!($($t)*)))\n }\n \n macro_rules! rtassert {\n@@ -52,7 +52,7 @@ cfg_if! {\n                  target_os = \"redox\",\n                  all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n                  all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        pub use sys::net;\n+        pub use crate::sys::net;\n     } else {\n         pub mod net;\n     }"}, {"sha": "4b58cac7941b9bcc19dfd7c7e08963f74e052e56", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use sys::mutex as imp;\n+use crate::sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock.\n ///"}, {"sha": "36721171b17334e111346faebd5254f9ff7e253d", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,37 +1,38 @@\n-use cmp;\n-use ffi::CString;\n-use fmt;\n-use io::{self, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::cmp;\n+use crate::ffi::CString;\n+use crate::fmt;\n+use crate::io::{self, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::mem;\n+use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n+use crate::ptr;\n+use crate::sys::net::{cvt, cvt_r, cvt_gai, Socket, init, wrlen_t};\n+use crate::sys::net::netc as c;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::time::Duration;\n+use crate::convert::{TryFrom, TryInto};\n+\n use libc::{c_int, c_void};\n-use mem;\n-use net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n-use ptr;\n-use sys::net::{cvt, cvt_r, cvt_gai, Socket, init, wrlen_t};\n-use sys::net::netc as c;\n-use sys_common::{AsInner, FromInner, IntoInner};\n-use time::Duration;\n-use convert::{TryFrom, TryInto};\n \n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n           target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))]\n-use sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n+use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n               target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\")))]\n-use sys::net::netc::IPV6_ADD_MEMBERSHIP;\n+use crate::sys::net::netc::IPV6_ADD_MEMBERSHIP;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n           target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))]\n-use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n+use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n               target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\")))]\n-use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n+use crate::sys::net::netc::IPV6_DROP_MEMBERSHIP;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n           target_os = \"dragonfly\", target_os = \"freebsd\",\n@@ -109,8 +110,8 @@ fn to_ipv6mr_interface(value: u32) -> c_int {\n }\n \n #[cfg(not(target_os = \"android\"))]\n-fn to_ipv6mr_interface(value: u32) -> ::libc::c_uint {\n-    value as ::libc::c_uint\n+fn to_ipv6mr_interface(value: u32) -> libc::c_uint {\n+    value as libc::c_uint\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -653,7 +654,7 @@ impl fmt::Debug for UdpSocket {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use collections::HashMap;\n+    use crate::collections::HashMap;\n \n     #[test]\n     fn no_lookup_host_duplicates() {"}, {"sha": "d2294235666493dd40815d57d1f2ede24f3cdc8b", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n-use error::{Error};\n-use fmt;\n-use sync::atomic::{AtomicBool, Ordering};\n-use thread;\n+use crate::error::{Error};\n+use crate::fmt;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::thread;\n \n pub struct Flag { failed: AtomicBool }\n "}, {"sha": "4d40dec97245a966df377a21751af8803a465195", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,10 +1,10 @@\n #![allow(dead_code)]\n #![unstable(feature = \"process_internals\", issue = \"0\")]\n \n-use ffi::{OsStr, OsString};\n-use env;\n-use collections::BTreeMap;\n-use borrow::Borrow;\n+use crate::ffi::{OsStr, OsString};\n+use crate::env;\n+use crate::collections::BTreeMap;\n+use crate::borrow::Borrow;\n \n pub trait EnvKey:\n     From<OsString> + Into<OsString> +"}, {"sha": "2aec361d7a4936ece8b4e412efa5e6f025fc729c", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,9 +1,9 @@\n-use fmt;\n-use marker;\n-use ops::Deref;\n-use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n-use sys::mutex as sys;\n-use panic::{UnwindSafe, RefUnwindSafe};\n+use crate::fmt;\n+use crate::marker;\n+use crate::ops::Deref;\n+use crate::sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n+use crate::sys::mutex as sys;\n+use crate::panic::{UnwindSafe, RefUnwindSafe};\n \n /// A re-entrant mutual exclusion\n ///\n@@ -159,10 +159,10 @@ impl<T> Drop for ReentrantMutexGuard<'_, T> {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-    use cell::RefCell;\n-    use sync::Arc;\n-    use thread;\n+    use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n+    use crate::cell::RefCell;\n+    use crate::sync::Arc;\n+    use crate::thread;\n \n     #[test]\n     fn smoke() {"}, {"sha": "0b1a092de5422d69589dafb35c6b9865cd32df8d", "filename": "src/libstd/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Frwlock.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,4 +1,4 @@\n-use sys::rwlock as imp;\n+use crate::sys::rwlock as imp;\n \n /// An OS-based reader-writer lock.\n ///"}, {"sha": "b2142e753085a4caaef57b5da70f825a29f43305", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n-use boxed::FnBox;\n-use env;\n-use sync::atomic::{self, Ordering};\n-use sys::stack_overflow;\n-use sys::thread as imp;\n+use crate::boxed::FnBox;\n+use crate::env;\n+use crate::sync::atomic::{self, Ordering};\n+use crate::sys::stack_overflow;\n+use crate::sys::thread as imp;\n \n #[allow(dead_code)]\n pub unsafe fn start_thread(main: *mut u8) {"}, {"sha": "b3c21ec508a9eda1cb79ce8d53b9daedd33ca8c9", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,8 +1,8 @@\n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n-use cell::RefCell;\n-use sys::thread::guard::Guard;\n-use thread::Thread;\n+use crate::cell::RefCell;\n+use crate::sys::thread::guard::Guard;\n+use crate::thread::Thread;\n \n struct ThreadInfo {\n     stack_guard: Option<Guard>,"}, {"sha": "bdf79002e906dcc477d6395a75402a37a6b04582", "filename": "src/libstd/sys_common/thread_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -48,10 +48,10 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-use ptr;\n-use sync::atomic::{self, AtomicUsize, Ordering};\n-use sys::thread_local as imp;\n-use sys_common::mutex::Mutex;\n+use crate::ptr;\n+use crate::sync::atomic::{self, AtomicUsize, Ordering};\n+use crate::sys::thread_local as imp;\n+use crate::sys_common::mutex::Mutex;\n \n /// A type for TLS keys that are statically allocated.\n ///"}, {"sha": "b547d941f3ba6b715e9fafe51ae6296d7add9b77", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,7 +1,7 @@\n-use fmt;\n-use io::prelude::*;\n-use sys::stdio::panic_output;\n-use thread;\n+use crate::fmt;\n+use crate::io::prelude::*;\n+use crate::sys::stdio::panic_output;\n+use crate::thread;\n \n pub fn dumb_print(args: fmt::Arguments) {\n     if let Some(mut out) = panic_output() {\n@@ -16,7 +16,7 @@ pub fn dumb_print(args: fmt::Arguments) {\n \n pub fn abort(args: fmt::Arguments) -> ! {\n     dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n-    unsafe { ::sys::abort_internal(); }\n+    unsafe { crate::sys::abort_internal(); }\n }\n \n #[allow(dead_code)] // stack overflow detection not enabled on all platforms"}, {"sha": "b15239e8d877e223507cbcf888c871bac6e8d366", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -17,18 +17,18 @@\n \n use core::str::next_code_point;\n \n-use borrow::Cow;\n-use char;\n-use fmt;\n-use hash::{Hash, Hasher};\n-use iter::FromIterator;\n-use mem;\n-use ops;\n-use rc::Rc;\n-use slice;\n-use str;\n-use sync::Arc;\n-use sys_common::AsInner;\n+use crate::borrow::Cow;\n+use crate::char;\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n+use crate::iter::FromIterator;\n+use crate::mem;\n+use crate::ops;\n+use crate::rc::Rc;\n+use crate::slice;\n+use crate::str;\n+use crate::sync::Arc;\n+use crate::sys_common::AsInner;\n \n const UTF8_REPLACEMENT_CHARACTER: &str = \"\\u{FFFD}\";\n \n@@ -413,7 +413,7 @@ impl AsInner<[u8]> for Wtf8 {\n impl fmt::Debug for Wtf8 {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {\n-            use fmt::Write;\n+            use crate::fmt::Write;\n             for c in s.chars().flat_map(|c| c.escape_debug()) {\n                 f.write_char(c)?\n             }\n@@ -871,7 +871,7 @@ impl Wtf8 {\n \n #[cfg(test)]\n mod tests {\n-    use borrow::Cow;\n+    use crate::borrow::Cow;\n     use super::*;\n \n     #[test]"}, {"sha": "06fb5533afdd80c11140979edfcfa46cb655eec5", "filename": "src/libstd/tests/env.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftests%2Fenv.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -1,5 +1,3 @@\n-extern crate rand;\n-\n use std::env::*;\n use std::ffi::{OsString, OsStr};\n "}, {"sha": "d1f53734d30e31ea63cbcb2942a0b51a66cd006e", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -2,10 +2,10 @@\n \n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n-use cell::UnsafeCell;\n-use fmt;\n-use hint;\n-use mem;\n+use crate::cell::UnsafeCell;\n+use crate::fmt;\n+use crate::hint;\n+use crate::mem;\n \n /// A thread local storage key which owns its contents.\n ///\n@@ -310,14 +310,14 @@ impl<T: 'static> LocalKey<T> {\n #[doc(hidden)]\n #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n pub mod statik {\n-    use cell::UnsafeCell;\n-    use fmt;\n+    use crate::cell::UnsafeCell;\n+    use crate::fmt;\n \n     pub struct Key<T> {\n         inner: UnsafeCell<Option<T>>,\n     }\n \n-    unsafe impl<T> ::marker::Sync for Key<T> { }\n+    unsafe impl<T> Sync for Key<T> { }\n \n     impl<T> fmt::Debug for Key<T> {\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -341,11 +341,11 @@ pub mod statik {\n #[doc(hidden)]\n #[cfg(target_thread_local)]\n pub mod fast {\n-    use cell::{Cell, UnsafeCell};\n-    use fmt;\n-    use mem;\n-    use ptr;\n-    use sys::fast_thread_local::{register_dtor, requires_move_before_drop};\n+    use crate::cell::{Cell, UnsafeCell};\n+    use crate::fmt;\n+    use crate::mem;\n+    use crate::ptr;\n+    use crate::sys::fast_thread_local::{register_dtor, requires_move_before_drop};\n \n     pub struct Key<T> {\n         inner: UnsafeCell<Option<T>>,\n@@ -412,11 +412,11 @@ pub mod fast {\n \n #[doc(hidden)]\n pub mod os {\n-    use cell::{Cell, UnsafeCell};\n-    use fmt;\n-    use marker;\n-    use ptr;\n-    use sys_common::thread_local::StaticKey as OsStaticKey;\n+    use crate::cell::{Cell, UnsafeCell};\n+    use crate::fmt;\n+    use crate::marker;\n+    use crate::ptr;\n+    use crate::sys_common::thread_local::StaticKey as OsStaticKey;\n \n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off.\n@@ -430,7 +430,7 @@ pub mod os {\n         }\n     }\n \n-    unsafe impl<T> ::marker::Sync for Key<T> { }\n+    unsafe impl<T> Sync for Key<T> { }\n \n     struct Value<T: 'static> {\n         key: &'static Key<T>,\n@@ -484,9 +484,9 @@ pub mod os {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use sync::mpsc::{channel, Sender};\n-    use cell::{Cell, UnsafeCell};\n-    use thread;\n+    use crate::sync::mpsc::{channel, Sender};\n+    use crate::cell::{Cell, UnsafeCell};\n+    use crate::thread;\n \n     struct Foo(Sender<()>);\n \n@@ -632,8 +632,8 @@ mod tests {\n \n #[cfg(test)]\n mod dynamic_tests {\n-    use cell::RefCell;\n-    use collections::HashMap;\n+    use crate::cell::RefCell;\n+    use crate::collections::HashMap;\n \n     #[test]\n     fn smoke() {"}, {"sha": "08f0aa2f0d2065d403bc27bee0df2ca8fd0eeaa8", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -156,25 +156,25 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use any::Any;\n-use boxed::FnBox;\n-use cell::UnsafeCell;\n-use ffi::{CStr, CString};\n-use fmt;\n-use io;\n-use mem;\n-use panic;\n-use panicking;\n-use str;\n-use sync::{Mutex, Condvar, Arc};\n-use sync::atomic::AtomicUsize;\n-use sync::atomic::Ordering::SeqCst;\n-use sys::thread as imp;\n-use sys_common::mutex;\n-use sys_common::thread_info;\n-use sys_common::thread;\n-use sys_common::{AsInner, IntoInner};\n-use time::Duration;\n+use crate::any::Any;\n+use crate::boxed::FnBox;\n+use crate::cell::UnsafeCell;\n+use crate::ffi::{CStr, CString};\n+use crate::fmt;\n+use crate::io;\n+use crate::mem;\n+use crate::panic;\n+use crate::panicking;\n+use crate::str;\n+use crate::sync::{Mutex, Condvar, Arc};\n+use crate::sync::atomic::AtomicUsize;\n+use crate::sync::atomic::Ordering::SeqCst;\n+use crate::sys::thread as imp;\n+use crate::sys_common::mutex;\n+use crate::sys_common::thread_info;\n+use crate::sys_common::thread;\n+use crate::sys_common::{AsInner, IntoInner};\n+use crate::time::Duration;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Thread-local storage\n@@ -466,7 +466,7 @@ impl Builder {\n             thread_info::set(imp::guard::current(), their_thread);\n             #[cfg(feature = \"backtrace\")]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-                ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n+                crate::sys_common::backtrace::__rust_begin_short_backtrace(f)\n             }));\n             #[cfg(not(feature = \"backtrace\"))]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n@@ -1051,7 +1051,7 @@ impl ThreadId {\n \n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n-            if COUNTER == ::u64::MAX {\n+            if COUNTER == crate::u64::MAX {\n                 panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n             }\n \n@@ -1290,7 +1290,7 @@ impl fmt::Debug for Thread {\n ///\n /// [`Result`]: ../../std/result/enum.Result.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type Result<T> = ::result::Result<T, Box<dyn Any + Send + 'static>>;\n+pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n // This packet is used to communicate the return value between the child thread\n // and the parent thread. Memory is shared through the `Arc` within and there's\n@@ -1482,13 +1482,13 @@ fn _assert_sync_and_send() {\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n-    use any::Any;\n-    use sync::mpsc::{channel, Sender};\n-    use result;\n-    use super::{Builder};\n-    use thread;\n-    use time::Duration;\n-    use u32;\n+    use super::Builder;\n+    use crate::any::Any;\n+    use crate::sync::mpsc::{channel, Sender};\n+    use crate::result;\n+    use crate::thread;\n+    use crate::time::Duration;\n+    use crate::u32;\n \n     // !!! These tests are dangerous. If something is buggy, they will hang, !!!\n     // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!"}, {"sha": "6d7093ac33ea7b3556955c8b840e5b3d19b05dd0", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b6d9e086c6910118a57e4332c9448ab550931f/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=93b6d9e086c6910118a57e4332c9448ab550931f", "patch": "@@ -12,13 +12,13 @@\n \n #![stable(feature = \"time\", since = \"1.3.0\")]\n \n-use cmp;\n-use error::Error;\n-use fmt;\n-use ops::{Add, Sub, AddAssign, SubAssign};\n-use sys::time;\n-use sys_common::FromInner;\n-use sys_common::mutex::Mutex;\n+use crate::cmp;\n+use crate::error::Error;\n+use crate::fmt;\n+use crate::ops::{Add, Sub, AddAssign, SubAssign};\n+use crate::sys::time;\n+use crate::sys_common::FromInner;\n+use crate::sys_common::mutex::Mutex;\n \n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n@@ -713,7 +713,7 @@ mod tests {\n         assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n         // A difference of 80 and 800 years cannot fit inside a 32-bit time_t\n-        if !(cfg!(unix) && ::mem::size_of::<::libc::time_t>() <= 4) {\n+        if !(cfg!(unix) && crate::mem::size_of::<libc::time_t>() <= 4) {\n             let eighty_years = second * 60 * 60 * 24 * 365 * 80;\n             assert_almost_eq!(a - eighty_years + eighty_years, a);\n             assert_almost_eq!(a - (eighty_years * 10) + (eighty_years * 10), a);"}]}