{"sha": "7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTQ1ZWVhZTk3MzNkYmRkNTFkOTBkYzkzNDJmOWE4ZjQxZjEyYTc=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-12-09T04:41:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-09T22:21:21Z"}, "message": "cargo: support installing crates\n\nIntroduce the notion of CARGO_ROOT to override HOME if need be. Build packages\nthere instead of in /tmp. Install to CARGO_ROOT/bin and CARGO_ROOT/lib.", "tree": {"sha": "d087ff16ce92744d89fae7a9fc08e59aae5e83f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d087ff16ce92744d89fae7a9fc08e59aae5e83f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "html_url": "https://github.com/rust-lang/rust/commit/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a066bde87255ce83fc83a27c452f088993466c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a066bde87255ce83fc83a27c452f088993466c", "html_url": "https://github.com/rust-lang/rust/commit/e3a066bde87255ce83fc83a27c452f088993466c"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "20d3b3882bdb6d0d5270e96edcecd71123ff4cb8", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 82, "deletions": 19, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "patch": "@@ -4,9 +4,11 @@ import rustc::syntax::{ast, codemap, visit};\n import rustc::syntax::parse::parser;\n \n import std::fs;\n+import std::generic_os;\n import std::io;\n import std::option;\n import std::option::{none, some};\n+import std::os;\n import std::run;\n import std::str;\n import std::tempfile;\n@@ -17,7 +19,8 @@ type pkg = {\n     vers: str,\n     uuid: str,\n     desc: option::t<str>,\n-    sigs: option::t<str>\n+    sigs: option::t<str>,\n+    crate_type: option::t<str>\n };\n \n fn load_link(mis: [@ast::meta_item]) -> (option::t<str>,\n@@ -50,13 +53,15 @@ fn load_pkg(filename: str) -> option::t<pkg> {\n     let uuid = none;\n     let desc = none;\n     let sigs = none;\n+    let crate_type = none;\n \n     for a in c.node.attrs {\n         alt a.node.value.node {\n             ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n                 alt v {\n                     \"desc\" { desc = some(v); }\n                     \"sigs\" { sigs = some(v); }\n+                    \"crate_type\" { crate_type = some(v); }\n                     _ { }\n                 }\n             }\n@@ -78,7 +83,8 @@ fn load_pkg(filename: str) -> option::t<pkg> {\n                 vers: vers0,\n                 uuid: uuid0,\n                 desc: desc,\n-                sigs: sigs})\n+                sigs: sigs,\n+                crate_type: crate_type})\n         }\n         _ { ret none; }\n     }\n@@ -96,41 +102,97 @@ fn rest(s: str, start: uint) -> str {\n     }\n }\n \n-fn install_source(path: str) {\n+fn need_dir(s: str) {\n+    if fs::file_is_dir(s) { ret; }\n+    if !fs::make_dir(s, 0x1c0i32) {\n+        fail #fmt[\"can't make_dir %s\", s];\n+    }\n+}\n+\n+fn setup_dirs() -> str {\n+    let p = alt generic_os::getenv(\"CARGO_ROOT\") {\n+        some(_p) { _p }\n+        none. {\n+            alt generic_os::getenv(\"HOME\") {\n+                some(_q) { fs::connect(_q, \"/.cargo\") }\n+                none. { fail \"no CARGO_ROOT or HOME\"; }\n+            }\n+        }\n+    };\n+\n+    log #fmt[\"p: %s\", p];\n+\n+    need_dir(p);\n+    need_dir(fs::connect(p, \"fetch\"));\n+    need_dir(fs::connect(p, \"work\"));\n+    need_dir(fs::connect(p, \"lib\"));\n+    need_dir(fs::connect(p, \"bin\"));\n+\n+    p\n+}\n+\n+fn install_one_crate(cargo_root: str, path: str, cf: str, p: pkg) {\n+    let bindir = fs::connect(cargo_root, \"bin\");\n+    let libdir = fs::connect(cargo_root, \"lib\");\n+    let name = fs::basename(cf);\n+    let ri = str::index(name, '.' as u8);\n+    if ri != -1 {\n+        name = str::slice(name, 0u, ri as uint);\n+    }\n+    log #fmt[\"Installing: %s\", name];\n+    let old = fs::list_dir(\".\");\n+    run::run_program(\"rustc\", [cf]);\n+    let new = fs::list_dir(\".\");\n+    let created = vec::filter::<str>({ |n| !vec::member::<str>(n, old) }, new);\n+    for c: str in created {\n+        if str::ends_with(c, os::exec_suffix()) {\n+            log #fmt[\"  bin: %s\", c];\n+            // FIXME: need libstd fs::copy or something\n+            run::run_program(\"cp\", [c, fs::connect(bindir, c)]);\n+        } else {\n+            log #fmt[\"  lib: %s\", c];\n+            run::run_program(\"cp\", [c, fs::connect(libdir, c)]);\n+        }\n+    }\n+}\n+\n+fn install_source(cargo_root: str, path: str) {\n     log #fmt[\"source: %s\", path];\n     fs::change_dir(path);\n     let contents = fs::list_dir(\".\");\n \n     log #fmt[\"contents: %s\", str::connect(contents, \", \")];\n \n-    let cratefile = vec::find::<str>({ |n| str::ends_with(n, \".rc\") }, contents);\n+    let cratefiles = vec::filter::<str>({ |n| str::ends_with(n, \".rc\") }, contents);\n \n-    // First, try a configure script:\n-    if vec::member(\"./configure\", contents) {\n-        run::run_program(\"./configure\", []);\n+    if vec::is_empty(cratefiles) {\n+        fail \"This doesn't look like a rust package (no .rc files).\";\n     }\n \n-    // Makefile?\n-    if vec::member(\"./Makefile\", contents) {\n-        run::run_program(\"make\", [\"RUSTC=rustc\"]);\n-    } else if option::is_some::<str>(cratefile) {\n-        run::run_program(\"rustc\", [option::get(cratefile)]);\n+    for cf: str in cratefiles {\n+        let p = load_pkg(cf);\n+        alt p {\n+            none. { cont; }\n+            some(_p) {\n+                install_one_crate(cargo_root, path, cf, _p);\n+            }\n+        }\n     }\n }\n \n-fn install_file(_path: str) {\n-    let wd = tempfile::mkdtemp(\"/tmp/cargo-work-\", \"\");\n+fn install_file(cargo_root: str, _path: str) {\n+    let wd = tempfile::mkdtemp(cargo_root + \"/work/\", \"\");\n     alt wd {\n         some(p) {\n             run::run_program(\"tar\", [\"-x\", \"--strip-components=1\",\n                                      \"-C\", p, \"-f\", _path]);\n-            install_source(p);\n+            install_source(cargo_root, p);\n         }\n-        _ { }\n+        _ { fail \"needed temp dir\"; }\n     }\n }\n \n-fn cmd_install(argv: [str]) {\n+fn cmd_install(cargo_root: str, argv: [str]) {\n     // cargo install <pkg>\n     if vec::len(argv) < 3u {\n         cmd_usage();\n@@ -139,7 +201,7 @@ fn cmd_install(argv: [str]) {\n \n     if str::starts_with(argv[2], \"file:\") {\n         let path = rest(argv[2], 5u);\n-        install_file(path);\n+        install_file(cargo_root, path);\n     }\n }\n \n@@ -152,8 +214,9 @@ fn main(argv: [str]) {\n         cmd_usage();\n         ret;\n     }\n+    let cargo_root = setup_dirs();\n     alt argv[1] {\n-        \"install\" { cmd_install(argv); }\n+        \"install\" { cmd_install(cargo_root, argv); }\n         \"usage\" { cmd_usage(); }\n         _ { cmd_usage(); }\n     }"}]}