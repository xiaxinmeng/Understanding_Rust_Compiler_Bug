{"sha": "547b3adfe4afb7cfe3d3603e16faa458913ef56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2IzYWRmZTRhZmI3Y2ZlM2QzNjAzZTE2ZmFhNDU4OTEzZWY1NmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T15:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T15:10:21Z"}, "message": "Rollup merge of #82113 - m-ou-se:panic-format-lint, r=estebank\n\nImprove non_fmt_panic lint.\n\nThis change:\n- fixes the span used by this lint in the case the panic argument is a single macro expansion (e.g. `panic!(a!())`);\n- adds a suggestion for `panic!(format!(..))` to remove `format!()` instead of adding `\"{}\", ` or using `panic_any` like it does now; and\n- fixes the incorrect suggestion to replace `panic![123]` by `panic_any(123]`.\n\nFixes #82109.\nFixes #82110.\nFixes #82111.\n\nExample output:\n```\nwarning: panic message is not a string literal\n --> src/main.rs:8:12\n  |\n8 |     panic!(format!(\"error: {}\", \"oh no\"));\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(non_fmt_panic)]` on by default\n  = note: this is no longer accepted in Rust 2021\n  = note: the panic!() macro supports formatting, so there's no need for the format!() macro here\nhelp: remove the `format!(..)` macro call\n  |\n8 |     panic!(\"error: {}\", \"oh no\");\n  |           --                  --\n\n```\n\nr? `@estebank`", "tree": {"sha": "9ab0c55b4ec5df5a65f4d5d182561516993ffc56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab0c55b4ec5df5a65f4d5d182561516993ffc56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547b3adfe4afb7cfe3d3603e16faa458913ef56f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNRrdCRBK7hj4Ov3rIwAAdHIIALLFegpL6jw0GqtxQvoYyMyu\nbVW+jXfLvmJk4Tzx6YH6dD0/VJpBD4ZvUMiLiiD7KF8zfbsEec9oBbnaGEOT65cD\niA6wUg9MhjoBHiEWyVte42I5cfrXK8x06lODnTivn6Ri8jdCL/kxQsVe0N+P8F5+\nG3FvIT6Z7dSqAozoc5IqrdJ9qiapNL5+wjD2TfM7ufbTXw4TIpC3gR5TKCLNYiKq\n0gaNLN0yYNaZDeQzdEV9/elUK3VMdOpvynmzV1/qkc2kq85ulGW8nmeIa8kHnpNj\n3SMXEadJEmvc/utEZZ2scBB9kOAoDFWs5UMelFjQO2+dIO1nYmnmrOwvex5+kOw=\n=2JXN\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ab0c55b4ec5df5a65f4d5d182561516993ffc56\nparent 18d12844330df90ac4d309dc545902551634a251\nparent ad93f48d770cc8cfe473e809700201c31550bc68\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614093021 +0100\ncommitter GitHub <noreply@github.com> 1614093021 +0100\n\nRollup merge of #82113 - m-ou-se:panic-format-lint, r=estebank\n\nImprove non_fmt_panic lint.\n\nThis change:\n- fixes the span used by this lint in the case the panic argument is a single macro expansion (e.g. `panic!(a!())`);\n- adds a suggestion for `panic!(format!(..))` to remove `format!()` instead of adding `\"{}\", ` or using `panic_any` like it does now; and\n- fixes the incorrect suggestion to replace `panic![123]` by `panic_any(123]`.\n\nFixes #82109.\nFixes #82110.\nFixes #82111.\n\nExample output:\n```\nwarning: panic message is not a string literal\n --> src/main.rs:8:12\n  |\n8 |     panic!(format!(\"error: {}\", \"oh no\"));\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(non_fmt_panic)]` on by default\n  = note: this is no longer accepted in Rust 2021\n  = note: the panic!() macro supports formatting, so there's no need for the format!() macro here\nhelp: remove the `format!(..)` macro call\n  |\n8 |     panic!(\"error: {}\", \"oh no\");\n  |           --                  --\n\n```\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547b3adfe4afb7cfe3d3603e16faa458913ef56f", "html_url": "https://github.com/rust-lang/rust/commit/547b3adfe4afb7cfe3d3603e16faa458913ef56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547b3adfe4afb7cfe3d3603e16faa458913ef56f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d12844330df90ac4d309dc545902551634a251", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d12844330df90ac4d309dc545902551634a251", "html_url": "https://github.com/rust-lang/rust/commit/18d12844330df90ac4d309dc545902551634a251"}, {"sha": "ad93f48d770cc8cfe473e809700201c31550bc68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad93f48d770cc8cfe473e809700201c31550bc68", "html_url": "https://github.com/rust-lang/rust/commit/ad93f48d770cc8cfe473e809700201c31550bc68"}], "stats": {"total": 155, "additions": 142, "deletions": 13}, "files": [{"sha": "bfe37ce6959e7d59f56e8f6e520c48f473f05815", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/547b3adfe4afb7cfe3d3603e16faa458913ef56f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547b3adfe4afb7cfe3d3603e16faa458913ef56f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=547b3adfe4afb7cfe3d3603e16faa458913ef56f", "patch": "@@ -69,23 +69,65 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     let (span, panic) = panic_call(cx, f);\n \n-    cx.struct_span_lint(NON_FMT_PANIC, arg.span, |lint| {\n+    // Find the span of the argument to `panic!()`, before expansion in the\n+    // case of `panic!(some_macro!())`.\n+    // We don't use source_callsite(), because this `panic!(..)` might itself\n+    // be expanded from another macro, in which case we want to stop at that\n+    // expansion.\n+    let mut arg_span = arg.span;\n+    let mut arg_macro = None;\n+    while !span.contains(arg_span) {\n+        let expn = arg_span.ctxt().outer_expn_data();\n+        if expn.is_root() {\n+            break;\n+        }\n+        arg_macro = expn.macro_def_id;\n+        arg_span = expn.call_site;\n+    }\n+\n+    cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this is no longer accepted in Rust 2021\");\n-        if span.contains(arg.span) {\n+        if !span.contains(arg_span) {\n+            // No clue where this argument is coming from.\n+            l.emit();\n+            return;\n+        }\n+        if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n+            // A case of `panic!(format!(..))`.\n+            l.note(\"the panic!() macro supports formatting, so there's no need for the format!() macro here\");\n+            if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n+                l.multipart_suggestion(\n+                    \"remove the `format!(..)` macro call\",\n+                    vec![\n+                        (arg_span.until(open.shrink_to_hi()), \"\".into()),\n+                        (close.until(arg_span.shrink_to_hi()), \"\".into()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        } else {\n             l.span_suggestion_verbose(\n-                arg.span.shrink_to_lo(),\n+                arg_span.shrink_to_lo(),\n                 \"add a \\\"{}\\\" format string to Display the message\",\n                 \"\\\"{}\\\", \".into(),\n                 Applicability::MaybeIncorrect,\n             );\n             if panic == sym::std_panic_macro {\n-                l.span_suggestion_verbose(\n-                    span.until(arg.span),\n-                    \"or use std::panic::panic_any instead\",\n-                    \"std::panic::panic_any(\".into(),\n-                    Applicability::MachineApplicable,\n-                );\n+                if let Some((open, close, del)) = find_delimiters(cx, span) {\n+                    l.multipart_suggestion(\n+                        \"or use std::panic::panic_any instead\",\n+                        if del == '(' {\n+                            vec![(span.until(open), \"std::panic::panic_any\".into())]\n+                        } else {\n+                            vec![\n+                                (span.until(open.shrink_to_hi()), \"std::panic::panic_any(\".into()),\n+                                (close, \")\".into()),\n+                            ]\n+                        },\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n         }\n         l.emit();\n@@ -175,6 +217,19 @@ fn check_panic_str<'tcx>(\n     }\n }\n \n+/// Given the span of `some_macro!(args);`, gives the span of `(` and `)`,\n+/// and the type of (opening) delimiter used.\n+fn find_delimiters<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<(Span, Span, char)> {\n+    let snippet = cx.sess().parse_sess.source_map().span_to_snippet(span).ok()?;\n+    let (open, open_ch) = snippet.char_indices().find(|&(_, c)| \"([{\".contains(c))?;\n+    let close = snippet.rfind(|c| \")]}\".contains(c))?;\n+    Some((\n+        span.from_inner(InnerSpan { start: open, end: open + 1 }),\n+        span.from_inner(InnerSpan { start: close, end: close + 1 }),\n+        open_ch,\n+    ))\n+}\n+\n fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {\n     let mut expn = f.span.ctxt().outer_expn_data();\n "}, {"sha": "01820656c370d8e4e72a705e66404acb8d00744d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547b3adfe4afb7cfe3d3603e16faa458913ef56f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547b3adfe4afb7cfe3d3603e16faa458913ef56f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=547b3adfe4afb7cfe3d3603e16faa458913ef56f", "patch": "@@ -560,6 +560,7 @@ symbols! {\n         format_args,\n         format_args_capture,\n         format_args_nl,\n+        format_macro,\n         freeze,\n         freg,\n         frem_fast,"}, {"sha": "6a64587a2237fb7059ef3af6a5770b04c481ee6a", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547b3adfe4afb7cfe3d3603e16faa458913ef56f/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547b3adfe4afb7cfe3d3603e16faa458913ef56f/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=547b3adfe4afb7cfe3d3603e16faa458913ef56f", "patch": "@@ -107,6 +107,7 @@ macro_rules! vec {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"format_macro\")]\n macro_rules! format {\n     ($($arg:tt)*) => {{\n         let res = $crate::fmt::format($crate::__export::format_args!($($arg)*));"}, {"sha": "c80a90b3eaaac5d44cae0b509048f6bd6b56d12f", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/547b3adfe4afb7cfe3d3603e16faa458913ef56f/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547b3adfe4afb7cfe3d3603e16faa458913ef56f/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=547b3adfe4afb7cfe3d3603e16faa458913ef56f", "patch": "@@ -29,6 +29,17 @@ fn main() {\n     fancy_panic::fancy_panic!(S);\n     //~^ WARN panic message is not a string literal\n \n+    macro_rules! a {\n+        () => { 123 };\n+    }\n+\n+    panic!(a!()); //~ WARN panic message is not a string literal\n+\n+    panic!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n+\n+    panic![123]; //~ WARN panic message is not a string literal\n+    panic!{123}; //~ WARN panic message is not a string literal\n+\n     // Check that the lint only triggers for std::panic and core::panic,\n     // not any panic macro:\n     macro_rules! panic {"}, {"sha": "7a333b3e76abe8d7d2c6ed27354117729c665a5b", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/547b3adfe4afb7cfe3d3603e16faa458913ef56f/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547b3adfe4afb7cfe3d3603e16faa458913ef56f/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=547b3adfe4afb7cfe3d3603e16faa458913ef56f", "patch": "@@ -93,7 +93,7 @@ LL |     panic!(\"{}\", C);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(C);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:20:12\n@@ -109,7 +109,7 @@ LL |     panic!(\"{}\", S);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(S);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:21:17\n@@ -125,7 +125,7 @@ LL |     std::panic!(\"{}\", 123);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(123);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:22:18\n@@ -183,5 +183,66 @@ LL |     fancy_panic::fancy_panic!(S);\n    |\n    = note: this is no longer accepted in Rust 2021\n \n-warning: 14 warnings emitted\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:36:12\n+   |\n+LL |     panic!(a!());\n+   |            ^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", a!());\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(a!());\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:38:12\n+   |\n+LL |     panic!(format!(\"{}\", 1));\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+   = note: the panic!() macro supports formatting, so there's no need for the format!() macro here\n+help: remove the `format!(..)` macro call\n+   |\n+LL |     panic!(\"{}\", 1);\n+   |           --     --\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:40:12\n+   |\n+LL |     panic![123];\n+   |            ^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic![\"{}\", 123];\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(123);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^   ^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:41:12\n+   |\n+LL |     panic!{123};\n+   |            ^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!{\"{}\", 123};\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(123);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^   ^\n+\n+warning: 18 warnings emitted\n "}]}