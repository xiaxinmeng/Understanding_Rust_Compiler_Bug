{"sha": "3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzBkZmQ2NTU0MmEwOWRiM2E1YWUzMWU2MzM0YTBmN2NjMjAwMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T05:00:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T05:00:14Z"}, "message": "Auto merge of #49956 - QuietMisdreavus:rustdoc-codegen, r=GuillaumeGomez\n\nrustdoc: port the -C option from rustc\n\nBlocked on https://github.com/rust-lang/rust/pull/49864. The included test won't work without those changes, so this PR includes those commits as well.\n\nWhen documenting items that require certain target features, it helps to be able to force those target features into existence. Rather than include a flag just to parse those features, i instead decided to port the `-C` flag from rustc in its entirety. It takes the same parameters, because it runs through the same parsing function. This has the added benefit of being able to control the codegen of doctests as well.\n\nOne concern i have with the flag is that i set it to stable here. My rationale is that it is a direct port of functionality on rustc that is currently stable, used only in mechanisms that it is originally used for. If needed, i can set it back to be unstable.", "tree": {"sha": "e60d0c86ffa04becf1b98c0abc4973ce1af2231c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60d0c86ffa04becf1b98c0abc4973ce1af2231c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "html_url": "https://github.com/rust-lang/rust/commit/3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748c549185651a886de46110d6d9b616f3c09fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/748c549185651a886de46110d6d9b616f3c09fef", "html_url": "https://github.com/rust-lang/rust/commit/748c549185651a886de46110d6d9b616f3c09fef"}, {"sha": "a5456bdd87d77deff6002be7632e6e2f307b4cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5456bdd87d77deff6002be7632e6e2f307b4cfa", "html_url": "https://github.com/rust-lang/rust/commit/a5456bdd87d77deff6002be7632e6e2f307b4cfa"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "417608cc5ca0a3e57f76c4cde1c28bc0addfabc3", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -141,6 +141,31 @@ Similar to `--library-path`, `--extern` is about specifying the location\n of a dependency. `--library-path` provides directories to search in, `--extern`\n instead lets you specify exactly which dependency is located where.\n \n+## `-C`/`--codegen`: pass codegen options to rustc\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -C target_feature=+avx\n+$ rustdoc src/lib.rs --codegen target_feature=+avx\n+\n+$ rustdoc --test src/lib.rs -C target_feature=+avx\n+$ rustdoc --test src/lib.rs --codegen target_feature=+avx\n+\n+$ rustdoc --test README.md -C target_feature=+avx\n+$ rustdoc --test README.md --codegen target_feature=+avx\n+```\n+\n+When rustdoc generates documentation, looks for documentation tests, or executes documentation\n+tests, it needs to compile some rust code, at least part-way. This flag allows you to tell rustdoc\n+to provide some extra codegen options to rustc when it runs these compilations. Most of the time,\n+these options won't affect a regular documentation run, but if something depends on target features\n+to be enabled, or documentation tests need to use some additional options, this flag allows you to\n+affect that.\n+\n+The arguments to this flag are the same as those for the `-C` flag on rustc. Run `rustc -C help` to\n+get the full list.\n+\n ## `--passes`: add more rustdoc passes\n \n Using this flag looks like this:"}, {"sha": "781379d2d8c3e161fee2ad0c0581fed0b27b1c65", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -42,7 +42,7 @@ use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n \n-pub use rustc::session::config::Input;\n+pub use rustc::session::config::{Input, CodegenOptions};\n pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -125,7 +125,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n                 force_unstable_if_unmarked: bool,\n-                edition: Edition) -> (clean::Crate, RenderInfo)\n+                edition: Edition,\n+                cg: CodegenOptions) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -143,6 +144,7 @@ pub fn run_core(search_paths: SearchPaths,\n         crate_types: vec![config::CrateTypeRlib],\n         lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n+        cg,\n         externs,\n         target_triple: triple.unwrap_or(host_triple),\n         // Ensure that rustdoc works even if rustc is feature-staged"}, {"sha": "1339a66f8b2e92baf7c6d6ea254f0db29865b4aa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -61,7 +61,8 @@ use std::sync::mpsc::channel;\n use syntax::edition::Edition;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup, Externs, CodegenOptions};\n+use rustc::session::config::{nightly_options, build_codegen_options};\n use rustc_back::target::TargetTriple;\n \n #[macro_use]\n@@ -155,6 +156,9 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         stable(\"plugin-path\", |o| {\n             o.optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")\n         }),\n+        stable(\"C\", |o| {\n+            o.optmulti(\"C\", \"codegen\", \"pass a codegen option to rustc\", \"OPT[=VALUE]\")\n+        }),\n         stable(\"passes\", |o| {\n             o.optmulti(\"\", \"passes\",\n                        \"list of passes to also run, you might want \\\n@@ -441,14 +445,16 @@ pub fn main_args(args: &[String]) -> isize {\n         }\n     };\n \n+    let cg = build_codegen_options(&matches, ErrorOutputType::default());\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  display_warnings, linker, edition)\n+                                  display_warnings, linker, edition, cg)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, display_warnings, linker, edition)\n+                             maybe_sysroot, display_warnings, linker, edition, cg)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -458,7 +464,7 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, edition, &matches, move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -500,14 +506,15 @@ fn print_error<T>(error_message: T) where T: Display {\n fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n                        edition: Edition,\n+                       cg: CodegenOptions,\n                        matches: &getopts::Matches,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, edition, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, edition, matches, f))\n+        None => Ok(rust_input(input, externs, edition, cg, matches, f))\n     }\n }\n \n@@ -536,6 +543,7 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n fn rust_input<R, F>(cratefile: PathBuf,\n                     externs: Externs,\n                     edition: Edition,\n+                    cg: CodegenOptions,\n                     matches: &getopts::Matches,\n                     f: F) -> R\n where R: 'static + Send,\n@@ -589,7 +597,7 @@ where R: 'static + Send,\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, edition);\n+                           force_unstable_if_unmarked, edition, cg);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "8ada5ce1a4df9e83f74b068c903f2287038c083b", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -16,7 +16,7 @@ use std::path::{PathBuf, Path};\n use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::Externs;\n+use rustc::session::config::{Externs, CodegenOptions};\n use syntax::codemap::DUMMY_SP;\n use syntax::edition::Edition;\n \n@@ -140,7 +140,8 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>, edition: Edition) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>, edition: Edition,\n+            cg: CodegenOptions) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -150,7 +151,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     opts.display_warnings = display_warnings;\n-    let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n+    let mut collector = Collector::new(input.to_owned(), cfgs, libs, cg, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n                                        linker, edition);"}, {"sha": "600e9eaa05f1450acbd3f5604241450fce828f0a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -24,7 +24,7 @@ use rustc_lint;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n-use rustc::session::config::{OutputType, OutputTypes, Externs};\n+use rustc::session::config::{OutputType, OutputTypes, Externs, CodegenOptions};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use tempdir::TempDir;\n@@ -64,7 +64,8 @@ pub fn run(input_path: &Path,\n            maybe_sysroot: Option<PathBuf>,\n            display_warnings: bool,\n            linker: Option<PathBuf>,\n-           edition: Edition)\n+           edition: Edition,\n+           cg: CodegenOptions)\n            -> isize {\n     let input = config::Input::File(input_path.to_owned());\n \n@@ -73,6 +74,7 @@ pub fn run(input_path: &Path,\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs.clone(),\n         crate_types: vec![config::CrateTypeDylib],\n+        cg: cg.clone(),\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n@@ -125,6 +127,7 @@ pub fn run(input_path: &Path,\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n+                                       cg,\n                                        externs,\n                                        false,\n                                        opts,\n@@ -190,7 +193,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n \n fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             cfgs: Vec<String>, libs: SearchPaths,\n-            externs: Externs,\n+            cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n             maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n@@ -215,7 +218,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         cg: config::CodegenOptions {\n             prefer_dynamic: true,\n             linker,\n-            .. config::basic_codegen_options()\n+            ..cg\n         },\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n@@ -478,6 +481,7 @@ pub struct Collector {\n \n     cfgs: Vec<String>,\n     libs: SearchPaths,\n+    cg: CodegenOptions,\n     externs: Externs,\n     use_headers: bool,\n     cratename: String,\n@@ -491,15 +495,16 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-               use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               codemap: Option<Lrc<CodeMap>>, filename: Option<PathBuf>,\n-               linker: Option<PathBuf>, edition: Edition) -> Collector {\n+    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, cg: CodegenOptions,\n+               externs: Externs, use_headers: bool, opts: TestOptions,\n+               maybe_sysroot: Option<PathBuf>, codemap: Option<Lrc<CodeMap>>,\n+               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n             cfgs,\n             libs,\n+            cg,\n             externs,\n             use_headers,\n             cratename,\n@@ -524,6 +529,7 @@ impl Collector {\n         let name = self.generate_name(line, &filename);\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n+        let cg = self.cg.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n         let opts = self.opts.clone();\n@@ -552,6 +558,7 @@ impl Collector {\n                                  line,\n                                  cfgs,\n                                  libs,\n+                                 cg,\n                                  externs,\n                                  should_panic,\n                                  no_run,"}, {"sha": "08f1f06baa31991eca378dddfca10c0426a0180a", "filename": "src/test/rustdoc/force-target-feature.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e70dfd65542a09db3a5ae31e6334a0f7cc20035/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs?ref=3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// compile-flags:--test -C target-feature=+avx\n+// should-fail\n+\n+/// (written on a spider's web) Some Struct\n+///\n+/// ```\n+/// panic!(\"oh no\");\n+/// ```\n+#[doc(cfg(target_feature = \"avx\"))]\n+pub struct SomeStruct;"}]}