{"sha": "95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTMzMGJkMDE5N2E2NTgwOTZkZmExOTIyZWMzYjNlNmE0ZTZiNzg=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-11T10:47:16Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:22:54Z"}, "message": "Update error message", "tree": {"sha": "0372eec123609c379d87f8c3cda84aa7d54e0533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0372eec123609c379d87f8c3cda84aa7d54e0533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "html_url": "https://github.com/rust-lang/rust/commit/95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c4afbde4bcc0b2471cd48cf29378d557a8f4ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c4afbde4bcc0b2471cd48cf29378d557a8f4ab", "html_url": "https://github.com/rust-lang/rust/commit/16c4afbde4bcc0b2471cd48cf29378d557a8f4ab"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "e91dd37d8aaae344b093e1b43ddb468cbeb1e05c", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls\n-        if let ExprKind::MethodCall(..) = expr.kind {\n+        if let ExprKind::MethodCall(call, ..) = expr.kind {\n             // Get the `DefId` only when dealing with an `AssocFn`\n             if let Some((DefKind::AssocFn, did)) =\n                 cx.typeck_results().type_dependent_def(expr.hir_id)\n@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                     }\n \n                     let substs = cx.typeck_results().node_substs(expr.hir_id);\n-                    // We can't resolve on types that recursively require monomorphization,\n+                    // We can't resolve on types that require monomorphization,\n                     // so check that we don't need to perfom substitution\n                     if !substs.needs_subst() {\n                         let param_env = cx.tcx.param_env(trait_id);\n@@ -73,9 +73,12 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                                 let expr_span = expr.span;\n \n                                 cx.struct_span_lint(NOOP_METHOD_CALL, expr_span, |lint| {\n-                                    let message = \"call to method that does nothing\";\n+                                    let method = &call.ident.name;\n+                                    let message = format!(\"call to `.{}()` on a reference in this situation does nothing\", &method);\n                                     lint.build(&message)\n                                         .span_label(expr_span, \"unnecessary method call\")\n+                                        .note(\"the type the method is being called on and the return type are functionally equivalent.\")\n+                                        .note(\"therefore, the method call doesn't actually do anything and can be removed.\")\n                                         .emit()\n                                 });\n                             }"}, {"sha": "dc6349b10ee584bb081c5673328819f403d535dc", "filename": "src/test/ui/issues/issue-11820.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs?ref=95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "patch": "@@ -6,9 +6,9 @@\n struct NoClone;\n \n fn main() {\n-    let rnc = &NoClone;\n-    let rsnc = &Some(NoClone);\n+  let rnc = &NoClone;\n+  let rsnc = &Some(NoClone);\n \n-    let _: &NoClone = rnc.clone();\n-    let _: &Option<NoClone> = rsnc.clone();\n+  let _: &NoClone = rnc.clone();\n+  let _: &Option<NoClone> = rsnc.clone();\n }"}, {"sha": "b8aa55e1e1da63d6f6d1b5c760550f924655ce60", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "patch": "@@ -22,27 +22,28 @@ impl<T> Deref for DerefExample<T> {\n fn main() {\n     let foo = &Foo(1u32);\n     let foo_clone: &Foo<u32> = foo.clone();\n-    //~^ WARNING call to method that does nothing [noop_method_call]\n+    //~^ WARNING call to `.clone()` on a reference in this situation does nothing [noop_method_call]\n \n     let bar = &Bar(1u32);\n     let bar_clone: Bar<u32> = bar.clone();\n \n     let deref = &&DerefExample(12u32);\n     let derefed: &DerefExample<u32> = deref.deref();\n-    //~^ WARNING call to method that does nothing [noop_method_call]\n+    //~^ WARNING call to `.deref()` on a reference in this situation does nothing [noop_method_call]\n \n     let deref = &DerefExample(12u32);\n     let derefed: &u32 = deref.deref();\n \n     let a = &&Foo(1u32);\n     let borrowed: &Foo<u32> = a.borrow();\n-    //~^ WARNING call to method that does nothing [noop_method_call]\n+    //~^ WARNING call to `.borrow()` on a reference in this situation does nothing [noop_method_call]\n }\n \n fn generic<T>(foo: &Foo<T>) {\n     foo.clone();\n }\n \n fn non_generic(foo: &Foo<u32>) {\n-    foo.clone(); //~ WARNING call to method that does nothing [noop_method_call]\n+    foo.clone();\n+    //~^ WARNING call to `.clone()` on a reference in this situation does nothing [noop_method_call]\n }"}, {"sha": "f9cc9735d54f616f42c3bcbd18dbc59d13aaf562", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95e330bd0197a658096dfa1922ec3b3e6a4e6b78/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=95e330bd0197a658096dfa1922ec3b3e6a4e6b78", "patch": "@@ -1,28 +1,39 @@\n-warning: call to method that does nothing\n+warning: call to `.clone()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:24:32\n    |\n LL |     let foo_clone: &Foo<u32> = foo.clone();\n    |                                ^^^^^^^^^^^ unnecessary method call\n    |\n    = note: `#[warn(noop_method_call)]` on by default\n+   = note: the type the method is being called on and the return type are functionally equivalent.\n+   = note: therefore, the method call doesn't actually do anything and can be removed.\n \n-warning: call to method that does nothing\n+warning: call to `.deref()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:31:39\n    |\n LL |     let derefed: &DerefExample<u32> = deref.deref();\n    |                                       ^^^^^^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type the method is being called on and the return type are functionally equivalent.\n+   = note: therefore, the method call doesn't actually do anything and can be removed.\n \n-warning: call to method that does nothing\n+warning: call to `.borrow()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:38:31\n    |\n LL |     let borrowed: &Foo<u32> = a.borrow();\n    |                               ^^^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type the method is being called on and the return type are functionally equivalent.\n+   = note: therefore, the method call doesn't actually do anything and can be removed.\n \n-warning: call to method that does nothing\n+warning: call to `.clone()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:47:5\n    |\n LL |     foo.clone();\n    |     ^^^^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type the method is being called on and the return type are functionally equivalent.\n+   = note: therefore, the method call doesn't actually do anything and can be removed.\n \n warning: 4 warnings emitted\n "}]}