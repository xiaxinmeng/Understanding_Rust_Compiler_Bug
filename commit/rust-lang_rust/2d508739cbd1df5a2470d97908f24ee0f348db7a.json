{"sha": "2d508739cbd1df5a2470d97908f24ee0f348db7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTA4NzM5Y2JkMWRmNWEyNDcwZDk3OTA4ZjI0ZWUwZjM0OGRiN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-29T22:43:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-29T22:43:36Z"}, "message": "Auto merge of #1278 - JOE1994:cow, r=RalfJung\n\nmake 'fn convert_path_separator' to take 'Cow<>' as argument\n\nFixed `fn convert_path_separator()` to take `Cow<>` as argument,\nin order to prevent unnecessary allocation when target & host path separators are equal.", "tree": {"sha": "b59ef190cd2921b2e5849f7e4bb3ea50fd0fe71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59ef190cd2921b2e5849f7e4bb3ea50fd0fe71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d508739cbd1df5a2470d97908f24ee0f348db7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d508739cbd1df5a2470d97908f24ee0f348db7a", "html_url": "https://github.com/rust-lang/rust/commit/2d508739cbd1df5a2470d97908f24ee0f348db7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d508739cbd1df5a2470d97908f24ee0f348db7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3504d5266830e99f7cd2b978e91250bf1c35ee45", "url": "https://api.github.com/repos/rust-lang/rust/commits/3504d5266830e99f7cd2b978e91250bf1c35ee45", "html_url": "https://github.com/rust-lang/rust/commit/3504d5266830e99f7cd2b978e91250bf1c35ee45"}, {"sha": "ed1305d986a3fff39da36de2c7ed6a3179d33c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1305d986a3fff39da36de2c7ed6a3179d33c9a", "html_url": "https://github.com/rust-lang/rust/commit/ed1305d986a3fff39da36de2c7ed6a3179d33c9a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "49afa3bdc362f9820e61d95ab7c5fc1cea09de71", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d508739cbd1df5a2470d97908f24ee0f348db7a/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d508739cbd1df5a2470d97908f24ee0f348db7a/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=2d508739cbd1df5a2470d97908f24ee0f348db7a", "patch": "@@ -21,14 +21,14 @@ enum Pathconversion {\n \n /// Perform path separator conversion if needed.\n fn convert_path_separator<'a>(\n-    os_str: &'a OsStr,\n+    os_str: Cow<'a, OsStr>,\n     target_os: &str,\n     direction: Pathconversion,\n ) -> Cow<'a, OsStr> {\n     #[cfg(windows)]\n     return if target_os == \"windows\" {\n         // Windows-on-Windows, all fine.\n-        Cow::Borrowed(os_str)\n+        os_str\n     } else {\n         // Unix target, Windows host.\n         let (from, to) = match direction {\n@@ -56,7 +56,7 @@ fn convert_path_separator<'a>(\n         Cow::Owned(OsString::from_vec(converted))\n     } else {\n         // Unix-on-Unix, all is fine.\n-        Cow::Borrowed(os_str)\n+        os_str\n     };\n }\n \n@@ -226,7 +226,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n+        Ok(match convert_path_separator(Cow::Borrowed(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -237,7 +237,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost)))\n+        Ok(convert_path_separator(Cow::Owned(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost).into_owned().into())\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -249,7 +249,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -262,7 +262,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }"}]}