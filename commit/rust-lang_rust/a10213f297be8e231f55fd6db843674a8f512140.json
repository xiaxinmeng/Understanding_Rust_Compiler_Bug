{"sha": "a10213f297be8e231f55fd6db843674a8f512140", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMDIxM2YyOTdiZThlMjMxZjU1ZmQ2ZGI4NDM2NzRhOGY1MTIxNDA=", "commit": {"author": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-06T22:00:46Z"}, "committer": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-08T14:28:56Z"}, "message": "Raised alignment limit from 2^15 to 2^31", "tree": {"sha": "33434ed9abf23e37de4e27407ab5121893cb923f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33434ed9abf23e37de4e27407ab5121893cb923f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a10213f297be8e231f55fd6db843674a8f512140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a10213f297be8e231f55fd6db843674a8f512140", "html_url": "https://github.com/rust-lang/rust/commit/a10213f297be8e231f55fd6db843674a8f512140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a10213f297be8e231f55fd6db843674a8f512140/comments", "author": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4d76cf42feceb4cdba5f219c15b8855ea37957", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4d76cf42feceb4cdba5f219c15b8855ea37957", "html_url": "https://github.com/rust-lang/rust/commit/4d4d76cf42feceb4cdba5f219c15b8855ea37957"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "90468d92a50add06bb485342cdeefe7c8497c26a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a10213f297be8e231f55fd6db843674a8f512140", "patch": "@@ -285,11 +285,11 @@ impl Size {\n }\n \n /// Alignment of a type in bytes, both ABI-mandated and preferred.\n-/// Since alignments are always powers of 2, we can pack both in one byte,\n-/// giving each a nibble (4 bits) for a maximum alignment of 2<sup>15</sup> = 32768.\n+/// Each field is a power of two.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Align {\n-    raw: u8\n+    abi: u8,\n+    pref: u8,\n }\n \n impl Align {\n@@ -312,39 +312,36 @@ impl Align {\n             }\n             if bytes != 1 {\n                 Err(format!(\"`{}` is not a power of 2\", align))\n-            } else if pow > 0x0f {\n-                Err(format!(\"`{}` is too large\", align))\n             } else {\n                 Ok(pow)\n             }\n         };\n \n         Ok(Align {\n-            raw: pack(abi)? | (pack(pref)? << 4)\n+            abi: pack(abi)?,\n+            pref: pack(pref)?,\n         })\n     }\n \n     pub fn abi(self) -> u64 {\n-        1 << (self.raw & 0xf)\n+        1 << self.abi\n     }\n \n     pub fn pref(self) -> u64 {\n-        1 << (self.raw >> 4)\n+        1 << self.pref\n     }\n \n     pub fn min(self, other: Align) -> Align {\n-        let abi = cmp::min(self.raw & 0x0f, other.raw & 0x0f);\n-        let pref = cmp::min(self.raw & 0xf0, other.raw & 0xf0);\n         Align {\n-            raw: abi | pref\n+            abi: cmp::min(self.abi, other.abi),\n+            pref: cmp::min(self.pref, other.pref),\n         }\n     }\n \n     pub fn max(self, other: Align) -> Align {\n-        let abi = cmp::max(self.raw & 0x0f, other.raw & 0x0f);\n-        let pref = cmp::max(self.raw & 0xf0, other.raw & 0xf0);\n         Align {\n-            raw: abi | pref\n+            abi: cmp::max(self.abi, other.abi),\n+            pref: cmp::max(self.pref, other.pref),\n         }\n     }\n }"}, {"sha": "0ce91b33c510dd135ac798bf3a52a3ae1b8b1adb", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a10213f297be8e231f55fd6db843674a8f512140", "patch": "@@ -1398,7 +1398,7 @@ impl_stable_hash_for!(struct ReprFlags {\n #[derive(Copy, Clone, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n pub struct ReprOptions {\n     pub int: Option<attr::IntType>,\n-    pub align: u16,\n+    pub align: u32,\n     pub flags: ReprFlags,\n }\n "}, {"sha": "45c106f2a7f0509dd53ab478faab637522b7dde0", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10213f297be8e231f55fd6db843674a8f512140/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a10213f297be8e231f55fd6db843674a8f512140", "patch": "@@ -974,11 +974,11 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                         let mut align_error = None;\n                         if let ast::LitKind::Int(align, ast::LitIntType::Unsuffixed) = value.node {\n                             if align.is_power_of_two() {\n-                                // rustc::ty::layout::Align restricts align to <= 32768\n-                                if align <= 32768 {\n-                                    acc.push(ReprAlign(align as u16));\n+                                // rustc::ty::layout::Align restricts align to <= 2147483648\n+                                if align <= 2147483648 {\n+                                    acc.push(ReprAlign(align as u32));\n                                 } else {\n-                                    align_error = Some(\"larger than 32768\");\n+                                    align_error = Some(\"larger than 2147483648\");\n                                 }\n                             } else {\n                                 align_error = Some(\"not a power of two\");\n@@ -1027,7 +1027,7 @@ pub enum ReprAttr {\n     ReprExtern,\n     ReprPacked,\n     ReprSimd,\n-    ReprAlign(u16),\n+    ReprAlign(u32),\n }\n \n #[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]"}, {"sha": "433abe943f58a819923c221885b415b50ce53a10", "filename": "src/test/compile-fail/repr-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a10213f297be8e231f55fd6db843674a8f512140/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10213f297be8e231f55fd6db843674a8f512140/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-align.rs?ref=a10213f297be8e231f55fd6db843674a8f512140", "patch": "@@ -17,7 +17,7 @@ struct A(i32);\n #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n struct B(i32);\n \n-#[repr(align(65536))] //~ ERROR: invalid `repr(align)` attribute: larger than 32768\n+#[repr(align(4294967296))] //~ ERROR: invalid `repr(align)` attribute: larger than 2147483648\n struct C(i32);\n \n fn main() {}"}, {"sha": "19c4c643552e14a1b21c397681d8057ab3ea468f", "filename": "src/test/run-pass/align-struct.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a10213f297be8e231f55fd6db843674a8f512140/src%2Ftest%2Frun-pass%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10213f297be8e231f55fd6db843674a8f512140/src%2Ftest%2Frun-pass%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-struct.rs?ref=a10213f297be8e231f55fd6db843674a8f512140", "patch": "@@ -60,6 +60,13 @@ struct AlignContainsPacked {\n     b: Packed,\n }\n \n+// The align limit was originally smaller (2^15).\n+// Check that it works with big numbers.\n+#[repr(align(0x10000))]\n+struct AlignLarge {\n+    stuff: [u8; 0x10000],\n+}\n+\n impl Align16 {\n     // return aligned type\n     pub fn new(i: i32) -> Align16 {\n@@ -193,4 +200,14 @@ pub fn main() {\n     assert_eq!(mem::align_of_val(&a.b), 1);\n     assert_eq!(mem::size_of_val(&a), 16);\n     assert!(is_aligned_to(&a, 16));\n+\n+    let mut arr = [0; 0x10000];\n+    arr[0] = 132;\n+    let large = AlignLarge {\n+        stuff: arr,\n+    };\n+    assert_eq!(large.stuff[0], 132);\n+    assert_eq!(mem::align_of::<AlignLarge>(), 0x10000);\n+    assert_eq!(mem::align_of_val(&large), 0x10000);\n+    assert!(is_aligned_to(&large, 0x10000));\n }"}]}