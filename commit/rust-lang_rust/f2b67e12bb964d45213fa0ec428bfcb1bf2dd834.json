{"sha": "f2b67e12bb964d45213fa0ec428bfcb1bf2dd834", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjY3ZTEyYmI5NjRkNDUyMTNmYTBlYzQyOGJmY2IxYmYyZGQ4MzQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-06T18:22:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-06T18:22:01Z"}, "message": "Remove 0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "tree": {"sha": "9caa2de1a4aed9f28c2fa4f70c7cb9cee52c6a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9caa2de1a4aed9f28c2fa4f70c7cb9cee52c6a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b67e12bb964d45213fa0ec428bfcb1bf2dd834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b67e12bb964d45213fa0ec428bfcb1bf2dd834", "html_url": "https://github.com/rust-lang/rust/commit/f2b67e12bb964d45213fa0ec428bfcb1bf2dd834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b67e12bb964d45213fa0ec428bfcb1bf2dd834/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bf784d39bbc782137a6c79a672d18ea5235029", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bf784d39bbc782137a6c79a672d18ea5235029", "html_url": "https://github.com/rust-lang/rust/commit/c6bf784d39bbc782137a6c79a672d18ea5235029"}], "stats": {"total": 247, "additions": 0, "deletions": 247}, "files": [{"sha": "44edafcfcc3cb8a9cb4e32cbd4a17f407787e45d", "filename": "patches/0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "status": "removed", "additions": 0, "deletions": 247, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/c6bf784d39bbc782137a6c79a672d18ea5235029/patches%2F0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c6bf784d39bbc782137a6c79a672d18ea5235029/patches%2F0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0008-Replace-some-variadic-function-calls-with-unimplemen.patch?ref=c6bf784d39bbc782137a6c79a672d18ea5235029", "patch": "@@ -1,247 +0,0 @@\n-From d1d5c0e5272a8c3f78e9c4eb97c38d8f5d5a6d87 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 17 Nov 2018 11:13:19 +0100\n-Subject: [PATCH] Replace some variadic function calls with unimplemented!()\n-\n----\n- src/libstd/sys/unix/fd.rs     | 18 ++++++++++++++++++\n- src/libstd/sys/unix/fs.rs     | 17 ++++++++++++++++-\n- src/libstd/sys/unix/net.rs    |  3 +++\n- src/libstd/sys/unix/rand.rs   |  3 +++\n- src/libstd/sys/unix/thread.rs |  3 +++\n- 5 files changed, 43 insertions(+), 1 deletion(-)\n-\n-diff --git a/src/libstd/sys/unix/fd.rs b/src/libstd/sys/unix/fd.rs\n-index 5a81d6d..919f9d1 100644\n---- a/src/libstd/sys/unix/fd.rs\n-+++ b/src/libstd/sys/unix/fd.rs\n-@@ -156,9 +156,12 @@ impl FileDesc {\n- \n-     #[cfg(target_os = \"linux\")]\n-     pub fn get_cloexec(&self) -> io::Result<bool> {\n-+        /*\n-         unsafe {\n-             Ok((cvt(libc::fcntl(self.fd, libc::F_GETFD))? & libc::FD_CLOEXEC) != 0)\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     #[cfg(not(any(target_env = \"newlib\",\n-@@ -168,10 +171,13 @@ impl FileDesc {\n-                   target_os = \"l4re\",\n-                   target_os = \"haiku\")))]\n-     pub fn set_cloexec(&self) -> io::Result<()> {\n-+        /*\n-         unsafe {\n-             cvt(libc::ioctl(self.fd, libc::FIOCLEX))?;\n-             Ok(())\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n-     #[cfg(any(target_env = \"newlib\",\n-               target_os = \"solaris\",\n-@@ -180,6 +186,7 @@ impl FileDesc {\n-               target_os = \"l4re\",\n-               target_os = \"haiku\"))]\n-     pub fn set_cloexec(&self) -> io::Result<()> {\n-+        /*\n-         unsafe {\n-             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD))?;\n-             let new = previous | libc::FD_CLOEXEC;\n-@@ -188,19 +195,25 @@ impl FileDesc {\n-             }\n-             Ok(())\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     #[cfg(target_os = \"linux\")]\n-     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n-+        /*\n-         unsafe {\n-             let v = nonblocking as c_int;\n-             cvt(libc::ioctl(self.fd, libc::FIONBIO, &v))?;\n-             Ok(())\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     #[cfg(not(target_os = \"linux\"))]\n-     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n-+        /*\n-         unsafe {\n-             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFL))?;\n-             let new = if nonblocking {\n-@@ -213,9 +226,12 @@ impl FileDesc {\n-             }\n-             Ok(())\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     pub fn duplicate(&self) -> io::Result<FileDesc> {\n-+        /*\n-         // We want to atomically duplicate this file descriptor and set the\n-         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n-         // flag, however, isn't supported on older Linux kernels (earlier than\n-@@ -263,6 +279,8 @@ impl FileDesc {\n-             }\n-         }\n-         cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).and_then(make_filedesc)\n-+        */\n-+        unimplemented!();\n-     }\n- }\n- \n-diff --git a/src/libstd/sys/unix/fs.rs b/src/libstd/sys/unix/fs.rs\n-index add06ae..1a392fc 100644\n---- a/src/libstd/sys/unix/fs.rs\n-+++ b/src/libstd/sys/unix/fs.rs\n-@@ -465,6 +465,7 @@ impl File {\n-     }\n- \n-     pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {\n-+        /*\n-         let flags = libc::O_CLOEXEC |\n-                     opts.get_access_mode()? |\n-                     opts.get_creation_mode()? |\n-@@ -519,6 +520,8 @@ impl File {\n- \n-         ensure_cloexec(&fd)?;\n-         Ok(File(fd))\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-@@ -535,6 +538,7 @@ impl File {\n-     }\n- \n-     pub fn datasync(&self) -> io::Result<()> {\n-+        /*\n-         cvt_r(|| unsafe { os_datasync(self.0.raw()) })?;\n-         return Ok(());\n- \n-@@ -547,7 +551,9 @@ impl File {\n-         #[cfg(not(any(target_os = \"macos\",\n-                       target_os = \"ios\",\n-                       target_os = \"linux\")))]\n--        unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) }\n-+        unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) }]\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     pub fn truncate(&self, size: u64) -> io::Result<()> {\n-@@ -643,6 +649,7 @@ impl fmt::Debug for File {\n- \n-         #[cfg(target_os = \"macos\")]\n-         fn get_path(fd: c_int) -> Option<PathBuf> {\n-+            /*\n-             // FIXME: The use of PATH_MAX is generally not encouraged, but it\n-             // is inevitable in this case because macOS defines `fcntl` with\n-             // `F_GETPATH` in terms of `MAXPATHLEN`, and there are no\n-@@ -657,6 +664,8 @@ impl fmt::Debug for File {\n-             buf.truncate(l as usize);\n-             buf.shrink_to_fit();\n-             Some(PathBuf::from(OsString::from_vec(buf)))\n-+            */\n-+            unimplemented!();\n-         }\n- \n-         #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n-@@ -667,6 +676,7 @@ impl fmt::Debug for File {\n- \n-         #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n-         fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n-+            /*\n-             let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n-             if mode == -1 {\n-                 return None;\n-@@ -677,6 +687,8 @@ impl fmt::Debug for File {\n-                 libc::O_WRONLY => Some((false, true)),\n-                 _ => None\n-             }\n-+            */\n-+            unimplemented!();\n-         }\n- \n-         #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n-@@ -868,6 +880,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-         len: libc::size_t,\n-         flags: libc::c_uint,\n-     ) -> libc::c_long {\n-+        /*\n-         libc::syscall(\n-             libc::SYS_copy_file_range,\n-             fd_in,\n-@@ -877,6 +890,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-             len,\n-             flags,\n-         )\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     if !from.is_file() {\n-diff --git a/src/libstd/sys/unix/net.rs b/src/libstd/sys/unix/net.rs\n-index 2d10541..19e96c4 100644\n---- a/src/libstd/sys/unix/net.rs\n-+++ b/src/libstd/sys/unix/net.rs\n-@@ -339,8 +339,11 @@ impl Socket {\n-     }\n- \n-     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n-+        /*\n-         let mut nonblocking = nonblocking as libc::c_int;\n-         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-diff --git a/src/libstd/sys/unix/rand.rs b/src/libstd/sys/unix/rand.rs\n-index 371e58a..28d4c68 100644\n---- a/src/libstd/sys/unix/rand.rs\n-+++ b/src/libstd/sys/unix/rand.rs\n-@@ -34,9 +34,12 @@ mod imp {\n- \n-     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n-+        /*\n-         unsafe {\n-             libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr(), buf.len(), libc::GRND_NONBLOCK)\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n-diff --git a/src/libstd/sys/unix/thread.rs b/src/libstd/sys/unix/thread.rs\n-index f3a45d2..1c2f0ce 100644\n---- a/src/libstd/sys/unix/thread.rs\n-+++ b/src/libstd/sys/unix/thread.rs\n-@@ -100,12 +100,15 @@ impl Thread {\n-     #[cfg(any(target_os = \"linux\",\n-               target_os = \"android\"))]\n-     pub fn set_name(name: &CStr) {\n-+        /*\n-         const PR_SET_NAME: libc::c_int = 15;\n-         // pthread wrapper only appeared in glibc 2.12, so we use syscall\n-         // directly.\n-         unsafe {\n-             libc::prctl(PR_SET_NAME, name.as_ptr() as libc::c_ulong, 0, 0, 0);\n-         }\n-+        */\n-+        unimplemented!();\n-     }\n- \n-     #[cfg(any(target_os = \"freebsd\",\n--- \n-2.17.2 (Apple Git-113)\n-"}]}