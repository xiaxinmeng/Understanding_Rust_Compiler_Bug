{"sha": "be5f17ccff09569c2dd22df9330364a92fec2295", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNWYxN2NjZmYwOTU2OWMyZGQyMmRmOTMzMDM2NGE5MmZlYzIyOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T17:16:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T17:16:13Z"}, "message": "Auto merge of #50904 - collin5:b50509, r=Mark-Simulacrum\n\nClean up dependency tracking in Rustbuild [1/2]\n\nInitial refactor of the `Mode` enum. Still a WIP\nRef  #50509\n\nr? @Mark-Simulacrum", "tree": {"sha": "8f65123967dabfed5cf5f53b0b12c3a431cb9fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f65123967dabfed5cf5f53b0b12c3a431cb9fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5f17ccff09569c2dd22df9330364a92fec2295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5f17ccff09569c2dd22df9330364a92fec2295", "html_url": "https://github.com/rust-lang/rust/commit/be5f17ccff09569c2dd22df9330364a92fec2295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5f17ccff09569c2dd22df9330364a92fec2295/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d576f25fcb0b0ea1e4d442329a4949765fa02f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d576f25fcb0b0ea1e4d442329a4949765fa02f0", "html_url": "https://github.com/rust-lang/rust/commit/7d576f25fcb0b0ea1e4d442329a4949765fa02f0"}, {"sha": "36eafe5712b9e64498716caa02649972117ee86a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36eafe5712b9e64498716caa02649972117ee86a", "html_url": "https://github.com/rust-lang/rust/commit/36eafe5712b9e64498716caa02649972117ee86a"}], "stats": {"total": 259, "additions": 148, "deletions": 111}, "files": [{"sha": "9300b94156acbdd729483d275c8175a09b84da12", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -806,7 +806,7 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n-        if mode == Mode::Tool {\n+        if mode.is_tool() {\n             // Tools like cargo and rls don't get debuginfo by default right now, but this can be\n             // enabled in the config.  Adding debuginfo makes them several times larger.\n             if self.config.rust_debuginfo_tools {\n@@ -871,7 +871,7 @@ impl<'a> Builder<'a> {\n         //\n         // If LLVM support is disabled we need to use the snapshot compiler to compile\n         // build scripts, as the new compiler doesn't support executables.\n-        if mode == Mode::Libstd || !self.config.llvm_enabled {\n+        if mode == Mode::Std || !self.config.llvm_enabled {\n             cargo\n                 .env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n@@ -903,7 +903,7 @@ impl<'a> Builder<'a> {\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n         // in std, we want to avoid denying warnings for stage 0 as that makes cfg's painful.\n-        if self.config.deny_warnings && !(mode == Mode::Libstd && stage == 0) {\n+        if self.config.deny_warnings && !(mode == Mode::Std && stage == 0) {\n             cargo.env(\"RUSTC_DENY_WARNINGS\", \"1\");\n         }\n \n@@ -963,7 +963,7 @@ impl<'a> Builder<'a> {\n         }\n \n         if cmd == \"build\"\n-            && mode == Mode::Libstd\n+            && mode == Mode::Std\n             && self.config.extended\n             && compiler.is_final_stage(self)\n         {\n@@ -1012,7 +1012,7 @@ impl<'a> Builder<'a> {\n         // be resolved because MinGW has the import library. The downside is we\n         // don't get newer functions from Windows, but we don't use any of them\n         // anyway.\n-        if mode != Mode::Tool {\n+        if !mode.is_tool() {\n             cargo.env(\"WINAPI_NO_BUNDLED_LIBRARIES\", \"1\");\n         }\n \n@@ -1751,7 +1751,7 @@ mod __test {\n             &[test::Crate {\n                 compiler: Compiler { host, stage: 0 },\n                 target: host,\n-                mode: Mode::Libstd,\n+                mode: Mode::Std,\n                 test_kind: test::TestKind::Test,\n                 krate: INTERNER.intern_str(\"std\"),\n             },]"}, {"sha": "b3ccb3cc3c926ca29dc823aed9a212e32ac4aec7", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -40,10 +40,10 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let out_dir = builder.stage_out(compiler, Mode::Libstd);\n+        let out_dir = builder.stage_out(compiler, Mode::Std);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n@@ -87,11 +87,11 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let stage_out = builder.stage_out(compiler, Mode::Librustc);\n+        let stage_out = builder.stage_out(compiler, Mode::Rustc);\n         builder.clear_if_dirty(&stage_out, &libstd_stamp(builder, compiler, target));\n         builder.clear_if_dirty(&stage_out, &libtest_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"check\");\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n@@ -137,7 +137,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"check\");\n         let features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n@@ -175,10 +175,10 @@ impl Step for Test {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let out_dir = builder.stage_out(compiler, Mode::Libtest);\n+        let out_dir = builder.stage_out(compiler, Mode::Test);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n@@ -219,6 +219,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            compiler,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"check\",\n                                            \"src/tools/rustdoc\");\n@@ -236,27 +237,27 @@ impl Step for Rustdoc {\n         builder.ensure(tool::CleanTools {\n             compiler,\n             target,\n-            mode: Mode::Tool,\n+            cause: Mode::Rustc,\n         });\n     }\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libstd, target).join(\".libstd-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n /// Cargo's output path for libtest in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn libtest_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libtest, target).join(\".libtest-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest-check.stamp\")\n }\n \n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target).join(\".librustc-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc-check.stamp\")\n }\n \n /// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n@@ -265,12 +266,12 @@ fn codegen_backend_stamp(builder: &Builder,\n                          compiler: Compiler,\n                          target: Interned<String>,\n                          backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target)\n+    builder.cargo_out(compiler, Mode::Codegen, target)\n          .join(format!(\".librustc_codegen_llvm-{}-check.stamp\", backend))\n }\n \n /// Cargo's output path for rustdoc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn rustdoc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Tool, target).join(\".rustdoc-check.stamp\")\n+    builder.cargo_out(compiler, Mode::ToolRustc, target).join(\".rustdoc-check.stamp\")\n }"}, {"sha": "11d9154ba696c9db0965165ce2dfc4bec5d475c8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -98,9 +98,9 @@ impl Step for Std {\n             copy_musl_third_party_objects(builder, target, &libdir);\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Libstd, target);\n+        let out_dir = builder.cargo_out(compiler, Mode::Std, target);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n@@ -240,7 +240,7 @@ impl Step for StdLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Libstd,\n+            cause: Mode::Std,\n         });\n     }\n }\n@@ -368,9 +368,9 @@ impl Step for Test {\n             return;\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Libtest, target);\n+        let out_dir = builder.cargo_out(compiler, Mode::Test, target);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n@@ -431,7 +431,7 @@ impl Step for TestLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Libtest,\n+            cause: Mode::Test,\n         });\n     }\n }\n@@ -489,11 +489,11 @@ impl Step for Rustc {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n-        let cargo_out = builder.cargo_out(compiler, Mode::Librustc, target);\n+        let cargo_out = builder.cargo_out(compiler, Mode::Rustc, target);\n         builder.clear_if_dirty(&cargo_out, &libstd_stamp(builder, compiler, target));\n         builder.clear_if_dirty(&cargo_out, &libtest_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n@@ -585,7 +585,7 @@ impl Step for RustcLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Librustc,\n+            cause: Mode::Rustc,\n         });\n     }\n }\n@@ -634,15 +634,15 @@ impl Step for CodegenBackend {\n             return;\n         }\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n         let mut features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         features += &build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n-        let tmp_stamp = builder.cargo_out(compiler, Mode::Librustc, target)\n+        let tmp_stamp = builder.cargo_out(compiler, Mode::Codegen, target)\n             .join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n@@ -793,19 +793,19 @@ fn copy_lld_to_sysroot(builder: &Builder,\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libstd, target).join(\".libstd.stamp\")\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd.stamp\")\n }\n \n /// Cargo's output path for libtest in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn libtest_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libtest, target).join(\".libtest.stamp\")\n+    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest.stamp\")\n }\n \n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target).join(\".librustc.stamp\")\n+    builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc.stamp\")\n }\n \n /// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n@@ -814,7 +814,7 @@ fn codegen_backend_stamp(builder: &Builder,\n                          compiler: Compiler,\n                          target: Interned<String>,\n                          backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target)\n+    builder.cargo_out(compiler, Mode::Codegen, target)\n         .join(format!(\".librustc_codegen_llvm-{}.stamp\", backend))\n }\n \n@@ -971,7 +971,7 @@ impl Step for Assemble {\n         }\n \n         // Link the compiler binary itself into place\n-        let out_dir = builder.cargo_out(build_compiler, Mode::Librustc, host);\n+        let out_dir = builder.cargo_out(build_compiler, Mode::Rustc, host);\n         let rustc = out_dir.join(exe(\"rustc_binary\", &*host));\n         let bindir = sysroot.join(\"bin\");\n         t!(fs::create_dir_all(&bindir));"}, {"sha": "7341137e20d721101ac286ad00da1d844d51a607", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -722,7 +722,7 @@ impl Step for Analysis {\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n \n-        let src = builder.stage_out(compiler, Mode::Libstd)\n+        let src = builder.stage_out(compiler, Mode::Std)\n             .join(target).join(builder.cargo_dir()).join(\"deps\");\n \n         let image_src = src.join(\"save-analysis\");\n@@ -953,7 +953,7 @@ impl Step for PlainSourceTarball {\n             if !has_cargo_vendor {\n                 let mut cmd = builder.cargo(\n                     builder.compiler(0, builder.config.build),\n-                    Mode::Tool,\n+                    Mode::ToolRustc,\n                     builder.config.build,\n                     \"install\"\n                 );"}, {"sha": "19599b33ebe261d942156450ea2e4f2e2e1b3448", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -463,7 +463,7 @@ impl Step for Std {\n         };\n \n         builder.ensure(compile::Std { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Libstd)\n+        let out_dir = builder.stage_out(compiler, Mode::Std)\n                            .join(target).join(\"doc\");\n \n         // Here what we're doing is creating a *symlink* (directory junction on\n@@ -483,7 +483,7 @@ impl Step for Std {\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"doc\");\n         compile::std_cargo(builder, &compiler, target, &mut cargo);\n \n         // Keep a whitelist so we do not build internal stdlib crates, these will be\n@@ -546,15 +546,15 @@ impl Step for Test {\n         builder.ensure(Std { stage, target });\n \n         builder.ensure(compile::Test { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Libtest)\n+        let out_dir = builder.stage_out(compiler, Mode::Test)\n                            .join(target).join(\"doc\");\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"doc\");\n         compile::test_cargo(builder, &compiler, target, &mut cargo);\n \n         cargo.arg(\"--no-deps\").arg(\"-p\").arg(\"test\");\n@@ -614,15 +614,15 @@ impl Step for WhitelistedRustc {\n         builder.ensure(Std { stage, target });\n \n         builder.ensure(compile::Rustc { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Librustc)\n+        let out_dir = builder.stage_out(compiler, Mode::Rustc)\n                            .join(target).join(\"doc\");\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n         compile::rustc_cargo(builder, &mut cargo);\n \n         // We don't want to build docs for internal compiler dependencies in this\n@@ -698,12 +698,12 @@ impl Step for Rustc {\n \n         // We do not symlink to the same shared folder that already contains std library\n         // documentation from previous steps as we do not want to include that.\n-        let out_dir = builder.stage_out(compiler, Mode::Librustc).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         compile::rustc_cargo(builder, &mut cargo);\n \n@@ -799,13 +799,15 @@ impl Step for Rustdoc {\n         builder.ensure(tool::Rustdoc { host: compiler.host });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n-        let out_dir = builder.stage_out(compiler, Mode::Tool).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"doc\", \"src/tools/rustdoc\");\n+        let mut cargo = prepare_tool_cargo(\n+            builder, compiler, Mode::ToolRustc, target, \"doc\", \"src/tools/rustdoc\");\n+\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         builder.run(&mut cargo);\n     }"}, {"sha": "d16d7a520659b6313fd077dae3b80326a9c6c196", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -307,16 +307,30 @@ impl Crate {\n #[derive(Debug, Hash, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Mode {\n     /// Build the standard library, placing output in the \"stageN-std\" directory.\n-    Libstd,\n+    Std,\n \n     /// Build libtest, placing output in the \"stageN-test\" directory.\n-    Libtest,\n+    Test,\n \n-    /// Build librustc and compiler libraries, placing output in the \"stageN-rustc\" directory.\n-    Librustc,\n+    /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n+    Rustc,\n \n-    /// Build some tool, placing output in the \"stageN-tools\" directory.\n-    Tool,\n+    /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n+    Codegen,\n+\n+    /// Build some tools, placing output in the \"stageN-tools\" directory.\n+    ToolStd,\n+    ToolTest,\n+    ToolRustc,\n+}\n+\n+impl Mode {\n+    pub fn is_tool(&self) -> bool {\n+        match self {\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => true,\n+            _ => false\n+        }\n+    }\n }\n \n impl Build {\n@@ -517,10 +531,11 @@ impl Build {\n     /// The mode indicates what the root directory is for.\n     fn stage_out(&self, compiler: Compiler, mode: Mode) -> PathBuf {\n         let suffix = match mode {\n-            Mode::Libstd => \"-std\",\n-            Mode::Libtest => \"-test\",\n-            Mode::Tool => \"-tools\",\n-            Mode::Librustc => \"-rustc\",\n+            Mode::Std => \"-std\",\n+            Mode::Test => \"-test\",\n+            Mode::Codegen => \"-rustc\",\n+            Mode::Rustc => \"-rustc\",\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "a0b6222421d71a78b83cde71bec69deafc80257c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -222,7 +222,7 @@ impl Step for Cargo {\n             compiler,\n             target: self.host,\n         });\n-        let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n+        let mut cargo = builder.cargo(compiler, Mode::ToolRustc, self.host, \"test\");\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/tools/cargo/Cargo.toml\"));\n@@ -281,7 +281,12 @@ impl Step for Rls {\n             return;\n         }\n \n-        let mut cargo = tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rls\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rls\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -331,8 +336,12 @@ impl Step for Rustfmt {\n             return;\n         }\n \n-        let mut cargo =\n-            tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rustfmt\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rustfmt\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -383,7 +392,7 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n             cargo\n                 .arg(\"--manifest-path\")\n                 .arg(builder.src.join(\"src/tools/miri/Cargo.toml\"));\n@@ -441,7 +450,7 @@ impl Step for Clippy {\n             extra_features: Vec::new(),\n         });\n         if let Some(clippy) = clippy {\n-            let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n             cargo\n                 .arg(\"--manifest-path\")\n                 .arg(builder.src.join(\"src/tools/clippy/Cargo.toml\"));\n@@ -453,7 +462,7 @@ impl Step for Clippy {\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             let host_libs = builder\n-                .stage_out(compiler, Mode::Tool)\n+                .stage_out(compiler, Mode::ToolRustc)\n                 .join(builder.cargo_dir());\n             cargo.env(\"HOST_LIBS\", host_libs);\n             // clippy tests need to find the driver\n@@ -1434,7 +1443,7 @@ impl Step for CrateLibrustc {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n-            mode: Mode::Librustc,\n+            mode: Mode::Rustc,\n             test_kind: self.test_kind,\n             krate: self.krate,\n         });\n@@ -1485,7 +1494,7 @@ impl Step for CrateNotDefault {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n-            mode: Mode::Libstd,\n+            mode: Mode::Std,\n             test_kind: self.test_kind,\n             krate: INTERNER.intern_str(self.krate),\n         });\n@@ -1538,12 +1547,12 @@ impl Step for Crate {\n \n         for krate in builder.in_tree_crates(\"std\") {\n             if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Libstd, krate);\n+                make(Mode::Std, krate);\n             }\n         }\n         for krate in builder.in_tree_crates(\"test\") {\n             if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Libtest, krate);\n+                make(Mode::Test, krate);\n             }\n         }\n     }\n@@ -1578,13 +1587,13 @@ impl Step for Crate {\n \n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n-            Mode::Libstd => {\n+            Mode::Std => {\n                 compile::std_cargo(builder, &compiler, target, &mut cargo);\n             }\n-            Mode::Libtest => {\n+            Mode::Test => {\n                 compile::test_cargo(builder, &compiler, target, &mut cargo);\n             }\n-            Mode::Librustc => {\n+            Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n                 compile::rustc_cargo(builder, &mut cargo);\n             }\n@@ -1718,13 +1727,12 @@ impl Step for CrateRustdoc {\n         let compiler = builder.compiler(builder.top_stage, self.host);\n         let target = compiler.host;\n \n-        let mut cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            target,\n-            test_kind.subcommand(),\n-            \"src/tools/rustdoc\",\n-        );\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 target,\n+                                                 test_kind.subcommand(),\n+                                                 \"src/tools/rustdoc\");\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }"}, {"sha": "d4a2e96cc0d3f7c2bb28f8890d2e825cbc1e4270", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f17ccff09569c2dd22df9330364a92fec2295/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=be5f17ccff09569c2dd22df9330364a92fec2295", "patch": "@@ -28,7 +28,7 @@ use toolstate::ToolState;\n pub struct CleanTools {\n     pub compiler: Compiler,\n     pub target: Interned<String>,\n-    pub mode: Mode,\n+    pub cause: Mode,\n }\n \n impl Step for CleanTools {\n@@ -41,23 +41,23 @@ impl Step for CleanTools {\n     fn run(self, builder: &Builder) {\n         let compiler = self.compiler;\n         let target = self.target;\n-        let mode = self.mode;\n+        let cause = self.cause;\n \n         // This is for the original compiler, but if we're forced to use stage 1, then\n         // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n         // we copy the libs forward.\n-        let tools_dir = builder.stage_out(compiler, Mode::Tool);\n+        let tools_dir = builder.stage_out(compiler, Mode::ToolRustc);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n             compiler\n         };\n \n-        for &cur_mode in &[Mode::Libstd, Mode::Libtest, Mode::Librustc] {\n+        for &cur_mode in &[Mode::Std, Mode::Test, Mode::Rustc] {\n             let stamp = match cur_mode {\n-                Mode::Libstd => libstd_stamp(builder, compiler, target),\n-                Mode::Libtest => libtest_stamp(builder, compiler, target),\n-                Mode::Librustc => librustc_stamp(builder, compiler, target),\n+                Mode::Std => libstd_stamp(builder, compiler, target),\n+                Mode::Test => libtest_stamp(builder, compiler, target),\n+                Mode::Rustc => librustc_stamp(builder, compiler, target),\n                 _ => panic!(),\n             };\n \n@@ -67,7 +67,7 @@ impl Step for CleanTools {\n \n             // If we are a rustc tool, and std changed, we also need to clear ourselves out -- our\n             // dependencies depend on std. Therefore, we iterate up until our own mode.\n-            if mode == cur_mode {\n+            if cause == cur_mode {\n                 break;\n             }\n         }\n@@ -104,13 +104,13 @@ impl Step for ToolBuild {\n         let is_ext_tool = self.is_ext_tool;\n \n         match self.mode {\n-            Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n-            Mode::Libtest => builder.ensure(compile::Test { compiler, target }),\n-            Mode::Librustc => builder.ensure(compile::Rustc { compiler, target }),\n-            Mode::Tool => panic!(\"unexpected Mode::Tool for tool build\")\n+            Mode::ToolStd => builder.ensure(compile::Std { compiler, target }),\n+            Mode::ToolTest => builder.ensure(compile::Test { compiler, target }),\n+            Mode::ToolRustc => builder.ensure(compile::Rustc { compiler, target }),\n+            _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n+        let mut cargo = prepare_tool_cargo(builder, compiler, self.mode, target, \"build\", path);\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n@@ -202,7 +202,7 @@ impl Step for ToolBuild {\n                 return None;\n             }\n         } else {\n-            let cargo_out = builder.cargo_out(compiler, Mode::Tool, target)\n+            let cargo_out = builder.cargo_out(compiler, self.mode, target)\n                 .join(exe(tool, &compiler.host));\n             let bin = builder.tools_dir(compiler).join(exe(tool, &compiler.host));\n             builder.copy(&cargo_out, &bin);\n@@ -214,11 +214,12 @@ impl Step for ToolBuild {\n pub fn prepare_tool_cargo(\n     builder: &Builder,\n     compiler: Compiler,\n+    mode: Mode,\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n ) -> Command {\n-    let mut cargo = builder.cargo(compiler, Mode::Tool, target, command);\n+    let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n@@ -261,6 +262,15 @@ macro_rules! tool {\n             )+\n         }\n \n+        impl Tool {\n+            pub fn get_mode(&self) -> Mode {\n+                let mode = match self {\n+                    $(Tool::$name => $mode,)+\n+                };\n+                mode\n+            }\n+        }\n+\n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n                 let stage = self.tool_default_stage(tool);\n@@ -324,17 +334,17 @@ macro_rules! tool {\n }\n \n tool!(\n-    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::Librustc;\n-    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::Librustc;\n-    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::Libstd;\n-    Tidy, \"src/tools/tidy\", \"tidy\", Mode::Libstd;\n-    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::Libstd;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::Libstd;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::Libtest;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Libstd;\n-    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::Libstd;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::Libstd;\n-    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::Libstd;\n+    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolRustc;\n+    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n+    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolStd;\n+    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolStd;\n+    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolStd;\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolStd;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolTest;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolStd;\n+    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolStd;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolStd;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -362,7 +372,7 @@ impl Step for RemoteTestServer {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"remote-test-server\",\n-            mode: Mode::Libstd,\n+            mode: Mode::ToolStd,\n             path: \"src/tools/remote-test-server\",\n             is_ext_tool: false,\n             extra_features: Vec::new(),\n@@ -414,6 +424,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            build_compiler,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"build\",\n                                            \"src/tools/rustdoc\");\n@@ -430,7 +441,7 @@ impl Step for Rustdoc {\n         // Cargo adds a number of paths to the dylib search path on windows, which results in\n         // the wrong rustdoc being executed. To avoid the conflicting rustdocs, we name the \"tool\"\n         // rustdoc a different name.\n-        let tool_rustdoc = builder.cargo_out(build_compiler, Mode::Tool, target)\n+        let tool_rustdoc = builder.cargo_out(build_compiler, Mode::ToolRustc, target)\n             .join(exe(\"rustdoc_tool_binary\", &target_compiler.host));\n \n         // don't create a stage0-sysroot/bin directory.\n@@ -485,7 +496,7 @@ impl Step for Cargo {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"cargo\",\n-            mode: Mode::Librustc,\n+            mode: Mode::ToolRustc,\n             path: \"src/tools/cargo\",\n             is_ext_tool: false,\n             extra_features: Vec::new(),\n@@ -533,7 +544,7 @@ macro_rules! tool_extended {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n-                    mode: Mode::Librustc,\n+                    mode: Mode::ToolRustc,\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_ext_tool: true,\n@@ -575,19 +586,19 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n-        self.prepare_tool_cmd(compiler, &mut cmd);\n+        self.prepare_tool_cmd(compiler, tool.get_mode(), &mut cmd);\n         cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n     ///\n     /// Notably this munges the dynamic library lookup path to point to the\n     /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n+    fn prepare_tool_cmd(&self, compiler: Compiler, mode: Mode, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n-            self.cargo_out(compiler, Mode::Tool, *host).join(\"deps\"),\n+            self.cargo_out(compiler, mode, *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make"}]}