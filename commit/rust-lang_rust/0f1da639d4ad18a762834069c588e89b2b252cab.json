{"sha": "0f1da639d4ad18a762834069c588e89b2b252cab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMWRhNjM5ZDRhZDE4YTc2MjgzNDA2OWM1ODhlODliMmIyNTJjYWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T17:02:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T17:04:21Z"}, "message": "Rename overflowing_{add,sub,mul} intrinsics to wrapping_{add,sub,mul}.", "tree": {"sha": "7c185ef348245374fe57a769738c316f1cf4fb2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c185ef348245374fe57a769738c316f1cf4fb2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f1da639d4ad18a762834069c588e89b2b252cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1da639d4ad18a762834069c588e89b2b252cab", "html_url": "https://github.com/rust-lang/rust/commit/0f1da639d4ad18a762834069c588e89b2b252cab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f1da639d4ad18a762834069c588e89b2b252cab/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a", "html_url": "https://github.com/rust-lang/rust/commit/9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a"}], "stats": {"total": 106, "additions": 82, "deletions": 24}, "files": [{"sha": "995ee56440ea50d4b24831aa4d2d57456fd44f94", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -1293,18 +1293,40 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n+    #[cfg(bootstrap)]\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n+    #[cfg(bootstrap)]\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n+    #[cfg(bootstrap)]\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n+    /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_add` method. For example,\n+    /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n+    #[cfg(not(bootstrap))]\n+    pub fn wrapping_add<T>(a: T, b: T) -> T;\n+    /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_sub` method. For example,\n+    /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n+    #[cfg(not(bootstrap))]\n+    pub fn wrapping_sub<T>(a: T, b: T) -> T;\n+    /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_mul` method. For example,\n+    /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n+    #[cfg(not(bootstrap))]\n+    pub fn wrapping_mul<T>(a: T, b: T) -> T;\n+\n     /// Computes `a + b`, while saturating at numeric bounds.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,"}, {"sha": "f82d94153e846512c7d522e37dd8b0494352340d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -1112,7 +1112,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_add(self, rhs)\n+                #[cfg(bootstrap)] {\n+                    intrinsics::overflowing_add(self, rhs)\n+                }\n+\n+                #[cfg(not(bootstrap))] {\n+                    intrinsics::wrapping_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -1135,7 +1141,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_sub(self, rhs)\n+                #[cfg(bootstrap)] {\n+                    intrinsics::overflowing_sub(self, rhs)\n+                }\n+\n+                #[cfg(not(bootstrap))] {\n+                    intrinsics::wrapping_sub(self, rhs)\n+                }\n             }\n         }\n \n@@ -1157,7 +1169,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_mul(self, rhs)\n+                #[cfg(bootstrap)] {\n+                    intrinsics::overflowing_mul(self, rhs)\n+                }\n+\n+                #[cfg(not(bootstrap))] {\n+                    intrinsics::wrapping_mul(self, rhs)\n+                }\n             }\n         }\n \n@@ -3031,7 +3049,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_add(self, rhs)\n+                #[cfg(bootstrap)] {\n+                    intrinsics::overflowing_add(self, rhs)\n+                }\n+\n+                #[cfg(not(bootstrap))] {\n+                    intrinsics::wrapping_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -3053,7 +3077,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_sub(self, rhs)\n+                #[cfg(bootstrap)] {\n+                    intrinsics::overflowing_sub(self, rhs)\n+                }\n+\n+                #[cfg(not(bootstrap))] {\n+                    intrinsics::wrapping_sub(self, rhs)\n+                }\n             }\n         }\n \n@@ -3076,7 +3106,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            intrinsics::overflowing_mul(self, rhs)\n+            #[cfg(bootstrap)] {\n+                intrinsics::overflowing_mul(self, rhs)\n+            }\n+\n+            #[cfg(not(bootstrap))] {\n+                intrinsics::wrapping_mul(self, rhs)\n+            }\n         }\n \n         doc_comment! {"}, {"sha": "9483ffca448e3daec91450dee6055194490874a4", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -328,7 +328,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             },\n             \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n             \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n-            \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+            \"mul_with_overflow\" | \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n             \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" |\n             \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" | \"exact_div\" |\n             \"rotate_left\" | \"rotate_right\" | \"saturating_add\" | \"saturating_sub\" => {\n@@ -398,9 +398,9 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n                                 return;\n                             },\n-                            \"overflowing_add\" => self.add(args[0].immediate(), args[1].immediate()),\n-                            \"overflowing_sub\" => self.sub(args[0].immediate(), args[1].immediate()),\n-                            \"overflowing_mul\" => self.mul(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_add\" => self.add(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_sub\" => self.sub(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_mul\" => self.mul(args[0].immediate(), args[1].immediate()),\n                             \"exact_div\" =>\n                                 if signed {\n                                     self.exactsdiv(args[0].immediate(), args[1].immediate())"}, {"sha": "ee105fed1a324aadf7dd68ccbf33cc5f25623071", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -110,18 +110,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(out_val, dest)?;\n             }\n-            | \"overflowing_add\"\n-            | \"overflowing_sub\"\n-            | \"overflowing_mul\"\n+            | \"wrapping_add\"\n+            | \"wrapping_sub\"\n+            | \"wrapping_mul\"\n             | \"add_with_overflow\"\n             | \"sub_with_overflow\"\n             | \"mul_with_overflow\" => {\n                 let lhs = self.read_immediate(args[0])?;\n                 let rhs = self.read_immediate(args[1])?;\n                 let (bin_op, ignore_overflow) = match intrinsic_name {\n-                    \"overflowing_add\" => (BinOp::Add, true),\n-                    \"overflowing_sub\" => (BinOp::Sub, true),\n-                    \"overflowing_mul\" => (BinOp::Mul, true),\n+                    \"wrapping_add\" => (BinOp::Add, true),\n+                    \"wrapping_sub\" => (BinOp::Sub, true),\n+                    \"wrapping_mul\" => (BinOp::Mul, true),\n                     \"add_with_overflow\" => (BinOp::Add, false),\n                     \"sub_with_overflow\" => (BinOp::Sub, false),\n                     \"mul_with_overflow\" => (BinOp::Mul, false),"}, {"sha": "fba1e19dd0e8e16ec465f5743efe799b6118b044", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -537,9 +537,9 @@ impl Qualif for IsNotPromotable {\n                             | \"cttz_nonzero\"\n                             | \"ctlz\"\n                             | \"ctlz_nonzero\"\n-                            | \"overflowing_add\"\n-                            | \"overflowing_sub\"\n-                            | \"overflowing_mul\"\n+                            | \"wrapping_add\"\n+                            | \"wrapping_sub\"\n+                            | \"wrapping_mul\"\n                             | \"unchecked_shl\"\n                             | \"unchecked_shr\"\n                             | \"rotate_left\""}, {"sha": "334d0cee9fbe7412a7e401c9e8afbf963c151f61", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -379,9 +379,9 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         | \"add_with_overflow\" // ~> .overflowing_add\n         | \"sub_with_overflow\" // ~> .overflowing_sub\n         | \"mul_with_overflow\" // ~> .overflowing_mul\n-        | \"overflowing_add\" // ~> .wrapping_add\n-        | \"overflowing_sub\" // ~> .wrapping_sub\n-        | \"overflowing_mul\" // ~> .wrapping_mul\n+        | \"wrapping_add\" // ~> .wrapping_add\n+        | \"wrapping_sub\" // ~> .wrapping_sub\n+        | \"wrapping_mul\" // ~> .wrapping_mul\n         | \"saturating_add\" // ~> .saturating_add\n         | \"saturating_sub\" // ~> .saturating_sub\n         | \"unchecked_shl\" // ~> .wrapping_shl"}, {"sha": "dfbf8bcd0f60fcdf26d583f381480ea469b3cc02", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1da639d4ad18a762834069c588e89b2b252cab/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=0f1da639d4ad18a762834069c588e89b2b252cab", "patch": "@@ -67,7 +67,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n-        \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n         \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\" |\n@@ -314,7 +314,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                 (1, vec![param(0), param(0)], param(0)),\n             \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n-            \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n+            \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n             \"saturating_add\" | \"saturating_sub\" =>\n                 (1, vec![param(0), param(0)], param(0)),"}]}