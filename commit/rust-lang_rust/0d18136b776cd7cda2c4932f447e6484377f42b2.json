{"sha": "0d18136b776cd7cda2c4932f447e6484377f42b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTgxMzZiNzc2Y2Q3Y2RhMmM0OTMyZjQ0N2U2NDg0Mzc3ZjQyYjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-29T16:44:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-29T17:11:59Z"}, "message": "Move common code to `WhereClause`", "tree": {"sha": "d62304ae99b750b4ebcc952a1eb1b223a420b9ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62304ae99b750b4ebcc952a1eb1b223a420b9ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d18136b776cd7cda2c4932f447e6484377f42b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d18136b776cd7cda2c4932f447e6484377f42b2", "html_url": "https://github.com/rust-lang/rust/commit/0d18136b776cd7cda2c4932f447e6484377f42b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d18136b776cd7cda2c4932f447e6484377f42b2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04243710a0077ad140b8259c21bc1aac02057a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/04243710a0077ad140b8259c21bc1aac02057a48", "html_url": "https://github.com/rust-lang/rust/commit/04243710a0077ad140b8259c21bc1aac02057a48"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "a46871ac807981091721d7725d74ebfd996d694b", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=0d18136b776cd7cda2c4932f447e6484377f42b2", "patch": "@@ -525,6 +525,13 @@ impl WhereClause<'_> {\n     pub fn span_for_predicates_or_empty_place(&self) -> Span {\n         self.span\n     }\n+\n+    /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n+    ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n+    pub fn tail_span_for_suggestion(&self) -> Span {\n+        let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n+        self.predicates.last().map(|p| p.span()).unwrap_or(end).shrink_to_hi().to(end)\n+    }\n }\n \n /// A single predicate in a where-clause."}, {"sha": "ba3cc0a7af2c6dad9e0b626a0df152bfaf84682d", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=0d18136b776cd7cda2c4932f447e6484377f42b2", "patch": "@@ -220,22 +220,11 @@ pub fn suggest_constraining_type_param(\n             }\n         }\n \n-        // Account for `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n-        let end = generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi();\n-        let where_clause_span = generics\n-            .where_clause\n-            .predicates\n-            .last()\n-            .map(|p| p.span())\n-            .unwrap_or(end)\n-            .shrink_to_hi()\n-            .to(end);\n-\n         match &param_spans[..] {\n             &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n             _ => {\n                 err.span_suggestion_verbose(\n-                    where_clause_span,\n+                    generics.where_clause.tail_span_for_suggestion(),\n                     &msg_restrict_type_further,\n                     format!(\", {}: {}\", param_name, constraint),\n                     Applicability::MachineApplicable,"}, {"sha": "a8d4de873f958d7f716bbbdd38eb19eec05f4701", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d18136b776cd7cda2c4932f447e6484377f42b2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0d18136b776cd7cda2c4932f447e6484377f42b2", "patch": "@@ -169,17 +169,8 @@ pub trait InferCtxtExt<'tcx> {\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n-    let end = generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi();\n     (\n-        // Account for `where T: Foo,` so we don't suggest two trailing commas.\n-        generics\n-            .where_clause\n-            .predicates\n-            .last()\n-            .map(|p| p.span())\n-            .unwrap_or(end)\n-            .shrink_to_hi()\n-            .to(end),\n+        generics.where_clause.tail_span_for_suggestion(),\n         format!(\n             \"{} {}\",\n             if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },"}]}