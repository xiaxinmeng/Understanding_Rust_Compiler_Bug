{"sha": "c0a25bec9680471a4f1f26d06d5efa11547b6afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTI1YmVjOTY4MDQ3MWE0ZjFmMjZkMDZkNWVmYTExNTQ3YjZhZmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:42:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:42:49Z"}, "message": "Rollup merge of #72791 - lcnr:coerce-refactor, r=estebank\n\nupdate coerce docs and unify relevant tests\n\nMerges `test/ui/coerce` with `test/ui/coercion`.\nUpdates the documentation of `librustc_typeck/check/coercion.rs`.\nAdds 2 new coercion tests.", "tree": {"sha": "98c9d9a80d5e1d7036ee356f8b1c5ecb2e9f65ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98c9d9a80d5e1d7036ee356f8b1c5ecb2e9f65ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a25bec9680471a4f1f26d06d5efa11547b6afc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7XepCRBK7hj4Ov3rIwAAdHIIAG3Lc96qnuK3cXlSdTiWO/Yp\nSlJWDa/kj7vjJmo3m2URqj4KjHc/k0rRTpZ4JMKyit/d2uloSnsuSmlDNv868bT1\nvci8lNaxUQNMAikZ/HGVHQiy6/JT+uFsZ8ULdbciHty+keYXgRSFA7Zxx3Oe1ZdQ\n7D9k9irTeUsuQWVm5oczFajNHTohMxxomEs/LtRReqxvJqi0bT9vbMMWBoo/z+g4\nV1y00/zWq4s368+EEIcow/Qe7sPwdhqFP9uEChFzfSyJrzrheY1AapK8DNi3Fa85\nhVWCW374NjOMBc8ng1DMG7nAcYEjdgKYrWROH7L2d7rZKIbP3kj+UgvtC7+TxYg=\n=8M1Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 98c9d9a80d5e1d7036ee356f8b1c5ecb2e9f65ee\nparent 218b90f6438b775e9626ac37f26e9f1dbd2be945\nparent 06a237fe2c3b83d26bd4b5aa74dc9aa47a07d9a9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620969 -0700\ncommitter GitHub <noreply@github.com> 1592620969 -0700\n\nRollup merge of #72791 - lcnr:coerce-refactor, r=estebank\n\nupdate coerce docs and unify relevant tests\n\nMerges `test/ui/coerce` with `test/ui/coercion`.\nUpdates the documentation of `librustc_typeck/check/coercion.rs`.\nAdds 2 new coercion tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a25bec9680471a4f1f26d06d5efa11547b6afc", "html_url": "https://github.com/rust-lang/rust/commit/c0a25bec9680471a4f1f26d06d5efa11547b6afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a25bec9680471a4f1f26d06d5efa11547b6afc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218b90f6438b775e9626ac37f26e9f1dbd2be945", "url": "https://api.github.com/repos/rust-lang/rust/commits/218b90f6438b775e9626ac37f26e9f1dbd2be945", "html_url": "https://github.com/rust-lang/rust/commit/218b90f6438b775e9626ac37f26e9f1dbd2be945"}, {"sha": "06a237fe2c3b83d26bd4b5aa74dc9aa47a07d9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a237fe2c3b83d26bd4b5aa74dc9aa47a07d9a9", "html_url": "https://github.com/rust-lang/rust/commit/06a237fe2c3b83d26bd4b5aa74dc9aa47a07d9a9"}], "stats": {"total": 268, "additions": 140, "deletions": 128}, "files": [{"sha": "15d210b89b64d5d742765b1275fc3b744384762c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -10,45 +10,30 @@\n //!\n //! Note that if we are expecting a reference, we will *reborrow*\n //! even if the argument provided was already a reference. This is\n-//! useful for freezing mut/const things (that is, when the expected is &T\n-//! but you have &const T or &mut T) and also for avoiding the linearity\n+//! useful for freezing mut things (that is, when the expected type is &T\n+//! but you have &mut T) and also for avoiding the linearity\n //! of mut things (when the expected is &mut T and you have &mut T). See\n-//! the various `src/test/ui/coerce-reborrow-*.rs` tests for\n+//! the various `src/test/ui/coerce/*.rs` tests for\n //! examples of where this is useful.\n //!\n //! ## Subtle note\n //!\n-//! When deciding what type coercions to consider, we do not attempt to\n-//! resolve any type variables we may encounter. This is because `b`\n-//! represents the expected type \"as the user wrote it\", meaning that if\n-//! the user defined a generic function like\n+//! When infering the generic arguments of functions, the argument\n+//! order is relevant, which can lead to the following edge case:\n //!\n-//!    fn foo<A>(a: A, b: A) { ... }\n+//! ```rust\n+//! fn foo<T>(a: T, b: T) {\n+//!     // ...\n+//! }\n //!\n-//! and then we wrote `foo(&1, @2)`, we will not auto-borrow\n-//! either argument. In older code we went to some lengths to\n-//! resolve the `b` variable, which could mean that we'd\n-//! auto-borrow later arguments but not earlier ones, which\n-//! seems very confusing.\n+//! foo(&7i32, &mut 7i32);\n+//! // This compiles, as we first infer `T` to be `&i32`,\n+//! // and then coerce `&mut 7i32` to `&7i32`.\n //!\n-//! ## Subtler note\n-//!\n-//! However, right now, if the user manually specifies the\n-//! values for the type variables, as so:\n-//!\n-//!    foo::<&int>(@1, @2)\n-//!\n-//! then we *will* auto-borrow, because we can't distinguish this from a\n-//! function that declared `&int`. This is inconsistent but it's easiest\n-//! at the moment. The right thing to do, I think, is to consider the\n-//! *unsubstituted* type when deciding whether to auto-borrow, but the\n-//! *substituted* type when considering the bounds and so forth. But most\n-//! of our methods don't give access to the unsubstituted type, and\n-//! rightly so because they'd be error-prone. So maybe the thing to do is\n-//! to actually determine the kind of coercions that should occur\n-//! separately and pass them in. Or maybe it's ok as is. Anyway, it's\n-//! sort of a minor point so I've opted to leave it for later -- after all,\n-//! we may want to adjust precisely when coercions occur.\n+//! foo(&mut 7i32, &7i32);\n+//! // This does not compile, as we first infer `T` to be `&mut i32`\n+//! // and are then unable to coerce `&7i32` to `&mut i32`.\n+//! ```\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n@@ -96,6 +81,8 @@ impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {\n \n type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;\n \n+/// Coercing a mutable reference to an immutable works, while\n+/// coercing `&T` to `&mut T` should be forbidden.\n fn coerce_mutbls<'tcx>(\n     from_mutbl: hir::Mutability,\n     to_mutbl: hir::Mutability,"}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coerce/coerce-overloaded-autoderef.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/218b90f6438b775e9626ac37f26e9f1dbd2be945/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218b90f6438b775e9626ac37f26e9f1dbd2be945/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=218b90f6438b775e9626ac37f26e9f1dbd2be945", "patch": "@@ -1,68 +0,0 @@\n-// run-pass\n-#![allow(unused_braces)]\n-#![allow(dead_code)]\n-// pretty-expanded FIXME #23616\n-\n-use std::rc::Rc;\n-\n-// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n-\n-fn use_ref<T>(_: &T) {}\n-fn use_mut<T>(_: &mut T) {}\n-\n-fn use_rc<T>(t: Rc<T>) {\n-    use_ref(&*t);  // what you have to write today\n-    use_ref(&t);   // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_mut_box<T>(mut t: &mut Box<T>) {\n-    use_mut(&mut *t); // what you have to write today\n-    use_mut(t);       // what you'd be able to write\n-    use_mut(&mut &mut &mut t);\n-\n-    use_ref(&*t);      // what you have to write today\n-    use_ref(t);        // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_nested<T>(t: &Box<T>) {\n-    use_ref(&**t);  // what you have to write today\n-    use_ref(t);     // what you'd be able to write (note: recursive deref)\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_slice(_: &[u8]) {}\n-fn use_slice_mut(_: &mut [u8]) {}\n-\n-fn use_vec(mut v: Vec<u8>) {\n-    use_slice_mut(&mut v[..]); // what you have to write today\n-    use_slice_mut(&mut v);     // what you'd be able to write\n-    use_slice_mut(&mut &mut &mut v);\n-\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(&v);      // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_vec_ref(v: &Vec<u8>) {\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(v);       // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_op_rhs(s: &mut String) {\n-    *s += {&String::from(\" \")};\n-}\n-\n-pub fn main() {}"}, {"sha": "d486fdf73aba8d795a1dde8c4ff37ad921efed26", "filename": "src/test/ui/coercion/coerce-expect-unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-expect-unsized.rs"}, {"sha": "01d9c1e486a4225e3358bb51f4fd1a4b1362561d", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -0,0 +1,32 @@\n+fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n+fn borrow<T>(x: &T) -> &T { x }\n+\n+fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n+fn borrow2<T>(_: &mut T, _: &T) {}\n+\n+fn double_mut_borrow<T>(x: &mut Box<T>) {\n+    let y = borrow_mut(x);\n+    let z = borrow_mut(x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    drop((y, z));\n+}\n+\n+fn double_imm_borrow(x: &mut Box<i32>) {\n+    let y = borrow(x);\n+    let z = borrow(x);\n+    **x += 1;\n+    //~^ ERROR cannot assign to `**x` because it is borrowed\n+    drop((y, z));\n+}\n+\n+fn double_mut_borrow2<T>(x: &mut Box<T>) {\n+    borrow_mut2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+}\n+\n+fn double_borrow2<T>(x: &mut Box<T>) {\n+    borrow2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+}\n+\n+pub fn main() {}"}, {"sha": "d067c3b3a18056c1f3e5bb5c79b02da297ae17c5", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:9:24\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:9:24\n    |\n LL |     let y = borrow_mut(x);\n    |                        - first mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     drop((y, z));\n    |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n-  --> $DIR/coerce-overloaded-autoderef.rs:17:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:17:5\n    |\n LL |     let y = borrow(x);\n    |                    - borrow of `**x` occurs here\n@@ -22,7 +22,7 @@ LL |     drop((y, z));\n    |           - borrow later used here\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:23:20\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:23:20\n    |\n LL |     borrow_mut2(x, x);\n    |     ----------- -  ^ second mutable borrow occurs here\n@@ -31,7 +31,7 @@ LL |     borrow_mut2(x, x);\n    |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/coerce-overloaded-autoderef.rs:28:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:28:5\n    |\n LL |     borrow2(x, x);\n    |     -------^^^^-^", "previous_filename": "src/test/ui/coercion/coerce-overloaded-autoderef.stderr"}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -1,32 +1,68 @@\n-fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n-fn borrow<T>(x: &T) -> &T { x }\n+// run-pass\n+#![allow(unused_braces)]\n+#![allow(dead_code)]\n+// pretty-expanded FIXME #23616\n \n-fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n-fn borrow2<T>(_: &mut T, _: &T) {}\n+use std::rc::Rc;\n \n-fn double_mut_borrow<T>(x: &mut Box<T>) {\n-    let y = borrow_mut(x);\n-    let z = borrow_mut(x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n-    drop((y, z));\n+// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n+\n+fn use_ref<T>(_: &T) {}\n+fn use_mut<T>(_: &mut T) {}\n+\n+fn use_rc<T>(t: Rc<T>) {\n+    use_ref(&*t);  // what you have to write today\n+    use_ref(&t);   // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_mut_box<T>(mut t: &mut Box<T>) {\n+    use_mut(&mut *t); // what you have to write today\n+    use_mut(t);       // what you'd be able to write\n+    use_mut(&mut &mut &mut t);\n+\n+    use_ref(&*t);      // what you have to write today\n+    use_ref(t);        // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n }\n \n-fn double_imm_borrow(x: &mut Box<i32>) {\n-    let y = borrow(x);\n-    let z = borrow(x);\n-    **x += 1;\n-    //~^ ERROR cannot assign to `**x` because it is borrowed\n-    drop((y, z));\n+fn use_nested<T>(t: &Box<T>) {\n+    use_ref(&**t);  // what you have to write today\n+    use_ref(t);     // what you'd be able to write (note: recursive deref)\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_slice(_: &[u8]) {}\n+fn use_slice_mut(_: &mut [u8]) {}\n+\n+fn use_vec(mut v: Vec<u8>) {\n+    use_slice_mut(&mut v[..]); // what you have to write today\n+    use_slice_mut(&mut v);     // what you'd be able to write\n+    use_slice_mut(&mut &mut &mut v);\n+\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(&v);      // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_mut_borrow2<T>(x: &mut Box<T>) {\n-    borrow_mut2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+fn use_vec_ref(v: &Vec<u8>) {\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(v);       // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_borrow2<T>(x: &mut Box<T>) {\n-    borrow2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+fn use_op_rhs(s: &mut String) {\n+    *s += {&String::from(\" \")};\n }\n \n pub fn main() {}"}, {"sha": "f033e1b5d2b01a2458b6e275f062962b3abd0c21", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-arg.rs"}, {"sha": "64a365229cbb77e3438e5e922d7f6d2e86ef9cde", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-rcvr.rs"}, {"sha": "c2aaae1c73ec8473ed5e892b323cf1488dd91ec4", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-arg.rs"}, {"sha": "9a5652acf87874c6ae50ff49254bc8ff287e8ac9", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-rcvr.rs"}, {"sha": "48be2d3146b811f0777829e94035ae170051004a", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -0,0 +1,6 @@\n+fn test<T>(_a: T, _b: T) {}\n+\n+fn main() {\n+    test(&mut 7, &7);\n+    //~^ mismatched types\n+}"}, {"sha": "59b0ec496f16f5a2e4c721ee7d1f08883a964fb7", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-reborrow-multi-arg-fail.rs:4:18\n+   |\n+LL |     test(&mut 7, &7);\n+   |                  ^^ types differ in mutability\n+   |\n+   = note: expected mutable reference `&mut {integer}`\n+                      found reference `&{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93cd0bb3e27f6df5cf066ee41e23e866cdbc4d1b", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+fn test<T>(_a: T, _b: T) {}\n+\n+fn main() {\n+    test(&7, &7);\n+    test(&7, &mut 7);\n+    test::<&i32>(&mut 7, &7);\n+    test::<&i32>(&mut 7, &mut 7);\n+}"}, {"sha": "76cd6793b3c231d6e71dba3bae6b611832c58cf2", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-arg.rs"}, {"sha": "e6e7c3a51aa09fcb9cec1d321de2eac1b42cb350", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-rcvr.rs"}, {"sha": "2635754f14dacddea066a94009fcca92a1f434ae", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-arg.rs"}, {"sha": "c03336ea37af8a36a1d4886539ce00f171a47152", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-rcvr.rs"}, {"sha": "85598a42eccd9bdc26534ab1752ca3987afb1227", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -1,7 +1,5 @@\n #![feature(never_type)]\n \n-fn foo(x: usize, y: !, z: usize) { }\n-\n fn cast_a() {\n     let y = {return; 22} as !;\n     //~^ ERROR non-primitive cast"}, {"sha": "50e009aa25bb1085ced0b993f0d548032459714a", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "patch": "@@ -1,11 +1,11 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:6:13\n+  --> $DIR/coerce-to-bang-cast.rs:4:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:11:13\n+  --> $DIR/coerce-to-bang-cast.rs:9:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "95a7ee8fe0f2be1ebcee6028ce37beb90c2d2a88", "filename": "src/test/ui/coercion/coerce-unify-return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-unify-return.rs"}, {"sha": "f1818f9bb5a6df7fa791c747f106e0c7a957d3c5", "filename": "src/test/ui/coercion/coerce-unify.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-unify.rs"}, {"sha": "45b53300c5b4bd4652c28500fd578c9dadd5ac4f", "filename": "src/test/ui/coercion/coerce-unsize-subtype.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a25bec9680471a4f1f26d06d5efa11547b6afc/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs?ref=c0a25bec9680471a4f1f26d06d5efa11547b6afc", "previous_filename": "src/test/ui/coerce/coerce-unsize-subtype.rs"}]}