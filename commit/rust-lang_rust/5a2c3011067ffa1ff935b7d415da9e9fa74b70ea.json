{"sha": "5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMmMzMDExMDY3ZmZhMWZmOTM1YjdkNDE1ZGE5ZTlmYTc0YjcwZWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T00:35:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T01:23:19Z"}, "message": "Do not complain about missing crate named as a keyword", "tree": {"sha": "669204ae93a50b1aedd6a2e5b4e26207495b26d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669204ae93a50b1aedd6a2e5b4e26207495b26d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "html_url": "https://github.com/rust-lang/rust/commit/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59183180f718fc2212828e180f2f856f0db1bb9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/59183180f718fc2212828e180f2f856f0db1bb9c", "html_url": "https://github.com/rust-lang/rust/commit/59183180f718fc2212828e180f2f856f0db1bb9c"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "14d3eebe68d474aacdcf4a0021611840fb04aaf7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -1034,6 +1034,8 @@ enum PathResult<'a> {\n     NonModule(PathResolution),\n     Indeterminate,\n     Failed(Span, String, bool /* is the error from the last segment? */),\n+    /// Encountered an error that is reported elsewhere\n+    Ignore,\n }\n \n enum ModuleKind {\n@@ -1766,6 +1768,7 @@ impl<'a> Resolver<'a> {\n                 error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n                 Def::Err\n             }\n+            PathResult::Ignore => Def::Err,\n         };\n \n         let segments: Vec<_> = segments.iter().map(|seg| {\n@@ -3693,7 +3696,7 @@ impl<'a> Resolver<'a> {\n                 resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n                 err_path_resolution()\n             }\n-            PathResult::Module(..) | PathResult::Failed(..) => return None,\n+            PathResult::Module(..) | PathResult::Failed(..) | PathResult::Ignore => return None,\n             PathResult::Indeterminate => bug!(\"indetermined path result in resolve_qpath\"),\n         };\n \n@@ -3925,8 +3928,11 @@ impl<'a> Resolver<'a> {\n                         });\n                         if let Some(candidate) = candidates.get(0) {\n                             format!(\"did you mean `{}`?\", candidate.path)\n-                        } else {\n+                        } else if !ident.is_used_keyword() {\n                             format!(\"maybe a missing `extern crate {};`?\", ident)\n+                        } else {\n+                            // the parser will already have complained about the keyword being used\n+                            return PathResult::Ignore;\n                         }\n                     } else if i == 0 {\n                         format!(\"use of undeclared type or module `{}`\", ident)"}, {"sha": "5106db53a39abdf159a5533eb9441495bd0a72a2", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -364,7 +364,8 @@ impl<'a> Resolver<'a> {\n                     Ok(path_res.base_def())\n                 }\n                 PathResult::Indeterminate if !force => return Err(Determinacy::Undetermined),\n-                PathResult::NonModule(..) | PathResult::Indeterminate | PathResult::Failed(..) => {\n+                PathResult::NonModule(..) | PathResult::Indeterminate |\n+                PathResult::Failed(..) | PathResult::Ignore => {\n                     Err(Determinacy::Determined)\n                 }\n                 PathResult::Module(..) => unreachable!(),\n@@ -929,7 +930,8 @@ impl<'a> Resolver<'a> {\n                     let def = path_res.base_def();\n                     check_consistency(self, &path, path_span, kind, initial_def, def);\n                 }\n-                path_res @ PathResult::NonModule(..) | path_res @  PathResult::Failed(..) => {\n+                path_res @ PathResult::NonModule(..) | path_res @ PathResult::Failed(..) |\n+                path_res @ PathResult::Ignore => {\n                     let (span, msg) = if let PathResult::Failed(span, msg, ..) = path_res {\n                         (span, msg)\n                     } else {"}, {"sha": "35b5b8b55c57ec34f7b7285a696aa114b63f5dd3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -767,7 +767,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             match path_res {\n                 PathResult::Module(module) => module,\n                 PathResult::Indeterminate => return false,\n-                PathResult::NonModule(..) | PathResult::Failed(..) => return true,\n+                PathResult::NonModule(..) | PathResult::Failed(..) |\n+                PathResult::Ignore => return true,\n             }\n         };\n \n@@ -861,6 +862,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n                 module\n             }\n+            PathResult::Ignore => {\n+                return None;\n+            }\n             PathResult::Failed(span, msg, false) => {\n                 if no_ambiguity {\n                     assert!(directive.imported_module.get().is_none());"}, {"sha": "3857def9824f85e9fab018e4c0f49268030730e0", "filename": "src/test/ui/issues/issue-57198-pass.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57198-pass.rs?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+mod m {\n+    pub fn r#for() {}\n+}\n+\n+fn main() {\n+    m::r#for();\n+}"}, {"sha": "714a46cbc9f481e7e05ab1a09f3cf23be44ef52a", "filename": "src/test/ui/issues/issue-57198.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57198.rs?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -0,0 +1,8 @@\n+mod m {\n+    pub fn r#for() {}\n+}\n+\n+fn main() {\n+    m::for();\n+    //~^ ERROR expected identifier, found keyword `for`\n+}"}, {"sha": "c4d297b2d95eb18e640ee8d7deaaa515cd35938f", "filename": "src/test/ui/issues/issue-57198.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c3011067ffa1ff935b7d415da9e9fa74b70ea/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr?ref=5a2c3011067ffa1ff935b7d415da9e9fa74b70ea", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found keyword `for`\n+  --> $DIR/issue-57198.rs:6:8\n+   |\n+LL |     m::for();\n+   |        ^^^ expected identifier, found keyword\n+\n+error: aborting due to previous error\n+"}]}