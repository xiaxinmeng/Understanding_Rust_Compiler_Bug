{"sha": "8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "node_id": "C_kwDOAAsO6NoAKDhjYWQ5MTdlNjg5ZjE5ZjdlYTJmOWE2ZDJlNWE5NWM3ZWU2Yzc3ZDQ", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-20T04:20:34Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-20T04:28:49Z"}, "message": "reimpl `make non_upper_case_globals lint not report trait impls`", "tree": {"sha": "a2b46053c6a0b0fbf82ca93e0725e1e6288a0aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b46053c6a0b0fbf82ca93e0725e1e6288a0aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmRAv4MVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNEDi8P/jxVawxY7JLCZ2FD2+HIHgYJMIfg\nb41PmmE+pZQWHr5nvN5W6Qq3JURy+IIcMk0TQ2OadkEjiUSeCeVO54IUkpAsCOwc\nDgw6fESYxyd6i27c21eiV3Ba5IhSd2OAPVNB0zHMIOw3jDYMiIDbmm4vdpLTcNyr\noQ474EGj/5ppzEYN/xUs6ARXh9RcFvj5REQk8DMZ/OO8LX4qwfgdQZMnMYsAbkLk\nqZLAR/oQBs2btVBuvkiI53ruykmrmuG8xVm5klK/48uwu4455Ar5mkkpUxCLde6y\nQy82rXqaa1I1/fgT53yCVrWLDipDYE7qwxaUUOHkhn9fUH8Fh7/yKaljnJaRIZqJ\ni/ftXv9B/l6m0hALnKhj8Vt/BfRRrQc9HnBuuWyiiu7Xm8q9nequYoRvEzYEK5nf\nbvSTM+26MVM5pyQsnIrtvrpgiqRkiyID90qlIFA43fCf5AhE6LIdJzwwiV7WTUoP\n4wtp0zfz92MaFMjeXcZPlhkiwDsg8cPd3x7GYUrmLZ+HLn92hjPt04oJeq4mXnG5\nohVAR1Cu7r74ZryrhJKhJ4BCX7KVsJ7zP2/wylUawBjIFyxOgmnMS6SQf7JK4DvY\nQML4aRseQeVA4ZZ4w3sLKZspAfm7UtXRMmLNcgeCSQzfkwVqkstZ3crD9JNYPvXR\nUAH3M4NKf7sDIDDA\n=JBoz\n-----END PGP SIGNATURE-----", "payload": "tree a2b46053c6a0b0fbf82ca93e0725e1e6288a0aec\nparent c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e\nauthor Ezra Shaw <ezrasure@outlook.com> 1681964434 +1200\ncommitter Ezra Shaw <ezrasure@outlook.com> 1681964929 +1200\n\nreimpl `make non_upper_case_globals lint not report trait impls`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "html_url": "https://github.com/rust-lang/rust/commit/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "html_url": "https://github.com/rust-lang/rust/commit/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "79253cbc8b43cc451561f1f2ee4a2f8e0285270f", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "patch": "@@ -33,6 +33,11 @@ pub fn method_context(cx: &LateContext<'_>, id: LocalDefId) -> MethodLateContext\n     }\n }\n \n+fn assoc_item_in_trait_impl(cx: &LateContext<'_>, ii: &hir::ImplItem<'_>) -> bool {\n+    let item = cx.tcx.associated_item(ii.owner_id);\n+    item.trait_item_def_id.is_some()\n+}\n+\n declare_lint! {\n     /// The `non_camel_case_types` lint detects types, variants, traits and\n     /// type parameters that don't have camel case names.\n@@ -177,6 +182,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n             // trait impls where we should have warned for the trait definition already.\n             ast::ItemKind::Impl(box ast::Impl { of_trait: None, items, .. }) => {\n                 for it in items {\n+                    // FIXME: this doesn't respect `#[allow(..)]` on the item itself.\n                     if let ast::AssocItemKind::Type(..) = it.kind {\n                         self.check_case(cx, \"associated type\", &it.ident);\n                     }\n@@ -494,15 +500,6 @@ impl<'tcx> LateLintPass<'tcx> for NonUpperCaseGlobals {\n             hir::ItemKind::Const(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"constant\", &it.ident);\n             }\n-            // we only want to check inherent associated consts, trait consts\n-            // are linted at def-site.\n-            hir::ItemKind::Impl(hir::Impl { of_trait: None, items, .. }) => {\n-                for it in *items {\n-                    if let hir::AssocItemKind::Const = it.kind {\n-                        NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &it.ident);\n-                    }\n-                }\n-            }\n             _ => {}\n         }\n     }\n@@ -513,6 +510,12 @@ impl<'tcx> LateLintPass<'tcx> for NonUpperCaseGlobals {\n         }\n     }\n \n+    fn check_impl_item(&mut self, cx: &LateContext<'_>, ii: &hir::ImplItem<'_>) {\n+        if let hir::ImplItemKind::Const(..) = ii.kind && !assoc_item_in_trait_impl(cx, ii) {\n+            NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n+        }\n+    }\n+\n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         // Lint for constants that look like binding identifiers (#7526)\n         if let PatKind::Path(hir::QPath::Resolved(None, ref path)) = p.kind {"}, {"sha": "d9f0868b7659dd279ab20e239832faac3ae61747", "filename": "tests/ui/lint/issue-110573.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4/tests%2Fui%2Flint%2Fissue-110573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4/tests%2Fui%2Flint%2Fissue-110573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-110573.rs?ref=8cad917e689f19f7ea2f9a6d2e5a95c7ee6c77d4", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![deny(warnings)]\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    #[allow(non_upper_case_globals)]\n+    pub const Const: () = ();\n+}\n+\n+fn main() {}"}]}