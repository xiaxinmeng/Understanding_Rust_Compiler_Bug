{"sha": "e42bea9fdef30787709ddd1de9259717954e7bd6", "node_id": "C_kwDOAAsO6NoAKGU0MmJlYTlmZGVmMzA3ODc3MDlkZGQxZGU5MjU5NzE3OTU0ZTdiZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T21:31:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T21:31:06Z"}, "message": "Auto merge of #108282 - cjgillot:mir-checked-sh, r=tmiasko\n\nImplement checked Shl/Shr at MIR building.\n\nThis does not require any special handling by codegen backends,\nas the overflow behaviour is entirely determined by the rhs (shift amount).\n\nThis allows MIR ConstProp to remove the overflow check for constant shifts.\n\n~There is an existing different behaviour between cg_llvm and cg_clif (cc `@bjorn3).`\nI took cg_llvm's one as reference: overflow if `rhs < 0 || rhs > number_of_bits_in_lhs_ty`.~\n\nEDIT: `cg_llvm` and `cg_clif` implement the overflow check differently. This PR uses `cg_llvm`'s implementation based on a `BitAnd` instead of `cg_clif`'s one based on an unsigned comparison.", "tree": {"sha": "a4ed0d9819c833e0fb4e10cee2ae0aa4f4eb868b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ed0d9819c833e0fb4e10cee2ae0aa4f4eb868b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42bea9fdef30787709ddd1de9259717954e7bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42bea9fdef30787709ddd1de9259717954e7bd6", "html_url": "https://github.com/rust-lang/rust/commit/e42bea9fdef30787709ddd1de9259717954e7bd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42bea9fdef30787709ddd1de9259717954e7bd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84", "html_url": "https://github.com/rust-lang/rust/commit/7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84"}, {"sha": "760275d81e67ae8953d40e64ff76691f0a55c5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/760275d81e67ae8953d40e64ff76691f0a55c5ff", "html_url": "https://github.com/rust-lang/rust/commit/760275d81e67ae8953d40e64ff76691f0a55c5ff"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "1357b7be1e0959f5348833fe4b11ce18a71ca883", "filename": "src/num.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e42bea9fdef30787709ddd1de9259717954e7bd6/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42bea9fdef30787709ddd1de9259717954e7bd6/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=e42bea9fdef30787709ddd1de9259717954e7bd6", "patch": "@@ -170,14 +170,6 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n ) -> CValue<'tcx> {\n-    if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n-        assert_eq!(\n-            in_lhs.layout().ty,\n-            in_rhs.layout().ty,\n-            \"checked int binop requires lhs and rhs of same type\"\n-        );\n-    }\n-\n     let lhs = in_lhs.load_scalar(fx);\n     let rhs = in_rhs.load_scalar(fx);\n \n@@ -271,21 +263,6 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n                 _ => unreachable!(\"invalid non-integer type {}\", ty),\n             }\n         }\n-        BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n-            let ty = fx.bcx.func.dfg.value_type(val);\n-            let max_shift = i64::from(ty.bits()) - 1;\n-            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n-            (val, has_overflow)\n-        }\n-        BinOp::Shr => {\n-            let val =\n-                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n-            let ty = fx.bcx.func.dfg.value_type(val);\n-            let max_shift = i64::from(ty.bits()) - 1;\n-            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n-            (val, has_overflow)\n-        }\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n "}]}