{"sha": "07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YWMyZTEwNDNjM2E0ZTliYTAwNThmMGI2Nzc5ODgyMWQwMTE4ZWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T22:15:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T22:15:14Z"}, "message": "rustdoc: Add a sorting pass", "tree": {"sha": "7126e08a698ccbd480af774231826464cbf2516d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7126e08a698ccbd480af774231826464cbf2516d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "html_url": "https://github.com/rust-lang/rust/commit/07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ac2e1043c3a4e9ba0058f0b67798821d0118ee/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e69eb4582e2cb1c3b744f4661ca0c2fad139a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e69eb4582e2cb1c3b744f4661ca0c2fad139a8", "html_url": "https://github.com/rust-lang/rust/commit/55e69eb4582e2cb1c3b744f4661ca0c2fad139a8"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "6987e7516dcb675be7f058e9a250c268cb92d789", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07ac2e1043c3a4e9ba0058f0b67798821d0118ee/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/07ac2e1043c3a4e9ba0058f0b67798821d0118ee/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "patch": "@@ -29,3 +29,4 @@ mod unindent_pass;\n mod trim_pass;\n mod astsrv;\n mod demo;\n+mod sort_pass;\n\\ No newline at end of file"}, {"sha": "27d0bc11423aac135e196a8d862578f73f9a4f6e", "filename": "src/rustdoc/sort_pass.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/07ac2e1043c3a4e9ba0058f0b67798821d0118ee/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ac2e1043c3a4e9ba0058f0b67798821d0118ee/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "patch": "@@ -0,0 +1,69 @@\n+#[doc = \"A general sorting pass\"];\n+\n+import std::sort;\n+\n+export item_lteq, mk_pass;\n+\n+type item_lteq = fn~(doc::itemtag, doc::itemtag) -> bool;\n+\n+fn mk_pass(lteq: item_lteq) -> pass {\n+    fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+        run(srv, doc, lteq)\n+    }\n+}\n+\n+fn run(\n+    _srv: astsrv::srv,\n+    doc: doc::cratedoc,\n+    lteq: item_lteq\n+) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_mod: fold_mod\n+        with *fold::default_seq_fold(lteq)\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn fold_mod(\n+    fold: fold::fold<item_lteq>,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n+    let doc = fold::default_seq_fold_mod(fold, doc);\n+    ~{\n+        items: sort::merge_sort(fold.ctxt, doc.items)\n+        with *doc\n+    }\n+}\n+\n+#[test]\n+fn test() {\n+    fn name_lteq(item1: doc::itemtag, item2: doc::itemtag) -> bool {\n+        str::lteq(item1.name(), item2.name())\n+    }\n+\n+    let source = \"mod z { mod y { } fn x() { } } mod w { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = mk_pass(name_lteq)(srv, doc);\n+    assert doc.topmod.mods()[0].name == \"w\";\n+    assert doc.topmod.mods()[1].items[0].name() == \"x\";\n+    assert doc.topmod.mods()[1].items[1].name() == \"y\";\n+    assert doc.topmod.mods()[1].name == \"z\";\n+}\n+\n+#[test]\n+fn should_be_stable() {\n+    fn always_eq(_item1: doc::itemtag, _item2: doc::itemtag) -> bool {\n+        true\n+    }\n+\n+    let source = \"mod a { mod b { } } mod c { mod d { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = mk_pass(always_eq)(srv, doc);\n+    assert doc.topmod.mods()[0].items[0].name() == \"b\";\n+    assert doc.topmod.mods()[1].items[0].name() == \"d\";\n+    let doc = mk_pass(always_eq)(srv, doc);\n+    assert doc.topmod.mods()[0].items[0].name() == \"b\";\n+    assert doc.topmod.mods()[1].items[0].name() == \"d\";\n+}"}]}