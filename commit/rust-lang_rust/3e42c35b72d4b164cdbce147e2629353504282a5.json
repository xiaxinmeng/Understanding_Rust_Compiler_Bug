{"sha": "3e42c35b72d4b164cdbce147e2629353504282a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDJjMzViNzJkNGIxNjRjZGJjZTE0N2UyNjI5MzUzNTA0MjgyYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-31T15:02:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-31T15:02:40Z"}, "message": "Auto merge of #6981 - matthiaskrgr:6803_take_2, r=flip1995\n\ndisable upper_case_acronyms for pub items - enum edition\n\nFixes https://github.com/rust-lang/rust-clippy/issues/6803 (again... :sweat_smile:  )\n\nMy previous fix did not work for enums because enum variants were checked separately in the `check_variant` function but it looks like we can't use that because we can't tell if the enum the variants belong to is declared as public or not (it always said `Inherited` for me)\n\nI went and special-cased enums and iterated over all the variants \"manually\", but only, if the enums is not public.\n\n---\n\nchangelog: fix upper_case_acronyms still firing on public enums (#6803)", "tree": {"sha": "a271030c32f0f3ef6b00cf3fe81bb07f827b617f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a271030c32f0f3ef6b00cf3fe81bb07f827b617f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e42c35b72d4b164cdbce147e2629353504282a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e42c35b72d4b164cdbce147e2629353504282a5", "html_url": "https://github.com/rust-lang/rust/commit/3e42c35b72d4b164cdbce147e2629353504282a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e42c35b72d4b164cdbce147e2629353504282a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e33bf634780ca3e36d88e14b4aa7352b2d8e2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e33bf634780ca3e36d88e14b4aa7352b2d8e2dd", "html_url": "https://github.com/rust-lang/rust/commit/2e33bf634780ca3e36d88e14b4aa7352b2d8e2dd"}, {"sha": "ca7e95501c13f386956728bb66ec099a0d89e8e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7e95501c13f386956728bb66ec099a0d89e8e5", "html_url": "https://github.com/rust-lang/rust/commit/ca7e95501c13f386956728bb66ec099a0d89e8e5"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "4ac2ec55b987d915ad8e1161f64bb19bbe1cbb56", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e42c35b72d4b164cdbce147e2629353504282a5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42c35b72d4b164cdbce147e2629353504282a5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=3e42c35b72d4b164cdbce147e2629353504282a5", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{Item, ItemKind, Variant, VisibilityKind};\n+use rustc_ast::ast::{Item, ItemKind, VisibilityKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -99,21 +98,21 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n \n impl EarlyLintPass for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), it.span);\n+        // do not lint public items or in macros\n+        if !in_external_macro(cx.sess(), it.span) && !matches!(it.vis.kind, VisibilityKind::Public) {\n             if matches!(\n                 it.kind,\n-                ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n-            );\n-            // do not lint public items\n-            if !matches!(it.vis.kind, VisibilityKind::Public);\n-            then {\n+                ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n+            ) {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n+            } else if let ItemKind::Enum(ref enumdef, _) = it.kind {\n+                // check enum variants seperately because again we only want to lint on private enums and\n+                // the fn check_variant does not know about the vis of the enum of its variants\n+                enumdef\n+                    .variants\n+                    .iter()\n+                    .for_each(|variant| check_ident(cx, &variant.ident, self.upper_case_acronyms_aggressive));\n             }\n         }\n     }\n-\n-    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n-        check_ident(cx, &v.ident, self.upper_case_acronyms_aggressive);\n-    }\n }"}, {"sha": "1a5cf1b1947c5e7be4c8266da92d6a63ab9552fa", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs?ref=3e42c35b72d4b164cdbce147e2629353504282a5", "patch": "@@ -25,4 +25,20 @@ pub struct MIXEDCapital;\n \n pub struct FULLCAPITAL;\n \n+// enum variants should not be linted if the num is pub\n+pub enum ParseError<T> {\n+    FULLCAPITAL(u8),\n+    MIXEDCapital(String),\n+    Utf8(std::string::FromUtf8Error),\n+    Parse(T, String),\n+}\n+\n+// private, do lint here\n+enum ParseErrorPrivate<T> {\n+    WASD(u8),\n+    WASDMixed(String),\n+    Utf8(std::string::FromUtf8Error),\n+    Parse(T, String),\n+}\n+\n fn main() {}"}, {"sha": "02f29bbefe14a4f3043d563a90a1b6e978b5d11a", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr?ref=3e42c35b72d4b164cdbce147e2629353504282a5", "patch": "@@ -66,5 +66,17 @@ error: name `GCCLLVMSomething` contains a capitalized acronym\n LL | struct GCCLLVMSomething;\n    |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n \n-error: aborting due to 11 previous errors\n+error: name `WASD` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:38:5\n+   |\n+LL |     WASD(u8),\n+   |     ^^^^ help: consider making the acronym lowercase, except the initial letter: `Wasd`\n+\n+error: name `WASDMixed` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:39:5\n+   |\n+LL |     WASDMixed(String),\n+   |     ^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `WasdMixed`\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "48bb9e54b122ba68fa42ec3289fd6db03aa1b628", "filename": "tests/ui/upper_case_acronyms.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.rs?ref=3e42c35b72d4b164cdbce147e2629353504282a5", "patch": "@@ -24,4 +24,18 @@ struct GCCLLVMSomething;\n pub struct NOWARNINGHERE;\n pub struct ALSONoWarningHERE;\n \n+// enum variants should not be linted if the num is pub\n+pub enum ParseError<T> {\n+    YDB(u8),\n+    Utf8(std::string::FromUtf8Error),\n+    Parse(T, String),\n+}\n+\n+// private, do lint here\n+enum ParseErrorPrivate<T> {\n+    WASD(u8),\n+    Utf8(std::string::FromUtf8Error),\n+    Parse(T, String),\n+}\n+\n fn main() {}"}, {"sha": "250b196a99eb2e09d176db39e97d60cd244ff9ef", "filename": "tests/ui/upper_case_acronyms.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e42c35b72d4b164cdbce147e2629353504282a5/tests%2Fui%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.stderr?ref=3e42c35b72d4b164cdbce147e2629353504282a5", "patch": "@@ -48,5 +48,11 @@ error: name `FIN` contains a capitalized acronym\n LL |     FIN,\n    |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n \n-error: aborting due to 8 previous errors\n+error: name `WASD` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:36:5\n+   |\n+LL |     WASD(u8),\n+   |     ^^^^ help: consider making the acronym lowercase, except the initial letter: `Wasd`\n+\n+error: aborting due to 9 previous errors\n "}]}