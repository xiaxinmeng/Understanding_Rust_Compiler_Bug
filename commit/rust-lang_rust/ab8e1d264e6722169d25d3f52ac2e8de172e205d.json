{"sha": "ab8e1d264e6722169d25d3f52ac2e8de172e205d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGUxZDI2NGU2NzIyMTY5ZDI1ZDNmNTJhYzJlOGRlMTcyZTIwNWQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-03-08T03:31:58Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-03-08T03:31:58Z"}, "message": "Always call read/write from default vectored io methods", "tree": {"sha": "d8b9ab45fdd567cdb70eb7da031975f79618999f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b9ab45fdd567cdb70eb7da031975f79618999f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8e1d264e6722169d25d3f52ac2e8de172e205d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e1d264e6722169d25d3f52ac2e8de172e205d", "html_url": "https://github.com/rust-lang/rust/commit/ab8e1d264e6722169d25d3f52ac2e8de172e205d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e1d264e6722169d25d3f52ac2e8de172e205d/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec91f26442aaf51ececcb054f5a4b92f7f5c0615", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec91f26442aaf51ececcb054f5a4b92f7f5c0615", "html_url": "https://github.com/rust-lang/rust/commit/ec91f26442aaf51ececcb054f5a4b92f7f5c0615"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "1a2152a79af5a235fc660e5362dc7a79a4fe7fba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ab8e1d264e6722169d25d3f52ac2e8de172e205d", "patch": "@@ -390,6 +390,28 @@ fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n     ret\n }\n \n+pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoVecMut<'_>]) -> Result<usize>\n+where\n+    F: FnOnce(&mut [u8]) -> Result<usize>\n+{\n+    let buf = bufs\n+        .iter_mut()\n+        .find(|b| !b.is_empty())\n+        .map_or(&mut [][..], |b| &mut **b);\n+    read(buf)\n+}\n+\n+pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoVec<'_>]) -> Result<usize>\n+where\n+    F: FnOnce(&[u8]) -> Result<usize>\n+{\n+    let buf = bufs\n+        .iter()\n+        .find(|b| !b.is_empty())\n+        .map_or(&[][..], |b| &**b);\n+    write(buf)\n+}\n+\n /// The `Read` trait allows for reading bytes from a source.\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n@@ -528,14 +550,11 @@ pub trait Read {\n     /// written to possibly being only partially filled. This method must behave\n     /// as a single call to `read` with the buffers concatenated would.\n     ///\n-    /// The default implementation simply passes the first nonempty buffer to\n-    /// `read`.\n+    /// The default implementation calls `read` with either the first nonempty\n+    /// buffer provided, or an empty one if none exists.\n     #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n-        match bufs.iter_mut().find(|b| !b.is_empty()) {\n-            Some(buf) => self.read(buf),\n-            None => Ok(0),\n-        }\n+        default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     /// Determines if this `Read`er can work with buffers of uninitialized\n@@ -1107,14 +1126,11 @@ pub trait Write {\n     /// read from possibly being only partially consumed. This method must\n     /// behave as a call to `write` with the buffers concatenated would.\n     ///\n-    /// The default implementation simply passes the first nonempty buffer to\n-    /// `write`.\n+    /// The default implementation calls `write` with either the first nonempty\n+    /// buffer provided, or an empty one if none exists.\n     #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n-        match bufs.iter().find(|b| !b.is_empty()) {\n-            Some(buf) => self.write(buf),\n-            None => Ok(0),\n-        }\n+        default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     /// Flush this output stream, ensuring that all intermediately buffered"}, {"sha": "3f2f6166a791a4433c316c1e9d90d9d25f44b7dd", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=ab8e1d264e6722169d25d3f52ac2e8de172e205d", "patch": "@@ -35,21 +35,15 @@ impl TcpStream {\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        match bufs.iter_mut().find(|b| !b.is_empty()) {\n-            Some(buf) => self.read(buf),\n-            None => Ok(0),\n-        }\n+        io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> Result<usize> {\n         self.0.write(buf)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        match bufs.iter().find(|b| !b.is_empty()) {\n-            Some(buf) => self.write(buf),\n-            None => Ok(0),\n-        }\n+        io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     pub fn take_error(&self) -> Result<Option<Error>> {"}, {"sha": "6021020e6f03c56b724214c9e50e4e3f2fd07265", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e1d264e6722169d25d3f52ac2e8de172e205d/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=ab8e1d264e6722169d25d3f52ac2e8de172e205d", "patch": "@@ -104,21 +104,15 @@ impl TcpStream {\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        match bufs.iter_mut().find(|b| !b.is_empty()) {\n-            Some(buf) => self.read(buf),\n-            None => Ok(0),\n-        }\n+        io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        match bufs.iter().find(|b| !b.is_empty()) {\n-            Some(buf) => self.write(buf),\n-            None => Ok(0),\n-        }\n+        io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {"}]}