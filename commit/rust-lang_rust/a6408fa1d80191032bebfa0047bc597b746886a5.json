{"sha": "a6408fa1d80191032bebfa0047bc597b746886a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDA4ZmExZDgwMTkxMDMyYmViZmEwMDQ3YmM1OTdiNzQ2ODg2YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T11:05:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T11:05:30Z"}, "message": "auto merge of #20942 : nagisa/rust/shrl-impls, r=nikomatsakis\n\nThis is only relevant to the code that uses generics such as\r\n\r\n    fn magic<T: Shl>(a: T) { a << 10u8; }\r\n\r\nr? @nikomatsakis", "tree": {"sha": "8cd568a490644ead95d16160dad26547085f4684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd568a490644ead95d16160dad26547085f4684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6408fa1d80191032bebfa0047bc597b746886a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6408fa1d80191032bebfa0047bc597b746886a5", "html_url": "https://github.com/rust-lang/rust/commit/a6408fa1d80191032bebfa0047bc597b746886a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6408fa1d80191032bebfa0047bc597b746886a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21a6da340fd958de370d2b83c0f17fd8fa51f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a6da340fd958de370d2b83c0f17fd8fa51f89", "html_url": "https://github.com/rust-lang/rust/commit/b21a6da340fd958de370d2b83c0f17fd8fa51f89"}, {"sha": "348d833187a2cf90b0d39f5fe1f0ce9564036e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/348d833187a2cf90b0d39f5fe1f0ce9564036e68", "html_url": "https://github.com/rust-lang/rust/commit/348d833187a2cf90b0d39f5fe1f0ce9564036e68"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "e7eb307689fbe88bd670e380da13d28a8ac728c1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a6408fa1d80191032bebfa0047bc597b746886a5/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6408fa1d80191032bebfa0047bc597b746886a5/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a6408fa1d80191032bebfa0047bc597b746886a5", "patch": "@@ -706,20 +706,45 @@ pub trait Shl<RHS> {\n }\n \n macro_rules! shl_impl {\n-    ($($t:ty)*) => ($(\n+    ($t:ty, $f:ty) => (\n         #[stable]\n-        impl Shl<uint> for $t {\n+        impl Shl<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n-            fn shl(self, other: uint) -> $t {\n+            fn shl(self, other: $f) -> $t {\n                 self << other\n             }\n         }\n+    )\n+}\n+\n+// SNAP 9e4e524e0\n+#[cfg(not(stage0))]\n+macro_rules! shl_impl_all {\n+    ($($t:ty)*) => ($(\n+        shl_impl! { $t, u8 }\n+        shl_impl! { $t, u16 }\n+        shl_impl! { $t, u32 }\n+        shl_impl! { $t, u64 }\n+        shl_impl! { $t, usize }\n+\n+        shl_impl! { $t, i8 }\n+        shl_impl! { $t, i16 }\n+        shl_impl! { $t, i32 }\n+        shl_impl! { $t, i64 }\n+        shl_impl! { $t, isize }\n     )*)\n }\n \n-shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n+#[cfg(stage0)]\n+macro_rules! shl_impl_all {\n+    ($($t:ty)*) => ($(\n+        shl_impl! { $t, usize }\n+    )*)\n+}\n+\n+shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Shr` trait is used to specify the functionality of `>>`.\n ///\n@@ -761,17 +786,44 @@ pub trait Shr<RHS> {\n }\n \n macro_rules! shr_impl {\n-    ($($t:ty)*) => ($(\n-        impl Shr<uint> for $t {\n+    ($t:ty, $f:ty) => (\n+        impl Shr<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n-            fn shr(self, other: uint) -> $t { self >> other }\n+            fn shr(self, other: $f) -> $t {\n+                self >> other\n+            }\n         }\n+    )\n+}\n+\n+// SNAP 9e4e524e0\n+#[cfg(not(stage0))]\n+macro_rules! shr_impl_all {\n+    ($($t:ty)*) => ($(\n+        shr_impl! { $t, u8 }\n+        shr_impl! { $t, u16 }\n+        shr_impl! { $t, u32 }\n+        shr_impl! { $t, u64 }\n+        shr_impl! { $t, usize }\n+\n+        shr_impl! { $t, i8 }\n+        shr_impl! { $t, i16 }\n+        shr_impl! { $t, i32 }\n+        shr_impl! { $t, i64 }\n+        shr_impl! { $t, isize }\n+    )*)\n+}\n+\n+#[cfg(stage0)]\n+macro_rules! shr_impl_all {\n+    ($($t:ty)*) => ($(\n+        shr_impl! { $t, usize }\n     )*)\n }\n \n-shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n+shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `arr[idx]` when used in an immutable context."}]}