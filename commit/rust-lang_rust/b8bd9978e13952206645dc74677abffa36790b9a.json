{"sha": "b8bd9978e13952206645dc74677abffa36790b9a", "node_id": "C_kwDOAAsO6NoAKGI4YmQ5OTc4ZTEzOTUyMjA2NjQ1ZGM3NDY3N2FiZmZhMzY3OTBiOWE", "commit": {"author": {"name": "Dario Nieuwenhuis", "email": "dirbaio@dirbaio.net", "date": "2022-02-21T22:27:29Z"}, "committer": {"name": "Dario Nieuwenhuis", "email": "dirbaio@dirbaio.net", "date": "2022-02-21T23:16:56Z"}, "message": "chalk/db: use correct debrujin index when replacing opaque type.", "tree": {"sha": "b1875dda3a3b8254cfb816434c60fe20a79f29f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1875dda3a3b8254cfb816434c60fe20a79f29f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8bd9978e13952206645dc74677abffa36790b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd9978e13952206645dc74677abffa36790b9a", "html_url": "https://github.com/rust-lang/rust/commit/b8bd9978e13952206645dc74677abffa36790b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd9978e13952206645dc74677abffa36790b9a/comments", "author": {"login": "Dirbaio", "id": 1247578, "node_id": "MDQ6VXNlcjEyNDc1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1247578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dirbaio", "html_url": "https://github.com/Dirbaio", "followers_url": "https://api.github.com/users/Dirbaio/followers", "following_url": "https://api.github.com/users/Dirbaio/following{/other_user}", "gists_url": "https://api.github.com/users/Dirbaio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dirbaio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dirbaio/subscriptions", "organizations_url": "https://api.github.com/users/Dirbaio/orgs", "repos_url": "https://api.github.com/users/Dirbaio/repos", "events_url": "https://api.github.com/users/Dirbaio/events{/privacy}", "received_events_url": "https://api.github.com/users/Dirbaio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dirbaio", "id": 1247578, "node_id": "MDQ6VXNlcjEyNDc1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1247578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dirbaio", "html_url": "https://github.com/Dirbaio", "followers_url": "https://api.github.com/users/Dirbaio/followers", "following_url": "https://api.github.com/users/Dirbaio/following{/other_user}", "gists_url": "https://api.github.com/users/Dirbaio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dirbaio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dirbaio/subscriptions", "organizations_url": "https://api.github.com/users/Dirbaio/orgs", "repos_url": "https://api.github.com/users/Dirbaio/repos", "events_url": "https://api.github.com/users/Dirbaio/events{/privacy}", "received_events_url": "https://api.github.com/users/Dirbaio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f5c7ba60808bc48f4506acf40c1dabc1d07851", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f5c7ba60808bc48f4506acf40c1dabc1d07851", "html_url": "https://github.com/rust-lang/rust/commit/c6f5c7ba60808bc48f4506acf40c1dabc1d07851"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "47b1ee04e777fabb649564c68243fe66e5f20465", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b8bd9978e13952206645dc74677abffa36790b9a/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bd9978e13952206645dc74677abffa36790b9a/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=b8bd9978e13952206645dc74677abffa36790b9a", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, AssocItemContainer, AssocKind, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast::ast;\n use rustc_attr as attr;\n@@ -482,21 +482,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 .iter()\n                 .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n                 .map(|bound| {\n-                    bound.fold_with(&mut ty::fold::BottomUpFolder {\n+                    bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n-                        ty_op: |ty| {\n-                            if let ty::Opaque(def_id, substs) = *ty.kind() {\n-                                if def_id == opaque_ty_id.0 && substs == identity_substs {\n-                                    return self.interner.tcx.mk_ty(ty::Bound(\n-                                        ty::INNERMOST,\n-                                        ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n-                                    ));\n-                                }\n-                            }\n-                            ty\n-                        },\n-                        lt_op: |lt| lt,\n-                        ct_op: |ct| ct,\n+                        opaque_ty_id,\n+                        identity_substs,\n+                        binder_index: ty::INNERMOST,\n                     })\n                 })\n                 .filter_map(|bound| {\n@@ -739,3 +729,38 @@ fn binders_for<'tcx>(\n         }),\n     )\n }\n+\n+struct ReplaceOpaqueTyFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n+    identity_substs: SubstsRef<'tcx>,\n+    binder_index: ty::DebruijnIndex,\n+}\n+\n+impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n+        self.binder_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.binder_index.shift_out(1);\n+        t\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if let ty::Opaque(def_id, substs) = *ty.kind() {\n+            if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n+                return self.tcx.mk_ty(ty::Bound(\n+                    self.binder_index,\n+                    ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n+                ));\n+            }\n+        }\n+        ty\n+    }\n+}"}]}