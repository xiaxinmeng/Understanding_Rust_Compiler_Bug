{"sha": "4014b17d86e058d684a9943ffab680b2d0ddb9ea", "node_id": "C_kwDOAAsO6NoAKDQwMTRiMTdkODZlMDU4ZDY4NGE5OTQzZmZhYjY4MGIyZDBkZGI5ZWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-18T09:02:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-18T09:02:09Z"}, "message": "Merge from rustc", "tree": {"sha": "5b60dbda60d880c87f8defec5d0070c11895f945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b60dbda60d880c87f8defec5d0070c11895f945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4014b17d86e058d684a9943ffab680b2d0ddb9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4014b17d86e058d684a9943ffab680b2d0ddb9ea", "html_url": "https://github.com/rust-lang/rust/commit/4014b17d86e058d684a9943ffab680b2d0ddb9ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4014b17d86e058d684a9943ffab680b2d0ddb9ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2", "html_url": "https://github.com/rust-lang/rust/commit/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2"}, {"sha": "f16acbeef63cee81026013f6f8ffd538a6e04e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16acbeef63cee81026013f6f8ffd538a6e04e66", "html_url": "https://github.com/rust-lang/rust/commit/f16acbeef63cee81026013f6f8ffd538a6e04e66"}], "stats": {"total": 3382, "additions": 2151, "deletions": 1231}, "files": [{"sha": "85266a17550ad45740e556e4683b12021fffbcea", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1481,7 +1481,7 @@ and related tools.\n [is_power_of_two_usize]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroUsize.html#method.is_power_of_two\n [stdarch/1266]: https://github.com/rust-lang/stdarch/pull/1266\n \n-Version 1.58.1 (2022-01-19)\n+Version 1.58.1 (2022-01-20)\n ===========================\n \n * Fix race condition in `std::fs::remove_dir_all` ([CVE-2022-21658])"}, {"sha": "2c8e6f99c6739a1787ecc43d6527b7c215852fff", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -27,3 +27,26 @@ pub fn expand_deriving_copy(\n \n     trait_def.expand(cx, mitem, item, push);\n }\n+\n+pub fn expand_deriving_const_param_ty(\n+    cx: &mut ExtCtxt<'_>,\n+    span: Span,\n+    mitem: &MetaItem,\n+    item: &Annotatable,\n+    push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n+) {\n+    let trait_def = TraitDef {\n+        span,\n+        path: path_std!(marker::ConstParamTy),\n+        skip_path_as_bound: false,\n+        needs_copy_as_bound_if_packed: false,\n+        additional_bounds: Vec::new(),\n+        supports_unions: false,\n+        methods: Vec::new(),\n+        associated_types: Vec::new(),\n+        is_const,\n+    };\n+\n+    trait_def.expand(cx, mitem, item, push);\n+}"}, {"sha": "ebf1448f55c9985818089ee8dd9e71a31d7781dd", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -115,6 +115,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     register_derive! {\n         Clone: clone::expand_deriving_clone,\n         Copy: bounds::expand_deriving_copy,\n+        ConstParamTy: bounds::expand_deriving_const_param_ty,\n         Debug: debug::expand_deriving_debug,\n         Default: default::expand_deriving_default,\n         Eq: eq::expand_deriving_eq,"}, {"sha": "25fd5ca3ae8bc3757b2397df0f51eaa89abdce5a", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -966,11 +966,7 @@ fn codegen_panic_inner<'tcx>(\n     args: &[Value],\n     span: Span,\n ) {\n-    let def_id = fx\n-        .tcx\n-        .lang_items()\n-        .require(lang_item)\n-        .unwrap_or_else(|e| fx.tcx.sess.span_fatal(span, e.to_string()));\n+    let def_id = fx.tcx.require_lang_item(lang_item, Some(span));\n \n     let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n     let symbol_name = fx.tcx.symbol_name(instance).name;"}, {"sha": "604f68eb6a47e06735ba1d2cedf1426332023564", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -25,7 +25,6 @@ use std::fs::File;\n use std::io;\n use std::iter;\n use std::path::Path;\n-use std::ptr;\n use std::slice;\n use std::sync::Arc;\n \n@@ -709,17 +708,6 @@ pub unsafe fn optimize_thin_module(\n         let llmod = module.module_llvm.llmod();\n         save_temp_bitcode(cgcx, &module, \"thin-lto-input\");\n \n-        // Before we do much else find the \"main\" `DICompileUnit` that we'll be\n-        // using below. If we find more than one though then rustc has changed\n-        // in a way we're not ready for, so generate an ICE by returning\n-        // an error.\n-        let mut cu1 = ptr::null_mut();\n-        let mut cu2 = ptr::null_mut();\n-        llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n-        if !cu2.is_null() {\n-            return Err(write::llvm_err(&diag_handler, LlvmError::MultipleSourceDiCompileUnit));\n-        }\n-\n         // Up next comes the per-module local analyses that we do for Thin LTO.\n         // Each of these functions is basically copied from the LLVM\n         // implementation and then tailored to suit this implementation. Ideally\n@@ -766,43 +754,6 @@ pub unsafe fn optimize_thin_module(\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-import\");\n         }\n \n-        // Ok now this is a bit unfortunate. This is also something you won't\n-        // find upstream in LLVM's ThinLTO passes! This is a hack for now to\n-        // work around bugs in LLVM.\n-        //\n-        // First discovered in #45511 it was found that as part of ThinLTO\n-        // importing passes LLVM will import `DICompileUnit` metadata\n-        // information across modules. This means that we'll be working with one\n-        // LLVM module that has multiple `DICompileUnit` instances in it (a\n-        // bunch of `llvm.dbg.cu` members). Unfortunately there's a number of\n-        // bugs in LLVM's backend which generates invalid DWARF in a situation\n-        // like this:\n-        //\n-        //  https://bugs.llvm.org/show_bug.cgi?id=35212\n-        //  https://bugs.llvm.org/show_bug.cgi?id=35562\n-        //\n-        // While the first bug there is fixed the second ended up causing #46346\n-        // which was basically a resurgence of #45511 after LLVM's bug 35212 was\n-        // fixed.\n-        //\n-        // This function below is a huge hack around this problem. The function\n-        // below is defined in `PassWrapper.cpp` and will basically \"merge\"\n-        // all `DICompileUnit` instances in a module. Basically it'll take all\n-        // the objects, rewrite all pointers of `DISubprogram` to point to the\n-        // first `DICompileUnit`, and then delete all the other units.\n-        //\n-        // This is probably mangling to the debug info slightly (but hopefully\n-        // not too much) but for now at least gets LLVM to emit valid DWARF (or\n-        // so it appears). Hopefully we can remove this once upstream bugs are\n-        // fixed in LLVM.\n-        {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_thin_lto_patch_debuginfo\", thin_module.name());\n-            llvm::LLVMRustThinLTOPatchDICompileUnit(llmod, cu1);\n-            save_temp_bitcode(cgcx, &module, \"thin-lto-after-patch\");\n-        }\n-\n         // Alright now that we've done everything related to the ThinLTO\n         // analysis it's time to run some optimizations! Here we use the same\n         // `run_pass_manager` as the \"fat\" LTO above except that we tell it to"}, {"sha": "de93a64c0d6f5bfeb1afaa4eded3e8226e8e0ca9", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2484,12 +2484,6 @@ extern \"C\" {\n         len: usize,\n         out_len: &mut usize,\n     ) -> *const u8;\n-    pub fn LLVMRustThinLTOGetDICompileUnit(\n-        M: &Module,\n-        CU1: &mut *mut c_void,\n-        CU2: &mut *mut c_void,\n-    );\n-    pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &Module) -> &mut Linker<'_>;\n     pub fn LLVMRustLinkerAdd("}, {"sha": "8bf84772f0869024be1f34732579633e97d105ac", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -14,8 +14,7 @@ use snap::write::FrameEncoder;\n \n use object::elf::NT_GNU_PROPERTY_TYPE_0;\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owned_slice::try_slice_owned;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_data_structures::owned_slice::{try_slice_owned, OwnedSlice};\n use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n@@ -39,7 +38,7 @@ pub struct DefaultMetadataLoader;\n fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n+) -> Result<OwnedSlice, String> {\n     let file =\n         File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n \n@@ -49,7 +48,7 @@ fn load_metadata_with(\n }\n \n impl MetadataLoader for DefaultMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| {\n             let archive = object::read::archive::ArchiveFile::parse(&*data)\n                 .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n@@ -69,7 +68,7 @@ impl MetadataLoader for DefaultMetadataLoader {\n         })\n     }\n \n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| search_for_section(path, data, \".rustc\"))\n     }\n }"}, {"sha": "d83bfc74082f6c9764db6c435e93fd24263d16bf", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,10 +1,13 @@\n+use std::any::Any;\n+\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{DynSend, DynSync};\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -20,11 +23,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::spec::Target;\n \n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-use rustc_data_structures::sync::{DynSend, DynSync};\n-use std::any::Any;\n-\n pub trait BackendTypes {\n     type Value: CodegenObject;\n     type Function: CodegenObject;"}, {"sha": "c591ff75ab878db7fdd9d7a81177d65ead33f2c6", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -3,7 +3,8 @@ use std::fmt;\n \n use rustc_errors::Diagnostic;\n use rustc_middle::mir::AssertKind;\n-use rustc_middle::ty::{layout::LayoutError, query::TyCtxtAt, ConstInt};\n+use rustc_middle::query::TyCtxtAt;\n+use rustc_middle::ty::{layout::LayoutError, ConstInt};\n use rustc_span::{Span, Symbol};\n \n use super::InterpCx;\n@@ -169,14 +170,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // See <https://github.com/rust-lang/rust/pull/63152>.\n                 let mut err = struct_error(tcx, &self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n             _ => {\n                 // Report as hard error.\n                 let mut err = struct_error(tcx, message);\n                 err.span_label(self.span, self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n         }\n     }"}, {"sha": "58b5755af07f24de39b1b387f3faf24f8b7a950c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -382,7 +382,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(guar));\n+                    throw_inval!(AlreadyReported(guar.into()));\n                 } else {\n                     // `find_mir_or_eval_fn` checks that this is a const fn before even calling us,\n                     // so this should be unreachable."}, {"sha": "040eba10eb4f708e543a4845960e7e8e5f387897", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,14 +7,13 @@ use either::{Either, Left, Right};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{ErrorHandled, InterpError};\n+use rustc_middle::mir::interpret::{ErrorHandled, InterpError, ReportedErrorInfo};\n+use rustc_middle::query::TyCtxtAt;\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n };\n-use rustc_middle::ty::{\n-    self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n-};\n+use rustc_middle::ty::{self, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_session::Limit;\n use rustc_span::Span;\n@@ -470,7 +469,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         if let Some(err) = body.tainted_by_errors {\n-            throw_inval!(AlreadyReported(err));\n+            throw_inval!(AlreadyReported(ReportedErrorInfo::tainted_by_errors(err)));\n         }\n         Ok(body)\n     }\n@@ -517,7 +516,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ok(None) => throw_inval!(TooGeneric),\n \n             // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.\n-            Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),\n+            Err(error_reported) => throw_inval!(AlreadyReported(error_reported.into())),\n         }\n     }\n \n@@ -905,7 +904,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         query(self.tcx.at(span.unwrap_or_else(|| self.cur_span()))).map_err(|err| {\n             match err {\n                 ErrorHandled::Reported(err) => {\n-                    if let Some(span) = span {\n+                    if !err.is_tainted_by_errors() && let Some(span) = span {\n                         // To make it easier to figure out where this error comes from, also add a note at the current location.\n                         self.tcx.sess.span_note_without_error(span, \"erroneous constant used\");\n                     }"}, {"sha": "e30af165501e5f073c6e48e24df5790ec16de67e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -595,7 +595,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME(generic_const_exprs): `ConstKind::Expr` should be able to be evaluated\n             ty::ConstKind::Expr(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(reported) => {\n-                throw_inval!(AlreadyReported(reported))\n+                throw_inval!(AlreadyReported(reported.into()))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;"}, {"sha": "cbb3047d88412c6b682175ea6f13449faf40022c", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,13 +1,14 @@\n use std::{borrow::Borrow, ops::Deref};\n \n+use crate::sync::Lrc;\n // Use our fake Send/Sync traits when on not parallel compiler,\n // so that `OwnedSlice` only implements/requires Send/Sync\n // for parallel compiler builds.\n use crate::sync::{Send, Sync};\n \n /// An owned slice.\n ///\n-/// This is similar to `Box<[u8]>` but allows slicing and using anything as the\n+/// This is similar to `Lrc<[u8]>` but allows slicing and using anything as the\n /// backing buffer.\n ///\n /// See [`slice_owned`] for `OwnedSlice` construction and examples.\n@@ -16,6 +17,7 @@ use crate::sync::{Send, Sync};\n ///\n /// This is essentially a replacement for `owning_ref` which is a lot simpler\n /// and even sound! \ud83c\udf38\n+#[derive(Clone)]\n pub struct OwnedSlice {\n     /// This is conceptually a `&'self.owner [u8]`.\n     bytes: *const [u8],\n@@ -31,7 +33,7 @@ pub struct OwnedSlice {\n     //       \\/\n     //      \u2282(\u00b4\uff65\u25e1\uff65\u2282 )\u2218\u02da\u02f3\u00b0 (I am the phantom remnant of #97770)\n     #[expect(dead_code)]\n-    owner: Box<dyn Send + Sync>,\n+    owner: Lrc<dyn Send + Sync>,\n }\n \n /// Makes an [`OwnedSlice`] out of an `owner` and a `slicer` function.\n@@ -72,23 +74,50 @@ where\n     O: Send + Sync + 'static,\n     F: FnOnce(&O) -> Result<&[u8], E>,\n {\n-    // We box the owner of the bytes, so it doesn't move.\n+    // We wrap the owner of the bytes in, so it doesn't move.\n     //\n     // Since the owner does not move and we don't access it in any way\n-    // before drop, there is nothing that can invalidate the bytes pointer.\n+    // before dropping, there is nothing that can invalidate the bytes pointer.\n     //\n     // Thus, \"extending\" the lifetime of the reference returned from `F` is fine.\n     // We pretend that we pass it a reference that lives as long as the returned slice.\n     //\n     // N.B. the HRTB on the `slicer` is important \u2014 without it the caller could provide\n     // a short lived slice, unrelated to the owner.\n \n-    let owner = Box::new(owner);\n+    let owner = Lrc::new(owner);\n     let bytes = slicer(&*owner)?;\n \n     Ok(OwnedSlice { bytes, owner })\n }\n \n+impl OwnedSlice {\n+    /// Slice this slice by `slicer`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # use rustc_data_structures::owned_slice::{OwnedSlice, slice_owned};\n+    /// let vec = vec![1, 2, 3, 4];\n+    ///\n+    /// // Identical to slicing via `&v[1..3]` but produces an owned slice\n+    /// let slice: OwnedSlice = slice_owned(vec, |v| &v[..]);\n+    /// assert_eq!(&*slice, [1, 2, 3, 4]);\n+    ///\n+    /// let slice = slice.slice(|slice| &slice[1..][..2]);\n+    /// assert_eq!(&*slice, [2, 3]);\n+    /// ```\n+    ///\n+    pub fn slice(self, slicer: impl FnOnce(&[u8]) -> &[u8]) -> OwnedSlice {\n+        // This is basically identical to `try_slice_owned`,\n+        // `slicer` can only return slices of its argument or some static data,\n+        // both of which are valid while `owner` is alive.\n+\n+        let bytes = slicer(&self);\n+        OwnedSlice { bytes, ..self }\n+    }\n+}\n+\n impl Deref for OwnedSlice {\n     type Target = [u8];\n \n@@ -108,11 +137,11 @@ impl Borrow<[u8]> for OwnedSlice {\n     }\n }\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Send`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Send`\n #[cfg(parallel_compiler)]\n unsafe impl Send for OwnedSlice {}\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Sync`\n #[cfg(parallel_compiler)]\n unsafe impl Sync for OwnedSlice {}\n "}, {"sha": "1eb5378cd1ad8058d24557c196f999a3a053b7df", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -26,7 +26,7 @@ fn static_storage() {\n }\n \n #[test]\n-fn slice_the_slice() {\n+fn slice_owned_the_slice() {\n     let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice);\n     let slice = slice_owned(slice, |s| &s[1..][..4]);\n     let slice = slice_owned(slice, |s| s);\n@@ -35,6 +35,16 @@ fn slice_the_slice() {\n     assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n }\n \n+#[test]\n+fn slice_the_slice() {\n+    let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice)\n+        .slice(|s| &s[1..][..4])\n+        .slice(|s| s)\n+        .slice(|s| &s[1..]);\n+\n+    assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n+}\n+\n #[test]\n fn try_and_fail() {\n     let res = try_slice_owned(vec![0], |v| v.get(12..).ok_or(()));"}, {"sha": "6c3197d8ec2c5dd70327493f145d18b0da1b502a", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -40,7 +40,6 @@\n //! [^2] `MTLockRef` is a typedef.\n \n pub use crate::marker::*;\n-use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n@@ -92,6 +91,7 @@ mod mode {\n }\n \n pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n+\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}\n@@ -244,8 +244,6 @@ cfg_if! {\n             r\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n         pub use std::cell::Ref as ReadGuard;\n@@ -517,8 +515,6 @@ cfg_if! {\n             }\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         /// This makes locks panic if they are already held.\n         /// It is only useful when you are running in a single thread\n         const ERROR_CHECKING: bool = false;"}, {"sha": "0f3604736199830b99e05585cc186b322ba416e1", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -478,6 +478,7 @@ pub enum StashKey {\n     /// FRU syntax\n     MaybeFruTypo,\n     CallAssocMethod,\n+    TraitMissingMethod,\n }\n \n fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {"}, {"sha": "57e55752027c7a67e73f0046827395587e0f79a9", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -338,7 +338,7 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n     /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n-    (active, cfi_encoding, \"1.69.0\", Some(89653), None),\n+    (active, cfi_encoding, \"CURRENT_RUSTC_VERSION\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "e593ed1044a5818e1f4cdb7765bd9bd75cb393d9", "filename": "compiler/rustc_hir/src/errors.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs?ref=d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2", "patch": "@@ -1,10 +0,0 @@\n-use crate::LangItem;\n-\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable)]\n-pub struct LangItemError(pub LangItem);\n-\n-impl ToString for LangItemError {\n-    fn to_string(&self) -> String {\n-        format!(\"requires `{}` lang_item\", self.0.name())\n-    }\n-}"}, {"sha": "4b3bc816b9531366afb44348148f17bc3ca71602", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -8,7 +8,6 @@\n //! * Functions called by the compiler itself.\n \n use crate::def_id::DefId;\n-use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n@@ -42,13 +41,6 @@ impl LanguageItems {\n         self.items[item as usize] = Some(def_id);\n     }\n \n-    /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n-    /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-    /// returns an error encapsulating the `LangItem`.\n-    pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n-        self.get(it).ok_or_else(|| LangItemError(it))\n-    }\n-\n     pub fn iter(&self) -> impl Iterator<Item = (LangItem, DefId)> + '_ {\n         self.items\n             .iter()"}, {"sha": "616de57dc6372109d3b03ae0c9c74c59eb634784", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -30,7 +30,6 @@ pub mod def;\n pub mod def_path_hash_map;\n pub mod definitions;\n pub mod diagnostic_items;\n-pub mod errors;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "cf082f1ffaa5f806ce66bae074ee245b3e0da688", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -19,7 +19,7 @@ use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n-    MultiSpan,\n+    MultiSpan, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n@@ -38,7 +38,6 @@ use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt}\n use rustc_middle::ty::{DynKind, ToPredicate};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edit_distance::find_best_match_for_name;\n-use rustc_span::edition::Edition;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -3718,7 +3717,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ));\n             }\n \n-            if self_ty.span.edition() >= Edition::Edition2021 {\n+            if self_ty.span.edition().rust_2021() {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";\n                 let mut diag =\n@@ -3732,7 +3731,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 // check if the impl trait that we are considering is a impl of a local trait\n                 self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n-                diag.emit();\n+                diag.stash(self_ty.span, StashKey::TraitMissingMethod);\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 tcx.struct_span_lint_hir("}, {"sha": "d3495d3dbd71ae57703ff4ecb38e645c4c4efff1", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1514,8 +1514,8 @@ fn opaque_type_cycle_error(\n                     }\n                     if tcx.sess.opts.unstable_opts.drop_tracking_mir\n                         && let DefKind::Generator = tcx.def_kind(closure_def_id)\n+                        && let Some(generator_layout) = tcx.mir_generator_witnesses(closure_def_id)\n                     {\n-                        let generator_layout = tcx.mir_generator_witnesses(closure_def_id);\n                         for interior_ty in &generator_layout.field_tys {\n                             label_match(interior_ty.ty, interior_ty.source_info.span);\n                         }"}, {"sha": "a98d8e17153d851ae5f4edb9b2bbb7fa5163088c", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -298,9 +298,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n \n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n-    let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n-        tcx.sess.fatal(format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n-    });\n+    let unsize_trait = tcx.require_lang_item(LangItem::Unsize, Some(span));\n \n     let source = tcx.type_of(impl_did).subst_identity();\n     let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();"}, {"sha": "4a669e3f8b8a44f725e151e61659e27535b1547d", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -79,3 +79,14 @@ hir_typeck_arg_mismatch_indeterminate = argument type mismatch was detected, but\n hir_typeck_suggest_boxing_note = for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`\n+\n+hir_typeck_no_associated_item = no {$item_kind} named `{$item_name}` found for {$ty_prefix} `{$ty_str}`{$trait_missing_method ->\n+    [true] {\"\"}\n+    *[other] {\" \"}in the current scope\n+}\n+\n+hir_typeck_candidate_trait_note = `{$trait_name}` defines an item `{$item_name}`{$action_or_ty ->\n+    [NONE] {\"\"}\n+    [implement] , perhaps you need to implement it\n+    *[other] , perhaps you need to restrict type parameter `{$action_or_ty}` with it\n+}"}, {"sha": "102a313067fd24f9a3acd46cd66feb1857cd5aa5", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,4 +1,6 @@\n //! Errors emitted by `rustc_hir_typeck`.\n+use std::borrow::Cow;\n+\n use crate::fluent_generated as fluent;\n use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n@@ -295,3 +297,25 @@ pub enum SuggestBoxing {\n         end: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_no_associated_item, code = \"E0599\")]\n+pub struct NoAssociatedItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub item_kind: &'static str,\n+    pub item_name: Ident,\n+    pub ty_prefix: Cow<'static, str>,\n+    pub ty_str: String,\n+    pub trait_missing_method: bool,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(hir_typeck_candidate_trait_note)]\n+pub struct CandidateTraitNote {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_name: String,\n+    pub item_name: Ident,\n+    pub action_or_ty: String,\n+}"}, {"sha": "8ea159bba746ef84b00cc423f6f9b3cfcfdfda5f", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1245,6 +1245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         Some((rcvr, args)),\n                         expected,\n+                        false,\n                     ) {\n                         err.emit();\n                     }"}, {"sha": "039316c74dd4caf45d0f047817e0f64c627b0866", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,7 +4,7 @@ use crate::rvalue_scopes;\n use crate::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy, RawTy};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -853,6 +853,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_name = item_segment.ident;\n         let result = self\n             .resolve_fully_qualified_call(span, item_name, ty.normalized, qself.span, hir_id)\n+            .and_then(|r| {\n+                // lint bare trait if the method is found in the trait\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    diag.emit();\n+                }\n+                Ok(r)\n+            })\n             .or_else(|error| {\n                 let guar = self\n                     .tcx\n@@ -863,17 +870,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Err(guar),\n                 };\n \n+                let trait_missing_method =\n+                    matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait();\n                 // If we have a path like `MyTrait::missing_method`, then don't register\n                 // a WF obligation for `dyn MyTrait` when method lookup fails. Otherwise,\n                 // register a WF obligation so that we can detect any additional\n                 // errors in the self type.\n-                if !(matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait()) {\n+                if !trait_missing_method {\n                     self.register_wf_obligation(\n                         ty.raw.into(),\n                         qself.span,\n                         traits::WellFormed(None),\n                     );\n                 }\n+\n+                // emit or cancel the diagnostic for bare traits\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    if trait_missing_method {\n+                        // cancel the diag for bare traits when meeting `MyTrait::missing_method`\n+                        diag.cancel();\n+                    } else {\n+                        diag.emit();\n+                    }\n+                }\n+\n                 if item_name.name != kw::Empty {\n                     if let Some(mut e) = self.report_method_error(\n                         span,\n@@ -883,10 +903,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         None,\n                         Expectation::NoExpectation,\n+                        trait_missing_method && span.edition().rust_2021(), // emits missing method for trait only after edition 2021\n                     ) {\n                         e.emit();\n                     }\n                 }\n+\n                 result\n             });\n "}, {"sha": "12bc17ca97c7b5eea4260bd05f92038534cb59fd", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 101, "deletions": 61, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2,6 +2,8 @@\n //! found or is otherwise invalid.\n \n use crate::errors;\n+use crate::errors::CandidateTraitNote;\n+use crate::errors::NoAssociatedItem;\n use crate::Expectation;\n use crate::FnCtxt;\n use rustc_ast::ast::Mutability;\n@@ -38,6 +40,7 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n };\n+use std::borrow::Cow;\n \n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n@@ -112,6 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>,\n         args: Option<(&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>])>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n@@ -136,6 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg_span,\n                     &mut no_match_data,\n                     expected,\n+                    trait_missing_method,\n                 );\n             }\n \n@@ -278,6 +283,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sugg_span: Span,\n         no_match_data: &mut NoMatchData<'tcx>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n@@ -323,7 +329,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span = item_name.span;\n \n         // Don't show generic arguments when the method can't be found in any implementation (#81576).\n-        let mut ty_str_reported = ty_str.clone();\n+        let mut ty_str_reported = if trait_missing_method {\n+            ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned()\n+        } else {\n+            ty_str.clone()\n+        };\n+\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {\n             if generics.len() > 0 {\n                 let mut autoderef = self.autoderef(span, rcvr_ty);\n@@ -355,25 +366,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             self.suggest_missing_writer(rcvr_ty, args)\n         } else {\n-            struct_span_err!(\n-                tcx.sess,\n+            tcx.sess.create_err(NoAssociatedItem {\n                 span,\n-                E0599,\n-                \"no {} named `{}` found for {} `{}` in the current scope\",\n                 item_kind,\n                 item_name,\n-                rcvr_ty.prefix_string(self.tcx),\n-                ty_str_reported,\n-            )\n+                ty_prefix: if trait_missing_method {\n+                    // FIXME(mu001999) E0599 maybe not suitable here because it is for types\n+                    Cow::from(\"trait\")\n+                } else {\n+                    rcvr_ty.prefix_string(self.tcx)\n+                },\n+                ty_str: ty_str_reported,\n+                trait_missing_method,\n+            })\n         };\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }\n-        let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+        let mut ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n             short_ty_str\n         } else {\n             ty_str\n         };\n+        if trait_missing_method {\n+            ty_str =\n+                ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned();\n+        }\n+\n         if let Some(file) = ty_file {\n             err.note(format!(\"the full type name has been written to '{}'\", file.display(),));\n         }\n@@ -1067,6 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &static_candidates,\n                 unsatisfied_bounds,\n                 expected.only_has_type(self),\n+                trait_missing_method,\n             );\n         }\n \n@@ -2375,6 +2395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         static_candidates: &[CandidateSource],\n         unsatisfied_bounds: bool,\n         return_type: Option<Ty<'tcx>>,\n+        trait_missing_method: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n         if let (SelfSource::MethodCall(rcvr), false) = (source, unsatisfied_bounds) {\n@@ -2598,11 +2619,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n                 _ => None,\n             };\n-            err.help(if param_type.is_some() {\n-                \"items from traits can only be used if the type parameter is bounded by the trait\"\n-            } else {\n-                \"items from traits can only be used if the trait is implemented and in scope\"\n-            });\n+            if !trait_missing_method {\n+                err.help(if param_type.is_some() {\n+                    \"items from traits can only be used if the type parameter is bounded by the trait\"\n+                } else {\n+                    \"items from traits can only be used if the trait is implemented and in scope\"\n+                });\n+            }\n+\n             let candidates_len = candidates.len();\n             let message = |action| {\n                 format!(\n@@ -2633,47 +2657,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Nothing,\n                             }\n                             let ast_generics = hir.get_generics(id.owner.def_id).unwrap();\n-                            let (sp, mut introducer) = if let Some(span) =\n-                                ast_generics.bounds_span_for_suggestions(def_id)\n-                            {\n-                                (span, Introducer::Plus)\n-                            } else if let Some(colon_span) = param.colon_span {\n-                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n-                            } else {\n-                                (param.span.shrink_to_hi(), Introducer::Colon)\n-                            };\n-                            if matches!(\n-                                param.kind,\n-                                hir::GenericParamKind::Type { synthetic: true, .. },\n-                            ) {\n-                                introducer = Introducer::Plus\n-                            }\n                             let trait_def_ids: FxHashSet<DefId> = ast_generics\n                                 .bounds_for_param(def_id)\n                                 .flat_map(|bp| bp.bounds.iter())\n                                 .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n-                            if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n-                                err.span_suggestions(\n-                                    sp,\n-                                    message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n+                            if candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                return;\n+                            }\n+                            let msg = message(format!(\n+                                \"restrict type parameter `{}` with\",\n+                                param.name.ident(),\n+                            ));\n+                            let bounds_span = ast_generics.bounds_span_for_suggestions(def_id);\n+                            if rcvr_ty.is_ref() && param.is_impl_trait() && bounds_span.is_some() {\n+                                err.multipart_suggestions(\n+                                    msg,\n                                     candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{} {}\",\n-                                            match introducer {\n-                                                Introducer::Plus => \" +\",\n-                                                Introducer::Colon => \":\",\n-                                                Introducer::Nothing => \"\",\n-                                            },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                        )\n+                                        vec![\n+                                            (param.span.shrink_to_lo(), \"(\".to_string()),\n+                                            (\n+                                                bounds_span.unwrap(),\n+                                                format!(\" + {})\", self.tcx.def_path_str(t.def_id)),\n+                                            ),\n+                                        ]\n                                     }),\n                                     Applicability::MaybeIncorrect,\n                                 );\n+                                return;\n                             }\n+\n+                            let (sp, introducer) = if let Some(span) = bounds_span {\n+                                (span, Introducer::Plus)\n+                            } else if let Some(colon_span) = param.colon_span {\n+                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n+                            } else if param.is_impl_trait() {\n+                                (param.span.shrink_to_hi(), Introducer::Plus)\n+                            } else {\n+                                (param.span.shrink_to_hi(), Introducer::Colon)\n+                            };\n+\n+                            err.span_suggestions(\n+                                sp,\n+                                msg,\n+                                candidates.iter().map(|t| {\n+                                    format!(\n+                                        \"{} {}\",\n+                                        match introducer {\n+                                            Introducer::Plus => \" +\",\n+                                            Introducer::Colon => \":\",\n+                                            Introducer::Nothing => \"\",\n+                                        },\n+                                        self.tcx.def_path_str(t.def_id)\n+                                    )\n+                                }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return;\n                         }\n                         Node::Item(hir::Item {\n@@ -2736,27 +2775,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (candidates, Vec::new())\n             };\n \n-            let action = if let Some(param) = param_type {\n-                format!(\"restrict type parameter `{}` with\", param)\n-            } else {\n-                // FIXME: it might only need to be imported into scope, not implemented.\n-                \"implement\".to_string()\n-            };\n             match &potential_candidates[..] {\n                 [] => {}\n                 [trait_info] if trait_info.def_id.is_local() => {\n-                    err.span_note(\n-                        self.tcx.def_span(trait_info.def_id),\n-                        format!(\n-                            \"`{}` defines an item `{}`, perhaps you need to {} it\",\n-                            self.tcx.def_path_str(trait_info.def_id),\n-                            item_name,\n-                            action\n-                        ),\n-                    );\n+                    err.subdiagnostic(CandidateTraitNote {\n+                        span: self.tcx.def_span(trait_info.def_id),\n+                        trait_name: self.tcx.def_path_str(trait_info.def_id),\n+                        item_name,\n+                        action_or_ty: if trait_missing_method {\n+                            \"NONE\".to_string()\n+                        } else {\n+                            param_type.map_or_else(\n+                                || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                                ToString::to_string,\n+                            )\n+                        },\n+                    });\n                 }\n                 trait_infos => {\n-                    let mut msg = message(action);\n+                    let mut msg = message(param_type.map_or_else(\n+                        || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                        |param| format!(\"restrict type parameter `{}` with\", param),\n+                    ));\n                     for (i, trait_info) in trait_infos.iter().enumerate() {\n                         msg.push_str(&format!(\n                             \"\\ncandidate #{}: `{}`\","}, {"sha": "f8329965c4360ca5ebd52599d2cf99a0c882452e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1534,7 +1534,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             if let Some(ct) = tcx.thir_abstract_const(unevaluated.def)? {\n                 let ct = tcx.expand_abstract_consts(ct.subst(tcx, substs));\n                 if let Err(e) = ct.error_reported() {\n-                    return Err(ErrorHandled::Reported(e));\n+                    return Err(ErrorHandled::Reported(e.into()));\n                 } else if ct.has_non_region_infer() || ct.has_non_region_param() {\n                     return Err(ErrorHandled::TooGeneric);\n                 } else {"}, {"sha": "bbf9d9d515d1ff9944012070687f6d3922c7e304", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -691,6 +691,8 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n+    let incremental = dep_graph.is_fully_enabled();\n+\n     sess.time(\"setup_global_ctxt\", || {\n         gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n@@ -705,6 +707,7 @@ pub fn create_global_ctxt<'tcx>(\n                     local_providers,\n                     extern_providers,\n                     query_result_on_disk_cache,\n+                    incremental,\n                 ),\n             )\n         })"}, {"sha": "6601a80920ba0b7dd940f606f40ffc1883f09f68", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -611,7 +611,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n declare_lint! {\n     /// The `missing_copy_implementations` lint detects potentially-forgotten\n-    /// implementations of [`Copy`].\n+    /// implementations of [`Copy`] for public types.\n     ///\n     /// [`Copy`]: https://doc.rust-lang.org/std/marker/trait.Copy.html\n     ///\n@@ -729,7 +729,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n \n declare_lint! {\n     /// The `missing_debug_implementations` lint detects missing\n-    /// implementations of [`fmt::Debug`].\n+    /// implementations of [`fmt::Debug`] for public types.\n     ///\n     /// [`fmt::Debug`]: https://doc.rust-lang.org/std/fmt/trait.Debug.html\n     ///"}, {"sha": "c43a02724773a3065093a9903982308a3eb73f5e", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1463,63 +1463,6 @@ LLVMRustGetBitcodeSliceFromObjectData(const char *data,\n   return BitcodeOrError->getBufferStart();\n }\n \n-// Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n-// the comment in `back/lto.rs` for why this exists.\n-extern \"C\" void\n-LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n-                                DICompileUnit **A,\n-                                DICompileUnit **B) {\n-  Module *M = unwrap(Mod);\n-  DICompileUnit **Cur = A;\n-  DICompileUnit **Next = B;\n-  for (DICompileUnit *CU : M->debug_compile_units()) {\n-    *Cur = CU;\n-    Cur = Next;\n-    Next = nullptr;\n-    if (Cur == nullptr)\n-      break;\n-  }\n-}\n-\n-// Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n-// the comment in `back/lto.rs` for why this exists.\n-extern \"C\" void\n-LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n-  Module *M = unwrap(Mod);\n-\n-  // If the original source module didn't have a `DICompileUnit` then try to\n-  // merge all the existing compile units. If there aren't actually any though\n-  // then there's not much for us to do so return.\n-  if (Unit == nullptr) {\n-    for (DICompileUnit *CU : M->debug_compile_units()) {\n-      Unit = CU;\n-      break;\n-    }\n-    if (Unit == nullptr)\n-      return;\n-  }\n-\n-  // Use LLVM's built-in `DebugInfoFinder` to find a bunch of debuginfo and\n-  // process it recursively. Note that we used to specifically iterate over\n-  // instructions to ensure we feed everything into it, but `processModule`\n-  // started doing this the same way in LLVM 7 (commit d769eb36ab2b8).\n-  DebugInfoFinder Finder;\n-  Finder.processModule(*M);\n-\n-  // After we've found all our debuginfo, rewrite all subprograms to point to\n-  // the same `DICompileUnit`.\n-  for (auto &F : Finder.subprograms()) {\n-    F->replaceUnit(Unit);\n-  }\n-\n-  // Erase any other references to other `DICompileUnit` instances, the verifier\n-  // will later ensure that we don't actually have any other stale references to\n-  // worry about.\n-  auto *MD = M->getNamedMetadata(\"llvm.dbg.cu\");\n-  MD->clearOperands();\n-  MD->addOperand(Unit);\n-}\n-\n // Computes the LTO cache key for the provided 'ModId' in the given 'Data',\n // storing the result in 'KeyOut'.\n // Currently, this cache key is a SHA-1 hash of anything that could affect"}, {"sha": "6c4d121fd0145d52bff6d87c1eb949e15c1b6407", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -220,7 +220,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n@@ -782,7 +781,7 @@ fn get_metadata_section<'p>(\n     if !filename.exists() {\n         return Err(MetadataError::NotPresent(filename));\n     }\n-    let raw_bytes: MetadataRef = match flavor {\n+    let raw_bytes = match flavor {\n         CrateFlavor::Rlib => {\n             loader.get_rlib_metadata(target, filename).map_err(MetadataError::LoadFailure)?\n         }\n@@ -843,7 +842,7 @@ fn get_metadata_section<'p>(\n             slice_owned(mmap, Deref::deref)\n         }\n     };\n-    let blob = MetadataBlob::new(raw_bytes);\n+    let blob = MetadataBlob(raw_bytes);\n     if blob.is_compatible() {\n         Ok(blob)\n     } else {"}, {"sha": "699e1f49ed6ca8cdf8d11e422a60003273eb41f5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,6 +7,7 @@ use crate::rmeta::*;\n use rustc_ast as ast;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n@@ -50,7 +51,7 @@ mod cstore_impl;\n /// A `MetadataBlob` internally is just a reference counted pointer to\n /// the actual data, so cloning it is cheap.\n #[derive(Clone)]\n-pub(crate) struct MetadataBlob(Lrc<MetadataRef>);\n+pub(crate) struct MetadataBlob(pub(crate) OwnedSlice);\n \n impl std::ops::Deref for MetadataBlob {\n     type Target = [u8];\n@@ -660,10 +661,6 @@ impl<'a, 'tcx, I: Idx, T> Decodable<DecodeContext<'a, 'tcx>> for LazyTable<I, T>\n implement_ty_decoder!(DecodeContext<'a, 'tcx>);\n \n impl MetadataBlob {\n-    pub(crate) fn new(metadata_ref: MetadataRef) -> MetadataBlob {\n-        MetadataBlob(Lrc::new(metadata_ref))\n-    }\n-\n     pub(crate) fn is_compatible(&self) -> bool {\n         self.blob().starts_with(METADATA_HEADER)\n     }"}, {"sha": "4f280bb9d80e221114bdac6bb8803fa355f31d9e", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,6 +1,5 @@\n use crate::rmeta::DecodeContext;\n use crate::rmeta::EncodeContext;\n-use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n use rustc_middle::parameterized_over_tcx;\n@@ -47,7 +46,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static>\n     fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefPathHashMapRef<'static> {\n         let len = d.read_usize();\n         let pos = d.position();\n-        let o = slice_owned(d.blob().clone(), |blob| &blob[pos..pos + len]);\n+        let o = d.blob().clone().0.slice(|blob| &blob[pos..pos + len]);\n \n         // Although we already have the data we need via the `OwnedSlice`, we still need\n         // to advance the `DecodeContext`'s position so it's in a valid state after"}, {"sha": "79eb48a1a315547bf2c392b8ff9f9019aa39cd76", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1516,8 +1516,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if encode_opt {\n                 record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n \n-                if tcx.sess.opts.unstable_opts.drop_tracking_mir && let DefKind::Generator = self.tcx.def_kind(def_id) {\n-                    record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- tcx.mir_generator_witnesses(def_id));\n+                if tcx.sess.opts.unstable_opts.drop_tracking_mir\n+                    && let DefKind::Generator = self.tcx.def_kind(def_id)\n+                    && let Some(witnesses) = tcx.mir_generator_witnesses(def_id)\n+                {\n+                    record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- witnesses);\n                 }\n             }\n             if encode_const {"}, {"sha": "987a484049f6c25f5a53d3b9a9fec84499097d56", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,7 +7,6 @@ use table::TableBuilder;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};"}, {"sha": "64d511c261aa9a4952370239f03a927a8df3268d", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -39,5 +39,7 @@ middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute\n \n+middle_requires_lang_item = requires `{$name}` lang_item\n+\n middle_const_not_used_in_type_alias =\n     const parameter `{$ct}` is part of concrete type but not used in parameter list for the `impl Trait` type alias"}, {"sha": "046186d274ca75f9b26ef1562ac2c92178764797", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,5 @@\n use rustc_macros::Diagnostic;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use crate::ty::Ty;\n \n@@ -73,6 +73,14 @@ pub(crate) struct StrictCoherenceNeedsNegativeCoherence {\n     pub attr_span: Option<Span>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(middle_requires_lang_item)]\n+pub(crate) struct RequiresLangItem {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    pub name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(middle_const_not_used_in_type_alias)]\n pub(super) struct ConstNotUsedTraitAlias {"}, {"sha": "22ee2a8c5e55e6af6eaa2d814aa9f927e2d92801", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -95,7 +95,6 @@ pub mod middle;\n pub mod mir;\n pub mod thir;\n pub mod traits;\n-#[macro_use]\n pub mod ty;\n pub mod util;\n mod values;"}, {"sha": "9a633e04ce70d3f7629d64c9b90199e9ed2a62f1", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -18,12 +18,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally aborts compilation.\n     pub fn require_lang_item(self, lang_item: LangItem, span: Option<Span>) -> DefId {\n-        self.lang_items().require(lang_item).unwrap_or_else(|err| {\n-            if let Some(span) = span {\n-                self.sess.span_fatal(span, err.to_string())\n-            } else {\n-                self.sess.fatal(err.to_string())\n-            }\n+        self.lang_items().get(lang_item).unwrap_or_else(|| {\n+            self.sess.emit_fatal(crate::error::RequiresLangItem { span, name: lang_item.name() });\n         })\n     }\n "}, {"sha": "055d8e9a352bc6fe0f0dc1b9354a134cac12e41d", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,7 +1,8 @@\n use super::{AllocId, AllocRange, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n-use crate::ty::{layout, query::TyCtxtAt, tls, Ty, ValTree};\n+use crate::query::TyCtxtAt;\n+use crate::ty::{layout, tls, Ty, ValTree};\n \n use rustc_data_structures::sync::Lock;\n use rustc_errors::{pluralize, struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n@@ -15,15 +16,49 @@ use std::{any::Any, backtrace::Backtrace, fmt};\n pub enum ErrorHandled {\n     /// Already reported an error for this evaluation, and the compilation is\n     /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n-    Reported(ErrorGuaranteed),\n+    Reported(ReportedErrorInfo),\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n impl From<ErrorGuaranteed> for ErrorHandled {\n-    fn from(err: ErrorGuaranteed) -> ErrorHandled {\n-        ErrorHandled::Reported(err)\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ErrorHandled {\n+        ErrorHandled::Reported(error.into())\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub struct ReportedErrorInfo {\n+    error: ErrorGuaranteed,\n+    is_tainted_by_errors: bool,\n+}\n+\n+impl ReportedErrorInfo {\n+    #[inline]\n+    pub fn tainted_by_errors(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: true, error }\n+    }\n+\n+    /// Returns true if evaluation failed because MIR was tainted by errors.\n+    #[inline]\n+    pub fn is_tainted_by_errors(self) -> bool {\n+        self.is_tainted_by_errors\n+    }\n+}\n+\n+impl From<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: false, error }\n+    }\n+}\n+\n+impl Into<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn into(self) -> ErrorGuaranteed {\n+        self.error\n     }\n }\n \n@@ -89,7 +124,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n \n impl From<ErrorGuaranteed> for InterpErrorInfo<'_> {\n     fn from(err: ErrorGuaranteed) -> Self {\n-        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n+        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err.into())).into()\n     }\n }\n \n@@ -125,7 +160,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n     /// Abort in case errors are already reported.\n-    AlreadyReported(ErrorGuaranteed),\n+    AlreadyReported(ReportedErrorInfo),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An error occurred during FnAbi computation: the passed --target lacks FFI support\n@@ -144,7 +179,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         use InvalidProgramInfo::*;\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n-            AlreadyReported(ErrorGuaranteed { .. }) => {\n+            AlreadyReported(_) => {\n                 write!(\n                     f,\n                     \"an error has already been reported elsewhere (this should not usually be printed)\""}, {"sha": "3620385fab13494b6d4485d392fe457542b06682", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -120,8 +120,8 @@ use crate::ty::{self, Instance, Ty, TyCtxt};\n pub use self::error::{\n     struct_error, CheckInAllocMsg, ErrorHandled, EvalToAllocationRawResult, EvalToConstValueResult,\n     EvalToValTreeResult, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo,\n-    MachineStopType, ResourceExhaustionInfo, ScalarSizeMismatch, UndefinedBehaviorInfo,\n-    UninitBytesAccess, UnsupportedOpInfo,\n+    MachineStopType, ReportedErrorInfo, ResourceExhaustionInfo, ScalarSizeMismatch,\n+    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar};"}, {"sha": "f53dc8cb0ec134ff7a3b6b026068ef8f0177f713", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,9 +1,10 @@\n use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId};\n \n use crate::mir;\n+use crate::query::{TyCtxtAt, TyCtxtEnsure};\n use crate::ty::subst::InternalSubsts;\n use crate::ty::visit::TypeVisitableExt;\n-use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n+use crate::ty::{self, TyCtxt};\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint;\n@@ -61,7 +62,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.const_eval_global_id(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n \n@@ -110,7 +111,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 })\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n "}, {"sha": "1da94dd79179c16789b1e20de3b055adbf15d588", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2342,7 +2342,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric) => self,\n-                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar)),\n+                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar.into())),\n                 }\n             }\n         }"}, {"sha": "21c69662b9eaddf67587549ae6eeb395829fc9f5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -25,6 +25,7 @@ use crate::mir::interpret::{\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::query::erase::{erase, restore, Erase};\n+use crate::query::plumbing::{query_ensure, query_get_at, DynamicQuery};\n use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -39,10 +40,6 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::ValidityRequirement;\n-use crate::ty::query::{\n-    query_ensure, query_get_at, DynamicQuery, IntoQueryParam, TyCtxtAt, TyCtxtEnsure,\n-    TyCtxtEnsureWithValue,\n-};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n@@ -90,8 +87,11 @@ use std::sync::Arc;\n \n pub mod erase;\n mod keys;\n-pub mod on_disk_cache;\n pub use keys::{AsLocalKey, Key, LocalCrate};\n+pub mod on_disk_cache;\n+#[macro_use]\n+pub mod plumbing;\n+pub use plumbing::{IntoQueryParam, TyCtxtAt, TyCtxtEnsure, TyCtxtEnsureWithValue};\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n@@ -527,7 +527,7 @@ rustc_queries! {\n         }\n     }\n \n-    query mir_generator_witnesses(key: DefId) -> &'tcx mir::GeneratorLayout<'tcx> {\n+    query mir_generator_witnesses(key: DefId) -> &'tcx Option<mir::GeneratorLayout<'tcx>> {\n         arena_cache\n         desc { |tcx| \"generator witness types for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }"}, {"sha": "647f4826876daa700074f11a2860149e824ffc1c", "filename": "compiler/rustc_middle/src/query/plumbing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "previous_filename": "compiler/rustc_middle/src/ty/query.rs"}, {"sha": "1a4bd14815f93460e1e6917573ae8b00df86a5d9", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,7 +6,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n use rustc_macros::HashStable;\n-use std::fmt;\n \n mod int;\n mod kind;\n@@ -21,15 +20,6 @@ pub use valtree::*;\n #[rustc_pass_by_value]\n pub struct Const<'tcx>(pub(super) Interned<'tcx, ConstData<'tcx>>);\n \n-impl<'tcx> fmt::Debug for Const<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // This reflects what `Const` looked liked before `Interned` was\n-        // introduced. We print it like this to avoid having to update expected\n-        // output in a lot of tests.\n-        write!(f, \"Const {{ ty: {:?}, kind: {:?} }}\", self.ty(), self.kind())\n-    }\n-}\n-\n /// Typed constant value.\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, TyEncodable, TyDecodable)]\n pub struct ConstData<'tcx> {"}, {"sha": "1dd4f8a243741fb6e9a16ac8996aa57325bf32e1", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> UnevaluatedConst<'tcx> {\n }\n \n /// Represents a constant in Rust.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n #[derive(derive_more::From)]\n pub enum ConstKind<'tcx> {\n@@ -128,7 +128,7 @@ impl<'tcx> ConstKind<'tcx> {\n }\n \n /// An inference variable for a const, for use in const generics.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n+#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n pub enum InferConst<'tcx> {\n     /// Infer the value of the const.\n     Var(ty::ConstVid<'tcx>),\n@@ -245,7 +245,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ValTree(val?))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n                 EvalMode::Mir => {\n@@ -256,7 +256,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ConstVal(val))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n             }"}, {"sha": "e84d0100a5cba573c8f2edc887598855bc12aa3a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -14,14 +14,14 @@ use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{Body, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::query::plumbing::QuerySystem;\n use crate::query::LocalCrate;\n use crate::query::Providers;\n+use crate::query::{IntoQueryParam, TyCtxtAt};\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n-use crate::ty::query::QuerySystem;\n-use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, ImplPolarity, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n@@ -80,8 +80,6 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n-use super::query::IntoQueryParam;\n-\n const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n \n #[allow(rustc::usage_of_ty_tykind)]\n@@ -512,7 +510,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     untracked: Untracked,\n \n-    pub query_system: query::QuerySystem<'tcx>,\n+    pub query_system: QuerySystem<'tcx>,\n     pub(crate) query_kinds: &'tcx [DepKindStruct<'tcx>],\n \n     // Internal caches for metadata decoding. No need to track deps on this."}, {"sha": "5c1c419811e3881d7bb0d4926791a27032125ebe", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,7 +1,7 @@\n use super::{GlobalCtxt, TyCtxt};\n \n use crate::dep_graph::TaskDepsRef;\n-use crate::ty::query;\n+use crate::query::plumbing::QueryJobId;\n use rustc_data_structures::sync::{self, Lock};\n use rustc_errors::Diagnostic;\n #[cfg(not(parallel_compiler))]\n@@ -22,7 +22,7 @@ pub struct ImplicitCtxt<'a, 'tcx> {\n \n     /// The current query job, if any. This is updated by `JobOwner::start` in\n     /// `ty::query::plumbing` when executing a query.\n-    pub query: Option<query::QueryJobId>,\n+    pub query: Option<QueryJobId>,\n \n     /// Where to store diagnostics for the current query job, if any.\n     /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query."}, {"sha": "ba91e5aea5a5cf17f1812b0750949dfa9ca7f05b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,6 @@\n use crate::fluent_generated as fluent;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n+use crate::query::TyCtxtAt;\n use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitableExt};\n use rustc_errors::{DiagnosticBuilder, Handler, IntoDiagnostic};\n@@ -543,20 +544,20 @@ impl<'tcx> HasTyCtxt<'tcx> for TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> HasDataLayout for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasDataLayout for TyCtxtAt<'tcx> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.data_layout\n     }\n }\n \n-impl<'tcx> HasTargetSpec for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasTargetSpec for TyCtxtAt<'tcx> {\n     fn target_spec(&self) -> &Target {\n         &self.sess.target\n     }\n }\n \n-impl<'tcx> HasTyCtxt<'tcx> for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasTyCtxt<'tcx> for TyCtxtAt<'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         **self\n@@ -683,7 +684,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n-impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxtAt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]"}, {"sha": "be0d1e61a46b011fe7f3386a3cc4fc21d0c7f8cc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -122,8 +122,6 @@ pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n pub mod print;\n-#[macro_use]\n-pub mod query;\n pub mod relate;\n pub mod subst;\n pub mod trait_def;"}, {"sha": "4491d78648f7a1b061812df24d13f9e99fe264d3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::query::IntoQueryParam;\n use crate::query::Providers;\n-use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n@@ -703,7 +703,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n+                ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n                     true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n                     true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n@@ -741,7 +741,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n                 ty::BoundTyKind::Anon => {\n-                    self.pretty_print_placeholder_var(placeholder.universe, placeholder.bound.var)?\n+                    debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound.var)?;\n                 }\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n@@ -1164,30 +1164,6 @@ pub trait PrettyPrinter<'tcx>:\n         traits.entry(trait_ref).or_default().extend(proj_ty);\n     }\n \n-    fn pretty_print_bound_var(\n-        &mut self,\n-        debruijn: ty::DebruijnIndex,\n-        var: ty::BoundVar,\n-    ) -> Result<(), Self::Error> {\n-        if debruijn == ty::INNERMOST {\n-            write!(self, \"^{}\", var.index())\n-        } else {\n-            write!(self, \"^{}_{}\", debruijn.index(), var.index())\n-        }\n-    }\n-\n-    fn pretty_print_placeholder_var(\n-        &mut self,\n-        ui: ty::UniverseIndex,\n-        var: ty::BoundVar,\n-    ) -> Result<(), Self::Error> {\n-        if ui == ty::UniverseIndex::ROOT {\n-            write!(self, \"!{}\", var.index())\n-        } else {\n-            write!(self, \"!{}_{}\", ui.index(), var.index())\n-        }\n-    }\n-\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n@@ -1321,7 +1297,7 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.should_print_verbose() {\n-            p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n+            p!(write(\"{:?}\", ct));\n             return Ok(self);\n         }\n \n@@ -1380,9 +1356,11 @@ pub trait PrettyPrinter<'tcx>:\n             }\n \n             ty::ConstKind::Bound(debruijn, bound_var) => {\n-                self.pretty_print_bound_var(debruijn, bound_var)?\n+                debug_bound_var(&mut self, debruijn, bound_var)?\n             }\n-            ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::ConstKind::Placeholder(placeholder) => {\n+                debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound)?;\n+            },\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n             ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n@@ -3067,3 +3045,27 @@ pub struct OpaqueFnEntry<'tcx> {\n     fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     return_ty: Option<ty::Binder<'tcx, Term<'tcx>>>,\n }\n+\n+pub fn debug_bound_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    debruijn: ty::DebruijnIndex,\n+    var: ty::BoundVar,\n+) -> Result<(), std::fmt::Error> {\n+    if debruijn == ty::INNERMOST {\n+        write!(fmt, \"^{}\", var.index())\n+    } else {\n+        write!(fmt, \"^{}_{}\", debruijn.index(), var.index())\n+    }\n+}\n+\n+pub fn debug_placeholder_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    universe: ty::UniverseIndex,\n+    bound: ty::BoundVar,\n+) -> Result<(), std::fmt::Error> {\n+    if universe == ty::UniverseIndex::ROOT {\n+        write!(fmt, \"!{}\", bound.index())\n+    } else {\n+        write!(fmt, \"!{}_{}\", universe.index(), bound.index())\n+    }\n+}"}, {"sha": "16cb6c910463a81d42cbed1a8207faea8c1e5485", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -192,6 +192,44 @@ impl<'tcx> fmt::Debug for AliasTy<'tcx> {\n     }\n }\n \n+impl<'tcx> fmt::Debug for ty::InferConst<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            InferConst::Var(var) => write!(f, \"{var:?}\"),\n+            InferConst::Fresh(var) => write!(f, \"Fresh({var:?})\"),\n+        }\n+    }\n+}\n+\n+impl<'tcx> fmt::Debug for ty::Const<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // This reflects what `Const` looked liked before `Interned` was\n+        // introduced. We print it like this to avoid having to update expected\n+        // output in a lot of tests.\n+        write!(f, \"Const {{ ty: {:?}, kind: {:?} }}\", self.ty(), self.kind())\n+    }\n+}\n+\n+impl<'tcx> fmt::Debug for ty::ConstKind<'tcx> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use ty::ConstKind::*;\n+        match self {\n+            Param(param) => write!(f, \"{param:?}\"),\n+            Infer(var) => write!(f, \"{var:?}\"),\n+            Bound(debruijn, var) => ty::print::debug_bound_var(f, *debruijn, *var),\n+            Placeholder(placeholder) => {\n+                ty::print::debug_placeholder_var(f, placeholder.universe, placeholder.bound)\n+            }\n+            Unevaluated(uv) => {\n+                f.debug_tuple(\"Unevaluated\").field(&uv.substs).field(&uv.def).finish()\n+            }\n+            Value(valtree) => write!(f, \"{valtree:?}\"),\n+            Error(_) => write!(f, \"[const error]\"),\n+            Expr(expr) => write!(f, \"{expr:?}\"),\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Atomic structs\n //"}, {"sha": "e6d51c4ec9770f2f3f5bd176d0c1380c617ef88c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1708,7 +1708,9 @@ impl<'tcx> Region<'tcx> {\n             ty::ReErased => {\n                 flags = flags | TypeFlags::HAS_RE_ERASED;\n             }\n-            ty::ReError(_) => {}\n+            ty::ReError(_) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+            }\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "eb903ebfd99fb96833877c53d598256367430a93", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -668,10 +668,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         def_id: DefId,\n     ) -> impl Iterator<Item = ty::EarlyBinder<Ty<'tcx>>> {\n-        let generator_layout = &self.mir_generator_witnesses(def_id);\n+        let generator_layout = self.mir_generator_witnesses(def_id);\n         generator_layout\n-            .field_tys\n-            .iter()\n+            .as_ref()\n+            .map_or_else(|| [].iter(), |l| l.field_tys.iter())\n             .filter(|decl| !decl.ignore_for_traits)\n             .map(|decl| ty::EarlyBinder(decl.ty))\n     }"}, {"sha": "0105a265ffbab598b180d84caeab4eb0d15b0172", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -481,9 +481,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }))))\n             }\n \n-            ExprKind::OffsetOf { container, fields } => {\n-                block.and(Rvalue::NullaryOp(NullOp::OffsetOf(fields), container))\n-            }\n+            ExprKind::OffsetOf { container, fields } => block.and(Rvalue::NullaryOp(\n+                NullOp::OffsetOf(fields),\n+                this.tcx.erase_regions(container),\n+            )),\n \n             ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }"}, {"sha": "dbdb5b4a9a17980886700b4207c6510bea318351", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -380,18 +380,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n     }\n \n-    /// Compare two `&T` values using `<T as std::compare::PartialEq>::eq`\n+    /// Compare two values using `<T as std::compare::PartialEq>::eq`.\n+    /// If the values are already references, just call it directly, otherwise\n+    /// take a reference to the values first and then call it.\n     fn non_scalar_compare(\n         &mut self,\n         block: BasicBlock,\n         make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,\n         source_info: SourceInfo,\n         value: ConstantKind<'tcx>,\n-        place: Place<'tcx>,\n+        mut val: Place<'tcx>,\n         mut ty: Ty<'tcx>,\n     ) {\n         let mut expect = self.literal_operand(source_info.span, value);\n-        let mut val = Operand::Copy(place);\n \n         // If we're using `b\"...\"` as a pattern, we need to insert an\n         // unsizing coercion, as the byte string has the type `&[u8; N]`.\n@@ -421,9 +422,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         temp,\n-                        Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), val, ty),\n+                        Rvalue::Cast(\n+                            CastKind::Pointer(PointerCast::Unsize),\n+                            Operand::Copy(val),\n+                            ty,\n+                        ),\n                     );\n-                    val = Operand::Move(temp);\n+                    val = temp;\n                 }\n                 if opt_ref_test_ty.is_some() {\n                     let slice = self.temp(ty, source_info.span);\n@@ -438,12 +443,36 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        let ty::Ref(_, deref_ty, _) = *ty.kind() else {\n-            bug!(\"non_scalar_compare called on non-reference type: {}\", ty);\n-        };\n+        match *ty.kind() {\n+            ty::Ref(_, deref_ty, _) => ty = deref_ty,\n+            _ => {\n+                // non_scalar_compare called on non-reference type\n+                let temp = self.temp(ty, source_info.span);\n+                self.cfg.push_assign(block, source_info, temp, Rvalue::Use(expect));\n+                let ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, ty);\n+                let ref_temp = self.temp(ref_ty, source_info.span);\n+\n+                self.cfg.push_assign(\n+                    block,\n+                    source_info,\n+                    ref_temp,\n+                    Rvalue::Ref(self.tcx.lifetimes.re_erased, BorrowKind::Shared, temp),\n+                );\n+                expect = Operand::Move(ref_temp);\n+\n+                let ref_temp = self.temp(ref_ty, source_info.span);\n+                self.cfg.push_assign(\n+                    block,\n+                    source_info,\n+                    ref_temp,\n+                    Rvalue::Ref(self.tcx.lifetimes.re_erased, BorrowKind::Shared, val),\n+                );\n+                val = ref_temp;\n+            }\n+        }\n \n         let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, Some(source_info.span));\n-        let method = trait_method(self.tcx, eq_def_id, sym::eq, [deref_ty, deref_ty]);\n+        let method = trait_method(self.tcx, eq_def_id, sym::eq, [ty, ty]);\n \n         let bool_ty = self.tcx.types.bool;\n         let eq_result = self.temp(bool_ty, source_info.span);\n@@ -463,7 +492,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     literal: method,\n                 })),\n-                args: vec![val, expect],\n+                args: vec![Operand::Copy(val), expect],\n                 destination: eq_result,\n                 target: Some(eq_block),\n                 unwind: UnwindAction::Continue,"}, {"sha": "b243f1dc8d0df504efe383891715820bfe64678e", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -62,21 +62,13 @@ struct ConstToPat<'tcx> {\n     treat_byte_string_as_slice: bool,\n }\n \n-mod fallback_to_const_ref {\n-    #[derive(Debug)]\n-    /// This error type signals that we encountered a non-struct-eq situation behind a reference.\n-    /// We bubble this up in order to get back to the reference destructuring and make that emit\n-    /// a const pattern instead of a deref pattern. This allows us to simply call `PartialEq::eq`\n-    /// on such patterns (since that function takes a reference) and not have to jump through any\n-    /// hoops to get a reference to the value.\n-    pub(super) struct FallbackToConstRef(());\n-\n-    pub(super) fn fallback_to_const_ref(c2p: &super::ConstToPat<'_>) -> FallbackToConstRef {\n-        assert!(c2p.behind_reference.get());\n-        FallbackToConstRef(())\n-    }\n-}\n-use fallback_to_const_ref::{fallback_to_const_ref, FallbackToConstRef};\n+/// This error type signals that we encountered a non-struct-eq situation.\n+/// We bubble this up in order to get back to the reference destructuring and make that emit\n+/// a const pattern instead of a deref pattern. This allows us to simply call `PartialEq::eq`\n+/// on such patterns (since that function takes a reference) and not have to jump through any\n+/// hoops to get a reference to the value.\n+#[derive(Debug)]\n+struct FallbackToConstRef;\n \n impl<'tcx> ConstToPat<'tcx> {\n     fn new(\n@@ -236,13 +228,13 @@ impl<'tcx> ConstToPat<'tcx> {\n \n         let kind = match cv.ty().kind() {\n             ty::Float(_) => {\n-                    tcx.emit_spanned_lint(\n-                        lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n-                        id,\n-                        span,\n-                        FloatPattern,\n-                    );\n-                PatKind::Constant { value: cv }\n+                tcx.emit_spanned_lint(\n+                    lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                    id,\n+                    span,\n+                    FloatPattern,\n+                );\n+                return Err(FallbackToConstRef);\n             }\n             ty::Adt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n@@ -289,7 +281,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // Since we are behind a reference, we can just bubble the error up so we get a\n                 // constant at reference type, making it easy to let the fallback call\n                 // `PartialEq::eq` on it.\n-                return Err(fallback_to_const_ref(self));\n+                return Err(FallbackToConstRef);\n             }\n             ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty()) => {\n                 debug!(\n@@ -393,11 +385,11 @@ impl<'tcx> ConstToPat<'tcx> {\n                     self.behind_reference.set(old);\n                     val\n                 }\n-                // Backwards compatibility hack: support references to non-structural types.\n-                // We'll lower\n-                // this pattern to a `PartialEq::eq` comparison and `PartialEq::eq` takes a\n-                // reference. This makes the rest of the matching logic simpler as it doesn't have\n-                // to figure out how to get a reference again.\n+                // Backwards compatibility hack: support references to non-structural types,\n+                // but hard error if we aren't behind a double reference. We could just use\n+                // the fallback code path below, but that would allow *more* of this fishy\n+                // code to compile, as then it only goes through the future incompat lint\n+                // instead of a hard error.\n                 ty::Adt(_, _) if !self.type_marked_structural(*pointee_ty) => {\n                     if self.behind_reference.get() {\n                         if !self.saw_const_match_error.get()\n@@ -411,7 +403,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                                 IndirectStructuralMatch { non_sm_ty: *pointee_ty },\n                             );\n                         }\n-                        PatKind::Constant { value: cv }\n+                        return Err(FallbackToConstRef);\n                     } else {\n                         if !self.saw_const_match_error.get() {\n                             self.saw_const_match_error.set(true);\n@@ -435,24 +427,17 @@ impl<'tcx> ConstToPat<'tcx> {\n                         PatKind::Wild\n                     } else {\n                         let old = self.behind_reference.replace(true);\n-                        // In case there are structural-match violations somewhere in this subpattern,\n-                        // we fall back to a const pattern. If we do not do this, we may end up with\n-                        // a !structural-match constant that is not of reference type, which makes it\n-                        // very hard to invoke `PartialEq::eq` on it as a fallback.\n-                        let val = match self.recur(tcx.deref_mir_constant(self.param_env.and(cv)), false) {\n-                            Ok(subpattern) => PatKind::Deref { subpattern },\n-                            Err(_) => PatKind::Constant { value: cv },\n-                        };\n+                        let subpattern = self.recur(tcx.deref_mir_constant(self.param_env.and(cv)), false)?;\n                         self.behind_reference.set(old);\n-                        val\n+                        PatKind::Deref { subpattern }\n                     }\n                 }\n             },\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::FnDef(..) => {\n                 PatKind::Constant { value: cv }\n             }\n             ty::RawPtr(pointee) if pointee.ty.is_sized(tcx, param_env) => {\n-                PatKind::Constant { value: cv }\n+                return Err(FallbackToConstRef);\n             }\n             // FIXME: these can have very surprising behaviour where optimization levels or other\n             // compilation choices change the runtime behaviour of the match.\n@@ -469,7 +454,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                         PointerPattern\n                     );\n                 }\n-                PatKind::Constant { value: cv }\n+                return Err(FallbackToConstRef);\n             }\n             _ => {\n                 self.saw_const_match_error.set(true);"}, {"sha": "6a77146138bb582aa2df5cf59614c56598b379ab", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -844,8 +844,8 @@ impl<'tcx> Constructor<'tcx> {\n     }\n \n     /// Faster version of `is_covered_by` when applied to many constructors. `used_ctors` is\n-    /// assumed to be built from `matrix.head_ctors()` with wildcards filtered out, and `self` is\n-    /// assumed to have been split from a wildcard.\n+    /// assumed to be built from `matrix.head_ctors()` with wildcards and opaques filtered out,\n+    /// and `self` is assumed to have been split from a wildcard.\n     fn is_covered_by_any<'p>(\n         &self,\n         pcx: &PatCtxt<'_, 'p, 'tcx>,\n@@ -894,7 +894,7 @@ impl<'tcx> Constructor<'tcx> {\n /// in `to_ctors`: in some cases we only return `Missing`.\n #[derive(Debug)]\n pub(super) struct SplitWildcard<'tcx> {\n-    /// Constructors seen in the matrix.\n+    /// Constructors (other than wildcards and opaques) seen in the matrix.\n     matrix_ctors: Vec<Constructor<'tcx>>,\n     /// All the constructors for this type\n     all_ctors: SmallVec<[Constructor<'tcx>; 1]>,\n@@ -1037,7 +1037,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n         // Since `all_ctors` never contains wildcards, this won't recurse further.\n         self.all_ctors =\n             self.all_ctors.iter().flat_map(|ctor| ctor.split(pcx, ctors.clone())).collect();\n-        self.matrix_ctors = ctors.filter(|c| !c.is_wildcard()).cloned().collect();\n+        self.matrix_ctors = ctors.filter(|c| !matches!(c, Wildcard | Opaque)).cloned().collect();\n     }\n \n     /// Whether there are any value constructors for this type that are not present in the matrix."}, {"sha": "e5b6350690609812c788847ec2389c72350ac982", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -288,6 +288,22 @@\n //!\n //! The details are not necessary to understand this file, so we explain them in\n //! [`super::deconstruct_pat`]. Splitting is done by the [`Constructor::split`] function.\n+//!\n+//! # Constants in patterns\n+//!\n+//! There are two kinds of constants in patterns:\n+//!\n+//! * literals (`1`, `true`, `\"foo\"`)\n+//! * named or inline consts (`FOO`, `const { 5 + 6 }`)\n+//!\n+//! The latter are converted into other patterns with literals at the leaves. For example\n+//! `const_to_pat(const { [1, 2, 3] })` becomes an `Array(vec![Const(1), Const(2), Const(3)])`\n+//! pattern. This gets problematic when comparing the constant via `==` would behave differently\n+//! from matching on the constant converted to a pattern. Situations like that can occur, when\n+//! the user implements `PartialEq` manually, and thus could make `==` behave arbitrarily different.\n+//! In order to honor the `==` implementation, constants of types that implement `PartialEq` manually\n+//! stay as a full constant and become an `Opaque` pattern. These `Opaque` patterns do not participate\n+//! in exhaustiveness, specialization or overlap checking.\n \n use self::ArmType::*;\n use self::Usefulness::*;"}, {"sha": "18895072c3b96460639477235fa4e402c56755e1", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -276,6 +276,7 @@ where\n                 assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n                 let field_ty =\n                     tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n+\n                 (tcx.mk_place_field(base_place, field, field_ty), subpath)\n             })\n             .collect()"}, {"sha": "319f3a79705121e713707e747ffc7038b27a9f3b", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -162,20 +162,22 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n     }\n \n     fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n-        match stmt.kind {\n-            // When removing storage statements, we need to remove both (#107511).\n-            StatementKind::StorageLive(l) | StatementKind::StorageDead(l)\n-                if self.storage_to_remove.contains(l) =>\n-            {\n-                stmt.make_nop()\n-            }\n-            StatementKind::Assign(box (ref place, ref mut rvalue))\n-                if place.as_local().is_some() =>\n-            {\n-                // Do not replace assignments.\n-                self.visit_rvalue(rvalue, loc)\n-            }\n-            _ => self.super_statement(stmt, loc),\n+        // When removing storage statements, we need to remove both (#107511).\n+        if let StatementKind::StorageLive(l) | StatementKind::StorageDead(l) = stmt.kind\n+            && self.storage_to_remove.contains(l)\n+        {\n+            stmt.make_nop();\n+            return\n+        }\n+\n+        self.super_statement(stmt, loc);\n+\n+        // Do not leave tautological assignments around.\n+        if let StatementKind::Assign(box (lhs, ref rhs)) = stmt.kind\n+            && let Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)) | Rvalue::CopyForDeref(rhs) = *rhs\n+            && lhs == rhs\n+        {\n+            stmt.make_nop();\n         }\n     }\n }"}, {"sha": "891e446942e018bafa7918242fb0266924812d5d", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1397,7 +1397,7 @@ fn create_cases<'tcx>(\n pub(crate) fn mir_generator_witnesses<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> GeneratorLayout<'tcx> {\n+) -> Option<GeneratorLayout<'tcx>> {\n     assert!(tcx.sess.opts.unstable_opts.drop_tracking_mir);\n \n     let (body, _) = tcx.mir_promoted(def_id);\n@@ -1410,6 +1410,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     // Get the interior types and substs which typeck computed\n     let movable = match *gen_ty.kind() {\n         ty::Generator(_, _, movability) => movability == hir::Movability::Movable,\n+        ty::Error(_) => return None,\n         _ => span_bug!(body.span, \"unexpected generator type {}\", gen_ty),\n     };\n \n@@ -1425,7 +1426,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n \n     check_suspend_tys(tcx, &generator_layout, &body);\n \n-    generator_layout\n+    Some(generator_layout)\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {"}, {"sha": "12f955d46bd31438e1b05fab7e295d6cf3173c0c", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,6 +7,7 @@ use rustc_index::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -168,7 +169,7 @@ impl<'tcx> Inliner<'tcx> {\n         let callee_attrs = self.tcx.codegen_fn_attrs(callsite.callee.def_id());\n         self.check_codegen_attributes(callsite, callee_attrs)?;\n         self.check_mir_is_available(caller_body, &callsite.callee)?;\n-        let callee_body = self.tcx.instance_mir(callsite.callee.def);\n+        let callee_body = try_instance_mir(self.tcx, callsite.callee.def)?;\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n \n         if !self.tcx.consider_optimizing(|| {\n@@ -1128,3 +1129,27 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         }\n     }\n }\n+\n+#[instrument(skip(tcx), level = \"debug\")]\n+fn try_instance_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: InstanceDef<'tcx>,\n+) -> Result<&'tcx Body<'tcx>, &'static str> {\n+    match instance {\n+        ty::InstanceDef::DropGlue(_, Some(ty)) => match ty.kind() {\n+            ty::Adt(def, substs) => {\n+                let fields = def.all_fields();\n+                for field in fields {\n+                    let field_ty = field.ty(tcx, substs);\n+                    if field_ty.has_param() && field_ty.has_projections() {\n+                        return Err(\"cannot build drop shim for polymorphic type\");\n+                    }\n+                }\n+\n+                Ok(tcx.instance_mir(instance))\n+            }\n+            _ => Ok(tcx.instance_mir(instance)),\n+        },\n+        _ => Ok(tcx.instance_mir(instance)),\n+    }\n+}"}, {"sha": "e4dc617620e12f8ab5c20f5c6c3fafe276b2b6a8", "filename": "compiler/rustc_mir_transform/src/instsimplify.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -5,7 +5,6 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::ValidityRequirement;\n-use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::FieldIdx;\n@@ -163,18 +162,6 @@ impl<'tcx> InstSimplifyContext<'tcx, '_> {\n                     return;\n                 }\n \n-                // Transmuting a fieldless enum to its repr is a discriminant read\n-                if let ty::Adt(adt_def, ..) = operand_ty.kind()\n-                    && adt_def.is_enum()\n-                    && adt_def.is_payloadfree()\n-                    && let Some(place) = operand.place()\n-                    && let Some(repr_int) = adt_def.repr().int\n-                    && repr_int.to_ty(self.tcx) == *cast_ty\n-                {\n-                    *rvalue = Rvalue::Discriminant(place);\n-                    return;\n-                }\n-\n                 // Transmuting a transparent struct/union to a field's type is a projection\n                 if let ty::Adt(adt_def, substs) = operand_ty.kind()\n                     && adt_def.repr().transparent()"}, {"sha": "2b404efccc75ada8e841f1d25650460ae163202f", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -101,14 +101,15 @@ impl SsaLocals {\n             .retain(|&local| matches!(visitor.assignments[local], Set1::One(_)));\n         debug!(?visitor.assignment_order);\n \n-        let copy_classes = compute_copy_classes(&mut visitor, body);\n-\n-        SsaLocals {\n+        let mut ssa = SsaLocals {\n             assignments: visitor.assignments,\n             assignment_order: visitor.assignment_order,\n             direct_uses: visitor.direct_uses,\n-            copy_classes,\n-        }\n+            // This is filled by `compute_copy_classes`.\n+            copy_classes: IndexVec::default(),\n+        };\n+        compute_copy_classes(&mut ssa, body);\n+        ssa\n     }\n \n     pub fn num_locals(&self) -> usize {\n@@ -261,49 +262,54 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n }\n \n #[instrument(level = \"trace\", skip(ssa, body))]\n-fn compute_copy_classes(ssa: &mut SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Local> {\n+fn compute_copy_classes(ssa: &mut SsaLocals, body: &Body<'_>) {\n+    let mut direct_uses = std::mem::take(&mut ssa.direct_uses);\n     let mut copies = IndexVec::from_fn_n(|l| l, body.local_decls.len());\n \n-    for &local in &ssa.assignment_order {\n-        debug!(?local);\n-\n-        if local == RETURN_PLACE {\n-            // `_0` is special, we cannot rename it.\n-            continue;\n-        }\n-\n-        // This is not SSA: mark that we don't know the value.\n-        debug!(assignments = ?ssa.assignments[local]);\n-        let Set1::One(LocationExtended::Plain(loc)) = ssa.assignments[local] else { continue };\n-\n-        // `loc` must point to a direct assignment to `local`.\n-        let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n-        let Some((_target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n-        assert_eq!(_target.as_local(), Some(local));\n-\n+    for (local, rvalue, _) in ssa.assignments(body) {\n         let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n             = rvalue\n         else { continue };\n \n         let Some(rhs) = place.as_local() else { continue };\n-        let Set1::One(_) = ssa.assignments[rhs] else { continue };\n+        if !ssa.is_ssa(rhs) {\n+            continue;\n+        }\n \n         // We visit in `assignment_order`, ie. reverse post-order, so `rhs` has been\n         // visited before `local`, and we just have to copy the representing local.\n-        copies[local] = copies[rhs];\n-        ssa.direct_uses[rhs] -= 1;\n+        let head = copies[rhs];\n+\n+        if local == RETURN_PLACE {\n+            // `_0` is special, we cannot rename it. Instead, rename the class of `rhs` to\n+            // `RETURN_PLACE`. This is only possible if the class head is a temporary, not an\n+            // argument.\n+            if body.local_kind(head) != LocalKind::Temp {\n+                continue;\n+            }\n+            for h in copies.iter_mut() {\n+                if *h == head {\n+                    *h = RETURN_PLACE;\n+                }\n+            }\n+        } else {\n+            copies[local] = head;\n+        }\n+        direct_uses[rhs] -= 1;\n     }\n \n     debug!(?copies);\n-    debug!(?ssa.direct_uses);\n+    debug!(?direct_uses);\n \n     // Invariant: `copies` must point to the head of an equivalence class.\n     #[cfg(debug_assertions)]\n     for &head in copies.iter() {\n         assert_eq!(copies[head], head);\n     }\n+    debug_assert_eq!(copies[RETURN_PLACE], RETURN_PLACE);\n \n-    copies\n+    ssa.direct_uses = direct_uses;\n+    ssa.copy_classes = copies;\n }\n \n #[derive(Debug)]"}, {"sha": "35b154b7b34d1c52db2aac6c2fff5283ed1d14cd", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -185,9 +185,9 @@ use rustc_middle::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n+use rustc_middle::query::TyCtxtAt;\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n     self, GenericParamDefKind, Instance, InstanceDef, Ty, TyCtxt, TypeFoldable, TypeVisitableExt,"}, {"sha": "ecc50c3f664fd9f04dd35eaa735ac6d92e3cd3d4", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -12,10 +12,9 @@ extern crate rustc_middle;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::query::Providers;\n+use rustc_middle::query::{Providers, TyCtxtAt};\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::{self, Ty};\n \n mod collector;"}, {"sha": "cd779b0b43ebd59f83d9574896f0084ac9f04bbd", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -453,6 +453,8 @@ impl<'a> Parser<'a> {\n         //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n         //     `<` (LIFETIME|IDENT) `=` - generic parameter with a default\n         //     `<` const                - generic const parameter\n+        //     `<` IDENT `?`            - RECOVERY for `impl<T ?Bound` missing a `:`, meant to\n+        //                                avoid the `T?` to `Option<T>` recovery for types.\n         // The only truly ambiguous case is\n         //     `<` IDENT `>` `::` IDENT ...\n         // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)\n@@ -463,6 +465,9 @@ impl<'a> Parser<'a> {\n                 || self.look_ahead(start + 1, |t| t.is_lifetime() || t.is_ident())\n                     && self.look_ahead(start + 2, |t| {\n                         matches!(t.kind, token::Gt | token::Comma | token::Colon | token::Eq)\n+                        // Recovery-only branch -- this could be removed,\n+                        // since it only affects diagnostics currently.\n+                            || matches!(t.kind, token::Question)\n                     })\n                 || self.is_keyword_ahead(start + 1, &[kw::Const]))\n     }"}, {"sha": "b76734dd072948b6bc99a1ff38007ec28abda06b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -24,17 +24,18 @@ use rustc_middle::dep_graph::DepNodeIndex;\n use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n use rustc_middle::query::on_disk_cache::OnDiskCache;\n+use rustc_middle::query::plumbing::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n     DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n-use rustc_middle::ty::query::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    get_query, HashResult, QueryCache, QueryConfig, QueryInfo, QueryMap, QueryMode, QueryState,\n+    get_query_incr, get_query_non_incr, HashResult, QueryCache, QueryConfig, QueryInfo, QueryMap,\n+    QueryMode, QueryState,\n };\n use rustc_query_system::HandleCycleError;\n use rustc_query_system::Value;\n@@ -203,6 +204,7 @@ pub fn query_system<'tcx>(\n     local_providers: Providers,\n     extern_providers: ExternProviders,\n     on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    incremental: bool,\n ) -> QuerySystem<'tcx> {\n     QuerySystem {\n         states: Default::default(),\n@@ -211,7 +213,7 @@ pub fn query_system<'tcx>(\n         dynamic_queries: dynamic_queries(),\n         on_disk_cache,\n         fns: QuerySystemFns {\n-            engine: engine(),\n+            engine: engine(incremental),\n             local_providers,\n             extern_providers,\n             query_structs: make_dep_kind_array!(query_structs).to_vec(),"}, {"sha": "79d8abc4b694ca809a0ca634e065e8ce38818505", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -494,7 +494,7 @@ macro_rules! define_queries {\n     (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n-        mod get_query {\n+        mod get_query_incr {\n             use super::*;\n \n             $(\n@@ -506,7 +506,7 @@ macro_rules! define_queries {\n                     key: query_keys::$name<'tcx>,\n                     mode: QueryMode,\n                 ) -> Option<Erase<query_values::$name<'tcx>>> {\n-                    get_query(\n+                    get_query_incr(\n                         queries::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         span,\n@@ -517,9 +517,37 @@ macro_rules! define_queries {\n             )*\n         }\n \n-        pub(crate) fn engine() -> QueryEngine {\n-            QueryEngine {\n-                $($name: get_query::$name,)*\n+        mod get_query_non_incr {\n+            use super::*;\n+\n+            $(\n+                #[inline(always)]\n+                #[tracing::instrument(level = \"trace\", skip(tcx))]\n+                pub(super) fn $name<'tcx>(\n+                    tcx: TyCtxt<'tcx>,\n+                    span: Span,\n+                    key: query_keys::$name<'tcx>,\n+                    __mode: QueryMode,\n+                ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    Some(get_query_non_incr(\n+                        queries::$name::config(tcx),\n+                        QueryCtxt::new(tcx),\n+                        span,\n+                        key,\n+                    ))\n+                }\n+            )*\n+        }\n+\n+        pub(crate) fn engine(incremental: bool) -> QueryEngine {\n+            if incremental {\n+                QueryEngine {\n+                    $($name: get_query_incr::$name,)*\n+                }\n+            } else {\n+                QueryEngine {\n+                    $($name: get_query_non_incr::$name,)*\n+                }\n             }\n         }\n \n@@ -688,8 +716,7 @@ macro_rules! define_queries {\n \n         mod query_structs {\n             use super::*;\n-            use rustc_middle::ty::query::QueryStruct;\n-            use rustc_middle::ty::query::QueryKeyStringCache;\n+            use rustc_middle::query::plumbing::{QueryKeyStringCache, QueryStruct};\n             use rustc_middle::dep_graph::DepKind;\n             use crate::QueryConfigRestored;\n "}, {"sha": "e042ee62dfe52c2e4a1d1d7fd8f1e80173b4aecf", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2,7 +2,7 @@ use measureme::{StringComponent, StringId};\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n-use rustc_middle::ty::query::QueryKeyStringCache;\n+use rustc_middle::query::plumbing::QueryKeyStringCache;\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::query::QueryCache;\n use std::fmt::Debug;"}, {"sha": "dbfe62ae6e943045811a560e49aac9461198113e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -312,7 +312,7 @@ where\n }\n \n #[inline(never)]\n-fn try_execute_query<Q, Qcx>(\n+fn try_execute_query<Q, Qcx, const INCR: bool>(\n     query: Q,\n     qcx: Qcx,\n     span: Span,\n@@ -355,7 +355,7 @@ where\n             // Drop the lock before we start executing the query\n             drop(state_lock);\n \n-            execute_job(query, qcx, state, key, id, dep_node)\n+            execute_job::<_, _, INCR>(query, qcx, state, key, id, dep_node)\n         }\n         Entry::Occupied(mut entry) => {\n             match entry.get_mut() {\n@@ -383,7 +383,7 @@ where\n }\n \n #[inline(always)]\n-fn execute_job<Q, Qcx>(\n+fn execute_job<Q, Qcx, const INCR: bool>(\n     query: Q,\n     qcx: Qcx,\n     state: &QueryState<Q::Key, Qcx::DepKind>,\n@@ -398,9 +398,19 @@ where\n     // Use `JobOwner` so the query will be poisoned if executing it panics.\n     let job_owner = JobOwner { state, key };\n \n-    let (result, dep_node_index) = match qcx.dep_context().dep_graph().data() {\n-        None => execute_job_non_incr(query, qcx, key, id),\n-        Some(data) => execute_job_incr(query, qcx, data, key, dep_node, id),\n+    debug_assert_eq!(qcx.dep_context().dep_graph().is_fully_enabled(), INCR);\n+\n+    let (result, dep_node_index) = if INCR {\n+        execute_job_incr(\n+            query,\n+            qcx,\n+            qcx.dep_context().dep_graph().data().unwrap(),\n+            key,\n+            dep_node,\n+            id,\n+        )\n+    } else {\n+        execute_job_non_incr(query, qcx, key, id)\n     };\n \n     let cache = query.query_cache(qcx);\n@@ -784,7 +794,18 @@ pub enum QueryMode {\n }\n \n #[inline(always)]\n-pub fn get_query<Q, Qcx>(\n+pub fn get_query_non_incr<Q, Qcx>(query: Q, qcx: Qcx, span: Span, key: Q::Key) -> Q::Value\n+where\n+    Q: QueryConfig<Qcx>,\n+    Qcx: QueryContext,\n+{\n+    debug_assert!(!qcx.dep_context().dep_graph().is_fully_enabled());\n+\n+    ensure_sufficient_stack(|| try_execute_query::<Q, Qcx, false>(query, qcx, span, key, None).0)\n+}\n+\n+#[inline(always)]\n+pub fn get_query_incr<Q, Qcx>(\n     query: Q,\n     qcx: Qcx,\n     span: Span,\n@@ -795,6 +816,8 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n+    debug_assert!(qcx.dep_context().dep_graph().is_fully_enabled());\n+\n     let dep_node = if let QueryMode::Ensure { check_cache } = mode {\n         let (must_run, dep_node) = ensure_must_run(query, qcx, &key, check_cache);\n         if !must_run {\n@@ -805,8 +828,9 @@ where\n         None\n     };\n \n-    let (result, dep_node_index) =\n-        ensure_sufficient_stack(|| try_execute_query(query, qcx, span, key, dep_node));\n+    let (result, dep_node_index) = ensure_sufficient_stack(|| {\n+        try_execute_query::<_, _, true>(query, qcx, span, key, dep_node)\n+    });\n     if let Some(dep_node_index) = dep_node_index {\n         qcx.dep_context().dep_graph().read_index(dep_node_index)\n     }\n@@ -831,5 +855,7 @@ pub fn force_query<Q, Qcx>(\n \n     debug_assert!(!query.anon());\n \n-    ensure_sufficient_stack(|| try_execute_query(query, qcx, DUMMY_SP, key, Some(dep_node)));\n+    ensure_sufficient_stack(|| {\n+        try_execute_query::<_, _, true>(query, qcx, DUMMY_SP, key, Some(dep_node))\n+    });\n }"}, {"sha": "59eda9db97f49f9fa4c8f9d87e4c1abe052ec94d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let sm = self.tcx.sess.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTyParam { .. } | Res::SelfCtor(_) => {\n+                    Res::SelfTyParam { .. } => {\n                         err.span_label(span, \"can't use `Self` here\");\n                         return err;\n                     }"}, {"sha": "f065c4ddd2e1d3e2f8b20e2fcacf9c593a16b9ae", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1174,10 +1174,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _)\n-            | Res::SelfTyParam { .. }\n-            | Res::SelfTyAlias { .. }\n-            | Res::SelfCtor(_) => {\n+            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         RibKind::Normal"}, {"sha": "c053ea222a026d6e17c3104edd8fd4b03ab1daaa", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -3543,10 +3543,6 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         //\n         // Similar thing, for types, happens in `report_errors` above.\n         let report_errors_for_call = |this: &mut Self, parent_err: Spanned<ResolutionError<'a>>| {\n-            if !source.is_call() {\n-                return Some(parent_err);\n-            }\n-\n             // Before we start looking for candidates, we have to get our hands\n             // on the type user is trying to perform invocation on; basically:\n             // we're transforming `HashMap::new` into just `HashMap`."}, {"sha": "dc475e8c6d57c9cab7f7e83280a706127e30f490", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, AppendOnlyIndexVec, MetadataRef, RwLock};\n+use rustc_data_structures::owned_slice::OwnedSlice;\n+use rustc_data_structures::sync::{self, AppendOnlyIndexVec, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -203,8 +204,8 @@ pub enum ExternCrateSource {\n /// metadata in library -- this trait just serves to decouple rustc_metadata from\n /// the archive reader, which depends on LLVM.\n pub trait MetadataLoader: std::fmt::Debug {\n-    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n+    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n }\n \n pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync + sync::DynSend + sync::DynSync;"}, {"sha": "874d578fe1db3827566eadcb25d6b609bf9f25ac", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -164,6 +164,7 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n+        ConstParamTy,\n         Context,\n         Continue,\n         Copy,\n@@ -1583,6 +1584,7 @@ symbols! {\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,\n         unsafe_cell,\n+        unsafe_cell_from_mut,\n         unsafe_no_drop_flag,\n         unsafe_pin_internals,\n         unsize,"}, {"sha": "d322807442130dfa07726d2c1652ecb7ab21638b", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -124,10 +124,24 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n-                tcx.sess.delay_span_bug(\n+                let guar = tcx.sess.delay_span_bug(\n                     tcx.def_span(assoc_def.item.def_id),\n                     \"missing value for assoc item in impl\",\n                 );\n+                let error_term = match assoc_def.item.kind {\n+                    ty::AssocKind::Const => tcx\n+                        .const_error(\n+                            tcx.type_of(goal.predicate.def_id())\n+                                .subst(tcx, goal.predicate.projection_ty.substs),\n+                            guar,\n+                        )\n+                        .into(),\n+                    ty::AssocKind::Type => tcx.ty_error(guar).into(),\n+                    ty::AssocKind::Fn => unreachable!(),\n+                };\n+                ecx.eq(goal.param_env, goal.predicate.term, error_term)\n+                    .expect(\"expected goal term to be fully unconstrained\");\n+                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n             }\n \n             // Getting the right substitutions here is complex, e.g. given:"}, {"sha": "183c2401fc3ac6ad612faae63230b6c9a83338a3", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -801,7 +801,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                             span: tcx.def_span(unevaluated.def),\n                                             unevaluated: unevaluated,\n                                         });\n-                                    Err(ErrorHandled::Reported(reported))\n+                                    Err(ErrorHandled::Reported(reported.into()))\n                                 }\n                                 Err(err) => Err(err),\n                             }"}, {"sha": "bd1ea43a78e9237c3bfd16f02918d21afd4abee6", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -79,7 +79,7 @@ pub fn is_const_evaluatable<'tcx>(\n                             \"Missing value for constant, but no error reported?\",\n                         )))\n                     }\n-                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n                     Ok(_) => Ok(()),\n                 }\n             }\n@@ -147,7 +147,7 @@ pub fn is_const_evaluatable<'tcx>(\n \n                 Err(err)\n             }\n-            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n             Ok(_) => Ok(()),\n         }\n     }"}, {"sha": "ea17f23434bce6c12f56744e6cd14e5cad820bb1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2447,10 +2447,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && generator_did.is_local()\n             // Try to avoid cycles.\n             && !generator_within_in_progress_typeck\n+            && let Some(generator_info) = self.tcx.mir_generator_witnesses(generator_did)\n         {\n-            let generator_info = &self.tcx.mir_generator_witnesses(generator_did);\n             debug!(?generator_info);\n-\n             'find_source: for (variant, source_info) in\n                 generator_info.variant_fields.iter().zip(&generator_info.variant_source_info)\n             {"}, {"sha": "2f85c32b5750de4c8337f0d63bd3f5f48641e64d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -615,7 +615,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         (Err(ErrorHandled::Reported(reported)), _)\n                         | (_, Err(ErrorHandled::Reported(reported))) => ProcessResult::Error(\n                             CodeSelectionError(SelectionError::NotConstEvaluatable(\n-                                NotConstEvaluatable::Error(reported),\n+                                NotConstEvaluatable::Error(reported.into()),\n                             )),\n                         ),\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {"}, {"sha": "1f8a1ecba6e6742a0113c67ebb469e422c05ddde", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -3021,7 +3021,7 @@ impl<'a, K, V, A> CursorMut<'a, K, V, A> {\n         })\n     }\n \n-    /// Returns a mutable reference to the of the element that the cursor is\n+    /// Returns a mutable reference to the key of the element that the cursor is\n     /// currently pointing to.\n     ///\n     /// This returns `None` if the cursor is currently pointing to the"}, {"sha": "82f30a26d41c5257a23e593303552f00341c8dc3", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -646,14 +646,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // These are all done without reallocating...\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     /// assert_eq!(vec.len(), 10);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n@@ -877,7 +877,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec: Vec<i32> = Vec::with_capacity(10);\n     /// vec.push(42);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1028,7 +1028,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n@@ -1055,7 +1055,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n     /// vec.shrink_to(0);\n@@ -1090,7 +1090,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n     ///\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// let slice = vec.into_boxed_slice();\n     /// assert_eq!(slice.into_vec().capacity(), 3);\n     /// ```"}, {"sha": "d1c1ae6526b6ee0b59b28417563bf75ad007badd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -866,7 +866,7 @@ where\n ///\n /// A data provider provides values by calling this type's provide methods.\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n impl<'a> Demand<'a> {"}, {"sha": "744767aae44caa004f6ef25928d97becc8c2c6d6", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2030,6 +2030,27 @@ impl<T> UnsafeCell<T> {\n }\n \n impl<T: ?Sized> UnsafeCell<T> {\n+    /// Converts from `&mut T` to `&mut UnsafeCell<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(unsafe_cell_from_mut)]\n+    /// use std::cell::UnsafeCell;\n+    ///\n+    /// let mut val = 42;\n+    /// let uc = UnsafeCell::from_mut(&mut val);\n+    ///\n+    /// *uc.get_mut() -= 1;\n+    /// assert_eq!(*uc.get_mut(), 41);\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"unsafe_cell_from_mut\", issue = \"111645\")]\n+    pub const fn from_mut(value: &mut T) -> &mut UnsafeCell<T> {\n+        // SAFETY: `UnsafeCell<T>` has the same memory layout as `T` due to #[repr(transparent)].\n+        unsafe { &mut *(value as *mut T as *mut UnsafeCell<T>) }\n+    }\n+\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n     /// This can be cast to a pointer of any kind."}, {"sha": "201bacb28c7ee3381ee453852b1d0753552d7180", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -517,8 +517,6 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(cstr_is_empty)]\n-    ///\n     /// use std::ffi::CStr;\n     /// # use std::ffi::FromBytesWithNulError;\n     ///\n@@ -533,7 +531,8 @@ impl CStr {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"cstr_is_empty\", issue = \"102444\")]\n+    #[stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn is_empty(&self) -> bool {\n         // SAFETY: We know there is at least one byte; for empty strings it\n         // is the NUL terminator."}, {"sha": "b73abbbaca7ad52408b23d1c1c7a3cfb1d73feae", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -203,7 +203,7 @@ mod c_long_definition {\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n #[cfg_attr(not(bootstrap), lang = \"c_void\")]\n-#[repr(u8)]\n+#[cfg_attr(not(doc), repr(u8))] // work around https://github.com/rust-lang/rust/issues/90435\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {\n     #[unstable(\n@@ -244,7 +244,7 @@ impl fmt::Debug for c_void {\n     target_os = \"uefi\",\n     windows,\n ))]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[unstable(\n     feature = \"c_variadic\",\n     reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -296,7 +296,7 @@ impl<'f> fmt::Debug for VaListImpl<'f> {\n     not(target_os = \"uefi\"),\n     not(windows),\n ))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -316,7 +316,7 @@ pub struct VaListImpl<'f> {\n \n /// PowerPC ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"powerpc\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -336,7 +336,7 @@ pub struct VaListImpl<'f> {\n \n /// s390x ABI implementation of a `va_list`.\n #[cfg(target_arch = \"s390x\")]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -355,7 +355,7 @@ pub struct VaListImpl<'f> {\n \n /// x86_64 ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"x86_64\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -373,7 +373,7 @@ pub struct VaListImpl<'f> {\n }\n \n /// A wrapper for a `va_list`\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\","}, {"sha": "ca45683d3d6b5c8a0b1c4f484be7829ebc2792ec", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -986,6 +986,14 @@ pub trait PointerLike {}\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n \n+/// Derive macro generating an impl of the trait `Copy`.\n+#[rustc_builtin_macro]\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[cfg(not(bootstrap))]\n+pub macro ConstParamTy($item:item) {\n+    /* compiler built-in */\n+}\n+\n // FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n // FIXME(generic_const_parameter_types): handle `ty::Tuple`\n marker_impls! {"}, {"sha": "6b319b4355ce67eec50734f027b81527855f93cf", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -393,6 +393,8 @@ use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n /// value in place, preventing the value referenced by that pointer from being moved\n /// unless it implements [`Unpin`].\n ///\n+/// `Pin<P>` is guaranteed to have the same memory layout and ABI as `P`.\n+///\n /// *See the [`pin` module] documentation for an explanation of pinning.*\n ///\n /// [`pin` module]: self"}, {"sha": "7043ab5ff2b41815fa3138fbaf56dd57b01f1af1", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -232,7 +232,7 @@ impl fmt::Debug for Context<'_> {\n ///\n /// [`Future::poll()`]: core::future::Future::poll\n /// [`Poll::Pending`]: core::task::Poll::Pending\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/66401\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n     waker: RawWaker,"}, {"sha": "e0f3c7beef68943daad4461fa70ea9bf4fdc3daa", "filename": "library/portable-simd/crates/core_simd/src/masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -88,7 +88,7 @@ impl_element! { isize }\n /// The layout of this type is unspecified, and may change between platforms\n /// and/or Rust versions, and code should not assume that it is equivalent to\n /// `[T; LANES]`.\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Mask<T, const LANES: usize>(mask_impl::Mask<T, LANES>)\n where\n     T: MaskElement,"}, {"sha": "0a2f5f6653cfd09fcb02f03708abfc6b32843682", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1751,7 +1751,7 @@ fn render_impl(\n             if trait_.is_none() && i.inner_impl().items.is_empty() {\n                 w.write_str(\n                     \"<div class=\\\"item-info\\\">\\\n-                    <div class=\\\"stab empty-impl\\\">This impl block contains no items.</div>\n+                    <div class=\\\"stab empty-impl\\\">This impl block contains no items.</div>\\\n                 </div>\",\n                 );\n             }"}, {"sha": "8f8dc6b709053a24eb9d670d7cffa10ccb3f757f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n-use rustc_hir::intravisit::{walk_item, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_item, Visitor};\n use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -106,6 +106,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n     is_importable_from_parent: bool,\n+    inside_body: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -129,6 +130,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             exact_paths: Default::default(),\n             modules: vec![om],\n             is_importable_from_parent: true,\n+            inside_body: false,\n         }\n     }\n \n@@ -368,6 +370,26 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         import_id: Option<LocalDefId>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n+        if self.inside_body {\n+            // Only impls can be \"seen\" outside a body. For example:\n+            //\n+            // ```\n+            // struct Bar;\n+            //\n+            // fn foo() {\n+            //     impl Bar { fn bar() {} }\n+            // }\n+            // Bar::bar();\n+            // ```\n+            if let hir::ItemKind::Impl(impl_) = item.kind &&\n+                // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n+                // them up regardless of where they're located.\n+                impl_.of_trait.is_none()\n+            {\n+                self.add_to_current_mod(item, None, None);\n+            }\n+            return;\n+        }\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n \n@@ -564,4 +586,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     fn visit_lifetime(&mut self, _: &hir::Lifetime) {\n         // Unneeded.\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx hir::Body<'tcx>) {\n+        let prev = mem::replace(&mut self.inside_body, true);\n+        walk_body(self, b);\n+        self.inside_body = prev;\n+    }\n }"}, {"sha": "533d3f338b804d54e5d0ac4fba6276af23002d9c", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1 +1 @@\n-Subproject commit ea6fa9c2d43aaf0f11559719eda9b54d356d5416\n+Subproject commit 533d3f338b804d54e5d0ac4fba6276af23002d9c"}, {"sha": "09276c703a473ab33daaeb94917232e80eefd628", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1 +1 @@\n-Subproject commit 13413c64ff88dd6c2824e9eb9374fc5f10895d28\n+Subproject commit 09276c703a473ab33daaeb94917232e80eefd628"}, {"sha": "0809837d1fd7661aae2589914ed0afaab25d7f80", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -289,10 +289,11 @@ fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expecte\n     let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n \n     match expected_item {\n-        Item::Lang(expected_lang_item) => {\n-            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n-            cx.tcx.parent(id) == expected_id\n-        },\n+        Item::Lang(expected_lang_item) => cx\n+            .tcx\n+            .lang_items()\n+            .get(expected_lang_item)\n+            .map_or(false, |expected_id| cx.tcx.parent(id) == expected_id),\n         Item::Diag(expected_ty, expected_variant) => {\n             let ty = cx.typeck_results().pat_ty(pat);\n "}, {"sha": "ba68b5ee9d5b445eadbe40a684dcd9f9dc5878e2", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -428,7 +428,6 @@ impl TargetCfgs {\n         ))\n         .unwrap();\n \n-        let mut current = None;\n         let mut all_targets = HashSet::new();\n         let mut all_archs = HashSet::new();\n         let mut all_oses = HashSet::new();\n@@ -449,14 +448,11 @@ impl TargetCfgs {\n             }\n             all_pointer_widths.insert(format!(\"{}bit\", cfg.pointer_width));\n \n-            if target == config.target {\n-                current = Some(cfg);\n-            }\n             all_targets.insert(target.into());\n         }\n \n         Self {\n-            current: current.expect(\"current target not found\"),\n+            current: Self::get_current_target_config(config),\n             all_targets,\n             all_archs,\n             all_oses,\n@@ -467,6 +463,89 @@ impl TargetCfgs {\n             all_pointer_widths,\n         }\n     }\n+\n+    fn get_current_target_config(config: &Config) -> TargetCfg {\n+        let mut arch = None;\n+        let mut os = None;\n+        let mut env = None;\n+        let mut abi = None;\n+        let mut families = Vec::new();\n+        let mut pointer_width = None;\n+        let mut endian = None;\n+        let mut panic = None;\n+\n+        for config in\n+            rustc_output(config, &[\"--print=cfg\", \"--target\", &config.target]).trim().lines()\n+        {\n+            let (name, value) = config\n+                .split_once(\"=\\\"\")\n+                .map(|(name, value)| {\n+                    (\n+                        name,\n+                        Some(\n+                            value\n+                                .strip_suffix(\"\\\"\")\n+                                .expect(\"key-value pair should be properly quoted\"),\n+                        ),\n+                    )\n+                })\n+                .unwrap_or_else(|| (config, None));\n+\n+            match name {\n+                \"target_arch\" => {\n+                    arch = Some(value.expect(\"target_arch should be a key-value pair\").to_string());\n+                }\n+                \"target_os\" => {\n+                    os = Some(value.expect(\"target_os sould be a key-value pair\").to_string());\n+                }\n+                \"target_env\" => {\n+                    env = Some(value.expect(\"target_env should be a key-value pair\").to_string());\n+                }\n+                \"target_abi\" => {\n+                    abi = Some(value.expect(\"target_abi should be a key-value pair\").to_string());\n+                }\n+                \"target_family\" => {\n+                    families\n+                        .push(value.expect(\"target_family should be a key-value pair\").to_string());\n+                }\n+                \"target_pointer_width\" => {\n+                    pointer_width = Some(\n+                        value\n+                            .expect(\"target_pointer_width should be a key-value pair\")\n+                            .parse::<u32>()\n+                            .expect(\"target_pointer_width should be a valid u32\"),\n+                    );\n+                }\n+                \"target_endian\" => {\n+                    endian = Some(match value.expect(\"target_endian should be a key-value pair\") {\n+                        \"big\" => Endian::Big,\n+                        \"little\" => Endian::Little,\n+                        _ => panic!(\"target_endian should be either 'big' or 'little'\"),\n+                    });\n+                }\n+                \"panic\" => {\n+                    panic = Some(match value.expect(\"panic should be a key-value pair\") {\n+                        \"abort\" => PanicStrategy::Abort,\n+                        \"unwind\" => PanicStrategy::Unwind,\n+                        _ => panic!(\"panic should be either 'abort' or 'unwind'\"),\n+                    });\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        TargetCfg {\n+            arch: arch.expect(\"target configuration should specify target_arch\"),\n+            os: os.expect(\"target configuration should specify target_os\"),\n+            env: env.expect(\"target configuration should specify target_env\"),\n+            abi: abi.expect(\"target configuration should specify target_abi\"),\n+            families,\n+            pointer_width: pointer_width\n+                .expect(\"target configuration should specify target_pointer_width\"),\n+            endian: endian.expect(\"target configuration should specify target_endian\"),\n+            panic: panic.expect(\"target configuration should specify panic\"),\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, serde::Deserialize)]"}, {"sha": "e3f81a78eeaf68efdcb26dbab70df92b0690f43a", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -289,7 +289,7 @@ pub fn report_error<'tcx, 'mir>(\n                     (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                 ],\n             InvalidProgram(\n-                InvalidProgramInfo::AlreadyReported(rustc_errors::ErrorGuaranteed { .. })\n+                InvalidProgramInfo::AlreadyReported(_)\n             ) => {\n                 // This got already reported. No point in reporting it again.\n                 return None;"}, {"sha": "893a4dbd4c890a7ba8d9f89f470cc95e265090a8", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -47,7 +47,6 @@ extern crate rustc_ast;\n extern crate rustc_middle;\n extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_index;\n extern crate rustc_session;"}, {"sha": "a09c795924cd2a0b71d4f3ebeb1798e2fbef6508", "filename": "tests/codegen/fewer-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Ffewer-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Ffewer-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffewer-names.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -13,8 +13,8 @@ pub fn sum(x: u32, y: u32) -> u32 {\n \n     // NO-LABEL: define{{.*}}i32 @sum(i32 noundef %x, i32 noundef %y)\n     // NO-NEXT:  start:\n-    // NO-NEXT:    %z = add i32 %y, %x\n-    // NO-NEXT:    ret i32 %z\n+    // NO-NEXT:    %0 = add i32 %y, %x\n+    // NO-NEXT:    ret i32 %0\n     let z = x + y;\n     z\n }"}, {"sha": "c6b920cf599366cffadc0d96a97c2d1c7211bf2e", "filename": "tests/codegen/mem-replace-big-type.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Fmem-replace-big-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Fmem-replace-big-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-big-type.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -13,8 +13,7 @@ pub struct Big([u64; 7]);\n pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n     // Back in 1.68, this emitted six `memcpy`s.\n     // `read_via_copy` in 1.69 got that down to three.\n-    // `write_via_move` it was originally down to the essential two, however\n-    // with nrvo disabled it is back at 3\n+    // `write_via_move` and nvro get this down to the essential two.\n     std::mem::replace(dst, src)\n }\n \n@@ -26,11 +25,9 @@ pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n // For a large type, we expect exactly three `memcpy`s\n // CHECK-LABEL: define internal void @{{.+}}mem{{.+}}replace{{.+}}sret(%Big)\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %result, {{i8\\*|ptr}} align 8 %dest, i{{.*}} 56, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %0, {{i8\\*|ptr}} align 8 %dest, i{{.*}} 56, i1 false)\n // CHECK-NOT: call void @llvm.memcpy\n // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %dest, {{i8\\*|ptr}} align 8 %src, i{{.*}} 56, i1 false)\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %0, {{i8\\*|ptr}} align 8 %result, i{{.*}} 56, i1 false)\n-// CHECK-NOT: call void @llvm.memcpy\n \n // CHECK-NOT: call void @llvm.memcpy"}, {"sha": "53841df32e8d66bf069bbcd80a28d4edcc5b866b", "filename": "tests/codegen/var-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Fvar-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fcodegen%2Fvar-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvar-names.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,7 +9,7 @@ pub fn test(a: u32, b: u32) -> u32 {\n     // CHECK: %c = add i32 %a, %b\n     let d = c;\n     let e = d * a;\n-    // CHECK-NEXT: %e = mul i32 %c, %a\n+    // CHECK-NEXT: %0 = mul i32 %c, %a\n     e\n-    // CHECK-NEXT: ret i32 %e\n+    // CHECK-NEXT: ret i32 %0\n }"}, {"sha": "15117ea890e386c0edab57afd69b04dc37925b64", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstSimplify.diff", "status": "modified", "additions": 49, "deletions": 117, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,59 +4,29 @@\n   fn adt_transmutes() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:32: +0:32\n       let _1: u8;                          // in scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-      let mut _2: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-      let mut _4: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-      let mut _6: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-      let mut _8: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+4:31: +4:47\n-      let mut _10: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-      let mut _12: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+6:28: +6:52\n-      let mut _14: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-      let mut _16: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+8:29: +8:54\n-      let mut _18: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-      let mut _20: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-      let mut _22: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-      let mut _24: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+      let mut _2: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+      let mut _4: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+      let mut _6: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+      let mut _8: Union32;                 // in scope 0 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+      let mut _10: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+      let mut _12: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+6:46: +6:77\n       scope 1 {\n           debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          let _3: i8;                      // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          let _3: i16;                     // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n           scope 2 {\n               debug _a => _3;              // in scope 2 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-              let _5: usize;               // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+              let _5: u16;                 // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n               scope 3 {\n                   debug _a => _5;          // in scope 3 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-                  let _7: isize;           // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+                  let _7: u32;             // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n                   scope 4 {\n                       debug _a => _7;      // in scope 4 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-                      let _9: u8;          // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+                      let _9: i32;         // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n                       scope 5 {\n                           debug _a => _9;  // in scope 5 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-                          let _11: i8;     // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                          let _11: std::mem::ManuallyDrop<std::string::String>; // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n                           scope 6 {\n                               debug _a => _11; // in scope 6 at $DIR/combine_transmutes.rs:+6:9: +6:11\n-                              let _13: u8; // in scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-                              scope 7 {\n-                                  debug _a => _13; // in scope 7 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-                                  let _15: i16; // in scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-                                  scope 8 {\n-                                      debug _a => _15; // in scope 8 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-                                      let _17: u16; // in scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-                                      scope 9 {\n-                                          debug _a => _17; // in scope 9 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-                                          let _19: u32; // in scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-                                          scope 10 {\n-                                              debug _a => _19; // in scope 10 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-                                              let _21: i32; // in scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-                                              scope 11 {\n-                                                  debug _a => _21; // in scope 11 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-                                                  let _23: std::mem::ManuallyDrop<std::string::String>; // in scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-                                                  scope 12 {\n-                                                      debug _a => _23; // in scope 12 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-                                                  }\n-                                              }\n-                                          }\n-                                      }\n-                                  }\n-                              }\n                           }\n                       }\n                   }\n@@ -66,93 +36,55 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-          _2 = EnumNoRepr::A;              // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:42\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:41: +1:42\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+          _2 = Option::<NonZeroU8>::Some(const _); // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_transmutes.rs:35:33: 35:57\n+                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n+          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:59\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:58: +1:59\n           StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-          _4 = EnumNoRepr::B;              // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-          _3 = move _4 as i8 (Transmute);  // scope 1 at $DIR/combine_transmutes.rs:+2:18: +2:42\n-          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:41: +2:42\n+          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+          _4 = Wrapping::<i16>(const 0_i16); // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+-         _3 = move _4 as i16 (Transmute); // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n++         _3 = move (_4.0: i16);           // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n+          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:54: +2:55\n           StorageLive(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-          _6 = EnumReprIsize::A;           // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-          _5 = move _6 as usize (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:21: +3:48\n-          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:47: +3:48\n+          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+          _6 = Wrapping::<i16>(const 0_i16); // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+          _5 = move _6 as u16 (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:19: +3:55\n+          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:54: +3:55\n           StorageLive(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n-          _8 = EnumReprIsize::B;           // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n--         _7 = move _8 as isize (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n-+         _7 = discriminant(_8);           // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n+          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+          _8 = Union32 { u32: const 0_i32 }; // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+          _7 = move _8 as u32 (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:19: +4:48\n           StorageDead(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:47: +4:48\n           StorageLive(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-          _10 = Less;                      // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-          _9 = move _10 as u8 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:18: +5:53\n-          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:52: +5:53\n+          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+          _10 = Union32 { u32: const 0_u32 }; // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+          _9 = move _10 as i32 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:19: +5:48\n+          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:47: +5:48\n           StorageLive(_11);                // scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n-          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n-          _12 = Less;                      // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n--         _11 = move _12 as i8 (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n-+         _11 = discriminant(_12);         // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n-          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:52: +6:53\n-          StorageLive(_13);                // scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-          StorageLive(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-          _14 = Option::<NonZeroU8>::Some(const _); // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:41:33: 41:57\n-                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n-          _13 = move _14 as u8 (Transmute); // scope 6 at $DIR/combine_transmutes.rs:+7:18: +7:59\n-          StorageDead(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:58: +7:59\n-          StorageLive(_15);                // scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-          StorageLive(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n-          _16 = Wrapping::<i16>(const 0_i16); // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n--         _15 = move _16 as i16 (Transmute); // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n-+         _15 = move (_16.0: i16);         // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n-          StorageDead(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:54: +8:55\n-          StorageLive(_17);                // scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-          StorageLive(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-          _18 = Wrapping::<i16>(const 0_i16); // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-          _17 = move _18 as u16 (Transmute); // scope 8 at $DIR/combine_transmutes.rs:+9:19: +9:55\n-          StorageDead(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:54: +9:55\n-          StorageLive(_19);                // scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-          StorageLive(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-          _20 = Union32 { u32: const 0_i32 }; // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-          _19 = move _20 as u32 (Transmute); // scope 9 at $DIR/combine_transmutes.rs:+10:19: +10:48\n-          StorageDead(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:47: +10:48\n-          StorageLive(_21);                // scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-          StorageLive(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-          _22 = Union32 { u32: const 0_u32 }; // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-          _21 = move _22 as i32 (Transmute); // scope 10 at $DIR/combine_transmutes.rs:+11:19: +11:48\n-          StorageDead(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:47: +11:48\n-          StorageLive(_23);                // scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-          StorageLive(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n-          _24 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n+          _12 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n                                            // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:46:46: 46:75\n-                                           // + user_ty: UserType(23)\n+                                           // + span: $DIR/combine_transmutes.rs:40:46: 40:75\n+                                           // + user_ty: UserType(11)\n                                            // + literal: Const { ty: fn() -> MaybeUninit<String> {MaybeUninit::<String>::uninit}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         _23 = move _24 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n-+         _23 = move (_24.1: std::mem::ManuallyDrop<std::string::String>); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n-          StorageDead(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:77: +12:78\n-          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +13:2\n-          StorageDead(_23);                // scope 11 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_21);                // scope 10 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_19);                // scope 9 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_17);                // scope 8 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_15);                // scope 7 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_13);                // scope 6 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          return;                          // scope 0 at $DIR/combine_transmutes.rs:+13:2: +13:2\n+-         _11 = move _12 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n++         _11 = move (_12.1: std::mem::ManuallyDrop<std::string::String>); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n+          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:77: +6:78\n+          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +7:2\n+          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/combine_transmutes.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "403f9356ce210fbafcf39bc5560e6756a79d5c30", "filename": "tests/mir-opt/combine_transmutes.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcombine_transmutes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcombine_transmutes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -32,12 +32,6 @@ pub unsafe fn integer_transmutes() {\n \n // EMIT_MIR combine_transmutes.adt_transmutes.InstSimplify.diff\n pub unsafe fn adt_transmutes() {\n-    let _a: u8 = transmute(EnumNoRepr::A);\n-    let _a: i8 = transmute(EnumNoRepr::B);\n-    let _a: usize = transmute(EnumReprIsize::A);\n-    let _a: isize = transmute(EnumReprIsize::B);\n-    let _a: u8 = transmute(std::cmp::Ordering::Less);\n-    let _a: i8 = transmute(std::cmp::Ordering::Less);\n     let _a: u8 = transmute(Some(std::num::NonZeroU8::MAX));\n     let _a: i16 = transmute(std::num::Wrapping(0_i16));\n     let _a: u16 = transmute(std::num::Wrapping(0_i16));\n@@ -46,20 +40,4 @@ pub unsafe fn adt_transmutes() {\n     let _a: ManuallyDrop<String> = transmute(MaybeUninit::<String>::uninit());\n }\n \n-#[inline(always)]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n-const unsafe fn mir_transmute<T, U>(x: T) -> U {\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n-}\n-\n-pub enum EnumNoRepr { A, B, C }\n-\n-#[repr(isize)]\n-pub enum EnumReprIsize { A, B, C }\n-\n pub union Union32 { u32: u32, i32: i32 }"}, {"sha": "1c7b6494d6dcc1e4d88a509f8e58a6eeca1258cb", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,15 +6,17 @@\n       let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n       let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n       scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n++         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n           _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n-          _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "a5129e0e8c8e11fbf53c11186d47fd35d6498635", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -16,8 +16,7 @@\n +         let mut _4: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         let mut _5: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         let mut _6: *mut u8;             // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         let mut _7: std::boxed::Box<std::vec::Vec<u32>>; // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         let mut _8: *const std::vec::Vec<u32>; // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _7: *const std::vec::Vec<u32>; // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         scope 4 {\n +         }\n +     }\n@@ -66,12 +65,9 @@\n       bb3: {\n -         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n -         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n-+         StorageLive(_7);                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         _7 = ShallowInitBox(move _6, std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         _8 = (((_7.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         (*_8) = move _2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         _1 = move _7;                    // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-+         StorageDead(_7);                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         (*_7) = move _2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:48: +1:49\n +         _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n +         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2"}, {"sha": "21570a88a6be075325727438e7e93229734edcf3", "filename": "tests/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -8,22 +8,18 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:8:7: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _6: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _7: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _5: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _6: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-        StorageLive(_5);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:7: +1:15\n-        _6 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _7 = (((_6.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _5 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _3 = _5;                         // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_5);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:7: +1:15\n+        _5 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = (((_5.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _3 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15"}, {"sha": "4f9342247d70e8c611bb124b1bdd40f4e7fb3569", "filename": "tests/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,21 +7,17 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:18:7: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let _4: &T;                      // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _5: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _6: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _5: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _5 = deref_copy (*_3);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = (((_5.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _4 = &(*_6);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _2 = _4;                         // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _4 = deref_copy (*_3);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _5 = (((_4.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*_5);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2"}, {"sha": "d76cd0e2bb818935d51abd29dc0e3d45e479354b", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 115, "deletions": 14, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -12,7 +12,51 @@\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         let mut _6: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         let mut _7: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         scope 2 {\n++             scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 debug x => _7;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 let mut _8: std::option::Option<u16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 let mut _9: std::result::Result<u16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 scope 4 {\n++                     scope 5 (inlined <u32 as TryInto<u16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _7; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                         scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                             debug u => _7; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _10: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _11: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _12: u16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                         }\n++                     }\n++                     scope 7 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _9; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         let mut _13: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         let _14: u16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         scope 8 {\n++                             debug x => _14; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         }\n++                     }\n++                     scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _8; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         let mut _15: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         let mut _16: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 10 {\n++                             debug val => _5; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         }\n++                         scope 11 {\n++                             scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                                 scope 14 {\n++                                     scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                                     }\n++                                 }\n++                             }\n++                         }\n++                         scope 12 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                             debug self => _15; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         }\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -22,30 +66,87 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n+-                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n +         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         _6 = (_4,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+         _5 = core::num::<impl u16>::unchecked_shl::conv(move (_6.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n--                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+                                          // + literal: Const { ty: fn(u32) -> u16 {core::num::<impl u16>::unchecked_shl::conv}, val: Value(<ZST>) }\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _7 = move (_6.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _11 = const 65535_u32;           // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _10 = Gt(_7, move _11);          // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                                          // mir::Constant\n-+                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n-+     }\n-+ \n-+     bb2: {\n +         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         _9 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n++         goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _12 = _7 as u16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _9 = Result::<u16, TryFromIntError>::Ok(move _12); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n++     bb4: {\n++         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _13 = discriminant(_9);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         _8 = Option::<u16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _14 = move ((_9 as Ok).0: u16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _8 = Option::<u16>::Some(move _14); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb8: {\n++         StorageDead(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _16 = discriminant(_8);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _16) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb9: {\n++         _5 = move ((_8 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "3c175ed1504f675566bba977c1a77bc12204e4b8", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 110, "deletions": 10, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,30 +9,130 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _5: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n+            scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                debug x => _5;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _6: std::option::Option<u16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _7: std::result::Result<u16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                scope 4 {\n+                    scope 5 (inlined <u32 as TryInto<u16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _5; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                        scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                            debug u => _5; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _8: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _9: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _10: u16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                        }\n+                    }\n+                    scope 7 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _7; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let mut _11: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let _12: u16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        scope 8 {\n+                            debug x => _12; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        }\n+                    }\n+                    scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _6; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _13: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _14: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 10 {\n+                            debug val => _3; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        }\n+                        scope 11 {\n+                            scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                scope 14 {\n+                                    scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        scope 12 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug self => _13; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n \n     bb0: {\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _3 = core::num::<impl u16>::unchecked_shl::conv(move (_4.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                         // + literal: Const { ty: fn(u32) -> u16 {core::num::<impl u16>::unchecked_shl::conv}, val: Value(<ZST>) }\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _5 = move (_4.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _9 = const 65535_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Gt(_5, move _9);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb2: {\n+        _7 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n+        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _10 = _5 as u16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = Result::<u16, TryFromIntError>::Ok(move _10); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _11 = discriminant(_7);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        _6 = Option::<u16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _12 = move ((_7 as Ok).0: u16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _6 = Option::<u16>::Some(move _12); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _14) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        _3 = move ((_6 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n     }\n-\n-    bb2: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n-    }\n }"}, {"sha": "f3d3e6090bb3c76a3e9a194b3937e180c80e0439", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 115, "deletions": 14, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -12,7 +12,51 @@\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         let mut _6: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         let mut _7: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         scope 2 {\n++             scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 debug x => _7;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 let mut _8: std::option::Option<i16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 let mut _9: std::result::Result<i16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                 scope 4 {\n++                     scope 5 (inlined <u32 as TryInto<i16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _7; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                         scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                             debug u => _7; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _10: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _11: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                             let mut _12: i16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                         }\n++                     }\n++                     scope 7 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _9; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         let mut _13: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         let _14: i16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         scope 8 {\n++                             debug x => _14; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++                         }\n++                     }\n++                     scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                         debug self => _8; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         let mut _15: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         let mut _16: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 10 {\n++                             debug val => _5; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         }\n++                         scope 11 {\n++                             scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                                 scope 14 {\n++                                     scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                                     }\n++                                 }\n++                             }\n++                         }\n++                         scope 12 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                             debug self => _15; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n++                         }\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -22,30 +66,87 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n+-                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n +         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         _6 = (_4,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+         _5 = core::num::<impl i16>::unchecked_shr::conv(move (_6.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n--                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+                                          // + literal: Const { ty: fn(u32) -> i16 {core::num::<impl i16>::unchecked_shr::conv}, val: Value(<ZST>) }\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _7 = move (_6.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _11 = const 32767_u32;           // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _10 = Gt(_7, move _11);          // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                                          // mir::Constant\n-+                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n-+     }\n-+ \n-+     bb2: {\n +         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         _9 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n++         goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _12 = _7 as i16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _9 = Result::<i16, TryFromIntError>::Ok(move _12); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n++     bb4: {\n++         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _13 = discriminant(_9);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         _8 = Option::<i16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _14 = move ((_9 as Ok).0: i16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _8 = Option::<i16>::Some(move _14); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb8: {\n++         StorageDead(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _16 = discriminant(_8);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _16) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb9: {\n++         _5 = move ((_8 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "724b3c56723a3b301b3c044e96647a078eed086b", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 110, "deletions": 10, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,30 +9,130 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _5: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n+            scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                debug x => _5;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _6: std::option::Option<i16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _7: std::result::Result<i16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                scope 4 {\n+                    scope 5 (inlined <u32 as TryInto<i16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _5; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                        scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                            debug u => _5; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _8: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _9: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _10: i16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                        }\n+                    }\n+                    scope 7 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _7; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let mut _11: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let _12: i16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        scope 8 {\n+                            debug x => _12; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        }\n+                    }\n+                    scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        debug self => _6; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _13: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _14: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 10 {\n+                            debug val => _3; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        }\n+                        scope 11 {\n+                            scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                scope 14 {\n+                                    scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        scope 12 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug self => _13; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n \n     bb0: {\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _3 = core::num::<impl i16>::unchecked_shr::conv(move (_4.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                         // + literal: Const { ty: fn(u32) -> i16 {core::num::<impl i16>::unchecked_shr::conv}, val: Value(<ZST>) }\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _5 = move (_4.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _9 = const 32767_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Gt(_5, move _9);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb2: {\n+        _7 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n+        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _10 = _5 as i16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = Result::<i16, TryFromIntError>::Ok(move _10); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _11 = discriminant(_7);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        _6 = Option::<i16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _12 = move ((_7 as Ok).0: i16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _6 = Option::<i16>::Some(move _12); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _14) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        _3 = move ((_6 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n     }\n-\n-    bb2: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n-    }\n }"}, {"sha": "8a8cd896e85db1f2c0d3fa1f1af36077cf2d31e2", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.Inline.diff", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,9 +9,8 @@\n +         debug self => _2;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n +         let mut _3: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n +         let mut _4: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         let _5: T;                       // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n +         scope 2 {\n-+             debug val => _5;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n++             debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n +         }\n +         scope 3 {\n +             scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -47,10 +46,7 @@\n -     bb2 (cleanup): {\n -         resume;                          // scope 0 at $DIR/unwrap_unchecked.rs:+0:1: +2:2\n +     bb2: {\n-+         StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         _5 = move ((_2 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         _0 = move _5;                    // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         _0 = move ((_2 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n +         StorageDead(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n +         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:26: +1:27\n +         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2"}, {"sha": "c5e2469fc27c60c3ade8b7d15ac1f012951a0021", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,9 +7,8 @@ fn unwrap_unchecked(_1: Option<T>) -> T {\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _2: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let _4: T;                       // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 2 {\n-            debug val => _4;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n         scope 3 {\n             scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -35,10 +34,7 @@ fn unwrap_unchecked(_1: Option<T>) -> T {\n     }\n \n     bb2: {\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        _4 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        _0 = move _4;                    // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _0 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n     }"}, {"sha": "0424ce3abeb2edbf326715a4bd28b162d7b4ec53", "filename": "tests/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: DefId(0:8 ~ issue_99325[22bb]::main::{constant#1}), substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)]) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated([], DefId(0:8 ~ issue_99325[22bb]::main::{constant#1})) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_99325.rs:+0:15: +0:15"}, {"sha": "c425f3cd5069b819e91fa0fcd13477f1b9e221f4", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const(Value(Leaf(0x00000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const { ty: usize, kind: Leaf(0x00000003) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "22ad24f8d772499e55bb6e3570b84e673e805c63", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const { ty: usize, kind: Leaf(0x0000000000000003) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "1d23871029d9619ce5dbb1ceeff52478249f0ef6", "filename": "tests/mir-opt/pre-codegen/mem_replace.manual_replace.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,17 +4,13 @@ fn manual_replace(_1: &mut u32, _2: u32) -> u32 {\n     debug r => _1;                       // in scope 0 at $DIR/mem_replace.rs:+0:23: +0:24\n     debug v => _2;                       // in scope 0 at $DIR/mem_replace.rs:+0:36: +0:37\n     let mut _0: u32;                     // return place in scope 0 at $DIR/mem_replace.rs:+0:47: +0:50\n-    let _3: u32;                         // in scope 0 at $DIR/mem_replace.rs:+1:9: +1:13\n     scope 1 {\n-        debug temp => _3;                // in scope 1 at $DIR/mem_replace.rs:+1:9: +1:13\n+        debug temp => _0;                // in scope 1 at $DIR/mem_replace.rs:+1:9: +1:13\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/mem_replace.rs:+1:9: +1:13\n-        _3 = (*_1);                      // scope 0 at $DIR/mem_replace.rs:+1:16: +1:18\n+        _0 = (*_1);                      // scope 0 at $DIR/mem_replace.rs:+1:16: +1:18\n         (*_1) = _2;                      // scope 1 at $DIR/mem_replace.rs:+2:5: +2:11\n-        _0 = _3;                         // scope 1 at $DIR/mem_replace.rs:+3:5: +3:9\n-        StorageDead(_3);                 // scope 0 at $DIR/mem_replace.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/mem_replace.rs:+4:2: +4:2\n     }\n }"}, {"sha": "50e0538c133684a4dddf1f59d0fe9d1f873f1afd", "filename": "tests/mir-opt/pre-codegen/mem_replace.mem_replace.PreCodegen.after.mir", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,29 +7,28 @@ fn mem_replace(_1: &mut u32, _2: u32) -> u32 {\n     scope 1 (inlined std::mem::replace::<u32>) { // at $DIR/mem_replace.rs:16:5: 16:28\n         debug dest => _1;                // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n         debug src => _2;                 // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        let mut _4: *const u32;          // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        let mut _5: *mut u32;            // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _3: *const u32;          // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _4: *mut u32;            // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n         scope 2 {\n-            let _3: u32;                 // in scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n             scope 3 {\n-                debug result => _3;      // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                debug result => _0;      // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                 scope 7 (inlined std::ptr::write::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-                    debug dst => _5;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    debug dst => _4;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                     debug src => _2;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                    let mut _7: *mut u32; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    let mut _6: *mut u32; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                     scope 8 {\n                         scope 9 (inlined std::ptr::write::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                            debug dst => _7; // in scope 9 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug dst => _6; // in scope 9 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                         }\n                     }\n                 }\n             }\n             scope 4 (inlined std::ptr::read::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-                debug src => _4;         // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                let mut _6: *const u32;  // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                debug src => _3;         // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                let mut _5: *const u32;  // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                 scope 5 {\n                     scope 6 (inlined std::ptr::read::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                        debug src => _6; // in scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug src => _5; // in scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                     }\n                 }\n             }\n@@ -38,20 +37,17 @@ fn mem_replace(_1: &mut u32, _2: u32) -> u32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        _4 = &raw const (*_1);           // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        _3 = (*_4);                      // scope 5 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        _5 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        (*_5) = _2;                      // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-        _0 = move _3;                    // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _0 = (*_3);                      // scope 5 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n         StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _4 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        (*_4) = _2;                      // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n         return;                          // scope 0 at $DIR/mem_replace.rs:+2:2: +2:2\n     }\n }"}, {"sha": "7a10b929ebd096a29d8cef0004ea7d86cffd8aaa", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "status": "modified", "additions": 60, "deletions": 62, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,63 +7,62 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n     scope 1 (inlined core::slice::<impl [u32]>::get_unchecked_mut::<std::ops::Range<usize>>) { // at $DIR/slice_index.rs:26:11: 26:35\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         debug index => _2;               // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        let mut _3: &mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        let mut _3: *mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         let mut _4: *mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        let mut _5: *mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         scope 2 {\n             scope 3 (inlined <std::ops::Range<usize> as SliceIndex<[u32]>>::get_unchecked_mut) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n                 debug self => _2;        // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                debug slice => _5;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let _6: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                debug slice => _4;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let _5: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _7: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                 let mut _8: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _9: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _9: *mut u32;    // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                 let mut _10: *mut u32;   // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _11: *mut u32;   // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _11: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                 let mut _12: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _13: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _14: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                let mut _15: *mut [u32]; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _13: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _14: *mut [u32]; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                 scope 4 {\n-                    debug this => _6;    // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                    debug this => _5;    // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                     scope 5 {\n-                        let _7: usize;   // in scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                        let _6: usize;   // in scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                         scope 6 {\n-                            debug new_len => _7; // in scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                            debug new_len => _6; // in scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                             scope 11 (inlined ptr::mut_ptr::<impl *mut [u32]>::as_mut_ptr) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _5; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _4; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                             }\n                             scope 12 (inlined ptr::mut_ptr::<impl *mut u32>::add) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _11; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                debug count => _12; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _10; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug count => _11; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 13 {\n                                 }\n                             }\n                             scope 14 (inlined slice_from_raw_parts_mut::<u32>) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug data => _10; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                debug len => _13; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                debug data => _9; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                debug len => _12; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                let mut _16: *mut (); // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                 scope 15 (inlined ptr::mut_ptr::<impl *mut u32>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                    debug self => _10; // in scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                    let mut _17: *mut (); // in scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                    debug self => _9; // in scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 }\n                                 scope 16 (inlined std::ptr::from_raw_parts_mut::<[u32]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                    debug data_address => _17; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    debug metadata => _13; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _18: std::ptr::metadata::PtrRepr<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _19: std::ptr::metadata::PtrComponents<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _20: *const (); // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug data_address => _16; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug metadata => _12; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _17: std::ptr::metadata::PtrRepr<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _18: std::ptr::metadata::PtrComponents<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _19: *const (); // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n                                     scope 17 {\n                                     }\n                                 }\n                             }\n                         }\n                         scope 7 (inlined <std::ops::Range<usize> as SliceIndex<[T]>>::get_unchecked_mut::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                            debug this => _14; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                            debug slice => _15; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug this => _13; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug slice => _14; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             scope 8 (inlined ptr::mut_ptr::<impl *mut [u32]>::len) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _15; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                let mut _16: *const [u32]; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _14; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                let mut _15: *const [u32]; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 9 (inlined std::ptr::metadata::<[u32]>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                    debug ptr => _16; // in scope 9 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug ptr => _15; // in scope 9 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n                                     scope 10 {\n                                     }\n                                 }\n@@ -76,61 +75,60 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n     }\n \n     bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _4 = &raw mut (*_1);             // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _5 = &raw mut (*_1);             // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_14);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_15);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_16);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _7 = (_2.1: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _8 = (_2.1: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _9 = (_2.0: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _7 = unchecked_sub::<usize>(move _8, move _9) -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _8 = (_2.0: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _6 = unchecked_sub::<usize>(move _7, move _8) -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize, usize) -> usize {unchecked_sub::<usize>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _10 = _4 as *mut u32 (PtrToPtr); // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n         StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _11 = _5 as *mut u32 (PtrToPtr); // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _12 = (_2.0: usize);             // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _10 = Offset(_11, _12);          // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _11 = (_2.0: usize);             // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _9 = Offset(_10, _11);           // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n         StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_13);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _13 = _7;                        // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_17);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _17 = _10 as *mut () (PtrToPtr); // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _12 = _6;                        // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _16 = _9 as *mut () (PtrToPtr);  // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_17);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n         StorageLive(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n         StorageLive(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageLive(_20);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _20 = _17 as *const () (Pointer(MutToConstPointer)); // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _19 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _20, metadata: _13 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_20);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _18 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _19 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _19 = _16 as *const () (Pointer(MutToConstPointer)); // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _18 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _19, metadata: _12 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n         StorageDead(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _4 = (_18.1: *mut [u32]);        // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_18);                // scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_17);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_13);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_16);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _17 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _18 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _3 = (_17.1: *mut [u32]);        // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_17);                // scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_15);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageDead(_14);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _3 = &mut (*_4);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _0 = _3;                         // scope 0 at $DIR/slice_index.rs:+1:5: +1:35\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _0 = &mut (*_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         return;                          // scope 0 at $DIR/slice_index.rs:+2:2: +2:2\n     }\n }"}, {"sha": "dcf79a4a4e7fdd02e7b6a9050c5ae7bdd879c7e6", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_index_range.PreCodegen.after.mir", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_index_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_index_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_index_range.PreCodegen.after.mir?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,25 +4,23 @@ fn slice_index_range(_1: &[u32], _2: std::ops::Range<usize>) -> &[u32] {\n     debug slice => _1;                   // in scope 0 at $DIR/slice_index.rs:+0:26: +0:31\n     debug index => _2;                   // in scope 0 at $DIR/slice_index.rs:+0:41: +0:46\n     let mut _0: &[u32];                  // return place in scope 0 at $DIR/slice_index.rs:+0:65: +0:71\n-    let _3: &[u32];                      // in scope 0 at $DIR/slice_index.rs:+1:6: +1:18\n     scope 1 (inlined #[track_caller] core::slice::index::<impl Index<std::ops::Range<usize>> for [u32]>::index) { // at $DIR/slice_index.rs:21:6: 21:18\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         debug index => _2;               // in scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        let _4: &[u32];                  // in scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        let _3: &[u32];                  // in scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _4 = <std::ops::Range<usize> as SliceIndex<[u32]>>::index(move _2, _1) -> bb1; // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _3 = <std::ops::Range<usize> as SliceIndex<[u32]>>::index(move _2, _1) -> bb1; // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // + literal: Const { ty: for<'a> fn(std::ops::Range<usize>, &'a [u32]) -> &'a <std::ops::Range<usize> as SliceIndex<[u32]>>::Output {<std::ops::Range<usize> as SliceIndex<[u32]>>::index}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        _3 = _4;                         // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _0 = _3;                         // scope 0 at $DIR/slice_index.rs:+1:5: +1:18\n+        _0 = _3;                         // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         return;                          // scope 0 at $DIR/slice_index.rs:+2:2: +2:2\n     }\n }"}, {"sha": "efa54d91dcaacedf42dc3e2fc9a4b875c4860ce1", "filename": "tests/rustdoc-json/impls/impl_item_visibility.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,26 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// @!has '$.index[*][?(@.docs==\"impl Foo priv\")]'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "3c6fefc4ca29ff99d94249e4d0f5ce757e546734", "filename": "tests/rustdoc-json/impls/impl_item_visibility_show_hidden.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: --document-hidden-items\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo priv\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "b98d1e4167cedce5af887cf41bd3f3fa058243bb", "filename": "tests/rustdoc-json/impls/impl_item_visibility_show_private.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: --document-private-items\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo priv\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "9b7688c332c44e05691f6d38cff157e1635bff70", "filename": "tests/rustdoc/nested-items-issue-111415.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnested-items-issue-111415.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/111415>.\n+// This test ensures that only impl blocks are documented in bodies.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Checking there are only three sections.\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Functions'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Traits'\n+// Checking that there are only three items.\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"item-name\"]' 3\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"struct.Bar.html\"]' 'Bar'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"fn.foo.html\"]' 'foo'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"trait.Foo.html\"]' 'Foo'\n+\n+// Now checking that the `foo` method is visible in `Bar` page.\n+// @has 'foo/struct.Bar.html'\n+// @has - '//*[@id=\"method.foo\"]/*[@class=\"code-header\"]' 'pub fn foo()'\n+// @has - '//*[@id=\"method.bar\"]/*[@class=\"code-header\"]' 'fn bar()'\n+pub struct Bar;\n+\n+pub trait Foo {\n+    fn bar() {}\n+}\n+\n+pub fn foo() {\n+    pub mod inaccessible {}\n+    pub fn inner() {}\n+    pub const BAR: u32 = 0;\n+    impl Bar {\n+        pub fn foo() {}\n+    }\n+    impl Foo for Bar {}\n+}"}, {"sha": "addbe5d658aee5e10fe67db2a75f8a55e99ee5cd", "filename": "tests/ui/borrowck/erase-error-in-mir-drop-tracking.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Zdrop-tracking-mir\n+// edition:2021\n+\n+use std::future::Future;\n+\n+trait Client {\n+    type Connecting<'a>: Future + Send\n+    where\n+        Self: 'a;\n+\n+    fn connect(&'_ self) -> Self::Connecting<'a>;\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+}\n+\n+fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+where\n+    C: Client + Send + Sync,\n+{\n+    async move { c.connect().await }\n+    //~^ ERROR `C` does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "53abe3dc9521d2d6c31af99aa8e46369f3061fc0", "filename": "tests/ui/borrowck/erase-error-in-mir-drop-tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,24 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/erase-error-in-mir-drop-tracking.rs:11:46\n+   |\n+LL |     fn connect(&'_ self) -> Self::Connecting<'a>;\n+   |                                              ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn connect<'a>(&'_ self) -> Self::Connecting<'a>;\n+   |               ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | trait Client<'a> {\n+   |             ++++\n+\n+error: `C` does not live long enough\n+  --> $DIR/erase-error-in-mir-drop-tracking.rs:19:5\n+   |\n+LL |     async move { c.connect().await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "87ae83dd9660364cc6e58b1267a026caa6c8521f", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -11,6 +11,13 @@ struct S<T> {\n \n impl<T: ConstParamTy> ConstParamTy for S<T> {}\n \n+#[derive(PartialEq, Eq, ConstParamTy)]\n+struct D<T> {\n+    field: u8,\n+    gen: T,\n+}\n+\n+\n fn check<T: ConstParamTy + ?Sized>() {}\n \n fn main() {\n@@ -39,5 +46,8 @@ fn main() {\n     check::<S<u8>>();\n     check::<S<[&[bool]; 8]>>();\n \n+    check::<D<u8>>();\n+    check::<D<[&[bool]; 8]>>();\n+\n     // FIXME: test tuples\n }"}, {"sha": "74283a37afcaf071d33dbefdf770e789a9be39c1", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -10,4 +10,8 @@ struct CantParam(NotParam);\n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the trait `ConstParamTy` cannot be implemented for this type\n \n+#[derive(std::marker::ConstParamTy, Eq, PartialEq)]\n+//~^ error: the trait `ConstParamTy` cannot be implemented for this type\n+struct CantParamDerive(NotParam);\n+\n fn main() {}"}, {"sha": "52b65d6061ab502515953f3018fe78baa3ac99fc", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,6 +7,17 @@ LL |\n LL | impl std::marker::ConstParamTy for CantParam {}\n    |                                    ^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0204]: the trait `ConstParamTy` cannot be implemented for this type\n+  --> $DIR/const_param_ty_impl_bad_field.rs:13:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy, Eq, PartialEq)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct CantParamDerive(NotParam);\n+   |                        -------- this field does not implement `ConstParamTy`\n+   |\n+   = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0204`."}, {"sha": "37986de481f111a9662557202aa2268bc9b979d3", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -10,6 +10,10 @@ struct CantParam(ImplementsConstParamTy);\n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the type `CantParam` does not `#[derive(Eq)]`\n \n+#[derive(std::marker::ConstParamTy)]\n+//~^ error: the type `CantParamDerive` does not `#[derive(Eq)]`\n+struct CantParamDerive(ImplementsConstParamTy);\n+\n fn check<T: std::marker::ConstParamTy>() {}\n \n fn main() {"}, {"sha": "52701d55914420d03e6910ecedac7a780012f414", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -7,6 +7,16 @@ LL | impl std::marker::ConstParamTy for CantParam {}\n note: required by a bound in `ConstParamTy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n \n-error: aborting due to previous error\n+error[E0277]: the type `CantParamDerive` does not `#[derive(Eq)]`\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:13:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `StructuralEq` is not implemented for `CantParamDerive`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d70377a20c170054ce49dbabbe04afb5f0973282", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,33 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params, structural_match)]\n+\n+union Union {\n+    a: u8,\n+}\n+\n+impl PartialEq for Union {\n+    fn eq(&self, other: &Union) -> bool {\n+        true\n+    }\n+}\n+impl Eq for Union {}\n+impl std::marker::StructuralEq for Union {}\n+\n+impl std::marker::ConstParamTy for Union {}\n+\n+#[derive(std::marker::ConstParamTy)]\n+//~^ ERROR this trait cannot be derived for unions\n+union UnionDerive {\n+    a: u8,\n+}\n+\n+impl PartialEq for UnionDerive {\n+    fn eq(&self, other: &UnionDerive) -> bool {\n+        true\n+    }\n+}\n+impl Eq for UnionDerive {}\n+impl std::marker::StructuralEq for UnionDerive {}\n+\n+\n+fn main() {}"}, {"sha": "293703046050357d0a9c04c52fd3e8ca68ed97d4", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,8 @@\n+error: this trait cannot be derived for unions\n+  --> $DIR/const_param_ty_impl_union.rs:18:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "434b07443044edfb912ba760002cec340d321e8b", "filename": "tests/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -43,62 +43,6 @@ LL |     println!(\"{:?}\", 0);\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "35915a7a606a4ddee8e5b93493b1227d97e03d0c", "filename": "tests/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,7 +6,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ constant\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +15,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ constant\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +24,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ constant\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +33,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ constant\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ constant\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ constant\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ constant\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ constant\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ constant\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ constant\n \n fn main() {\n     let _ = ARR;"}, {"sha": "4e503e5a5c0a4df39a204d7e5e31c4679f620d8a", "filename": "tests/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 15, "deletions": 75, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -16,156 +16,96 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:8:18\n-   |\n-LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:25\n+  --> $DIR/const-integer-bool-ops.rs:10:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:18:19\n-   |\n-LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:26\n+  --> $DIR/const-integer-bool-ops.rs:19:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n-   |\n-LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:26\n+  --> $DIR/const-integer-bool-ops.rs:28:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n-   |\n-LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:41:18\n+  --> $DIR/const-integer-bool-ops.rs:37:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:44:19\n-   |\n-LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:42:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:50:20\n-   |\n-LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:53:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:56:20\n-   |\n-LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:59:19\n+  --> $DIR/const-integer-bool-ops.rs:52:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:62:20\n-   |\n-LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:65:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:68:20\n-   |\n-LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:71:19\n+  --> $DIR/const-integer-bool-ops.rs:62:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:74:20\n-   |\n-LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^\n-\n error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "143d2fb6b9a3a1a599f36edcc222f4f1d7d34e83", "filename": "tests/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,7 +9,6 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-        //~^ constant\n         0\n     }] {\n     [(); 0]"}, {"sha": "e77d392e6940282029a11554d11c4c0115a3e6b3", "filename": "tests/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,7 +4,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected `(usize,)`, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ constant\n \n fn main() {\n }"}, {"sha": "d5df0df9525c50f44c39f37773fafc6228a08334", "filename": "tests/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -11,12 +11,6 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-note: erroneous constant used\n-  --> $DIR/const-tup-index-span.rs:6:18\n-   |\n-LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7bcfa057019952b50c804b79e932d7e87f4a7294", "filename": "tests/ui/consts/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -9,8 +9,6 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-  //~^ constant\n-  //~| constant\n     z\n }\n "}, {"sha": "b0701bab793c53851c3f855cd287208f5f58e245", "filename": "tests/ui/consts/issue-54954.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -16,18 +16,6 @@ LL | |         core::mem::size_of::<T>()\n LL | |     }\n    | |_____- `Tt::const_val` defined here\n \n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:15\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:34\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0379, E0790."}, {"sha": "e46c649faf0879a79149de1261666d25469c8a3b", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -28,18 +28,6 @@ error: function pointer calls are not allowed in constant functions\n LL |     input()\n    |     ^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0277."}, {"sha": "f4898fd9732f58837bff2e70ebaffb14c4e70430", "filename": "tests/ui/consts/issue-66693.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-66693.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -22,17 +22,5 @@ LL |     panic!(&1);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n error: aborting due to 3 previous errors\n "}, {"sha": "35f9c7e8d9be668edf42b69bce77e14e544c20ec", "filename": "tests/ui/drop/issue-110682.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fdrop%2Fissue-110682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fdrop%2Fissue-110682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fissue-110682.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,92 @@\n+// build-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+use std::fmt::Debug;\n+use std::mem::ManuallyDrop;\n+use std::ptr;\n+\n+pub trait BitRegister {}\n+\n+macro_rules! register {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitRegister for $t {\n+        }\n+    )* };\n+}\n+\n+register!(u8, u16, u32);\n+\n+pub trait BitStore: Sized + Debug {\n+    /// The register type that the implementor describes.\n+    type Mem: BitRegister + Into<Self>;\n+}\n+\n+macro_rules! store {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitStore for $t {\n+            type Mem = Self;\n+        }\n+    )+ };\n+}\n+\n+store!(u8, u16, u32,);\n+\n+#[repr(C)]\n+pub struct BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    /// Region pointer describing the live portion of the owned buffer.\n+    pointer: ptr::NonNull<T>,\n+    /// Allocated capacity, in elements `T`, of the owned buffer.\n+    capacity: usize,\n+}\n+\n+impl<T> BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    pub fn new() -> Self {\n+        let pointer = ptr::NonNull::<T>::new(ptr::null_mut()).unwrap();\n+\n+        BitVec { pointer, capacity: 10 }\n+    }\n+\n+    pub fn clear(&mut self) {\n+        unsafe {\n+            self.set_len(0);\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn set_len(&mut self, new_len: usize) {}\n+\n+    fn with_vec<F, R>(&mut self, func: F) -> R\n+    where\n+        F: FnOnce(&mut ManuallyDrop<Vec<T::Mem>>) -> R,\n+    {\n+        let cap = self.capacity;\n+        let elts = 10;\n+        let mut vec = ManuallyDrop::new(unsafe { Vec::from_raw_parts(ptr::null_mut(), elts, cap) });\n+        let out = func(&mut vec);\n+\n+        out\n+    }\n+}\n+\n+impl<T> Drop for BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    #[inline]\n+    fn drop(&mut self) {\n+        //  The buffer elements do not have destructors.\n+        self.clear();\n+        //  Run the `Vec` destructor to de\u00e4llocate the buffer.\n+        self.with_vec(|vec| unsafe { ManuallyDrop::drop(vec) });\n+    }\n+}\n+\n+fn main() {\n+    let bitvec = BitVec::<u32>::new();\n+}"}, {"sha": "06a330813406a9fe0f5a61de534e8e403854181c", "filename": "tests/ui/enum-discriminant/issue-41394.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -5,7 +5,6 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ const\n }\n \n fn main() {}"}, {"sha": "fa95ca9c18a1004a049da6e67152c0e40be605a0", "filename": "tests/ui/enum-discriminant/issue-41394.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,12 +6,6 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-note: erroneous constant used\n-  --> $DIR/issue-41394.rs:7:9\n-   |\n-LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0369`."}, {"sha": "f99d9ab6bf860c224ca5eb7afdf8913d25218bb7", "filename": "tests/ui/generator/drop-tracking-error-body.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Zdrop-tracking-mir --edition=2021\n+\n+#![feature(generators)]\n+\n+pub async fn async_bad_body() {\n+    match true {} //~ ERROR non-exhaustive patterns: type `bool` is non-empty\n+}\n+\n+pub fn generator_bad_body() {\n+    || {\n+        // 'non-exhaustive pattern' only seems to be reported once, so this annotation doesn't work\n+        // keep the function around so we can make sure it doesn't ICE\n+        match true {}; // ERROR non-exhaustive patterns: type `bool` is non-empty\n+        yield ();\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "28a6892336ff2db8351e5d6d82479f9f2359646a", "filename": "tests/ui/generator/drop-tracking-error-body.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,17 @@\n+error[E0004]: non-exhaustive patterns: type `bool` is non-empty\n+  --> $DIR/drop-tracking-error-body.rs:6:11\n+   |\n+LL |     match true {}\n+   |           ^^^^\n+   |\n+   = note: the matched value is of type `bool`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n+   |\n+LL ~     match true {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "b21ff30a27da9212546845e2a038b004140b6dff", "filename": "tests/ui/generic-associated-types/equality-bound.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -36,7 +36,10 @@ error[E0433]: failed to resolve: use of undeclared type `I`\n   --> $DIR/equality-bound.rs:9:41\n    |\n LL | fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n-   |                                         ^ use of undeclared type `I`\n+   |                                         ^\n+   |                                         |\n+   |                                         use of undeclared type `I`\n+   |                                         help: a type parameter with a similar name exists: `J`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e87a9d28ae1f73834bebcbe062a9329e708f8b7a", "filename": "tests/ui/impl-trait/issue-103181-1.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Error`\n-  --> $DIR/issue-103181-1.rs:9:5\n+  --> $DIR/issue-103181-1.rs:11:5\n    |\n LL |         type Error;\n    |         ---------- `Error` from trait", "previous_filename": "tests/ui/impl-trait/issue-103181-1.stderr"}, {"sha": "e87a9d28ae1f73834bebcbe062a9329e708f8b7a", "filename": "tests/ui/impl-trait/issue-103181-1.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Error`\n+  --> $DIR/issue-103181-1.rs:11:5\n+   |\n+LL |         type Error;\n+   |         ---------- `Error` from trait\n+LL |     }\n+LL |     impl HttpBody for () {\n+   |     ^^^^^^^^^^^^^^^^^^^^ missing `Error` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "5154abcd690704dd103ea6904e3100f588e2dc60", "filename": "tests/ui/impl-trait/issue-103181-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,3 +1,5 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n // edition:2021\n \n mod hyper {"}, {"sha": "8cd9a63b808934566d5320b8d08180053c6cb9ac", "filename": "tests/ui/macros/builtin-prelude-no-accidents.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -4,18 +4,21 @@ error[E0433]: failed to resolve: use of undeclared crate or module `env`\n LL |     env::current_dir;\n    |     ^^^ use of undeclared crate or module `env`\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n+  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n+   |\n+LL |     type B = vec::Vec<u8>;\n+   |              ^^^\n+   |              |\n+   |              use of undeclared crate or module `vec`\n+   |              help: a struct with a similar name exists (notice the capitalization): `Vec`\n+\n error[E0433]: failed to resolve: use of undeclared crate or module `panic`\n   --> $DIR/builtin-prelude-no-accidents.rs:6:14\n    |\n LL |     type A = panic::PanicInfo;\n    |              ^^^^^ use of undeclared crate or module `panic`\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n-  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n-   |\n-LL |     type B = vec::Vec<u8>;\n-   |              ^^^ use of undeclared crate or module `vec`\n-\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "92a205f14d9d1ffb3f386ce81c83b0b10a6b16a3", "filename": "tests/ui/offset-of/offset-of-arg-count.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -12,6 +12,11 @@ fn main() {\n     offset_of!(S, f.,); //~ ERROR expected identifier\n     offset_of!(S, f..); //~ ERROR no rules expected the token\n     offset_of!(S, f..,); //~ ERROR no rules expected the token\n+    offset_of!(Lt<'static>, bar); // issue #111657\n+\n }\n \n struct S { f: u8, }\n+struct Lt<'a> {\n+    bar: &'a (),\n+}"}, {"sha": "e34d855a9d4f997d21f52a6ed95c581f587c178e", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n-  --> $DIR/dyn-trait-compatibility.rs:3:11\n-   |\n-LL | type A1 = dyn::dyn;\n-   |           ^^^ use of undeclared crate or module `dyn`\n-\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:1:11\n    |\n@@ -46,6 +40,12 @@ error[E0412]: cannot find type `dyn` in this scope\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n    |                ^^^ not found in this scope\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n+  --> $DIR/dyn-trait-compatibility.rs:3:11\n+   |\n+LL | type A1 = dyn::dyn;\n+   |           ^^^ use of undeclared crate or module `dyn`\n+\n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0405, E0412, E0433."}, {"sha": "e09c0463045ac1f4698bf709150950120ff5d8db", "filename": "tests/ui/parser/impl-on-unsized-typo.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,6 @@\n+trait Tr {}\n+\n+impl<T ?Sized> Tr for T {}\n+//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `?`\n+\n+fn main() {}"}, {"sha": "23dcc1efd68b150b8f22578a41f160a1b39e5b1e", "filename": "tests/ui/parser/impl-on-unsized-typo.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,`, `:`, `=`, or `>`, found `?`\n+  --> $DIR/impl-on-unsized-typo.rs:3:8\n+   |\n+LL | impl<T ?Sized> Tr for T {}\n+   |        ^ expected one of `,`, `:`, `=`, or `>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "10fcccb030162357e4489769e7e601c8ff27226e", "filename": "tests/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `E`\n-  --> $DIR/pattern-error-continue.rs:33:9\n-   |\n-LL |         E::V => {}\n-   |         ^ use of undeclared type `E`\n-\n error[E0532]: expected tuple struct or tuple variant, found unit variant `A::D`\n   --> $DIR/pattern-error-continue.rs:18:9\n    |\n@@ -56,6 +50,15 @@ note: function defined here\n LL | fn f(_c: char) {}\n    |    ^ --------\n \n+error[E0433]: failed to resolve: use of undeclared type `E`\n+  --> $DIR/pattern-error-continue.rs:33:9\n+   |\n+LL |         E::V => {}\n+   |         ^\n+   |         |\n+   |         use of undeclared type `E`\n+   |         help: an enum with a similar name exists: `A`\n+\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0023, E0308, E0433, E0532."}, {"sha": "c10c6205a084b3ef8835a3f2546ec8216fada5a6", "filename": "tests/ui/pattern/usefulness/consts-opaque.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -20,11 +20,12 @@ const BAR: Bar = Bar;\n #[derive(PartialEq)]\n enum Baz {\n     Baz1,\n-    Baz2\n+    Baz2,\n }\n impl Eq for Baz {}\n const BAZ: Baz = Baz::Baz1;\n \n+#[rustfmt::skip]\n fn main() {\n     match FOO {\n         FOO => {}\n@@ -124,8 +125,16 @@ fn main() {\n \n     match WRAPQUUX {\n         Wrap(_) => {}\n-        WRAPQUUX => {} // detected unreachable because we do inspect the `Wrap` layer\n-        //~^ ERROR unreachable pattern\n+        WRAPQUUX => {}\n+    }\n+\n+    match WRAPQUUX {\n+        Wrap(_) => {}\n+    }\n+\n+    match WRAPQUUX {\n+        //~^ ERROR: non-exhaustive patterns: `Wrap(_)` not covered\n+        WRAPQUUX => {}\n     }\n \n     #[derive(PartialEq, Eq)]\n@@ -138,8 +147,7 @@ fn main() {\n     match WHOKNOWSQUUX {\n         WHOKNOWSQUUX => {}\n         WhoKnows::Yay(_) => {}\n-        WHOKNOWSQUUX => {} // detected unreachable because we do inspect the `WhoKnows` layer\n-        //~^ ERROR unreachable pattern\n+        WHOKNOWSQUUX => {}\n         WhoKnows::Nope => {}\n     }\n }"}, {"sha": "e01b06ccc82e4f5d6bb071dbe453276f3ae37fd1", "filename": "tests/ui/pattern/usefulness/consts-opaque.stderr", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,5 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:30:9\n+  --> $DIR/consts-opaque.rs:31:9\n    |\n LL |         FOO => {}\n    |         ^^^\n@@ -8,7 +8,7 @@ LL |         FOO => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:37:9\n+  --> $DIR/consts-opaque.rs:38:9\n    |\n LL |         FOO_REF => {}\n    |         ^^^^^^^\n@@ -17,7 +17,7 @@ LL |         FOO_REF => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:45:9\n+  --> $DIR/consts-opaque.rs:46:9\n    |\n LL |         FOO_REF_REF => {}\n    |         ^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL |         FOO_REF_REF => {}\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:53:9\n+  --> $DIR/consts-opaque.rs:54:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n@@ -38,7 +38,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:61:9\n+  --> $DIR/consts-opaque.rs:62:9\n    |\n LL |         BAR => {}\n    |         ^^^\n@@ -47,7 +47,7 @@ LL |         BAR => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:70:9\n+  --> $DIR/consts-opaque.rs:71:9\n    |\n LL |         BAR => {}\n    |         ^^^\n@@ -56,7 +56,7 @@ LL |         BAR => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:72:9\n+  --> $DIR/consts-opaque.rs:73:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n@@ -65,7 +65,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:80:9\n+  --> $DIR/consts-opaque.rs:81:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -74,7 +74,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:90:9\n+  --> $DIR/consts-opaque.rs:91:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -83,7 +83,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:97:9\n+  --> $DIR/consts-opaque.rs:98:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -92,7 +92,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:32:9\n+  --> $DIR/consts-opaque.rs:33:9\n    |\n LL |         FOO => {}\n    |         --- matches any value\n@@ -107,7 +107,7 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:39:9\n+  --> $DIR/consts-opaque.rs:40:9\n    |\n LL |         FOO_REF => {}\n    |         ------- matches any value\n@@ -116,15 +116,15 @@ LL |         Foo(_) => {} // should not be emitting unreachable warning\n    |         ^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:53:9\n+  --> $DIR/consts-opaque.rs:54:9\n    |\n LL |         Bar => {}\n    |         --- matches any value\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:56:9\n+  --> $DIR/consts-opaque.rs:57:9\n    |\n LL |         Bar => {}\n    |         --- matches any value\n@@ -133,7 +133,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:63:9\n+  --> $DIR/consts-opaque.rs:64:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -142,7 +142,7 @@ LL |         Bar => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:65:9\n+  --> $DIR/consts-opaque.rs:66:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -151,7 +151,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:72:9\n+  --> $DIR/consts-opaque.rs:73:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -160,7 +160,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:75:9\n+  --> $DIR/consts-opaque.rs:76:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -169,7 +169,7 @@ LL |         _ => {} // should not be emitting unreachable warning\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:82:9\n+  --> $DIR/consts-opaque.rs:83:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -178,7 +178,7 @@ LL |         Baz::Baz1 => {} // should not be emitting unreachable warning\n    |         ^^^^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:84:9\n+  --> $DIR/consts-opaque.rs:85:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -187,7 +187,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:92:9\n+  --> $DIR/consts-opaque.rs:93:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -196,7 +196,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:99:9\n+  --> $DIR/consts-opaque.rs:100:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -205,27 +205,32 @@ LL |         Baz::Baz2 => {} // should not be emitting unreachable warning\n    |         ^^^^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:101:9\n+  --> $DIR/consts-opaque.rs:102:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n ...\n LL |         _ => {} // should not be emitting unreachable warning\n    |         ^ unreachable pattern\n \n-error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:127:9\n+error[E0004]: non-exhaustive patterns: `Wrap(_)` not covered\n+  --> $DIR/consts-opaque.rs:135:11\n    |\n-LL |         Wrap(_) => {}\n-   |         ------- matches any value\n-LL |         WRAPQUUX => {} // detected unreachable because we do inspect the `Wrap` layer\n-   |         ^^^^^^^^ unreachable pattern\n-\n-error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:141:9\n+LL |     match WRAPQUUX {\n+   |           ^^^^^^^^ pattern `Wrap(_)` not covered\n+   |\n+note: `Wrap<fn(usize, usize) -> usize>` defined here\n+  --> $DIR/consts-opaque.rs:117:12\n+   |\n+LL |     struct Wrap<T>(T);\n+   |            ^^^^\n+   = note: the matched value is of type `Wrap<fn(usize, usize) -> usize>`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         WRAPQUUX => {},\n+LL +         Wrap(_) => todo!()\n    |\n-LL |         WHOKNOWSQUUX => {} // detected unreachable because we do inspect the `WhoKnows` layer\n-   |         ^^^^^^^^^^^^\n \n-error: aborting due to 24 previous errors; 1 warning emitted\n+error: aborting due to 23 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "68e33f693cef1b847cd1ce49196e6ddc7432db9c", "filename": "tests/ui/resolve/issue-109250.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-109250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-109250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109250.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,3 @@\n+fn main() {       //~ HELP consider importing\n+    HashMap::new; //~ ERROR failed to resolve: use of undeclared type `HashMap`\n+}"}, {"sha": "d5b8c08ced7d7d63874322b85d06e2fd46086d8a", "filename": "tests/ui/resolve/issue-109250.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-109250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-109250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109250.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: use of undeclared type `HashMap`\n+  --> $DIR/issue-109250.rs:2:5\n+   |\n+LL |     HashMap::new;\n+   |     ^^^^^^^ use of undeclared type `HashMap`\n+   |\n+help: consider importing this struct\n+   |\n+LL + use std::collections::HashMap;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "acea37b358b2ed3406638e53103d91bac22cded3", "filename": "tests/ui/resolve/issue-111312.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-111312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-111312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+\n+trait Has {\n+    fn has() {}\n+}\n+\n+trait HasNot {}\n+\n+fn main() {\n+    HasNot::has(); //~ ERROR\n+}"}, {"sha": "4c864029c98702000484b63fff22ec927a085577", "filename": "tests/ui/resolve/issue-111312.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no function or associated item named `has` found for trait `HasNot`\n+  --> $DIR/issue-111312.rs:10:13\n+   |\n+LL |     HasNot::has();\n+   |             ^^^ function or associated item not found in `HasNot`\n+   |\n+note: `Has` defines an item `has`\n+  --> $DIR/issue-111312.rs:3:1\n+   |\n+LL | trait Has {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "00588735b9a5932c78fdfb9b3d3b9057d8492541", "filename": "tests/ui/resolve/issue-50599.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ constant\n }"}, {"sha": "d58b6ca5b5c42dab4179734e55359632190cb5f7", "filename": "tests/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -16,12 +16,6 @@ LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n    |\n \n-note: erroneous constant used\n-  --> $DIR/issue-50599.rs:4:29\n-   |\n-LL |     let mut digits = [0u32; M];\n-   |                             ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "ed157197d17e1a199827da271104f2402480c6a6", "filename": "tests/ui/resolve/resolve-variant-assoc-item.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -3,12 +3,26 @@ error[E0433]: failed to resolve: `V` is a variant, not a module\n    |\n LL |     E::V::associated_item;\n    |        ^ `V` is a variant, not a module\n+   |\n+help: there is an enum variant `E::V`; try using the variant's enum\n+   |\n+LL |     E;\n+   |     ~\n \n error[E0433]: failed to resolve: `V` is a variant, not a module\n   --> $DIR/resolve-variant-assoc-item.rs:6:5\n    |\n LL |     V::associated_item;\n    |     ^ `V` is a variant, not a module\n+   |\n+help: there is an enum variant `E::V`; try using the variant's enum\n+   |\n+LL |     E;\n+   |     ~\n+help: an enum with a similar name exists\n+   |\n+LL |     E::associated_item;\n+   |     ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b015397a5bc5f66928fbd81af2a12461c1722682", "filename": "tests/ui/self/self-ctor-inner-const.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs?ref=d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2", "patch": "@@ -1,17 +0,0 @@\n-// Verify that we ban usage of `Self` as constructor from inner items.\n-\n-struct S0<T>(T);\n-\n-impl<T> S0<T> {\n-    fn foo() {\n-        const C: S0<u8> = Self(0);\n-        //~^ ERROR can't use generic parameters from outer function\n-        fn bar() -> Self {\n-            //~^ ERROR can't use generic parameters from outer function\n-            Self(0)\n-            //~^ ERROR can't use generic parameters from outer function\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "7287c64c659b72fc1a5c628a96506dd96c3d2c58", "filename": "tests/ui/self/self-ctor-inner-const.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr?ref=d4ce8edc0089c7441ddbc6d0564c02c40cbbd3f2", "patch": "@@ -1,33 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:7:27\n-   |\n-LL |         const C: S0<u8> = Self(0);\n-   |                           ^^^^\n-   |                           |\n-   |                           use of generic parameter from outer function\n-   |                           can't use `Self` here\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:9:21\n-   |\n-LL | impl<T> S0<T> {\n-   | ---- `Self` type implicitly declared here, by this `impl`\n-...\n-LL |         fn bar() -> Self {\n-   |                     ^^^^\n-   |                     |\n-   |                     use of generic parameter from outer function\n-   |                     use a type here instead\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:11:13\n-   |\n-LL |             Self(0)\n-   |             ^^^^\n-   |             |\n-   |             use of generic parameter from outer function\n-   |             can't use `Self` here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "0ae7f8da4b4b9328fd62e187d875a2880d9d9379", "filename": "tests/ui/self/self-ctor-nongeneric.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,15 @@\n+// `Self` as a constructor is currently allowed when the outer item is not generic.\n+// check-pass\n+\n+struct S0(usize);\n+\n+impl S0 {\n+    fn foo() {\n+        const C: S0 = Self(0);\n+        fn bar() -> S0 {\n+            Self(0)\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8ba9e1fdd62213fc09c20324ca4d85d56323bbdf", "filename": "tests/ui/suggestions/issue-99597.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,15 @@\n+#![allow(dead_code)]\n+\n+trait T1 { }\n+\n+trait T2 {\n+    fn test(&self) { }\n+}\n+\n+fn go(s: &impl T1) {\n+    //~^ SUGGESTION (\n+    s.test();\n+    //~^ ERROR no method named `test`\n+}\n+\n+fn main() { }"}, {"sha": "bdf2a07c143b4db9fab2a8fde39284028253b55f", "filename": "tests/ui/suggestions/issue-99597.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `test` found for reference `&impl T1` in the current scope\n+  --> $DIR/issue-99597.rs:11:7\n+   |\n+LL |     s.test();\n+   |       ^^^^ method not found in `&impl T1`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `test`, perhaps you need to restrict type parameter `impl T1` with it:\n+   |\n+LL | fn go(s: &(impl T1 + T2)) {\n+   |           +        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b174669545a2b95637f40679dba36513e3a1fd67", "filename": "tests/ui/traits/issue-106072.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftraits%2Fissue-106072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftraits%2Fissue-106072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,4 @@\n #[derive(Clone)] //~  trait objects must include the `dyn` keyword\n-                 //~| trait objects must include the `dyn` keyword\n struct Foo;\n trait Foo {} //~ the name `Foo` is defined multiple times\n fn main() {}"}, {"sha": "1037603ceb777dd3da24989f33137931e4862b81", "filename": "tests/ui/traits/issue-106072.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `Foo` is defined multiple times\n-  --> $DIR/issue-106072.rs:4:1\n+  --> $DIR/issue-106072.rs:3:1\n    |\n LL | struct Foo;\n    | ----------- previous definition of the type `Foo` here\n@@ -16,15 +16,7 @@ LL | #[derive(Clone)]\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/issue-106072.rs:1:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   |\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0428, E0782.\n For more information about an error, try `rustc --explain E0428`."}, {"sha": "4b6bc6124dbf301e232d640498f539cfde51fbba", "filename": "tests/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ constant\n }"}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "tests/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -6,12 +6,6 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-note: erroneous constant used\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "8b12aa1a393b2d229b83631946ffe767c99a8a2e", "filename": "tests/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n-  --> $DIR/type-path-err-node-types.rs:15:5\n-   |\n-LL |     NonExistent::Assoc::<u8>;\n-   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n-\n error[E0412]: cannot find type `Nonexistent` in this scope\n   --> $DIR/type-path-err-node-types.rs:7:12\n    |\n@@ -22,6 +16,12 @@ error[E0425]: cannot find value `nonexistent` in this scope\n LL |     nonexistent.nonexistent::<u8>();\n    |     ^^^^^^^^^^^ not found in this scope\n \n+error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n+  --> $DIR/type-path-err-node-types.rs:15:5\n+   |\n+LL |     NonExistent::Assoc::<u8>;\n+   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n+\n error[E0282]: type annotations needed\n   --> $DIR/type-path-err-node-types.rs:23:14\n    |"}, {"sha": "c4fa850a4f9d10005f3053e280d7c0384624b732", "filename": "tests/ui/weird-exprs.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/tests%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fweird-exprs.rs?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -5,13 +5,16 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n+#![allow(redundant_semicolons)]\n #![allow(unreachable_code)]\n #![allow(unused_braces, unused_must_use, unused_parens)]\n #![allow(uncommon_codepoints, confusable_idents)]\n+#![allow(unused_imports)]\n #![allow(unreachable_patterns)]\n \n #![recursion_limit = \"256\"]\n \n+extern crate core;\n use std::cell::Cell;\n use std::mem::swap;\n \n@@ -204,6 +207,30 @@ fn closure_matching() {\n     assert!(matches!(x(..), |_| Some(4)));\n }\n \n+fn semisemisemisemisemi() {\n+    ;;;;;;; ;;;;;;; ;;;    ;;; ;;\n+    ;;      ;;      ;;;;  ;;;; ;;\n+    ;;;;;;; ;;;;;   ;; ;;;; ;; ;;\n+         ;; ;;      ;;  ;;  ;; ;;\n+    ;;;;;;; ;;;;;;; ;;      ;; ;;\n+}\n+\n+fn useful_syntax() {\n+    use {{std::{{collections::{{HashMap}}}}}};\n+    use ::{{{{core}, {std}}}};\n+    use {{::{{core as core2}}}};\n+}\n+\n+fn infcx() {\n+    pub mod cx {\n+        pub mod cx {\n+            pub use super::cx;\n+            pub struct Cx;\n+        }\n+    }\n+    let _cx: cx::cx::Cx = cx::cx::cx::cx::cx::Cx;\n+}\n+\n pub fn main() {\n     strange();\n     funny();\n@@ -227,4 +254,7 @@ pub fn main() {\n     function();\n     bathroom_stall();\n     closure_matching();\n+    semisemisemisemisemi();\n+    useful_syntax();\n+    infcx();\n }"}, {"sha": "a5152434d89e61cd5d13b11e9b225cb16db79922", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4014b17d86e058d684a9943ffab680b2d0ddb9ea/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4014b17d86e058d684a9943ffab680b2d0ddb9ea/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=4014b17d86e058d684a9943ffab680b2d0ddb9ea", "patch": "@@ -512,6 +512,7 @@ compiler-team = [\n ]\n compiler-team-contributors = [\n     \"@compiler-errors\",\n+    \"@eholk\",\n     \"@jackh726\",\n     \"@TaKO8Ki\",\n     \"@WaffleLapkin\",\n@@ -532,6 +533,7 @@ bootstrap = [\n     \"@Mark-Simulacrum\",\n     \"@albertlarsan68\",\n     \"@ozkanonur\",\n+    \"@clubby789\",\n ]\n infra-ci = [\n     \"@Mark-Simulacrum\","}]}