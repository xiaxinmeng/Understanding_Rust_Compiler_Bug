{"sha": "58972d19e7ba591321d6e67d32080a5e5a78e19a", "node_id": "C_kwDOAAsO6NoAKDU4OTcyZDE5ZTdiYTU5MTMyMWQ2ZTY3ZDMyMDgwYTVlNWE3OGUxOWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-05T15:32:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-05T16:39:16Z"}, "message": "Merge method, type and const object safety checks", "tree": {"sha": "d32b36896938fd19353bbb815ba5b52bcad061fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d32b36896938fd19353bbb815ba5b52bcad061fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58972d19e7ba591321d6e67d32080a5e5a78e19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58972d19e7ba591321d6e67d32080a5e5a78e19a", "html_url": "https://github.com/rust-lang/rust/commit/58972d19e7ba591321d6e67d32080a5e5a78e19a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58972d19e7ba591321d6e67d32080a5e5a78e19a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604ffab063e0b488f43b6f8faf60421a4533dbc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/604ffab063e0b488f43b6f8faf60421a4533dbc0", "html_url": "https://github.com/rust-lang/rust/commit/604ffab063e0b488f43b6f8faf60421a4533dbc0"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "95517f01414751db734c963b4c162121b9e993d3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58972d19e7ba591321d6e67d32080a5e5a78e19a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58972d19e7ba591321d6e67d32080a5e5a78e19a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=58972d19e7ba591321d6e67d32080a5e5a78e19a", "patch": "@@ -1643,6 +1643,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n+        // `dyn Trait<Assoc = Foo>` desugars to (not Rust syntax) `dyn Trait where <Self as Trait>::Assoc = Foo`.\n+        // So every `Projection` clause is an `Assoc = Foo` bound. `associated_types` contains all associated\n+        // types's `DefId`, so the following loop removes all the `DefIds` of the associated types that have a\n+        // corresponding `Projection` clause\n         for (projection_bound, _) in &projection_bounds {\n             for def_ids in associated_types.values_mut() {\n                 def_ids.remove(&projection_bound.projection_def_id());"}, {"sha": "b2771915eef8e1a7068a1439c60e99832131f392", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 43, "deletions": 51, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/58972d19e7ba591321d6e67d32080a5e5a78e19a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58972d19e7ba591321d6e67d32080a5e5a78e19a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=58972d19e7ba591321d6e67d32080a5e5a78e19a", "patch": "@@ -115,15 +115,11 @@ fn object_safety_violations_for_trait(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n ) -> Vec<ObjectSafetyViolation> {\n-    // Check methods for violations.\n+    // Check assoc items for violations.\n     let mut violations: Vec<_> = tcx\n         .associated_items(trait_def_id)\n         .in_definition_order()\n-        .filter(|item| item.kind == ty::AssocKind::Fn)\n-        .filter_map(|&item| {\n-            object_safety_violation_for_method(tcx, trait_def_id, item)\n-                .map(|(code, span)| ObjectSafetyViolation::Method(item.name, code, span))\n-        })\n+        .filter_map(|&item| object_safety_violation_for_assoc_item(tcx, trait_def_id, item))\n         .collect();\n \n     // Check the trait itself.\n@@ -145,30 +141,6 @@ fn object_safety_violations_for_trait(\n         violations.push(ObjectSafetyViolation::SupertraitNonLifetimeBinder(spans));\n     }\n \n-    violations.extend(\n-        tcx.associated_items(trait_def_id)\n-            .in_definition_order()\n-            .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| {\n-                let ident = item.ident(tcx);\n-                ObjectSafetyViolation::AssocConst(ident.name, ident.span)\n-            }),\n-    );\n-\n-    if !tcx.features().generic_associated_types_extended {\n-        violations.extend(\n-            tcx.associated_items(trait_def_id)\n-                .in_definition_order()\n-                .filter(|item| item.kind == ty::AssocKind::Type)\n-                .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n-                .filter(|item| item.opt_rpitit_info.is_none())\n-                .map(|item| {\n-                    let ident = item.ident(tcx);\n-                    ObjectSafetyViolation::GAT(ident.name, ident.span)\n-                }),\n-        );\n-    }\n-\n     debug!(\n         \"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n         trait_def_id, violations\n@@ -401,34 +373,54 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     })\n }\n \n-/// Returns `Some(_)` if this method makes the containing trait not object safe.\n-fn object_safety_violation_for_method(\n+/// Returns `Some(_)` if this item makes the containing trait not object safe.\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n+fn object_safety_violation_for_assoc_item(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-    method: ty::AssocItem,\n-) -> Option<(MethodViolationCode, Span)> {\n-    debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n-    // Any method that has a `Self : Sized` requisite is otherwise\n+    item: ty::AssocItem,\n+) -> Option<ObjectSafetyViolation> {\n+    // Any item that has a `Self : Sized` requisite is otherwise\n     // exempt from the regulations.\n-    if generics_require_sized_self(tcx, method.def_id) {\n+    if generics_require_sized_self(tcx, item.def_id) {\n         return None;\n     }\n \n-    let violation = virtual_call_violation_for_method(tcx, trait_def_id, method);\n-    // Get an accurate span depending on the violation.\n-    violation.map(|v| {\n-        let node = tcx.hir().get_if_local(method.def_id);\n-        let span = match (&v, node) {\n-            (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n-            (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n-            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n-            (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n-                node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n+    match item.kind {\n+        // Associated consts are never object safe, as they can't have `where` bounds yet at all,\n+        // and associated const bounds in trait objects aren't a thing yet either.\n+        ty::AssocKind::Const => {\n+            Some(ObjectSafetyViolation::AssocConst(item.name, item.ident(tcx).span))\n+        }\n+        ty::AssocKind::Fn => virtual_call_violation_for_method(tcx, trait_def_id, item).map(|v| {\n+            let node = tcx.hir().get_if_local(item.def_id);\n+            // Get an accurate span depending on the violation.\n+            let span = match (&v, node) {\n+                (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n+                (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+                (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n+                (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n+                    node.fn_decl().map_or(item.ident(tcx).span, |decl| decl.output.span())\n+                }\n+                _ => item.ident(tcx).span,\n+            };\n+\n+            ObjectSafetyViolation::Method(item.name, v, span)\n+        }),\n+        // Associated types can only be object safe if they have `Self: Sized` bounds.\n+        ty::AssocKind::Type => {\n+            if !tcx.features().generic_associated_types_extended\n+                && !tcx.generics_of(item.def_id).params.is_empty()\n+                && item.opt_rpitit_info.is_none()\n+            {\n+                Some(ObjectSafetyViolation::GAT(item.name, item.ident(tcx).span))\n+            } else {\n+                // We will permit associated types if they are explicitly mentioned in the trait object.\n+                // We can't check this here, as here we only check if it is guaranteed to not be possible.\n+                None\n             }\n-            _ => method.ident(tcx).span,\n-        };\n-        (v, span)\n-    })\n+        }\n+    }\n }\n \n /// Returns `Some(_)` if this method cannot be called on a trait"}]}