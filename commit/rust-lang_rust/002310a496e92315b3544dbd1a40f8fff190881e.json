{"sha": "002310a496e92315b3544dbd1a40f8fff190881e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjMxMGE0OTZlOTIzMTViMzU0NGRiZDFhNDBmOGZmZjE5MDg4MWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T11:39:01Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T11:39:01Z"}, "message": "format: refactor verify_arg_type", "tree": {"sha": "a4c2470931bfc88877d86611b02e3e97d92f5d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c2470931bfc88877d86611b02e3e97d92f5d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002310a496e92315b3544dbd1a40f8fff190881e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002310a496e92315b3544dbd1a40f8fff190881e", "html_url": "https://github.com/rust-lang/rust/commit/002310a496e92315b3544dbd1a40f8fff190881e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002310a496e92315b3544dbd1a40f8fff190881e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8866f68a4d038fbb26799f792dcb60d1c5e184cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8866f68a4d038fbb26799f792dcb60d1c5e184cd", "html_url": "https://github.com/rust-lang/rust/commit/8866f68a4d038fbb26799f792dcb60d1c5e184cd"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "2e5698c1a6c80c4397498f853e6085a4ceded8d0", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/002310a496e92315b3544dbd1a40f8fff190881e/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002310a496e92315b3544dbd1a40f8fff190881e/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=002310a496e92315b3544dbd1a40f8fff190881e", "patch": "@@ -336,33 +336,30 @@ impl<'a, 'b> Context<'a, 'b> {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n                         let ref mut seen_ty = self.arg_unique_types[arg];\n-                        let i = match seen_ty.iter().position(|x| *x == ty) {\n-                            Some(i) => i,\n-                            None => {\n-                                let i = seen_ty.len();\n-                                seen_ty.push(ty);\n-                                i\n-                            }\n-                        };\n+                        let i = seen_ty.iter().position(|x| *x == ty).unwrap_or_else(|| {\n+                            let i = seen_ty.len();\n+                            seen_ty.push(ty);\n+                            i\n+                        });\n                         self.arg_types[arg].push(i);\n                     }\n                     Count => {\n-                        match self.count_positions.entry(arg) {\n-                            Entry::Vacant(e) => {\n-                                let i = self.count_positions_count;\n-                                e.insert(i);\n-                                self.count_args.push(Exact(arg));\n-                                self.count_positions_count += 1;\n-                            }\n-                            Entry::Occupied(_) => {}\n+                        if let Entry::Vacant(e) = self.count_positions.entry(arg) {\n+                            let i = self.count_positions_count;\n+                            e.insert(i);\n+                            self.count_args.push(Exact(arg));\n+                            self.count_positions_count += 1;\n                         }\n                     }\n                 }\n             }\n \n             Named(name) => {\n-                let idx = match self.names.get(&name) {\n-                    Some(e) => *e,\n+                match self.names.get(&name) {\n+                    Some(idx) => {\n+                        // Treat as positional arg.\n+                        self.verify_arg_type(Exact(*idx), ty)\n+                    }\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);\n                         let sp = if self.is_literal {\n@@ -372,11 +369,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                         };\n                         let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n                         err.emit();\n-                        return;\n                     }\n-                };\n-                // Treat as positional arg.\n-                self.verify_arg_type(Exact(idx), ty)\n+                }\n             }\n         }\n     }"}]}