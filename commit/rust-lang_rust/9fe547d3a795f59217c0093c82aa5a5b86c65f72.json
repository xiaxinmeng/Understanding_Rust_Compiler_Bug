{"sha": "9fe547d3a795f59217c0093c82aa5a5b86c65f72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTU0N2QzYTc5NWY1OTIxN2MwMDkzYzgyYWE1YTViODZjNjVmNzI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-14T22:32:32Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:05:24Z"}, "message": "Make extracting syntax extension arguments easier.", "tree": {"sha": "ed839c2f3777782b4f6b2c2e91e78a393b82e88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed839c2f3777782b4f6b2c2e91e78a393b82e88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe547d3a795f59217c0093c82aa5a5b86c65f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe547d3a795f59217c0093c82aa5a5b86c65f72", "html_url": "https://github.com/rust-lang/rust/commit/9fe547d3a795f59217c0093c82aa5a5b86c65f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe547d3a795f59217c0093c82aa5a5b86c65f72/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "html_url": "https://github.com/rust-lang/rust/commit/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2"}], "stats": {"total": 142, "additions": 62, "deletions": 80}, "files": [{"sha": "a771f2b99289603a6c6b530f48a55469e24d7b93", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -136,7 +136,7 @@ fn connect_many(paths: [path]) -> path {\n }\n \n #[doc = \"\n-Split a path into it's individual components\n+Split a path into its individual components\n \n Splits a given path by path separators and returns a vector containing\n each piece of the path. On Windows, if the path is absolute then"}, {"sha": "92b6acba5b04ee3bc7b2592410dd26b3d255e420", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -153,10 +153,37 @@ fn make_new_lit(cx: ext_ctxt, sp: codemap::span, lit: ast::lit_) ->\n     ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n }\n \n-fn get_mac_arg(cx: ext_ctxt, sp: span, arg: ast::mac_arg) -> @ast::expr {\n-    alt (arg) {\n-      some(expr) {expr}\n-      none {cx.span_fatal(sp, \"missing macro args\")}\n+fn get_mac_args_no_max(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+                       min: uint, name: str) -> [@ast::expr] {\n+    ret get_mac_args(cx, sp, arg, min, none, name);\n+}\n+\n+fn get_mac_args(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+                min: uint, max: option<uint>, name: str) -> [@ast::expr] {\n+    alt arg {\n+      some(expr) {\n+        alt expr.node {\n+          ast::expr_vec(elts, _) {\n+            let elts_len = vec::len(elts);\n+            alt max {\n+              some(max) if ! (min <= elts_len && elts_len <= max) {\n+                cx.span_fatal(sp,\n+                              #fmt[\"#%s takes between %u and %u arguments.\",\n+                                   name, min, max]);\n+              }\n+              none if ! (min <= elts_len) {\n+                cx.span_fatal(sp, #fmt[\"#%s needs at least %u arguments.\",\n+                                       name, min]);\n+              }\n+              _ { ret elts; /* we're good */}\n+            }\n+          }\n+          _ {\n+            cx.span_fatal(sp, #fmt[\"#%s: malformed invocation\", name])\n+          }\n+        }\n+      }\n+      none {cx.span_fatal(sp, #fmt[\"#%s: missing arguments\", name])}\n     }\n }\n "}, {"sha": "278321ec8bcaa643e28de748bbe7c7347c95025c", "filename": "src/librustsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fconcat_idents.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -2,14 +2,7 @@ import base::*;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-    let arg = get_mac_arg(cx,sp,arg);\n-    let args: [@ast::expr] =\n-        alt arg.node {\n-          ast::expr_vec(elts, _) { elts }\n-          _ {\n-            cx.span_fatal(sp, \"#concat_idents requires a vector argument .\")\n-          }\n-        };\n+    let args = get_mac_args_no_max(cx,sp,arg,1u,\"concat_idents\");\n     let mut res: ast::ident = \"\";\n     for args.each {|e|\n         res += expr_to_ident(cx, e, \"expected an ident\");"}, {"sha": "6a4d937f08375204c0f14be98de0a6680ca60995", "filename": "src/librustsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fenv.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -9,17 +9,8 @@ export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-    let arg = get_mac_arg(cx,sp,arg);\n-    let args: [@ast::expr] =\n-        alt arg.node {\n-          ast::expr_vec(elts, _) { elts }\n-          _ {\n-            cx.span_fatal(sp, \"#env requires arguments of the form `[...]`.\")\n-          }\n-        };\n-    if vec::len::<@ast::expr>(args) != 1u {\n-        cx.span_fatal(sp, \"malformed #env call\");\n-    }\n+    let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"env\");\n+\n     // FIXME: if this was more thorough it would manufacture an\n     // option<str> rather than just an maybe-empty string. (Issue #2248)\n "}, {"sha": "aceeed4b9e8447d50ba08ea13d003f71519bc4ca", "filename": "src/librustsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Ffmt.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -13,17 +13,7 @@ export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-    let arg = get_mac_arg(cx,sp,arg);\n-    let args: [@ast::expr] =\n-        alt arg.node {\n-          ast::expr_vec(elts, _) { elts }\n-          _ {\n-            cx.span_fatal(sp, \"#fmt requires arguments of the form `[...]`.\")\n-          }\n-        };\n-    if vec::len::<@ast::expr>(args) == 0u {\n-        cx.span_fatal(sp, \"#fmt requires a format string\");\n-    }\n+    let args = get_mac_args_no_max(cx, sp, arg, 1u, \"fmt\");\n     let fmt =\n         expr_to_str(cx, args[0],\n                     \"first argument to #fmt must be a string literal.\");"}, {"sha": "7dfb70f1520ce47744f81c849e13b5b5eef990b1", "filename": "src/librustsyntax/ext/ident_to_str.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fident_to_str.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -1,21 +1,11 @@\n import base::*;\n+import option;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-    let arg = get_mac_arg(cx,sp,arg);\n-    let args: [@ast::expr] =\n-        alt arg.node {\n-          ast::expr_vec(elts, _) { elts }\n-          _ {\n-            cx.span_fatal(sp, \"#ident_to_str requires a vector argument .\")\n-          }\n-        };\n-    if vec::len::<@ast::expr>(args) != 1u {\n-        cx.span_fatal(sp, \"malformed #ident_to_str call\");\n-    }\n+    let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"ident_to_str\");\n \n     ret make_new_lit(cx, sp,\n                      ast::lit_str(expr_to_ident(cx, args[0u],\n                                                 \"expected an ident\")));\n-\n }"}, {"sha": "e9391adb2227ae3b27c7cbddb9177c07b83eb29e", "filename": "src/librustsyntax/ext/include.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Finclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Finclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Finclude.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -14,18 +14,8 @@ export str;\n mod str {\n     fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                          _body: ast::mac_body) -> @ast::expr {\n-        let arg = get_mac_arg(cx,sp,arg);\n-        let args: [@ast::expr] =\n-            alt arg.node {\n-              ast::expr_vec(elts, _) { elts }\n-              _ {\n-                cx.span_fatal(sp, \"#include_str requires arguments \\\n-                                   of the form `[...]`.\")\n-              }\n-            };\n-        if vec::len::<@ast::expr>(args) != 1u {\n-            cx.span_fatal(sp, \"malformed #include_str call\");\n-        }\n+        let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"include_str\");\n+\n         let mut path = expr_to_str(cx, args[0], \"#include_str requires \\\n                                                  a string\");\n "}, {"sha": "5ccbb143b97cb11d625c25991326554300b5b73d", "filename": "src/librustsyntax/ext/log_syntax.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Flog_syntax.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -3,9 +3,12 @@ import io::writer_util;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n-    let arg = get_mac_arg(cx,sp,arg);\n+    let args = get_mac_args_no_max(cx,sp,arg,0u,\"log_syntax\");\n     cx.print_backtrace();\n-    io::stdout().write_line(print::pprust::expr_to_str(arg));\n+    io::stdout().write_line(\n+        str::connect(vec::map(args,\n+                              {|&&ex| print::pprust::expr_to_str(ex)}), \", \")\n+    );\n \n     //trivial expression\n     ret @{id: cx.next_id(), node: ast::expr_rec([], option::none), span: sp};"}, {"sha": "792618f2bde2a6f40c5f714e1c85a5ae8fa50a22", "filename": "src/librustsyntax/ext/simplext.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Flibrustsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fsimplext.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -668,15 +668,7 @@ fn p_t_s_r_actual_vector(cx: ext_ctxt, elts: [@expr], _repeat_after: bool,\n \n fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> base::macro_def {\n-    let arg = get_mac_arg(cx,sp,arg);\n-    let args: [@ast::expr] =\n-        alt arg.node {\n-          ast::expr_vec(elts, _) { elts }\n-          _ {\n-            cx.span_fatal(sp,\n-                          \"#macro requires arguments of the form `[...]`.\")\n-          }\n-        };\n+    let args = get_mac_args_no_max(cx, sp, arg, 0u, \"macro\");\n \n     let mut macro_name: option<str> = none;\n     let mut clauses: [@clause] = [];\n@@ -712,9 +704,13 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                                       \"macro name must not be a path\");\n                       }\n                     }\n+                    let arg = alt invoc_arg {\n+                      some(arg) { arg }\n+                      none { cx.span_fatal(mac.span,\n+                                           \"macro must have arguments\")}\n+                    };\n                     clauses +=\n-                        [@{params: pattern_to_selectors\n-                               (cx, get_mac_arg(cx,mac.span,invoc_arg)),\n+                        [@{params: pattern_to_selectors(cx, arg),\n                            body: elts[1u]}];\n \n                     // FIXME: check duplicates (or just simplify\n@@ -746,16 +742,18 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n              alt macro_name {\n                some(id) { id }\n                none {\n-                 cx.span_fatal(sp,\n-                               \"macro definition must have \" +\n-                                   \"at least one clause\")\n+                 cx.span_fatal(sp, \"macro definition must have \" +\n+                               \"at least one clause\")\n                }\n              },\n-         ext: normal({expander: ext, span: some(arg.span)})};\n+         ext: normal({expander: ext, span: some(option::get(arg).span)})};\n \n     fn generic_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                          _body: ast::mac_body, clauses: [@clause]) -> @expr {\n-        let arg = get_mac_arg(cx,sp,arg);\n+        let arg = alt arg {\n+          some(arg) { arg }\n+          none { cx.span_fatal(sp, \"macro must have arguments\")}\n+        };\n         for clauses.each {|c|\n             alt use_selectors_to_bind(c.params, arg) {\n               some(bindings) { ret transcribe(cx, bindings, c.body); }"}, {"sha": "44611424079bb0a09ee372858d6a462a195702fa", "filename": "src/test/compile-fail/extenv-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:malformed #env call\n+// error-pattern:#env takes between 1 and 1 arguments\n \n fn main() { #env[]; }"}, {"sha": "6e70b67f9c46d09ea0f2269d0cbb1ac025843753", "filename": "src/test/compile-fail/extenv-too-many-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:malformed #env call\n+// error-pattern:#env takes between 1 and 1 arguments\n \n fn main() { #env[\"one\", \"two\"]; }"}, {"sha": "f88d74dd16688779cc2a01116fb6d357d7eb4036", "filename": "src/test/compile-fail/extfmt-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe547d3a795f59217c0093c82aa5a5b86c65f72/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs?ref=9fe547d3a795f59217c0093c82aa5a5b86c65f72", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:format string\n+// error-pattern:#fmt needs at least 1 arguments\n \n fn main() { #fmt[]; }"}]}