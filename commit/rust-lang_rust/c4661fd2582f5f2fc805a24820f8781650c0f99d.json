{"sha": "c4661fd2582f5f2fc805a24820f8781650c0f99d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjYxZmQyNTgyZjVmMmZjODA1YTI0ODIwZjg3ODE2NTBjMGY5OWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:45:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` `node_types` in the type context", "tree": {"sha": "13601e0d9c9a9bc2792eb75bd434ea59b6f55300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13601e0d9c9a9bc2792eb75bd434ea59b6f55300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4661fd2582f5f2fc805a24820f8781650c0f99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4661fd2582f5f2fc805a24820f8781650c0f99d", "html_url": "https://github.com/rust-lang/rust/commit/c4661fd2582f5f2fc805a24820f8781650c0f99d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4661fd2582f5f2fc805a24820f8781650c0f99d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "727fa3aa01cc9cb5429e3782a45a8625ceeafd48", "url": "https://api.github.com/repos/rust-lang/rust/commits/727fa3aa01cc9cb5429e3782a45a8625ceeafd48", "html_url": "https://github.com/rust-lang/rust/commit/727fa3aa01cc9cb5429e3782a45a8625ceeafd48"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "34e9b503584d600644dd543c1585753fd894ca77", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -911,7 +911,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = tcx.node_types.find(&(id as uint));\n+        let node_types = tcx.node_types.borrow();\n+        let r = node_types.get().find(&(id as uint));\n         for &ty in r.iter() {\n             ebml_w.tag(c::tag_table_node_type, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1230,7 +1231,8 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                         let ty = val_dsr.read_ty(xcx);\n                         debug!(\"inserting ty for node {:?}: {}\",\n                                id, ty_to_str(dcx.tcx, ty));\n-                        dcx.tcx.node_types.insert(id as uint, ty);\n+                        let mut node_types = dcx.tcx.node_types.borrow_mut();\n+                        node_types.get().insert(id as uint, ty);\n                     }\n                     c::tag_table_node_type_subst => {\n                         let tys = val_dsr.read_tys(xcx);"}, {"sha": "6fe1f66dcfde41801f43c27ac444ad5ba885287a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -2018,7 +2018,9 @@ fn insert_synthetic_type_entries(bcx: @Block,\n \n         let pat_id = fn_args[i].pat.id;\n         let arg_ty = arg_tys[i];\n-        tcx.node_types.insert(pat_id as uint, arg_ty);\n+\n+        let mut node_types = tcx.node_types.borrow_mut();\n+        node_types.get().insert(pat_id as uint, arg_ty);\n     }\n }\n "}, {"sha": "14ce27f3bbe456e1c5f7c291e394a5a7cf359fae", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -2259,7 +2259,8 @@ fn fn_should_be_ignored(fcx: &FunctionContext) -> bool {\n }\n \n fn assert_type_for_node_id(cx: &CrateContext, node_id: ast::NodeId, error_span: Span) {\n-    if !cx.tcx.node_types.contains_key(&(node_id as uint)) {\n+    let node_types = cx.tcx.node_types.borrow();\n+    if !node_types.get().contains_key(&(node_id as uint)) {\n         cx.sess.span_bug(error_span, \"debuginfo: Could not find type for node id!\");\n     }\n }"}, {"sha": "9166f25ea5da39be531ed9b81d2c2ed67abe35a7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -955,7 +955,7 @@ pub struct ty_param_substs_and_ty {\n \n type type_cache = RefCell<HashMap<ast::DefId, ty_param_bounds_and_ty>>;\n \n-pub type node_type_table = @mut HashMap<uint,t>;\n+pub type node_type_table = RefCell<HashMap<uint,t>>;\n \n pub fn mk_ctxt(s: session::Session,\n                dm: resolve::DefMap,\n@@ -975,7 +975,7 @@ pub fn mk_ctxt(s: session::Session,\n         sess: s,\n         def_map: dm,\n         region_maps: region_maps,\n-        node_types: @mut HashMap::new(),\n+        node_types: RefCell::new(HashMap::new()),\n         node_type_substs: RefCell::new(HashMap::new()),\n         trait_refs: RefCell::new(HashMap::new()),\n         trait_defs: RefCell::new(HashMap::new()),\n@@ -2674,7 +2674,8 @@ pub fn node_id_to_trait_ref(cx: ctxt, id: ast::NodeId) -> @ty::TraitRef {\n \n pub fn node_id_to_type(cx: ctxt, id: ast::NodeId) -> t {\n     //printfln!(\"{:?}/{:?}\", id, cx.node_types.len());\n-    match cx.node_types.find(&(id as uint)) {\n+    let node_types = cx.node_types.borrow();\n+    match node_types.get().find(&(id as uint)) {\n        Some(&t) => t,\n        None => cx.sess.bug(\n            format!(\"node_id_to_type: no type for node `{}`\",\n@@ -3172,7 +3173,8 @@ pub fn expr_kind(tcx: ctxt,\n         }\n \n         ast::ExprCast(..) => {\n-            match tcx.node_types.find(&(expr.id as uint)) {\n+            let node_types = tcx.node_types.borrow();\n+            match node_types.get().find(&(expr.id as uint)) {\n                 Some(&t) => {\n                     if type_is_trait(t) {\n                         RvalueDpsExpr"}, {"sha": "241963e398c4414a1946eefff8282ae902aba160", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -162,7 +162,7 @@ pub struct Inherited {\n     param_env: ty::ParameterEnvironment,\n \n     // Temporary tables:\n-    node_types: @mut HashMap<ast::NodeId, ty::t>,\n+    node_types: RefCell<HashMap<ast::NodeId, ty::t>>,\n     node_type_substs: RefCell<HashMap<ast::NodeId, ty::substs>>,\n     adjustments: RefCell<HashMap<ast::NodeId, @ty::AutoAdjustment>>,\n     method_map: method_map,\n@@ -262,7 +262,7 @@ impl Inherited {\n             infcx: infer::new_infer_ctxt(tcx),\n             locals: @mut HashMap::new(),\n             param_env: param_env,\n-            node_types: @mut HashMap::new(),\n+            node_types: RefCell::new(HashMap::new()),\n             node_type_substs: RefCell::new(HashMap::new()),\n             adjustments: RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n@@ -1097,7 +1097,8 @@ impl FnCtxt {\n     pub fn write_ty(&self, node_id: ast::NodeId, ty: ty::t) {\n         debug!(\"write_ty({}, {}) in fcx {}\",\n                node_id, ppaux::ty_to_str(self.tcx(), ty), self.tag());\n-        self.inh.node_types.insert(node_id, ty);\n+        let mut node_types = self.inh.node_types.borrow_mut();\n+        node_types.get().insert(node_id, ty);\n     }\n \n     pub fn write_substs(&self, node_id: ast::NodeId, substs: ty::substs) {\n@@ -1160,7 +1161,8 @@ impl FnCtxt {\n     }\n \n     pub fn expr_ty(&self, ex: &ast::Expr) -> ty::t {\n-        match self.inh.node_types.find(&ex.id) {\n+        let node_types = self.inh.node_types.borrow();\n+        match node_types.get().find(&ex.id) {\n             Some(&t) => t,\n             None => {\n                 self.tcx().sess.bug(format!(\"no type for expr in fcx {}\",\n@@ -1170,7 +1172,8 @@ impl FnCtxt {\n     }\n \n     pub fn node_ty(&self, id: ast::NodeId) -> ty::t {\n-        match self.inh.node_types.find(&id) {\n+        let node_types = self.inh.node_types.borrow();\n+        match node_types.get().find(&id) {\n             Some(&t) => t,\n             None => {\n                 self.tcx().sess.bug("}, {"sha": "3704a514b3b4494b38970fd14614843214a9b0c4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -206,7 +206,11 @@ fn maybe_resolve_type_vars_for_node(wbcx: &mut WbCtxt,\n                                     sp: Span,\n                                     id: ast::NodeId)\n                                  -> Option<ty::t> {\n-    if wbcx.fcx.inh.node_types.contains_key(&id) {\n+    let contained = {\n+        let node_types = wbcx.fcx.inh.node_types.borrow();\n+        node_types.get().contains_key(&id)\n+    };\n+    if contained {\n         resolve_type_vars_for_node(wbcx, sp, id)\n     } else {\n         None"}, {"sha": "3c26a3e9c5eea0efb44e91e255f4551401bd8822", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4661fd2582f5f2fc805a24820f8781650c0f99d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=c4661fd2582f5f2fc805a24820f8781650c0f99d", "patch": "@@ -240,7 +240,8 @@ pub struct CrateCtxt {\n pub fn write_ty_to_tcx(tcx: ty::ctxt, node_id: ast::NodeId, ty: ty::t) {\n     debug!(\"write_ty_to_tcx({}, {})\", node_id, ppaux::ty_to_str(tcx, ty));\n     assert!(!ty::type_needs_infer(ty));\n-    tcx.node_types.insert(node_id as uint, ty);\n+    let mut node_types = tcx.node_types.borrow_mut();\n+    node_types.get().insert(node_id as uint, ty);\n }\n pub fn write_substs_to_tcx(tcx: ty::ctxt,\n                            node_id: ast::NodeId,"}]}