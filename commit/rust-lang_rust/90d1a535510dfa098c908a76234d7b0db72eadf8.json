{"sha": "90d1a535510dfa098c908a76234d7b0db72eadf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDFhNTM1NTEwZGZhMDk4YzkwOGE3NjIzNGQ3YjBkYjcyZWFkZjg=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-08-18T18:29:35Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-09-02T18:58:02Z"}, "message": "Address feedback, and remove invalid tests", "tree": {"sha": "5893ae4ebbfe8d95541bbc2575424223f1cd430c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5893ae4ebbfe8d95541bbc2575424223f1cd430c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d1a535510dfa098c908a76234d7b0db72eadf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d1a535510dfa098c908a76234d7b0db72eadf8", "html_url": "https://github.com/rust-lang/rust/commit/90d1a535510dfa098c908a76234d7b0db72eadf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d1a535510dfa098c908a76234d7b0db72eadf8/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352fac95ad5305bf8b0e482b8255b2b0057adf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/352fac95ad5305bf8b0e482b8255b2b0057adf09", "html_url": "https://github.com/rust-lang/rust/commit/352fac95ad5305bf8b0e482b8255b2b0057adf09"}], "stats": {"total": 322, "additions": 108, "deletions": 214}, "files": [{"sha": "e9c01f5bad66ecab0273b09683dd971033d360c4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -762,16 +762,6 @@ pub struct GenericPredicates<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n-    pub fn empty() -> GenericPredicates<'tcx> {\n-        GenericPredicates {\n-            predicates: VecPerParamSpace::empty(),\n-        }\n-    }\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.predicates.is_empty()\n-    }\n-\n     pub fn instantiate(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();"}, {"sha": "4576fc9ffdc795c793e108e739e5246573ec31a5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 55, "deletions": 40, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -252,33 +252,71 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n     }\n \n     fn check_auto_trait(&mut self,\n-                                   trait_def_id: DefId,\n-                                   span: Span)\n+                        trait_def_id: DefId,\n+                        items: &[hir::TraitItem],\n+                        span: Span)\n     {\n+        // We want to ensure:\n+        //\n+        // 1) that there are no items contained within\n+        // the trait defintion\n+        //\n+        // 2) that the definition doesn't violate the no-super trait rule\n+        // for auto traits.\n+        //\n+        // 3) that the trait definition does not have any type parameters\n+\n         let predicates = self.tcx().lookup_predicates(trait_def_id);\n \n-        // If we must exclude the Self : Trait predicate contained by all\n+        // We must exclude the Self : Trait predicate contained by all\n         // traits.\n-        let no_refl_predicates : Vec<_> =\n-            predicates.predicates.iter().filter(|predicate| {\n-                match *predicate {\n-                    &ty::Predicate::Trait(ref poly_trait_ref) =>\n-                        poly_trait_ref.def_id() != trait_def_id,\n+        let has_predicates =\n+            predicates.predicates.iter().any(|predicate| {\n+                match predicate {\n+                    &ty::Predicate::Trait(ref poly_trait_ref) => {\n+                        let self_ty = poly_trait_ref.0.self_ty();\n+                        !(self_ty.is_self() && poly_trait_ref.def_id() == trait_def_id)\n+                    },\n                     _ => true,\n-            }\n-            }).collect();\n+                }\n+            });\n \n         let trait_def = self.tcx().lookup_trait_def(trait_def_id);\n \n+        let has_ty_params =\n+            trait_def.generics\n+                      .types\n+                      .len() > 1;\n+\n         // We use an if-else here, since the generics will also trigger\n         // an extraneous error message when we find predicates like\n         // `T : Sized` for a trait like: `trait Magic<T>`.\n-        if !trait_def.generics.types.get_slice(ParamSpace::TypeSpace).is_empty() {\n-            error_566(self.ccx, span);\n-        } else if !no_refl_predicates.is_empty() {\n-            error_565(self.ccx, span);\n+        //\n+        // We also put the check on the number of items here,\n+        // as it seems confusing to report an error about\n+        // extraneous predicates created by things like\n+        // an associated type inside the trait.\n+\n+        if !items.is_empty() {\n+            error_380(self.ccx, span);\n+        } else if has_ty_params {\n+            span_err!(self.tcx().sess, span, E0566,\n+                \"traits with auto impls (`e.g. unsafe impl \\\n+                    Trait for ..`) can not have type parameters\")\n+        } else if has_predicates {\n+            span_err!(self.tcx().sess, span, E0565,\n+                \"traits with auto impls (`e.g. unsafe impl \\\n+                    Trait for ..`) can not have predicates\")\n         }\n \n+        // Finally if either of the above conditions apply we should add a note\n+        // indicating that this error is the result of a recent soundness fix.\n+        if has_ty_params || has_predicates {\n+            self.tcx().sess.span_note_without_error(\n+                span,\n+                \"the new auto trait rules are the result of a \\\n+                    recent soundness fix; see #29859 for more details\")\n+        }\n     }\n \n     fn check_trait(&mut self,\n@@ -287,19 +325,10 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n     {\n         let trait_def_id = self.tcx().map.local_def_id(item.id);\n \n+        // TODO: in a second pass, globally rename to auto_trait,\n+        // from default_impl.\n         if self.tcx().trait_has_default_impl(trait_def_id) {\n-            // We want to both ensure:\n-            // 1) that there are no items contained within\n-            // the trait defintion\n-            //\n-            // 2) that the definition doesn't violate the no-super trait rule\n-            // for auto traits.\n-\n-            if !items.is_empty() {\n-                error_380(self.ccx, item.span);\n-            }\n-\n-            self.check_auto_trait(trait_def_id, item.span);\n+            self.check_auto_trait(trait_def_id, items, item.span);\n         }\n \n         self.for_item(item).with_fcx(|fcx, this| {\n@@ -311,8 +340,6 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         });\n     }\n \n-\n-\n     fn check_item_fn(&mut self,\n                      item: &hir::Item,\n                      body: &hir::Block)\n@@ -678,18 +705,6 @@ fn error_380(ccx: &CrateCtxt, span: Span) {\n                Trait for ..`) must have no methods or associated items\")\n }\n \n-fn error_565(ccx: &CrateCtxt, span: Span) {\n-    span_err!(ccx.tcx.sess, span, E0565,\n-              \"traits with default impls (`e.g. unsafe impl \\\n-               Trait for ..`) can not have predicates\")\n-}\n-\n-fn error_566(ccx: &CrateCtxt, span: Span) {\n-    span_err!(ccx.tcx.sess, span, E0566,\n-              \"traits with default impls (`e.g. unsafe impl \\\n-               Trait for ..`) can not have type parameters\")\n-}\n-\n fn error_392<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(ccx.tcx.sess, span, E0392,"}, {"sha": "cdf4b405fd83e7bd398c6a55eb6082eed820f1e3", "filename": "src/test/compile-fail/traits-inductive-overflow-auto-normal-auto.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test for a potential corner case in current impl where you have an\n-// auto trait (Magic1) that depends on a normal trait (Magic2) which\n-// in turn depends on the auto trait (Magic1). This was incorrectly\n-// being considered coinductive, but because of the normal trait\n-// interfering, it should not be.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait Magic1: Magic2 { }\n-impl Magic1 for .. {}\n-\n-trait Magic2 { }\n-impl<T: Magic1> Magic2 for T { }\n-\n-fn is_magic1<T: Magic1>() { }\n-\n-#[derive(Debug)]\n-struct NoClone;\n-\n-fn main() {\n-    is_magic1::<NoClone>(); //~ ERROR E0275\n-}"}, {"sha": "168148b92fe4405f56b4bc8599ec900fcc584cba", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -14,7 +14,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {}\n+trait Magic: Copy {} //~ ERROR E0565\n impl Magic for .. {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n@@ -23,6 +23,6 @@ fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n struct NoClone;\n \n fn main() {\n-    let (a, b) = copy(NoClone); //~ ERROR E0277\n+    let (a, b) = copy(NoClone);\n     println!(\"{:?} {:?}\", a, b);\n }"}, {"sha": "60da647f6824091c4521796772c3bede9e903c7a", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {} //~ ERROR E0565\n+trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0565\n impl Magic for .. {} \n impl<T:Magic> Magic for T {}\n ", "previous_filename": "src/test/compile-fail/issue-29859.rs"}, {"sha": "177d594da18a022430b1c423b2775026180ddba8", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is for #29859, we need to ensure auto traits,\n+// (also known previously as default traits), do not have\n+// supertraits. Since the compiler synthesizes these\n+// instances on demand, we are essentially enabling\n+// users to write axioms if we view trait selection,\n+// as a proof system.\n+//\n+// For example the below test allows us to add the rule:\n+//  forall (T : Type), T : Copy\n+//\n+// Providing a copy instance for *any* type, which\n+// is most definitely unsound. Imagine copying a\n+// type that contains a mutable reference, enabling\n+// mutable aliasing.\n+//\n+// You can imagine an even more dangerous test, \n+// which currently compiles on nightly.\n+//\n+// fn main() {\n+//    let mut i = 10;\n+//    let (a, b) = copy(&mut i);\n+//    println!(\"{:?} {:?}\", a, b);\n+// }\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Magic: Copy {} //~ ERROR E0565\n+impl Magic for .. {} \n+impl<T:Magic> Magic for T {}\n+\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    let (a, b) = copy(NoClone);\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "f2841a413db9e01e0502ed31df52b6bc179a0be0", "filename": "src/test/compile-fail/typeck-auto-trait-no-typeparams.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d1a535510dfa098c908a76234d7b0db72eadf8/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs?ref=90d1a535510dfa098c908a76234d7b0db72eadf8", "patch": "@@ -10,5 +10,5 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic<T> {} //~ E0566\n+trait Magic<T> {} //~ ERROR E0566\n impl Magic<isize> for .. {}", "previous_filename": "src/test/compile-fail/issue-29859-2.rs"}, {"sha": "aa918119fbceef87840dcd9cb859562c23a51442", "filename": "src/test/compile-fail/typeck-default-trait-impl-superregion.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait MyTrait : 'static {}\n-\n-impl MyTrait for .. {}\n-\n-fn foo<T:MyTrait>() { }\n-\n-fn bar<'a>() {\n-    foo::<&'a ()>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn main() {\n-}"}, {"sha": "0b071a9acd0921cedcbde0626bd524e65b6c435f", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait : NotImplemented {}\n-\n-impl MyTrait for .. {}\n-\n-fn foo<T:MyTrait>() { bar::<T>() }\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn main() {\n-    foo::<i32>(); //~ ERROR `i32: NotImplemented` is not satisfied\n-    bar::<i64>(); //~ ERROR `i64: NotImplemented` is not satisfied\n-}"}, {"sha": "3085f45a83dd1f3d393376232ec540dbb445ea72", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause-2.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait: Sized\n-    where Option<Self> : NotImplemented\n-{}\n-\n-impl NotImplemented for i32 {}\n-\n-impl MyTrait for .. {}\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn test() {\n-    bar::<Option<i32>>();\n-    //~^ ERROR `std::option::Option<i32>: NotImplemented` is not satisfied\n-}\n-\n-fn main() {\n-}"}, {"sha": "47e87c09d12b1c7e1f908ca155a5016c195da1f0", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait: Sized\n-    where Option<Self> : NotImplemented\n-{}\n-\n-impl NotImplemented for i32 {}\n-\n-impl MyTrait for .. {}\n-\n-fn foo<T:MyTrait>() {\n-    //~^ ERROR `std::option::Option<T>: NotImplemented` is not satisfied\n-    // This should probably typecheck. This is #20671.\n-}\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn main() {\n-}"}]}