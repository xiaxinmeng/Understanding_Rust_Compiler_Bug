{"sha": "d78c2b483eda9538b55e2f79558032d9ccb286a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OGMyYjQ4M2VkYTk1MzhiNTVlMmY3OTU1ODAzMmQ5Y2NiMjg2YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T17:10:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T17:10:08Z"}, "message": "Auto merge of #42192 - michaelwoerister:no_deptracking_map_in_queries, r=nikomatsakis\n\nincr.comp.: Remove DepGraph::write() and its callers\n\nAfter months of yak shaving, we are finally there `:)`\n\nThe existence of `DepGraph::write()` was one of the two main ways for introducing cycles into the dep-graph -- something we need to avoid in the future. The other way, re-opening nodes to add more edges, is next on the list.\n\nr? @nikomatsakis", "tree": {"sha": "e46c356a5fd26cdb8f82239c6887ffc76ca6f6fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46c356a5fd26cdb8f82239c6887ffc76ca6f6fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78c2b483eda9538b55e2f79558032d9ccb286a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78c2b483eda9538b55e2f79558032d9ccb286a0", "html_url": "https://github.com/rust-lang/rust/commit/d78c2b483eda9538b55e2f79558032d9ccb286a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78c2b483eda9538b55e2f79558032d9ccb286a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bed655142dd5e42ba4539de53b3663d8a123e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/03bed655142dd5e42ba4539de53b3663d8a123e0", "html_url": "https://github.com/rust-lang/rust/commit/03bed655142dd5e42ba4539de53b3663d8a123e0"}, {"sha": "c150301a5bae96c504c7b957d6b929a1ed1ba6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c150301a5bae96c504c7b957d6b929a1ed1ba6fb", "html_url": "https://github.com/rust-lang/rust/commit/c150301a5bae96c504c7b957d6b929a1ed1ba6fb"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "7a246c814d3ec9b2fd983cc2cf66ea6a5e1eddd5", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=d78c2b483eda9538b55e2f79558032d9ccb286a0", "patch": "@@ -11,7 +11,6 @@\n use hir::def_id::DefId;\n use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n-use std::collections::hash_map::Entry;\n use std::ops::Index;\n use std::hash::Hash;\n use std::marker::PhantomData;\n@@ -50,29 +49,11 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         self.graph.read(dep_node);\n     }\n \n-    /// Registers a (synthetic) write to the key `k`. Usually this is\n-    /// invoked automatically by `insert`.\n-    fn write(&self, k: &M::Key) {\n-        let dep_node = M::to_dep_node(k);\n-        self.graph.write(dep_node);\n-    }\n-\n     pub fn get(&self, k: &M::Key) -> Option<&M::Value> {\n         self.read(k);\n         self.map.get(k)\n     }\n \n-    pub fn insert(&mut self, k: M::Key, v: M::Value) {\n-        self.write(&k);\n-        let old_value = self.map.insert(k, v);\n-        assert!(old_value.is_none());\n-    }\n-\n-    pub fn entry(&mut self, k: M::Key) -> Entry<M::Key, M::Value> {\n-        self.write(&k);\n-        self.map.entry(k)\n-    }\n-\n     pub fn contains_key(&self, k: &M::Key) -> bool {\n         self.read(k);\n         self.map.contains_key(k)"}, {"sha": "18eb4e5d0ad73474f292d030f3fdf7e1ce518804", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=d78c2b483eda9538b55e2f79558032d9ccb286a0", "patch": "@@ -117,12 +117,6 @@ impl DepGraph {\n         }\n     }\n \n-    pub fn write(&self, v: DepNode<DefId>) {\n-        if self.data.thread.is_enqueue_enabled() {\n-            self.data.thread.enqueue(DepMessage::Write(v));\n-        }\n-    }\n-\n     /// Indicates that a previous work product exists for `v`. This is\n     /// invoked during initial start-up based on what nodes are clean\n     /// (and what files exist in the incr. directory)."}, {"sha": "7316d45dc21ae577bd696af66ef5d284e6fd0217", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d78c2b483eda9538b55e2f79558032d9ccb286a0", "patch": "@@ -689,7 +689,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             export_map: resolutions.export_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             hir: hir,\n-            maps: maps::Maps::new(dep_graph, providers),\n+            maps: maps::Maps::new(providers),\n             mir_passes,\n             freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,"}, {"sha": "cfb9e648d3b7eb1dd4c0d18c649080decd35403d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78c2b483eda9538b55e2f79558032d9ccb286a0/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=d78c2b483eda9538b55e2f79558032d9ccb286a0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n+use dep_graph::{DepNode, DepTrackingMapConfig};\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n@@ -27,9 +27,11 @@ use ty::fast_reject::SimplifiedType;\n use util::nodemap::{DefIdSet, NodeSet};\n \n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::fx::FxHashMap;\n use std::cell::{RefCell, RefMut};\n use std::fmt::Debug;\n use std::hash::Hash;\n+use std::marker::PhantomData;\n use std::mem;\n use std::collections::BTreeMap;\n use std::ops::Deref;\n@@ -180,6 +182,20 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n     }\n }\n \n+struct QueryMap<D: QueryDescription> {\n+    phantom: PhantomData<D>,\n+    map: FxHashMap<D::Key, D::Value>,\n+}\n+\n+impl<M: QueryDescription> QueryMap<M> {\n+    fn new() -> QueryMap<M> {\n+        QueryMap {\n+            phantom: PhantomData,\n+            map: FxHashMap(),\n+        }\n+    }\n+}\n+\n pub struct CycleError<'a, 'tcx: 'a> {\n     span: Span,\n     cycle: RefMut<'a, [(Span, Query<'tcx>)]>,\n@@ -463,13 +479,12 @@ macro_rules! define_maps {\n         }\n \n         impl<$tcx> Maps<$tcx> {\n-            pub fn new(dep_graph: DepGraph,\n-                       providers: IndexVec<CrateNum, Providers<$tcx>>)\n+            pub fn new(providers: IndexVec<CrateNum, Providers<$tcx>>)\n                        -> Self {\n                 Maps {\n                     providers,\n                     query_stack: RefCell::new(vec![]),\n-                    $($name: RefCell::new(DepTrackingMap::new(dep_graph.clone()))),*\n+                    $($name: RefCell::new(QueryMap::new())),*\n                 }\n             }\n         }\n@@ -521,7 +536,7 @@ macro_rules! define_maps {\n                        key,\n                        span);\n \n-                if let Some(result) = tcx.maps.$name.borrow().get(&key) {\n+                if let Some(result) = tcx.maps.$name.borrow().map.get(&key) {\n                     return Ok(f(result));\n                 }\n \n@@ -539,21 +554,19 @@ macro_rules! define_maps {\n                     provider(tcx.global_tcx(), key)\n                 })?;\n \n-                Ok(f(tcx.maps.$name.borrow_mut().entry(key).or_insert(result)))\n+                Ok(f(tcx.maps.$name.borrow_mut().map.entry(key).or_insert(result)))\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)\n                            -> Result<$V, CycleError<'a, $tcx>> {\n+                // We register the `read` here, but not in `force`, since\n+                // `force` does not give access to the value produced (and thus\n+                // we actually don't read it).\n+                tcx.dep_graph.read(Self::to_dep_node(&key));\n                 Self::try_get_with(tcx, span, key, Clone::clone)\n             }\n \n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n-                // FIXME(eddyb) Move away from using `DepTrackingMap`\n-                // so we don't have to explicitly ignore a false edge:\n-                // we can't observe a value dependency, only side-effects,\n-                // through `force`, and once everything has been updated,\n-                // perhaps only diagnostics, if those, will remain.\n-                let _ignore = tcx.dep_graph.in_ignore();\n                 match Self::try_get_with(tcx, span, key, |_| ()) {\n                     Ok(()) => {}\n                     Err(e) => tcx.report_cycle(e)\n@@ -644,7 +657,7 @@ macro_rules! define_map_struct {\n             tcx: $tcx,\n             input: $input,\n             output: ($($output)*\n-                     $(#[$attr])* $($pub)* $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>,)\n+                     $(#[$attr])* $($pub)* $name: RefCell<QueryMap<queries::$name<$tcx>>>,)\n         }\n     };\n "}]}