{"sha": "9433a108cfcf3a9c7de9299d6641a5abf9031a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzNhMTA4Y2ZjZjNhOWM3ZGU5Mjk5ZDY2NDFhNWFiZjkwMzFhMTc=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-17T09:54:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Make pattern inference work w/o proper expecations", "tree": {"sha": "d7054f505217be400c1e4b77417a2b9c525dd90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7054f505217be400c1e4b77417a2b9c525dd90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9433a108cfcf3a9c7de9299d6641a5abf9031a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9433a108cfcf3a9c7de9299d6641a5abf9031a17", "html_url": "https://github.com/rust-lang/rust/commit/9433a108cfcf3a9c7de9299d6641a5abf9031a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9433a108cfcf3a9c7de9299d6641a5abf9031a17/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1b4034a523081cfeea1c7a1d61130d5d1778e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1b4034a523081cfeea1c7a1d61130d5d1778e1", "html_url": "https://github.com/rust-lang/rust/commit/be1b4034a523081cfeea1c7a1d61130d5d1778e1"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "8ad80990e6700cc8dd3f96ff57a5ddfafb787e11", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9433a108cfcf3a9c7de9299d6641a5abf9031a17/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433a108cfcf3a9c7de9299d6641a5abf9031a17/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9433a108cfcf3a9c7de9299d6641a5abf9031a17", "patch": "@@ -911,7 +911,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             return Ty::Unknown;\n         };\n \n-        // walk subpats\n         if fields.len() != sub_pats.len() {\n             return Ty::Unknown;\n         }\n@@ -944,44 +943,49 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    // FIXME: Expectation should probably contain a reference to a Ty instead of\n-    // a Ty itself\n+    // TODO: Expectation should probably contain a Cow pointer to Ty?\n+    // so that we can make new expectations of subtypes cheaply\n     fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n-        // FIXME: we can do some inference even if the expected ty isnt already\n-        // of the right form\n-        let ty = match (&body[pat], &expected.ty) {\n-            (Pat::Tuple(ref args), &Ty::Tuple(ref tuple_args))\n-                if args.len() == tuple_args.len() =>\n-            {\n-                for (&pat, ty) in args.iter().zip(tuple_args.iter()) {\n-                    // FIXME: can we do w/o cloning?\n-                    self.infer_pat(pat, &Expectation::has_type(ty.clone()));\n-                }\n-                expected.ty.clone()\n+        let ty = match &body[pat] {\n+            Pat::Tuple(ref args) => {\n+                // this can probably be done without cloning/ collecting\n+                let expectations = match expected.ty {\n+                    Ty::Tuple(ref tuple_args) if args.len() == tuple_args.len() => {\n+                        tuple_args.iter().cloned().collect()\n+                    }\n+                    _ => vec![Ty::Unknown; args.len()],\n+                };\n+\n+                let inner_tys = args\n+                    .iter()\n+                    .zip(expectations.into_iter())\n+                    .map(|(&pat, ty)| self.infer_pat(pat, &Expectation::has_type(ty)))\n+                    .collect::<Vec<_>>()\n+                    .into();\n+\n+                Ty::Tuple(inner_tys)\n             }\n-            (&Pat::Ref { pat, mutability }, &Ty::Ref(ref sub_ty, ty_mut))\n-                if mutability == ty_mut =>\n-            {\n-                self.infer_pat(pat, &Expectation::has_type((&**sub_ty).clone()));\n-                expected.ty.clone()\n+            Pat::Ref { pat, mutability } => {\n+                let expectation = match expected.ty {\n+                    Ty::Ref(ref sub_ty, exp_mut) if *mutability == exp_mut => {\n+                        Expectation::has_type((&**sub_ty).clone())\n+                    }\n+                    _ => Expectation::none(),\n+                };\n+                let subty = self.infer_pat(*pat, &expectation);\n+                Ty::Ref(subty.into(), *mutability)\n             }\n-            (\n-                &Pat::TupleStruct {\n-                    path: ref p,\n-                    args: ref sub_pats,\n-                },\n-                _,\n-            ) => self.infer_tuple_struct(p.as_ref(), sub_pats),\n-            (\n-                &Pat::Struct {\n-                    path: ref p,\n-                    args: ref fields,\n-                },\n-                _,\n-            ) => self.infer_struct(p.as_ref(), fields),\n-            (_, ref _expected_ty) => expected.ty.clone(),\n+            Pat::TupleStruct {\n+                path: ref p,\n+                args: ref sub_pats,\n+            } => self.infer_tuple_struct(p.as_ref(), sub_pats),\n+            Pat::Struct {\n+                path: ref p,\n+                args: ref fields,\n+            } => self.infer_struct(p.as_ref(), fields),\n+            _ => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here\n         let ty = self.insert_type_vars_shallow(ty);"}, {"sha": "8b7c967c49d75cabc680fcb2c4b36ee3ef9bd109", "filename": "crates/ra_hir/src/ty/tests/data/pattern.txt", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9433a108cfcf3a9c7de9299d6641a5abf9031a17/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9433a108cfcf3a9c7de9299d6641a5abf9031a17/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt?ref=9433a108cfcf3a9c7de9299d6641a5abf9031a17", "patch": "@@ -1,5 +1,5 @@\n [9; 10) 'x': &i32\n-[18; 98) '{     ...o\"); }': ()\n+[18; 259) '{     ...c }; }': ()\n [28; 29) 'y': &i32\n [32; 33) 'x': &i32\n [43; 45) '&z': &i32\n@@ -13,3 +13,27 @@\n [83; 95) '(1, \"hello\")': (i32, &str)\n [84; 85) '1': i32\n [87; 94) '\"hello\"': &str\n+[102; 152) 'for (e...     }': ()\n+[106; 112) '(e, f)': ([unknown], [unknown])\n+[107; 108) 'e': [unknown]\n+[110; 111) 'f': [unknown]\n+[116; 125) 'some_iter': [unknown]\n+[126; 152) '{     ...     }': ()\n+[140; 141) 'g': [unknown]\n+[144; 145) 'e': [unknown]\n+[158; 205) 'if let...     }': ()\n+[165; 170) '[val]': [unknown]\n+[173; 176) 'opt': [unknown]\n+[177; 205) '{     ...     }': ()\n+[191; 192) 'h': [unknown]\n+[195; 198) 'val': [unknown]\n+[215; 221) 'lambda': [unknown]\n+[224; 256) '|a: u6...b; c }': [unknown]\n+[225; 226) 'a': u64\n+[233; 234) 'b': u64\n+[236; 237) 'c': i32\n+[244; 256) '{ a + b; c }': i32\n+[246; 247) 'a': u64\n+[246; 251) 'a + b': u64\n+[250; 251) 'b': u64\n+[253; 254) 'c': i32"}]}