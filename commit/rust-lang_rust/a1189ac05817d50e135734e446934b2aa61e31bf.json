{"sha": "a1189ac05817d50e135734e446934b2aa61e31bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTg5YWMwNTgxN2Q1MGUxMzU3MzRlNDQ2OTM0YjJhYTYxZTMxYmY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-04T16:23:39Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-04T18:12:48Z"}, "message": "Replace CrateAnalysis::access_levels with query", "tree": {"sha": "ad699940cd17a13d54f4e8d696dbc32eceecbfe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad699940cd17a13d54f4e8d696dbc32eceecbfe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1189ac05817d50e135734e446934b2aa61e31bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1189ac05817d50e135734e446934b2aa61e31bf", "html_url": "https://github.com/rust-lang/rust/commit/a1189ac05817d50e135734e446934b2aa61e31bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1189ac05817d50e135734e446934b2aa61e31bf/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a602f13f02acc17eda0d7f2c2d9adeabbdb59cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a602f13f02acc17eda0d7f2c2d9adeabbdb59cf4", "html_url": "https://github.com/rust-lang/rust/commit/a602f13f02acc17eda0d7f2c2d9adeabbdb59cf4"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "20ae9cb2da1f67f7986436415e0a8cc0f6f7dd19", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a1189ac05817d50e135734e446934b2aa61e31bf", "patch": "@@ -14,7 +14,6 @@ use ich::Fingerprint;\n use ich::StableHashingContext;\n use infer::canonical::Canonical;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n use mir::interpret::{GlobalId, ErrorHandled};\n@@ -123,7 +122,6 @@ mod sty;\n /// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub access_levels: Lrc<AccessLevels>,\n     pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n }"}, {"sha": "851de44c2811e1308a3e03b167009a0a2fc643eb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a1189ac05817d50e135734e446934b2aa61e31bf", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt};\n use rustc::traits;\n use rustc::util::common::{install_panic_hook, time, ErrorReported};\n@@ -18,7 +17,7 @@ use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{self, Lrc, Lock};\n+use rustc_data_structures::sync::{self, Lock};\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -785,7 +784,6 @@ where\n             },\n \n             analysis: ty::CrateAnalysis {\n-                access_levels: Lrc::new(AccessLevels::default()),\n                 name: crate_name.to_string(),\n                 glob_map: if resolver.make_glob_map {\n                     Some(resolver.glob_map)\n@@ -1193,7 +1191,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     sess: &'tcx Session,\n     cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n-    mut analysis: ty::CrateAnalysis,\n+    analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n     arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n@@ -1275,8 +1273,9 @@ where\n                 rvalue_promotion::check_crate(tcx)\n             });\n \n-            analysis.access_levels =\n-                time(sess, \"privacy checking\", || rustc_privacy::check_crate(tcx));\n+            time(sess, \"privacy checking\", || {\n+                rustc_privacy::check_crate(tcx)\n+            });\n \n             time(sess, \"intrinsic checking\", || {\n                 middle::intrinsicck::check_crate(tcx)"}, {"sha": "891537309177e5d611d9d77ce0b3113f8c04d1dc", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a1189ac05817d50e135734e446934b2aa61e31bf", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($item.id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "ccbe48f4ac1fb518173ccb14bc13ff691c49fda8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1189ac05817d50e135734e446934b2aa61e31bf/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a1189ac05817d50e135734e446934b2aa61e31bf", "patch": "@@ -470,7 +470,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n-            access_levels: Lrc::new(AccessLevels::default()),\n             name: name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n         };\n@@ -494,12 +493,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n-                                                        |tcx, analysis, _, result| {\n+                                                        |tcx, _, _, result| {\n             if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let ty::CrateAnalysis { access_levels, .. } = analysis;\n+            let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n \n             // Convert from a NodeId set to a DefId set since we don't always have easy access\n             // to the map from defid -> nodeid"}]}