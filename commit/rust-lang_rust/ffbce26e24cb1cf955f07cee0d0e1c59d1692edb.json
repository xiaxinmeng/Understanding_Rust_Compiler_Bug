{"sha": "ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYmNlMjZlMjRjYjFjZjk1NWYwN2NlZTBkMGUxYzU5ZDE2OTJlZGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:17Z"}, "message": "Rollup merge of #88543 - m-ou-se:closure-migration-macro-block-fragment, r=estebank\n\nImprove closure dummy capture suggestion in macros.\n\nFixes some cases of https://github.com/rust-lang/rust/issues/88440\n\nFixes https://crater-reports.s3.amazonaws.com/pr-87190-3/try%23a7a572ce3edd6d476191fbfe92c9c1986e009b34/reg/rcodec-1.0.1/log.txt", "tree": {"sha": "c233f502d6ceb184a34468b3ce5af474f75dc043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c233f502d6ceb184a34468b3ce5af474f75dc043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV5CRBK7hj4Ov3rIwAAAQQIACjxyU3qYcslaH205idfQgzw\nc0eZT/prlUD0a3YVF4EJMHJROfSsaIABHg6o2QuAZeH4sBOW0pDhnBQHp0ftH7hH\nOnEiSz97WSPkoq3HQvAlktRBVpljmIR2PEmRFMaID4hXSzz9wQXbihc0dDbDCsOY\nWux2I9cdz/hCl76KIvSoEt29dC/RH+0w15VqkbWRpxP+fOiI+YdpcrKkzl0VI8st\nrbIghb+7P5T34c4u3xhobSrVuzGEOLVIwUWRVUlyTErPyaBuv4JOIOa/KxT5ZDZu\nMQVq889h2LpLjjIoX2lYUlN/Gt2x3sUya8Ns69Nj+ZIrWba8FjqeiH9DcqPhVtQ=\n=S8+M\n-----END PGP SIGNATURE-----\n", "payload": "tree c233f502d6ceb184a34468b3ce5af474f75dc043\nparent afdaa2e8f58958149fd76c16b89a54bbc8dbd8d1\nparent 7d18052b1bfc31a96c2482e8919ba824c0e4100c\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602617 +0200\ncommitter GitHub <noreply@github.com> 1630602617 +0200\n\nRollup merge of #88543 - m-ou-se:closure-migration-macro-block-fragment, r=estebank\n\nImprove closure dummy capture suggestion in macros.\n\nFixes some cases of https://github.com/rust-lang/rust/issues/88440\n\nFixes https://crater-reports.s3.amazonaws.com/pr-87190-3/try%23a7a572ce3edd6d476191fbfe92c9c1986e009b34/reg/rcodec-1.0.1/log.txt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "html_url": "https://github.com/rust-lang/rust/commit/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afdaa2e8f58958149fd76c16b89a54bbc8dbd8d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/afdaa2e8f58958149fd76c16b89a54bbc8dbd8d1", "html_url": "https://github.com/rust-lang/rust/commit/afdaa2e8f58958149fd76c16b89a54bbc8dbd8d1"}, {"sha": "7d18052b1bfc31a96c2482e8919ba824c0e4100c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d18052b1bfc31a96c2482e8919ba824c0e4100c", "html_url": "https://github.com/rust-lang/rust/commit/7d18052b1bfc31a96c2482e8919ba824c0e4100c"}], "stats": {"total": 121, "additions": 112, "deletions": 9}, "files": [{"sha": "702f69a9fcf0ba2381c181d97a40fefb78d93f53", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -680,15 +680,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         migrated_variables_concat\n                     );\n \n-                    // If the body was entirely expanded from a macro\n-                    // invocation, i.e. the body is not contained inside the\n-                    // closure span, then we walk up the expansion until we\n-                    // find the span before the expansion.\n-                    let closure_body_span = self.tcx.hir().span(body_id.hir_id)\n-                        .find_ancestor_inside(closure_span)\n-                        .unwrap_or(DUMMY_SP);\n+                    let mut closure_body_span = {\n+                        // If the body was entirely expanded from a macro\n+                        // invocation, i.e. the body is not contained inside the\n+                        // closure span, then we walk up the expansion until we\n+                        // find the span before the expansion.\n+                        let s = self.tcx.hir().span(body_id.hir_id);\n+                        s.find_ancestor_inside(closure_span).unwrap_or(s)\n+                    };\n+\n+                    if let Ok(mut s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                        if s.starts_with('$') {\n+                            // Looks like a macro fragment. Try to find the real block.\n+                            if let Some(hir::Node::Expr(&hir::Expr {\n+                                kind: hir::ExprKind::Block(block, ..), ..\n+                            })) = self.tcx.hir().find(body_id.hir_id) {\n+                                // If the body is a block (with `{..}`), we use the span of that block.\n+                                // E.g. with a `|| $body` expanded from a `m!({ .. })`, we use `{ .. }`, and not `$body`.\n+                                // Since we know it's a block, we know we can insert the `let _ = ..` without\n+                                // breaking the macro syntax.\n+                                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(block.span) {\n+                                    closure_body_span = block.span;\n+                                    s = snippet;\n+                                }\n+                            }\n+                        }\n \n-                    if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                         let mut lines = s.lines();\n                         let line1 = lines.next().unwrap_or_default();\n "}, {"sha": "f91454aa2111e044ee11a99f84582a8b02e267de", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.fixed?ref=ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_compatibility)]\n+\n+macro_rules! m {\n+    (@ $body:expr) => {{\n+        let f = || $body;\n+        //~^ WARNING: drop order\n+        f();\n+    }};\n+    ($body:block) => {{\n+        m!(@ $body);\n+    }};\n+}\n+\n+fn main() {\n+    let a = (1.to_string(), 2.to_string());\n+    m!({\n+        let _ = &a;\n+        //~^ HELP: add a dummy\n+        let x = a.0;\n+        println!(\"{}\", x);\n+    });\n+}"}, {"sha": "5a1026d04331912d4d998eea56b7bacfd7da06a9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.rs?ref=ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_compatibility)]\n+\n+macro_rules! m {\n+    (@ $body:expr) => {{\n+        let f = || $body;\n+        //~^ WARNING: drop order\n+        f();\n+    }};\n+    ($body:block) => {{\n+        m!(@ $body);\n+    }};\n+}\n+\n+fn main() {\n+    let a = (1.to_string(), 2.to_string());\n+    m!({\n+        //~^ HELP: add a dummy\n+        let x = a.0;\n+        println!(\"{}\", x);\n+    });\n+}"}, {"sha": "e6e5598f6d2a1beee09d78c72271ab1c511f074b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffbce26e24cb1cf955f07cee0d0e1c59d1692edb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr?ref=ffbce26e24cb1cf955f07cee0d0e1c59d1692edb", "patch": "@@ -0,0 +1,37 @@\n+warning: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/closure-body-macro-fragment.rs:8:17\n+   |\n+LL |           let f = || $body;\n+   |  _________________^\n+LL | |\n+LL | |         f();\n+LL | |     }};\n+   | |     - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n+LL | |     ($body:block) => {{\n+LL | |         m!(@ $body);\n+   | |__________________^\n+...\n+LL | /     m!({\n+LL | |\n+LL | |         let x = a.0;\n+   | |                 --- in Rust 2018, this closure captures all of `a`, but in Rust 2021, it will only capture `a.0`\n+LL | |         println!(\"{}\", x);\n+LL | |     });\n+   | |_______- in this macro invocation\n+   |\n+note: the lint level is defined here\n+  --> $DIR/closure-body-macro-fragment.rs:4:9\n+   |\n+LL | #![warn(rust_2021_compatibility)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(rust_2021_incompatible_closure_captures)]` implied by `#[warn(rust_2021_compatibility)]`\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: add a dummy let to cause `a` to be fully captured\n+   |\n+LL ~     m!({\n+LL +         let _ = &a;\n+   |\n+\n+warning: 1 warning emitted\n+"}]}