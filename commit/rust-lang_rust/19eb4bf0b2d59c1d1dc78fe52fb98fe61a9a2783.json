{"sha": "19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWI0YmYwYjJkNTljMWQxZGM3OGZlNTJmYjk4ZmU2MWE5YTI3ODM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-12T03:54:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-12T03:54:57Z"}, "message": "Add coercions from *mut to *const and from &mut to *const.", "tree": {"sha": "70ed72cabced2e377e62267dfa8b29098759780b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ed72cabced2e377e62267dfa8b29098759780b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "html_url": "https://github.com/rust-lang/rust/commit/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872ba2ccd3a428ad3b3a5f621a12aaa5e8043366", "url": "https://api.github.com/repos/rust-lang/rust/commits/872ba2ccd3a428ad3b3a5f621a12aaa5e8043366", "html_url": "https://github.com/rust-lang/rust/commit/872ba2ccd3a428ad3b3a5f621a12aaa5e8043366"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "babef6bae3df1b7f747506ed6416e86ff0e0a889", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "patch": "@@ -549,17 +549,18 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                b.repr(self.get_ref().infcx.tcx));\n \n         let mt_a = match *sty_a {\n-            ty::ty_rptr(_, mt) => mt,\n+            ty::ty_rptr(_, mt) | ty::ty_ptr(mt) => mt,\n             _ => {\n                 return self.subtype(a, b);\n             }\n         };\n \n         // Check that the types which they point at are compatible.\n-        // Note that we don't adjust the mutability here. We cannot change\n-        // the mutability and the kind of pointer in a single coercion.\n-        let a_unsafe = ty::mk_ptr(self.get_ref().infcx.tcx, mt_a);\n+        let a_unsafe = ty::mk_ptr(self.get_ref().infcx.tcx, ty::mt{ mutbl: mutbl_b, ty: mt_a.ty });\n         try!(self.subtype(a_unsafe, b));\n+        if !can_coerce_mutbls(mt_a.mutbl, mutbl_b) {\n+            return Err(ty::terr_mutability);\n+        }\n \n         // Although references and unsafe ptrs have the same\n         // representation, we still register an AutoDerefRef so that"}, {"sha": "d9b20748a7a29c32ed7ef79e1490bd398e50025c", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test coercions between pointers which don't do anything fancy like unsizing.\n+// These are testing that we don't lose mutability when converting to raw pointers.\n+\n+pub fn main() {\n+    // *const -> *mut\n+    let x: *const int = &42i;\n+    let x: *mut int = x; //~ERROR values differ in mutability\n+\n+    // & -> *mut\n+    let x: *mut int = &42; //~ERROR values differ in mutability\n+\n+    let x: *const int = &42;\n+    let x: *mut int = x; //~ERROR values differ in mutability\n+}"}, {"sha": "1b77c1316ed282d54481e5a74b1a7d2179bfcc8e", "filename": "src/test/run-pass/ptr-coercion.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Ftest%2Frun-pass%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783/src%2Ftest%2Frun-pass%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fptr-coercion.rs?ref=19eb4bf0b2d59c1d1dc78fe52fb98fe61a9a2783", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test coercions between pointers which don't do anything fancy like unsizing.\n+\n+pub fn main() {\n+    // &mut -> &\n+    let x: &mut int = &mut 42i;\n+    let x: &int = x;\n+\n+    let x: &int = &mut 42i;\n+\n+    // & -> *const\n+    let x: &int = &42i;\n+    let x: *const int = x;\n+\n+    let x: *const int = &42i;\n+\n+    // &mut -> *const\n+    let x: &mut int = &mut 42i;\n+    let x: *const int = x;\n+\n+    let x: *const int = &mut 42i;\n+\n+    // *mut -> *const\n+    let x: *mut int = &mut 42i;\n+    let x: *const int = x;\n+}"}]}