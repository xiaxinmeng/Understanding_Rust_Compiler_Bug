{"sha": "9e8fd2438377c0e90f2fc853486426a48611708a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGZkMjQzODM3N2MwZTkwZjJmYzg1MzQ4NjQyNmE0ODYxMTcwOGE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-14T20:20:38Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-15T18:56:55Z"}, "message": "Stabilize std::sync::mpsc::Receiver::try_iter", "tree": {"sha": "cc355ffbbbda87507907a43d9aae8facb02c7d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc355ffbbbda87507907a43d9aae8facb02c7d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8fd2438377c0e90f2fc853486426a48611708a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8fd2438377c0e90f2fc853486426a48611708a", "html_url": "https://github.com/rust-lang/rust/commit/9e8fd2438377c0e90f2fc853486426a48611708a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8fd2438377c0e90f2fc853486426a48611708a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3188ed50cfa8a10a8e9986d1c9135e214ad4cebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3188ed50cfa8a10a8e9986d1c9135e214ad4cebc", "html_url": "https://github.com/rust-lang/rust/commit/3188ed50cfa8a10a8e9986d1c9135e214ad4cebc"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "63745388eb67b0d771e62412a2e88bb9161e9095", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8fd2438377c0e90f2fc853486426a48611708a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8fd2438377c0e90f2fc853486426a48611708a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=9e8fd2438377c0e90f2fc853486426a48611708a", "patch": "@@ -316,7 +316,7 @@ pub struct Iter<'a, T: 'a> {\n ///\n /// This Iterator will never block the caller in order to wait for data to\n /// become available. Instead, it will return `None`.\n-#[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+#[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n pub struct TryIter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n@@ -1008,7 +1008,7 @@ impl<T> Receiver<T> {\n     /// It will return `None` if there are no more pending values or if the\n     /// channel has hung up. The iterator will never `panic!` or block the\n     /// user by waiting for values.\n-    #[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+    #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n     pub fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }\n     }\n@@ -1108,7 +1108,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n-#[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+#[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n impl<'a, T> Iterator for TryIter<'a, T> {\n     type Item = T;\n "}]}