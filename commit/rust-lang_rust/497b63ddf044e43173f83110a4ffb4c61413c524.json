{"sha": "497b63ddf044e43173f83110a4ffb4c61413c524", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5N2I2M2RkZjA0NGU0MzE3M2Y4MzExMGE0ZmZiNGM2MTQxM2M1MjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T22:28:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:58Z"}, "message": "librustc: De-`@mut` all writers", "tree": {"sha": "dba90beb6f4f2aaf09df0c7fbbc4f3c4e046cff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba90beb6f4f2aaf09df0c7fbbc4f3c4e046cff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497b63ddf044e43173f83110a4ffb4c61413c524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497b63ddf044e43173f83110a4ffb4c61413c524", "html_url": "https://github.com/rust-lang/rust/commit/497b63ddf044e43173f83110a4ffb4c61413c524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497b63ddf044e43173f83110a4ffb4c61413c524/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26018cc89681d979555f3405df71e370941ffd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26018cc89681d979555f3405df71e370941ffd5", "html_url": "https://github.com/rust-lang/rust/commit/b26018cc89681d979555f3405df71e370941ffd5"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "681f9a4895bf860be9bd98e875d9fc397e7c57d7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=497b63ddf044e43173f83110a4ffb4c61413c524", "patch": "@@ -600,7 +600,7 @@ pub fn pretty_print_input(sess: Session,\n                         &crate,\n                         source_name(input),\n                         rdr as @mut io::Reader,\n-                        @mut stdout as @mut io::Writer,\n+                        ~stdout as ~io::Writer,\n                         annotation,\n                         is_expanded);\n }"}, {"sha": "b0ca03181f8d1a1a203f2095be93238a2f34bdd3", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=497b63ddf044e43173f83110a4ffb4c61413c524", "patch": "@@ -347,12 +347,12 @@ impl<O:DataFlowOperator+Clone+'static> DataFlowContext<O> {\n         debug!(\"Dataflow result:\");\n         debug!(\"{}\", {\n             let this = @(*self).clone();\n-            this.pretty_print_to(@mut io::stderr() as @mut io::Writer, blk);\n+            this.pretty_print_to(~io::stderr() as ~io::Writer, blk);\n             \"\"\n         });\n     }\n \n-    fn pretty_print_to(@self, wr: @mut io::Writer, blk: &ast::Block) {\n+    fn pretty_print_to(@self, wr: ~io::Writer, blk: &ast::Block) {\n         let mut ps = pprust::rust_printer_annotated(wr,\n                                                     self.tcx.sess.intr(),\n                                                     self as @pprust::pp_ann);"}, {"sha": "5afe6266c991067a8e35854b3bf30ee92c7e3f5d", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=497b63ddf044e43173f83110a4ffb4c61413c524", "patch": "@@ -148,7 +148,7 @@ pub struct print_stack_elt {\n \n pub static size_infinity: int = 0xffff;\n \n-pub fn mk_printer(out: @mut io::Writer, linewidth: uint) -> Printer {\n+pub fn mk_printer(out: ~io::Writer, linewidth: uint) -> Printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n     let n: uint = 3 * linewidth;\n@@ -255,7 +255,7 @@ pub fn mk_printer(out: @mut io::Writer, linewidth: uint) -> Printer {\n  * called 'print'.\n  */\n pub struct Printer {\n-    out: @mut io::Writer,\n+    out: ~io::Writer,\n     buf_len: uint,\n     margin: int, // width of lines we're constrained to\n     space: int, // number of spaces left on line"}, {"sha": "5a529120b07c20fde427dbf6c148b1304ffe9371", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b63ddf044e43173f83110a4ffb4c61413c524/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=497b63ddf044e43173f83110a4ffb4c61413c524", "patch": "@@ -27,6 +27,7 @@ use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;\n \n+use std::cast;\n use std::char;\n use std::str;\n use std::io;\n@@ -86,11 +87,11 @@ pub fn end(s: &mut ps) {\n     pp::end(&mut s.s);\n }\n \n-pub fn rust_printer(writer: @mut io::Writer, intr: @ident_interner) -> ps {\n+pub fn rust_printer(writer: ~io::Writer, intr: @ident_interner) -> ps {\n     return rust_printer_annotated(writer, intr, @no_ann::new() as @pp_ann);\n }\n \n-pub fn rust_printer_annotated(writer: @mut io::Writer,\n+pub fn rust_printer_annotated(writer: ~io::Writer,\n                               intr: @ident_interner,\n                               ann: @pp_ann)\n                               -> ps {\n@@ -122,7 +123,7 @@ pub fn print_crate(cm: @CodeMap,\n                    crate: &ast::Crate,\n                    filename: @str,\n                    input: @mut io::Reader,\n-                   out: @mut io::Writer,\n+                   out: ~io::Writer,\n                    ann: @pp_ann,\n                    is_expanded: bool) {\n     let (cmnts, lits) = comments::gather_comments_and_literals(\n@@ -203,26 +204,40 @@ pub fn path_to_str(p: &ast::Path, intr: @ident_interner) -> ~str {\n pub fn fun_to_str(decl: &ast::fn_decl, purity: ast::purity, name: ast::Ident,\n                   opt_explicit_self: Option<ast::explicit_self_>,\n                   generics: &ast::Generics, intr: @ident_interner) -> ~str {\n-    let wr = @mut MemWriter::new();\n-    let mut s = rust_printer(wr as @mut io::Writer, intr);\n+    let wr = ~MemWriter::new();\n+    let mut s = rust_printer(wr as ~io::Writer, intr);\n     print_fn(&mut s, decl, Some(purity), AbiSet::Rust(),\n              name, generics, opt_explicit_self, ast::inherited);\n     end(&mut s); // Close the head box\n     end(&mut s); // Close the outer box\n     eof(&mut s.s);\n-    str::from_utf8_owned(wr.inner_ref().to_owned())\n+\n+    // XXX(pcwalton): Need checked downcasts.\n+    unsafe {\n+        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n+        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n+        cast::forget(wr);\n+        result\n+    }\n }\n \n pub fn block_to_str(blk: &ast::Block, intr: @ident_interner) -> ~str {\n-    let wr = @mut MemWriter::new();\n-    let mut s = rust_printer(wr as @mut io::Writer, intr);\n+    let wr = ~MemWriter::new();\n+    let mut s = rust_printer(wr as ~io::Writer, intr);\n     // containing cbox, will be closed by print-block at }\n     cbox(&mut s, indent_unit);\n     // head-ibox, will be closed by print-block after {\n     ibox(&mut s, 0u);\n     print_block(&mut s, blk);\n     eof(&mut s.s);\n-    str::from_utf8_owned(wr.inner_ref().to_owned())\n+\n+    // XXX(pcwalton): Need checked downcasts.\n+    unsafe {\n+        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n+        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n+        cast::forget(wr);\n+        result\n+    }\n }\n \n pub fn meta_item_to_str(mi: &ast::MetaItem, intr: @ident_interner) -> ~str {\n@@ -2304,11 +2319,17 @@ pub fn print_string(s: &mut ps, st: &str, style: ast::StrStyle) {\n }\n \n pub fn to_str<T>(t: &T, f: |&mut ps, &T|, intr: @ident_interner) -> ~str {\n-    let wr = @mut MemWriter::new();\n-    let mut s = rust_printer(wr as @mut io::Writer, intr);\n+    let wr = ~MemWriter::new();\n+    let mut s = rust_printer(wr as ~io::Writer, intr);\n     f(&mut s, t);\n     eof(&mut s.s);\n-    str::from_utf8_owned(wr.inner_ref().to_owned())\n+    // XXX(pcwalton): Need checked downcasts.\n+    unsafe {\n+        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n+        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n+        cast::forget(wr);\n+        result\n+    }\n }\n \n pub fn next_comment(s: &mut ps) -> Option<comments::cmnt> {"}]}