{"sha": "72373438d28eecfa565ad16bd84f800b8c8067c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzczNDM4ZDI4ZWVjZmE1NjVhZDE2YmQ4NGY4MDBiOGM4MDY3YzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-22T12:06:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-22T12:06:38Z"}, "message": "Add core::to_str module\n\nProvides a central iface for the various stringification\nfunctions.", "tree": {"sha": "d98c85b150222b17cb0eeac5806b2706a00c3e4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98c85b150222b17cb0eeac5806b2706a00c3e4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72373438d28eecfa565ad16bd84f800b8c8067c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72373438d28eecfa565ad16bd84f800b8c8067c0", "html_url": "https://github.com/rust-lang/rust/commit/72373438d28eecfa565ad16bd84f800b8c8067c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72373438d28eecfa565ad16bd84f800b8c8067c0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad03761a97eb0f651e3ce4f54cbf87dbf4d6f80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad03761a97eb0f651e3ce4f54cbf87dbf4d6f80f", "html_url": "https://github.com/rust-lang/rust/commit/ad03761a97eb0f651e3ce4f54cbf87dbf4d6f80f"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "933513c20195401bcc2ccac7cbbab868baacc9d5", "filename": "src/libcore/core.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72373438d28eecfa565ad16bd84f800b8c8067c0/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/72373438d28eecfa565ad16bd84f800b8c8067c0/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=72373438d28eecfa565ad16bd84f800b8c8067c0", "patch": "@@ -38,6 +38,7 @@ export comm, task, future;\n export extfmt;\n export math, bessel;\n export tuple;\n+export to_str;\n \n // Built-in-type support modules\n \n@@ -74,6 +75,10 @@ mod result;\n mod tuple;\n mod iter;\n \n+// Useful ifaces\n+\n+mod to_str;\n+\n // Runtime and language-primitive support\n \n mod ctypes;"}, {"sha": "e361fc5e514182e4d53cefe9171f4b03ffc59036", "filename": "src/libcore/to_str.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/72373438d28eecfa565ad16bd84f800b8c8067c0/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72373438d28eecfa565ad16bd84f800b8c8067c0/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=72373438d28eecfa565ad16bd84f800b8c8067c0", "patch": "@@ -0,0 +1,91 @@\n+iface to_str { fn to_str() -> str; }\n+\n+impl of to_str for int {\n+    fn to_str() -> str { int::str(self) }\n+}\n+impl of to_str for uint {\n+    fn to_str() -> str { uint::str(self) }\n+}\n+impl of to_str for u8 {\n+    fn to_str() -> str { uint::str(self as uint) }\n+}\n+impl of to_str for float {\n+    fn to_str() -> str { float::to_str(self, 4u) }\n+}\n+impl of to_str for bool {\n+    fn to_str() -> str { bool::to_str(self) }\n+}\n+impl of to_str for () {\n+    fn to_str() -> str { \"()\" }\n+}\n+impl of to_str for str {\n+    fn to_str() -> str { self }\n+}\n+\n+impl <A: to_str copy, B: to_str copy> of to_str for (A, B) {\n+    fn to_str() -> str {\n+        let (a, b) = self;\n+        \"(\" + a.to_str() + \", \" + b.to_str() + \")\"\n+    }\n+}\n+impl <A: to_str copy, B: to_str copy, C: to_str copy> of to_str for (A, B, C){\n+    fn to_str() -> str {\n+        let (a, b, c) = self;\n+        \"(\" + a.to_str() + \", \" + b.to_str() + \", \" + c.to_str() + \")\"\n+    }\n+}\n+\n+impl <A: to_str> of to_str for [A] {\n+    fn to_str() -> str {\n+        let acc = \"[\", first = true;\n+        for elt in self {\n+            if first { first = false; }\n+            else { acc += \", \"; }\n+            acc += elt.to_str();\n+        }\n+        acc += \"]\";\n+        acc\n+    }\n+}\n+\n+impl <A: to_str> of to_str for @A {\n+    fn to_str() -> str { \"@\" + (*self).to_str() }\n+}\n+impl <A: to_str> of to_str for ~A {\n+    fn to_str() -> str { \"~\" + (*self).to_str() }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn test_simple_types() {\n+        assert 1.to_str() == \"1\";\n+        assert (-1).to_str() == \"-1\";\n+        assert 200u.to_str() == \"200\";\n+        assert 2u8.to_str() == \"2\";\n+        assert true.to_str() == \"true\";\n+        assert false.to_str() == \"false\";\n+        assert ().to_str() == \"()\";\n+        assert \"hi\".to_str() == \"hi\";\n+    }\n+\n+    #[test]\n+    fn test_tuple_types() {\n+        assert (1, 2).to_str() == \"(1, 2)\";\n+        assert (\"a\", \"b\", false).to_str() == \"(a, b, false)\";\n+        assert ((), ((), 100)).to_str() == \"((), ((), 100))\";\n+    }\n+\n+    fn test_vectors() {\n+        let x: [int] = [];\n+        assert x.to_str() == \"[]\";\n+        assert [1].to_str() == \"[1]\";\n+        assert [1, 2, 3].to_str() == \"[1, 2, 3]\";\n+        assert [[], [1], [1, 1]].to_str() == \"[[], [1], [1, 1]]\";\n+    }\n+\n+    fn test_pointer_types() {\n+        assert (@1).to_str() == \"@1\";\n+        assert (~(true, false)).to_str() == \"~(true, false)\";\n+    }\n+}"}]}