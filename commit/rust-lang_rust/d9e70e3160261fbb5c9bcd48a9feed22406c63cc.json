{"sha": "d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTcwZTMxNjAyNjFmYmI1YzliY2Q0OGE5ZmVlZDIyNDA2YzYzY2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T12:05:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T12:05:40Z"}, "message": "fix on-type offset", "tree": {"sha": "5ae9cff7196ac9bda48db6c312d361f24740caf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ae9cff7196ac9bda48db6c312d361f24740caf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "html_url": "https://github.com/rust-lang/rust/commit/d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e70e3160261fbb5c9bcd48a9feed22406c63cc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa632761f1db5f18338c9bd568156c0259b9252", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa632761f1db5f18338c9bd568156c0259b9252", "html_url": "https://github.com/rust-lang/rust/commit/4aa632761f1db5f18338c9bd568156c0259b9252"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "5f4b2714960e891131c087ea4f867d83618e3fd5", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d9e70e3160261fbb5c9bcd48a9feed22406c63cc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e70e3160261fbb5c9bcd48a9feed22406c63cc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "patch": "@@ -9,7 +9,7 @@ use languageserver_types::{\n     SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity, SourceChange,\n+    FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity,\n };\n use ra_syntax::{TextUnit, AstNode};\n use rustc_hash::FxHashMap;\n@@ -92,35 +92,30 @@ pub fn handle_on_type_formatting(\n     world: ServerWorld,\n     params: req::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n-    let analysis: Option<Box<Fn(FilePosition) -> Option<SourceChange>>> = match params.ch.as_str() {\n-        \"=\" => Some(Box::new(|pos| world.analysis().on_eq_typed(pos))),\n-        \".\" => Some(Box::new(|pos| world.analysis().on_dot_typed(pos))),\n-        _ => None,\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+    let position = FilePosition {\n+        file_id,\n+        /// in `ra_ide_api`, the `on_type` invariant is that\n+        /// `text.char_at(position) == typed_char`.\n+        offset: params.position.conv_with(&line_index) - TextUnit::of_char('.'),\n     };\n \n-    if let Some(ana) = analysis {\n-        let file_id = params.text_document.try_conv_with(&world)?;\n-        let line_index = world.analysis().file_line_index(file_id);\n-        let position = FilePosition {\n-            file_id,\n-            offset: params.position.conv_with(&line_index),\n-        };\n+    let edit = match params.ch.as_str() {\n+        \"=\" => world.analysis().on_eq_typed(position),\n+        \".\" => world.analysis().on_dot_typed(position),\n+        _ => return Ok(None),\n+    };\n+    let mut edit = match edit {\n+        Some(it) => it,\n+        None => return Ok(None),\n+    };\n \n-        if let Some(mut action) = ana(position) {\n-            let change: Vec<TextEdit> = action\n-                .source_file_edits\n-                .pop()\n-                .unwrap()\n-                .edit\n-                .as_atoms()\n-                .iter()\n-                .map_conv_with(&line_index)\n-                .collect();\n-            return Ok(Some(change));\n-        }\n-    }\n+    // This should be a single-file edit\n+    let edit = edit.source_file_edits.pop().unwrap();\n \n-    return Ok(None);\n+    let change: Vec<TextEdit> = edit.edit.conv_with(&line_index);\n+    return Ok(Some(change));\n }\n \n pub fn handle_document_symbol("}]}