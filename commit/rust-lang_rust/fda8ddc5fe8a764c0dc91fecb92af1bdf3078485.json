{"sha": "fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYThkZGM1ZmU4YTc2NGMwZGM5MWZlY2I5MmFmMWJkZjMwNzg0ODU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-05T17:38:34Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-05T17:38:34Z"}, "message": "Introduce Location and make SyntaxError fields private", "tree": {"sha": "1de03cfa42f40bb5ca19956534f53d0b92d271d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de03cfa42f40bb5ca19956534f53d0b92d271d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "html_url": "https://github.com/rust-lang/rust/commit/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b42ddae601fbd73f672e82028e04c3abdf1252d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b42ddae601fbd73f672e82028e04c3abdf1252d", "html_url": "https://github.com/rust-lang/rust/commit/3b42ddae601fbd73f672e82028e04c3abdf1252d"}], "stats": {"total": 134, "additions": 82, "deletions": 52}, "files": [{"sha": "f92181b867cca5be593a0ebb6c7fad23247e6904", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -31,6 +31,7 @@ use ra_syntax::{\n     algo::find_leaf_at_offset,\n     ast::{self, AstNode, NameOwner},\n     File,\n+    Location,\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -100,11 +101,18 @@ pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n }\n \n pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n+    fn location_to_range(location: Location) -> TextRange {\n+        match location {\n+            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n+            Location::Range(range) => range,\n+        }\n+    }\n+\n     file.errors()\n         .into_iter()\n         .map(|err| Diagnostic {\n-            range: err.range,\n-            msg: format!(\"Syntax Error: {}\", err.kind),\n+            range: location_to_range(err.location()),\n+            msg: format!(\"Syntax Error: {}\", err),\n         })\n         .collect()\n }"}, {"sha": "69a679d04aa153e5b5e2a225c614dad4e3c55351", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -54,7 +54,7 @@ pub use crate::{\n     rowan::{SmolStr, TextRange, TextUnit},\n     syntax_kinds::SyntaxKind,\n     yellow::{\n-        Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent,\n+        Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent, Location,\n     },\n };\n "}, {"sha": "1445401bcf7065dd15402be05185653f1a943206", "filename": "crates/ra_syntax/src/parser_impl/event.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -15,6 +15,7 @@ use crate::{\n     TextRange, TextUnit,\n     yellow::syntax_error::{\n         ParseError,\n+        SyntaxError,\n         SyntaxErrorKind,\n     },\n };\n@@ -162,8 +163,7 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n                     self.leaf(kind, len, n_raw_tokens);\n                 }\n                 Event::Error { msg } => self.sink.error(\n-                    SyntaxErrorKind::ParseError(msg),\n-                    TextRange::offset_len(self.text_pos, 1.into()),\n+                    SyntaxError::new(SyntaxErrorKind::ParseError(msg), self.text_pos),\n                 ),\n             }\n         }"}, {"sha": "cb6e370ac51d6f260f7968c19903d5fbc683117b", "filename": "crates/ra_syntax/src/parser_impl/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -10,10 +10,10 @@ use crate::{\n         event::{Event, EventProcessor},\n         input::{InputPosition, ParserInput},\n     },\n-    SmolStr, TextRange,\n+    SmolStr,\n     yellow::syntax_error::{\n         ParseError,\n-        SyntaxErrorKind,\n+        SyntaxError,\n     },\n };\n \n@@ -25,7 +25,7 @@ pub(crate) trait Sink {\n     fn leaf(&mut self, kind: SyntaxKind, text: SmolStr);\n     fn start_internal(&mut self, kind: SyntaxKind);\n     fn finish_internal(&mut self);\n-    fn error(&mut self, kind: SyntaxErrorKind, offset: TextRange);\n+    fn error(&mut self, error: SyntaxError);\n     fn finish(self) -> Self::Tree;\n }\n "}, {"sha": "3c4ea5c22b7600618e803826305c2314ebfead16", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -165,20 +165,14 @@ fn merge_errors(\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n     for e in old_errors {\n-        if e.range.start() <= old_node.range().start() {\n+        if e.offset() <= old_node.range().start() {\n             res.push(e)\n-        } else if e.range.start() >= old_node.range().end() {\n-            res.push(SyntaxError {\n-                kind: e.kind,\n-                range: e.range + TextUnit::of_str(&edit.insert) - edit.delete.len(),\n-            })\n+        } else if e.offset() >= old_node.range().end() {\n+            res.push(e.add_offset(TextUnit::of_str(&edit.insert) - edit.delete.len()));\n         }\n     }\n     for e in new_errors {\n-        res.push(SyntaxError {\n-            kind: e.kind,\n-            range: e.range + old_node.range().start(),\n-        })\n+        res.push(e.add_offset(old_node.range().start()));\n     }\n     res\n }"}, {"sha": "288d7edd4e8eb684219f1f55317177e9680cb6af", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Write;\n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n     let mut errors: Vec<_> = syntax.root_data().to_vec();\n-    errors.sort_by_key(|e| e.range.start());\n+    errors.sort_by_key(|e| e.offset());\n     let mut err_pos = 0;\n     let mut level = 0;\n     let mut buf = String::new();\n@@ -23,9 +23,9 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n                 writeln!(buf, \"{:?}\", node).unwrap();\n                 if node.first_child().is_none() {\n                     let off = node.range().end();\n-                    while err_pos < errors.len() && errors[err_pos].range.start() <= off {\n+                    while err_pos < errors.len() && errors[err_pos].offset() <= off {\n                         indent!();\n-                        writeln!(buf, \"err: `{}`\", errors[err_pos].kind).unwrap();\n+                        writeln!(buf, \"err: `{}`\", errors[err_pos]).unwrap();\n                         err_pos += 1;\n                     }\n                 }\n@@ -37,7 +37,7 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n \n     assert_eq!(level, 0);\n     for err in errors[err_pos..].iter() {\n-        writeln!(buf, \"err: `{}`\", err.kind).unwrap();\n+        writeln!(buf, \"err: `{}`\", err).unwrap();\n     }\n \n     buf"}, {"sha": "009f5052f92c72675501eadbefce5679d025bc92", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -33,17 +33,11 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n             AsciiEscape => {\n                 if text.len() == 1 {\n                     // Escape sequence consists only of leading `\\`\n-                    errors.push(SyntaxError {\n-                        kind: EmptyAsciiEscape,\n-                        range: range,\n-                    });\n+                    errors.push(SyntaxError::new(EmptyAsciiEscape, range));\n                 } else {\n                     let escape_code = text.chars().skip(1).next().unwrap();\n                     if !is_ascii_escape(escape_code) {\n-                        errors.push(SyntaxError {\n-                            kind: InvalidAsciiEscape,\n-                            range: range,\n-                        });\n+                        errors.push(SyntaxError::new(InvalidAsciiEscape, range));\n                     }\n                 }\n             }\n@@ -64,24 +58,15 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n     }\n \n     if !components.has_closing_quote {\n-        errors.push(SyntaxError {\n-            kind: UnclosedChar,\n-            range: node.syntax().range(),\n-        });\n+        errors.push(SyntaxError::new(UnclosedChar, node.syntax().range()));\n     }\n \n     if len == 0 {\n-        errors.push(SyntaxError {\n-            kind: EmptyChar,\n-            range: node.syntax().range(),\n-        });\n+        errors.push(SyntaxError::new(EmptyChar, node.syntax().range()));\n     }\n \n     if len > 1 {\n-        errors.push(SyntaxError {\n-            kind: LongChar,\n-            range: node.syntax().range(),\n-        });\n+        errors.push(SyntaxError::new(LongChar, node.syntax().range()));\n     }\n }\n "}, {"sha": "9fcebfb93b9da4bb6bc2e83fd881a5a71081c7b6", "filename": "crates/ra_syntax/src/yellow/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -1,7 +1,7 @@\n use crate::{\n     parser_impl::Sink,\n-    yellow::{GreenNode, RaTypes, SyntaxError, SyntaxErrorKind},\n-    SmolStr, SyntaxKind, TextRange,\n+    yellow::{GreenNode, RaTypes, SyntaxError},\n+    SmolStr, SyntaxKind,\n };\n use rowan::GreenNodeBuilder;\n \n@@ -34,8 +34,7 @@ impl Sink for GreenBuilder {\n         self.inner.finish_internal();\n     }\n \n-    fn error(&mut self, kind: SyntaxErrorKind, range: TextRange) {\n-        let error = SyntaxError { kind, range };\n+    fn error(&mut self, error: SyntaxError) {\n         self.errors.push(error)\n     }\n "}, {"sha": "6da9486489d2e5bdd1762c24e0353774a04c9671", "filename": "crates/ra_syntax/src/yellow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -11,7 +11,7 @@ use std::{\n };\n \n pub(crate) use self::builder::GreenBuilder;\n-pub use self::syntax_error::{SyntaxError, SyntaxErrorKind};\n+pub use self::syntax_error::{SyntaxError, SyntaxErrorKind, Location};\n pub use rowan::{TreeRoot, WalkEvent};\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "098366f857afd80511ed5f44f64f5c6a99197bbe", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda8ddc5fe8a764c0dc91fecb92af1bdf3078485/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=fda8ddc5fe8a764c0dc91fecb92af1bdf3078485", "patch": "@@ -1,16 +1,60 @@\n use std::fmt;\n \n-use crate::TextRange;\n+use crate::{TextRange, TextUnit};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxError {\n-    pub kind: SyntaxErrorKind,\n-    pub range: TextRange,\n+    kind: SyntaxErrorKind,\n+    location: Location,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum Location {\n+    Offset(TextUnit),\n+    Range(TextRange),\n+}\n+\n+impl Into<Location> for TextUnit {\n+    fn into(self) -> Location {\n+        Location::Offset(self)\n+    }\n+}\n+\n+impl Into<Location> for TextRange {\n+    fn into(self) -> Location {\n+        Location::Range(self)\n+    }\n }\n \n impl SyntaxError {\n-    pub fn new(kind: SyntaxErrorKind, range: TextRange) -> SyntaxError {\n-        SyntaxError { kind, range }\n+    pub fn new<L: Into<Location>>(kind: SyntaxErrorKind, loc: L) -> SyntaxError {\n+        SyntaxError { kind, location: loc.into() }\n+    }\n+\n+    pub fn location(&self) -> Location {\n+        self.location.clone()\n+    }\n+\n+    pub fn offset(&self) -> TextUnit {\n+        match self.location {\n+            Location::Offset(offset) => offset,\n+            Location::Range(range) => range.start(),\n+        }\n+    }\n+\n+    pub fn add_offset(mut self, plus_offset: TextUnit) -> SyntaxError {\n+        self.location = match self.location {\n+            Location::Range(range) => Location::Range(range + plus_offset),\n+            Location::Offset(offset) => Location::Offset(offset + plus_offset)\n+        };\n+\n+        self\n+    }\n+}\n+\n+impl fmt::Display for SyntaxError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.kind.fmt(f)\n     }\n }\n "}]}