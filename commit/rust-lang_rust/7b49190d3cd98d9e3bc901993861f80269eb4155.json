{"sha": "7b49190d3cd98d9e3bc901993861f80269eb4155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNDkxOTBkM2NkOThkOWUzYmM5MDE5OTM4NjFmODAyNjllYjQxNTU=", "commit": {"author": {"name": "Philipp Oppermann", "email": "dev@phil-opp.com", "date": "2018-03-24T19:14:59Z"}, "committer": {"name": "Philipp Oppermann", "email": "dev@phil-opp.com", "date": "2018-03-26T16:57:24Z"}, "message": "Canonicalize paths", "tree": {"sha": "62bef8f8ded88300d65c2f72221ba6e767c546a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bef8f8ded88300d65c2f72221ba6e767c546a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b49190d3cd98d9e3bc901993861f80269eb4155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b49190d3cd98d9e3bc901993861f80269eb4155", "html_url": "https://github.com/rust-lang/rust/commit/7b49190d3cd98d9e3bc901993861f80269eb4155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b49190d3cd98d9e3bc901993861f80269eb4155/comments", "author": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3908b2e4438e89a4f9503a8fa3e378ecc127df45", "url": "https://api.github.com/repos/rust-lang/rust/commits/3908b2e4438e89a4f9503a8fa3e378ecc127df45", "html_url": "https://github.com/rust-lang/rust/commit/3908b2e4438e89a4f9503a8fa3e378ecc127df45"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "92da47b9d436cb34941a17c296ac7c96280d89d1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b49190d3cd98d9e3bc901993861f80269eb4155/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b49190d3cd98d9e3bc901993861f80269eb4155/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7b49190d3cd98d9e3bc901993861f80269eb4155", "patch": "@@ -47,7 +47,7 @@ use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n use std::collections::HashSet;\n use std::iter::FromIterator;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n pub struct Config {\n     pub target: Target,\n@@ -1905,7 +1905,13 @@ pub fn build_session_options_and_crate_config(\n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n     let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n         if target.ends_with(\".json\") {\n-            TargetTriple::TargetPath(PathBuf::from(target))\n+            let path = Path::new(&target);\n+            match TargetTriple::from_path(&path) {\n+                Ok(triple) => triple,\n+                Err(_) => {\n+                    early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n+                }\n+            }\n         } else {\n             TargetTriple::TargetTriple(target)\n         }"}, {"sha": "3216aae89184ba3935b81f360f2b4bfcf976f3cc", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b49190d3cd98d9e3bc901993861f80269eb4155/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b49190d3cd98d9e3bc901993861f80269eb4155/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7b49190d3cd98d9e3bc901993861f80269eb4155", "patch": "@@ -47,7 +47,7 @@\n use serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n-use std::fmt;\n+use std::{fmt, io};\n use std::path::{Path, PathBuf};\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n@@ -1029,11 +1029,17 @@ pub enum TargetTriple {\n }\n \n impl TargetTriple {\n-    /// Creates a target target from the passed target triple string.\n+    /// Creates a target triple from the passed target triple string.\n     pub fn from_triple(triple: &str) -> Self {\n         TargetTriple::TargetTriple(triple.to_string())\n     }\n \n+    /// Creates a target triple from the passed target path.\n+    pub fn from_path(path: &Path) -> Result<Self, io::Error> {\n+        let canonicalized_path = path.canonicalize()?;\n+        Ok(TargetTriple::TargetPath(canonicalized_path))\n+    }\n+\n     /// Returns a string triple for this target.\n     ///\n     /// If this target is a path, the file name (without extension) is returned."}]}