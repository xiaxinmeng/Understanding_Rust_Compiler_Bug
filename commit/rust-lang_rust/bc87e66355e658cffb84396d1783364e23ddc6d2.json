{"sha": "bc87e66355e658cffb84396d1783364e23ddc6d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODdlNjYzNTVlNjU4Y2ZmYjg0Mzk2ZDE3ODMzNjRlMjNkZGM2ZDI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-17T17:54:24Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-17T17:57:36Z"}, "message": "Add option::while_some; also add more pure (close #2927)", "tree": {"sha": "ccc465bac6152c6dd04d666d60d0fea100a88021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccc465bac6152c6dd04d666d60d0fea100a88021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc87e66355e658cffb84396d1783364e23ddc6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc87e66355e658cffb84396d1783364e23ddc6d2", "html_url": "https://github.com/rust-lang/rust/commit/bc87e66355e658cffb84396d1783364e23ddc6d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc87e66355e658cffb84396d1783364e23ddc6d2/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e79a3a8a52e339040a8533ba272a5891a62ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e79a3a8a52e339040a8533ba272a5891a62ce5", "html_url": "https://github.com/rust-lang/rust/commit/85e79a3a8a52e339040a8533ba272a5891a62ce5"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "dabfa04ef245e7090551dac2a817983d6a38b9ea", "filename": "src/libcore/option.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bc87e66355e658cffb84396d1783364e23ddc6d2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc87e66355e658cffb84396d1783364e23ddc6d2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=bc87e66355e658cffb84396d1783364e23ddc6d2", "patch": "@@ -52,6 +52,16 @@ pure fn chain<T, U>(opt: option<T>, f: fn(T) -> option<U>) -> option<U> {\n     alt opt { some(x) { f(x) } none { none } }\n }\n \n+#[inline(always)]\n+pure fn while_some<T>(+x: option<T>, blk: fn(+T) -> option<T>) {\n+    //! Applies a function zero or more times until the result is none.\n+\n+    let mut opt <- x;\n+    while opt.is_some() {\n+        opt = blk(unwrap(opt));\n+    }\n+}\n+\n pure fn is_none<T>(opt: option<T>) -> bool {\n     //! Returns true if the option equals `none`\n \n@@ -106,18 +116,18 @@ impl extensions<T> for option<T> {\n      * Update an optional value by optionally running its content through a\n      * function that returns an option.\n      */\n-    fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n+    pure fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n     /// Applies a function to the contained value or returns a default\n-    fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n+    pure fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n         { map_default(self, def, f) }\n     /// Performs an operation on the contained value or does nothing\n-    fn iter(f: fn(T)) { iter(self, f) }\n+    pure fn iter(f: fn(T)) { iter(self, f) }\n     /// Returns true if the option equals `none`\n-    fn is_none() -> bool { is_none(self) }\n+    pure fn is_none() -> bool { is_none(self) }\n     /// Returns true if the option contains some value\n-    fn is_some() -> bool { is_some(self) }\n+    pure fn is_some() -> bool { is_some(self) }\n     /// Maps a `some` value from one type to another\n-    fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+    pure fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n }\n \n impl extensions<T: copy> for option<T> {\n@@ -128,8 +138,8 @@ impl extensions<T: copy> for option<T> {\n      *\n      * Fails if the value equals `none`\n      */\n-    fn get() -> T { get(self) }\n-    fn get_default(def: T) -> T { get_default(self, def) }\n+    pure fn get() -> T { get(self) }\n+    pure fn get_default(def: T) -> T { get_default(self, def) }\n     /**\n      * Gets the value out of an option, printing a specified message on\n      * failure\n@@ -139,6 +149,8 @@ impl extensions<T: copy> for option<T> {\n      * Fails if the value equals `none`\n      */\n     pure fn expect(reason: ~str) -> T { expect(self, reason) }\n+    /// Applies a function zero or more times until the result is none.\n+    pure fn while_some(blk: fn(+T) -> option<T>) { while_some(self, blk) }\n }\n \n #[test]\n@@ -177,6 +189,20 @@ fn test_unwrap_resource() {\n     assert *i == 1;\n }\n \n+#[test]\n+fn test_option_while_some() {\n+    let mut i = 0;\n+    do some(10).while_some |j| {\n+        i += 1;\n+        if (j > 0) {\n+            some(j-1)\n+        } else {\n+            none\n+        }\n+    }\n+    assert i == 11;\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}