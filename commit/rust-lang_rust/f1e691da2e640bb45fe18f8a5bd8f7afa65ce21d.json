{"sha": "f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZTY5MWRhMmU2NDBiYjQ1ZmUxOGY4YTViZDhmN2FmYTY1Y2UyMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-23T21:35:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-23T21:35:46Z"}, "message": "Auto merge of #86138 - FabianWolff:issue-85871, r=nikomatsakis\n\nCheck whether the closure's owner is an ADT in thir-unsafeck\n\nThis pull request fixes #85871. The code in `rustc_mir_build/src/check_unsafety.rs` incorrectly assumes that a closure's owner always has a body, but only functions, closures, and constants have bodies, whereas a closure can also appear inside a struct or enum:\n```rust\nstruct S {\n    arr: [(); match || 1 { _ => 42 }]\n}\n\nenum E {\n    A([(); { || 1; 42 }])\n}\n```\nThis pull request fixes the resulting ICE by checking whether the closure's owner is an ADT and only deferring to `thir_check_unsafety(owner)` if it isn't.", "tree": {"sha": "4bc0031e6e3e98f5fb85a57793857a294d5fe2f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc0031e6e3e98f5fb85a57793857a294d5fe2f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "html_url": "https://github.com/rust-lang/rust/commit/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7834050f3a0ebcd117b4ddf0bc1e8459594309", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7834050f3a0ebcd117b4ddf0bc1e8459594309", "html_url": "https://github.com/rust-lang/rust/commit/5a7834050f3a0ebcd117b4ddf0bc1e8459594309"}, {"sha": "433c1aec2195eb8864e46bf24f50f74123bbb284", "url": "https://api.github.com/repos/rust-lang/rust/commits/433c1aec2195eb8864e46bf24f50f74123bbb284", "html_url": "https://github.com/rust-lang/rust/commit/433c1aec2195eb8864e46bf24f50f74123bbb284"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "9bef8ac2413d6aa3027c8b6eaab4ef1566ffb0c0", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "patch": "@@ -375,10 +375,15 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    // Closures are handled by their parent function\n+    // Closures are handled by their owner, if it has a body\n     if tcx.is_closure(def.did.to_def_id()) {\n-        tcx.ensure().thir_check_unsafety(tcx.hir().local_def_id_to_hir_id(def.did).owner);\n-        return;\n+        let owner = tcx.hir().local_def_id_to_hir_id(def.did).owner;\n+        let owner_hir_id = tcx.hir().local_def_id_to_hir_id(owner);\n+\n+        if tcx.hir().maybe_body_owned_by(owner_hir_id).is_some() {\n+            tcx.ensure().thir_check_unsafety(owner);\n+            return;\n+        }\n     }\n \n     let (thir, expr) = tcx.thir_body(def);"}, {"sha": "aea539b74dffcb514336f3d28f3e0bae2debd335", "filename": "src/test/ui/thir-unsafeck-issue-85871.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d/src%2Ftest%2Fui%2Fthir-unsafeck-issue-85871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d/src%2Ftest%2Fui%2Fthir-unsafeck-issue-85871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-unsafeck-issue-85871.rs?ref=f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d", "patch": "@@ -0,0 +1,20 @@\n+// Tests that no ICE occurs when a closure appears inside a node\n+// that does not have a body when compiling with\n+// compile-flags: -Zthir-unsafeck=yes\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+struct Bug {\n+    inner: [(); match || 1 {\n+        _n => 42, // we may not call the closure here (E0015)\n+    }],\n+}\n+\n+enum E {\n+    V([(); { let _ = || 1; 42 }]),\n+}\n+\n+type Ty = [(); { let _ = || 1; 42 }];\n+\n+fn main() {}"}]}