{"sha": "3667e6248ec18740ce57db7997333a30c991929b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NjdlNjI0OGVjMTg3NDBjZTU3ZGI3OTk3MzMzYTMwYzk5MTkyOWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-11T11:06:36Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T12:58:36Z"}, "message": "move PResult to librustc_errors", "tree": {"sha": "ec013e9752c766bc2ed4bf4c28b343fe8bf5466c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec013e9752c766bc2ed4bf4c28b343fe8bf5466c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3667e6248ec18740ce57db7997333a30c991929b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3667e6248ec18740ce57db7997333a30c991929b", "html_url": "https://github.com/rust-lang/rust/commit/3667e6248ec18740ce57db7997333a30c991929b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3667e6248ec18740ce57db7997333a30c991929b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6768a478b8a6afa1e16dfebe9d79bd3f508cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6768a478b8a6afa1e16dfebe9d79bd3f508cdf", "html_url": "https://github.com/rust-lang/rust/commit/9d6768a478b8a6afa1e16dfebe9d79bd3f508cdf"}], "stats": {"total": 96, "additions": 52, "deletions": 44}, "files": [{"sha": "611b891d99abf5b0ceb941e917b60ca8db34505d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -42,6 +42,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use errors::PResult;\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n@@ -64,7 +65,7 @@ use std::time::Instant;\n use syntax::ast;\n use syntax::source_map::FileLoader;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::parse::{self, PResult};\n+use syntax::parse;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, FileName};\n "}, {"sha": "fb5cccf61a7a9877719138bdacedd12d061e834c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -15,7 +15,8 @@ use Level::*;\n \n use emitter::{Emitter, EmitterWriter, is_case_difference};\n use registry::Registry;\n-\n+#[cfg(target_arch = \"x86_64\")]\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -48,6 +49,13 @@ use syntax_pos::{\n     SpanSnippetError,\n };\n \n+pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n+\n+// `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n+// (See also the comment on `DiagnosticBuilderInner`.)\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PResult<'_, bool>, 16);\n+\n /// Indicates the confidence in the correctness of a suggestion.\n ///\n /// All suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion"}, {"sha": "ce34caee6fab3f385078dff5bd55cf75ee800ea4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -22,6 +22,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::filename_for_metadata;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n+use rustc_errors::PResult;\n use rustc_incremental;\n use rustc_metadata::cstore;\n use rustc_mir as mir;\n@@ -36,7 +37,7 @@ use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax_expand::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n-use syntax::parse::{self, PResult};\n+use syntax::parse;\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n use syntax_pos::FileName;"}, {"sha": "d609225a54fac024c9b6e1f9614a5c8ab14b2e1b", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -16,7 +16,6 @@ use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n use crate::parse::lexer::comments::doc_comment_style;\n use crate::parse;\n-use crate::parse::PResult;\n use crate::token::{self, Token};\n use crate::ptr::P;\n use crate::sess::ParseSess;\n@@ -25,6 +24,8 @@ use crate::ThinVec;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n+use errors::PResult;\n+\n use log::debug;\n use syntax_pos::Span;\n "}, {"sha": "2b056434d4dcbface7bd2bc0e3cd7aebc7a71c0c", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -4,10 +4,11 @@ use syntax_pos::Span;\n use super::{StringReader, UnmatchedBrace};\n \n use crate::print::pprust::token_to_string;\n-use crate::parse::PResult;\n use crate::token::{self, Token};\n use crate::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n \n+use errors::PResult;\n+\n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n         let mut tt_reader = TokenTreesReader {"}, {"sha": "badf8bcba576e2b36744b7af6e2a9e003234ed11", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -7,9 +7,7 @@ use crate::tokenstream::{self, TokenStream, TokenTree};\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n-use errors::{FatalError, Level, Diagnostic, DiagnosticBuilder};\n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n+use errors::{PResult, FatalError, Level, Diagnostic};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, SourceFile, FileName};\n \n@@ -29,13 +27,6 @@ pub mod lexer;\n crate mod classify;\n crate mod literal;\n \n-pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n-\n-// `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilderInner`.)\n-#[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PResult<'_, bool>, 16);\n-\n #[derive(Clone)]\n pub struct Directory<'a> {\n     pub path: Cow<'a, Path>,"}, {"sha": "2f1b87da7e966725d52e12d04f4d2ba4f5cca260", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,10 +1,12 @@\n-use super::{SeqSep, PResult, Parser, TokenType, PathStyle};\n+use super::{SeqSep, Parser, TokenType, PathStyle};\n use crate::attr;\n use crate::ast;\n use crate::token::{self, Nonterminal, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::source_map::Span;\n \n+use errors::PResult;\n+\n use log::debug;\n \n #[derive(Debug)]"}, {"sha": "26d7f48025eda11b319146f817a5e0f86116d70e", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,7 +1,4 @@\n-use super::{\n-    BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType,\n-    SeqSep, PResult, Parser\n-};\n+use super::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType, SeqSep, Parser};\n use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n@@ -12,7 +9,8 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n+\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};"}, {"sha": "9faa4aefbb6ef99ea7bbbdaaa6ed2ea88e459b56", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle, BlockMode};\n+use super::{Parser, Restrictions, PrevTokenKind, TokenType, PathStyle, BlockMode};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use super::pat::{GateOr, PARAM_EXPECTED};\n use super::diagnostics::Error;\n@@ -18,7 +18,7 @@ use crate::ptr::P;\n use crate::source_map::{self, Span};\n use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n \n-use errors::Applicability;\n+use errors::{PResult, Applicability};\n use syntax_pos::symbol::{kw, sym};\n use syntax_pos::Symbol;\n use std::mem;"}, {"sha": "ae9ecd8fe392281a6b97179916734fdf6e11873e", "filename": "src/libsyntax/parse/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,11 +1,13 @@\n-use super::{Parser, PResult};\n+use super::Parser;\n \n use crate::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n use crate::token;\n use crate::source_map::DUMMY_SP;\n \n use syntax_pos::symbol::{kw, sym};\n \n+use errors::PResult;\n+\n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     ///"}, {"sha": "3c618d75d348fdcf67bd06f21b65cb7d543fc7c0", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, PathStyle};\n+use super::{Parser, PathStyle};\n use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n@@ -17,7 +17,7 @@ use crate::ThinVec;\n \n use log::debug;\n use std::mem;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n use syntax_pos::BytePos;\n \n /// Whether the type alias or associated type is a concrete type or an opaque type."}, {"sha": "f7f7b0e83d4f4212aec9806eaa0a743f1773d7a1", "filename": "src/libsyntax/parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -15,7 +15,7 @@ use crate::ast::{\n     self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n-use crate::parse::{PResult, Directory, DirectoryOwnership};\n+use crate::parse::{Directory, DirectoryOwnership};\n use crate::parse::lexer::UnmatchedBrace;\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::token::{self, Token, TokenKind, DelimToken};\n@@ -27,7 +27,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n "}, {"sha": "72049daaed30965fb0b72526f51afa7c4b7c7806", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult};\n+use super::Parser;\n use super::item::ItemInfo;\n use super::diagnostics::Error;\n \n@@ -9,6 +9,8 @@ use crate::token::{self, TokenKind};\n use crate::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n use crate::symbol::sym;\n \n+use errors::PResult;\n+\n use std::path::{self, Path, PathBuf};\n \n /// Information about the path to a module."}, {"sha": "f347300da716f34a7f3d6508fec5107a275bb6df", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, PathStyle};\n+use super::{Parser, PathStyle};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n@@ -10,7 +10,7 @@ use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n use crate::ThinVec;\n use syntax_pos::symbol::{kw, sym};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{PResult, Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "9ceb3ba1eb4919a0577a3a6a3a94ad7b3fe46589", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, TokenType};\n+use super::{Parser, TokenType};\n \n use crate::{maybe_whole, ThinVec};\n use crate::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n@@ -9,7 +9,7 @@ use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability, pluralize};\n+use errors::{PResult, Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "2a3d6b05bb9885ed720a9f6273786da23e886a3d", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n+use super::{Parser, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n use super::expr::LhsExpr;\n use super::path::PathStyle;\n use super::pat::GateOr;\n@@ -14,7 +14,7 @@ use crate::source_map::{respan, Span};\n use crate::symbol::{kw, sym};\n \n use std::mem;\n-use errors::Applicability;\n+use errors::{PResult, Applicability};\n \n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items."}, {"sha": "a891634e611da93659453eaa64c482e911696e4b", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, PathStyle, PrevTokenKind, TokenType};\n+use super::{Parser, PathStyle, PrevTokenKind, TokenType};\n use super::item::ParamCfg;\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n@@ -10,7 +10,7 @@ use crate::token::{self, Token};\n use crate::source_map::Span;\n use crate::symbol::{kw};\n \n-use errors::{Applicability, pluralize};\n+use errors::{PResult, Applicability, pluralize};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`."}, {"sha": "ed457c3627f42e59af8248a96549b7f08cde4fcd", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -1,5 +1,5 @@\n use crate::ast;\n-use crate::parse::{PResult, source_file_to_stream};\n+use crate::parse::source_file_to_stream;\n use crate::parse::new_parser_from_source_str;\n use crate::parse::parser::Parser;\n use crate::sess::ParseSess;\n@@ -8,7 +8,7 @@ use crate::tokenstream::TokenStream;\n use crate::with_default_globals;\n \n use errors::emitter::EmitterWriter;\n-use errors::Handler;\n+use errors::{PResult, Handler};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, Span, MultiSpan};\n "}, {"sha": "e91dd2aba1537f3e354a463f1ee000c126eea0dc", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -12,7 +12,7 @@ use syntax::configure;\n use syntax::config::StripUnconfigured;\n use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use syntax::mut_visit::*;\n-use syntax::parse::{DirectoryOwnership, PResult};\n+use syntax::parse::DirectoryOwnership;\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -23,7 +23,7 @@ use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::{self, Visitor};\n use syntax::util::map_in_place::MapInPlace;\n \n-use errors::{Applicability, FatalError};\n+use errors::{PResult, Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n "}, {"sha": "80bf27e1a941e6f3e038e4b689ff87671383dcec", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -77,15 +77,15 @@ use TokenTreeOrTokenTreeSlice::*;\n use crate::mbe::{self, TokenTree};\n \n use syntax::ast::{Ident, Name};\n-use syntax::parse::{Directory, PResult};\n+use syntax::parse::Directory;\n use syntax::parse::parser::{Parser, PathStyle};\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n \n-use errors::FatalError;\n+use errors::{PResult, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::Span;\n "}, {"sha": "ac864e767848fdc88465de4dc471d4ad8000fa33", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3667e6248ec18740ce57db7997333a30c991929b/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3667e6248ec18740ce57db7997333a30c991929b/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=3667e6248ec18740ce57db7997333a30c991929b", "patch": "@@ -6,14 +6,15 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate rustc_errors;\n \n+use rustc_errors::PResult;\n use syntax::ast::*;\n use syntax::attr::*;\n use syntax::ast;\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, FileName};\n use syntax::parse;\n-use syntax::parse::PResult;\n use syntax::parse::new_parser_from_source_str;\n use syntax::parse::parser::Parser;\n use syntax::token;"}]}