{"sha": "7a187c39c79e21cd61d1688d449bdd52d7510281", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTg3YzM5Yzc5ZTIxY2Q2MWQxNjg4ZDQ0OWJkZDUyZDc1MTAyODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-31T16:38:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-31T16:38:36Z"}, "message": "Auto merge of #36166 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 16 pull requests\n\n- Successful merges: #35758, #35926, #36050, #36079, #36085, #36089, #36101, #36130, #36134, #36135, #36136, #36140, #36141, #36147, #36148, #36165\n- Failed merges:", "tree": {"sha": "aedca39b638efcfef2c175d3d0e86234a9d9d61c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedca39b638efcfef2c175d3d0e86234a9d9d61c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a187c39c79e21cd61d1688d449bdd52d7510281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a187c39c79e21cd61d1688d449bdd52d7510281", "html_url": "https://github.com/rust-lang/rust/commit/7a187c39c79e21cd61d1688d449bdd52d7510281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a187c39c79e21cd61d1688d449bdd52d7510281/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824000aee3b9fd594a3da3eb38462fa341f0fa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81", "html_url": "https://github.com/rust-lang/rust/commit/824000aee3b9fd594a3da3eb38462fa341f0fa81"}, {"sha": "0cb507394e15e131b681ab975eda51a69501982c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb507394e15e131b681ab975eda51a69501982c", "html_url": "https://github.com/rust-lang/rust/commit/0cb507394e15e131b681ab975eda51a69501982c"}], "stats": {"total": 632, "additions": 547, "deletions": 85}, "files": [{"sha": "670978a2d49aff8f57dd0e9b25c6eb374c7c3aa5", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -383,7 +383,7 @@ impl PartialOrd for Ordering {\n /// }\n /// ```\n ///\n-/// You may also find it useful to use `partial_cmp()` on your type`s fields. Here\n+/// You may also find it useful to use `partial_cmp()` on your type's fields. Here\n /// is an example of `Person` types who have a floating-point `height` field that\n /// is the only field to be used for sorting:\n ///"}, {"sha": "66d05d81d80cd7e92157bfd865eb5d353713791f", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -263,14 +263,12 @@ impl<A: Step> ops::RangeFrom<A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(step_by)]\n-    ///\n-    /// for i in (0u8..).step_by(2).take(10) {\n-    ///     println!(\"{}\", i);\n+    /// #![feature(step_by)]\n+    /// fn main() {\n+    ///     let result: Vec<_> = (0..).step_by(2).take(5).collect();\n+    ///     assert_eq!(result, vec![0, 2, 4, 6, 8]);\n     /// }\n     /// ```\n-    ///\n-    /// This prints the first ten even natural integers (0 to 18).\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n@@ -291,8 +289,10 @@ impl<A: Step> ops::Range<A> {\n     ///\n     /// ```\n     /// #![feature(step_by)]\n-    /// let result: Vec<_> = (0..10).step_by(2).collect();\n-    /// assert_eq!(result, vec![0, 2, 4, 6, 8]);\n+    /// fn main() {\n+    ///     let result: Vec<_> = (0..10).step_by(2).collect();\n+    ///     assert_eq!(result, vec![0, 2, 4, 6, 8]);\n+    /// }\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n@@ -315,20 +315,8 @@ impl<A: Step> ops::RangeInclusive<A> {\n     /// ```\n     /// #![feature(step_by, inclusive_range_syntax)]\n     ///\n-    /// for i in (0...10).step_by(2) {\n-    ///     println!(\"{}\", i);\n-    /// }\n-    /// ```\n-    ///\n-    /// This prints:\n-    ///\n-    /// ```text\n-    /// 0\n-    /// 2\n-    /// 4\n-    /// 6\n-    /// 8\n-    /// 10\n+    /// let result: Vec<_> = (0...10).step_by(2).collect();\n+    /// assert_eq!(result, vec![0, 2, 4, 6, 8, 10]);\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]"}, {"sha": "041a6c62f2fc3654989d58badf9f2e2455d3400e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -948,25 +948,55 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitOr`. When `Foo | Foo` happens, it ends up\n-/// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n+/// In this example, the `|` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitOr;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitOr for Foo {\n-///     type Output = Foo;\n+/// impl BitOr for Scalar {\n+///     type Output = Self;\n ///\n-///     fn bitor(self, _rhs: Foo) -> Foo {\n-///         println!(\"Bitwise Or-ing!\");\n-///         self\n+///     // rhs is the \"right-hand side\" of the expression `a | b`\n+///     fn bitor(self, rhs: Self) -> Self {\n+///         Scalar(self.0 | rhs.0)\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Scalar(true) | Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(true) | Scalar(false), Scalar(true));\n+///     assert_eq!(Scalar(false) | Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(false) | Scalar(false), Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitOr` trait is implemented for a `BooleanVector`\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::BitOr;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitOr for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitor(self, BooleanVector(rhs): Self) -> Self {\n+///         let BooleanVector(lhs) = self;\n+///         assert_eq!(lhs.len(), rhs.len());\n+///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo | Foo;\n+///     let bv1 = BooleanVector(vec![true, true, false, false]);\n+///     let bv2 = BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![true, true, true, false]);\n+///     assert_eq!(bv1 | bv2, expected);\n /// }\n /// ```\n #[lang = \"bitor\"]\n@@ -1001,25 +1031,58 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitXor`. When `Foo ^ Foo` happens, it ends up\n-/// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n+/// In this example, the `^` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitXor;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitXor for Foo {\n-///     type Output = Foo;\n+/// impl BitXor for Scalar {\n+///     type Output = Self;\n ///\n-///     fn bitxor(self, _rhs: Foo) -> Foo {\n-///         println!(\"Bitwise Xor-ing!\");\n-///         self\n+///     // rhs is the \"right-hand side\" of the expression `a ^ b`\n+///     fn bitxor(self, rhs: Self) -> Self {\n+///         Scalar(self.0 ^ rhs.0)\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Scalar(true) ^ Scalar(true), Scalar(false));\n+///     assert_eq!(Scalar(true) ^ Scalar(false), Scalar(true));\n+///     assert_eq!(Scalar(false) ^ Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(false) ^ Scalar(false), Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitXor` trait is implemented for a `BooleanVector`\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::BitXor;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitXor for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitxor(self, BooleanVector(rhs): Self) -> Self {\n+///         let BooleanVector(lhs) = self;\n+///         assert_eq!(lhs.len(), rhs.len());\n+///         BooleanVector(lhs.iter()\n+///                          .zip(rhs.iter())\n+///                          .map(|(x, y)| (*x || *y) && !(*x && *y))\n+///                          .collect())\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo ^ Foo;\n+///     let bv1 = BooleanVector(vec![true, true, false, false]);\n+///     let bv2 = BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![false, true, true, false]);\n+///     assert_eq!(bv1 ^ bv2, expected);\n /// }\n /// ```\n #[lang = \"bitxor\"]"}, {"sha": "d23f77af321552683c4f07b052f6f9142866f6fa", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n             idstack: Vec::new(),\n         }\n     }\n-    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F)\n+    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F, span: Span)\n         where F: Fn(&mut Self)\n     {\n         if self.idstack.iter().any(|&x| x == id) {\n@@ -150,7 +150,9 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n                                      \"recursive static\");\n                 }\n             } else {\n-                span_err!(self.sess, *self.root_span, E0265, \"recursive constant\");\n+                struct_span_err!(self.sess, span, E0265, \"recursive constant\")\n+                    .span_label(span, &format!(\"recursion not allowed in constant\"))\n+                    .emit();\n             }\n             return;\n         }\n@@ -203,7 +205,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n     fn visit_item(&mut self, it: &'ast hir::Item) {\n-        self.with_item_id_pushed(it.id, |v| intravisit::walk_item(v, it));\n+        self.with_item_id_pushed(it.id, |v| intravisit::walk_item(v, it), it.span);\n     }\n \n     fn visit_enum_def(&mut self,\n@@ -233,16 +235,16 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n         // If `maybe_expr` is `None`, that's because no discriminant is\n         // specified that affects this variant. Thus, no risk of recursion.\n         if let Some(expr) = maybe_expr {\n-            self.with_item_id_pushed(expr.id, |v| intravisit::walk_expr(v, expr));\n+            self.with_item_id_pushed(expr.id, |v| intravisit::walk_expr(v, expr), expr.span);\n         }\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n-        self.with_item_id_pushed(ti.id, |v| intravisit::walk_trait_item(v, ti));\n+        self.with_item_id_pushed(ti.id, |v| intravisit::walk_trait_item(v, ti), ti.span);\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n-        self.with_item_id_pushed(ii.id, |v| intravisit::walk_impl_item(v, ii));\n+        self.with_item_id_pushed(ii.id, |v| intravisit::walk_impl_item(v, ii), ii.span);\n     }\n \n     fn visit_expr(&mut self, e: &'ast hir::Expr) {"}, {"sha": "f8f90bdb4e7f5d561a0f5fc1208840dbfabe4c30", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -1270,7 +1270,42 @@ trait Foo {}\n \n impl Foo for i32 {}\n ```\n-\"##\n+\"##,\n+\n+E0530: r##\"\n+A binding shadowed something it shouldn't.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0530\n+static TEST: i32 = 0;\n+\n+let r: (i32, i32) = (0, 0);\n+match r {\n+    TEST => {} // error: match bindings cannot shadow statics\n+}\n+```\n+\n+To fix this error, just change the binding's name in order to avoid shadowing\n+one of the following:\n+\n+* struct name\n+* struct/enum variant\n+* static\n+* const\n+* associated const\n+\n+Fixed example:\n+\n+```\n+static TEST: i32 = 0;\n+\n+let r: (i32, i32) = (0, 0);\n+match r {\n+    something => {} // ok!\n+}\n+```\n+\"##,\n \n }\n \n@@ -1289,7 +1324,6 @@ register_diagnostics! {\n //  E0419, merged into 531\n //  E0420, merged into 532\n //  E0421, merged into 531\n-    E0530, // X bindings cannot shadow Ys\n     E0531, // unresolved pattern path kind `name`\n     E0532, // expected pattern path kind, found another pattern path kind\n //  E0427, merged into 530"}, {"sha": "46b3f503b6e763e954207eeef065f12850ec2004", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -242,6 +242,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             MethodError::Ambiguity(sources) => {\n                 let mut err = struct_span_err!(self.sess(), span, E0034,\n                                                \"multiple applicable items in scope\");\n+                err.span_label(span, &format!(\"multiple `{}` found\", item_name));\n \n                 report_candidates(&mut err, sources);\n                 err.emit();"}, {"sha": "a7ea8bd7959fe0efcfa33626d88ded27f6f4380b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -903,14 +903,18 @@ fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let mut err = struct_span_err!(\n         tcx.sess, impl_item.span, E0520,\n-        \"item `{}` is provided by an `impl` that specializes \\\n-         another, but the item in the parent `impl` is not \\\n-         marked `default` and so it cannot be specialized.\",\n+        \"`{}` specializes an item from a parent `impl`, but \\\n+         neither that item nor the `impl` are marked `default`\",\n         impl_item.name);\n+    err.span_label(impl_item.span, &format!(\"cannot specialize default item `{}`\",\n+                                            impl_item.name));\n \n     match tcx.span_of_impl(parent_impl) {\n         Ok(span) => {\n-            err.span_note(span, \"parent implementation is here:\");\n+            err.span_label(span, &\"parent `impl` is here\");\n+            err.note(&format!(\"to specialize, either the parent `impl` or `{}` \\\n+                               in the parent `impl` must be marked `default`\",\n+                              impl_item.name));\n         }\n         Err(cname) => {\n             err.note(&format!(\"parent implementation is in crate `{}`\", cname));\n@@ -1204,7 +1208,9 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, id: ast::Node\n             }\n             let e = fields[0].ty(tcx, substs);\n             if !fields.iter().all(|f| f.ty(tcx, substs) == e) {\n-                span_err!(tcx.sess, sp, E0076, \"SIMD vector should be homogeneous\");\n+                struct_span_err!(tcx.sess, sp, E0076, \"SIMD vector should be homogeneous\")\n+                                .span_label(sp, &format!(\"SIMD elements must have the same type\"))\n+                                .emit();\n                 return;\n             }\n             match e.sty {"}, {"sha": "435442bd30a651f1fac36df30e2f18e08da62ad9", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -16,7 +16,7 @@ use middle::region::{CodeExtent};\n use rustc::infer::TypeOrigin;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::FnvHashSet;\n+use rustc::util::nodemap::{FnvHashSet, FnvHashMap};\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -519,11 +519,26 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n fn reject_shadowing_type_parameters(tcx: TyCtxt, span: Span, generics: &ty::Generics) {\n     let parent = tcx.lookup_generics(generics.parent.unwrap());\n-    let impl_params: FnvHashSet<_> = parent.types.iter().map(|tp| tp.name).collect();\n+    let impl_params: FnvHashMap<_, _> = parent.types\n+                                        .iter()\n+                                        .map(|tp| (tp.name, tp.def_id))\n+                                        .collect();\n \n     for method_param in &generics.types {\n-        if impl_params.contains(&method_param.name) {\n-            error_194(tcx, span, method_param.name);\n+        if impl_params.contains_key(&method_param.name) {\n+            // Tighten up the span to focus on only the shadowing type\n+            let shadow_node_id = tcx.map.as_local_node_id(method_param.def_id).unwrap();\n+            let type_span = match tcx.map.opt_span(shadow_node_id) {\n+                Some(osp) => osp,\n+                None => span\n+            };\n+\n+            // The expectation here is that the original trait declaration is\n+            // local so it should be okay to just unwrap everything.\n+            let trait_def_id = impl_params.get(&method_param.name).unwrap();\n+            let trait_node_id = tcx.map.as_local_node_id(*trait_def_id).unwrap();\n+            let trait_decl_span = tcx.map.opt_span(trait_node_id).unwrap();\n+            error_194(tcx, type_span, trait_decl_span, method_param.name);\n         }\n     }\n }\n@@ -630,10 +645,11 @@ fn error_392<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, span: Span, param_name: ast::N\n     err\n }\n \n-fn error_194(tcx: TyCtxt, span: Span, name: ast::Name) {\n+fn error_194(tcx: TyCtxt, span: Span, trait_decl_span: Span, name: ast::Name) {\n     struct_span_err!(tcx.sess, span, E0194,\n               \"type parameter `{}` shadows another type parameter of the same name\",\n               name)\n-        .span_label(span, &format!(\"`{}` shadows another type parameter\", name))\n+        .span_label(span, &format!(\"shadows another type parameter\"))\n+        .span_label(trait_decl_span, &format!(\"first `{}` declared here\", name))\n         .emit();\n }"}, {"sha": "bcce64cb110c671df7ad9180babcdc047c561b3c", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -347,15 +347,19 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                     return;\n                 }\n             }\n-            hir::ItemDefaultImpl(..) => {\n+            hir::ItemDefaultImpl(_, ref item_trait_ref) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: default trait impl {}\",\n                        self.tcx.map.node_to_string(item.id));\n                 let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n                 if trait_ref.def_id.krate != LOCAL_CRATE {\n-                    span_err!(self.tcx.sess, item.span, E0318,\n+                    struct_span_err!(self.tcx.sess, item_trait_ref.path.span, E0318,\n                               \"cannot create default implementations for traits outside the \\\n-                               crate they're defined in; define a new trait instead\");\n+                               crate they're defined in; define a new trait instead\")\n+                        .span_label(item_trait_ref.path.span,\n+                                    &format!(\"`{}` trait not defined in this crate\",\n+                                             item_trait_ref.path))\n+                        .emit();\n                     return;\n                 }\n             }"}, {"sha": "3c5f07c3e33a6db25ef7fd9f033d9f3825d080be", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -45,7 +45,6 @@ pub struct TcpStream(net_imp::TcpStream);\n ///\n /// ```no_run\n /// use std::net::{TcpListener, TcpStream};\n-/// use std::thread;\n ///\n /// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n ///\n@@ -57,17 +56,11 @@ pub struct TcpStream(net_imp::TcpStream);\n /// for stream in listener.incoming() {\n ///     match stream {\n ///         Ok(stream) => {\n-///             thread::spawn(move|| {\n-///                 // connection succeeded\n-///                 handle_client(stream)\n-///             });\n+///             handle_client(stream);\n ///         }\n ///         Err(e) => { /* connection failed */ }\n ///     }\n /// }\n-///\n-/// // close the socket server\n-/// drop(listener);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TcpListener(net_imp::TcpListener);"}, {"sha": "dbf17b3c813f6d10da9f7f6f25f4bb58cb866fea", "filename": "src/libstd/path.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -639,6 +639,25 @@ pub struct Iter<'a> {\n     inner: Components<'a>,\n }\n \n+#[stable(feature = \"path_components_debug\", since = \"1.13.0\")]\n+impl<'a> fmt::Debug for Components<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        struct DebugHelper<'a>(&'a Path);\n+\n+        impl<'a> fmt::Debug for DebugHelper<'a> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                f.debug_list()\n+                    .entries(self.0.components())\n+                    .finish()\n+            }\n+        }\n+\n+        f.debug_tuple(\"Components\")\n+            .field(&DebugHelper(self.as_path()))\n+            .finish()\n+    }\n+}\n+\n impl<'a> Components<'a> {\n     // how long is the prefix, if any?\n     #[inline]\n@@ -818,6 +837,25 @@ impl<'a> AsRef<OsStr> for Components<'a> {\n     }\n }\n \n+#[stable(feature = \"path_iter_debug\", since = \"1.13.0\")]\n+impl<'a> fmt::Debug for Iter<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        struct DebugHelper<'a>(&'a Path);\n+\n+        impl<'a> fmt::Debug for DebugHelper<'a> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                f.debug_list()\n+                    .entries(self.0.iter())\n+                    .finish()\n+            }\n+        }\n+\n+        f.debug_tuple(\"Iter\")\n+            .field(&DebugHelper(self.as_path()))\n+            .finish()\n+    }\n+}\n+\n impl<'a> Iter<'a> {\n     /// Extracts a slice corresponding to the portion of the path remaining for iteration.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3483,4 +3521,47 @@ mod tests {\n                 );\n         }\n     }\n+\n+    #[test]\n+    fn test_components_debug() {\n+        let path = Path::new(\"/tmp\");\n+\n+        let mut components = path.components();\n+\n+        let expected = \"Components([RootDir, Normal(\\\"tmp\\\")])\";\n+        let actual = format!(\"{:?}\", components);\n+        assert_eq!(expected, actual);\n+\n+        let _ = components.next().unwrap();\n+        let expected = \"Components([Normal(\\\"tmp\\\")])\";\n+        let actual = format!(\"{:?}\", components);\n+        assert_eq!(expected, actual);\n+\n+        let _ = components.next().unwrap();\n+        let expected = \"Components([])\";\n+        let actual = format!(\"{:?}\", components);\n+        assert_eq!(expected, actual);\n+    }\n+\n+    #[cfg(unix)]\n+    #[test]\n+    fn test_iter_debug() {\n+        let path = Path::new(\"/tmp\");\n+\n+        let mut iter = path.iter();\n+\n+        let expected = \"Iter([\\\"/\\\", \\\"tmp\\\"])\";\n+        let actual = format!(\"{:?}\", iter);\n+        assert_eq!(expected, actual);\n+\n+        let _ = iter.next().unwrap();\n+        let expected = \"Iter([\\\"tmp\\\"])\";\n+        let actual = format!(\"{:?}\", iter);\n+        assert_eq!(expected, actual);\n+\n+        let _ = iter.next().unwrap();\n+        let expected = \"Iter([])\";\n+        let actual = format!(\"{:?}\", iter);\n+        assert_eq!(expected, actual);\n+    }\n }"}, {"sha": "136a74f7a8b74272f51fd9f7b6d33e2e8ca23bec", "filename": "src/test/compile-fail/E0034.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0034.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -18,9 +18,17 @@ trait Trait2 {\n     fn foo();\n }\n \n-impl Trait1 for Test { fn foo() {} }\n-impl Trait2 for Test { fn foo() {} }\n+impl Trait1 for Test {\n+    fn foo() {}\n+    //~^ NOTE candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n+}\n+\n+impl Trait2 for Test {\n+    fn foo() {}\n+    //~^ NOTE candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n+}\n \n fn main() {\n-    Test::foo() //~ ERROR E0034\n+    Test::foo() //~ ERROR multiple applicable items in scope\n+    //~| NOTE multiple `foo` found\n }"}, {"sha": "c31dc62eb666bc1b5961153eee5fa5cc98f245f0", "filename": "src/test/compile-fail/E0076.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0076.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -11,7 +11,9 @@\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad(u16, u32, u32); //~ ERROR E0076\n+struct Bad(u16, u32, u32);\n+//~^ ERROR E0076\n+//~| NOTE SIMD elements must have the same type\n \n fn main() {\n }"}, {"sha": "6b1f718dd76c5542e4cf5bf58edc078c32e75308", "filename": "src/test/compile-fail/E0194.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0194.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo<T> {\n+trait Foo<T> { //~ NOTE first `T` declared here\n     fn do_something(&self) -> T;\n     fn do_something_else<T: Clone>(&self, bar: T);\n     //~^ ERROR E0194\n-    //~| NOTE `T` shadows another type parameter\n+    //~| NOTE shadows another type parameter\n }\n \n fn main() {"}, {"sha": "0bb8faea62e1ea9267f1c64f44b207eb1a65cf9b", "filename": "src/test/compile-fail/E0520.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0520.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -19,11 +19,15 @@ impl<T> SpaceLlama for T {\n }\n \n impl<T: Clone> SpaceLlama for T {\n+//~^ NOTE parent `impl` is here\n     fn fly(&self) {}\n }\n \n impl SpaceLlama for i32 {\n-    default fn fly(&self) {} //~ ERROR E0520\n+    default fn fly(&self) {}\n+    //~^ ERROR E0520\n+    //~| NOTE cannot specialize default item `fly`\n+    //~| NOTE either the parent `impl` or `fly` in the parent `impl` must be marked `default`\n }\n \n fn main() {"}, {"sha": "27187bb5aba08e643d45159dc45a58a6d5df32a4", "filename": "src/test/compile-fail/E0528.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0528.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0528.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0528.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let r = &[1, 2];\n+    match r {\n+        &[a, b, c, rest..] => { //~ ERROR E0528\n+        }\n+    }\n+}"}, {"sha": "488fe7c7763aea5bf256593dc1429ced68ea0b69", "filename": "src/test/compile-fail/E0529.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0529.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let r: f32 = 1.0;\n+    match r {\n+        [a, b] => { //~ ERROR E0529\n+        }\n+    }\n+}"}, {"sha": "4f674d0e671062c57fce5c3185ee34e5cffa4f96", "filename": "src/test/compile-fail/E0530.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0530.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    static TEST: i32 = 0;\n+\n+    let r: (i32, i32) = (0, 0);\n+    match r {\n+        TEST => {} //~ ERROR E0530\n+    }\n+}"}, {"sha": "8c036e6076d1d4c5d68d3619a1dd1ce05c6537de", "filename": "src/test/compile-fail/E0534.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0534.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[inline()] //~ ERROR E0534\n+pub fn something() {}\n+\n+fn main() {}"}, {"sha": "17558cc05c612cec6910b84ae9629d2041d48616", "filename": "src/test/compile-fail/E0535.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0535.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[inline(unknown)] //~ ERROR E0535\n+pub fn something() {}\n+\n+fn main() {}"}, {"sha": "127bdc258d947f1e86ae858e1e6f7401762933e5", "filename": "src/test/compile-fail/E0536.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0536.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(not())] //~ ERROR E0536\n+pub fn something() {}\n+\n+pub fn main() {}"}, {"sha": "497936fbcd28ec6a8e931006d4de64d1c17a5c36", "filename": "src/test/compile-fail/E0537.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0537.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(unknown())] //~ ERROR E0537\n+pub fn something() {}\n+\n+pub fn main() {}"}, {"sha": "4ab0506a9c0cd4bd5d7b23c2997d636c2d9c41f1", "filename": "src/test/compile-fail/E0558.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0558.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0558.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0558.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[export_name] //~ ERROR E0558\n+pub fn something() {}\n+\n+fn main() {}"}, {"sha": "80eeb203a850ecae3b626c90dde35f9e6b625ba7", "filename": "src/test/compile-fail/E0559.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE0559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0559.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Field {\n+    Fool { x: u32 },\n+}\n+\n+fn main() {\n+    let s = Field::Fool { joke: 0 }; //~ ERROR E0559\n+}"}, {"sha": "ec9b86ee1f00fddd5ede482ed248c59e28bbe562", "filename": "src/test/compile-fail/E560.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2FE560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE560.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Simba {\n+    mother: u32,\n+}\n+\n+fn main() {\n+    let s = Simba { mother: 1, father: 0 }; //~ ERROR E0560\n+}"}, {"sha": "35f32d16a9a2a7470ba98647c4e073749e9093d3", "filename": "src/test/compile-fail/issue-23302.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Fissue-23302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Fissue-23302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23302.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -12,13 +12,21 @@\n // the appropriate error (rather than, say, blowing the stack).\n enum X {\n     A = X::A as isize, //~ ERROR E0265\n+                       //~^ NOTE recursion not allowed in constant\n }\n \n // Since `Y::B` here defaults to `Y::A+1`, this is also a\n // recursive definition.\n enum Y {\n     A = Y::B as isize, //~ ERROR E0265\n+                       //~^ NOTE recursion not allowed in constant\n     B,\n }\n \n+const A: i32 = B; //~ ERROR E0265\n+                  //~^ NOTE recursion not allowed in constant\n+\n+const B: i32 = A; //~ ERROR E0265\n+                  //~^ NOTE recursion not allowed in constant\n+\n fn main() { }"}, {"sha": "2a012da0083bcd3d9cbaab52d8871880f924c91c", "filename": "src/test/compile-fail/issue-24204.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Fissue-24204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Fissue-24204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24204.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+trait MultiDispatch<T> {\n+    type O;\n+}\n+\n+trait Trait: Sized {\n+    type A: MultiDispatch<Self::B, O = Self>;\n+    type B;\n+\n+    fn new<U>(u: U) -> <Self::A as MultiDispatch<U>>::O where Self::A : MultiDispatch<U>;\n+}\n+\n+fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n+//~^ ERROR type mismatch resolving\n+\n+fn main() {}"}, {"sha": "4d71517e06058fde9f39628a694afe1cd5dc99d7", "filename": "src/test/compile-fail/typeck-default-trait-impl-outside-crate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(optin_builtin_traits)]\n \n-impl Copy for .. {}\n-//~^ ERROR E0318\n-\n+impl Copy for .. {} //~ ERROR E0318\n+     //~^ NOTE `Copy` trait not defined in this crate\n fn main() {}"}, {"sha": "ad19a9be76f8871aae3fb2895a759421db8293e0", "filename": "src/test/run-pass/issue-14875.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14875.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that values are not leaked when a dtor panics (#14875)\n+\n+use std::panic::{self, UnwindSafe};\n+\n+struct SetInnerOnDrop<'a>(&'a mut bool);\n+\n+impl<'a> UnwindSafe for SetInnerOnDrop<'a> {}\n+\n+impl<'a> Drop for SetInnerOnDrop<'a> {\n+    fn drop(&mut self) {\n+        *self.0 = true;\n+    }\n+}\n+\n+struct PanicOnDrop;\n+impl Drop for PanicOnDrop {\n+    fn drop(&mut self) {\n+        panic!(\"test panic\");\n+    }\n+}\n+\n+\n+fn main() {\n+    let mut set_on_drop = false;\n+    {\n+        let set_inner_on_drop = SetInnerOnDrop(&mut set_on_drop);\n+        let _ = panic::catch_unwind(|| {\n+            let _set_inner_on_drop = set_inner_on_drop;\n+            let _panic_on_drop = PanicOnDrop;\n+        });\n+    }\n+    assert!(set_on_drop);\n+}"}, {"sha": "7f8a4941494a91c7a8eee2da5fdf439252fc43a8", "filename": "src/test/run-pass/issue-34053.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Fissue-34053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Fissue-34053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34053.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(drop_types_in_const)]\n+\n+struct A(i32);\n+\n+impl Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+static FOO: A = A(123);\n+\n+fn main() {\n+    println!(\"{}\", &FOO.0);\n+}"}, {"sha": "09c2d2510e31729cea5c5a9b842e795bc07370ce", "filename": "src/tools/rustbook/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftools%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftools%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbuild.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -61,19 +61,19 @@ fn write_toc(book: &Book, current_page: &BookItem, out: &mut Write) -> io::Resul\n                  section,\n                  item.title)?;\n         if !item.children.is_empty() {\n-            writeln!(out, \"<ul class='section'>\")?;\n+            writeln!(out, \"<ol class='section'>\")?;\n             let _ = walk_items(&item.children[..], section, current_page, out);\n-            writeln!(out, \"</ul>\")?;\n+            writeln!(out, \"</ol>\")?;\n         }\n         writeln!(out, \"</li>\")?;\n \n         Ok(())\n     }\n \n     writeln!(out, \"<div id='toc' class='mobile-hidden'>\")?;\n-    writeln!(out, \"<ul class='chapter'>\")?;\n+    writeln!(out, \"<ol class='chapter'>\")?;\n     walk_items(&book.chapters[..], \"\", &current_page, out)?;\n-    writeln!(out, \"</ul>\")?;\n+    writeln!(out, \"</ol>\")?;\n     writeln!(out, \"</div>\")?;\n \n     Ok(())"}]}