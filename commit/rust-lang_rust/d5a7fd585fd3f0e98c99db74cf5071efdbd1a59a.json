{"sha": "d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTdmZDU4NWZkM2YwZTk4Yzk5ZGI3NGNmNTA3MWVmZGJkMWE1OWE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-31T16:52:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-31T16:52:44Z"}, "message": "Rollup merge of #42126 - clarcharr:into_docs, r=steveklabnik\n\nClarify docs on implementing Into.\n\nThis was suggested by @dtolnay in #40380.\n\nThis explicitly clarifies in what circumstances you should implement `Into` instead of `From`.", "tree": {"sha": "3ce1b1d7f0647e2adfc079bd61be88498e6b2444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce1b1d7f0647e2adfc079bd61be88498e6b2444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a", "html_url": "https://github.com/rust-lang/rust/commit/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7b44b78e39c71e5049a210a0c84a8931835cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7b44b78e39c71e5049a210a0c84a8931835cc3", "html_url": "https://github.com/rust-lang/rust/commit/fd7b44b78e39c71e5049a210a0c84a8931835cc3"}, {"sha": "54bbe23b2efe238044faa2679cb318e8253f0370", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bbe23b2efe238044faa2679cb318e8253f0370", "html_url": "https://github.com/rust-lang/rust/commit/54bbe23b2efe238044faa2679cb318e8253f0370"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "11a360ff900fe69a97d767e92fd1a4443f3f1608", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d5a7fd585fd3f0e98c99db74cf5071efdbd1a59a", "patch": "@@ -169,6 +169,40 @@ pub trait AsMut<T: ?Sized> {\n /// - [`From<T>`][From]` for U` implies `Into<U> for T`\n /// - [`into`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n+/// # Implementing `Into`\n+///\n+/// There is one exception to implementing `Into`, and it's kind of esoteric.\n+/// If the destination type is not part of the current crate, and it uses a\n+/// generic variable, then you can't implement `From` directly.  For example,\n+/// take this crate:\n+///\n+/// ```compile_fail\n+/// struct Wrapper<T>(Vec<T>);\n+/// impl<T> From<Wrapper<T>> for Vec<T> {\n+///     fn from(w: Wrapper<T>) -> Vec<T> {\n+///         w.0\n+///     }\n+/// }\n+/// ```\n+///\n+/// To fix this, you can implement `Into` directly:\n+///\n+/// ```\n+/// struct Wrapper<T>(Vec<T>);\n+/// impl<T> Into<Vec<T>> for Wrapper<T> {\n+///     fn into(self) -> Vec<T> {\n+///         self.0\n+///     }\n+/// }\n+/// ```\n+///\n+/// This won't always allow the conversion: for example, `try!` and `?`\n+/// always use `From`. However, in most cases, people use `Into` to do the\n+/// conversions, and this will allow that.\n+///\n+/// In almost all cases, you should try to implement `From`, then fall back\n+/// to `Into` if `From` can't be implemented.\n+///\n /// # Examples\n ///\n /// [`String`] implements `Into<Vec<u8>>`:\n@@ -285,9 +319,11 @@ pub trait From<T>: Sized {\n /// Library authors should not directly implement this trait, but should prefer\n /// implementing the [`TryFrom`] trait, which offers greater flexibility and\n /// provides an equivalent `TryInto` implementation for free, thanks to a\n-/// blanket implementation in the standard library.\n+/// blanket implementation in the standard library. For more information on this,\n+/// see the documentation for [`Into`].\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n+/// [`Into`]: trait.Into.html\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error."}]}