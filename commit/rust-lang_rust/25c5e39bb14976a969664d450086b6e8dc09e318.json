{"sha": "25c5e39bb14976a969664d450086b6e8dc09e318", "node_id": "C_kwDOAAsO6NoAKDI1YzVlMzliYjE0OTc2YTk2OTY2NGQ0NTAwODZiNmU4ZGMwOWUzMTg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-13T14:59:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-13T15:11:38Z"}, "message": "rustdoc: Clean up `fn resolve_self_ty`", "tree": {"sha": "f55dcc09d33b9317c63427da435d6f497fb063c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f55dcc09d33b9317c63427da435d6f497fb063c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c5e39bb14976a969664d450086b6e8dc09e318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c5e39bb14976a969664d450086b6e8dc09e318", "html_url": "https://github.com/rust-lang/rust/commit/25c5e39bb14976a969664d450086b6e8dc09e318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c5e39bb14976a969664d450086b6e8dc09e318/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "863216eb1f57eac3d16347c15a83a183d5975577", "url": "https://api.github.com/repos/rust-lang/rust/commits/863216eb1f57eac3d16347c15a83a183d5975577", "html_url": "https://github.com/rust-lang/rust/commit/863216eb1f57eac3d16347c15a83a183d5975577"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "414f7199692a1eb71d3c1335a0d636a3a7002d7b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/25c5e39bb14976a969664d450086b6e8dc09e318/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c5e39bb14976a969664d450086b6e8dc09e318/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=25c5e39bb14976a969664d450086b6e8dc09e318", "patch": "@@ -515,36 +515,29 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             return None;\n         }\n \n-        let self_id = match item_id.as_def_id() {\n-            None => None,\n-            Some(did)\n-                if (matches!(self.cx.tcx.def_kind(did), DefKind::Field)\n-                    && matches!(\n-                        self.cx.tcx.def_kind(self.cx.tcx.parent(did).unwrap()),\n-                        DefKind::Variant\n-                    )) =>\n-            {\n-                self.cx.tcx.parent(did).and_then(|item_id| self.cx.tcx.parent(item_id))\n-            }\n-            Some(did)\n-                if matches!(\n-                    self.cx.tcx.def_kind(did),\n-                    DefKind::AssocConst\n-                        | DefKind::AssocFn\n-                        | DefKind::AssocTy\n-                        | DefKind::Variant\n-                        | DefKind::Field\n-                ) =>\n-            {\n-                self.cx.tcx.parent(did)\n-            }\n-            Some(did) => Some(did),\n-        };\n-\n-        self_id.and_then(|self_id| match self.cx.tcx.def_kind(self_id) {\n-            DefKind::Impl => self.def_id_to_res(self_id),\n-            def_kind => Some(Res::Def(def_kind, self_id)),\n-        })\n+        let tcx = self.cx.tcx;\n+        item_id\n+            .as_def_id()\n+            .map(|def_id| match tcx.def_kind(def_id) {\n+                def_kind @ (DefKind::AssocFn\n+                | DefKind::AssocConst\n+                | DefKind::AssocTy\n+                | DefKind::Variant\n+                | DefKind::Field) => {\n+                    let parent_def_id = tcx.parent(def_id).expect(\"nested item has no parent\");\n+                    if def_kind == DefKind::Field && tcx.def_kind(parent_def_id) == DefKind::Variant\n+                    {\n+                        tcx.parent(parent_def_id).expect(\"variant has no parent\")\n+                    } else {\n+                        parent_def_id\n+                    }\n+                }\n+                _ => def_id,\n+            })\n+            .and_then(|self_id| match tcx.def_kind(self_id) {\n+                DefKind::Impl => self.def_id_to_res(self_id),\n+                def_kind => Some(Res::Def(def_kind, self_id)),\n+            })\n     }\n \n     /// Convenience wrapper around `resolve_str_path_error`."}]}