{"sha": "2eefc9db15f22c993ba1103cb93d3265e528d667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZWZjOWRiMTVmMjJjOTkzYmExMTAzY2I5M2QzMjY1ZTUyOGQ2Njc=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-10-02T12:28:16Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "add trait aliases to HIR", "tree": {"sha": "6449cae7010c4380d3446590c2fbe381c6ebdba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6449cae7010c4380d3446590c2fbe381c6ebdba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eefc9db15f22c993ba1103cb93d3265e528d667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eefc9db15f22c993ba1103cb93d3265e528d667", "html_url": "https://github.com/rust-lang/rust/commit/2eefc9db15f22c993ba1103cb93d3265e528d667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eefc9db15f22c993ba1103cb93d3265e528d667/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6ad1e647c9201b9af4d7e9521b51c5d01ec8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6ad1e647c9201b9af4d7e9521b51c5d01ec8e6", "html_url": "https://github.com/rust-lang/rust/commit/1b6ad1e647c9201b9af4d7e9521b51c5d01ec8e6"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "19a37b693db6f3d23264aa2473f52f97c1469d6b", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -37,6 +37,7 @@ pub enum Def {\n     Trait(DefId),\n     TyAlias(DefId),\n     TyForeign(DefId),\n+    TraitAlias(DefId),\n     AssociatedTy(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n@@ -155,7 +156,8 @@ impl Def {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n-            Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n+            Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n+            Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n@@ -186,6 +188,7 @@ impl Def {\n             Def::VariantCtor(.., CtorKind::Fictive) => \"struct variant\",\n             Def::Enum(..) => \"enum\",\n             Def::TyAlias(..) => \"type alias\",\n+            Def::TraitAlias(..) => \"trait alias\",\n             Def::AssociatedTy(..) => \"associated type\",\n             Def::Struct(..) => \"struct\",\n             Def::StructCtor(.., CtorKind::Fn) => \"tuple struct\","}, {"sha": "eacad100f10be53f3e858a9952bbc401dae95cc6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -526,6 +526,11 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item_ref, trait_item_refs);\n         }\n+        ItemTraitAlias(ref generics, ref bounds) => {\n+            visitor.visit_id(item.id);\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }"}, {"sha": "b544ea820c0f7c547e4106a4ca802a81beb1dfe0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -1924,9 +1924,11 @@ impl<'a> LoweringContext<'a> {\n                                bounds,\n                                items)\n             }\n-            ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n-                panic!(\"Shouldn't still be around\")\n+            ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                hir::ItemTraitAlias(self.lower_generics(generics),\n+                                    self.lower_bounds(bounds, ImplTraitContext::Disallowed))\n             }\n+            ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n \n         // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to"}, {"sha": "2978f1eb409d840e58b8edddadf3dec8588366ba", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -106,7 +106,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match i.node {\n             ItemKind::AutoImpl(..) | ItemKind::Impl(..) =>\n                 DefPathData::Impl,\n-            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n+            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n+            ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {"}, {"sha": "014e57716562c8bc8fcdcd63aabcca9e421444be", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -1185,6 +1185,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemStruct(..) => \"struct\",\n                 ItemUnion(..) => \"union\",\n                 ItemTrait(..) => \"trait\",\n+                ItemTraitAlias(..) => \"trait alias\",\n                 ItemImpl(..) => \"impl\",\n                 ItemAutoImpl(..) => \"default impl\",\n             };"}, {"sha": "dc44a943e4cf80ed78746e1074a62812b3984cf2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -1888,6 +1888,8 @@ pub enum Item_ {\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(IsAuto, Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n+    /// Represents a Trait Alias Declaration\n+    ItemTraitAlias(Generics, TyParamBounds),\n \n     /// Auto trait implementations\n     ///\n@@ -1919,6 +1921,7 @@ impl Item_ {\n             ItemStruct(..) => \"struct\",\n             ItemUnion(..) => \"union\",\n             ItemTrait(..) => \"trait\",\n+            ItemTraitAlias(..) => \"trait alias\",\n             ItemImpl(..) |\n             ItemAutoImpl(..) => \"item\",\n         }"}, {"sha": "c7bb121e901050dd1ddf8860afbbaf314c35ad09", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -747,6 +747,27 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n+            hir::ItemTraitAlias(ref generics, ref bounds) => {\n+                self.head(\"\")?;\n+                self.print_visibility(&item.vis)?;\n+                self.word_nbsp(\"trait\")?;\n+                self.print_name(item.name)?;\n+                self.print_generics(generics)?;\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                // FIXME(durka) this seems to be some quite outdated syntax\n+                for b in bounds.iter() {\n+                    if let TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                        self.s.space()?;\n+                        self.word_space(\"for ?\")?;\n+                        self.print_trait_ref(&ptr.trait_ref)?;\n+                    } else {\n+                        real_bounds.push(b.clone());\n+                    }\n+                }\n+                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.print_where_clause(&generics.where_clause)?;\n+                self.s.word(\";\")?;\n+            }\n         }\n         self.ann.post(self, NodeItem(item))\n     }"}, {"sha": "ff5327ced8b79963d4ba2bd51d13ebed94240aa0", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -848,6 +848,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemStruct(variant_data, generics),\n     ItemUnion(variant_data, generics),\n     ItemTrait(is_auto, unsafety, generics, bounds, item_refs),\n+    ItemTraitAlias(generics, bounds),\n     ItemAutoImpl(unsafety, trait_ref),\n     ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n@@ -1004,6 +1005,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Variant(def_id),\n     Trait(def_id),\n     TyAlias(def_id),\n+    TraitAlias(def_id),\n     AssociatedTy(def_id),\n     PrimTy(prim_ty),\n     TyParam(def_id),"}, {"sha": "27f12c2c1587efea1d60617d9019aa8c233ecdd7", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemExternCrate(_) | hir::ItemUse(..) |\n                     hir::ItemTy(..) | hir::ItemStatic(..) |\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n-                    hir::ItemImpl(..) | hir::ItemTrait(..) |\n+                    hir::ItemImpl(..) | hir::ItemTrait(..) | hir::ItemTraitAlias(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n                     hir::ItemUnion(..) | hir::ItemAutoImpl(..) |\n                     hir::ItemGlobalAsm(..) => {}"}, {"sha": "e75762cbacb42641c17b4316db5be3aaa22224e5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -469,6 +469,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemStruct(_, ref generics)\n             | hir::ItemUnion(_, ref generics)\n             | hir::ItemTrait(_, _, ref generics, ..)\n+            | hir::ItemTraitAlias(ref generics, ..)\n             | hir::ItemImpl(_, _, _, ref generics, ..) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {"}, {"sha": "5e8bbabee4a9a334814817c2d77bd3cf69daaaba", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -979,6 +979,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 EntryKind::Trait(self.lazy(&data))\n             }\n             hir::ItemExternCrate(_) |\n+            hir::ItemTraitAlias(..) |\n             hir::ItemUse(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n@@ -1526,7 +1527,8 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n             hir::ItemAutoImpl(..) |\n-            hir::ItemTy(..) => {\n+            hir::ItemTy(..) |\n+            hir::ItemTraitAlias(..) => {\n                 // no sub-item recording needed in these cases\n             }\n             hir::ItemEnum(..) => {"}, {"sha": "d41881218129f77270fffaa5f05760e2056af59c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -158,7 +158,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             // Other `pub` items inherit levels from parents\n             hir::ItemConst(..) | hir::ItemEnum(..) | hir::ItemExternCrate(..) |\n             hir::ItemGlobalAsm(..) | hir::ItemFn(..) | hir::ItemMod(..) |\n-            hir::ItemStatic(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n+            hir::ItemStatic(..) | hir::ItemStruct(..) |\n+            hir::ItemTrait(..) | hir::ItemTraitAlias(..) |\n             hir::ItemTy(..) | hir::ItemUnion(..) | hir::ItemUse(..) => {\n                 if item.vis == hir::Public { self.prev_level } else { None }\n             }\n@@ -212,7 +213,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n-            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) | hir::ItemTraitAlias(..) |\n             hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemAutoImpl(..) => {}\n         }\n \n@@ -252,6 +253,11 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n+            hir::ItemTraitAlias(..) => {\n+                if item_level.is_some() {\n+                    self.reach(item.id).generics().predicates();\n+                }\n+            }\n             // Visit everything except for private impl items\n             hir::ItemImpl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 if item_level.is_some() {\n@@ -1498,6 +1504,9 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     }\n                 }\n             }\n+            hir::ItemTraitAlias(..) => {\n+                self.check(item.id, item_visibility).generics().predicates();\n+            }\n             hir::ItemEnum(ref def, _) => {\n                 self.check(item.id, item_visibility).generics().predicates();\n "}, {"sha": "56b1a0238a1a673b4168aa0511bb292359809ca2", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eefc9db15f22c993ba1103cb93d3265e528d667/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=2eefc9db15f22c993ba1103cb93d3265e528d667", "patch": "@@ -894,6 +894,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemTy(..)          |\n             hir::ItemAutoImpl(..) |\n             hir::ItemTrait(..)       |\n+            hir::ItemTraitAlias(..)  |\n             hir::ItemMod(..)         => {\n                 // Nothing to do, just keep recursing...\n             }"}]}