{"sha": "8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjdlODUwMDY4NTNlOTllNmJhMmJmMzc4YzgwMWZiNTNlZWU4ZmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-21T21:41:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-22T19:59:36Z"}, "message": "Add exhaustive_structs lint", "tree": {"sha": "5388c115b64ba03d5d712a5f55a228cdddc28037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5388c115b64ba03d5d712a5f55a228cdddc28037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "html_url": "https://github.com/rust-lang/rust/commit/8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09d4d49299c6614a0ae956980e709a234d21a9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d4d49299c6614a0ae956980e709a234d21a9ef", "html_url": "https://github.com/rust-lang/rust/commit/09d4d49299c6614a0ae956980e709a234d21a9ef"}], "stats": {"total": 280, "additions": 199, "deletions": 81}, "files": [{"sha": "ccc7eb7e881c20f6db0c1e98ee3bd44571b19e0f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -1939,6 +1939,7 @@ Released 2018-09-13\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n [`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n+[`exhaustive_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used"}, {"sha": "d604ad0004fb3abf5208ea5bb951a2cc4a34f4a6", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{snippet_opt, span_lint_and_help, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_hir::{Item, ItemKind};\n use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -10,7 +10,8 @@ declare_clippy_lint! {\n     /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n     ///\n     /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n-    /// not wish to make a stability commitment around enums may wish to disable them by default.\n+    /// not wish to make a stability commitment around exported enums may wish to\n+    /// disable them by default.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -28,25 +29,62 @@ declare_clippy_lint! {\n     /// enum Foo {\n     ///     Bar,\n     ///     Baz\n-    /// }    /// ```\n+    /// }\n+    /// ```\n     pub EXHAUSTIVE_ENUMS,\n     restriction,\n-    \"default lint description\"\n+    \"detects exported enums that have not been marked #[non_exhaustive]\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive structs are typically fine, but a project which does\n+    /// not wish to make a stability commitment around exported structs may wish to\n+    /// disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    pub EXHAUSTIVE_STRUCTS,\n+    restriction,\n+    \"detects exported structs that have not been marked #[non_exhaustive]\"\n }\n \n-declare_lint_pass!(ExhaustiveItems => [EXHAUSTIVE_ENUMS]);\n+declare_lint_pass!(ExhaustiveItems => [EXHAUSTIVE_ENUMS, EXHAUSTIVE_STRUCTS]);\n \n impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Enum(..) = item.kind;\n+            if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n             if cx.access_levels.is_exported(item.hir_id);\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n+                let lint = if let ItemKind::Enum(..) = item.kind {\n+                    EXHAUSTIVE_ENUMS\n+                } else {\n+                    EXHAUSTIVE_STRUCTS\n+                };\n+\n                 if let Some(snippet) = snippet_opt(cx, item.span) {\n                     span_lint_and_sugg(\n                         cx,\n-                        EXHAUSTIVE_ENUMS,\n+                        lint,\n                         item.span,\n                         \"enums should not be exhaustive\",\n                         \"try adding #[non_exhaustive]\",\n@@ -56,7 +94,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n                 } else {\n                     span_lint_and_help(\n                         cx,\n-                        EXHAUSTIVE_ENUMS,\n+                        lint,\n                         item.span,\n                         \"enums should not be exhaustive\",\n                         None,"}, {"sha": "91c74026f641fd860cb79a6e3255bb7f14f480cd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -613,6 +613,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n         &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n         &exhaustive_items::EXHAUSTIVE_ENUMS,\n+        &exhaustive_items::EXHAUSTIVE_STRUCTS,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n@@ -1250,6 +1251,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         LintId::of(&exhaustive_items::EXHAUSTIVE_ENUMS),\n+        LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),"}, {"sha": "bc146c6afc5e43fbcfb6325d26f47acffcc68d87", "filename": "tests/ui/exhaustive_items.fixed", "status": "modified", "additions": 58, "deletions": 28, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.fixed?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -1,42 +1,72 @@\n // run-rustfix\n \n-#![deny(clippy::exhaustive_enums)]\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n #![allow(unused)]\n \n fn main() {\n     // nop\n }\n \n-#[non_exhaustive]\n+pub mod enums {\n+    #[non_exhaustive]\n pub enum Exhaustive {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n-}\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n \n-// no warning, already non_exhaustive\n-#[non_exhaustive]\n-pub enum NonExhaustive {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n-}\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n \n-// no warning, private\n-enum ExhaustivePrivate {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n }\n \n-// no warning, private\n-#[non_exhaustive]\n-enum NonExhaustivePrivate {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n+pub mod structs {\n+    #[non_exhaustive]\n+pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n }"}, {"sha": "ed86b50be30a177b4b17ed49c178d029436929c0", "filename": "tests/ui/exhaustive_items.rs", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.rs?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -1,41 +1,70 @@\n // run-rustfix\n \n-#![deny(clippy::exhaustive_enums)]\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n #![allow(unused)]\n \n fn main() {\n     // nop\n }\n \n-pub enum Exhaustive {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n-}\n+pub mod enums {\n+    pub enum Exhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n \n-// no warning, already non_exhaustive\n-#[non_exhaustive]\n-pub enum NonExhaustive {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n-}\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n \n-// no warning, private\n-enum ExhaustivePrivate {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n }\n \n-// no warning, private\n-#[non_exhaustive]\n-enum NonExhaustivePrivate {\n-    Foo,\n-    Bar,\n-    Baz,\n-    Quux(String),\n+pub mod structs {\n+    pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n }"}, {"sha": "7e286e65949a3c8e2430342f023fe30c146480fc", "filename": "tests/ui/exhaustive_items.stderr", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb7e85006853e99e6ba2bf378c801fb53eee8fa/tests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.stderr?ref=8cb7e85006853e99e6ba2bf378c801fb53eee8fa", "patch": "@@ -1,28 +1,46 @@\n error: enums should not be exhaustive\n-  --> $DIR/exhaustive_items.rs:10:1\n+  --> $DIR/exhaustive_items.rs:11:5\n    |\n-LL | / pub enum Exhaustive {\n-LL | |     Foo,\n-LL | |     Bar,\n-LL | |     Baz,\n-LL | |     Quux(String),\n-LL | | }\n-   | |_^\n+LL | /     pub enum Exhaustive {\n+LL | |         Foo,\n+LL | |         Bar,\n+LL | |         Baz,\n+LL | |         Quux(String),\n+LL | |     }\n+   | |_____^\n    |\n note: the lint level is defined here\n-  --> $DIR/exhaustive_items.rs:3:9\n+  --> $DIR/exhaustive_items.rs:3:35\n    |\n-LL | #![deny(clippy::exhaustive_enums)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: try adding #[non_exhaustive]\n    |\n-LL | #[non_exhaustive]\n+LL |     #[non_exhaustive]\n LL | pub enum Exhaustive {\n-LL |     Foo,\n-LL |     Bar,\n-LL |     Baz,\n-LL |     Quux(String),\n+LL |         Foo,\n+LL |         Bar,\n+LL |         Baz,\n+LL |         Quux(String),\n  ...\n \n-error: aborting due to previous error\n+error: enums should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:46:5\n+   |\n+LL | /     pub struct Exhaustive {\n+LL | |         foo: u8,\n+LL | |         bar: String,\n+LL | |     }\n+   | |_____^\n+   |\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL | pub struct Exhaustive {\n+LL |         foo: u8,\n+LL |         bar: String,\n+LL |     }\n+   |\n+\n+error: aborting due to 2 previous errors\n "}]}