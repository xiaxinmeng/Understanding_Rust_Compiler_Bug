{"sha": "51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjkwYTEzMTMwODZkZGM4MmM2ZjYwYjQzZGZlOTYwN2VmMGJhMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-24T12:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-24T12:29:31Z"}, "message": "Rollup merge of #56985 - oli-obk:const_check_bounds, r=RalfJung\n\nAllow testing pointers for inboundedness while forbidding dangling pointers\n\nr? @RalfJung", "tree": {"sha": "e4eec051fb938f2d5abdf4c524d715aad8757e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4eec051fb938f2d5abdf4c524d715aad8757e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcINErCRBK7hj4Ov3rIwAAdHIIAGIkFvxbnHhhILxnoDY8aBKi\nGLG7aE2x7s41Kt45nkNqpY+GSNm8g+AB6S60wzaRT2WhYdcK2ciiBOAFDifwr0zK\nZC+Gc8E+xEv4yP36Tp+aIqXWVF4IT1ZZBdkmJq3Jmqg/RTuRQWn4GHUwTZbKCQzp\nts8WcLHrziXacCM1SICv43IBmn8ZL4DF/UkcPKmbgJ7Oym83oLlaj/ytU82UUmxo\n6dvw4MWtlhXzmOF0LnG+ed/+7CSA+qSrLrsj22+L3s8sZeLhOSFgrWx4cqEQ9PFq\nMuAfevY0d8T1N8X07DLuzpa7jVNOwum3ZygK2xdzEVKoc05z1GsK/X8hhp7X0Z0=\n=gnYx\n-----END PGP SIGNATURE-----\n", "payload": "tree e4eec051fb938f2d5abdf4c524d715aad8757e2a\nparent 05f3b3cbcebb2957a7d134665aa25aa5cd73a15e\nparent c8bcac56649b21ae291e9d224c7e1ddb2f5c62a0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545654571 +0100\ncommitter GitHub <noreply@github.com> 1545654571 +0100\n\nRollup merge of #56985 - oli-obk:const_check_bounds, r=RalfJung\n\nAllow testing pointers for inboundedness while forbidding dangling pointers\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "html_url": "https://github.com/rust-lang/rust/commit/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f3b3cbcebb2957a7d134665aa25aa5cd73a15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f3b3cbcebb2957a7d134665aa25aa5cd73a15e", "html_url": "https://github.com/rust-lang/rust/commit/05f3b3cbcebb2957a7d134665aa25aa5cd73a15e"}, {"sha": "c8bcac56649b21ae291e9d224c7e1ddb2f5c62a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bcac56649b21ae291e9d224c7e1ddb2f5c62a0", "html_url": "https://github.com/rust-lang/rust/commit/c8bcac56649b21ae291e9d224c7e1ddb2f5c62a0"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "c44339775686db8f936151eccb8bfccf4e62eecb", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Scalar::Ptr(ptr) => {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n-                let align = self.check_bounds_ptr_maybe_dead(ptr)?;\n+                let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {\n@@ -297,17 +297,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     /// Check if the pointer is \"in-bounds\". Notice that a pointer pointing at the end\n     /// of an allocation (i.e., at the first *inaccessible* location) *is* considered\n     /// in-bounds!  This follows C's/LLVM's rules.\n-    /// This function also works for deallocated allocations.\n-    /// Use `.get(ptr.alloc_id)?.check_bounds_ptr(ptr)` if you want to force the allocation\n-    /// to still be live.\n     /// If you want to check bounds before doing a memory access, better first obtain\n     /// an `Allocation` and call `check_bounds`.\n-    pub fn check_bounds_ptr_maybe_dead(\n+    pub fn check_bounds_ptr(\n         &self,\n         ptr: Pointer<M::PointerTag>,\n+        liveness: InboundsCheck,\n     ) -> EvalResult<'tcx, Align> {\n-        let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id);\n-        ptr.check_in_alloc(allocation_size, InboundsCheck::MaybeDead)?;\n+        let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id, liveness)?;\n+        ptr.check_in_alloc(allocation_size, liveness)?;\n         Ok(align)\n     }\n }\n@@ -429,27 +427,37 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn get_size_and_align(&self, id: AllocId) -> (Size, Align) {\n+    /// Obtain the size and alignment of an allocation, even if that allocation has been deallocated\n+    ///\n+    /// If `liveness` is `InboundsCheck::Dead`, this function always returns `Ok`\n+    pub fn get_size_and_align(\n+        &self,\n+        id: AllocId,\n+        liveness: InboundsCheck,\n+    ) -> EvalResult<'static, (Size, Align)> {\n         if let Ok(alloc) = self.get(id) {\n-            return (Size::from_bytes(alloc.bytes.len() as u64), alloc.align);\n+            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n         }\n         // Could also be a fn ptr or extern static\n         match self.tcx.alloc_map.lock().get(id) {\n-            Some(AllocKind::Function(..)) => (Size::ZERO, Align::from_bytes(1).unwrap()),\n+            Some(AllocKind::Function(..)) => Ok((Size::ZERO, Align::from_bytes(1).unwrap())),\n             Some(AllocKind::Static(did)) => {\n                 // The only way `get` couldn't have worked here is if this is an extern static\n                 assert!(self.tcx.is_foreign_item(did));\n                 // Use size and align of the type\n                 let ty = self.tcx.type_of(did);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                (layout.size, layout.align.abi)\n-            }\n-            _ => {\n-                // Must be a deallocated pointer\n-                *self.dead_alloc_map.get(&id).expect(\n-                    \"allocation missing in dead_alloc_map\"\n-                )\n+                Ok((layout.size, layout.align.abi))\n             }\n+            _ => match liveness {\n+                InboundsCheck::MaybeDead => {\n+                    // Must be a deallocated pointer\n+                    Ok(*self.dead_alloc_map.get(&id).expect(\n+                        \"allocation missing in dead_alloc_map\"\n+                    ))\n+                },\n+                InboundsCheck::Live => err!(DanglingPointerDeref),\n+            },\n         }\n     }\n "}, {"sha": "2fb9939c2ab54fdc61c2a469d3d6b75701e72c74", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f90a1313086ddc82c6f60b43dfe9607ef0ba2d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=51f90a1313086ddc82c6f60b43dfe9607ef0ba2d", "patch": "@@ -17,7 +17,7 @@ use rustc::mir;\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n \n use rustc::mir::interpret::{\n-    GlobalId, AllocId,\n+    GlobalId, AllocId, InboundsCheck,\n     ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind,\n };\n@@ -647,7 +647,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n-                            self.memory.check_bounds_ptr_maybe_dead(ptr).is_ok();\n+                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));\n                         }"}]}