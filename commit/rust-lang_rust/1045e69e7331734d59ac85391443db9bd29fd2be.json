{"sha": "1045e69e7331734d59ac85391443db9bd29fd2be", "node_id": "C_kwDOAAsO6NoAKDEwNDVlNjllNzMzMTczNGQ1OWFjODUzOTE0NDNkYjliZDI5ZmQyYmU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T10:09:52Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "macros: allow subdiagnostic-kind-less variants\n\nSometimes it is convenient to return a subdiagnostic enum where one or\nmore of the variants don't add anything to the diagnostic.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "fe3af45456b877dbdf4225a9ebd308b364d56c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3af45456b877dbdf4225a9ebd308b364d56c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1045e69e7331734d59ac85391443db9bd29fd2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1045e69e7331734d59ac85391443db9bd29fd2be", "html_url": "https://github.com/rust-lang/rust/commit/1045e69e7331734d59ac85391443db9bd29fd2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1045e69e7331734d59ac85391443db9bd29fd2be/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbaf2769634ac1800449a6d2d818615cef7eace", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbaf2769634ac1800449a6d2d818615cef7eace", "html_url": "https://github.com/rust-lang/rust/commit/7fbaf2769634ac1800449a6d2d818615cef7eace"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "0b82cb5097eb344e058fb4670399711afabfc6da", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1045e69e7331734d59ac85391443db9bd29fd2be/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1045e69e7331734d59ac85391443db9bd29fd2be/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=1045e69e7331734d59ac85391443db9bd29fd2be", "patch": "@@ -41,7 +41,8 @@ impl SubdiagnosticDeriveBuilder {\n                 }\n             }\n \n-            if matches!(ast.data, syn::Data::Enum(..)) {\n+            let is_enum = matches!(ast.data, syn::Data::Enum(..));\n+            if is_enum {\n                 for attr in &ast.attrs {\n                     // Always allow documentation comments.\n                     if is_doc_comment(attr) {\n@@ -67,6 +68,7 @@ impl SubdiagnosticDeriveBuilder {\n                     span_field: None,\n                     applicability: None,\n                     has_suggestion_parts: false,\n+                    is_enum,\n                 };\n                 builder.into_tokens().unwrap_or_else(|v| v.to_compile_error())\n             });\n@@ -127,6 +129,9 @@ struct SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n     /// during finalization if still `false`.\n     has_suggestion_parts: bool,\n+\n+    /// Set to true when this variant is an enum variant rather than just the body of a struct.\n+    is_enum: bool,\n }\n \n impl<'parent, 'a> HasFieldMap for SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n@@ -457,10 +462,16 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n         let kind_slugs = self.identify_kind()?;\n         if kind_slugs.is_empty() {\n-            throw_span_err!(\n-                self.variant.ast().ident.span().unwrap(),\n-                \"subdiagnostic kind not specified\"\n-            );\n+            if self.is_enum {\n+                // It's okay for a variant to not be a subdiagnostic at all..\n+                return Ok(quote! {});\n+            } else {\n+                // ..but structs should always be _something_.\n+                throw_span_err!(\n+                    self.variant.ast().ident.span().unwrap(),\n+                    \"subdiagnostic kind not specified\"\n+                );\n+            }\n         };\n \n         let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();"}, {"sha": "2fe93d46d0ac073357b34016c84827de76385d49", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1045e69e7331734d59ac85391443db9bd29fd2be/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1045e69e7331734d59ac85391443db9bd29fd2be/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=1045e69e7331734d59ac85391443db9bd29fd2be", "patch": "@@ -237,7 +237,6 @@ enum V {\n         var: String,\n     },\n     B {\n-    //~^ ERROR subdiagnostic kind not specified\n         #[primary_span]\n         span: Span,\n         var: String,"}, {"sha": "1173d24248bc4480f8436d3ebd8e6395051fc7d4", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1045e69e7331734d59ac85391443db9bd29fd2be/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1045e69e7331734d59ac85391443db9bd29fd2be/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=1045e69e7331734d59ac85391443db9bd29fd2be", "patch": "@@ -134,20 +134,14 @@ error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:239:5\n-   |\n-LL |     B {\n-   |     ^\n-\n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:251:5\n+  --> $DIR/subdiagnostic-derive.rs:250:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:248:1\n+  --> $DIR/subdiagnostic-derive.rs:247:1\n    |\n LL | / #[label(parser::add_paren)]\n LL | |\n@@ -159,35 +153,35 @@ LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:261:5\n+  --> $DIR/subdiagnostic-derive.rs:260:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:271:5\n+  --> $DIR/subdiagnostic-derive.rs:270:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:282:5\n+  --> $DIR/subdiagnostic-derive.rs:281:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:293:5\n+  --> $DIR/subdiagnostic-derive.rs:292:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:309:1\n+  --> $DIR/subdiagnostic-derive.rs:308:1\n    |\n LL | / union AC {\n LL | |\n@@ -197,75 +191,75 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:324:28\n+  --> $DIR/subdiagnostic-derive.rs:323:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:337:5\n+  --> $DIR/subdiagnostic-derive.rs:336:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:334:5\n+  --> $DIR/subdiagnostic-derive.rs:333:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:343:8\n+  --> $DIR/subdiagnostic-derive.rs:342:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:380:47\n+  --> $DIR/subdiagnostic-derive.rs:379:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:380:33\n+  --> $DIR/subdiagnostic-derive.rs:379:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:398:5\n+  --> $DIR/subdiagnostic-derive.rs:397:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:395:5\n+  --> $DIR/subdiagnostic-derive.rs:394:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:408:5\n+  --> $DIR/subdiagnostic-derive.rs:407:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:421:1\n+  --> $DIR/subdiagnostic-derive.rs:420:1\n    |\n LL | #[suggestion(parser::add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:431:46\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n    |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:449:1\n+  --> $DIR/subdiagnostic-derive.rs:448:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -275,41 +269,41 @@ LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:463:1\n+  --> $DIR/subdiagnostic-derive.rs:462:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:483:39\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:502:43\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:525:5\n+  --> $DIR/subdiagnostic-derive.rs:524:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:528:5\n+  --> $DIR/subdiagnostic-derive.rs:527:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:522:1\n+  --> $DIR/subdiagnostic-derive.rs:521:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -321,15 +315,15 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:537:43\n+  --> $DIR/subdiagnostic-derive.rs:536:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^\n    |\n    = help: only `applicability` is a valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:537:1\n+  --> $DIR/subdiagnostic-derive.rs:536:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n@@ -340,27 +334,27 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:547:5\n+  --> $DIR/subdiagnostic-derive.rs:546:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:555:5\n+  --> $DIR/subdiagnostic-derive.rs:554:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:564:5\n+  --> $DIR/subdiagnostic-derive.rs:563:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:561:1\n+  --> $DIR/subdiagnostic-derive.rs:560:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n@@ -372,51 +366,51 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:572:5\n+  --> $DIR/subdiagnostic-derive.rs:571:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:575:5\n+  --> $DIR/subdiagnostic-derive.rs:574:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:578:23\n+  --> $DIR/subdiagnostic-derive.rs:577:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:581:5\n+  --> $DIR/subdiagnostic-derive.rs:580:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:584:5\n+  --> $DIR/subdiagnostic-derive.rs:583:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:592:37\n+  --> $DIR/subdiagnostic-derive.rs:591:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:592:23\n+  --> $DIR/subdiagnostic-derive.rs:591:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:621:5\n+  --> $DIR/subdiagnostic-derive.rs:620:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n@@ -458,19 +452,19 @@ LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:271:7\n+  --> $DIR/subdiagnostic-derive.rs:270:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:282:7\n+  --> $DIR/subdiagnostic-derive.rs:281:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:293:7\n+  --> $DIR/subdiagnostic-derive.rs:292:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n@@ -481,6 +475,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 68 previous errors\n+error: aborting due to 67 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}