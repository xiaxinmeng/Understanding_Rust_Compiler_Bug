{"sha": "2d236695aa5726525ef7320bdbaa418f23d0aff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjM2Njk1YWE1NzI2NTI1ZWY3MzIwYmRiYWE0MThmMjNkMGFmZjk=", "commit": {"author": {"name": "Ryan Scheel", "email": "ryan.havvy@gmail.com", "date": "2012-07-14T23:17:22Z"}, "committer": {"name": "Ryan Scheel", "email": "ryan.havvy@gmail.com", "date": "2012-07-14T23:17:22Z"}, "message": "Use of the type  in interfaces", "tree": {"sha": "eb6dfcecb3141bbc6e9e6be30baecf5d96f59a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6dfcecb3141bbc6e9e6be30baecf5d96f59a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d236695aa5726525ef7320bdbaa418f23d0aff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d236695aa5726525ef7320bdbaa418f23d0aff9", "html_url": "https://github.com/rust-lang/rust/commit/2d236695aa5726525ef7320bdbaa418f23d0aff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d236695aa5726525ef7320bdbaa418f23d0aff9/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b23c3400e039e408a40f633bfae8aa39a17c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b23c3400e039e408a40f633bfae8aa39a17c20", "html_url": "https://github.com/rust-lang/rust/commit/c5b23c3400e039e408a40f633bfae8aa39a17c20"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "e481e4daf0217fc6f950598e8b8c4c7428a51447", "filename": "doc/tutorial.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d236695aa5726525ef7320bdbaa418f23d0aff9/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d236695aa5726525ef7320bdbaa418f23d0aff9/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2d236695aa5726525ef7320bdbaa418f23d0aff9", "patch": "@@ -2508,6 +2508,18 @@ Note that functions do not explicitly have the type parameters that\n are provided by the iface. It will cause a compile-time error if you\n include them in the iface or impl.\n \n+## Use of the type `self` in interfaces\n+\n+Interfaces may use `self` as a type where the implementation uses its\n+own type. This defines an interface for testing equality of a type with\n+itself:\n+\n+~~~~\n+iface eq {\n+  fn equals(other: self) -> bool;\n+}\n+~~~~\n+\n ## Casting to an interface type\n \n The above allows us to define functions that polymorphically act on"}]}