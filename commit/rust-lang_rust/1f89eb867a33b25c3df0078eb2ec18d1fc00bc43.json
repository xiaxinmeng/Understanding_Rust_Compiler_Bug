{"sha": "1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODllYjg2N2EzM2IyNWMzZGYwMDc4ZWIyZWMxOGQxZmMwMGJjNDM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-14T01:00:58Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-16T01:12:34Z"}, "message": "tuple: remove obsolete ExtendedTupleOps\n\nreplaced by iterators (generic composable `map` and `zip` adaptors)", "tree": {"sha": "bb720cd8083e0aa69aadb88d61abb681c28887cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb720cd8083e0aa69aadb88d61abb681c28887cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "html_url": "https://github.com/rust-lang/rust/commit/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a21f22767596fc80fa55eade9824290d14cd85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a21f22767596fc80fa55eade9824290d14cd85a", "html_url": "https://github.com/rust-lang/rust/commit/6a21f22767596fc80fa55eade9824290d14cd85a"}], "stats": {"total": 54, "additions": 1, "deletions": 53}, "files": [{"sha": "63f73002009312c21ccf7204f4c4aebba73bf72a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "patch": "@@ -69,7 +69,7 @@ pub use str::{Str, StrVector, StrSlice, OwnedStr};\n pub use from_str::FromStr;\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n-pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n+pub use tuple::{CopyableTuple, ImmutableTuple};\n pub use tuple::{CloneableTuple1, ImmutableTuple1};\n pub use tuple::{CloneableTuple2, CloneableTuple3, CloneableTuple4, CloneableTuple5};\n pub use tuple::{CloneableTuple6, CloneableTuple7, CloneableTuple8, CloneableTuple9};"}, {"sha": "12073a1f4f0951e4db9d64ba54de5279a5bed565", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89eb867a33b25c3df0078eb2ec18d1fc00bc43/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=1f89eb867a33b25c3df0078eb2ec18d1fc00bc43", "patch": "@@ -13,9 +13,6 @@\n #[allow(missing_doc)];\n \n use clone::Clone;\n-use vec;\n-use vec::ImmutableVector;\n-use iterator::Iterator;\n \n pub use self::inner::*;\n \n@@ -79,55 +76,6 @@ impl<T, U> ImmutableTuple<T, U> for (T, U) {\n     }\n }\n \n-pub trait ExtendedTupleOps<A,B> {\n-    fn zip(&self) -> ~[(A, B)];\n-    fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C];\n-}\n-\n-impl<'self,\n-     A:Clone,\n-     B:Clone>\n-     ExtendedTupleOps<A,B> for\n-     (&'self [A], &'self [B]) {\n-    #[inline]\n-    fn zip(&self) -> ~[(A, B)] {\n-        match *self {\n-            (ref a, ref b) => {\n-                vec::zip_slice(*a, *b)\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n-        match *self {\n-            (ref a, ref b) => {\n-                a.iter().zip(b.iter()).map(|(aa, bb)| f(aa, bb)).collect()\n-            }\n-        }\n-    }\n-}\n-\n-impl<A:Clone, B:Clone> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n-    #[inline]\n-    fn zip(&self) -> ~[(A, B)] {\n-        match *self {\n-            (ref a, ref b) => {\n-                vec::zip_slice(*a, *b)\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n-        match *self {\n-            (ref a, ref b) => {\n-                a.iter().zip(b.iter()).map(|(aa, bb)| f(aa, bb)).collect()\n-            }\n-        }\n-    }\n-}\n-\n // macro for implementing n-ary tuple functions and operations\n \n macro_rules! tuple_impls {"}]}