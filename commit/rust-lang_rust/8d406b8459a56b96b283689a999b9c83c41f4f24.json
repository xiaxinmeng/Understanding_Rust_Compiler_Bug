{"sha": "8d406b8459a56b96b283689a999b9c83c41f4f24", "node_id": "C_kwDOAAsO6NoAKDhkNDA2Yjg0NTlhNTZiOTZiMjgzNjg5YTk5OWI5YzgzYzQxZjRmMjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-29T13:44:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-29T13:49:20Z"}, "message": "Add a test for issue 110457", "tree": {"sha": "7f4d24c04c17a189ee88b33ca17d9b7d6fe06de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4d24c04c17a189ee88b33ca17d9b7d6fe06de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d406b8459a56b96b283689a999b9c83c41f4f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d406b8459a56b96b283689a999b9c83c41f4f24", "html_url": "https://github.com/rust-lang/rust/commit/8d406b8459a56b96b283689a999b9c83c41f4f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d406b8459a56b96b283689a999b9c83c41f4f24/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ff5afeb8717c096a4f153896e0c3856a3934ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ff5afeb8717c096a4f153896e0c3856a3934ad", "html_url": "https://github.com/rust-lang/rust/commit/99ff5afeb8717c096a4f153896e0c3856a3934ad"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "e7d91235e73563bbbdaf6f0841c80e48e380a1d6", "filename": "tests/incremental/issue-110457-same-span-closures/auxiliary/egui_inspect_derive.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8d406b8459a56b96b283689a999b9c83c41f4f24/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d406b8459a56b96b283689a999b9c83c41f4f24/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs?ref=8d406b8459a56b96b283689a999b9c83c41f4f24", "patch": "@@ -0,0 +1,90 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn expand(_: TokenStream) -> TokenStream {\n+    // Hand expansion/rewriting of\n+    // ```\n+    // quote! {\n+    //     output_mut(|o| o.copied_text = \"\".into());\n+    //     output_mut(|o| o.copied_text = format!(\"{:?}\", self.tile_db));\n+    // }.into()\n+    // ```\n+    stream([\n+        ident(\"output_mut\"),\n+        group(\n+            Delimiter::Parenthesis,\n+            [\n+                or(),\n+                ident(\"o\"),\n+                or(),\n+                ident(\"o\"),\n+                dot(),\n+                ident(\"copied_text\"),\n+                eq(),\n+                string(\"\"),\n+                dot(),\n+                ident(\"into\"),\n+                group(Delimiter::Parenthesis, []),\n+            ],\n+        ),\n+        semi(),\n+        ident(\"output_mut\"),\n+        group(\n+            Delimiter::Parenthesis,\n+            [\n+                or(),\n+                ident(\"o\"),\n+                or(),\n+                ident(\"o\"),\n+                dot(),\n+                ident(\"copied_text\"),\n+                eq(),\n+                ident(\"format\"),\n+                bang(),\n+                group(\n+                    Delimiter::Parenthesis,\n+                    [string(\"{:?}\"), comma(), ident(\"self\"), dot(), ident(\"tile_db\")],\n+                ),\n+            ],\n+        ),\n+        semi(),\n+    ])\n+}\n+\n+fn stream(s: impl IntoIterator<Item = TokenTree>) -> TokenStream {\n+    s.into_iter().collect()\n+}\n+\n+fn ident(i: &str) -> TokenTree {\n+    TokenTree::Ident(Ident::new(i, Span::call_site()))\n+}\n+fn group(d: Delimiter, s: impl IntoIterator<Item = TokenTree>) -> TokenTree {\n+    TokenTree::Group(Group::new(d, s.into_iter().collect()))\n+}\n+fn semi() -> TokenTree {\n+    TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+}\n+fn or() -> TokenTree {\n+    TokenTree::Punct(Punct::new('|', Spacing::Alone))\n+}\n+fn dot() -> TokenTree {\n+    TokenTree::Punct(Punct::new('.', Spacing::Alone))\n+}\n+fn eq() -> TokenTree {\n+    TokenTree::Punct(Punct::new('=', Spacing::Alone))\n+}\n+fn bang() -> TokenTree {\n+    TokenTree::Punct(Punct::new('!', Spacing::Alone))\n+}\n+fn comma() -> TokenTree {\n+    TokenTree::Punct(Punct::new(',', Spacing::Alone))\n+}\n+fn string(s: &str) -> TokenTree {\n+    TokenTree::Literal(Literal::string(s))\n+}"}, {"sha": "b44fda3d36a292e510abd47b6f0041c673cf0227", "filename": "tests/incremental/issue-110457-same-span-closures/main.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8d406b8459a56b96b283689a999b9c83c41f4f24/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d406b8459a56b96b283689a999b9c83c41f4f24/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs?ref=8d406b8459a56b96b283689a999b9c83c41f4f24", "patch": "@@ -0,0 +1,47 @@\n+// aux-build: egui_inspect_derive.rs\n+// revisions: cpass1 cpass2\n+\n+extern crate egui_inspect_derive;\n+\n+pub struct TileDef {\n+    pub layer: (),\n+    #[cfg(cpass2)]\n+    pub blend_graphic: String,\n+}\n+\n+pub(crate) struct GameState {\n+    pub(crate) tile_db: TileDb,\n+}\n+\n+impl GameState {\n+    fn inspect_mut(&mut self) {\n+        egui_inspect_derive::expand! {}\n+    }\n+}\n+\n+fn new() -> GameState {\n+    loop {}\n+}\n+\n+fn main() {\n+    let mut app = new();\n+    app.inspect_mut();\n+}\n+// this is actually used\n+pub struct TileDb {\n+    unknown_bg: TileDef,\n+}\n+\n+impl std::fmt::Debug for TileDb {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        loop {}\n+    }\n+}\n+\n+pub struct PlatformOutput {\n+    pub copied_text: String,\n+}\n+\n+pub fn output_mut<R>(writer: impl FnOnce(&mut PlatformOutput) -> R) -> R {\n+    loop {}\n+}"}]}