{"sha": "94ad7e881dbf28784e44198dcf7dd865661b5424", "node_id": "C_kwDOAAsO6NoAKDk0YWQ3ZTg4MWRiZjI4Nzg0ZTQ0MTk4ZGNmN2RkODY1NjYxYjU0MjQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T15:45:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:19:31Z"}, "message": "Coalesce adjacent literal pieces in expand_format_args.", "tree": {"sha": "5f0e7c010b3ad0b36a741eb4eb74f78c2edf80b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0e7c010b3ad0b36a741eb4eb74f78c2edf80b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ad7e881dbf28784e44198dcf7dd865661b5424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad7e881dbf28784e44198dcf7dd865661b5424", "html_url": "https://github.com/rust-lang/rust/commit/94ad7e881dbf28784e44198dcf7dd865661b5424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ad7e881dbf28784e44198dcf7dd865661b5424/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a769b30a9345799a496e800e6907d75af36cfe29", "url": "https://api.github.com/repos/rust-lang/rust/commits/a769b30a9345799a496e800e6907d75af36cfe29", "html_url": "https://github.com/rust-lang/rust/commit/a769b30a9345799a496e800e6907d75af36cfe29"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "63e74261d7c5322e7515891fa86890699d7bcb9f", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94ad7e881dbf28784e44198dcf7dd865661b5424/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad7e881dbf28784e44198dcf7dd865661b5424/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=94ad7e881dbf28784e44198dcf7dd865661b5424", "patch": "@@ -75,23 +75,9 @@ fn flatten_format_args(fmt: &FormatArgs) -> Cow<'_, FormatArgs> {\n \n             // Now merge the placeholders:\n \n-            let mut rest = fmt.template.split_off(i + 1);\n+            let rest = fmt.template.split_off(i + 1);\n             fmt.template.pop(); // remove the placeholder for the nested fmt args.\n \n-            // Coalesce adjacent literals.\n-            if let Some(FormatArgsPiece::Literal(s1)) = fmt.template.last() &&\n-               let Some(FormatArgsPiece::Literal(s2)) = fmt2.template.first_mut()\n-            {\n-                *s2 = Symbol::intern(&(s1.as_str().to_owned() + s2.as_str()));\n-                fmt.template.pop();\n-            }\n-            if let Some(FormatArgsPiece::Literal(s1)) = fmt2.template.last() &&\n-               let Some(FormatArgsPiece::Literal(s2)) = rest.first_mut()\n-            {\n-                *s2 = Symbol::intern(&(s1.as_str().to_owned() + s2.as_str()));\n-                fmt2.template.pop();\n-            }\n-\n             for piece in fmt2.template {\n                 match piece {\n                     FormatArgsPiece::Literal(s) => fmt.template.push(FormatArgsPiece::Literal(s)),\n@@ -288,10 +274,24 @@ fn expand_format_args<'hir>(\n     macsp: Span,\n     fmt: &FormatArgs,\n ) -> hir::ExprKind<'hir> {\n+    let mut incomplete_lit = String::new();\n     let lit_pieces =\n         ctx.arena.alloc_from_iter(fmt.template.iter().enumerate().filter_map(|(i, piece)| {\n             match piece {\n-                &FormatArgsPiece::Literal(s) => Some(ctx.expr_str(fmt.span, s)),\n+                &FormatArgsPiece::Literal(s) => {\n+                    // Coalesce adjacent literal pieces.\n+                    if let Some(FormatArgsPiece::Literal(_)) = fmt.template.get(i + 1) {\n+                        incomplete_lit.push_str(s.as_str());\n+                        None\n+                    } else if !incomplete_lit.is_empty() {\n+                        incomplete_lit.push_str(s.as_str());\n+                        let s = Symbol::intern(&incomplete_lit);\n+                        incomplete_lit.clear();\n+                        Some(ctx.expr_str(fmt.span, s))\n+                    } else {\n+                        Some(ctx.expr_str(fmt.span, s))\n+                    }\n+                }\n                 &FormatArgsPiece::Placeholder(_) => {\n                     // Inject empty string before placeholders when not already preceded by a literal piece.\n                     if i == 0 || matches!(fmt.template[i - 1], FormatArgsPiece::Placeholder(_)) {"}]}