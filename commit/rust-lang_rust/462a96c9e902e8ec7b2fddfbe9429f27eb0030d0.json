{"sha": "462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "node_id": "C_kwDOAAsO6NoAKDQ2MmE5NmM5ZTkwMmU4ZWM3YjJmZGRmYmU5NDI5ZjI3ZWIwMDMwZDA", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2023-05-25T00:15:50Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2023-05-25T00:15:50Z"}, "message": "[RFC-2011] Expand more expressions", "tree": {"sha": "7c031b49287c60de43a4e53ae0e743797ae5ab69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c031b49287c60de43a4e53ae0e743797ae5ab69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "html_url": "https://github.com/rust-lang/rust/commit/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c373194cb6d882dc455a588bcc29c92a96b50252", "url": "https://api.github.com/repos/rust-lang/rust/commits/c373194cb6d882dc455a588bcc29c92a96b50252", "html_url": "https://github.com/rust-lang/rust/commit/c373194cb6d882dc455a588bcc29c92a96b50252"}], "stats": {"total": 115, "additions": 29, "deletions": 86}, "files": [{"sha": "b619e80e15f3c36041d1645c9274ae86b209b8ec", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -233,10 +233,19 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             ExprKind::Cast(local_expr, _) => {\n                 self.manage_cond_expr(local_expr);\n             }\n+            ExprKind::If(local_expr, _, _) => {\n+                self.manage_cond_expr(local_expr);\n+            }\n             ExprKind::Index(prefix, suffix) => {\n                 self.manage_cond_expr(prefix);\n                 self.manage_cond_expr(suffix);\n             }\n+            ExprKind::Let(_, local_expr, _) => {\n+                self.manage_cond_expr(local_expr);\n+            }\n+            ExprKind::Match(local_expr, _) => {\n+                self.manage_cond_expr(local_expr);\n+            }\n             ExprKind::MethodCall(call) => {\n                 for arg in &mut call.args {\n                     self.manage_cond_expr(arg);\n@@ -295,17 +304,14 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Continue(_)\n             | ExprKind::Err\n             | ExprKind::Field(_, _)\n-            | ExprKind::FormatArgs(_)\n             | ExprKind::ForLoop(_, _, _, _)\n-            | ExprKind::If(_, _, _)\n+            | ExprKind::FormatArgs(_)\n             | ExprKind::IncludedBytes(..)\n             | ExprKind::InlineAsm(_)\n-            | ExprKind::OffsetOf(_, _)\n-            | ExprKind::Let(_, _, _)\n             | ExprKind::Lit(_)\n             | ExprKind::Loop(_, _, _)\n             | ExprKind::MacCall(_)\n-            | ExprKind::Match(_, _)\n+            | ExprKind::OffsetOf(_, _)\n             | ExprKind::Path(_, _)\n             | ExprKind::Ret(_)\n             | ExprKind::Try(_)"}, {"sha": "c4134dbcd2507681cb22645b9c3a8e7054b25482", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -1427,7 +1427,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     #[rustc_diagnostic_item = \"assert_macro\"]\n-    #[allow_internal_unstable(core_panic, edition_panic)]\n+    #[allow_internal_unstable(core_panic, edition_panic, generic_assert_internals)]\n     macro_rules! assert {\n         ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};"}, {"sha": "b1db05afd080ba8a738f07e9df1e5c0aa3957393", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/all-expr-kinds.rs", "status": "modified", "additions": 11, "deletions": 74, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -5,7 +5,7 @@\n // needs-unwind Asserting on contents of error message\n \n #![allow(path_statements, unused_allocation)]\n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n macro_rules! test {\n   (\n@@ -51,6 +51,7 @@ macro_rules! tests {\n \n const FOO: Foo = Foo { bar: 1 };\n \n+\n #[derive(Clone, Copy, Debug, PartialEq)]\n struct Foo {\n   bar: i32\n@@ -83,9 +84,18 @@ fn main() {\n     // cast\n     [ elem as i32 == 3 ] => \"Assertion failed: elem as i32 == 3\\nWith captures:\\n  elem = 1\\n\"\n \n+    // if\n+    [ if elem == 3 { true } else { false } ] => \"Assertion failed: if elem == 3 { true } else { false }\\nWith captures:\\n  elem = 1\\n\"\n+\n     // index\n     [ [1i32, 1][elem as usize] == 3 ] => \"Assertion failed: [1i32, 1][elem as usize] == 3\\nWith captures:\\n  elem = 1\\n\"\n \n+    // let\n+    [ if let 3 = elem { true } else { false } ] => \"Assertion failed: if let 3 = elem { true } else { false }\\nWith captures:\\n  elem = 1\\n\"\n+\n+    // match\n+    [ match elem { 3 => true, _ => false, } ] => \"Assertion failed: match elem { 3 => true, _ => false, }\\nWith captures:\\n  elem = 1\\n\"\n+\n     // method call\n     [ FOO.add(elem, elem) == 3 ] => \"Assertion failed: FOO.add(elem, elem) == 3\\nWith captures:\\n  elem = 1\\n\"\n \n@@ -107,77 +117,4 @@ fn main() {\n     // unary\n     [ -elem == -3 ] => \"Assertion failed: -elem == -3\\nWith captures:\\n  elem = 1\\n\"\n   );\n-\n-  // ***** Disallowed *****\n-\n-  tests!(\n-    let mut elem = 1i32;\n-\n-    // assign\n-    [ { let local = elem; local } == 3 ] => \"Assertion failed: { let local = elem; local } == 3\"\n-\n-    // assign op\n-    [ { elem += 1; elem } == 3 ] => \"Assertion failed: { elem += 1; elem } == 3\"\n-\n-    // async\n-    [ { let _ = async { elem }; elem } == 3 ] => \"Assertion failed: { let _ = async { elem }; elem } == 3\"\n-\n-    // await\n-\n-    // block\n-    [ { elem } == 3 ] => \"Assertion failed: { elem } == 3\"\n-\n-    // break\n-    [ loop { break elem; } ==  3 ] => \"Assertion failed: loop { break elem; } == 3\"\n-\n-    // closure\n-    [(|| elem)() ==  3 ] => \"Assertion failed: (|| elem)() == 3\"\n-\n-    // const block\n-\n-    // continue\n-\n-    // err\n-\n-    // field\n-    [ FOO.bar ==  3 ] => \"Assertion failed: FOO.bar == 3\"\n-\n-    // for loop\n-    [ { for _ in 0..elem { elem; } elem } ==  3 ] => \"Assertion failed: { for _ in 0..elem { elem; } elem } == 3\"\n-\n-    // if\n-    [ if true { elem } else { elem } == 3 ] => \"Assertion failed: if true { elem } else { elem } == 3\"\n-\n-    // inline asm\n-\n-    // let\n-    [ if let true = true { elem } else { elem } == 3 ] => \"Assertion failed: if let true = true { elem } else { elem } == 3\"\n-\n-    // lit\n-\n-    // loop\n-    [ loop { elem; break elem; } == 3 ] => \"Assertion failed: loop { elem; break elem; } == 3\"\n-\n-    // mac call\n-\n-    // match\n-    [ match elem { _ => elem } == 3 ] => \"Assertion failed: (match elem { _ => elem, }) == 3\"\n-\n-    // ret\n-    [ (|| { return elem; })() == 3 ] => \"Assertion failed: (|| { return elem; })() == 3\"\n-\n-    // try\n-    [ (|| { Some(Some(elem)?) })() == Some(3) ] => \"Assertion failed: (|| { Some(Some(elem)?) })() == Some(3)\"\n-\n-    // try block\n-\n-    // underscore\n-\n-    // while\n-    [ { while false { elem; break; } elem } == 3 ] => \"Assertion failed: { while false { elem; break; } elem } == 3\"\n-\n-    // yeet\n-\n-    // yield\n-  );\n }"}, {"sha": "fcf4f367d042865bf43aabbd883aa1b5089a12dd", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/all-not-available-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -4,7 +4,7 @@\n // run-pass\n // needs-unwind Asserting on contents of error message\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n extern crate common;\n "}, {"sha": "c8408d16fbb0d5bab35d1f007c1073f00e17000d", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/assert-with-custom-errors-does-not-create-unnecessary-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-with-custom-errors-does-not-create-unnecessary-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-with-custom-errors-does-not-create-unnecessary-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-with-custom-errors-does-not-create-unnecessary-code.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --test\n // run-pass\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n #[should_panic(expected = \"Custom user message\")]\n #[test]"}, {"sha": "0e3c14a5770eaa021c44cb2ed5aef7eab43d3a80", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n // needs-unwind Asserting on contents of error message\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n extern crate common;\n "}, {"sha": "0d2518dc25317a694590aa23b19ec4d4e7cedb84", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -2,7 +2,7 @@\n // ignore-tidy-linelength\n // run-pass\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n use std::fmt::{Debug, Formatter};\n "}, {"sha": "57b79a56b7bfbf3023cf881dc7ad0665466807d2", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.rs?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // compile-flags: -Z unpretty=expanded\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n \n fn arbitrary_consuming_method_for_demonstration_purposes() {\n     let elem = 1i32;"}, {"sha": "66321bc35f01c59464e15fab6b9859989f98a762", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/462a96c9e902e8ec7b2fddfbe9429f27eb0030d0/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout?ref=462a96c9e902e8ec7b2fddfbe9429f27eb0030d0", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n // compile-flags: -Z unpretty=expanded\n \n-#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]"}]}