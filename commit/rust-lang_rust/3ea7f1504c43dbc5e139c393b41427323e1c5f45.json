{"sha": "3ea7f1504c43dbc5e139c393b41427323e1c5f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYTdmMTUwNGM0M2RiYzVlMTM5YzM5M2I0MTQyNzMyM2UxYzVmNDU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-18T18:45:32Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:34Z"}, "message": "More doc-comments for pointer metadata APIs", "tree": {"sha": "2742de853d8f2695960626b15b88c887c6990060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2742de853d8f2695960626b15b88c887c6990060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ea7f1504c43dbc5e139c393b41427323e1c5f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea7f1504c43dbc5e139c393b41427323e1c5f45", "html_url": "https://github.com/rust-lang/rust/commit/3ea7f1504c43dbc5e139c393b41427323e1c5f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ea7f1504c43dbc5e139c393b41427323e1c5f45/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787f4de6ab3150ea56e8a7cc872b60d55b0db27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/787f4de6ab3150ea56e8a7cc872b60d55b0db27f", "html_url": "https://github.com/rust-lang/rust/commit/787f4de6ab3150ea56e8a7cc872b60d55b0db27f"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "f89e891cb8657a84bf3081d0994e2d3d8e754953", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3ea7f1504c43dbc5e139c393b41427323e1c5f45/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea7f1504c43dbc5e139c393b41427323e1c5f45/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=3ea7f1504c43dbc5e139c393b41427323e1c5f45", "patch": "@@ -3,7 +3,52 @@\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n \n-/// FIXME docs\n+/// Provides the pointer metadata type of any pointed-to type.\n+///\n+/// # Pointer metadata\n+///\n+/// Raw pointer types and reference types in Rust can be thought of as made of two parts:\n+/// a data pointer that contains the memory address of the value, and some metadata.\n+///\n+/// For statically-sized types (that implement the `Sized` traits)\n+/// as well as for `extern` types,\n+/// pointers are said to be \u201cthin\u201d: metadata is zero-sized and its type is `()`.\n+///\n+/// Pointers to [dynamically-sized types][dst] are said to be \u201cwide\u201d or \u201cfat\u201d,\n+/// they have non-zero-sized metadata:\n+///\n+/// * For structs whose last field is a DST, metadata is the metadata for the last field\n+/// * For the `str` type, metadata is the length in bytes as `usize`\n+/// * For slice types like `[T]`, metadata is the length in items as `usize`\n+/// * For trait objects like `dyn SomeTrait`, metadata is [`DynMetadata<Self>`][DynMetadata]\n+///   (e.g. `DynMetadata<dyn SomeTrait>`)\n+///\n+/// In the future, the Rust language may gain new kinds of types\n+/// that have different pointer metadata.\n+///\n+/// [dst]: https://doc.rust-lang.org/nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n+///\n+///\n+/// # The `Pointee` trait\n+///\n+/// The point of this trait is its `Metadata` associated type,\n+/// which is `()` or `usize` or `DynMetadata<_>` as described above.\n+/// It is automatically implemented for every type.\n+/// It can be assumed to be implemented in a generic context, even without a corresponding bound.\n+///\n+///\n+/// # Usage\n+///\n+/// Raw pointers can be decomposed into the data address and metadata components\n+/// with their [`to_raw_parts`] method.\n+///\n+/// Alternatively, metadata alone can be extracted with the [`metadata`] function.\n+/// A reference can be passed to [`metadata`] and implicitly coerced.\n+///\n+/// A (possibly-wide) pointer can be put back together from its address and metadata\n+/// with [`from_raw_parts`] or [`from_raw_parts_mut`].\n+///\n+/// [`to_raw_parts`]: <*const _>::to_raw_parts\n #[lang = \"pointee_trait\"]\n pub trait Pointee {\n     /// The type for metadata in pointers and references to `Self`.\n@@ -14,7 +59,11 @@ pub trait Pointee {\n     type Metadata: Copy + Send + Sync + Ord + Hash + Unpin;\n }\n \n-/// Pointers to types implementing this trait alias are \u201cthin\u201d\n+/// Pointers to types implementing this trait alias are \u201cthin\u201d.\n+///\n+/// This includes statically-`Sized` types and `extern` types.\n+///\n+/// # Example\n ///\n /// ```rust\n /// #![feature(ptr_metadata)]\n@@ -28,6 +77,17 @@ pub trait Pointee {\n pub trait Thin = Pointee<Metadata = ()>;\n \n /// Extract the metadata component of a pointer.\n+///\n+/// Values of type `*mut T`, `&T`, or `&mut T` can be passed directly to this function\n+/// as they implicitly coerce to `*const T`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(ptr_metadata)]\n+///\n+/// assert_eq!(std::ptr::metadata(\"foo\"), 3_usize);\n+/// ```\n #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n #[inline]\n pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n@@ -37,7 +97,13 @@ pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }\n }\n \n-/// Forms a raw pointer from a data address and metadata.\n+/// Forms a (possibly-wide) raw pointer from a data address and metadata.\n+///\n+/// This function is safe but the returned pointer is not necessarily safe to dereference.\n+/// For slices, see the documentation of [`slice::from_raw_parts`] for safety requirements.\n+/// For trait objects, the metadata must come from a pointer to the same underlying ereased type.\n+///\n+/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts\n #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n #[inline]\n@@ -91,7 +157,23 @@ impl<T: ?Sized> Clone for PtrComponents<T> {\n     }\n }\n \n-/// The metadata for a `dyn SomeTrait` trait object type.\n+/// The metadata for a `Dyn = dyn SomeTrait` trait object type.\n+///\n+/// It is a pointer to a vtable (virtual call table)\n+/// that represents all the necessary information\n+/// to manipulate the concrete type stored inside a trait object.\n+/// The vtable notably it contains:\n+///\n+/// * type size\n+/// * type alignment\n+/// * a pointer to the type\u2019s `drop_in_place` impl (may be a no-op for plain-old-data)\n+/// * pointers to all the methods for the type\u2019s implementation of the trait\n+///\n+/// Note that the first three are special because they\u2019re necessary to allocate, drop,\n+/// and deallocate any trait object.\n+///\n+/// It is possible to name this struct with a type parameter that is not a `dyn` trait object\n+/// (for example `DynMetadata<u64>`) but not to obtain a meaningful value of that struct.\n #[lang = \"dyn_metadata\"]\n pub struct DynMetadata<Dyn: ?Sized> {\n     vtable_ptr: &'static VTable,"}, {"sha": "3de5b097f5e34a56298aca6057e6a180474e9400", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea7f1504c43dbc5e139c393b41427323e1c5f45/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea7f1504c43dbc5e139c393b41427323e1c5f45/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=3ea7f1504c43dbc5e139c393b41427323e1c5f45", "patch": "@@ -179,6 +179,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.\n     ///\n     /// See the documentation of [`std::ptr::from_raw_parts`] for more details.\n+    ///\n+    /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts\n     #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]"}]}