{"sha": "a04f31dc34d56b28f1a92800e4682941c8bc41ec", "node_id": "C_kwDOAAsO6NoAKGEwNGYzMWRjMzRkNTZiMjhmMWE5MjgwMGU0NjgyOTQxYzhiYzQxZWM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-07T09:59:18Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-07T09:59:18Z"}, "message": "remove binder from query constraints", "tree": {"sha": "703641482f0d17ec98a281895badf9ae5712f2bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703641482f0d17ec98a281895badf9ae5712f2bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a04f31dc34d56b28f1a92800e4682941c8bc41ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a04f31dc34d56b28f1a92800e4682941c8bc41ec", "html_url": "https://github.com/rust-lang/rust/commit/a04f31dc34d56b28f1a92800e4682941c8bc41ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a04f31dc34d56b28f1a92800e4682941c8bc41ec/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "html_url": "https://github.com/rust-lang/rust/commit/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d"}], "stats": {"total": 59, "additions": 20, "deletions": 39}, "files": [{"sha": "1dc6c42fbf78ea3a4b60f27ec9370de3bcad73d2", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=a04f31dc34d56b28f1a92800e4682941c8bc41ec", "patch": "@@ -83,16 +83,8 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         }\n         self.constraints.member_constraints = tmp;\n \n-        for (predicate, constraint_category) in outlives {\n-            // At the moment, we never generate any \"higher-ranked\"\n-            // region constraints like `for<'a> 'a: 'b`. At some point\n-            // when we move to universes, we will, and this assertion\n-            // will start to fail.\n-            let predicate = predicate.no_bound_vars().unwrap_or_else(|| {\n-                bug!(\"query_constraint {:?} contained bound vars\", predicate,);\n-            });\n-\n-            self.convert(predicate, *constraint_category);\n+        for &(predicate, constraint_category) in outlives {\n+            self.convert(predicate, constraint_category);\n         }\n     }\n "}, {"sha": "7cc9e49b1b62adf66597091e683e21525347ca8f", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a04f31dc34d56b28f1a92800e4682941c8bc41ec", "patch": "@@ -268,14 +268,12 @@ impl<'tcx> InferCtxt<'tcx> {\n                 (GenericArgKind::Lifetime(v_o), GenericArgKind::Lifetime(v_r)) => {\n                     // To make `v_o = v_r`, we emit `v_o: v_r` and `v_r: v_o`.\n                     if v_o != v_r {\n-                        output_query_region_constraints.outlives.push((\n-                            ty::Binder::dummy(ty::OutlivesPredicate(v_o.into(), v_r)),\n-                            constraint_category,\n-                        ));\n-                        output_query_region_constraints.outlives.push((\n-                            ty::Binder::dummy(ty::OutlivesPredicate(v_r.into(), v_o)),\n-                            constraint_category,\n-                        ));\n+                        output_query_region_constraints\n+                            .outlives\n+                            .push((ty::OutlivesPredicate(v_o.into(), v_r), constraint_category));\n+                        output_query_region_constraints\n+                            .outlives\n+                            .push((ty::OutlivesPredicate(v_r.into(), v_o), constraint_category));\n                     }\n                 }\n \n@@ -318,10 +316,8 @@ impl<'tcx> InferCtxt<'tcx> {\n             query_response.value.region_constraints.outlives.iter().filter_map(|&r_c| {\n                 let r_c = substitute_value(self.tcx, &result_subst, r_c);\n \n-                // Screen out `'a: 'a` cases -- we skip the binder here but\n-                // only compare the inner values to one another, so they are still at\n-                // consistent binding levels.\n-                let ty::OutlivesPredicate(k1, r2) = r_c.0.skip_binder();\n+                // Screen out `'a: 'a` cases.\n+                let ty::OutlivesPredicate(k1, r2) = r_c.0;\n                 if k1 != r2.into() { Some(r_c) } else { None }\n             }),\n         );\n@@ -559,11 +555,11 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     pub fn query_outlives_constraint_to_obligation(\n         &self,\n-        predicate: QueryOutlivesConstraint<'tcx>,\n+        (predicate, _): QueryOutlivesConstraint<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Obligation<'tcx, ty::Predicate<'tcx>> {\n-        let ty::OutlivesPredicate(k1, r2) = predicate.0.skip_binder();\n+        let ty::OutlivesPredicate(k1, r2) = predicate;\n \n         let atom = match k1.unpack() {\n             GenericArgKind::Lifetime(r1) => {\n@@ -578,7 +574,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n             }\n         };\n-        let predicate = predicate.0.rebind(atom);\n+        let predicate = ty::Binder::dummy(atom);\n \n         Obligation::new(self.tcx, cause, param_env, predicate)\n     }\n@@ -643,8 +639,7 @@ pub fn make_query_region_constraints<'tcx>(\n     let outlives: Vec<_> = constraints\n         .iter()\n         .map(|(k, origin)| {\n-            // no bound vars in the code above\n-            let constraint = ty::Binder::dummy(match *k {\n+            let constraint = match *k {\n                 // Swap regions because we are going from sub (<=) to outlives\n                 // (>=).\n                 Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n@@ -658,16 +653,12 @@ pub fn make_query_region_constraints<'tcx>(\n                     ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n                 }\n                 Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n-            });\n+            };\n             (constraint, origin.to_constraint_category())\n         })\n-        .chain(\n-            outlives_obligations\n-                // no bound vars in the code above\n-                .map(|(ty, r, constraint_category)| {\n-                    (ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), r)), constraint_category)\n-                }),\n-        )\n+        .chain(outlives_obligations.map(|(ty, r, constraint_category)| {\n+            (ty::OutlivesPredicate(ty.into(), r), constraint_category)\n+        }))\n         .collect();\n \n     QueryRegionConstraints { outlives, member_constraints: member_constraints.clone() }"}, {"sha": "d6f20a8fc06ec563f960c59e604c96b89464c2b7", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04f31dc34d56b28f1a92800e4682941c8bc41ec/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a04f31dc34d56b28f1a92800e4682941c8bc41ec", "patch": "@@ -324,10 +324,8 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> = (\n-    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>,\n-    ConstraintCategory<'tcx>,\n-);\n+pub type QueryOutlivesConstraint<'tcx> =\n+    (ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>, ConstraintCategory<'tcx>);\n \n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {"}]}