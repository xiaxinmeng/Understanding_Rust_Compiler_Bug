{"sha": "d61909f9047ba94c4ed9af580193958257ab21e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTkwOWY5MDQ3YmE5NGM0ZWQ5YWY1ODAxOTM5NTgyNTdhYjIxZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-15T09:19:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T09:19:46Z"}, "message": "Merge #3964 #3965 #3967\n\n3964: Nicer Chalk debug logs r=matklad a=flodiebold\n\nI'm looking at a lot of Chalk debug logs at the moment, so here's a few changes to make them slightly nicer...\n\n3965: Implement inline associated type bounds r=matklad a=flodiebold\n\nLike `Iterator<Item: SomeTrait>`.\r\n\r\nThis is an unstable feature, but it's used in the standard library e.g. in the definition of Flatten, so we can't get away with not implementing it :)\r\n\r\n(This is cherry-picked from my recursive solver branch, where it works better, but I did manage to write a test that works with the current Chalk solver as well...)\n\n3967: Handle `Self::Type` in trait definitions when referring to own associated type r=matklad a=flodiebold\n\nIt was implemented for other generic parameters for the trait, but not for `Self`.\r\n\r\n(Last one off my recursive solver branch :smile: )\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "90606344bde7de8ced61085649e30255eac10603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90606344bde7de8ced61085649e30255eac10603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d61909f9047ba94c4ed9af580193958257ab21e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeltGyCRBK7hj4Ov3rIwAAdHIIAFlET3BUo0R+HblTQinIY8Q/\nBHT6uE4FuUSSNW7UzOYEAvR0iUrC+pGryq90+nXECiI+gSiz2GbR1iw4PZ/h6PTm\nFPgkKsQoUKtk2ZCKkL74UZbMRNte/c/+/qIHCrV17Q/UArqxPRyLuHhwXUef01+8\nkbIEDa8mWhDbZDF0/Zoex67kAlUSaK+40pVehxEyQ+satNiv0YqC7qgo+6P9728N\nX8SbyaIY4bLDwbRQIUaaOBn0scba0ALxPUOzWuE1RleqJZShFe9TrnL6AthSCDmE\nCXoRm2AxbyVKFbyMS/dIUVj2iHE/sUM1PTujWbzpuOYMP2UNdpuA0QYhiZj6RCc=\n=nxM/\n-----END PGP SIGNATURE-----\n", "payload": "tree 90606344bde7de8ced61085649e30255eac10603\nparent 9726401eaed82b0afc51ea26f1789f435e906b47\nparent 2e7b88b5256bd6c51226b63b93481a77ac901e14\nparent db32a2e4211f9444ef4f10b633e400d27ed2662e\nparent d88d67819b3f052422ad3f024e44ad73dde1630b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586942386 +0000\ncommitter GitHub <noreply@github.com> 1586942386 +0000\n\nMerge #3964 #3965 #3967\n\n3964: Nicer Chalk debug logs r=matklad a=flodiebold\n\nI'm looking at a lot of Chalk debug logs at the moment, so here's a few changes to make them slightly nicer...\n\n3965: Implement inline associated type bounds r=matklad a=flodiebold\n\nLike `Iterator<Item: SomeTrait>`.\r\n\r\nThis is an unstable feature, but it's used in the standard library e.g. in the definition of Flatten, so we can't get away with not implementing it :)\r\n\r\n(This is cherry-picked from my recursive solver branch, where it works better, but I did manage to write a test that works with the current Chalk solver as well...)\n\n3967: Handle `Self::Type` in trait definitions when referring to own associated type r=matklad a=flodiebold\n\nIt was implemented for other generic parameters for the trait, but not for `Self`.\r\n\r\n(Last one off my recursive solver branch :smile: )\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d61909f9047ba94c4ed9af580193958257ab21e6", "html_url": "https://github.com/rust-lang/rust/commit/d61909f9047ba94c4ed9af580193958257ab21e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d61909f9047ba94c4ed9af580193958257ab21e6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9726401eaed82b0afc51ea26f1789f435e906b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9726401eaed82b0afc51ea26f1789f435e906b47", "html_url": "https://github.com/rust-lang/rust/commit/9726401eaed82b0afc51ea26f1789f435e906b47"}, {"sha": "2e7b88b5256bd6c51226b63b93481a77ac901e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7b88b5256bd6c51226b63b93481a77ac901e14", "html_url": "https://github.com/rust-lang/rust/commit/2e7b88b5256bd6c51226b63b93481a77ac901e14"}, {"sha": "db32a2e4211f9444ef4f10b633e400d27ed2662e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db32a2e4211f9444ef4f10b633e400d27ed2662e", "html_url": "https://github.com/rust-lang/rust/commit/db32a2e4211f9444ef4f10b633e400d27ed2662e"}, {"sha": "d88d67819b3f052422ad3f024e44ad73dde1630b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88d67819b3f052422ad3f024e44ad73dde1630b", "html_url": "https://github.com/rust-lang/rust/commit/d88d67819b3f052422ad3f024e44ad73dde1630b"}], "stats": {"total": 224, "additions": 192, "deletions": 32}, "files": [{"sha": "01fa64e6fe439d09fc3b6e7f75a6cd0c02a4c1e6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -1014,6 +1014,7 @@ dependencies = [\n  \"chalk-solve\",\n  \"ena\",\n  \"insta\",\n+ \"itertools\",\n  \"log\",\n  \"ra_arena\",\n  \"ra_db\","}, {"sha": "b3c91fea2ab7c51c6e3d3f836929c1f6843e1850", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::ast::{\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    path::{path, GenericArgs, Path},\n+    path::{path, AssociatedTypeBinding, GenericArgs, Path},\n     src::HasSource,\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n@@ -95,7 +95,11 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let path = path![std::future::Future];\n     let mut generic_args: Vec<_> = std::iter::repeat(None).take(path.segments.len() - 1).collect();\n     let mut last = GenericArgs::empty();\n-    last.bindings.push((name![Output], orig));\n+    last.bindings.push(AssociatedTypeBinding {\n+        name: name![Output],\n+        type_ref: Some(orig),\n+        bounds: Vec::new(),\n+    });\n     generic_args.push(Some(Arc::new(last)));\n \n     Path::from_known_path(path, generic_args)"}, {"sha": "162b3c8c74fea05a02a2e5bfa8f7601aa99d508c", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -14,7 +14,10 @@ use hir_expand::{\n use ra_db::CrateId;\n use ra_syntax::ast;\n \n-use crate::{type_ref::TypeRef, InFile};\n+use crate::{\n+    type_ref::{TypeBound, TypeRef},\n+    InFile,\n+};\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ModPath {\n@@ -111,7 +114,21 @@ pub struct GenericArgs {\n     /// is left out.\n     pub has_self_type: bool,\n     /// Associated type bindings like in `Iterator<Item = T>`.\n-    pub bindings: Vec<(Name, TypeRef)>,\n+    pub bindings: Vec<AssociatedTypeBinding>,\n+}\n+\n+/// An associated type binding like in `Iterator<Item = T>`.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AssociatedTypeBinding {\n+    /// The name of the associated type.\n+    pub name: Name,\n+    /// The type bound to this associated type (in `Item = T`, this would be the\n+    /// `T`). This can be `None` if there are bounds instead.\n+    pub type_ref: Option<TypeRef>,\n+    /// Bounds for the associated type, like in `Iterator<Item:\n+    /// SomeOtherTrait>`. (This is the unstable `associated_type_bounds`\n+    /// feature.)\n+    pub bounds: Vec<TypeBound>,\n }\n \n /// A single generic argument."}, {"sha": "9ec2e0dcdf01ca5bf7bce26eef39ac1c61a4761f", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -9,11 +9,12 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName},\n };\n-use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner};\n+use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n \n+use super::AssociatedTypeBinding;\n use crate::{\n     path::{GenericArg, GenericArgs, ModPath, Path, PathKind},\n-    type_ref::TypeRef,\n+    type_ref::{TypeBound, TypeRef},\n };\n \n pub(super) use lower_use::lower_use_tree;\n@@ -136,10 +137,16 @@ pub(super) fn lower_generic_args(node: ast::TypeArgList) -> Option<GenericArgs>\n     // lifetimes ignored for now\n     let mut bindings = Vec::new();\n     for assoc_type_arg in node.assoc_type_args() {\n+        let assoc_type_arg: ast::AssocTypeArg = assoc_type_arg;\n         if let Some(name_ref) = assoc_type_arg.name_ref() {\n             let name = name_ref.as_name();\n-            let type_ref = TypeRef::from_ast_opt(assoc_type_arg.type_ref());\n-            bindings.push((name, type_ref));\n+            let type_ref = assoc_type_arg.type_ref().map(TypeRef::from_ast);\n+            let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n+                l.bounds().map(TypeBound::from_ast).collect()\n+            } else {\n+                Vec::new()\n+            };\n+            bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n         }\n     }\n     if args.is_empty() && bindings.is_empty() {\n@@ -168,7 +175,11 @@ fn lower_generic_args_from_fn_path(\n     }\n     if let Some(ret_type) = ret_type {\n         let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n-        bindings.push((name![Output], type_ref))\n+        bindings.push(AssociatedTypeBinding {\n+            name: name![Output],\n+            type_ref: Some(type_ref),\n+            bounds: Vec::new(),\n+        });\n     }\n     if args.is_empty() && bindings.is_empty() {\n         None"}, {"sha": "f308c6bdfc3edc0853fc98abc493678d3e75e815", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -163,8 +163,16 @@ impl TypeRef {\n                         let crate::path::GenericArg::Type(type_ref) = arg;\n                         go(type_ref, f);\n                     }\n-                    for (_, type_ref) in &args_and_bindings.bindings {\n-                        go(type_ref, f);\n+                    for binding in &args_and_bindings.bindings {\n+                        if let Some(type_ref) = &binding.type_ref {\n+                            go(type_ref, f);\n+                        }\n+                        for bound in &binding.bounds {\n+                            match bound {\n+                                TypeBound::Path(path) => go_path(path, f),\n+                                TypeBound::Error => (),\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "e891d733fc787c3453ddeb8af1892a53e3d54048", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -8,6 +8,7 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n+itertools = \"0.9.0\"\n arrayvec = \"0.5.1\"\n smallvec = \"1.2.0\"\n ena = \"0.13.1\""}, {"sha": "cc1ac8e3e972b9b04a36305dc6a9b2b1d9ede2b3", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -8,6 +8,8 @@\n use std::iter;\n use std::sync::Arc;\n \n+use smallvec::SmallVec;\n+\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -360,13 +362,23 @@ impl Ty {\n             },\n             Some(TypeNs::GenericParam(param_id)) => {\n                 let predicates = ctx.db.generic_predicates_for_param(param_id);\n-                predicates\n+                let mut traits_: Vec<_> = predicates\n                     .iter()\n                     .filter_map(|pred| match &pred.value {\n                         GenericPredicate::Implemented(tr) => Some(tr.trait_),\n                         _ => None,\n                     })\n-                    .collect()\n+                    .collect();\n+                // Handle `Self::Type` referring to own associated type in trait definitions\n+                if let GenericDefId::TraitId(trait_id) = param_id.parent {\n+                    let generics = generics(ctx.db.upcast(), trait_id.into());\n+                    if generics.params.types[param_id.local_id].provenance\n+                        == TypeParamProvenance::TraitSelf\n+                    {\n+                        traits_.push(trait_id);\n+                    }\n+                }\n+                traits_\n             }\n             _ => return Ty::Unknown,\n         };\n@@ -596,21 +608,35 @@ fn assoc_type_bindings_from_type_bound<'a>(\n         .into_iter()\n         .flat_map(|segment| segment.args_and_bindings.into_iter())\n         .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n-        .map(move |(name, type_ref)| {\n+        .flat_map(move |binding| {\n             let associated_ty = associated_type_by_name_including_super_traits(\n                 ctx.db.upcast(),\n                 trait_ref.trait_,\n-                &name,\n+                &binding.name,\n             );\n             let associated_ty = match associated_ty {\n-                None => return GenericPredicate::Error,\n+                None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n             let projection_ty =\n                 ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };\n-            let ty = Ty::from_hir(ctx, type_ref);\n-            let projection_predicate = ProjectionPredicate { projection_ty, ty };\n-            GenericPredicate::Projection(projection_predicate)\n+            let mut preds = SmallVec::with_capacity(\n+                binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n+            );\n+            if let Some(type_ref) = &binding.type_ref {\n+                let ty = Ty::from_hir(ctx, type_ref);\n+                let projection_predicate =\n+                    ProjectionPredicate { projection_ty: projection_ty.clone(), ty };\n+                preds.push(GenericPredicate::Projection(projection_predicate));\n+            }\n+            for bound in &binding.bounds {\n+                preds.extend(GenericPredicate::from_type_bound(\n+                    ctx,\n+                    bound,\n+                    Ty::Projection(projection_ty.clone()),\n+                ));\n+            }\n+            preds\n         })\n }\n "}, {"sha": "d69115a2f527bd32e81e2bf046799a8d6aeb4923", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -451,8 +451,7 @@ pub mod str {\n \"#,\n     );\n \n-    // should be Option<char>, but currently not because of Chalk ambiguity problem\n-    assert_eq!(\"(Option<{unknown}>, Option<{unknown}>)\", super::type_at_pos(&db, pos));\n+    assert_eq!(\"(Option<char>, Option<char>)\", super::type_at_pos(&db, pos));\n }\n \n #[test]"}, {"sha": "81c5e62996635ca7dbf31ce9ce93016183ff539a", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -1803,7 +1803,7 @@ fn test<T, U>() where T::Item: Trait2, T: Trait<U::Item>, U: Trait<()> {\n }\n \n #[test]\n-fn unselected_projection_on_trait_self() {\n+fn unselected_projection_on_impl_self() {\n     assert_snapshot!(infer(\n         r#\"\n //- /main.rs\n@@ -1843,6 +1843,30 @@ impl Trait for S2 {\n     \"###);\n }\n \n+#[test]\n+fn unselected_projection_on_trait_self() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait {\n+    type Item;\n+\n+    fn f(&self) -> Self::Item { loop {} }\n+}\n+\n+struct S;\n+impl Trait for S {\n+    type Item = u32;\n+}\n+\n+fn test() {\n+    S.f()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n #[test]\n fn trait_impl_self_ty() {\n     let t = type_at(\n@@ -1923,6 +1947,53 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn inline_assoc_type_bounds_1() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Iterator {\n+    type Item;\n+}\n+trait OtherTrait<T> {\n+    fn foo(&self) -> T;\n+}\n+\n+// workaround for Chalk assoc type normalization problems\n+pub struct S<T>;\n+impl<T: Iterator> Iterator for S<T> {\n+    type Item = <T as Iterator>::Item;\n+}\n+\n+fn test<I: Iterator<Item: OtherTrait<u32>>>() {\n+    let x: <S<I> as Iterator>::Item;\n+    x.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n+#[test]\n+fn inline_assoc_type_bounds_2() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Iterator {\n+    type Item;\n+}\n+\n+fn test<I: Iterator<Item: Iterator<Item = u32>>>() {\n+    let x: <<I as Iterator>::Item as Iterator>::Item;\n+    x<|>;\n+}\n+\"#,\n+    );\n+    // assert_eq!(t, \"u32\");\n+    // doesn't currently work, Chalk #234\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n #[test]\n fn unify_impl_trait() {\n     assert_snapshot!("}, {"sha": "fa8e4d1ad182da56909d1e9d044b61c95fddc2cd", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61909f9047ba94c4ed9af580193958257ab21e6/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=d61909f9047ba94c4ed9af580193958257ab21e6", "patch": "@@ -2,10 +2,11 @@\n use std::fmt;\n \n use chalk_ir::{AliasTy, Goal, Goals, Lifetime, Parameter, ProgramClauseImplication, TypeName};\n+use itertools::Itertools;\n \n use super::{from_chalk, Interner};\n use crate::{db::HirDatabase, CallableDef, TypeCtor};\n-use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n+use hir_def::{AdtId, AssocContainerId, DefWithBodyId, Lookup, TypeAliasId};\n \n pub use unsafe_tls::{set_current_program, with_current_program};\n \n@@ -69,7 +70,27 @@ impl DebugContext<'_> {\n                 write!(f, \"{}::{}\", trait_name, name)?;\n             }\n             TypeCtor::Closure { def, expr } => {\n-                write!(f, \"{{closure {:?} in {:?}}}\", expr.into_raw(), def)?;\n+                write!(f, \"{{closure {:?} in \", expr.into_raw())?;\n+                match def {\n+                    DefWithBodyId::FunctionId(func) => {\n+                        write!(f, \"fn {}\", self.0.function_data(func).name)?\n+                    }\n+                    DefWithBodyId::StaticId(s) => {\n+                        if let Some(name) = self.0.static_data(s).name.as_ref() {\n+                            write!(f, \"body of static {}\", name)?;\n+                        } else {\n+                            write!(f, \"body of unnamed static {:?}\", s)?;\n+                        }\n+                    }\n+                    DefWithBodyId::ConstId(c) => {\n+                        if let Some(name) = self.0.const_data(c).name.as_ref() {\n+                            write!(f, \"body of const {}\", name)?;\n+                        } else {\n+                            write!(f, \"body of unnamed const {:?}\", c)?;\n+                        }\n+                    }\n+                };\n+                write!(f, \"}}\")?;\n             }\n         }\n         Ok(())\n@@ -113,14 +134,15 @@ impl DebugContext<'_> {\n         };\n         let trait_data = self.0.trait_data(trait_);\n         let params = alias.substitution.parameters(&Interner);\n-        write!(\n-            fmt,\n-            \"<{:?} as {}<{:?}>>::{}\",\n-            &params[0],\n-            trait_data.name,\n-            &params[1..],\n-            type_alias_data.name\n-        )\n+        write!(fmt, \"<{:?} as {}\", &params[0], trait_data.name,)?;\n+        if params.len() > 1 {\n+            write!(\n+                fmt,\n+                \"<{}>\",\n+                &params[1..].iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n+            )?;\n+        }\n+        write!(fmt, \">::{}\", type_alias_data.name)\n     }\n \n     pub fn debug_ty("}]}