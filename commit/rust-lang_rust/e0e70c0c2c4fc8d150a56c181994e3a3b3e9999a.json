{"sha": "e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "node_id": "C_kwDOAAsO6NoAKGUwZTcwYzBjMmM0ZmM4ZDE1MGE1NmMxODE5OTRlM2EzYjNlOTk5OWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-28T09:46:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-28T09:46:22Z"}, "message": "Auto merge of #90677 - bobrippling:suggest-tuple-parens, r=camelid\n\nSuggest tuple-parentheses for enum variants\n\nThis follows on from #86493 / #86481, making the parentheses suggestion. To summarise, given the following code:\n\n```rust\nfn f() -> Option<(i32, i8)> {\n    Some(1, 2)\n}\n```\n\nThe current output is:\n\n```\nerror[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n --> b.rs:2:5\n  |\n2 |     Some(1, 2)\n  |     ^^^^ -  - supplied 2 arguments\n  |     |\n  |     expected 1 argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0061`.\n```\n\nWith this change, `rustc` will now suggest parentheses when:\n- The callee is expecting a single tuple argument\n- The number of arguments passed matches the element count in the above tuple\n- The arguments' types match the tuple's fields\n\n```\nerror[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n --> b.rs:2:5\n  |\n2 |     Some(1, 2)\n  |     ^^^^ -  - supplied 2 arguments\n  |\nhelp: use parentheses to construct a tuple\n  |\n2 |     Some((1, 2))\n  |          +    +\n```", "tree": {"sha": "0b7df5ec78235f4f7280b7bab5d7157bda5b208e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7df5ec78235f4f7280b7bab5d7157bda5b208e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "html_url": "https://github.com/rust-lang/rust/commit/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312a7995e73e390646bc61920ffead7a640addc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/312a7995e73e390646bc61920ffead7a640addc6", "html_url": "https://github.com/rust-lang/rust/commit/312a7995e73e390646bc61920ffead7a640addc6"}, {"sha": "a8bac9879a36d01c1fc325ed85d6a992deab88fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bac9879a36d01c1fc325ed85d6a992deab88fa", "html_url": "https://github.com/rust-lang/rust/commit/a8bac9879a36d01c1fc325ed85d6a992deab88fa"}], "stats": {"total": 261, "additions": 255, "deletions": 6}, "files": [{"sha": "1b93017c5aa47da19c12768a35acc8543491debe", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -28,6 +28,11 @@ use crate::structured_errors::StructuredDiagnostic;\n use std::iter;\n use std::slice;\n \n+struct FnArgsAsTuple<'hir> {\n+    first: &'hir hir::Expr<'hir>,\n+    last: &'hir hir::Expr<'hir>,\n+}\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&self) {\n         let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n@@ -127,8 +132,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let expected_arg_count = formal_input_tys.len();\n \n-        // expected_count, arg_count, error_code, sugg_unit\n-        let mut error: Option<(usize, usize, &str, bool)> = None;\n+        // expected_count, arg_count, error_code, sugg_unit, sugg_tuple_wrap_args\n+        let mut error: Option<(usize, usize, &str, bool, Option<FnArgsAsTuple<'_>>)> = None;\n \n         // If the arguments should be wrapped in a tuple (ex: closures), unwrap them here\n         let (formal_input_tys, expected_input_tys) = if tuple_arguments == TupleArguments {\n@@ -138,7 +143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Tuple(arg_types) => {\n                     // Argument length differs\n                     if arg_types.len() != provided_args.len() {\n-                        error = Some((arg_types.len(), provided_args.len(), \"E0057\", false));\n+                        error = Some((arg_types.len(), provided_args.len(), \"E0057\", false, None));\n                     }\n                     let expected_input_tys = match expected_input_tys.get(0) {\n                         Some(&ty) => match ty.kind() {\n@@ -169,7 +174,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 (formal_input_tys.to_vec(), expected_input_tys)\n             } else {\n-                error = Some((expected_arg_count, supplied_arg_count, \"E0060\", false));\n+                error = Some((expected_arg_count, supplied_arg_count, \"E0060\", false, None));\n                 (self.err_args(supplied_arg_count), vec![])\n             }\n         } else {\n@@ -181,7 +186,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 false\n             };\n-            error = Some((expected_arg_count, supplied_arg_count, \"E0061\", sugg_unit));\n+\n+            // are we passing elements of a tuple without the tuple parentheses?\n+            let expected_input_tys = if expected_input_tys.is_empty() {\n+                // In most cases we can use expected_input_tys, but some callers won't have the type\n+                // information, in which case we fall back to the types from the input expressions.\n+                formal_input_tys\n+            } else {\n+                &*expected_input_tys\n+            };\n+\n+            let sugg_tuple_wrap_args = self.suggested_tuple_wrap(expected_input_tys, provided_args);\n+\n+            error = Some((\n+                expected_arg_count,\n+                supplied_arg_count,\n+                \"E0061\",\n+                sugg_unit,\n+                sugg_tuple_wrap_args,\n+            ));\n             (self.err_args(supplied_arg_count), vec![])\n         };\n \n@@ -305,7 +328,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // If there was an error in parameter count, emit that here\n-        if let Some((expected_count, arg_count, err_code, sugg_unit)) = error {\n+        if let Some((expected_count, arg_count, err_code, sugg_unit, sugg_tuple_wrap_args)) = error\n+        {\n             let (span, start_span, args, ctor_of) = match &call_expr.kind {\n                 hir::ExprKind::Call(\n                     hir::Expr {\n@@ -408,6 +432,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     String::from(\"()\"),\n                     Applicability::MachineApplicable,\n                 );\n+            } else if let Some(FnArgsAsTuple { first, last }) = sugg_tuple_wrap_args {\n+                err.multipart_suggestion(\n+                    \"use parentheses to construct a tuple\",\n+                    vec![\n+                        (first.span.shrink_to_lo(), '('.to_string()),\n+                        (last.span.shrink_to_hi(), ')'.to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n             } else {\n                 err.span_label(\n                     span,\n@@ -457,6 +490,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggested_tuple_wrap(\n+        &self,\n+        expected_input_tys: &[Ty<'tcx>],\n+        provided_args: &'tcx [hir::Expr<'tcx>],\n+    ) -> Option<FnArgsAsTuple<'_>> {\n+        let [expected_arg_type] = &expected_input_tys[..] else { return None };\n+\n+        let ty::Tuple(expected_elems) = self.resolve_vars_if_possible(*expected_arg_type).kind()\n+            else { return None };\n+\n+        let expected_types: Vec<_> = expected_elems.iter().map(|k| k.expect_ty()).collect();\n+        let supplied_types: Vec<_> = provided_args.iter().map(|arg| self.check_expr(arg)).collect();\n+\n+        let all_match = iter::zip(expected_types, supplied_types)\n+            .all(|(expected, supplied)| self.can_eq(self.param_env, expected, supplied).is_ok());\n+\n+        if all_match {\n+            match provided_args {\n+                [] => None,\n+                [_] => unreachable!(\n+                    \"shouldn't reach here - need count mismatch between 1-tuple and 1-argument\"\n+                ),\n+                [first, .., last] => Some(FnArgsAsTuple { first, last }),\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     // AST fragment checking\n     pub(in super::super) fn check_lit(\n         &self,"}, {"sha": "2c3ee5fcb803908fd7d50eba98ea1fc55ae16a95", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -0,0 +1,16 @@\n+// Ensure we don't suggest tuple-wrapping when we'd end up with a type error\n+\n+fn main() {\n+    // we shouldn't suggest to fix these - `2` isn't a `bool`\n+\n+    let _: Option<(i32, bool)> = Some(1, 2);\n+    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    int_bool(1, 2);\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+\n+    let _: Option<(i8,)> = Some();\n+    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+}\n+\n+fn int_bool(_: (i32, bool)) {\n+}"}, {"sha": "a2ad602dbd47a0e65fa8eb1b6f69a7e9060f506e", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -0,0 +1,33 @@\n+error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:34\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                  ^^^^ -  - supplied 2 arguments\n+   |                                  |\n+   |                                  expected 1 argument\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:8:5\n+   |\n+LL |     int_bool(1, 2);\n+   |     ^^^^^^^^ -  - supplied 2 arguments\n+   |     |\n+   |     expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/args-instead-of-tuple-errors.rs:15:4\n+   |\n+LL | fn int_bool(_: (i32, bool)) {\n+   |    ^^^^^^^^ --------------\n+\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:11:28\n+   |\n+LL |     let _: Option<(i8,)> = Some();\n+   |                            ^^^^-- supplied 0 arguments\n+   |                            |\n+   |                            expected 1 argument\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "c9b8a41d469b99ba384d62cd7622978eb8f41f28", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -0,0 +1,27 @@\n+// Test suggesting tuples where bare arguments may have been passed\n+// See issue #86481 for details.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: Result<(i32, i8), ()> = Ok((1, 2));\n+    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n+    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    let _: Option<()> = Some(());\n+    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+\n+    two_ints((1, 2)); //~ ERROR this function takes 1 argument\n+\n+    with_generic((3, 4)); //~ ERROR this function takes 1 argument\n+}\n+\n+fn two_ints(_: (i32, i32)) {\n+}\n+\n+fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n+    if false {\n+        // test generics/bound handling\n+        with_generic((a, b)); //~ ERROR this function takes 1 argument\n+    }\n+}"}, {"sha": "d4cc3024dd0d228d20f879fb60f7ebbfeb46822d", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -0,0 +1,27 @@\n+// Test suggesting tuples where bare arguments may have been passed\n+// See issue #86481 for details.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: Result<(i32, i8), ()> = Ok(1, 2);\n+    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n+    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    let _: Option<()> = Some();\n+    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+\n+    two_ints(1, 2); //~ ERROR this function takes 1 argument\n+\n+    with_generic(3, 4); //~ ERROR this function takes 1 argument\n+}\n+\n+fn two_ints(_: (i32, i32)) {\n+}\n+\n+fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n+    if false {\n+        // test generics/bound handling\n+        with_generic(a, b); //~ ERROR this function takes 1 argument\n+    }\n+}"}, {"sha": "172db7ee3df38973b3ae976458a0c24d0005124e", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "patch": "@@ -0,0 +1,84 @@\n+error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:7:36\n+   |\n+LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n+   |                                    ^^ -  - supplied 2 arguments\n+   |\n+help: use parentheses to construct a tuple\n+   |\n+LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n+   |                                       +    +\n+\n+error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:9:46\n+   |\n+LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n+   |                                              ^^^^ -  -  ---- supplied 3 arguments\n+   |\n+help: use parentheses to construct a tuple\n+   |\n+LL |     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n+   |                                                   +          +\n+\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:11:25\n+   |\n+LL |     let _: Option<()> = Some();\n+   |                         ^^^^-- supplied 0 arguments\n+   |\n+help: expected the unit value `()`; create it with empty parentheses\n+   |\n+LL |     let _: Option<()> = Some(());\n+   |                              ++\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:14:5\n+   |\n+LL |     two_ints(1, 2);\n+   |     ^^^^^^^^ -  - supplied 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/args-instead-of-tuple.rs:19:4\n+   |\n+LL | fn two_ints(_: (i32, i32)) {\n+   |    ^^^^^^^^ -------------\n+help: use parentheses to construct a tuple\n+   |\n+LL |     two_ints((1, 2));\n+   |              +    +\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:16:5\n+   |\n+LL |     with_generic(3, 4);\n+   |     ^^^^^^^^^^^^ -  - supplied 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/args-instead-of-tuple.rs:22:4\n+   |\n+LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n+   |    ^^^^^^^^^^^^                 ----------------\n+help: use parentheses to construct a tuple\n+   |\n+LL |     with_generic((3, 4));\n+   |                  +    +\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple.rs:25:9\n+   |\n+LL |         with_generic(a, b);\n+   |         ^^^^^^^^^^^^ -  - supplied 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/args-instead-of-tuple.rs:22:4\n+   |\n+LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n+   |    ^^^^^^^^^^^^                 ----------------\n+help: use parentheses to construct a tuple\n+   |\n+LL |         with_generic((a, b));\n+   |                      +    +\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}]}