{"sha": "856027a73a75f0e04e3ab9ae9633a9244429fe60", "node_id": "C_kwDOAAsO6NoAKDg1NjAyN2E3M2E3NWYwZTA0ZTNhYjlhZTk2MzNhOTI0NDQyOWZlNjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-09T21:31:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-09T21:31:55Z"}, "message": "Rollup merge of #105265 - aDotInTheVoid:sum-product-on-unimplemented, r=estebank\n\nAdd `rustc_on_unimplemented` to `Sum` and `Product` trait.\n\nHelps with #105184, but I don't think it fully fixes it.", "tree": {"sha": "34b3c2f9bdae5b5ad89e002f7a30883bcd19d00c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b3c2f9bdae5b5ad89e002f7a30883bcd19d00c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856027a73a75f0e04e3ab9ae9633a9244429fe60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjk6lLCRBK7hj4Ov3rIwAAAHwIACYw1UQTBJy1ucqdItP+Omoz\nUYn3HojUcykRNVSZ0dQunNdYoYoTSWouZD6A3gsyy3p2YW7XXIClolydkuwV1Axt\np+z15F9U992UKLgshp8BgfSdsoDfPzdNzNbeHHHqqEWq8QafzhOx9RoKYrhVggXQ\nSx5ljrPzQ8sUAOokigRp8SLMRNhKysuhT5G5PwhnZVsl1CkyQIGm1mhE5bJumaA/\n8dpxchYylBagZxDcXBfwEogngwHMwkBdIP70sXXmWqxi2/Q+e2RtrqKi83GSvArm\nZSQosnyydwkMfA13N2BgEkSZ9xUD2QuOmxXjBXttEZJT2XX1LHgW/qAKTJJKeBQ=\n=3Y9W\n-----END PGP SIGNATURE-----\n", "payload": "tree 34b3c2f9bdae5b5ad89e002f7a30883bcd19d00c\nparent 4fae5891d0857f9bfb0abbca9529e016c8a90ee6\nparent 5626df9c9098fc83518e3bc4cef06e449279ac3c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670621515 +0100\ncommitter GitHub <noreply@github.com> 1670621515 +0100\n\nRollup merge of #105265 - aDotInTheVoid:sum-product-on-unimplemented, r=estebank\n\nAdd `rustc_on_unimplemented` to `Sum` and `Product` trait.\n\nHelps with #105184, but I don't think it fully fixes it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856027a73a75f0e04e3ab9ae9633a9244429fe60", "html_url": "https://github.com/rust-lang/rust/commit/856027a73a75f0e04e3ab9ae9633a9244429fe60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856027a73a75f0e04e3ab9ae9633a9244429fe60/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "html_url": "https://github.com/rust-lang/rust/commit/4fae5891d0857f9bfb0abbca9529e016c8a90ee6"}, {"sha": "5626df9c9098fc83518e3bc4cef06e449279ac3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5626df9c9098fc83518e3bc4cef06e449279ac3c", "html_url": "https://github.com/rust-lang/rust/commit/5626df9c9098fc83518e3bc4cef06e449279ac3c"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "e31669b3924202db05ee2cceb8289ceae1075105", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/856027a73a75f0e04e3ab9ae9633a9244429fe60/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856027a73a75f0e04e3ab9ae9633a9244429fe60/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=856027a73a75f0e04e3ab9ae9633a9244429fe60", "patch": "@@ -10,6 +10,10 @@ use crate::num::Wrapping;\n /// [`sum()`]: Iterator::sum\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n+#[rustc_on_unimplemented(\n+    message = \"a value of type `{Self}` cannot be made by summing an iterator over elements of type `{A}`\",\n+    label = \"value of type `{Self}` cannot be made by summing a `std::iter::Iterator<Item={A}>`\"\n+)]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// \"summing up\" the items.\n@@ -27,6 +31,10 @@ pub trait Sum<A = Self>: Sized {\n /// [`product()`]: Iterator::product\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n+#[rustc_on_unimplemented(\n+    message = \"a value of type `{Self}` cannot be made by multiplying all elements of type `{A}` from an iterator\",\n+    label = \"value of type `{Self}` cannot be made by multiplying all elements from a `std::iter::Iterator<Item={A}>`\"\n+)]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// multiplying the items."}, {"sha": "4f1c521d9fe8e6b156aeea9c291326b15e56878e", "filename": "src/test/ui/on-unimplemented/sum.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/856027a73a75f0e04e3ab9ae9633a9244429fe60/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856027a73a75f0e04e3ab9ae9633a9244429fe60/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs?ref=856027a73a75f0e04e3ab9ae9633a9244429fe60", "patch": "@@ -0,0 +1,9 @@\n+// <https://github.com/rust-lang/rust/issues/105184>\n+\n+fn main() {\n+    vec![(), ()].iter().sum::<i32>();\n+    //~^ ERROR\n+\n+    vec![(), ()].iter().product::<i32>();\n+    //~^ ERROR\n+}"}, {"sha": "0c99e63f0e518e7f730601e38b8c0234c275aaaa", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/856027a73a75f0e04e3ab9ae9633a9244429fe60/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/856027a73a75f0e04e3ab9ae9633a9244429fe60/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=856027a73a75f0e04e3ab9ae9633a9244429fe60", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n+  --> $DIR/sum.rs:4:5\n+   |\n+LL |     vec![(), ()].iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n+   |     |\n+   |     value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n+   |\n+   = help: the trait `Sum<&()>` is not implemented for `i32`\n+   = help: the following other types implement trait `Sum<A>`:\n+             <i32 as Sum<&'a i32>>\n+             <i32 as Sum>\n+note: required by a bound in `std::iter::Iterator::sum`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         S: Sum<Self::Item>,\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+\n+error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n+  --> $DIR/sum.rs:7:5\n+   |\n+LL |     vec![(), ()].iter().product::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |     |\n+   |     value of type `i32` cannot be made by multiplying all elements from a `std::iter::Iterator<Item=&()>`\n+   |\n+   = help: the trait `Product<&()>` is not implemented for `i32`\n+   = help: the following other types implement trait `Product<A>`:\n+             <i32 as Product<&'a i32>>\n+             <i32 as Product>\n+note: required by a bound in `std::iter::Iterator::product`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         P: Product<Self::Item>,\n+   |            ^^^^^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::product`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}