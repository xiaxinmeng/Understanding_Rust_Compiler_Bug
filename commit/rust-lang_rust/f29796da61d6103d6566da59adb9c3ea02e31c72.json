{"sha": "f29796da61d6103d6566da59adb9c3ea02e31c72", "node_id": "C_kwDOAAsO6NoAKGYyOTc5NmRhNjFkNjEwM2Q2NTY2ZGE1OWFkYjljM2VhMDJlMzFjNzI", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:51:30Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-04T22:00:18Z"}, "message": "Replace `if let Some(_) = foo` with `if foo.is_some()`", "tree": {"sha": "6f9698571c245625b4670eab5427b4acf1b2df52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f9698571c245625b4670eab5427b4acf1b2df52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29796da61d6103d6566da59adb9c3ea02e31c72", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmFbeXUACgkQ94j36ZAT\nYANnZQ//RQxSuxSlZC5TaBhoGX9amlcOU+IUjEd/c8qlYxIw3fwIGj8kmvrqUsip\nVImwyWeaDB4+1VSIg4smoIIQVY8/+Ub0PDPOEYVfj2QkB+vCNCcE29DPJdA80HE9\nfFXVZcw7AJymO6bhWZVAz/vXReqKl21qhQ4SKm8jOh0BvdexqIN6MYFvgvre4rF/\nan0POCvT0aT6qlaI4wsQBaGlTWgit5IRIlOVfvPMsbuvUwdAt+/QBmwWfDZcddq2\nrsIA7vK7CLtfBWaVeY0Eo6vp6JjTsyWQxX5xPX+qfX8DQsdICOmDraIpJZTAsysc\n6sUG2j9B9UPqJRldnrDZbGbzwiiDYdjOn6KQhUAhlzbectfGI7uyzjbxe67w3Pfq\ncQ1Ay/jIhvQ7jThkAziVHm2WadD8D6ksL35WGjh8b1TrtHW0SJrtTge60WEc+fou\n7NNLIjbf8GWtK1N0DR+br0Qs+jDqL3C/gfC2a1+1vnaS1sucvSTVlIiBKLcEJ4pI\nAD3PNvlyGE9I0/bf1mggte9B8CifseXCYj11R59BoHaYGeTMS9UOjwJjQxr+2H9Q\ns36i+Vq01c3BM/Kt3llMvhkA+vHpzBWFHBMpiebUNn+Lj/QsCEVcG5IU5lO2hkF0\nThEwsemDS07HXVjmg/N6LegH1qsLNiWxl8Vyw9ghCmHXKGYLlLg=\n=Vd4+\n-----END PGP SIGNATURE-----", "payload": "tree 6f9698571c245625b4670eab5427b4acf1b2df52\nparent eff195852d30b9865310cfedd7e2e8727ccb1a68\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1633265490 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1633384818 +1100\n\nReplace `if let Some(_) = foo` with `if foo.is_some()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29796da61d6103d6566da59adb9c3ea02e31c72", "html_url": "https://github.com/rust-lang/rust/commit/f29796da61d6103d6566da59adb9c3ea02e31c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29796da61d6103d6566da59adb9c3ea02e31c72/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff195852d30b9865310cfedd7e2e8727ccb1a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff195852d30b9865310cfedd7e2e8727ccb1a68", "html_url": "https://github.com/rust-lang/rust/commit/eff195852d30b9865310cfedd7e2e8727ccb1a68"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7b010fc27101c57a014e38d6ff76bd86a0b65c5b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -1119,7 +1119,7 @@ impl DefWithBody {\n                                 if let ast::Expr::RecordExpr(record_expr) =\n                                     &source_ptr.value.to_node(&root)\n                                 {\n-                                    if let Some(_) = record_expr.record_expr_field_list() {\n+                                    if record_expr.record_expr_field_list().is_some() {\n                                         acc.push(\n                                             MissingFields {\n                                                 file: source_ptr.file_id,\n@@ -1143,7 +1143,7 @@ impl DefWithBody {\n                                 if let Some(expr) = source_ptr.value.as_ref().left() {\n                                     let root = source_ptr.file_syntax(db.upcast());\n                                     if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                                        if let Some(_) = record_pat.record_pat_field_list() {\n+                                        if record_pat.record_pat_field_list().is_some() {\n                                             acc.push(\n                                                 MissingFields {\n                                                     file: source_ptr.file_id,"}, {"sha": "e02c0dfd84b80439d5ab749de06e2457d7b0d940", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -156,7 +156,7 @@ fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameRe\n         _ => bail!(\"Cannot rename local to self outside of function\"),\n     };\n \n-    if let Some(_) = fn_def.self_param(sema.db) {\n+    if fn_def.self_param(sema.db).is_some() {\n         bail!(\"Method already has a self parameter\");\n     }\n "}, {"sha": "c4577e63500cf6d69f1d79f9cd47e47098f724cc", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -330,7 +330,7 @@ fn traverse(\n             }\n         }\n \n-        if let Some(_) = macro_highlighter.highlight(element_to_highlight.clone()) {\n+        if macro_highlighter.highlight(element_to_highlight.clone()).is_some() {\n             continue;\n         }\n "}, {"sha": "92dc2ee73a31bc90f1ef449135e1b621a6c196aa", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n     let cond = while_expr.condition()?;\n \n     // Don't handle while let\n-    if let Some(_) = cond.pat() {\n+    if cond.pat().is_some() {\n         return None;\n     };\n "}, {"sha": "4fb5c770e52d9a1fe96daa52dbd52b0b0dac4042", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -318,7 +318,7 @@ pub fn source_edit_from_references(\n }\n \n fn source_edit_from_name(edit: &mut TextEditBuilder, name: &ast::Name, new_name: &str) -> bool {\n-    if let Some(_) = ast::RecordPatField::for_field_name(name) {\n+    if ast::RecordPatField::for_field_name(name).is_some() {\n         if let Some(ident_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n             cov_mark::hit!(rename_record_pat_field_name_split);\n             // Foo { ref mut field } -> Foo { new_name: ref mut field }"}, {"sha": "d304e215b404d9e1501c6c0bbb8d74b97e46a38e", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29796da61d6103d6566da59adb9c3ea02e31c72/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=f29796da61d6103d6566da59adb9c3ea02e31c72", "patch": "@@ -455,7 +455,7 @@ impl ast::RecordExprField {\n     /// This will either replace the initializer, or in the case that this is a shorthand convert\n     /// the initializer into the name ref and insert the expr as the new initializer.\n     pub fn replace_expr(&self, expr: ast::Expr) {\n-        if let Some(_) = self.name_ref() {\n+        if self.name_ref().is_some() {\n             match self.expr() {\n                 Some(prev) => ted::replace(prev.syntax(), expr.syntax()),\n                 None => ted::append_child(self.syntax(), expr.syntax()),"}]}