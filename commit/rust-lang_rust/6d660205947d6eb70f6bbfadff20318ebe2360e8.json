{"sha": "6d660205947d6eb70f6bbfadff20318ebe2360e8", "node_id": "C_kwDOAAsO6NoAKDZkNjYwMjA1OTQ3ZDZlYjcwZjZiYmZhZGZmMjAzMThlYmUyMzYwZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T02:32:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T02:32:04Z"}, "message": "Rollup merge of #94765 - m-ou-se:is-some-and, r=Dylan-DPC\n\nRename is_{some,ok,err}_with to is_{some,ok,err}_and.\n\nThis renames `is_{some,ok,err}_with` to `is_{some,ok,err}_and`. This was discussed on the [tracking issue](https://github.com/rust-lang/rust/issues/93050).", "tree": {"sha": "70f977a0e29eb4dee1f52877c5a56d1733d6b446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f977a0e29eb4dee1f52877c5a56d1733d6b446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d660205947d6eb70f6bbfadff20318ebe2360e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKrSkCRBK7hj4Ov3rIwAAFogIAAFWyHzrTAUARYc1L0T1G0D2\npneuZxNCiuiWzhfljplNgbAHzyVv+xIkUdYo1gUQb4bIEYAVtSP4IWlSprE/gFJV\n+l0IWYUyIoTavMI0+ioXcKYbUiVMvSOP7O8ROGNrC0ilhcvoQJQYXZRasIHPdooW\nOyq+EfFhQ7EAhQoQuiiAmmimar5MKnzHQAVetBmPUKgbN4pKgFZsoR6KqULr4AcG\nmFwCkuWVvqI+oyPIZtRQ4Z0KdT24O82xZcqHSi4dd/gd4IrVKtbt3onqyffcdw8l\n16Q/TpUFr6Bu0rp2sW669NKJ8FCTDYVaTT0tKRl5/tX5vUZjnhGSCeNYYzOZLO8=\n=+Dj6\n-----END PGP SIGNATURE-----\n", "payload": "tree 70f977a0e29eb4dee1f52877c5a56d1733d6b446\nparent ab851653a5ae4803bb1b498e83484d2588a8ee1d\nparent 7c7411fb5d6860d4687acd150e3e606c7f424686\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646965924 +0100\ncommitter GitHub <noreply@github.com> 1646965924 +0100\n\nRollup merge of #94765 - m-ou-se:is-some-and, r=Dylan-DPC\n\nRename is_{some,ok,err}_with to is_{some,ok,err}_and.\n\nThis renames `is_{some,ok,err}_with` to `is_{some,ok,err}_and`. This was discussed on the [tracking issue](https://github.com/rust-lang/rust/issues/93050).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d660205947d6eb70f6bbfadff20318ebe2360e8", "html_url": "https://github.com/rust-lang/rust/commit/6d660205947d6eb70f6bbfadff20318ebe2360e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d660205947d6eb70f6bbfadff20318ebe2360e8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab851653a5ae4803bb1b498e83484d2588a8ee1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab851653a5ae4803bb1b498e83484d2588a8ee1d", "html_url": "https://github.com/rust-lang/rust/commit/ab851653a5ae4803bb1b498e83484d2588a8ee1d"}, {"sha": "7c7411fb5d6860d4687acd150e3e606c7f424686", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7411fb5d6860d4687acd150e3e606c7f424686", "html_url": "https://github.com/rust-lang/rust/commit/7c7411fb5d6860d4687acd150e3e606c7f424686"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "de1628f83ade8adbbfa26327b7be9d6b8da3dd4f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d660205947d6eb70f6bbfadff20318ebe2360e8/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d660205947d6eb70f6bbfadff20318ebe2360e8/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=6d660205947d6eb70f6bbfadff20318ebe2360e8", "patch": "@@ -551,26 +551,26 @@ impl<T> Option<T> {\n         matches!(*self, Some(_))\n     }\n \n-    /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.\n+    /// Returns `true` if the option is a [`Some`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), true);\n     ///\n     /// let x: Option<u32> = Some(0);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     ///\n     /// let x: Option<u32> = None;\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_some_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_some_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Some(x) if f(x))\n     }\n "}, {"sha": "9a243cbc3a2a0a1311a8336ed52782cc09d3f770", "filename": "library/core/src/result.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d660205947d6eb70f6bbfadff20318ebe2360e8/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d660205947d6eb70f6bbfadff20318ebe2360e8/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=6d660205947d6eb70f6bbfadff20318ebe2360e8", "patch": "@@ -542,26 +542,26 @@ impl<T, E> Result<T, E> {\n         matches!(*self, Ok(_))\n     }\n \n-    /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), true);\n     ///\n     /// let x: Result<u32, &str> = Ok(0);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     ///\n     /// let x: Result<u32, &str> = Err(\"hey\");\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_ok_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_ok_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Ok(x) if f(x))\n     }\n \n@@ -586,7 +586,7 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n-    /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n@@ -595,18 +595,18 @@ impl<T, E> Result<T, E> {\n     /// use std::io::{Error, ErrorKind};\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), true);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     ///\n     /// let x: Result<u32, Error> = Ok(123);\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_err_with(&self, f: impl FnOnce(&E) -> bool) -> bool {\n+    pub fn is_err_and(&self, f: impl FnOnce(&E) -> bool) -> bool {\n         matches!(self, Err(x) if f(x))\n     }\n "}]}