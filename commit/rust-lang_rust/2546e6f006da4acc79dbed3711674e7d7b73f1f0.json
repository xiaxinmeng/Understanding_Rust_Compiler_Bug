{"sha": "2546e6f006da4acc79dbed3711674e7d7b73f1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDZlNmYwMDZkYTRhY2M3OWRiZWQzNzExNjc0ZTdkN2I3M2YxZjA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-06T09:06:52Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-11T12:26:26Z"}, "message": "lintcheck: move out of clippy-dev into own crate", "tree": {"sha": "50c0205c8cf28c3819858d56cb7dc6fd19247929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50c0205c8cf28c3819858d56cb7dc6fd19247929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2546e6f006da4acc79dbed3711674e7d7b73f1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2546e6f006da4acc79dbed3711674e7d7b73f1f0", "html_url": "https://github.com/rust-lang/rust/commit/2546e6f006da4acc79dbed3711674e7d7b73f1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2546e6f006da4acc79dbed3711674e7d7b73f1f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99afc6e6ac2ce874c4fed32c083f1e160f533015", "url": "https://api.github.com/repos/rust-lang/rust/commits/99afc6e6ac2ce874c4fed32c083f1e160f533015", "html_url": "https://github.com/rust-lang/rust/commit/99afc6e6ac2ce874c4fed32c083f1e160f533015"}], "stats": {"total": 258, "additions": 199, "deletions": 59}, "files": [{"sha": "ffa9a5bce85ccbc0c0536439094b269f4f316a38", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -1,7 +1,7 @@\n [alias]\n uitest = \"test --test compile-test\"\n dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n-dev-lintcheck = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\"\n+dev-lintcheck = \"run --target-dir lintcheck/target --package lintcheck --bin lintcheck --manifest-path lintcheck/Cargo.toml  -- \"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "b1844e29b3273fa3e41a1a65fe070f4db1ffe73f", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -7,20 +7,11 @@ edition = \"2018\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n-flate2 = { version = \"1.0.19\", optional = true }\n-fs_extra = { version = \"1.2.0\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n-serde = { version = \"1.0\", features = [\"derive\"], optional = true }\n-serde_json = { version = \"1.0\", optional = true }\n shell-escape = \"0.1\"\n-tar = { version = \"0.4.30\", optional = true }\n-toml = { version = \"0.5\", optional = true }\n-ureq = { version = \"2.0.0-rc3\", optional = true }\n-rayon = { version = \"1.5.0\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\", \"rayon\"]\n deny-warnings = []"}, {"sha": "a95abfaceaae026af80e2d84dc628982d18d2ee6", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -12,7 +12,6 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n-pub mod lintcheck;\n pub mod new_lint;\n pub mod ra_setup;\n pub mod serve;"}, {"sha": "2a9f3e5348c4156c7ac5e0c7e473595ccf35d6e1", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -2,21 +2,13 @@\n \n use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n-\n-#[cfg(feature = \"lintcheck\")]\n-use clippy_dev::lintcheck;\n-\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         (\"bless\", Some(matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n-        #[cfg(feature = \"lintcheck\")]\n-        (\"lintcheck\", Some(matches)) => {\n-            lintcheck::run(&matches);\n-        },\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n@@ -53,34 +45,7 @@ fn main() {\n }\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    #[cfg(feature = \"lintcheck\")]\n-    let lintcheck_sbcmd = SubCommand::with_name(\"lintcheck\")\n-        .about(\"run clippy on a set of crates and check output\")\n-        .arg(\n-            Arg::with_name(\"only\")\n-                .takes_value(true)\n-                .value_name(\"CRATE\")\n-                .long(\"only\")\n-                .help(\"only process a single crate of the list\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"crates-toml\")\n-                .takes_value(true)\n-                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n-                .long(\"crates-toml\")\n-                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"threads\")\n-                .takes_value(true)\n-                .value_name(\"N\")\n-                .short(\"j\")\n-                .long(\"jobs\")\n-                .help(\"number of threads to use, 0 automatic choice\"),\n-        )\n-        .arg(Arg::with_name(\"fix\").help(\"runs cargo clippy --fix and checks if all suggestions apply\"));\n-\n-    let app = App::new(\"Clippy developer tooling\")\n+    App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n@@ -197,10 +162,6 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .validator_os(serve::validate_port),\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        );\n-\n-    #[cfg(feature = \"lintcheck\")]\n-    let app = app.subcommand(lintcheck_sbcmd);\n-\n-    app.get_matches()\n+        )\n+        .get_matches()\n }"}, {"sha": "071c1f896153fcdf5843405994271baccf076477", "filename": "lintcheck/Cargo.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -0,0 +1,19 @@\n+[package]\n+name = \"lintcheck\"\n+version = \"0.0.1\"\n+authors = [\"Matthias Kr\u00fcger <matthias.krueger@famsik.de>\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+clap = \"2.33\"\n+flate2 = {version = \"1.0.19\"}\n+fs_extra = {version = \"1.2.0\"}\n+rayon = {version = \"1.5.0\"}\n+serde = {version = \"1.0\", features = [\"derive\"]}\n+serde_json = {version = \"1.0\"}\n+tar = {version = \"0.4.30\"}\n+toml = {version = \"0.5\"}\n+ureq = {version = \"2.0.0-rc3\"}\n+\n+[features]\n+deny-warnings = []"}, {"sha": "a5ed9e27bd2bcba33b723d2c04f404f32f0fce3c", "filename": "lintcheck/README.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -0,0 +1,77 @@\n+# Clippy Dev Tool\n+\n+The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s\n+`x.py`.\n+\n+Functionalities (incomplete):\n+\n+## `lintcheck`\n+\n+Runs clippy on a fixed set of crates read from\n+`clippy_dev/lintcheck_crates.toml` and saves logs of the lint warnings into the\n+repo.  We can then check the diff and spot new or disappearing warnings.\n+\n+From the repo root, run:\n+\n+```\n+cargo run --target-dir clippy_dev/target --package clippy_dev \\\n+--bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\n+```\n+\n+or\n+\n+```\n+cargo dev-lintcheck\n+```\n+\n+By default the logs will be saved into\n+`lintcheck-logs/lintcheck_crates_logs.txt`.\n+\n+You can set a custom sources.toml by adding `--crates-toml custom.toml` or using\n+`LINTCHECK_TOML=\"custom.toml\"` where `custom.toml` must be a relative path from\n+the repo root.\n+\n+The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n+\n+### Configuring the Crate Sources\n+\n+The sources to check are saved in a `toml` file. There are three types of\n+sources.\n+\n+1. Crates-io Source\n+\n+   ```toml\n+   bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+   ```\n+   Requires a \"name\" and one or multiple \"versions\" to be checked.\n+\n+2. `git` Source\n+   ````toml\n+   puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n+   ````\n+   Requires a name, the url to the repo and unique identifier of a commit,\n+   branch or tag which is checked out before linting.  There is no way to always\n+   check `HEAD` because that would lead to changing lint-results as the repo\n+   would get updated.  If `git_url` or `git_hash` is missing, an error will be\n+   thrown.\n+\n+3. Local Dependency\n+   ```toml\n+   clippy = {name = \"clippy\", path = \"/home/user/clippy\"}\n+   ```\n+   For when you want to add a repository that is not published yet.\n+\n+#### Command Line Options (optional)\n+\n+```toml\n+bitflags = {name = \"bitflags\", versions = ['1.2.1'], options = ['-Wclippy::pedantic', '-Wclippy::cargo']}\n+```\n+\n+It is possible to specify command line options for each crate. This makes it\n+possible to only check a crate for certain lint groups. If no options are\n+specified, the lint groups `clippy::all`, `clippy::pedantic`, and\n+`clippy::cargo` are checked. If an empty array is specified only `clippy::all`\n+is checked.\n+\n+**Note:** `-Wclippy::all` is always enabled by default, unless `-Aclippy::all`\n+is explicitly specified in the options."}, {"sha": "dfee28f1a87128e0e4ef92472e72ba5968e55a7d", "filename": "lintcheck/lintcheck_crates.toml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Flintcheck_crates.toml?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -0,0 +1,35 @@\n+[crates]\n+# some of these are from cargotest\n+cargo = {name = \"cargo\", versions = ['0.49.0']}\n+iron = {name = \"iron\", versions = ['0.6.1']}\n+ripgrep = {name = \"ripgrep\", versions = ['12.1.1']}\n+xsv = {name = \"xsv\", versions = ['0.13.0']}\n+# commented out because of 173K clippy::match_same_arms msgs in language_type.rs\n+#tokei = { name = \"tokei\", versions = ['12.0.4']}\n+rayon = {name = \"rayon\", versions = ['1.5.0']}\n+serde = {name = \"serde\", versions = ['1.0.118']}\n+# top 10 crates.io dls\n+bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+# crash = {name = \"clippy_crash\", path = \"/tmp/clippy_crash\"}\n+libc = {name = \"libc\", versions = ['0.2.81']}\n+log = {name = \"log\", versions = ['0.4.11']}\n+proc-macro2 = {name = \"proc-macro2\", versions = ['1.0.24']}\n+quote = {name = \"quote\", versions = ['1.0.7']}\n+rand = {name = \"rand\", versions = ['0.7.3']}\n+rand_core = {name = \"rand_core\", versions = ['0.6.0']}\n+regex = {name = \"regex\", versions = ['1.3.2']}\n+syn = {name = \"syn\", versions = ['1.0.54']}\n+unicode-xid = {name = \"unicode-xid\", versions = ['0.2.1']}\n+# some more of dtolnays crates\n+anyhow = {name = \"anyhow\", versions = ['1.0.38']}\n+async-trait = {name = \"async-trait\", versions = ['0.1.42']}\n+cxx = {name = \"cxx\", versions = ['1.0.32']}\n+ryu = {name = \"ryu\", version = ['1.0.5']}\n+serde_yaml = {name = \"serde_yaml\", versions = ['0.8.17']}\n+thiserror = {name = \"thiserror\", versions = ['1.0.24']}\n+# some embark crates, there are other interesting crates but\n+# unfortunately adding them increases lintcheck runtime drastically\n+cfg-expr = {name = \"cfg-expr\", versions = ['0.7.1']}\n+puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n+rpmalloc = {name = \"rpmalloc\", versions = ['0.2.0']}\n+tame-oidc = {name = \"tame-oidc\", versions = ['0.1.0']}"}, {"sha": "f5a54cfa8dc5f46bf1445be05500eac9ef7db0e9", "filename": "lintcheck/src/main.rs", "status": "renamed", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2546e6f006da4acc79dbed3711674e7d7b73f1f0/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=2546e6f006da4acc79dbed3711674e7d7b73f1f0", "patch": "@@ -1,14 +1,11 @@\n // Run clippy on a fixed set of crates and collect the warnings.\n-// This helps observing the impact clippy changs have on a set of real-world code.\n+// This helps observing the impact clippy changes have on a set of real-world code (and not just our testsuite).\n //\n // When a new lint is introduced, we can search the results for new warnings and check for false\n // positives.\n \n-#![cfg(feature = \"lintcheck\")]\n #![allow(clippy::filter_map, clippy::collapsible_else_if)]\n \n-use crate::clippy_project_root;\n-\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{collections::HashMap, io::ErrorKind};\n@@ -18,7 +15,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use clap::ArgMatches;\n+use clap::{App, Arg, ArgMatches, SubCommand};\n use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n@@ -564,7 +561,9 @@ fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n /// # Panics\n ///\n /// This function panics if the clippy binaries don't exist.\n-pub fn run(clap_config: &ArgMatches) {\n+pub fn main() {\n+    let clap_config = &get_clap_config();\n+\n     let config = LintcheckConfig::from_clap(clap_config);\n \n     println!(\"Compiling clippy...\");\n@@ -800,6 +799,65 @@ fn create_dirs(krate_download_dir: &Path, extract_dir: &Path) {\n     });\n }\n \n+fn get_clap_config<'a>() -> ArgMatches<'a> {\n+    let lintcheck_sbcmd = SubCommand::with_name(\"lintcheck\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"only process a single crate of the list\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"crates-toml\")\n+                .takes_value(true)\n+                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n+                .long(\"crates-toml\")\n+                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"threads\")\n+                .takes_value(true)\n+                .value_name(\"N\")\n+                .short(\"j\")\n+                .long(\"jobs\")\n+                .help(\"number of threads to use, 0 automatic choice\"),\n+        )\n+        .arg(Arg::with_name(\"fix\").help(\"runs cargo clippy --fix and checks if all suggestions apply\"));\n+\n+    let app = App::new(\"Clippy developer tooling\");\n+\n+    let app = app.subcommand(lintcheck_sbcmd);\n+\n+    app.get_matches()\n+}\n+\n+/// Returns the path to the Clippy project directory\n+///\n+/// # Panics\n+///\n+/// Panics if the current directory could not be retrieved, there was an error reading any of the\n+/// Cargo.toml files or ancestor directory is the clippy root directory\n+#[must_use]\n+pub fn clippy_project_root() -> PathBuf {\n+    let current_dir = std::env::current_dir().unwrap();\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == std::io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result.unwrap();\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return path.to_path_buf();\n+        }\n+    }\n+    panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+}\n+\n #[test]\n fn lintcheck_test() {\n     let args = [", "previous_filename": "clippy_dev/src/lintcheck.rs"}]}