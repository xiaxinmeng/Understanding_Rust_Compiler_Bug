{"sha": "8766c2e35b6454ff51ab3deab3cd334ebd033da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjZjMmUzNWI2NDU0ZmY1MWFiM2RlYWIzY2QzMzRlYmQwMzNkYTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T20:00:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T23:57:36Z"}, "message": "core: Demode patterns", "tree": {"sha": "f5f6d0c3a53908a8d91f7b1ab47f5bd35d729d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f6d0c3a53908a8d91f7b1ab47f5bd35d729d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8766c2e35b6454ff51ab3deab3cd334ebd033da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8766c2e35b6454ff51ab3deab3cd334ebd033da1", "html_url": "https://github.com/rust-lang/rust/commit/8766c2e35b6454ff51ab3deab3cd334ebd033da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8766c2e35b6454ff51ab3deab3cd334ebd033da1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517206fd0876c17d5e1540ea5c544a51adf086de", "url": "https://api.github.com/repos/rust-lang/rust/commits/517206fd0876c17d5e1540ea5c544a51adf086de", "html_url": "https://github.com/rust-lang/rust/commit/517206fd0876c17d5e1540ea5c544a51adf086de"}], "stats": {"total": 170, "additions": 88, "deletions": 82}, "files": [{"sha": "d37fdb1a679d518f74b2f04053f85d7d04cb0cd6", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -39,7 +39,6 @@ Implicitly, all crates behave as if they included the following prologue:\n #[legacy_modes];\n #[legacy_exports];\n \n-#[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n #[warn(vecs_implicitly_copyable)];"}, {"sha": "97ef66ad8de1caa3060c2c3f1dba140a59fd78c6", "filename": "src/libcore/either.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -55,6 +55,7 @@ fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n     }\n }\n \n+// XXX bad copies. take arg by val\n fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n     -> {lefts: ~[T], rights: ~[U]} {\n     /*!\n@@ -75,6 +76,7 @@ fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n     return {lefts: move lefts, rights: move rights};\n }\n \n+// XXX bad copies\n pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n     //! Flips between left and right of a given either\n \n@@ -84,6 +86,7 @@ pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n     }\n }\n \n+// XXX bad copies\n pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>) -> Result<U, T> {\n     /*!\n      * Converts either::t to a result::t"}, {"sha": "285f84b6bf6b9abede15f5080d13d01c12dfcbba", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -941,7 +941,7 @@ mod tests {\n     #[test]\n     fn file_reader_not_exist() {\n         match io::file_reader(&Path(\"not a file\")) {\n-          result::Err(e) => {\n+          result::Err(copy e) => {\n             assert e == ~\"error opening not a file\";\n           }\n           result::Ok(_) => fail\n@@ -951,7 +951,7 @@ mod tests {\n     #[test]\n     fn file_writer_bad_name() {\n         match io::file_writer(&Path(\"?/?\"), ~[]) {\n-          result::Err(e) => {\n+          result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n           result::Ok(_) => fail\n@@ -961,7 +961,7 @@ mod tests {\n     #[test]\n     fn buffered_file_writer_bad_name() {\n         match io::buffered_file_writer(&Path(\"?/?\")) {\n-          result::Err(e) => {\n+          result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n           result::Ok(_) => fail"}, {"sha": "b03a0415145e30d0c4a3125bc3b28beec32d5561", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -170,34 +170,36 @@ pure fn repeat(times: uint, blk: fn() -> bool) {\n     }\n }\n \n+// XXX bad copies\n pure fn min<A:Copy Ord,IA:BaseIter<A>>(self: IA) -> A {\n     match do foldl::<A,Option<A>,IA>(self, None) |a, b| {\n         match a {\n-          Some(a_) if a_ < b => {\n+          Some(copy a_) if a_ < b => {\n             // FIXME (#2005): Not sure if this is successfully optimized to\n             // a move\n             a\n           }\n           _ => Some(b)\n         }\n     } {\n-        Some(val) => val,\n+        Some(move val) => val,\n         None => fail ~\"min called on empty iterator\"\n     }\n }\n \n+// XXX bad copies\n pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: IA) -> A {\n     match do foldl::<A,Option<A>,IA>(self, None) |a, b| {\n         match a {\n-          Some(a_) if a_ > b => {\n+          Some(copy a_) if a_ > b => {\n             // FIXME (#2005): Not sure if this is successfully optimized to\n             // a move.\n             a\n           }\n           _ => Some(b)\n         }\n     } {\n-        Some(val) => val,\n+        Some(move val) => val,\n         None => fail ~\"max called on empty iterator\"\n     }\n }"}, {"sha": "a1f65117ecfb33832127b61422f15ef22dae33ae", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -32,8 +32,8 @@ pub fn unwrap<T>(+m: Mut<T>) -> T {\n     // Borrowck should prevent us from calling unwrap while the value\n     // is in use, as that would be a move from a borrowed value.\n     assert (m.mode as uint) == (ReadOnly as uint);\n-    let Data {value, mode: _} <- m;\n-    return move value;\n+    let Data {value: move value, mode: _} = move m;\n+    return value;\n }\n \n impl<T> Data<T> {"}, {"sha": "31835f255b3a7bbe1046b27eb1031557bddb559e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -30,7 +30,7 @@ pure fn get<T: Copy>(opt: &Option<T>) -> T {\n      */\n \n     match *opt {\n-      Some(x) => return x,\n+      Some(copy x) => return x,\n       None => fail ~\"option::get none\"\n     }\n }\n@@ -58,7 +58,7 @@ pure fn expect<T: Copy>(opt: &Option<T>, +reason: ~str) -> T {\n      *\n      * Fails if the value equals `none`\n      */\n-    match *opt { Some(x) => x, None => fail reason }\n+    match *opt { Some(copy x) => x, None => fail reason }\n }\n \n pure fn map<T, U>(opt: &Option<T>, f: fn(x: &T) -> U) -> Option<U> {\n@@ -134,7 +134,7 @@ pure fn is_some<T>(opt: &Option<T>) -> bool {\n pure fn get_default<T: Copy>(opt: &Option<T>, +def: T) -> T {\n     //! Returns the contained value or a default\n \n-    match *opt { Some(x) => x, None => def }\n+    match *opt { Some(copy x) => x, None => def }\n }\n \n pure fn map_default<T, U>(opt: &Option<T>, +def: U,\n@@ -237,11 +237,11 @@ impl<T: Eq> Option<T> : Eq {\n                     Some(_) => false\n                 }\n             }\n-            Some(self_contents) => {\n+            Some(ref self_contents) => {\n                 match (*other) {\n                     None => false,\n                     Some(ref other_contents) =>\n-                        self_contents.eq(other_contents)\n+                        (*self_contents).eq(other_contents)\n                 }\n             }\n         }"}, {"sha": "8ec8d1a2b0870c3fa4df9614ca062bd56d8b39ad", "filename": "src/libcore/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -166,11 +166,11 @@ mod global_env {\n             do private::weaken_task |weak_po| {\n                 loop {\n                     match comm::select2(msg_po, weak_po) {\n-                      either::Left(MsgGetEnv(n, resp_ch)) => {\n-                        comm::send(resp_ch, impl_::getenv(n))\n+                      either::Left(MsgGetEnv(ref n, resp_ch)) => {\n+                        comm::send(resp_ch, impl_::getenv(*n))\n                       }\n-                      either::Left(MsgSetEnv(n, v, resp_ch)) => {\n-                        comm::send(resp_ch, impl_::setenv(n, v))\n+                      either::Left(MsgSetEnv(ref n, ref v, resp_ch)) => {\n+                        comm::send(resp_ch, impl_::setenv(*n, *v))\n                       }\n                       either::Left(MsgEnv(resp_ch)) => {\n                         comm::send(resp_ch, impl_::env())\n@@ -418,8 +418,8 @@ pub fn self_exe_path() -> Option<Path> {\n  */\n pub fn homedir() -> Option<Path> {\n     return match getenv(~\"HOME\") {\n-        Some(p) => if !str::is_empty(p) {\n-          Some(Path(p))\n+        Some(ref p) => if !str::is_empty(*p) {\n+          Some(Path(*p))\n         } else {\n           secondary()\n         },\n@@ -458,7 +458,7 @@ pub fn tmpdir() -> Path {\n \n     fn getenv_nonempty(v: &str) -> Option<Path> {\n         match getenv(v) {\n-            Some(x) =>\n+            Some(move x) =>\n                 if str::is_empty(x) {\n                     None\n                 } else {"}, {"sha": "6d023ed1bfb77f17898f30d55e3011615ff5c668", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -167,7 +167,7 @@ impl PosixPath : GenericPath {\n         if t.len() == 0 {\n             match self.filestem() {\n               None => copy self,\n-              Some(s) => self.with_filename(s)\n+              Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n             let t = ~\".\" + str::from_slice(t);\n@@ -239,11 +239,11 @@ impl WindowsPath : ToStr {\n     fn to_str() -> ~str {\n         let mut s = ~\"\";\n         match self.host {\n-          Some(h) => { s += \"\\\\\\\\\"; s += h; }\n+          Some(ref h) => { s += \"\\\\\\\\\"; s += *h; }\n           None => { }\n         }\n         match self.device {\n-          Some(d) => { s += d; s += \":\"; }\n+          Some(ref d) => { s += *d; s += \":\"; }\n           None => { }\n         }\n         if self.is_absolute {\n@@ -358,7 +358,7 @@ impl WindowsPath : GenericPath {\n         if t.len() == 0 {\n             match self.filestem() {\n               None => copy self,\n-              Some(s) => self.with_filename(s)\n+              Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n             let t = ~\".\" + str::from_slice(t);"}, {"sha": "97328a9b348723ed4a2f1b841594ba2e9771f660", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -1011,7 +1011,7 @@ impl<T: Send> Port<T>: Recv<T> {\n         let mut endp = None;\n         endp <-> self.endp;\n         let peek = match endp {\n-          Some(endp) => pipes::peek(&endp),\n+          Some(ref endp) => pipes::peek(endp),\n           None => fail ~\"peeking empty stream\"\n         };\n         self.endp <-> endp;\n@@ -1022,7 +1022,7 @@ impl<T: Send> Port<T>: Recv<T> {\n impl<T: Send> Port<T>: Selectable {\n     pure fn header() -> *PacketHeader unsafe {\n         match self.endp {\n-          Some(endp) => endp.header(),\n+          Some(ref endp) => endp.header(),\n           None => fail ~\"peeking empty stream\"\n         }\n     }\n@@ -1128,7 +1128,7 @@ impl<T: Send, U: Send, Left: Selectable Recv<T>, Right: Selectable Recv<U>>\n \n     fn select() -> Either<T, U> {\n         match self {\n-          (lp, rp) => match select2i(&lp, &rp) {\n+          (ref lp, ref rp) => match select2i(lp, rp) {\n             Left(()) => Left (lp.recv()),\n             Right(()) => Right(rp.recv())\n           }\n@@ -1137,7 +1137,7 @@ impl<T: Send, U: Send, Left: Selectable Recv<T>, Right: Selectable Recv<U>>\n \n     fn try_select() -> Either<Option<T>, Option<U>> {\n         match self {\n-          (lp, rp) => match select2i(&lp, &rp) {\n+          (ref lp, ref rp) => match select2i(lp, rp) {\n             Left(()) => Left (lp.try_recv()),\n             Right(()) => Right(rp.try_recv())\n           }"}, {"sha": "9c96b99e6dfe8b478f027496f950a99f21309a43", "filename": "src/libcore/result.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -24,9 +24,9 @@ enum Result<T, U> {\n  */\n pure fn get<T: Copy, U>(res: &Result<T, U>) -> T {\n     match *res {\n-      Ok(t) => t,\n-      Err(the_err) => unsafe {\n-        fail fmt!(\"get called on error result: %?\", the_err)\n+      Ok(copy t) => t,\n+      Err(ref the_err) => unsafe {\n+        fail fmt!(\"get called on error result: %?\", *the_err)\n       }\n     }\n }\n@@ -42,7 +42,7 @@ pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n     match *res {\n         Ok(ref t) => t,\n         Err(ref the_err) => unsafe {\n-            fail fmt!(\"get_ref called on error result: %?\", the_err)\n+            fail fmt!(\"get_ref called on error result: %?\", *the_err)\n         }\n     }\n }\n@@ -56,7 +56,7 @@ pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n  */\n pure fn get_err<T, U: Copy>(res: &Result<T, U>) -> U {\n     match *res {\n-      Err(u) => u,\n+      Err(copy u) => u,\n       Ok(_) => fail ~\"get_err called on ok result\"\n     }\n }\n@@ -82,8 +82,8 @@ pure fn is_err<T, U>(res: &Result<T, U>) -> bool {\n  */\n pure fn to_either<T: Copy, U: Copy>(res: &Result<U, T>) -> Either<T, U> {\n     match *res {\n-      Ok(res) => either::Right(res),\n-      Err(fail_) => either::Left(fail_)\n+      Ok(copy res) => either::Right(res),\n+      Err(copy fail_) => either::Left(fail_)\n     }\n }\n \n@@ -123,9 +123,9 @@ fn chain_err<T: Copy, U: Copy, V: Copy>(\n     +res: Result<T, V>,\n     op: fn(+t: V) -> Result<T, U>)\n     -> Result<T, U> {\n-    move match res {\n-      Ok(t) => Ok(t),\n-      Err(v) => op(v)\n+    match move res {\n+      Ok(move t) => Ok(t),\n+      Err(move v) => op(v)\n     }\n }\n \n@@ -145,7 +145,7 @@ fn chain_err<T: Copy, U: Copy, V: Copy>(\n  */\n fn iter<T, E>(res: &Result<T, E>, f: fn((&T))) {\n     match *res {\n-      Ok(t) => f(&t),\n+      Ok(ref t) => f(t),\n       Err(_) => ()\n     }\n }\n@@ -161,7 +161,7 @@ fn iter<T, E>(res: &Result<T, E>, f: fn((&T))) {\n fn iter_err<T, E>(res: &Result<T, E>, f: fn((&E))) {\n     match *res {\n       Ok(_) => (),\n-      Err(e) => f(&e)\n+      Err(ref e) => f(e)\n     }\n }\n \n@@ -182,8 +182,8 @@ fn iter_err<T, E>(res: &Result<T, E>, f: fn((&E))) {\n fn map<T, E: Copy, U: Copy>(res: &Result<T, E>, op: fn((&T)) -> U)\n   -> Result<U, E> {\n     match *res {\n-      Ok(t) => Ok(op(&t)),\n-      Err(e) => Err(e)\n+      Ok(ref t) => Ok(op(t)),\n+      Err(copy e) => Err(e)\n     }\n }\n \n@@ -198,8 +198,8 @@ fn map<T, E: Copy, U: Copy>(res: &Result<T, E>, op: fn((&T)) -> U)\n fn map_err<T: Copy, E, F: Copy>(res: &Result<T, E>, op: fn((&E)) -> F)\n   -> Result<T, F> {\n     match *res {\n-      Ok(t) => Ok(t),\n-      Err(e) => Err(op(&e))\n+      Ok(copy t) => Ok(t),\n+      Err(ref e) => Err(op(e))\n     }\n }\n \n@@ -210,15 +210,15 @@ impl<T, E> Result<T, E> {\n \n     fn iter(f: fn((&T))) {\n         match self {\n-          Ok(t) => f(&t),\n+          Ok(ref t) => f(t),\n           Err(_) => ()\n         }\n     }\n \n     fn iter_err(f: fn((&E))) {\n         match self {\n           Ok(_) => (),\n-          Err(e) => f(&e)\n+          Err(ref e) => f(e)\n         }\n     }\n }\n@@ -228,8 +228,8 @@ impl<T: Copy, E> Result<T, E> {\n \n     fn map_err<F:Copy>(op: fn((&E)) -> F) -> Result<T,F> {\n         match self {\n-          Ok(t) => Ok(t),\n-          Err(e) => Err(op(&e))\n+          Ok(copy t) => Ok(t),\n+          Err(ref e) => Err(op(e))\n         }\n     }\n }\n@@ -239,8 +239,8 @@ impl<T, E: Copy> Result<T, E> {\n \n     fn map<U:Copy>(op: fn((&T)) -> U) -> Result<U,E> {\n         match self {\n-          Ok(t) => Ok(op(&t)),\n-          Err(e) => Err(e)\n+          Ok(ref t) => Ok(op(t)),\n+          Err(copy e) => Err(e)\n         }\n     }\n }\n@@ -280,8 +280,8 @@ fn map_vec<T,U:Copy,V:Copy>(\n     let mut vs: ~[V] = vec::with_capacity(vec::len(ts));\n     for vec::each(ts) |t| {\n         match op(t) {\n-          Ok(v) => vs.push(v),\n-          Err(u) => return Err(u)\n+          Ok(copy v) => vs.push(v),\n+          Err(copy u) => return Err(u)\n         }\n     }\n     return Ok(move vs);\n@@ -292,9 +292,9 @@ fn map_opt<T,U:Copy,V:Copy>(\n \n     match *o_t {\n       None => Ok(None),\n-      Some(t) => match op(&t) {\n-        Ok(v) => Ok(Some(v)),\n-        Err(e) => Err(e)\n+      Some(ref t) => match op(t) {\n+        Ok(copy v) => Ok(Some(v)),\n+        Err(copy e) => Err(e)\n       }\n     }\n }\n@@ -317,8 +317,8 @@ fn map_vec2<S,T,U:Copy,V:Copy>(ss: &[S], ts: &[T],\n     let mut i = 0u;\n     while i < n {\n         match op(&ss[i],&ts[i]) {\n-          Ok(v) => vs.push(v),\n-          Err(u) => return Err(u)\n+          Ok(copy v) => vs.push(v),\n+          Err(copy u) => return Err(u)\n         }\n         i += 1u;\n     }\n@@ -339,7 +339,7 @@ fn iter_vec2<S,T,U:Copy>(ss: &[S], ts: &[T],\n     while i < n {\n         match op(&ss[i],&ts[i]) {\n           Ok(()) => (),\n-          Err(u) => return Err(u)\n+          Err(copy u) => return Err(u)\n         }\n         i += 1u;\n     }\n@@ -365,15 +365,15 @@ fn unwrap_err<T, U>(+res: Result<T, U>) -> U {\n impl<T:Eq,U:Eq> Result<T,U> : Eq {\n     pure fn eq(other: &Result<T,U>) -> bool {\n         match self {\n-            Ok(e0a) => {\n+            Ok(ref e0a) => {\n                 match (*other) {\n-                    Ok(e0b) => e0a == e0b,\n+                    Ok(ref e0b) => *e0a == *e0b,\n                     _ => false\n                 }\n             }\n-            Err(e0a) => {\n+            Err(ref e0a) => {\n                 match (*other) {\n-                    Err(e0b) => e0a == e0b,\n+                    Err(ref e0b) => *e0a == *e0b,\n                     _ => false\n                 }\n             }"}, {"sha": "40c2bc833517eb48d97a74dc74242b90f18bec65", "filename": "src/libcore/run.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -94,11 +94,11 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n     // On posixy systems we can pass a char** for envp, which is\n     // a null-terminated array of \"k=v\\n\" strings.\n     match *env {\n-      Some(es) if !vec::is_empty(es) => {\n+      Some(ref es) if !vec::is_empty(*es) => {\n         let mut tmps = ~[];\n         let mut ptrs = ~[];\n \n-        for vec::each(es) |e| {\n+        for vec::each(*es) |e| {\n             let (k,v) = copy *e;\n             let t = @(fmt!(\"%s=%s\", k, v));\n             tmps.push(t);\n@@ -141,7 +141,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n fn with_dirp<T>(d: &Option<~str>,\n                 cb: fn(*libc::c_char) -> T) -> T {\n     match *d {\n-      Some(dir) => str::as_c_str(dir, cb),\n+      Some(ref dir) => str::as_c_str(*dir, cb),\n       None => cb(ptr::null())\n     }\n }\n@@ -312,11 +312,11 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n     while count > 0 {\n         let stream = comm::recv(p);\n         match stream {\n-            (1, s) => {\n-                outs = copy s;\n+            (1, copy s) => {\n+                outs = s;\n             }\n-            (2, s) => {\n-                errs = copy s;\n+            (2, copy s) => {\n+                errs = s;\n             }\n             (n, _) => {\n                 fail(fmt!(\"program_output received an unexpected file \\\n@@ -405,6 +405,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(non_implicitly_copyable_typarams)]\n     pub fn test_pipes() {\n         let pipe_in = os::pipe();\n         let pipe_out = os::pipe();\n@@ -420,7 +421,7 @@ mod tests {\n \n         if pid == -1i32 { fail; }\n         let expected = ~\"test\";\n-        writeclose(pipe_in.out, expected);\n+        writeclose(pipe_in.out, copy expected);\n         let actual = readclose(pipe_out.in);\n         readclose(pipe_err.in);\n         os::waitpid(pid);"}, {"sha": "1b219e16e0982c27ff77fccc694d127b9e23cc2a", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -135,7 +135,7 @@ pub mod linear {\n                                          k: &K) -> SearchResult {\n             let _ = for self.bucket_sequence(hash) |i| {\n                 match buckets[i] {\n-                    Some(bkt) => if bkt.hash == hash && *k == bkt.key {\n+                    Some(ref bkt) => if bkt.hash == hash && *k == bkt.key {\n                         return FoundEntry(i);\n                     },\n                     None => return FoundHole(i)\n@@ -333,7 +333,7 @@ pub mod linear {\n                     // FIXME (#3148): Once we rewrite found_entry, this\n                     // failure case won't be necessary\n                     match self.buckets[idx] {\n-                        Some(bkt) => {Some(copy bkt.value)}\n+                        Some(Bucket {value: copy value, _}) => {Some(value)}\n                         None => fail ~\"LinearMap::find: internal logic error\"\n                     }\n                 }"}, {"sha": "eda765180017560aabe2e40a6d95641868466184", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -115,14 +115,14 @@ pub fn test_tls_modify() unsafe {\n     fn my_key(+_x: @~str) { }\n     local_data_modify(my_key, |data| {\n         match data {\n-            Some(@val) => fail ~\"unwelcome value: \" + val,\n+            Some(@ref val) => fail ~\"unwelcome value: \" + *val,\n             None       => Some(@~\"first data\")\n         }\n     });\n     local_data_modify(my_key, |data| {\n         match data {\n             Some(@~\"first data\") => Some(@~\"next data\"),\n-            Some(@val)           => fail ~\"wrong value: \" + val,\n+            Some(@ref val)           => fail ~\"wrong value: \" + *val,\n             None                 => fail ~\"missing value\"\n         }\n     });"}, {"sha": "33e711ce9ac514b8898b5868af6a62e7fe38b595", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -451,7 +451,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n             // it should be enabled only in debug builds.\n             let new_generation =\n                 match *old_ancestors {\n-                    Some(arc) => access_ancestors(&arc, |a| a.generation+1),\n+                    Some(ref arc) => access_ancestors(arc, |a| a.generation+1),\n                     None      => 0 // the actual value doesn't really matter.\n                 };\n             assert new_generation < uint::max_value;\n@@ -541,8 +541,8 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n \n             //let mut notifier = None;//notify_chan.map(|c| AutoNotify(c));\n             let notifier = match notify_chan {\n-                Some(notify_chan_value) => {\n-                    let moved_ncv = move_it!(notify_chan_value);\n+                Some(ref notify_chan_value) => {\n+                    let moved_ncv = move_it!(*notify_chan_value);\n                     Some(AutoNotify(move moved_ncv))\n                 }\n                 _ => None"}, {"sha": "69b5974b5588b886e1814d67a72fbf8835ae475a", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -345,7 +345,7 @@ impl<A: IterBytes> Option<A>: IterBytes {\n     #[inline(always)]\n     pure fn iter_bytes(lsb0: bool, f: Cb) {\n         match self {\n-          Some(a) => iter_bytes_2(&0u8, &a, lsb0, f),\n+          Some(ref a) => iter_bytes_2(&0u8, a, lsb0, f),\n           None => 1u8.iter_bytes(lsb0, f)\n         }\n     }"}, {"sha": "aba511f0a7fe78873d608ba330f69197fb3effa5", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c2e35b6454ff51ab3deab3cd334ebd033da1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=8766c2e35b6454ff51ab3deab3cd334ebd033da1", "patch": "@@ -809,7 +809,7 @@ pure fn filter_map<T, U: Copy>(v: &[T], f: fn(t: &T) -> Option<U>)\n     for each(v) |elem| {\n         match f(elem) {\n           None => {/* no-op */ }\n-          Some(result_elem) => unsafe { result.push(result_elem); }\n+          Some(move result_elem) => unsafe { result.push(result_elem); }\n         }\n     }\n     move result\n@@ -2289,7 +2289,7 @@ mod tests {\n \n     #[test]\n     fn test_dedup() {\n-        fn case(-a: ~[uint], -b: ~[uint]) {\n+        fn case(+a: ~[uint], +b: ~[uint]) {\n             let mut v = a;\n             v.dedup();\n             assert(v == b);\n@@ -3084,6 +3084,7 @@ mod tests {\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n     fn test_grow_fn_fail() {\n         let mut v = ~[];\n         do v.grow_fn(100) |i| {"}]}