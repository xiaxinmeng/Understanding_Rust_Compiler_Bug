{"sha": "929ff68376e62b10f71df27481b97c42bb7a69d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOWZmNjgzNzZlNjJiMTBmNzFkZjI3NDgxYjk3YzQyYmI3YTY5ZDU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-15T22:46:11Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-21T22:20:00Z"}, "message": "Hold a `TyCtxt` in the HIR const-checker", "tree": {"sha": "9a616bb53ae144ed29a7469639b2f90fbc1e9b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a616bb53ae144ed29a7469639b2f90fbc1e9b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/929ff68376e62b10f71df27481b97c42bb7a69d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/929ff68376e62b10f71df27481b97c42bb7a69d5", "html_url": "https://github.com/rust-lang/rust/commit/929ff68376e62b10f71df27481b97c42bb7a69d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/929ff68376e62b10f71df27481b97c42bb7a69d5/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a98d20a260883739f5c31d67fc0d5918863742d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98d20a260883739f5c31d67fc0d5918863742d1", "html_url": "https://github.com/rust-lang/rust/commit/a98d20a260883739f5c31d67fc0d5918863742d1"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "b90959518c23da247dbcef378043576616ace518", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/929ff68376e62b10f71df27481b97c42bb7a69d5/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/929ff68376e62b10f71df27481b97c42bb7a69d5/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=929ff68376e62b10f71df27481b97c42bb7a69d5", "patch": "@@ -11,7 +11,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc::hir::map::Map;\n use rustc::hir;\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use syntax::ast::Mutability;\n@@ -75,31 +74,29 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n \n #[derive(Copy, Clone)]\n struct CheckConstVisitor<'tcx> {\n-    sess: &'tcx Session,\n-    hir_map: &'tcx Map<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     const_kind: Option<ConstKind>,\n }\n \n impl<'tcx> CheckConstVisitor<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Self {\n         CheckConstVisitor {\n-            sess: &tcx.sess,\n-            hir_map: tcx.hir(),\n+            tcx,\n             const_kind: None,\n         }\n     }\n \n     /// Emits an error when an unsupported expression is found in a const context.\n     fn const_check_violated(&self, bad_op: &str, span: Span) {\n-        if self.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-            self.sess.span_warn(span, \"skipping const checks\");\n+        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+            self.tcx.sess.span_warn(span, \"skipping const checks\");\n             return;\n         }\n \n         let const_kind = self.const_kind\n             .expect(\"`const_check_violated` may only be called inside a const context\");\n \n-        span_err!(self.sess, span, E0744, \"`{}` is not allowed in a `{}`\", bad_op, const_kind);\n+        span_err!(self.tcx.sess, span, E0744, \"`{}` is not allowed in a `{}`\", bad_op, const_kind);\n     }\n \n     /// Saves the parent `const_kind` before calling `f` and restores it afterwards.\n@@ -113,7 +110,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n@@ -122,7 +119,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body) {\n-        let kind = ConstKind::for_body(body, self.hir_map);\n+        let kind = ConstKind::for_body(body, self.tcx.hir());\n         self.recurse_into(kind, |this| hir::intravisit::walk_body(this, body));\n     }\n "}]}