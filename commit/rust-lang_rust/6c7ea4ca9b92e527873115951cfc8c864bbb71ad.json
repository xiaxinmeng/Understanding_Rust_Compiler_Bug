{"sha": "6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjN2VhNGNhOWI5MmU1Mjc4NzMxMTU5NTFjZmM4Yzg2NGJiYjcxYWQ=", "commit": {"author": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-27T02:54:24Z"}, "committer": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-27T03:02:32Z"}, "message": "refactored to implement without trait", "tree": {"sha": "bddc763895306ba86dfc138461a232f293fcff6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bddc763895306ba86dfc138461a232f293fcff6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "html_url": "https://github.com/rust-lang/rust/commit/6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ea4ca9b92e527873115951cfc8c864bbb71ad/comments", "author": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2e3144a98f7a636fd6a33fce122121431ad9b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e3144a98f7a636fd6a33fce122121431ad9b4", "html_url": "https://github.com/rust-lang/rust/commit/4c2e3144a98f7a636fd6a33fce122121431ad9b4"}], "stats": {"total": 120, "additions": 45, "deletions": 75}, "files": [{"sha": "506e54ba5e4e6b622a5e670b8a7e352530b8b941", "filename": "src/libcore/option.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ea4ca9b92e527873115951cfc8c864bbb71ad/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ea4ca9b92e527873115951cfc8c864bbb71ad/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "patch": "@@ -878,6 +878,17 @@ impl<T: Default> Option<T> {\n     }\n }\n \n+# [unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: Deref> Option<T> {\n+    /// Converts from `&Option<T>` to `Option<&T::Target>`.\n+    ///\n+    /// Leaves the original Option in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the contents via `Deref`.\n+    pub fn deref(&self) -> Option<&T::Target> {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+}\n+\n impl<T, E> Option<Result<T, E>> {\n     /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n     ///\n@@ -978,24 +989,6 @@ impl<T> From<T> for Option<T> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-/// Extension trait to get a reference of an Option via the Deref trait.\n-pub trait OptionDeref<T: Deref> {\n-    /// Converts from `&Option<T>` to `Option<&T::Target>`.\n-    ///\n-    /// Leaves the original Option in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the contents via `Deref`.\n-    fn deref(&self) -> Option<&T::Target>;\n-}\n-\n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-impl<T: Deref> OptionDeref<T> for Option<T>\n-{\n-    fn deref(&self) -> Option<&T::Target> {\n-        self.as_ref().map(|t| t.deref())\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "fbf2035e83f46ec5a506bf2152e950e87d79036e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 34, "deletions": 57, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ea4ca9b92e527873115951cfc8c864bbb71ad/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ea4ca9b92e527873115951cfc8c864bbb71ad/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6c7ea4ca9b92e527873115951cfc8c864bbb71ad", "patch": "@@ -909,6 +909,40 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+impl<T: Deref, E: Deref> Result<T, E> {\n+    #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Ok` arm of the Result via\n+    /// `Deref`.\n+    pub fn deref_ok(&self) -> Result<&T::Target, &E> {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+\n+    #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+    /// Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Err` arm of the Result via\n+    /// `Deref`.\n+    pub fn deref_err(&self) -> Result<&T, &E::Target>\n+    {\n+        self.as_ref().map_err(|e| e.deref())\n+    }\n+\n+    #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing both the `Ok` and `Err` arms\n+    /// of the Result via `Deref`.\n+    pub fn deref(&self) -> Result<&T::Target, &E::Target>\n+    {\n+        self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n+    }\n+}\n+\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///\n@@ -999,63 +1033,6 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-/// Extension trait to get a reference to a Result via the Deref trait.\n-pub trait ResultDeref<T, E> {\n-    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.\n-    ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the `Ok` arm of the Result via\n-    /// `Deref`.\n-    fn deref_ok(&self) -> Result<&T::Target, &E>\n-                where\n-                       T: Deref;\n-\n-    /// Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.\n-    ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the `Err` arm of the Result via\n-    /// `Deref`.\n-    fn deref_err(&self) -> Result<&T, &E::Target>\n-                 where\n-                        E: Deref;\n-\n-    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.\n-    ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing both the `Ok` and `Err` arms\n-    /// of the Result via `Deref`.\n-    fn deref(&self) -> Result<&T::Target, &E::Target>\n-             where\n-                    T: Deref,\n-                    E: Deref;\n-}\n-\n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-impl<T, E> ResultDeref<T, E> for Result<T, E> {\n-    fn deref_ok(&self) -> Result<&T::Target, &E>\n-                where\n-                       T: Deref,\n-    {\n-        self.as_ref().map(|t| t.deref())\n-    }\n-\n-    fn deref_err(&self) -> Result<&T, &E::Target>\n-                 where\n-                        E: Deref,\n-    {\n-        self.as_ref().map_err(|e| e.deref())\n-    }\n-\n-    fn deref(&self) -> Result<&T::Target, &E::Target>\n-             where\n-                    T: Deref,\n-                    E: Deref,\n-    {\n-        self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////"}]}