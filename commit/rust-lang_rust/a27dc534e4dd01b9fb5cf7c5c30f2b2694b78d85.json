{"sha": "a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyN2RjNTM0ZTRkZDAxYjlmYjVjZjdjNWMzMGYyYjI2OTRiNzhkODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-20T10:06:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-20T10:06:29Z"}, "message": "auto merge of #13640 : jbcrail/rust/spelling-updates, r=alexcrichton", "tree": {"sha": "cfbdbc838c338369417414c2656822e0cbdcedd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbdbc838c338369417414c2656822e0cbdcedd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "html_url": "https://github.com/rust-lang/rust/commit/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5b21951b6cf07360b423933d8518a5cb170cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5b21951b6cf07360b423933d8518a5cb170cc7", "html_url": "https://github.com/rust-lang/rust/commit/9b5b21951b6cf07360b423933d8518a5cb170cc7"}, {"sha": "ae555e38305972718d19d556b13048d89c7d3c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae555e38305972718d19d556b13048d89c7d3c46", "html_url": "https://github.com/rust-lang/rust/commit/ae555e38305972718d19d556b13048d89c7d3c46"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "784724e9a6cd8ac95583b3a1fa0ef1826a83bd0b", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -29,7 +29,7 @@ let x: int = 42;\n let y: ~str = format!(\"{:t}\", x);   // binary\n let y: ~str = format!(\"{:o}\", x);   // octal\n let y: ~str = format!(\"{:x}\", x);   // lowercase hexadecimal\n-let y: ~str = format!(\"{:X}\", x);   // uppercase hexidecimal\n+let y: ~str = format!(\"{:X}\", x);   // uppercase hexadecimal\n ~~~\n \n **String to int, in non-base-10**"}, {"sha": "f0ffd46e6c2cc7b760ad5f034752a1e3de2da861", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -337,7 +337,7 @@ Besides classical synchronization mechanisms like mutexes, one possibility in\n Rust is to use channels (in `std::comm`) to forward data from the C thread\n that invoked the callback into a Rust task.\n \n-If an asychronous callback targets a special object in the Rust address space\n+If an asynchronous callback targets a special object in the Rust address space\n it is also absolutely necessary that no more callbacks are performed by the\n C library after the respective Rust object gets destroyed.\n This can be achieved by unregistering the callback in the object's"}, {"sha": "7f58e276ad5516604460bc6468e80f58e4d0802c", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -561,7 +561,7 @@ points at a static constant).\n \n Lifetimes can be named and referenced. For example, the special lifetime\n `'static`, which does not go out of scope, can be used to create global\n-variables and communicate between tasks (see the manual for usecases).\n+variables and communicate between tasks (see the manual for use cases).\n \n ## Parameter Lifetimes\n "}, {"sha": "513f4ab22e3ebe0953c49f93faebb0ce22dc8d88", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -226,7 +226,7 @@ Now here's the exciting part:\n because `numbers` is an owned type,\n when it is sent across the channel,\n it is actually *moved*,\n-transfering ownership of `numbers` between tasks.\n+transferring ownership of `numbers` between tasks.\n This ownership transfer is *very fast* -\n in this case simply copying a pointer -\n while also ensuring that the original owning task cannot create data races by continuing to read or write to `numbers` in parallel with the new owner.\n@@ -318,7 +318,7 @@ fn main() {\n This is almost exactly the same,\n except that this time `numbers` is first put into an `Arc`.\n `Arc::new` creates the `Arc`,\n-`.clone()` makes another `Arc` that referrs to the same contents.\n+`.clone()` makes another `Arc` that refers to the same contents.\n So we clone the `Arc` for each task,\n send that clone down the channel,\n and then use it to print out a number."}, {"sha": "46a4756ce84e22807c6f01dc61e8c0c210704701", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -295,7 +295,7 @@ Raw string literals do not process any escapes. They start with the character\n `U+0022` (double-quote) character. The _raw string body_ is not defined in the\n EBNF grammar above: it can contain any sequence of Unicode characters and is\n terminated only by another `U+0022` (double-quote) character, followed by the\n-same number of `U+0023` (`#`) characters that preceeded the opening `U+0022`\n+same number of `U+0023` (`#`) characters that preceded the opening `U+0022`\n (double-quote) character.\n \n All Unicode characters contained in the raw string body represent themselves,\n@@ -2256,7 +2256,7 @@ fn main() {\n Certain aspects of Rust may be implemented in the compiler, but they're not\n necessarily ready for every-day use. These features are often of \"prototype\n quality\" or \"almost production ready\", but may not be stable enough to be\n-considered a full-fleged language feature.\n+considered a full-fledged language feature.\n \n For this reason, Rust recognizes a special crate-level attribute of the form:\n \n@@ -4005,7 +4005,7 @@ dependencies will be used:\n    could only be found in an `rlib` format. Remember that `staticlib` formats\n    are always ignored by `rustc` for crate-linking purposes.\n \n-2. If a static library is being produced, all upstream dependecies are\n+2. If a static library is being produced, all upstream dependencies are\n    required to be available in `rlib` formats. This requirement stems from the\n    same reasons that a dynamic library must have all dynamic dependencies.\n "}, {"sha": "9000d2c87378b3fd55c4f39f6f995e0f8a66fb0c", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=a27dc534e4dd01b9fb5cf7c5c30f2b2694b78d85", "patch": "@@ -74,11 +74,11 @@ struct Octal;\n #[deriving(Clone, Eq)]\n struct Decimal;\n \n-/// A hexidecimal (base 16) radix, formatted with lower-case characters\n+/// A hexadecimal (base 16) radix, formatted with lower-case characters\n #[deriving(Clone, Eq)]\n struct LowerHex;\n \n-/// A hexidecimal (base 16) radix, formatted with upper-case characters\n+/// A hexadecimal (base 16) radix, formatted with upper-case characters\n #[deriving(Clone, Eq)]\n pub struct UpperHex;\n "}]}