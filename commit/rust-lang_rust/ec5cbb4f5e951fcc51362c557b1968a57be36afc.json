{"sha": "ec5cbb4f5e951fcc51362c557b1968a57be36afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNWNiYjRmNWU5NTFmY2M1MTM2MmM1NTdiMTk2OGE1N2JlMzZhZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-05T21:44:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-05T21:47:20Z"}, "message": "core: Remove swappable. Unused", "tree": {"sha": "b490fcd1b437934c840a232ad8b2aaaecc3de8e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b490fcd1b437934c840a232ad8b2aaaecc3de8e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec5cbb4f5e951fcc51362c557b1968a57be36afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5cbb4f5e951fcc51362c557b1968a57be36afc", "html_url": "https://github.com/rust-lang/rust/commit/ec5cbb4f5e951fcc51362c557b1968a57be36afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec5cbb4f5e951fcc51362c557b1968a57be36afc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c641678e5f2f95650362dc13c89b7c95728a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c641678e5f2f95650362dc13c89b7c95728a49", "html_url": "https://github.com/rust-lang/rust/commit/d3c641678e5f2f95650362dc13c89b7c95728a49"}], "stats": {"total": 100, "additions": 0, "deletions": 100}, "files": [{"sha": "6b4c7ad7d3ca08078bc65ff55abab1a155da3e30", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec5cbb4f5e951fcc51362c557b1968a57be36afc/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ec5cbb4f5e951fcc51362c557b1968a57be36afc/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=ec5cbb4f5e951fcc51362c557b1968a57be36afc", "patch": "@@ -43,7 +43,6 @@ export comm, task, future;\n export extfmt;\n export tuple;\n export to_str;\n-export swappable;\n export dvec, dvec_iter;\n \n // NDM seems to be necessary for resolve to work\n@@ -164,7 +163,6 @@ mod option_iter {\n }\n mod result;\n mod to_str;\n-mod swappable;\n mod dvec;\n #[path=\"iter-trait\"]\n mod dvec_iter {"}, {"sha": "5df9b2c4846313d866b7b9a016eb98ac6f201632", "filename": "src/libcore/swappable.rs", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d3c641678e5f2f95650362dc13c89b7c95728a49/src%2Flibcore%2Fswappable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c641678e5f2f95650362dc13c89b7c95728a49/src%2Flibcore%2Fswappable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fswappable.rs?ref=d3c641678e5f2f95650362dc13c89b7c95728a49", "patch": "@@ -1,98 +0,0 @@\n-export swappable;\n-export unwrap;\n-export methods;\n-\n-#[doc = \"\n-A value that may be swapped out temporarily while it is being processed\n-and then replaced.  Swappables are most useful when working with unique\n-values, which often cannot be mutated unless they are stored in the local\n-stack frame to ensure memory safety.\n-\n-The type guarantees the invariant that the value is always \\\"swapped in\\\"\n-except during the execution of the `swap()` and `with()` methods.\n-\"]\n-type swappable<A> = {\n-    mut o_t: option<A>\n-};\n-\n-#[doc = \"Create a swappable swapped in with a given initial value\"]\n-fn swappable<A>(+t: A) -> swappable<A> {\n-    {mut o_t: some(t)}\n-}\n-\n-#[doc = \"Consumes a swappable and returns its contents without copying\"]\n-fn unwrap<A>(-s: swappable<A>) -> A {\n-    let {o_t: o_t} <- s;\n-    option::unwrap(o_t)\n-}\n-\n-impl methods<A> for swappable<A> {\n-    #[doc = \"\n-         Overwrites the contents of the swappable\n-    \"]\n-    fn set(+a: A) {\n-        self.o_t <- some(a);\n-    }\n-\n-    #[doc = \"\n-         Invokes `f()` with the current value but replaces the\n-         current value when complete.  Returns the result of `f()`.\n-\n-         Attempts to read or access the receiver while `f()` is executing\n-         will fail dynamically.\n-    \"]\n-    fn with<B>(f: fn(A) -> B) -> B {\n-        let mut o_u = none;\n-        self.swap { |t| o_u <- some(f(t)); t }\n-        option::unwrap(o_u)\n-    }\n-\n-    #[doc = \"\n-         Invokes `f()` with the current value and then replaces the\n-         current value with the result of `f()`.\n-\n-         Attempts to read or access the receiver while `f()` is executing\n-         will fail dynamically.\n-    \"]\n-    fn swap(f: fn(-A) -> A) {\n-        alt self.o_t {\n-          none { fail \"no value present---already swapped?\"; }\n-          some(_) {}\n-        }\n-\n-        let mut o_t = none;\n-        o_t <-> self.o_t;\n-        self.o_t <- some(f(option::unwrap(o_t)));\n-    }\n-\n-    #[doc = \"True if there is a value present in this swappable\"]\n-    fn is_present() -> bool {\n-        alt self.o_t {\n-          none {false}\n-          some(_) {true}\n-        }\n-    }\n-\n-    #[doc = \"\n-        Removes the value from the swappable.  Any further attempts\n-        to use the swapabble without first invoking `set()` will fail.\n-    \"]\n-    fn take() -> A {\n-        alt self.o_t {\n-          none { fail \"swapped out\"; }\n-          some(_) {}\n-        }\n-\n-        let mut o_t = none;\n-        option::unwrap(o_t)\n-    }\n-}\n-\n-impl methods<A:copy> for swappable<A> {\n-    #[doc = \"\n-        Copies out the contents of the swappable\n-    \"]\n-    fn get() -> A {\n-        self.o_t.get()\n-    }\n-}\n\\ No newline at end of file"}]}