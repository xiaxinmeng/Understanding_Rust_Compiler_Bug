{"sha": "d20b6927569a308baf41ad58b854775961b49bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMGI2OTI3NTY5YTMwOGJhZjQxYWQ1OGI4NTQ3NzU5NjFiNDliZjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-08T22:58:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-08T22:58:28Z"}, "message": "Rollup merge of #60627 - matklad:test, r=estebank\n\ntest for #50518\n\nIt was fixed somewhere between 1.28.0 and 1.31.1\n\ncloses #50518\n\nr? @estebank\n\nWhere's the best place to add this test? I *think* we want \"compile-pass\" for this test (no need to run a binary, and not running saves us a millisecond of process creation) , but there's no compile-pass anymore.\n\nShould this be UI test with empty stdout, stderr and zero return code?", "tree": {"sha": "3f5b8b50db6310dc73c2c80e3dab89e55b3ed06f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f5b8b50db6310dc73c2c80e3dab89e55b3ed06f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d20b6927569a308baf41ad58b854775961b49bf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc018UCRBK7hj4Ov3rIwAAdHIIAAyj95/vt+qrG2Dfxl4twzo5\niim1U8gccaAyW99Qd+2g+BGGJwdGhHJBPyQItxeLXjDzjkKAISwxUIR6nH9mqGvG\n/wfE4zVQIYmkQ6aM7il44GwuMqPohvYWfPFkw0DIudEebdIHCkKpdOJz3L0WJ85s\nQ9EJeuVCpBp/qJPqlF+WK//aWnzGJ3Hd57PM3+EgdX7oBCQNx4DYG6hy2w5rUoPO\nPovyhjrXOu4ktvmMUDYxbfH/gdmuc2wF8Rsg82niHS8WjBXVr01VmIDtiILptLFd\n7IwZ4n+U0t+iKnepySYhZSlljDlBxN7lFUSEFz6rlpcOK5UKYlK8ME6DjpBf3ns=\n=mUgB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f5b8b50db6310dc73c2c80e3dab89e55b3ed06f\nparent b04f87fedee0eddca91b12666153dfb62f105715\nparent c87d2ccf88f1b9ca039d18530fd474e5ad868bc4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557356308 +0200\ncommitter GitHub <noreply@github.com> 1557356308 +0200\n\nRollup merge of #60627 - matklad:test, r=estebank\n\ntest for #50518\n\nIt was fixed somewhere between 1.28.0 and 1.31.1\n\ncloses #50518\n\nr? @estebank\n\nWhere's the best place to add this test? I *think* we want \"compile-pass\" for this test (no need to run a binary, and not running saves us a millisecond of process creation) , but there's no compile-pass anymore.\n\nShould this be UI test with empty stdout, stderr and zero return code?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d20b6927569a308baf41ad58b854775961b49bf7", "html_url": "https://github.com/rust-lang/rust/commit/d20b6927569a308baf41ad58b854775961b49bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d20b6927569a308baf41ad58b854775961b49bf7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04f87fedee0eddca91b12666153dfb62f105715", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04f87fedee0eddca91b12666153dfb62f105715", "html_url": "https://github.com/rust-lang/rust/commit/b04f87fedee0eddca91b12666153dfb62f105715"}, {"sha": "c87d2ccf88f1b9ca039d18530fd474e5ad868bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87d2ccf88f1b9ca039d18530fd474e5ad868bc4", "html_url": "https://github.com/rust-lang/rust/commit/c87d2ccf88f1b9ca039d18530fd474e5ad868bc4"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "d776d181b62682301ea9a8e00e5d8c0939a1dbd6", "filename": "src/test/ui/issues/issue-50518.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d20b6927569a308baf41ad58b854775961b49bf7/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b6927569a308baf41ad58b854775961b49bf7/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs?ref=d20b6927569a308baf41ad58b854775961b49bf7", "patch": "@@ -0,0 +1,40 @@\n+// compile-pass\n+use std::marker::PhantomData;\n+\n+struct Meta<A> {\n+    value: i32,\n+    type_: PhantomData<A>\n+}\n+\n+trait MetaTrait {\n+    fn get_value(&self) -> i32;\n+}\n+\n+impl<A> MetaTrait for Meta<A> {\n+    fn get_value(&self) -> i32 { self.value }\n+}\n+\n+trait Bar {\n+    fn get_const(&self) -> &dyn MetaTrait;\n+}\n+\n+struct Foo<A> {\n+    _value: A\n+}\n+\n+impl<A: 'static> Foo<A> {\n+    const CONST: &'static dyn MetaTrait = &Meta::<Self> {\n+        value: 10,\n+        type_: PhantomData\n+    };\n+}\n+\n+impl<A: 'static> Bar for Foo<A> {\n+    fn get_const(&self) -> &dyn MetaTrait { Self::CONST }\n+}\n+\n+fn main() {\n+    let foo = Foo::<i32> { _value: 10 };\n+    let bar: &dyn Bar = &foo;\n+    println!(\"const {}\", bar.get_const().get_value());\n+}"}]}