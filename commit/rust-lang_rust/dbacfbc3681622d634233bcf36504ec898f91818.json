{"sha": "dbacfbc3681622d634233bcf36504ec898f91818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWNmYmMzNjgxNjIyZDYzNDIzM2JjZjM2NTA0ZWM4OThmOTE4MTg=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-30T14:26:40Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-31T10:40:42Z"}, "message": "Add a new normalization query just for mir constants", "tree": {"sha": "5320c2401ab3f6f60766e029add981d33cb221a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5320c2401ab3f6f60766e029add981d33cb221a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbacfbc3681622d634233bcf36504ec898f91818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbacfbc3681622d634233bcf36504ec898f91818", "html_url": "https://github.com/rust-lang/rust/commit/dbacfbc3681622d634233bcf36504ec898f91818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbacfbc3681622d634233bcf36504ec898f91818/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb", "html_url": "https://github.com/rust-lang/rust/commit/c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb"}], "stats": {"total": 162, "additions": 128, "deletions": 34}, "files": [{"sha": "48b8ee17594e3bd10708b88b8978a2417fb75572", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,5 +1,6 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n+use rustc_middle::mir;\n use rustc_middle::ty::fold::{TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n@@ -46,6 +47,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n             ct.super_fold_with(self)\n         }\n     }\n+\n+    fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        constant.super_fold_with(self)\n+    }\n }\n \n /// The opportunistic region resolver opportunistically resolves regions"}, {"sha": "5b637a39d171708bacc9465b4e636d5da83c42a2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -2410,7 +2410,8 @@ pub struct Constant<'tcx> {\n     pub literal: ConstantKind<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n+#[derive(Lift)]\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(&'tcx ty::Const<'tcx>),\n@@ -2709,7 +2710,13 @@ impl<'tcx> Display for Constant<'tcx> {\n             ty::FnDef(..) => {}\n             _ => write!(fmt, \"const \")?,\n         }\n-        match self.literal {\n+        Display::fmt(&self.literal, fmt)\n+    }\n+}\n+\n+impl<'tcx> Display for ConstantKind<'tcx> {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        match *self {\n             ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n             ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n         }"}, {"sha": "ceed4fd246735922c28c1cc70fe1d8e4562629bc", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -348,6 +348,10 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        folder.fold_mir_const(self)\n+    }\n+\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         match self {\n             ConstantKind::Ty(c) => ConstantKind::Ty(c.fold_with(folder)),"}, {"sha": "732df8bb6c5bcf4242c1a5db0e3d72d85ef4bb16", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1482,6 +1482,13 @@ rustc_queries! {\n         desc { \"normalizing `{}`\", goal.value }\n     }\n \n+    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n+    query normalize_mir_const_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> mir::ConstantKind<'tcx> {\n+        desc { \"normalizing `{}`\", goal.value }\n+    }\n+\n     query implied_outlives_bounds(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> Result<"}, {"sha": "468e433ecd6cd9810577758ef1d90fc78ff2de08", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,3 +1,4 @@\n+use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n@@ -65,4 +66,8 @@ impl TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n             _ => self.tcx.lifetimes.re_erased,\n         }\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        c.super_fold_with(self)\n+    }\n }"}, {"sha": "029d3e1f23772d07359471b012b5da2e8a140e92", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -30,6 +30,7 @@\n //!\n //! These methods return true to indicate that the visitor has found what it is\n //! looking for, and does not need to visit anything else.\n+use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -179,6 +180,10 @@ pub trait TypeFolder<'tcx>: Sized {\n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         c.super_fold_with(self)\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n+    }\n }\n \n pub trait TypeVisitor<'tcx>: Sized {"}, {"sha": "2a8502cab4103d6525b1c0381e976053955a9c2f", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -7,6 +7,7 @@\n //! `normalize_generic_arg_after_erasing_regions` query for each type\n //! or constant found within. (This underlying query is what is cached.)\n \n+use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n@@ -101,4 +102,9 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(c.into());\n         self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_const()\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        let arg = self.param_env.and(c);\n+        self.tcx.normalize_mir_const_after_erasing_regions(arg)\n+    }\n }"}, {"sha": "becc09a4ce04e96d084453516172bd64057f4fe4", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,5 +1,6 @@\n // Type substitutions.\n \n+use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n@@ -503,6 +504,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             c.super_fold_with(self)\n         }\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        c.super_fold_with(self)\n+    }\n }\n \n impl<'a, 'tcx> SubstFolder<'a, 'tcx> {"}, {"sha": "fd5dbfb186efdf62fe758f9e890c064e6c31f55f", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -184,7 +184,6 @@ use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{AllocId, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n@@ -193,6 +192,7 @@ use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -638,6 +638,35 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n+    /// This does not walk the constant, as it has been handled entirely here and trying\n+    /// to walk it would attempt to evaluate the `ty::Const` inside, which doesn't necessarily\n+    /// work, as some constants cannot be represented in the type system.\n+    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>, location: Location) {\n+        let literal = self.monomorphize(constant.literal);\n+        let val = match literal {\n+            mir::ConstantKind::Val(val, _) => val,\n+            mir::ConstantKind::Ty(ct) => match ct.val {\n+                ty::ConstKind::Value(val) => val,\n+                ty::ConstKind::Unevaluated(ct) => {\n+                    let param_env = ty::ParamEnv::reveal_all();\n+                    match self.tcx.const_eval_resolve(param_env, ct, None) {\n+                        // The `monomorphize` call should have evaluated that constant already.\n+                        Ok(val) => val,\n+                        Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => return,\n+                        Err(ErrorHandled::TooGeneric) => span_bug!(\n+                            self.body.source_info(location).span,\n+                            \"collection encountered polymorphic constant: {:?}\",\n+                            literal\n+                        ),\n+                    }\n+                }\n+                _ => return,\n+            },\n+        };\n+        collect_const_value(self.tcx, val, self.output);\n+        self.visit_ty(literal.ty(), TyContext::Location(location));\n+    }\n+\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n "}, {"sha": "3b88aec16b26a638fabc287466c3d7fcf78880e2", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -452,7 +452,11 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                 match literal {\n                     ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n                     ConstantKind::Val(val, ty) => {\n-                        self.push(&format!(\"+ literal: {:?}, {}\", val, ty))\n+                        // To keep the diffs small, we render this almost like we render ty::Const\n+                        self.push(&format!(\n+                            \"+ literal: Const {{ ty: {}, val: Value({:?}) }}\",\n+                            ty, val\n+                        ))\n                     }\n                 }\n             }"}, {"sha": "1fdb37398f996676491645e7531305919f366caf", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -255,6 +255,15 @@ impl<'tcx> Key for GenericArg<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for mir::ConstantKind<'tcx> {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "eb7ea8715c29780aee89618bc91dad1a6de66c3b", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -10,6 +10,7 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n+use rustc_middle::mir;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -214,4 +215,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         let constant = constant.super_fold_with(self);\n         constant.eval(self.infcx.tcx, self.param_env)\n     }\n+\n+    fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        constant.super_fold_with(self)\n+    }\n }"}, {"sha": "5ad0684fe6ee219a90a63816dfe73cfcbafeea3e", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,24 +1,35 @@\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers) {\n-    *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n+    *p = Providers {\n+        normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n+\n+            tcx.sess\n+                .perf_stats\n+                .normalize_generic_arg_after_erasing_regions\n+                .fetch_add(1, Ordering::Relaxed);\n+            normalize_after_erasing_regions(tcx, goal)\n+        },\n+        normalize_mir_const_after_erasing_regions: |tcx, goal| {\n+            normalize_after_erasing_regions(tcx, goal)\n+        },\n+        ..*p\n+    };\n }\n \n-fn normalize_generic_arg_after_erasing_regions<'tcx>(\n+#[instrument(level = \"debug\", skip(tcx))]\n+fn normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n     tcx: TyCtxt<'tcx>,\n-    goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>,\n-) -> GenericArg<'tcx> {\n-    debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n-\n+    goal: ParamEnvAnd<'tcx, T>,\n+) -> T {\n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess.perf_stats.normalize_generic_arg_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(value) {"}, {"sha": "d9ff0b09c28c90641924ec89d2fa01c0eb9f75ca", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-//~^ ERROR cycle detected when normalizing `<() as Tr>::A`\n+//~^ ERROR cycle detected when normalizing\n \n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {"}, {"sha": "bd517e568eae91bc20e08fb3b045394a7ddb2c84", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -10,7 +10,7 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n \n fn main() {\n     println!(\"{}\", FOO);\n-    //~^ ERROR\n+    //~^ ERROR evaluation of constant value failed\n     //~| WARN erroneous constant used [const_err]\n     //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "017d49d8b2687d12eb3b57d4ff54535c2a2da9a3", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,5 +1,4 @@\n-//~ERROR constructed but no error reported\n-// compile-flags: -Ztreat-err-as-bug=2\n+// compile-flags: -Ztreat-err-as-bug=1\n // build-fail\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1"}, {"sha": "4f16cd96a9696e38086ca2bef0634bbb556fed29", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -1,26 +1,30 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:20:16\n+  --> $DIR/const-eval-query-stack.rs:19:16\n    |\n LL | const X: i32 = 1 / 0;\n    | ---------------^^^^^-\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:19:8\n+  --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:24:28\n+  --> $DIR/const-eval-query-stack.rs:23:28\n    |\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors\n+\n query stack during panic:\n-#0 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n-#1 [optimized_mir] optimizing MIR for `main`\n-#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+#0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n+#2 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n+#3 [normalize_mir_const_after_erasing_regions] normalizing `main::promoted[1]`\n+#4 [optimized_mir] optimizing MIR for `main`\n+#5 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack"}, {"sha": "a88e2197048d54897316b3d248b095ca75405e7f", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbacfbc3681622d634233bcf36504ec898f91818/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=dbacfbc3681622d634233bcf36504ec898f91818", "patch": "@@ -25,5 +25,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR evaluation of constant value failed [E0080]\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "916a6c2bf12af6277f3affdfbb205a216295f3dc", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=c7c39ce6d07e4d33dc25e07c43f0139c0634b7eb", "patch": "@@ -1,11 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:36:11\n-   |\n-LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |        -  ^^ undeclared lifetime\n-   |        |\n-   |        help: consider introducing lifetime `'a` here: `'a,`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0261`."}]}