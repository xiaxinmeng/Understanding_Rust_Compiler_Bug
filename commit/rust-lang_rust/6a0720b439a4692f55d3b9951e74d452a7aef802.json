{"sha": "6a0720b439a4692f55d3b9951e74d452a7aef802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDcyMGI0MzlhNDY5MmY1NWQzYjk5NTFlNzRkNDUyYTdhZWY4MDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-08T01:10:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-09T01:19:24Z"}, "message": "Convert impls to new syntax", "tree": {"sha": "d2dd72702f32e0254f7d72dd5782a8b6741d0004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2dd72702f32e0254f7d72dd5782a8b6741d0004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0720b439a4692f55d3b9951e74d452a7aef802", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0720b439a4692f55d3b9951e74d452a7aef802", "html_url": "https://github.com/rust-lang/rust/commit/6a0720b439a4692f55d3b9951e74d452a7aef802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0720b439a4692f55d3b9951e74d452a7aef802/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e997948c8a70d76ffac3c60867d47f98e698988f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e997948c8a70d76ffac3c60867d47f98e698988f", "html_url": "https://github.com/rust-lang/rust/commit/e997948c8a70d76ffac3c60867d47f98e698988f"}], "stats": {"total": 1120, "additions": 503, "deletions": 617}, "files": [{"sha": "931a678d529fb47ebd7163ed5f8fc1c33cd4d376", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,3 @@\n-import io::reader_util;\n-\n import common::config;\n \n export load_errors;"}, {"sha": "180dd75ed6ac039756248160c08a69d357e08fd3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,5 @@\n import option;\n import str;\n-import io::reader_util;\n \n import common::config;\n "}, {"sha": "a37741c2996e2e638149d3bee344e281a7f3d677", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n import run::spawn_process;\n-import io::{writer_util, reader_util};\n+import io::writer_util;\n import libc::{c_int, pid_t};\n \n import pipes::chan;"}, {"sha": "ab16750b8da8f00eb072fdf9296599cb0aa080e2", "filename": "src/libcore/arc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,8 +3,6 @@\n  * share immutable data between tasks.\n  */\n \n-import sys::methods;\n-\n export arc, get, clone;\n \n export exclusive, methods;\n@@ -96,7 +94,7 @@ fn exclusive<T:send >(-data: T) -> exclusive<T> {\n     }\n }\n \n-impl methods<T: send> for exclusive<T> {\n+impl<T: send> exclusive<T> {\n     /// Duplicate an exclusive ARC. See arc::clone.\n     fn clone() -> exclusive<T> {\n         unsafe {\n@@ -142,7 +140,6 @@ impl methods<T: send> for exclusive<T> {\n #[cfg(test)]\n mod tests {\n     import comm::*;\n-    import future::extensions;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "74f3c59acae271da1e175045f7a44a353c4d6048", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -123,15 +123,15 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> @[T] {\n     }\n }\n \n-impl extensions<T: copy> of vec_concat<T> for @[T] {\n+impl<T: copy> @[T]: vec_concat<T> {\n     #[inline(always)]\n     pure fn +(rhs: &[const T]) -> @[T] {\n         append(self, rhs)\n     }\n }\n \n #[cfg(notest)]\n-impl extensions<T: copy> of add<&[const T],@[T]> for @[T] {\n+impl<T: copy> @[T]: add<&[const T],@[T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> @[T] {\n         append(self, rhs)"}, {"sha": "4fcdad60146c098be26722a1af57b99e0bec004e", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -70,7 +70,7 @@ fn port<T: send>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n }\n \n-impl methods<T: send> for port<T> {\n+impl<T: send> port<T> {\n \n     fn chan() -> chan<T> { chan(self) }\n     fn send(+v: T) { self.chan().send(v) }\n@@ -79,7 +79,7 @@ impl methods<T: send> for port<T> {\n \n }\n \n-impl methods<T: send> for chan<T> {\n+impl<T: send> chan<T> {\n \n     fn chan() -> chan<T> { self }\n     fn send(+v: T) { send(self, v) }"}, {"sha": "3f4423184760c75c63a116aeb3018a12db0b01de", "filename": "src/libcore/core.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,31 +5,13 @@\n import option::{some, none};\n import option = option::option;\n import path = path::path;\n-import tuple::{extensions, tuple_ops, extended_tuple_ops};\n-import str::{extensions, str_slice, unique_str};\n-import vec::extensions;\n+import tuple::{tuple_ops, extended_tuple_ops};\n+import str::{str_slice, unique_str};\n import vec::{const_vector, copyable_vector, immutable_vector};\n import vec::{immutable_copyable_vector, iter_trait_extensions, vec_concat};\n import iter::{base_iter, extended_iter, copyable_iter, times, timesi};\n-import option::extensions;\n-import option_iter::extensions;\n-import ptr::{extensions, ptr};\n-import rand::extensions;\n-import result::extensions;\n-import int::{num, times, timesi};\n-import i8::{num, times, timesi};\n-import i16::{num, times, timesi};\n-import i32::{num, times, timesi};\n-import i64::{num, times, timesi};\n-import uint::{num, times, timesi};\n-import u8::{num, times, timesi};\n-import u16::{num, times, timesi};\n-import u32::{num, times, timesi};\n-import u64::{num, times, timesi};\n-import float::num;\n-import f32::num;\n-import f64::num;\n import num::num;\n+import ptr::ptr;\n \n export path, option, some, none, unreachable;\n export extensions;"}, {"sha": "c3d8def47518b6f997c99b66c9f27fab772a94c4", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,8 +4,6 @@\n  * Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n  */\n \n-import dlist_iter::extensions;\n-\n export dlist, dlist_node;\n export new_dlist, from_elem, from_vec, extensions;\n \n@@ -24,7 +22,7 @@ enum dlist<T> = @{\n     mut tl:   dlist_link<T>,\n };\n \n-impl private_methods<T> for dlist_node<T> {\n+priv impl<T> dlist_node<T> {\n     pure fn assert_links() {\n         match self.next {\n             some(neighbour) => match neighbour.prev {\n@@ -47,7 +45,7 @@ impl private_methods<T> for dlist_node<T> {\n     }\n }\n \n-impl extensions<T> for dlist_node<T> {\n+impl<T> dlist_node<T> {\n     /// Get the next node in the list, if there is one.\n     pure fn next_link() -> option<dlist_node<T>> {\n         self.assert_links();\n@@ -109,7 +107,7 @@ fn concat<T>(lists: dlist<dlist<T>>) -> dlist<T> {\n     result\n }\n \n-impl private_methods<T> for dlist<T> {\n+priv impl<T> dlist<T> {\n     pure fn new_link(-data: T) -> dlist_link<T> {\n         some(dlist_node(@{data: data, mut linked: true,\n                           mut prev: none, mut next: none}))\n@@ -184,7 +182,7 @@ impl private_methods<T> for dlist<T> {\n     }\n }\n \n-impl extensions<T> for dlist<T> {\n+impl<T> dlist<T> {\n     /// Get the size of the list. O(1).\n     pure fn len()          -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n@@ -413,7 +411,7 @@ impl extensions<T> for dlist<T> {\n     }\n }\n \n-impl extensions<T: copy> for dlist<T> {\n+impl<T: copy> dlist<T> {\n     /// Remove data from the head of the list. O(1).\n     fn pop()       -> option<T> { self.pop_n().map       (|nobe| nobe.data) }\n     /// Remove data from the tail of the list. O(1)."}, {"sha": "0d3748e187a04553ce92b222e7872566634bad12", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,9 +5,8 @@\n //\n // Note that recursive use is not permitted.\n \n-import dvec_iter::extensions;\n import unsafe::reinterpret_cast;\n-import ptr::{null, extensions};\n+import ptr::null;\n \n export dvec;\n export from_elem;\n@@ -75,7 +74,7 @@ fn unwrap<A>(-d: dvec<A>) -> ~[mut A] {\n     return v;\n }\n \n-impl private_methods<A> for dvec<A> {\n+priv impl<A> dvec<A> {\n     pure fn check_not_borrowed() {\n         unsafe {\n             let data: *() = unsafe::reinterpret_cast(self.data);\n@@ -107,7 +106,7 @@ impl private_methods<A> for dvec<A> {\n // In theory, most everything should work with any A, but in practice\n // almost nothing works without the copy bound due to limitations\n // around closures.\n-impl extensions<A> for dvec<A> {\n+impl<A> dvec<A> {\n     /// Reserves space for N elements\n     fn reserve(count: uint) {\n         vec::reserve(self.data, count)\n@@ -188,7 +187,7 @@ impl extensions<A> for dvec<A> {\n     }\n }\n \n-impl extensions<A:copy> for dvec<A> {\n+impl<A: copy> dvec<A> {\n     /**\n      * Append all elements of a vector to the end of the list\n      *\n@@ -311,7 +310,7 @@ impl extensions<A:copy> for dvec<A> {\n     }\n }\n \n-impl extensions<A:copy> of index<uint,A> for dvec<A> {\n+impl<A:copy> dvec<A>: index<uint,A> {\n     pure fn index(&&idx: uint) -> A {\n         self.get_elt(idx)\n     }"}, {"sha": "575c1d40c422e4b3d09a5d6c1861a403a0a77eb0", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -167,7 +167,7 @@ pure fn log2(n: f32) -> f32 {\n     return ln(n) / consts::ln_2;\n }\n \n-impl num of num::num for f32 {\n+impl f32: num::num {\n     pure fn add(&&other: f32)    -> f32 { return self + other; }\n     pure fn sub(&&other: f32)    -> f32 { return self - other; }\n     pure fn mul(&&other: f32)    -> f32 { return self * other; }"}, {"sha": "bc2c6faa69d6e1f9db8ea001678f5e6d087cefeb", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -194,7 +194,7 @@ pure fn log2(n: f64) -> f64 {\n     return ln(n) / consts::ln_2;\n }\n \n-impl num of num::num for f64 {\n+impl f64: num::num {\n     pure fn add(&&other: f64)    -> f64 { return self + other; }\n     pure fn sub(&&other: f64)    -> f64 { return self - other; }\n     pure fn mul(&&other: f64)    -> f64 { return self * other; }"}, {"sha": "c41853b4e151bcb15f7dffdd83d38a247fdd0f08", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -409,7 +409,7 @@ pure fn sin(x: float) -> float { f64::sin(x as f64) as float }\n pure fn cos(x: float) -> float { f64::cos(x as f64) as float }\n pure fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n-impl num of num::num for float {\n+impl float: num::num {\n     pure fn add(&&other: float)    -> float { return self + other; }\n     pure fn sub(&&other: float)    -> float { return self - other; }\n     pure fn mul(&&other: float)    -> float { return self * other; }"}, {"sha": "361f41ba21b165c785ef248feaf4c47d0db10d40", "filename": "src/libcore/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -32,7 +32,7 @@ enum future<A> = {\n };\n \n /// Methods on the `future` type\n-impl extensions<A:copy send> for future<A> {\n+impl<A:copy send> future<A> {\n \n     fn get() -> A {\n         //! Get the value of the future"}, {"sha": "ac5d83a778b2f703b86f1d8d5952cab5174d1678", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -62,20 +62,20 @@ pure fn abs(i: T) -> T {\n     if is_negative(i) { -i } else { i }\n }\n \n-impl ord of ord for T {\n+impl T: ord {\n     pure fn lt(&&other: T) -> bool {\n         return self < other;\n     }\n }\n \n-impl eq of eq for T {\n+impl T: eq {\n     pure fn eq(&&other: T) -> bool {\n         return self == other;\n     }\n }\n \n \n-impl num of num::num for T {\n+impl T: num::num {\n     pure fn add(&&other: T)    -> T { return self + other; }\n     pure fn sub(&&other: T)    -> T { return self - other; }\n     pure fn mul(&&other: T)    -> T { return self * other; }\n@@ -87,7 +87,7 @@ impl num of num::num for T {\n     pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n-impl times of iter::times for T {\n+impl T: iter::times {\n     #[inline(always)]\n     #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n         of any numeric type, the expression `for x.times { /* anything */ }` \\\n@@ -107,7 +107,7 @@ impl times of iter::times for T {\n     }\n }\n \n-impl timesi of iter::timesi for T {\n+impl T: iter::timesi {\n     #[inline(always)]\n     /// Like `times`, but provides an index\n     fn timesi(it: fn(uint) -> bool) {"}, {"sha": "571fc8587ef8ebb5a8d4554fc867281ec8515b57", "filename": "src/libcore/io.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ Basic input/output\n \n import result::result;\n \n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n import libc::consts::os::posix88::*;\n import libc::consts::os::extra::*;\n@@ -42,7 +42,7 @@ trait reader {\n \n // Generic utility functions defined on readers\n \n-impl reader_util for reader {\n+impl reader {\n     fn read_bytes(len: uint) -> ~[u8] {\n         let mut buf = ~[mut];\n         vec::reserve(buf, len);\n@@ -203,7 +203,7 @@ fn convert_whence(whence: seek_style) -> i32 {\n     };\n }\n \n-impl of reader for *libc::FILE {\n+impl *libc::FILE: reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         do vec::as_buf(buf) |buf_p, buf_len| {\n             assert buf_len <= len;\n@@ -227,7 +227,7 @@ impl of reader for *libc::FILE {\n // A forwarding impl of reader that also holds on to a resource for the\n // duration of its lifetime.\n // FIXME there really should be a better way to do this // #2004\n-impl <T: reader, C> of reader for {base: T, cleanup: C} {\n+impl<T: reader, C> {base: T, cleanup: C}: reader {\n     fn read(buf: &[mut u8], len: uint) -> uint { self.base.read(buf, len) }\n     fn read_byte() -> int { self.base.read_byte() }\n     fn unread_byte(byte: int) { self.base.unread_byte(byte); }\n@@ -273,7 +273,7 @@ fn file_reader(path: ~str) -> result<reader, ~str> {\n \n type byte_buf = {buf: ~[const u8], mut pos: uint, len: uint};\n \n-impl of reader for byte_buf {\n+impl byte_buf: reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         let count = uint::min(len, self.len - self.pos);\n \n@@ -343,15 +343,15 @@ trait writer {\n     fn get_type() -> writer_type;\n }\n \n-impl <T: writer, C> of writer for {base: T, cleanup: C} {\n+impl<T: writer, C> {base: T, cleanup: C}: writer {\n     fn write(bs: &[const u8]) { self.base.write(bs); }\n     fn seek(off: int, style: seek_style) { self.base.seek(off, style); }\n     fn tell() -> uint { self.base.tell() }\n     fn flush() -> int { self.base.flush() }\n     fn get_type() -> writer_type { file }\n }\n \n-impl of writer for *libc::FILE {\n+impl *libc::FILE: writer {\n     fn write(v: &[const u8]) {\n         do vec::as_const_buf(v) |vbuf, len| {\n             let nout = libc::fwrite(vbuf as *c_void, len as size_t,\n@@ -384,7 +384,7 @@ fn FILE_writer(f: *libc::FILE, cleanup: bool) -> writer {\n     }\n }\n \n-impl of writer for fd_t {\n+impl fd_t: writer {\n     fn write(v: &[const u8]) {\n         let mut count = 0u;\n         do vec::as_const_buf(v) |vbuf, len| {\n@@ -658,7 +658,7 @@ fn println(s: &str) { stdout().write_line(s); }\n \n type mem_buffer = @{buf: dvec<u8>, mut pos: uint};\n \n-impl of writer for mem_buffer {\n+impl mem_buffer: writer {\n     fn write(v: &[const u8]) {\n         // Fast path.\n         let vlen = vec::len(v);"}, {"sha": "d448292b1aac42352823502982601f1eadf2e3da", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,12 +5,12 @@\n import inst::{IMPL_T, EACH, SIZE_HINT};\n export extensions;\n \n-impl extensions<A> of iter::base_iter<A> for IMPL_T<A> {\n+impl<A> IMPL_T<A>: iter::base_iter<A> {\n     fn each(blk: fn(A) -> bool) { EACH(self, blk) }\n     fn size_hint() -> option<uint> { SIZE_HINT(self) }\n }\n \n-impl extensions<A> of iter::extended_iter<A> for IMPL_T<A> {\n+impl<A> IMPL_T<A>: iter::extended_iter<A> {\n     fn eachi(blk: fn(uint, A) -> bool) { iter::eachi(self, blk) }\n     fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n     fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n@@ -24,7 +24,7 @@ impl extensions<A> of iter::extended_iter<A> for IMPL_T<A> {\n     }\n }\n \n-impl extensions<A:copy> of iter::copyable_iter<A> for IMPL_T<A> {\n+impl<A: copy> IMPL_T<A>: iter::copyable_iter<A> {\n     fn filter_to_vec(pred: fn(A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }"}, {"sha": "9d8d147ffd7782293e0fda2f4e2e3ad6120421e4", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -8,8 +8,6 @@ type IMPL_T<A> = dlist::dlist<A>;\n  * node is forbidden.\n  */\n pure fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {\n-    import dlist::extensions;\n-\n     let mut link = self.peek_n();\n     while option::is_some(link) {\n         let nobe = option::get(link);\n@@ -31,6 +29,5 @@ pure fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {\n }\n \n fn SIZE_HINT<A>(self: IMPL_T<A>) -> option<uint> {\n-    import dlist::extensions;\n     some(self.len())\n }"}, {"sha": "d40eead14ff2c85a6c8624d4770a1f1f2335f344", "filename": "src/libcore/iter-trait/dvec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,11 +6,9 @@ type IMPL_T<A> = dvec::dvec<A>;\n  * Attempts to access this dvec during iteration will fail.\n  */\n fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {\n-    import dvec::extensions;\n     self.swap(|v| { vec::each(v, f); v })\n }\n \n fn SIZE_HINT<A>(self: IMPL_T<A>) -> option<uint> {\n-    import dvec::extensions;\n     some(self.len())\n }"}, {"sha": "325f4cf70c5cf37b1ef6102d4b600dd7feae460f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -136,7 +136,7 @@ pure fn unwrap_expect<T>(-opt: option<T>, reason: &str) -> T {\n     unwrap(opt)\n }\n \n-impl extensions<T> for option<T> {\n+impl<T> option<T> {\n     /**\n      * Update an optional value by optionally running its content through a\n      * function that returns an option.\n@@ -155,7 +155,7 @@ impl extensions<T> for option<T> {\n     pure fn map<U>(f: fn(T) -> U) -> option<U> { map(self, f) }\n }\n \n-impl extensions<T: copy> for option<T> {\n+impl<T: copy> option<T> {\n     /**\n      * Gets the value out of an option\n      *"}, {"sha": "042d107b990db9803564b92b16374ab2a5d9b3dc", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -61,7 +61,6 @@ that the packet's state field is blocked.\n import unsafe::{forget, reinterpret_cast, transmute};\n import either::{either, left, right};\n import option::unwrap;\n-import arc::methods;\n \n // Things used by code generated by the pipe compiler.\n export entangle, get_buffer, drop_buffer;\n@@ -167,7 +166,7 @@ trait has_buffer {\n     fn set_buffer(b: *libc::c_void);\n }\n \n-impl methods<T: send> of has_buffer for packet<T> {\n+impl<T: send> packet<T>: has_buffer {\n     fn set_buffer(b: *libc::c_void) {\n         self.header.buffer = b;\n     }\n@@ -475,7 +474,7 @@ pure fn peek<T: send, Tb: send>(p: recv_packet_buffered<T, Tb>) -> bool {\n     }\n }\n \n-impl peek<T: send, Tb: send> for recv_packet_buffered<T, Tb> {\n+impl<T: send, Tb: send> recv_packet_buffered<T, Tb> {\n     pure fn peek() -> bool {\n         peek(self)\n     }\n@@ -637,7 +636,7 @@ trait selectable {\n     pure fn header() -> *packet_header;\n }\n \n-impl of selectable for *packet_header {\n+impl *packet_header: selectable {\n     pure fn header() -> *packet_header { self }\n }\n \n@@ -923,7 +922,7 @@ fn stream<T:send>() -> (chan<T>, port<T>) {\n     (chan_({ mut endp: some(c) }), port_({ mut endp: some(s) }))\n }\n \n-impl chan<T: send> of channel<T> for chan<T> {\n+impl<T: send> chan<T>: channel<T> {\n     fn send(+x: T) {\n         let mut endp = none;\n         endp <-> self.endp;\n@@ -944,7 +943,7 @@ impl chan<T: send> of channel<T> for chan<T> {\n     }\n }\n \n-impl port<T: send> of recv<T> for port<T> {\n+impl<T: send> port<T>: recv<T> {\n     fn recv() -> T {\n         let mut endp = none;\n         endp <-> self.endp;\n@@ -1037,7 +1036,7 @@ struct port_set<T: send> : recv<T> {\n     }\n }\n \n-impl<T: send> of selectable for port<T> {\n+impl<T: send> port<T>: selectable {\n     pure fn header() -> *packet_header unchecked {\n         match self.endp {\n           some(endp) => endp.header(),\n@@ -1049,7 +1048,7 @@ impl<T: send> of selectable for port<T> {\n /// A channel that can be shared between many senders.\n type shared_chan<T: send> = arc::exclusive<chan<T>>;\n \n-impl chan<T: send> of channel<T> for shared_chan<T> {\n+impl<T: send> shared_chan<T>: channel<T> {\n     fn send(+x: T) {\n         let mut xx = some(x);\n         do self.with |chan| {\n@@ -1083,7 +1082,7 @@ trait select2<T: send, U: send> {\n }\n \n impl<T: send, U: send, Left: selectable recv<T>, Right: selectable recv<U>>\n-    of select2<T, U> for (Left, Right) {\n+    (Left, Right): select2<T, U> {\n \n     fn select() -> either<T, U> {\n         match self {"}, {"sha": "61990b745adba7235da3f1c0bc0cfa6c948eeb98", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -156,7 +156,7 @@ trait ptr {\n }\n \n /// Extension methods for pointers\n-impl extensions<T> of ptr for *T {\n+impl<T> *T: ptr {\n     /// Returns true if the pointer is equal to the null pointer.\n     pure fn is_null() -> bool { is_null(self) }\n "}, {"sha": "2bf983c373e01f1184ea79a2c5f0e061a4488a22", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -24,7 +24,7 @@ trait rng {\n type weighted<T> = { weight: uint, item: T };\n \n /// Extension methods for random number generators\n-impl extensions for rng {\n+impl rng {\n \n     /// Return a random int\n     fn gen_int() -> int {\n@@ -248,7 +248,7 @@ class rand_res {\n     drop { rustrt::rand_free(self.c); }\n }\n \n-impl of rng for @rand_res {\n+impl @rand_res: rng {\n     fn next() -> u32 { return rustrt::rand_next((*self).c); }\n }\n \n@@ -279,7 +279,7 @@ type xorshift_state = {\n     mut w: u32\n };\n \n-impl of rng for xorshift_state {\n+impl xorshift_state: rng {\n     fn next() -> u32 {\n         let x = self.x;\n         let mut t = x ^ (x << 11);"}, {"sha": "42a4b671a395cc260e7a83a3a178835ce1847660", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -180,7 +180,7 @@ fn map_err<T: copy, E, F: copy>(res: result<T, E>, op: fn(E) -> F)\n     }\n }\n \n-impl extensions<T, E> for result<T, E> {\n+impl<T, E> result<T, E> {\n     fn is_ok() -> bool { is_ok(self) }\n \n     fn is_err() -> bool { is_err(self) }\n@@ -200,7 +200,7 @@ impl extensions<T, E> for result<T, E> {\n     }\n }\n \n-impl extensions<T:copy, E> for result<T, E> {\n+impl<T: copy, E> result<T, E> {\n     fn get() -> T { get(self) }\n \n     fn map_err<F:copy>(op: fn(E) -> F) -> result<T,F> {\n@@ -211,7 +211,7 @@ impl extensions<T:copy, E> for result<T, E> {\n     }\n }\n \n-impl extensions<T, E:copy> for result<T, E> {\n+impl<T, E: copy> result<T, E> {\n     fn get_err() -> E { get_err(self) }\n \n     fn map<U:copy>(op: fn(T) -> U) -> result<U,E> {\n@@ -222,7 +222,7 @@ impl extensions<T, E:copy> for result<T, E> {\n     }\n }\n \n-impl extensions<T:copy, E:copy> for result<T,E> {\n+impl<T: copy, E: copy> result<T, E> {\n     fn chain<U:copy>(op: fn(T) -> result<U,E>) -> result<U,E> {\n         chain(self, op)\n     }"}, {"sha": "7b550f832b7349de54752d752a1fda82a7b55cfc", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,6 @@\n //! Process spawning\n import option::{some, none};\n import libc::{pid_t, c_void, c_int};\n-import io::reader_util;\n \n export program;\n export run_program;\n@@ -228,7 +227,7 @@ fn start_program(prog: ~str, args: ~[~str]) -> program {\n         drop { destroy_repr(self.r); }\n     }\n \n-    impl of program for prog_res {\n+    impl prog_res: program {\n         fn get_id() -> pid_t { return self.r.pid; }\n         fn input() -> io::writer { io::fd_writer(self.r.in_fd, false) }\n         fn output() -> io::reader { io::FILE_reader(self.r.out_file, false) }"}, {"sha": "f49cee1ba078df1b86867729fb6765cbb9e667d5", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -64,7 +64,7 @@ mod linear {\n         unsafe::reinterpret_cast(p)\n     }\n \n-    impl private_methods<K,V> for &const linear_map<K,V> {\n+    priv impl<K, V> &const linear_map<K,V> {\n         #[inline(always)]\n         pure fn to_bucket(h: uint) -> uint {\n             // FIXME(#3041) borrow a more sophisticated technique here from\n@@ -126,7 +126,7 @@ mod linear {\n         }\n     }\n \n-    impl private_methods<K,V> for &mut linear_map<K,V> {\n+    priv impl<K,V> &mut linear_map<K,V> {\n         /// Expands the capacity of the array and re-inserts each\n         /// of the existing buckets.\n         fn expand() {\n@@ -175,7 +175,7 @@ mod linear {\n         }\n     }\n \n-    impl public_methods<K,V> for &mut linear_map<K,V> {\n+    impl<K,V> &mut linear_map<K,V> {\n         fn insert(+k: K, +v: V) -> bool {\n             if self.size >= self.resize_at {\n                 // n.b.: We could also do this after searching, so\n@@ -230,13 +230,13 @@ mod linear {\n         }\n     }\n \n-    impl private_methods<K,V> for &linear_map<K,V> {\n+    priv impl<K,V> &linear_map<K,V> {\n         fn search(hash: uint, op: fn(x: &option<bucket<K,V>>) -> bool) {\n             let _ = self.bucket_sequence(hash, |i| op(&self.buckets[i]));\n         }\n     }\n \n-    impl public_methods<K,V> for &const linear_map<K,V> {\n+    impl<K,V> &const linear_map<K,V> {\n         fn len() -> uint {\n             self.size\n         }\n@@ -253,7 +253,7 @@ mod linear {\n         }\n     }\n \n-    impl public_methods<K,V: copy> for &const linear_map<K,V> {\n+    impl<K,V: copy> &const linear_map<K,V> {\n         fn find(k: &K) -> option<V> {\n             match self.bucket_for_key(self.buckets, k) {\n               found_entry(idx) => {\n@@ -280,7 +280,7 @@ mod linear {\n         }\n     }\n \n-    impl imm_methods<K,V> for &linear_map<K,V> {\n+    impl<K,V> &linear_map<K,V> {\n         /*\n         FIXME --- #2979 must be fixed to typecheck this\n         fn find_ptr(k: K) -> option<&V> {\n@@ -309,17 +309,17 @@ mod linear {\n         }\n     }\n \n-    impl public_methods<K: copy, V: copy> for &linear_map<K,V> {\n+    impl<K: copy, V: copy> &linear_map<K,V> {\n         fn each(blk: fn(+K,+V) -> bool) {\n             self.each_ref(|k,v| blk(copy *k, copy *v));\n         }\n     }\n-    impl public_methods<K: copy, V> for &linear_map<K,V> {\n+    impl<K: copy, V> &linear_map<K,V> {\n         fn each_key(blk: fn(+K) -> bool) {\n             self.each_key_ref(|k| blk(copy *k));\n         }\n     }\n-    impl public_methods<K, V: copy> for &linear_map<K,V> {\n+    impl<K, V: copy> &linear_map<K,V> {\n         fn each_value(blk: fn(+V) -> bool) {\n             self.each_value_ref(|v| blk(copy *v));\n         }"}, {"sha": "62fb03e9263231b5eefe149d7d64d5fd06337800", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1901,7 +1901,7 @@ trait unique_str {\n }\n \n /// Extension methods for strings\n-impl extensions of unique_str for ~str {\n+impl ~str: unique_str {\n     /// Returns a string with leading and trailing whitespace removed\n     #[inline]\n     fn trim() -> ~str { trim(self) }\n@@ -1920,7 +1920,7 @@ impl extensions of unique_str for ~str {\n }\n \n #[cfg(notest)]\n-impl extensions of add<&str,~str> for ~str {\n+impl ~str: add<&str,~str> {\n     #[inline(always)]\n     pure fn add(rhs: &str) -> ~str {\n         append(self, rhs)\n@@ -1956,7 +1956,7 @@ trait str_slice {\n }\n \n /// Extension methods for strings\n-impl extensions/& of str_slice for &str {\n+impl &str: str_slice {\n     /**\n      * Return true if a predicate matches all characters or if the string\n      * contains no characters"}, {"sha": "6def915b6d8c056da2b9901e57e9ec4e8b7fb2b2", "filename": "src/libcore/sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -32,7 +32,7 @@ enum sem<Q: send> = exclusive<{\n     blocked:   Q,\n }>;\n \n-impl sem<Q: send> for &sem<Q> {\n+impl<Q: send> &sem<Q> {\n     fn acquire() {\n         let mut waiter_nobe = none;\n         unsafe {\n@@ -72,14 +72,14 @@ impl sem<Q: send> for &sem<Q> {\n     }\n }\n // FIXME(#3154) move both copies of this into sem<Q>, and unify the 2 structs\n-impl sem_access for &sem<()> {\n+impl &sem<()> {\n     fn access<U>(blk: fn() -> U) -> U {\n         self.acquire();\n         let _x = sem_release(self);\n         blk()\n     }\n }\n-impl sem_access for &sem<waitqueue> {\n+impl &sem<waitqueue> {\n     fn access<U>(blk: fn() -> U) -> U {\n         self.acquire();\n         let _x = sem_and_signal_release(self);\n@@ -102,7 +102,7 @@ struct sem_and_signal_release {\n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n enum condvar = &sem<waitqueue>;\n \n-impl condvar for condvar {\n+impl condvar {\n     /// Atomically drop the associated lock, and block until a signal is sent.\n     fn wait() {\n         let (signal_end, wait_end) = pipes::stream();\n@@ -158,7 +158,7 @@ impl condvar for condvar {\n     }\n }\n \n-impl sem_and_signal for &sem<waitqueue> {\n+impl &sem<waitqueue> {\n     fn access_cond<U>(blk: fn(condvar) -> U) -> U {\n         do self.access { blk(condvar(self)) }\n     }\n@@ -179,7 +179,7 @@ fn new_semaphore(count: int) -> semaphore {\n                               blocked: () })))\n }\n \n-impl semaphore for &semaphore {\n+impl &semaphore {\n     /// Create a new handle to the semaphore.\n     fn clone() -> semaphore { semaphore(sem((***self).clone())) }\n \n@@ -218,7 +218,7 @@ fn new_mutex() -> mutex {\n                           blocked: { head: block_head, tail: block_tail } })))\n }\n \n-impl mutex for &mutex {\n+impl &mutex {\n     /// Create a new handle to the mutex.\n     fn clone() -> mutex { mutex(sem((***self).clone())) }\n "}, {"sha": "3fd1718cd3757ac204a2f2484b95d1f10a993ac4", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -106,7 +106,7 @@ class little_lock {\n     drop { rustrt::rust_destroy_little_lock(self.l); }\n }\n \n-impl methods for little_lock {\n+impl little_lock {\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n         class unlock {\n             let l: rust_little_lock;"}, {"sha": "f80dd309c7b22e2f51e632ad47144a073b7ff60d", "filename": "src/libcore/task.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -24,9 +24,6 @@\n  */\n \n import result::result;\n-import dvec::extensions;\n-import dvec_iter::extensions;\n-import arc::methods;\n \n export task;\n export task_result;\n@@ -209,7 +206,7 @@ fn task() -> task_builder {\n     })\n }\n \n-impl private_methods for task_builder {\n+priv impl task_builder {\n     fn consume() -> task_builder {\n         if self.consumed {\n             fail ~\"Cannot copy a task_builder\"; // Fake move mode on self\n@@ -219,7 +216,7 @@ impl private_methods for task_builder {\n     }\n }\n \n-impl task_builder for task_builder {\n+impl task_builder {\n     /**\n      * Decouple the child task's failure from the parent's. If either fails,\n      * the other will not be killed.\n@@ -1246,7 +1243,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) {\n type local_data_key<T: owned> = fn@(+@T);\n \n trait local_data { }\n-impl<T: owned> of local_data for @T { }\n+impl<T: owned> @T: local_data { }\n \n // We use dvec because it's the best data structure in core. If TLS is used\n // heavily in future, this could be made more efficient with a proper map.\n@@ -1955,7 +1952,6 @@ fn test_platform_thread() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable() {\n-    import comm::methods;\n     let po = comm::port();\n     let ch = po.chan();\n \n@@ -1992,7 +1988,6 @@ fn test_unkillable() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n-    import comm::methods;\n     let po = comm::port();\n     let ch = po.chan();\n "}, {"sha": "45e502e4b0c035e1782fe97b69485f5e26b90c2b", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,18 +2,18 @@ trait to_bytes {\n     fn to_bytes() -> ~[u8];\n }\n \n-impl of to_bytes for ~[u8] {\n+impl ~[u8]: to_bytes {\n     fn to_bytes() -> ~[u8] { copy self }\n }\n \n-impl of to_bytes for @~[u8] {\n+impl @~[u8]: to_bytes {\n     fn to_bytes() -> ~[u8] { copy *self }\n }\n \n-impl of to_bytes for ~str {\n+impl ~str: to_bytes {\n     fn to_bytes() -> ~[u8] { str::bytes(self) }\n }\n \n-impl of to_bytes for @(~str) {\n+impl @(~str): to_bytes {\n     fn to_bytes() -> ~[u8] { str::bytes(*self) }\n }"}, {"sha": "01f55a24bde4ef8ffa57dd053a65127e4e2c8601", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,62 +1,62 @@\n trait to_str { fn to_str() -> ~str; }\n \n-impl of to_str for int {\n+impl int: to_str {\n     fn to_str() -> ~str { int::str(self) }\n }\n-impl of to_str for i8 {\n+impl i8: to_str {\n     fn to_str() -> ~str { i8::str(self) }\n }\n-impl of to_str for i16 {\n+impl i16: to_str {\n     fn to_str() -> ~str { i16::str(self) }\n }\n-impl of to_str for i32 {\n+impl i32: to_str {\n     fn to_str() -> ~str { i32::str(self) }\n }\n-impl of to_str for i64 {\n+impl i64: to_str {\n     fn to_str() -> ~str { i64::str(self) }\n }\n-impl of to_str for uint {\n+impl uint: to_str {\n     fn to_str() -> ~str { uint::str(self) }\n }\n-impl of to_str for u8 {\n+impl u8: to_str {\n     fn to_str() -> ~str { u8::str(self) }\n }\n-impl of to_str for u16 {\n+impl u16: to_str {\n     fn to_str() -> ~str { u16::str(self) }\n }\n-impl of to_str for u32 {\n+impl u32: to_str {\n     fn to_str() -> ~str { u32::str(self) }\n }\n-impl of to_str for u64 {\n+impl u64: to_str {\n     fn to_str() -> ~str { u64::str(self) }\n }\n-impl of to_str for float {\n+impl float: to_str {\n     fn to_str() -> ~str { float::to_str(self, 4u) }\n }\n-impl of to_str for bool {\n+impl bool: to_str {\n     fn to_str() -> ~str { bool::to_str(self) }\n }\n-impl of to_str for () {\n+impl (): to_str {\n     fn to_str() -> ~str { ~\"()\" }\n }\n-impl of to_str for ~str {\n+impl ~str: to_str {\n     fn to_str() -> ~str { self }\n }\n \n-impl <A: to_str copy, B: to_str copy> of to_str for (A, B) {\n+impl<A: to_str copy, B: to_str copy> (A, B): to_str {\n     fn to_str() -> ~str {\n         let (a, b) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n     }\n }\n-impl <A: to_str copy, B: to_str copy, C: to_str copy> of to_str for (A, B, C){\n+impl<A: to_str copy, B: to_str copy, C: to_str copy> (A, B, C): to_str {\n     fn to_str() -> ~str {\n         let (a, b, c) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\", \" + c.to_str() + ~\")\"\n     }\n }\n \n-impl <A: to_str> of to_str for ~[A] {\n+impl<A: to_str> ~[A]: to_str {\n     fn to_str() -> ~str {\n         let mut acc = ~\"[\", first = true;\n         for vec::each(self) |elt| {\n@@ -69,10 +69,10 @@ impl <A: to_str> of to_str for ~[A] {\n     }\n }\n \n-impl <A: to_str> of to_str for @A {\n+impl<A: to_str> @A: to_str {\n     fn to_str() -> ~str { ~\"@\" + (*self).to_str() }\n }\n-impl <A: to_str> of to_str for ~A {\n+impl<A: to_str> ~A: to_str {\n     fn to_str() -> ~str { ~\"~\" + (*self).to_str() }\n }\n "}, {"sha": "42990eaf4baf2dd2d0aac75c7be48140e97e951b", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait tuple_ops<T,U> {\n     pure fn swap() -> (U, T);\n }\n \n-impl extensions <T:copy, U:copy> of tuple_ops<T,U> for (T, U) {\n+impl<T: copy, U: copy> (T, U): tuple_ops<T,U> {\n \n     /// Return the first element of self\n     pure fn first() -> T {\n@@ -33,8 +33,7 @@ trait extended_tuple_ops<A,B> {\n     fn map<C>(f: fn(A, B) -> C) -> ~[C];\n }\n \n-impl extensions<A: copy, B: copy> of extended_tuple_ops<A,B>\n-        for (&[A], &[B]) {\n+impl<A: copy, B: copy> (&[A], &[B]): extended_tuple_ops<A,B> {\n \n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;\n@@ -47,8 +46,7 @@ impl extensions<A: copy, B: copy> of extended_tuple_ops<A,B>\n     }\n }\n \n-impl extensions<A: copy, B: copy> of extended_tuple_ops<A,B>\n-        for (~[A], ~[B]) {\n+impl<A: copy, B: copy> (~[A], ~[B]): extended_tuple_ops<A,B> {\n \n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;"}, {"sha": "3178e6ab75d38972c6e44a4275404ad0a125834a", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -56,19 +56,19 @@ pure fn compl(i: T) -> T {\n     max_value ^ i\n }\n \n-impl ord of ord for T {\n+impl T: ord {\n     pure fn lt(&&other: T) -> bool {\n         return self < other;\n     }\n }\n \n-impl eq of eq for T {\n+impl T: eq {\n     pure fn eq(&&other: T) -> bool {\n         return self == other;\n     }\n }\n \n-impl num of num::num for T {\n+impl T: num::num {\n     pure fn add(&&other: T)    -> T { return self + other; }\n     pure fn sub(&&other: T)    -> T { return self - other; }\n     pure fn mul(&&other: T)    -> T { return self * other; }\n@@ -80,7 +80,7 @@ impl num of num::num for T {\n     pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n-impl times of iter::times for T {\n+impl T: iter::times {\n     #[inline(always)]\n     #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n         of any numeric type, the expression `for x.times { /* anything */ }` \\\n@@ -96,7 +96,7 @@ impl times of iter::times for T {\n     }\n }\n \n-impl timesi of iter::timesi for T {\n+impl T: iter::timesi {\n     #[inline(always)]\n     /// Like `times`, but with an index, `eachi`-style.\n     fn timesi(it: fn(uint) -> bool) {"}, {"sha": "c104bdbc17a1a81e64b57ed5b66fd04274efbd01", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1287,29 +1287,29 @@ trait vec_concat<T> {\n     pure fn +(rhs: &[const T]) -> self;\n }\n \n-impl extensions<T: copy> of vec_concat<T> for ~[T] {\n+impl<T: copy> ~[T]: vec_concat<T> {\n     #[inline(always)]\n     pure fn +(rhs: &[const T]) -> ~[T] {\n         append(self, rhs)\n     }\n }\n \n #[cfg(notest)]\n-impl extensions<T: copy> of add<&[const T],~[T]> for ~[T] {\n+impl<T: copy> ~[T]: add<&[const T],~[T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[T] {\n         append(self, rhs)\n     }\n }\n \n-impl extensions<T: copy> of vec_concat<T> for ~[mut T] {\n+impl<T: copy> ~[mut T]: vec_concat<T> {\n     #[inline(always)]\n     pure fn +(rhs: &[const T]) -> ~[mut T] {\n         append_mut(self, rhs)\n     }\n }\n \n-impl extensions<T: copy> of add<&[const T],~[mut T]> for ~[mut T] {\n+impl<T: copy> ~[mut T]: add<&[const T],~[mut T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[mut T] {\n         append_mut(self, rhs)\n@@ -1323,7 +1323,7 @@ trait const_vector {\n }\n \n /// Extension methods for vectors\n-impl extensions/&<T> of const_vector for &[const T] {\n+impl<T> &[const T]: const_vector {\n     /// Returns true if a vector contains no elements\n     #[inline]\n     pure fn is_empty() -> bool { is_empty(self) }\n@@ -1344,7 +1344,7 @@ trait copyable_vector<T> {\n }\n \n /// Extension methods for vectors\n-impl extensions/&<T: copy> of copyable_vector<T> for &[const T] {\n+impl<T: copy> &[const T]: copyable_vector<T> {\n     /// Returns the first element of a vector\n     #[inline]\n     pure fn head() -> T { head(self) }\n@@ -1381,7 +1381,7 @@ trait immutable_vector<T> {\n }\n \n /// Extension methods for vectors\n-impl extensions/&<T> of immutable_vector<T> for &[T] {\n+impl<T> &[T]: immutable_vector<T> {\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U: copy>(z: U, p: fn(T, U) -> U) -> U { foldr(self, z, p) }\n@@ -1496,7 +1496,7 @@ trait immutable_copyable_vector<T> {\n }\n \n /// Extension methods for vectors\n-impl extensions/&<T: copy> of immutable_copyable_vector<T> for &[T] {\n+impl<T: copy> &[T]: immutable_copyable_vector<T> {\n     /**\n      * Construct a new vector from the elements of a vector for which some\n      * predicate holds.\n@@ -1741,12 +1741,12 @@ mod u8 {\n // This cannot be used with iter-trait.rs because of the region pointer\n // required in the slice.\n \n-impl extensions/&<A> of iter::base_iter<A> for &[A] {\n+impl<A> &[A]: iter::base_iter<A> {\n     fn each(blk: fn(A) -> bool) { each(self, blk) }\n     fn size_hint() -> option<uint> { some(len(self)) }\n }\n \n-impl extensions/&<A> of iter::extended_iter<A> for &[A] {\n+impl<A> &[A]: iter::extended_iter<A> {\n     fn eachi(blk: fn(uint, A) -> bool) { iter::eachi(self, blk) }\n     fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n     fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n@@ -1766,7 +1766,7 @@ trait iter_trait_extensions<A> {\n     fn max() -> A;\n }\n \n-impl extensions/&<A:copy> of iter_trait_extensions<A> for &[A] {\n+impl<A: copy> &[A]: iter_trait_extensions<A> {\n     fn filter_to_vec(pred: fn(A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }"}, {"sha": "2b9a1dccb368ea158fd9e341bf9c6920dc7ff55b", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,10 +1,10 @@\n-import io::{reader, reader_util};\n+import io::reader;\n \n trait to_base64 {\n     fn to_base64() -> ~str;\n }\n \n-impl of to_base64 for ~[u8] {\n+impl ~[u8]: to_base64 {\n     fn to_base64() -> ~str {\n         let chars = str::chars(\n           ~\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n@@ -52,7 +52,7 @@ impl of to_base64 for ~[u8] {\n     }\n }\n \n-impl of to_base64 for ~str {\n+impl ~str: to_base64 {\n     fn to_base64() -> ~str {\n         str::bytes(self).to_base64()\n     }\n@@ -62,7 +62,7 @@ trait from_base64 {\n     fn from_base64() -> ~[u8];\n }\n \n-impl of from_base64 for ~[u8] {\n+impl ~[u8]: from_base64 {\n     fn from_base64() -> ~[u8] {\n         if self.len() % 4u != 0u { fail ~\"invalid base64 length\"; }\n \n@@ -124,7 +124,7 @@ impl of from_base64 for ~[u8] {\n     }\n }\n \n-impl of from_base64 for ~str {\n+impl ~str: from_base64 {\n     fn from_base64() -> ~[u8] {\n         str::bytes(self).from_base64()\n     }"}, {"sha": "3b5d08d0c40c4227c07ce06c4d220876a9c4aaf7", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -421,7 +421,7 @@ pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }\n \n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n-impl extensions of ops::index<uint,bool> for bitv {\n+impl bitv: ops::index<uint,bool> {\n     pure fn index(&&i: uint) -> bool {\n         self.get(i)\n     }"}, {"sha": "937f88691771fa81b856853b3aadac9f7517ddc5", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,19 +6,19 @@ trait fuzzy_eq {\n     pure fn fuzzy_eq(&&other: self) -> bool;\n }\n \n-impl fuzzy_eq of fuzzy_eq for float {\n+impl float: fuzzy_eq {\n     pure fn fuzzy_eq(&&other: float) -> bool {\n         return float::abs(self - other) < fuzzy_epsilon;\n     }\n }\n \n-impl fuzzy_eq of fuzzy_eq for f32 {\n+impl f32: fuzzy_eq {\n     pure fn fuzzy_eq(&&other: f32) -> bool {\n         return f32::abs(self - other) < (fuzzy_epsilon as f32);\n     }\n }\n \n-impl fuzzy_eq of fuzzy_eq for f64 {\n+impl f64: fuzzy_eq {\n     pure fn fuzzy_eq(&&other: f64) -> bool {\n         return f64::abs(self - other) < (fuzzy_epsilon as f64);\n     }"}, {"sha": "8bb7ae648255ed30f584d312cfbe8f2aa4203311", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n //! A deque. Untested as of yet. Likely buggy\n \n import option::{some, none};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n trait t<T> {\n     fn size() -> uint;\n@@ -49,7 +49,7 @@ fn create<T: copy>() -> t<T> {\n                     mut hi: uint,\n                     elts: dvec<cell<T>>};\n \n-    impl <T: copy> of t<T> for repr<T> {\n+    impl <T: copy> repr<T>: t<T> {\n         fn size() -> uint { return self.nelts; }\n         fn add_front(t: T) {\n             let oldlo: uint = self.lo;"}, {"sha": "8f0e54a10c50efc836d8cfc973e3dde4d804868e", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -46,13 +46,13 @@ trait get_doc {\n     fn [](tag: uint) -> doc;\n }\n \n-impl extensions of get_doc for doc {\n+impl doc: get_doc {\n     fn [](tag: uint) -> doc {\n         get_doc(self, tag)\n     }\n }\n \n-impl extensions of ops::index<uint,doc> for doc {\n+impl doc: ops::index<uint,doc> {\n     pure fn index(&&tag: uint) -> doc {\n         unchecked {\n             get_doc(self, tag)\n@@ -214,7 +214,7 @@ fn writer(w: io::writer) -> writer {\n }\n \n // FIXME (#2741): Provide a function to write the standard ebml header.\n-impl writer for writer {\n+impl writer {\n     fn start_tag(tag_id: uint) {\n         debug!{\"Start tag %u\", tag_id};\n \n@@ -339,7 +339,7 @@ trait serializer_priv {\n     fn _emit_label(label: ~str);\n }\n \n-impl serializer of serializer_priv for ebml::writer {\n+impl ebml::writer: serializer_priv {\n     // used internally to emit things like the vector length and so on\n     fn _emit_tagged_uint(t: ebml_serializer_tag, v: uint) {\n         assert v <= 0xFFFF_FFFF_u;\n@@ -357,7 +357,7 @@ impl serializer of serializer_priv for ebml::writer {\n     }\n }\n \n-impl serializer of serialization::serializer for ebml::writer {\n+impl ebml::writer: serialization::serializer {\n     fn emit_nil() {}\n \n     fn emit_uint(v: uint) { self.wr_tagged_u64(es_uint as uint, v as u64); }\n@@ -424,7 +424,7 @@ fn ebml_deserializer(d: ebml::doc) -> ebml_deserializer {\n     ebml_deserializer_({mut parent: d, mut pos: d.start})\n }\n \n-impl deserializer_priv for ebml_deserializer {\n+priv impl ebml_deserializer {\n     fn _check_label(lbl: ~str) {\n         if self.pos < self.parent.end {\n             let {tag: r_tag, doc: r_doc} =\n@@ -479,7 +479,7 @@ impl deserializer_priv for ebml_deserializer {\n     }\n }\n \n-impl deserializer of serialization::deserializer for ebml_deserializer {\n+impl ebml_deserializer: serialization::deserializer {\n     fn read_nil() -> () { () }\n \n     fn read_u64() -> u64 { ebml::doc_as_u64(self.next_doc(es_u64)) }"}, {"sha": "2ddfc041f95d6d854852479dc9787ed96e3b31f5", "filename": "src/libstd/json.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,11 +5,10 @@\n \n import result::{result, ok, err};\n import io;\n-import io::{reader_util, writer_util};\n+import io::writer_util;\n import map;\n import map::hashmap;\n import map::map;\n-import core::vec::extensions;\n \n export json;\n export error;\n@@ -120,7 +119,7 @@ enum parser {\n     parser_(parser_)\n }\n \n-impl parser for parser {\n+impl parser {\n     fn eof() -> bool { self.ch == -1 as char }\n \n     fn bump() {\n@@ -503,83 +502,83 @@ fn eq(value0: json, value1: json) -> bool {\n \n trait to_json { fn to_json() -> json; }\n \n-impl of to_json for json {\n+impl json: to_json {\n     fn to_json() -> json { self }\n }\n \n-impl of to_json for @json {\n+impl @json: to_json {\n     fn to_json() -> json { *self }\n }\n \n-impl of to_json for int {\n+impl int: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for i8 {\n+impl i8: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for i16 {\n+impl i16: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for i32 {\n+impl i32: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for i64 {\n+impl i64: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for uint {\n+impl uint: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for u8 {\n+impl u8: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for u16 {\n+impl u16: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for u32 {\n+impl u32: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for u64 {\n+impl u64: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for float {\n+impl float: to_json {\n     fn to_json() -> json { num(self) }\n }\n \n-impl of to_json for f32 {\n+impl f32: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for f64 {\n+impl f64: to_json {\n     fn to_json() -> json { num(self as float) }\n }\n \n-impl of to_json for () {\n+impl (): to_json {\n     fn to_json() -> json { null }\n }\n \n-impl of to_json for bool {\n+impl bool: to_json {\n     fn to_json() -> json { boolean(self) }\n }\n \n-impl of to_json for ~str {\n+impl ~str: to_json {\n     fn to_json() -> json { string(@copy self) }\n }\n \n-impl of to_json for @~str {\n+impl @~str: to_json {\n     fn to_json() -> json { string(self) }\n }\n \n-impl <A: to_json, B: to_json> of to_json for (A, B) {\n+impl <A: to_json, B: to_json> (A, B): to_json {\n     fn to_json() -> json {\n         match self {\n           (a, b) => {\n@@ -589,8 +588,8 @@ impl <A: to_json, B: to_json> of to_json for (A, B) {\n     }\n }\n \n-impl <A: to_json, B: to_json, C: to_json>\n-  of to_json for (A, B, C) {\n+impl <A: to_json, B: to_json, C: to_json> (A, B, C): to_json {\n+\n     fn to_json() -> json {\n         match self {\n           (a, b, c) => {\n@@ -600,11 +599,11 @@ impl <A: to_json, B: to_json, C: to_json>\n     }\n }\n \n-impl <A: to_json> of to_json for ~[A] {\n+impl <A: to_json> ~[A]: to_json {\n     fn to_json() -> json { list(@self.map(|elt| elt.to_json())) }\n }\n \n-impl <A: to_json copy> of to_json for hashmap<~str, A> {\n+impl <A: to_json copy> hashmap<~str, A>: to_json {\n     fn to_json() -> json {\n         let d = map::str_hash();\n         for self.each() |key, value| {\n@@ -614,7 +613,7 @@ impl <A: to_json copy> of to_json for hashmap<~str, A> {\n     }\n }\n \n-impl <A: to_json> of to_json for option<A> {\n+impl <A: to_json> option<A>: to_json {\n     fn to_json() -> json {\n         match self {\n           none => null,\n@@ -623,11 +622,11 @@ impl <A: to_json> of to_json for option<A> {\n     }\n }\n \n-impl of to_str::to_str for json {\n+impl json: to_str::to_str {\n     fn to_str() -> ~str { to_str(self) }\n }\n \n-impl of to_str::to_str for error {\n+impl error: to_str::to_str {\n     fn to_str() -> ~str {\n         fmt!{\"%u:%u: %s\", self.line, self.col, *self.msg}\n     }"}, {"sha": "944e9c93e19ef359169c40b1f5bd22bae46ec1e3", "filename": "src/libstd/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,6 @@\n \n #[warn(deprecated_mode)];\n \n-import chained::hashmap;\n import io::writer_util;\n import to_str::to_str;\n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n@@ -127,7 +126,7 @@ mod chained {\n         found_after(@entry<K,V>, @entry<K,V>)\n     }\n \n-    impl private_methods<K, V: copy> for t<K, V> {\n+    priv impl<K, V: copy> t<K, V> {\n         fn search_rem(k: &K, h: uint, idx: uint,\n                       e_root: @entry<K,V>) -> search_result<K,V> {\n             let mut e0 = e_root;\n@@ -207,7 +206,7 @@ mod chained {\n         }\n     }\n \n-    impl hashmap<K: copy, V: copy> of map<K, V> for t<K, V> {\n+    impl<K: copy, V: copy> t<K, V>: map<K, V> {\n         fn size() -> uint { self.count }\n \n         fn contains_key(+k: K) -> bool {\n@@ -328,7 +327,7 @@ mod chained {\n         }\n     }\n \n-    impl hashmap<K: copy to_str, V: to_str copy> of to_str for t<K, V> {\n+    impl<K: copy to_str, V: to_str copy> t<K, V>: to_str {\n         fn to_writer(wr: io::writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");\n@@ -354,7 +353,7 @@ mod chained {\n         }\n     }\n \n-    impl hashmap<K: copy, V: copy> of ops::index<K, V> for t<K, V> {\n+    impl<K: copy, V: copy> t<K, V>: ops::index<K, V> {\n         pure fn index(&&k: K) -> V {\n             unchecked {\n                 self.get(k)"}, {"sha": "5e25a91d901371716939f034068e499feabe89d3", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,6 @@ import vec;\n import uint;\n import iotask = uv::iotask::iotask;\n import interact = uv::iotask::interact;\n-import comm::methods;\n \n import sockaddr_in = uv::ll::sockaddr_in;\n import sockaddr_in6 = uv::ll::sockaddr_in6;\n@@ -147,7 +146,7 @@ mod v4 {\n         unsafe fn as_u32() -> u32;\n     }\n \n-    impl x of as_unsafe_u32 for ipv4_rep {\n+    impl ipv4_rep: as_unsafe_u32 {\n         // this is pretty dastardly, i know\n         unsafe fn as_u32() -> u32 {\n             *((ptr::addr_of(self)) as *u32)"}, {"sha": "c32186fdd3cf320edc1b49cb9f0b39c66a67da6d", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,15 +3,12 @@\n import ip = net_ip;\n import uv::iotask;\n import uv::iotask::iotask;\n-import comm::methods;\n import future_spawn = future::spawn;\n-import future::extensions;\n // FIXME #1935\n // should be able to, but can't atm, replace w/ result::{result, extensions};\n import result::*;\n import libc::size_t;\n-import str::extensions;\n-import io::{reader, reader_util, writer};\n+import io::{reader, writer};\n \n // tcp interfaces\n export tcp_socket;\n@@ -726,7 +723,7 @@ fn socket_buf(-sock: tcp_socket) -> tcp_socket_buf {\n }\n \n /// Convenience methods extending `net::tcp::tcp_socket`\n-impl tcp_socket for tcp_socket {\n+impl tcp_socket {\n     fn read_start() -> result::result<comm::port<\n         result::result<~[u8], tcp_err_data>>, tcp_err_data> {\n         read_start(self)\n@@ -755,7 +752,7 @@ impl tcp_socket for tcp_socket {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n+impl @tcp_socket_buf: io::reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         // Loop until our buffer has enough data in it for us to read from.\n         while self.data.buf.len() < len {\n@@ -808,7 +805,7 @@ impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl tcp_socket_buf of io::writer for @tcp_socket_buf {\n+impl @tcp_socket_buf: io::writer {\n     fn write(data: &[const u8]) unsafe {\n         let socket_data_ptr =\n             ptr::addr_of(*((*(self.data)).sock).socket_data);\n@@ -1067,7 +1064,7 @@ trait to_tcp_err {\n     fn to_tcp_err() -> tcp_err_data;\n }\n \n-impl of to_tcp_err for uv::ll::uv_err_data {\n+impl uv::ll::uv_err_data: to_tcp_err {\n     fn to_tcp_err() -> tcp_err_data {\n         { err_name: self.err_name, err_msg: self.err_msg }\n     }"}, {"sha": "e6428c19d101b25dffe722e758b7371ae550597e", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,8 +2,8 @@\n \n import map;\n import map::{hashmap, str_hash};\n-import io::{reader, reader_util};\n-import dvec::{dvec, extensions};\n+import io::reader;\n+import dvec::dvec;\n \n export url, userinfo, query;\n export from_str, to_str;\n@@ -673,7 +673,7 @@ fn to_str(url: url) -> ~str {\n                       fragment]);\n }\n \n-impl of to_str::to_str for url {\n+impl url: to_str::to_str {\n     fn to_str() -> ~str {\n         to_str(self)\n     }"}, {"sha": "c604ae7b9d606d2513ee39597177d4438e287c99", "filename": "src/libstd/par.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,8 +3,6 @@ import comm::chan;\n import comm::send;\n import comm::recv;\n import future_spawn = future::spawn;\n-import future::extensions;\n-import core::vec::extensions;\n \n export map, mapi, alli, any, mapi_factory;\n "}, {"sha": "a33ad7ca65dd92c7ed71a8c913979625ca9f0999", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ import io::writer;\n import io::writer_util;\n import serialization::serializer;\n \n-impl of serializer for writer {\n+impl writer: serializer {\n     fn emit_nil() {\n         self.write_str(~\"()\")\n     }"}, {"sha": "c27081a457b9e1fa50e84ca75e10de071750e10b", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -105,7 +105,7 @@ trait serializer_helpers {\n     fn emit_from_vec<T>(v: ~[T], f: fn(T));\n }\n \n-impl serializer_helpers<S: serializer> of serializer_helpers for S {\n+impl<S: serializer> S: serializer_helpers {\n     fn emit_from_vec<T>(v: ~[T], f: fn(T)) {\n         emit_from_vec(self, v, f)\n     }\n@@ -115,7 +115,7 @@ trait deserializer_helpers {\n     fn read_to_vec<T: copy>(f: fn() -> T) -> ~[T];\n }\n \n-impl deserializer_helpers<D: deserializer> of deserializer_helpers for D {\n+impl<D: deserializer> D: deserializer_helpers {\n     fn read_to_vec<T: copy>(f: fn() -> T) -> ~[T] {\n         read_to_vec(self, f)\n     }"}, {"sha": "dc07a6bc3f0f19341b858f454110932ac0fa57f4", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -217,7 +217,7 @@ fn sha1() -> sha1 {\n         process_msg_block(st);\n     }\n \n-    impl of sha1 for sha1state {\n+    impl sha1state: sha1 {\n         fn reset() {\n             // FIXME: Should be typestate precondition (#2345)\n             assert (vec::len(self.h) == digest_buf_len);"}, {"sha": "4248cec854f155fe9b9056a8f41597b1bb7d0f88", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,7 @@\n  */\n import core::option;\n import core::option::{some, none};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import map::map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n@@ -63,7 +63,7 @@ fn contains_key<T: copy>(self: smallintmap<T>, key: uint) -> bool {\n }\n \n /// Implements the map::map interface for smallintmap\n-impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n+impl<V: copy> smallintmap<V>: map::map<uint, V> {\n     fn size() -> uint {\n         let mut sz = 0u;\n         for self.v.each |item| {\n@@ -134,7 +134,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     }\n }\n \n-impl extensions<V: copy> of ops::index<uint, V> for smallintmap<V> {\n+impl<V: copy> smallintmap<V>: ops::index<uint, V> {\n     pure fn index(&&key: uint) -> V {\n         unchecked {\n             get(self, key)"}, {"sha": "a4e68c78bba3d9ad9c3b9327fe52c0d8dbd9513f", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,6 @@\n import core::option;\n import option::{none, some};\n import rand;\n-import core::rand::extensions;\n \n fn mkdtemp(prefix: ~str, suffix: ~str) -> option<~str> {\n     let r = rand::rng();"}, {"sha": "ee8ca6c28da2264f74c59a201988c60bb4a42c47", "filename": "src/libstd/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,6 @@\n import libc::{c_char, c_int, c_long, size_t, time_t};\n-import io::{reader, reader_util};\n-import result::{result, ok, err, extensions};\n+import io::reader;\n+import result::{result, ok, err};\n \n export\n     timespec,\n@@ -730,7 +730,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n     buf\n }\n \n-impl tm for tm {\n+impl tm {\n     /// Convert time to the seconds from January 1, 1970\n     fn to_timespec() -> timespec {\n         let mut sec = 0i64;"}, {"sha": "149bc077eb32c5ccc549ce538b8369c4ec1e7054", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ import iotask = uv_iotask;\n import get_gl = get;\n import iotask::{iotask, spawn_iotask};\n import priv::{chan_from_global_ptr, weaken_task};\n-import comm::{port, chan, methods, select2, listen};\n+import comm::{port, chan, select2, listen};\n import task::task_builder;\n import either::{left, right};\n "}, {"sha": "324a90553c7ebb8a1260d7c430e9b7751d6b1c03", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -12,7 +12,7 @@ export exit;\n \n import libc::c_void;\n import ptr::addr_of;\n-import comm::{port, chan, methods, listen};\n+import comm::{port, chan, listen};\n import task::task_builder;\n import ll = uv_ll;\n "}, {"sha": "c33b3e9b6ecd272e6609626b900eefdfc1ad9ca7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -827,20 +827,20 @@ trait path_concat {\n }\n \n // Remove after snapshot!\n-impl methods of path_concat for ident {\n+impl ident: path_concat {\n     pure fn +(&&id: ident) -> @path {\n         simple_path(self, empty_span()) + id\n     }\n }\n \n-impl methods of ops::add<ident,@path> for ident {\n+impl ident: ops::add<ident,@path> {\n     pure fn add(&&id: ident) -> @path {\n         simple_path(self, empty_span()) + id\n     }\n }\n \n // Remove after snapshot!\n-impl methods of path_concat for @path {\n+impl @path: path_concat {\n     pure fn +(&&id: ident) -> @path {\n         @{\n             idents: vec::append_one(self.idents, id)\n@@ -849,7 +849,7 @@ impl methods of path_concat for @path {\n     }\n }\n \n-impl methods of ops::add<ident,@path> for @path {\n+impl @path: ops::add<ident,@path> {\n     pure fn add(&&id: ident) -> @path {\n         @{\n             idents: vec::append_one(self.idents, id)"}, {"sha": "241a212c2ac43b03e7a93931c9c9ee52595a8272", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,6 @@ import std::map::hashmap;\n import ast::*;\n import print::pprust;\n import ast_util::path_to_ident;\n-import ast_util::inlined_item_methods;\n import diagnostic::span_handler;\n \n enum path_elt { path_mod(ident), path_name(ident) }"}, {"sha": "6ea6ecb1ba3257e25ca75a96dd0aaffb19f88e92", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -368,7 +368,7 @@ trait inlined_item_utils {\n     fn accept<E>(e: E, v: visit::vt<E>);\n }\n \n-impl inlined_item_methods of inlined_item_utils for inlined_item {\n+impl inlined_item: inlined_item_utils {\n     fn ident() -> ident {\n         match self {\n           ii_item(i) => /* FIXME (#2543) */ copy i.ident,"}, {"sha": "0d8566ae42ceb78316fc7d70e84d818452bbd3ab", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,4 +1,4 @@\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export filename;\n export filemap;"}, {"sha": "c71422d198f27106dc5481c7ce1c5a21474bb825", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -46,7 +46,7 @@ type codemap_t = @{\n     cm: codemap::codemap\n };\n \n-impl codemap_span_handler of span_handler for codemap_t {\n+impl codemap_t: span_handler {\n     fn span_fatal(sp: span, msg: ~str) -> ! {\n         self.handler.emit(some((self.cm, sp)), msg, fatal);\n         fail;\n@@ -72,7 +72,7 @@ impl codemap_span_handler of span_handler for codemap_t {\n     }\n }\n \n-impl codemap_handler of handler for handler_t {\n+impl handler_t: handler {\n     fn fatal(msg: ~str) -> ! {\n         self.emit(none, msg, fatal);\n         fail;"}, {"sha": "c93dccda034704aa47f5a6c64fa0cb439556b692", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -150,7 +150,7 @@ trait ext_ctxt_helpers {\n     fn at(span: span, expr: @ast::expr) -> @ast::expr;\n }\n \n-impl helpers of ext_ctxt_helpers for ext_ctxt {\n+impl ext_ctxt: ext_ctxt_helpers {\n     fn helper_path(base_path: @ast::path,\n                    helper_name: ~str) -> @ast::path {\n         let head = vec::init(base_path.idents);"}, {"sha": "484932b539eb73926bb83939f3b07201710fbd4c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -144,7 +144,7 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n                       cfg: ast::crate_cfg,\n                       mut backtrace: expn_info,\n                       mut mod_path: ~[ast::ident]};\n-    impl of ext_ctxt for ctxt_repr {\n+    impl ctxt_repr: ext_ctxt {\n         fn codemap() -> codemap { self.parse_sess.cm }\n         fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n@@ -277,7 +277,7 @@ fn get_mac_body(cx: ext_ctxt, sp: span, args: ast::mac_body)\n fn tt_args_to_original_flavor(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree])\n     -> ast::mac_arg {\n     import ast::{matcher, matcher_, match_tok, match_seq, match_nonterminal};\n-    import parse::lexer::{new_tt_reader, tt_reader_as_reader, reader};\n+    import parse::lexer::{new_tt_reader, reader};\n     import tt::earley_parser::{parse_or_else, matched_seq,\n                                matched_nonterminal};\n "}, {"sha": "b9ff13c95781b6c9c9cbb717347b1b73374f22ea", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -36,15 +36,13 @@ FIXME (#3072) - This is still incomplete.\n import codemap::span;\n import ext::base::ext_ctxt;\n import ast::tt_delim;\n-import parse::lexer::{new_tt_reader, reader, tt_reader_as_reader};\n+import parse::lexer::{new_tt_reader, reader};\n import parse::parser::{parser, SOURCE_FILE};\n import parse::common::parser_common;\n \n import pipes::parse_proto::proto_parser;\n \n-import pipes::pipec::compile;\n import pipes::proto::{visit, protocol};\n-import pipes::check::proto_check;\n \n fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n                 tt: ~[ast::token_tree]) -> base::mac_result"}, {"sha": "d2ef304a1f000c39b596e90de7d572b7058faa6a", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -36,7 +36,7 @@ trait append_types {\n     fn add_tys(+tys: ~[@ast::ty]) -> @ast::path;\n }\n \n-impl methods of append_types for @ast::path {\n+impl @ast::path: append_types {\n     fn add_ty(ty: @ast::ty) -> @ast::path {\n         @{types: vec::append_one(self.types, ty)\n           with *self}\n@@ -89,7 +89,7 @@ trait ext_ctxt_ast_builder {\n     fn ty_option(ty: @ast::ty) -> @ast::ty;\n }\n \n-impl ast_builder of ext_ctxt_ast_builder for ext_ctxt {\n+impl ext_ctxt: ext_ctxt_ast_builder {\n     fn ty_option(ty: @ast::ty) -> @ast::ty {\n         self.ty_path_ast_builder(path(@~\"option\", self.empty_span())\n                                  .add_ty(ty))"}, {"sha": "e286b4f76be8dccd5f87333a073bc39dd53ce7de", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -19,16 +19,14 @@ that.\n \n */\n \n-import dvec::extensions;\n-\n import ext::base::ext_ctxt;\n \n import ast::{ident};\n \n-import proto::{state, protocol, next_state, methods};\n+import proto::{state, protocol, next_state};\n import ast_builder::empty_span;\n \n-impl proto_check of proto::visitor<(), (), ()>  for ext_ctxt {\n+impl ext_ctxt: proto::visitor<(), (), ()>  {\n     fn visit_proto(_proto: protocol,\n                    _states: &[()]) { }\n "}, {"sha": "17e569552a737b9681c8e633a99226b365fb31b8", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -27,11 +27,8 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n-import dvec::extensions;\n-\n import std::bitv::{bitv};\n \n-import proto::methods;\n import ast_builder::empty_span;\n \n fn analyze(proto: protocol, _cx: ext_ctxt) {"}, {"sha": "84180ff379794c9b7c9ba6bc34ee38f9996f9ee4", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -11,7 +11,7 @@ trait proto_parser {\n     fn parse_state(proto: protocol);\n }\n \n-impl proto_parser of proto_parser for parser {\n+impl parser: proto_parser {\n     fn parse_proto(id: ident) -> protocol {\n         let proto = protocol(id, self.span);\n "}, {"sha": "a835cbb27a4eaca27948f10804090edb41b4607e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,9 +3,6 @@\n import to_str::to_str;\n \n import dvec::dvec;\n-import dvec::extensions;\n-\n-import tuple::extensions;\n \n import ast::ident;\n import util::interner;\n@@ -15,11 +12,8 @@ import ext::base::{mk_ctxt, ext_ctxt};\n import parse;\n import parse::*;\n import proto::*;\n-import ast::methods;\n \n import ast_builder::append_types;\n-import ast_builder::ast_builder;\n-import ast_builder::methods;\n import ast_builder::path;\n \n // Transitional reexports so qquote can find the paths it is looking for\n@@ -44,7 +38,7 @@ trait gen_init {\n     fn compile(cx: ext_ctxt) -> @ast::item;\n }\n \n-impl compile of gen_send for message {\n+impl message: gen_send {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item {\n         debug!{\"pipec: gen_send\"};\n         match self {\n@@ -199,7 +193,7 @@ impl compile of gen_send for message {\n     }\n }\n \n-impl compile of to_type_decls for state {\n+impl state: to_type_decls {\n     fn to_type_decls(cx: ext_ctxt) -> ~[@ast::item] {\n         debug!{\"pipec: to_type_decls\"};\n         // This compiles into two different type declarations. Say the\n@@ -283,7 +277,7 @@ impl compile of to_type_decls for state {\n     }\n }\n \n-impl compile of gen_init for protocol {\n+impl protocol: gen_init {\n     fn gen_init(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n \n@@ -425,37 +419,37 @@ trait to_source {\n     fn to_source() -> ~str;\n }\n \n-impl of to_source for @ast::item {\n+impl @ast::item: to_source {\n     fn to_source() -> ~str {\n         item_to_str(self)\n     }\n }\n \n-impl of to_source for ~[@ast::item] {\n+impl ~[@ast::item]: to_source {\n     fn to_source() -> ~str {\n         str::connect(self.map(|i| i.to_source()), ~\"\\n\\n\")\n     }\n }\n \n-impl of to_source for @ast::ty {\n+impl @ast::ty: to_source {\n     fn to_source() -> ~str {\n         ty_to_str(self)\n     }\n }\n \n-impl of to_source for ~[@ast::ty] {\n+impl ~[@ast::ty]: to_source {\n     fn to_source() -> ~str {\n         str::connect(self.map(|i| i.to_source()), ~\", \")\n     }\n }\n \n-impl of to_source for ~[ast::ty_param] {\n+impl ~[ast::ty_param]: to_source {\n     fn to_source() -> ~str {\n         pprust::typarams_to_str(self)\n     }\n }\n \n-impl of to_source for @ast::expr {\n+impl @ast::expr: to_source {\n     fn to_source() -> ~str {\n         pprust::expr_to_str(self)\n     }\n@@ -467,7 +461,7 @@ trait ext_ctxt_parse_utils {\n     fn parse_stmt(s: ~str) -> @ast::stmt;\n }\n \n-impl parse_utils of ext_ctxt_parse_utils for ext_ctxt {\n+impl ext_ctxt: ext_ctxt_parse_utils {\n     fn parse_item(s: ~str) -> @ast::item {\n         let res = parse::parse_item_from_source_str(\n             ~\"***protocol expansion***\","}, {"sha": "8409135db6bdc9a7cb483e4875b2d4f9508b8ccf", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,15 +1,15 @@\n import to_str::to_str;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n import ast::{ident};\n \n-import ast_builder::{path, methods, ast_builder, append_types};\n+import ast_builder::{path, append_types};\n \n enum direction {\n     send, recv\n }\n \n-impl of to_str for direction {\n+impl direction: to_str {\n     fn to_str() -> ~str {\n         match self {\n           send => ~\"send\",\n@@ -18,7 +18,7 @@ impl of to_str for direction {\n     }\n }\n \n-impl methods for direction {\n+impl direction {\n     fn reverse() -> direction {\n         match self {\n           send => recv,\n@@ -34,7 +34,7 @@ enum message {\n     message(ident, span, ~[@ast::ty], state, next_state)\n }\n \n-impl methods for message {\n+impl message {\n     fn name() -> ident {\n         match self {\n           message(id, _, _, _, _) => id\n@@ -67,7 +67,7 @@ enum state {\n     }),\n }\n \n-impl methods for state {\n+impl state {\n     fn add_message(name: ident, span: span,\n                    +data: ~[@ast::ty], next: next_state) {\n         self.messages.push(message(name, span, data, self,\n@@ -161,7 +161,7 @@ class protocol_ {\n     }\n }\n \n-impl methods for protocol {\n+impl protocol {\n     fn add_state(name: ident, dir: direction) -> state {\n         self.add_state_poly(name, dir, ~[])\n     }"}, {"sha": "c5af28bc0b3e6252dc71e5b8dabb6ceca335023f", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ import ast::{crate, expr_, mac_invoc,\n                      mac_aq, mac_var};\n import parse::parser;\n import parse::parser::parse_from_source_str;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n import fold::*;\n import visit::*;\n@@ -34,7 +34,7 @@ trait qq_helper {\n     fn get_fold_fn() -> ~str;\n }\n \n-impl of qq_helper for @ast::crate {\n+impl @ast::crate: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_crate(*self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n@@ -44,7 +44,7 @@ impl of qq_helper for @ast::crate {\n     }\n     fn get_fold_fn() -> ~str {~\"fold_crate\"}\n }\n-impl of qq_helper for @ast::expr {\n+impl @ast::expr: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_expr(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {\n@@ -59,7 +59,7 @@ impl of qq_helper for @ast::expr {\n     }\n     fn get_fold_fn() -> ~str {~\"fold_expr\"}\n }\n-impl of qq_helper for @ast::ty {\n+impl @ast::ty: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_ty(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {\n@@ -74,7 +74,7 @@ impl of qq_helper for @ast::ty {\n     }\n     fn get_fold_fn() -> ~str {~\"fold_ty\"}\n }\n-impl of qq_helper for @ast::item {\n+impl @ast::item: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_item(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n@@ -84,7 +84,7 @@ impl of qq_helper for @ast::item {\n     }\n     fn get_fold_fn() -> ~str {~\"fold_item\"}\n }\n-impl of qq_helper for @ast::stmt {\n+impl @ast::stmt: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_stmt(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n@@ -94,7 +94,7 @@ impl of qq_helper for @ast::stmt {\n     }\n     fn get_fold_fn() -> ~str {~\"fold_stmt\"}\n }\n-impl of qq_helper for @ast::pat {\n+impl @ast::pat: qq_helper {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_pat(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}"}, {"sha": "98289152d339bce555c3665c8f32cd85048bb629", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,6 @@\n import codemap::span;\n import std::map::{hashmap, str_hash, box_str_hash};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n import base::*;\n "}, {"sha": "a0717591b49737025108a67fd4605d99233ad8f9", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ import parse::parser::{parser,SOURCE_FILE};\n //import parse::common::parser_common;\n import parse::common::*; //resolve bug?\n import parse::parse_sess;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n import ast_util::mk_sp;\n import std::map::{hashmap, box_str_hash};"}, {"sha": "557b11c5d95a0b06c0c04a7509d6336e55721b0e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ import base::{ext_ctxt, mac_result, mr_expr, mr_def, expr_tt};\n import codemap::span;\n import ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n-import parse::lexer::{new_tt_reader, tt_reader_as_reader, reader};\n+import parse::lexer::{new_tt_reader, reader};\n import parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n import parse::parser::{parser, SOURCE_FILE};\n import earley_parser::{parse, parse_or_else, success, failure, named_match,"}, {"sha": "48d0bf12845133951073c4342bd125727590c4b4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -652,7 +652,7 @@ fn default_ast_fold() -> ast_fold_precursor {\n           new_span: noop_span};\n }\n \n-impl of ast_fold for ast_fold_precursor {\n+impl ast_fold_precursor: ast_fold {\n     /* naturally, a macro to write these would be nice */\n     fn fold_crate(c: crate) -> crate {\n         let (n, s) = self.fold_crate(c.node, c.span, self as ast_fold);\n@@ -763,7 +763,7 @@ impl of ast_fold for ast_fold_precursor {\n     }\n }\n \n-impl extensions for ast_fold {\n+impl ast_fold {\n     fn fold_attributes(attrs: ~[attribute]) -> ~[attribute] {\n         attrs.map(|x| fold_attribute_(x, self))\n     }"}, {"sha": "6936eeed8f912152087292b73893925447e296f9", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,4 @@\n //! The main parser interface\n-import dvec::extensions;\n \n export parse_sess;\n export new_parse_sess, new_parse_sess_special_handler;\n@@ -19,8 +18,7 @@ import common::parser_common;\n import ast::node_id;\n import util::interner;\n import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n-import lexer::{reader, string_reader, string_reader_as_reader};\n-import lexer::{tt_reader_as_reader};\n+import lexer::{reader, string_reader};\n \n type parse_sess = @{\n     cm: codemap::codemap,"}, {"sha": "a93d25ced00e4ba846855f7af80bcb1aa72376b6", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -23,7 +23,7 @@ trait parser_attr {\n     fn parse_optional_meta() -> ~[@ast::meta_item];\n }\n \n-impl parser_attr of parser_attr for parser {\n+impl parser: parser_attr {\n \n     fn parse_outer_attrs_or_ext(first_item_attrs: ~[ast::attribute])\n         -> attr_or_ext"}, {"sha": "d3c17b812983e3212f511b362319f560318dba64", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,8 +1,7 @@\n-import io::reader_util;\n import io::println;//XXXXXXXXxxx\n import util::interner;\n import lexer::{string_reader, bump, is_eof, nextch,\n-               is_whitespace, get_str_from, string_reader_as_reader, reader};\n+               is_whitespace, get_str_from, reader};\n \n export cmnt;\n export lit;"}, {"sha": "4038578d3f8ebc9849f4d0ce4966c871a61a4e28", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -59,7 +59,7 @@ trait parser_common {\n                           f: fn(parser) -> T) -> spanned<~[T]>;\n }\n \n-impl parser_common of parser_common for parser {\n+impl parser: parser_common {\n     fn unexpected_last(t: token::token) -> ! {\n         self.span_fatal(\n             copy self.last_span,"}, {"sha": "69dde491bdf9983dfdc8901abbf6f4c95168c6df", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -68,7 +68,7 @@ fn dup_string_reader(&&r: string_reader) -> string_reader {\n       mut peek_tok: r.peek_tok, mut peek_span: r.peek_span}\n }\n \n-impl string_reader_as_reader of reader for string_reader {\n+impl string_reader: reader {\n     fn is_eof() -> bool { is_eof(self) }\n     fn next_token() -> {tok: token::token, sp: span} {\n         let ret_val = {tok: self.peek_tok, sp: self.peek_span};\n@@ -86,7 +86,7 @@ impl string_reader_as_reader of reader for string_reader {\n     fn dup() -> reader { dup_string_reader(self) as reader }\n }\n \n-impl tt_reader_as_reader of reader for tt_reader {\n+impl tt_reader: reader {\n     fn is_eof() -> bool { self.cur_tok == token::EOF }\n     fn next_token() -> {tok: token::token, sp: span} {\n         /* weird resolve bug: if the following `if`, or any of its"}, {"sha": "a572290a6f1189ab6656aded6fc5413a9282da91", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -8,12 +8,12 @@ import token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n import codemap::{span,fss_none};\n import util::interner;\n import ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n-import lexer::{reader, tt_reader_as_reader};\n+import lexer::reader;\n import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n                 seq_sep_none, token_to_str};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import vec::{push};\n import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value,\n@@ -2424,9 +2424,6 @@ class parser {\n     }\n \n     // Parses four variants (with the region/type params always optional):\n-    //    impl /&<T: copy> of to_str for ~[T] { ... }\n-    //    impl name/&<T> of to_str for ~[T] { ... }\n-    //    impl name/&<T> for ~[T] { ... }\n     //    impl<T> ~[T] : to_str { ... }\n     fn parse_item_impl() -> item_info {\n         fn wrap_path(p: parser, pt: @path) -> @ty {\n@@ -2466,6 +2463,7 @@ class parser {\n                 traits = ~[];\n             }\n         } else {\n+            self.warn(~\"old-style named impl?\");\n             let mut ident_old;\n             if self.token == token::BINOP(token::SLASH) {\n                 self.parse_region_param();"}, {"sha": "5bbf5deb4293d8eed520e4c240dfa7d2ce3f6a5e", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n import io::writer_util;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's\n@@ -232,7 +232,7 @@ enum printer {\n     printer_(@printer_)\n }\n \n-impl printer for printer {\n+impl printer {\n     fn last_token() -> token { self.token[self.right] }\n     // be very careful with this!\n     fn replace_last_token(t: token) { self.token[self.right] = t; }"}, {"sha": "7a20dc1d3be9bf018ae4fd67390f5f6fda79bad0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ import pp::{break_offset, word, printer,\n import diagnostic;\n import ast::{required, provided};\n import ast_util::{operator_prec};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import parse::classify::*;\n import util::interner;\n "}, {"sha": "e003408f3fdd8a78ccd2939bea4e7c68f453251b", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,7 @@\n // type, and vice versa.\n import std::map;\n import std::map::{hashmap, hashfn, eqfn};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n type hash_interner<T: const> =\n     {map: hashmap<T, uint>,\n@@ -25,7 +25,7 @@ trait interner<T: const copy> {\n     fn len() -> uint;\n }\n \n-impl <T: const copy> of interner<T> for hash_interner<T> {\n+impl <T: const copy> hash_interner<T>: interner<T> {\n     fn intern(val: T) -> uint {\n         match self.map.find(val) {\n           some(idx) => return idx,"}, {"sha": "779739f8103f5ae7148f3a2c89f1e4b2ee5faa8e", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ import util::ppaux;\n import back::link;\n import result::{ok, err};\n import std::getopts;\n-import io::{reader_util, writer_util};\n+import io::writer_util;\n import getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::{x86, x86_64};\n import std::map::hashmap;"}, {"sha": "d737e41f81656e3b18a626846687a3ce04bb317f", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -18,7 +18,6 @@ import syntax::codemap;\n import syntax::diagnostic;\n import rustc::driver::session;\n import rustc::middle::lint;\n-import io::reader_util;\n \n fn version(argv0: ~str) {\n     let mut vers = ~\"unknown version\";"}, {"sha": "172f940e2f17e709855de685af50d8e3c0b64736", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -110,7 +110,7 @@ enum session {\n     session_(@session_)\n }\n \n-impl session for session {\n+impl session {\n     fn span_fatal(sp: span, msg: ~str) -> ! {\n         self.span_diagnostic.span_fatal(sp, msg)\n     }"}, {"sha": "2f892c9ba9df5321084a9a566eaf0f52d1c2ceed", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,7 +9,7 @@ import syntax::codemap::span;\n import driver::session;\n import session::session;\n import syntax::attr;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export modify_for_testing;\n "}, {"sha": "13c85d02b73026937ca0ee5cf52463b2b4787a36", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,7 +9,7 @@ import std::map::{hashmap, int_hash};\n import syntax::print::pprust;\n import filesearch::filesearch;\n import common::*;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export read_crates;\n "}, {"sha": "985cdd9c2d1323ddde0525b697ad456b5acc25ce", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ import syntax::diagnostic::span_handler;\n import syntax::diagnostic::expect;\n import common::*;\n import std::map::hashmap;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export class_dtor;\n export get_symbol;"}, {"sha": "7dcbae048dd43f4962d7e4d672a9fd580450da6f", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@\n \n import std::{ebml, map};\n import std::map::{hashmap, str_hash};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import io::writer_util;\n import syntax::{ast, ast_util};\n import syntax::attr;\n@@ -13,7 +13,6 @@ import tydecode::{parse_ty_data, parse_def_id, parse_bounds_data,\n import syntax::print::pprust;\n import cmd=cstore::crate_metadata;\n import util::ppaux::ty_to_str;\n-import ebml::deserializer;\n import syntax::diagnostic::span_handler;\n import common::*;\n "}, {"sha": "eb8b2ffec635626613694833b576b1c637464a23", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -36,7 +36,7 @@ fn mk_filesearch(maybe_sysroot: option<path>,\n     type filesearch_impl = {sysroot: path,\n                             addl_lib_search_paths: ~[path],\n                             target_triple: ~str};\n-    impl of filesearch for filesearch_impl {\n+    impl filesearch_impl: filesearch {\n         fn sysroot() -> path { self.sysroot }\n         fn lib_search_paths() -> ~[path] {\n             let mut paths = self.addl_lib_search_paths;"}, {"sha": "d1ccc72ac00c3debc51db028d5d5a8580021f974", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,27 +1,21 @@\n import util::ppaux::ty_to_str;\n \n-import dvec::extensions;\n import syntax::ast;\n import syntax::fold;\n import syntax::fold::*;\n import syntax::visit;\n import syntax::ast_map;\n import syntax::ast_util;\n-import syntax::ast_util::inlined_item_methods;\n import syntax::codemap::span;\n import std::ebml;\n import std::ebml::writer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n-import std::ebml::extensions;\n import std::ebml::get_doc;\n import std::map::hashmap;\n import std::serialization::serializer;\n import std::serialization::deserializer;\n import std::serialization::serializer_helpers;\n import std::serialization::deserializer_helpers;\n import std::prettyprint::serializer;\n-import std::smallintmap::map;\n import middle::{ty, typeck};\n import middle::typeck::{method_origin, method_map_entry,\n                         serialize_method_map_entry,\n@@ -155,7 +149,7 @@ fn reserve_id_range(sess: session,\n     return {min: to_id_min, max: to_id_min};\n }\n \n-impl translation_routines for extended_decode_ctxt {\n+impl extended_decode_ctxt {\n     fn tr_id(id: ast::node_id) -> ast::node_id {\n         // from_id_range should be non-empty\n         assert !ast_util::empty(self.from_id_range);\n@@ -173,7 +167,7 @@ impl translation_routines for extended_decode_ctxt {\n     }\n }\n \n-impl of tr for ast::def_id {\n+impl ast::def_id: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def_id {\n         xcx.tr_def_id(self)\n     }\n@@ -182,7 +176,7 @@ impl of tr for ast::def_id {\n     }\n }\n \n-impl of tr for span {\n+impl span: tr {\n     fn tr(xcx: extended_decode_ctxt) -> span {\n         xcx.tr_span(self)\n     }\n@@ -192,7 +186,7 @@ trait def_id_serializer_helpers {\n     fn emit_def_id(did: ast::def_id);\n }\n \n-impl serializer_helpers<S: serializer> of def_id_serializer_helpers for S {\n+impl<S: serializer> S: def_id_serializer_helpers {\n     fn emit_def_id(did: ast::def_id) {\n         ast::serialize_def_id(self, did)\n     }\n@@ -202,8 +196,7 @@ trait def_id_deserializer_helpers {\n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id;\n }\n \n-impl deserializer_helpers<D: deserializer> of def_id_deserializer_helpers\n-        for D {\n+impl<D: deserializer> D: def_id_deserializer_helpers {\n \n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id {\n         let did = ast::deserialize_def_id(self);\n@@ -350,7 +343,7 @@ fn decode_def(xcx: extended_decode_ctxt, doc: ebml::doc) -> ast::def {\n     def.tr(xcx)\n }\n \n-impl of tr for ast::def {\n+impl ast::def: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def {\n         match self {\n           ast::def_fn(did, p) => { ast::def_fn(did.tr(xcx), p) }\n@@ -396,14 +389,14 @@ trait ebml_deserializer_helper {\n     fn read_freevar_entry(xcx: extended_decode_ctxt) -> freevar_entry;\n }\n \n-impl helper of ebml_deserializer_helper for ebml::ebml_deserializer {\n+impl ebml::ebml_deserializer: ebml_deserializer_helper {\n     fn read_freevar_entry(xcx: extended_decode_ctxt) -> freevar_entry {\n         let fv = deserialize_freevar_entry(self);\n         fv.tr(xcx)\n     }\n }\n \n-impl of tr for freevar_entry {\n+impl freevar_entry: tr {\n     fn tr(xcx: extended_decode_ctxt) -> freevar_entry {\n         {def: self.def.tr(xcx), span: self.span.tr(xcx)}\n     }\n@@ -416,14 +409,14 @@ trait read_method_map_entry_helper {\n     fn read_method_map_entry(xcx: extended_decode_ctxt) -> method_map_entry;\n }\n \n-impl helper of read_method_map_entry_helper for ebml::ebml_deserializer {\n+impl ebml::ebml_deserializer: read_method_map_entry_helper {\n     fn read_method_map_entry(xcx: extended_decode_ctxt) -> method_map_entry {\n         let mme = deserialize_method_map_entry(self);\n         {derefs: mme.derefs, origin: mme.origin.tr(xcx)}\n     }\n }\n \n-impl of tr for method_origin {\n+impl method_origin: tr {\n     fn tr(xcx: extended_decode_ctxt) -> method_origin {\n         match self {\n           typeck::method_static(did) => {\n@@ -502,7 +495,7 @@ trait vtable_deserialization_helpers {\n     fn read_vtable_origin(xcx: extended_decode_ctxt) -> typeck::vtable_origin;\n }\n \n-impl helpers of vtable_deserialization_helpers for ebml::ebml_deserializer {\n+impl ebml::ebml_deserializer: vtable_deserialization_helpers {\n     fn read_vtable_res(xcx: extended_decode_ctxt) -> typeck::vtable_res {\n         @self.read_to_vec(|| self.read_vtable_origin(xcx) )\n     }\n@@ -558,7 +551,7 @@ trait get_ty_str_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt;\n }\n \n-impl helpers of get_ty_str_ctxt for @e::encode_ctxt {\n+impl @e::encode_ctxt: get_ty_str_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt {\n         @{diag: self.tcx.sess.diagnostic(),\n           ds: e::def_to_str,\n@@ -575,7 +568,7 @@ trait ebml_writer_helpers {\n     fn emit_tpbt(ecx: @e::encode_ctxt, tpbt: ty::ty_param_bounds_and_ty);\n }\n \n-impl helpers of ebml_writer_helpers for ebml::writer {\n+impl ebml::writer: ebml_writer_helpers {\n     fn emit_ty(ecx: @e::encode_ctxt, ty: ty::t) {\n         e::write_type(ecx, self, ty)\n     }\n@@ -612,7 +605,7 @@ trait write_tag_and_id {\n     fn id(id: ast::node_id);\n }\n \n-impl writer of write_tag_and_id for ebml::writer {\n+impl ebml::writer: write_tag_and_id {\n     fn tag(tag_id: c::astencode_tag, f: fn()) {\n         do self.wr_tag(tag_id as uint) { f() }\n     }\n@@ -771,7 +764,7 @@ trait doc_decoder_helpers {\n     fn opt_child(tag: c::astencode_tag) -> option<ebml::doc>;\n }\n \n-impl decoder of doc_decoder_helpers for ebml::doc {\n+impl ebml::doc: doc_decoder_helpers {\n     fn as_int() -> int { ebml::doc_as_u64(self) as int }\n     fn opt_child(tag: c::astencode_tag) -> option<ebml::doc> {\n         ebml::maybe_get_doc(self, tag as uint)\n@@ -786,8 +779,7 @@ trait ebml_deserializer_decoder_helpers {\n                                 -> ty::ty_param_bounds_and_ty;\n }\n \n-impl decoder of ebml_deserializer_decoder_helpers\n-        for ebml::ebml_deserializer {\n+impl ebml::ebml_deserializer: ebml_deserializer_decoder_helpers {\n \n     fn read_ty(xcx: extended_decode_ctxt) -> ty::t {\n         // Note: regions types embed local node ids.  In principle, we\n@@ -922,7 +914,7 @@ trait fake_ext_ctxt {\n type fake_session = ();\n \n #[cfg(test)]\n-impl of fake_ext_ctxt for fake_session {\n+impl fake_session: fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { parse::new_parse_sess(none) }\n }"}, {"sha": "61caf4a2509302baf445abbad3aa9943981baad3", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -224,12 +224,12 @@ import util::ppaux::{ty_to_str, region_to_str, explain_region};\n import std::map::{int_hash, hashmap, set};\n import std::list;\n import std::list::{list, cons, nil};\n-import result::{result, ok, err, extensions};\n+import result::{result, ok, err};\n import syntax::print::pprust;\n import util::common::indenter;\n import ty::to_str;\n import driver::session::session;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import mem_categorization::*;\n \n export check_crate, root_map, mutbl_map;"}, {"sha": "4c596a343544f779df87d7780f98c58ecadc37e7", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves to dnot affect things loaned out in any way\n \n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export check_loans;\n \n@@ -59,7 +59,7 @@ enum assignment_type {\n     at_mutbl_ref,\n }\n \n-impl methods for assignment_type {\n+impl assignment_type {\n     fn checked_by_liveness() -> bool {\n         // the liveness pass guarantees that immutable local variables\n         // are only assigned once; but it doesn't consider &mut\n@@ -78,7 +78,7 @@ impl methods for assignment_type {\n     }\n }\n \n-impl methods for check_loan_ctxt {\n+impl check_loan_ctxt {\n     fn tcx() -> ty::ctxt { self.bccx.tcx }\n \n     fn purity(scope_id: ast::node_id) -> option<purity_cause> {"}, {"sha": "bcf36b4cb1ac76e0227437c16af4f8bf35099e8d", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,8 +7,7 @@\n // sure that all of these loans are honored.\n \n import mem_categorization::{opt_deref_kind};\n-import loan::public_methods;\n-import preserve::{public_methods, preserve_condition, pc_ok, pc_if_pure};\n+import preserve::{preserve_condition, pc_ok, pc_if_pure};\n import ty::ty_region;\n \n export gather_loans;\n@@ -243,7 +242,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n     self.root_ub = old_root_ub;\n }\n \n-impl methods for gather_loan_ctxt {\n+impl gather_loan_ctxt {\n     fn tcx() -> ty::ctxt { self.bccx.tcx }\n \n     // guarantees that addr_of(cmt) will be valid for the duration of"}, {"sha": "ea917ec60d2588729811db2a25941d42197ce17d", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,7 +5,7 @@\n export public_methods;\n import result::{result, ok, err};\n \n-impl public_methods for borrowck_ctxt {\n+impl borrowck_ctxt {\n     fn loan(cmt: cmt,\n             scope_region: ty::region,\n             mutbl: ast::mutability) -> bckres<@dvec<loan>> {\n@@ -33,7 +33,7 @@ enum loan_ctxt {\n     loan_ctxt_(@loan_ctxt_)\n }\n \n-impl loan_methods for loan_ctxt {\n+impl loan_ctxt {\n     fn tcx() -> ty::ctxt { self.bccx.tcx }\n \n     fn ok_with_loan_of(cmt: cmt,"}, {"sha": "964a54bcad432320df50190890e4fa3f5e759da6", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ enum preserve_condition {\n     pc_if_pure(bckerr)\n }\n \n-impl public_methods for preserve_condition {\n+impl preserve_condition {\n     // combines two preservation conditions such that if either of\n     // them requires purity, the result requires purity\n     fn combine(pc: preserve_condition) -> preserve_condition {\n@@ -21,7 +21,7 @@ impl public_methods for preserve_condition {\n     }\n }\n \n-impl public_methods for borrowck_ctxt {\n+impl borrowck_ctxt {\n     fn preserve(cmt: cmt,\n                 scope_region: ty::region,\n                 item_ub: ast::node_id,\n@@ -54,7 +54,7 @@ enum preserve_ctxt = {\n };\n \n \n-impl private_methods for &preserve_ctxt {\n+priv impl &preserve_ctxt {\n     fn tcx() -> ty::ctxt { self.bccx.tcx }\n \n     fn preserve(cmt: cmt) -> bckres<preserve_condition> {"}, {"sha": "67e5d9cd6a15d760bcb8e9783d5ccd0a933b10cc", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ import syntax::ast::*;\n import syntax::{visit, ast_util, ast_map};\n import driver::session::session;\n import std::map::hashmap;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n                def_map: resolve3::DefMap,"}, {"sha": "61d9938e3882cc83d66858091cdbf228b635cc96", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,13 +1,12 @@\n import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n-import ty::{kind, kind_copyable, kind_noncopyable, kind_const, operators};\n+import ty::{kind, kind_copyable, kind_noncopyable, kind_const};\n import driver::session::session;\n import std::map::hashmap;\n import util::ppaux::{ty_to_str, tys_to_str};\n import syntax::print::pprust::expr_to_str;\n import freevars::freevar_entry;\n-import dvec::extensions;\n import lint::{non_implicitly_copyable_typarams,implicit_copies};\n \n // Kind analysis pass."}, {"sha": "8afcab79444ee13511e80b176743affa8dc4ec1f", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -205,7 +205,7 @@ enum ctxt {\n     ctxt_(ctxt_)\n }\n \n-impl methods for ctxt {\n+impl ctxt {\n     fn get_level(lint: lint) -> level {\n         get_lint_level(self.curr, lint)\n     }"}, {"sha": "4c4bf98626b77c40b7b7c066e91505992c5f14af", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -100,7 +100,7 @@\n  * - `self_var`: a variable representing 'self'\n  */\n \n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import std::map::{hashmap, int_hash, str_hash, box_str_hash};\n import syntax::{visit, ast_util};\n import syntax::print::pprust::{expr_to_str};\n@@ -152,11 +152,11 @@ fn check_crate(tcx: ty::ctxt,\n     return last_use_map;\n }\n \n-impl of to_str::to_str for live_node {\n+impl live_node: to_str::to_str {\n     fn to_str() -> ~str { fmt!{\"ln(%u)\", *self} }\n }\n \n-impl of to_str::to_str for variable {\n+impl variable: to_str::to_str {\n     fn to_str() -> ~str { fmt!{\"v(%u)\", *self} }\n }\n \n@@ -182,7 +182,7 @@ impl of to_str::to_str for variable {\n // variable must not be assigned if there is some successor\n // assignment.  And so forth.\n \n-impl methods for live_node {\n+impl live_node {\n     pure fn is_valid() -> bool { *self != uint::max_value }\n }\n \n@@ -1477,7 +1477,7 @@ enum read_kind {\n     moved_variable\n }\n \n-impl check_methods for @liveness {\n+impl @liveness {\n     fn check_fields(sp: span, entry_ln: live_node) {\n         for self.ir.field_map.each |nm, var| {\n             match (*self).live_on_entry(entry_ln, var) {"}, {"sha": "d600f63246a94a5f8e8c34dada3337c343cede32", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -209,12 +209,12 @@ trait ast_node {\n     fn span() -> span;\n }\n \n-impl of ast_node for @ast::expr {\n+impl @ast::expr: ast_node {\n     fn id() -> ast::node_id { self.id }\n     fn span() -> span { self.span }\n }\n \n-impl of ast_node for @ast::pat {\n+impl @ast::pat: ast_node {\n     fn id() -> ast::node_id { self.id }\n     fn span() -> span { self.span }\n }\n@@ -223,7 +223,7 @@ trait get_type_for_node {\n     fn ty<N: ast_node>(node: N) -> ty::t;\n }\n \n-impl methods of get_type_for_node for ty::ctxt {\n+impl ty::ctxt: get_type_for_node {\n     fn ty<N: ast_node>(node: N) -> ty::t {\n         ty::node_id_to_type(self, node.id())\n     }"}, {"sha": "a9117ae8bcb38a41674cb6850a2e43da20dcc246", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -14,7 +14,7 @@ import syntax::codemap::span;\n import syntax::print::pprust;\n import syntax::ast_util::new_def_hash;\n import syntax::ast_map;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import metadata::csearch;\n \n import std::list;\n@@ -365,7 +365,7 @@ enum determine_rp_ctxt {\n     determine_rp_ctxt_(@determine_rp_ctxt_)\n }\n \n-impl methods for determine_rp_ctxt {\n+impl determine_rp_ctxt {\n     fn add_rp(id: ast::node_id) {\n         assert id != 0;\n         if self.region_paramd_items.insert(id, ()) {"}, {"sha": "f30ab29b9b0a53ece6590a1278648aa5a17a5c72", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -52,7 +52,7 @@ import syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n import syntax::visit::{visit_mod, visit_ty, vt};\n \n import box::ptr_eq;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import option::{get, is_some};\n import str::{connect, split_str};\n import vec::pop;"}, {"sha": "1e2a9f422918f840a2b22d366cfe9728929eb218", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -13,7 +13,7 @@ import syntax::print::pprust::pat_to_str;\n import middle::resolve3::DefMap;\n import back::abi;\n import std::map::hashmap;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n import common::*;\n "}, {"sha": "354b368897aeb2b06eb6213d24bf3d642888dbba", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -22,7 +22,7 @@ import session::session;\n import syntax::attr;\n import back::{link, abi, upcall};\n import syntax::{ast, ast_util, codemap, ast_map};\n-import ast_util::{inlined_item_methods, local_def, path_to_ident};\n+import ast_util::{local_def, path_to_ident};\n import syntax::visit;\n import syntax::codemap::span;\n import syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n@@ -98,7 +98,7 @@ trait get_insn_ctxt {\n     fn insn_ctxt(s: ~str) -> icx_popper;\n }\n \n-impl ccx_icx of get_insn_ctxt for @crate_ctxt {\n+impl @crate_ctxt: get_insn_ctxt {\n     fn insn_ctxt(s: ~str) -> icx_popper {\n         debug!{\"new insn_ctxt: %s\", s};\n         if self.sess.count_llvm_insns() {\n@@ -108,13 +108,13 @@ impl ccx_icx of get_insn_ctxt for @crate_ctxt {\n     }\n }\n \n-impl bcx_icx of get_insn_ctxt for block {\n+impl block: get_insn_ctxt {\n     fn insn_ctxt(s: ~str) -> icx_popper {\n         self.ccx().insn_ctxt(s)\n     }\n }\n \n-impl fcx_icx of get_insn_ctxt for fn_ctxt {\n+impl fn_ctxt: get_insn_ctxt {\n     fn insn_ctxt(s: ~str) -> icx_popper {\n         self.ccx.insn_ctxt(s)\n     }"}, {"sha": "20a9ab752e0fcd38974257d3c1c6a231de2aec03", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -18,7 +18,6 @@ import util::ppaux::ty_to_str;\n import syntax::ast_map::{path, path_mod, path_name};\n import driver::session::session;\n import std::map::hashmap;\n-import dvec::extensions;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "1d8c4686c559706ade18ecb5e43bef3728e7148a", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -355,19 +355,22 @@ trait get_node_info {\n     fn info() -> option<node_info>;\n }\n \n-impl node_info of get_node_info for @ast::expr {\n+impl @ast::expr: get_node_info {\n     fn info() -> option<node_info> {\n         some({id: self.id, span: self.span})\n     }\n }\n \n-impl node_info of get_node_info for ast::blk {\n+impl ast::blk: get_node_info {\n     fn info() -> option<node_info> {\n         some({id: self.node.id, span: self.span})\n     }\n }\n \n-impl node_info of get_node_info for option<@ast::expr> {\n+// XXX: Work around a trait parsing bug. remove after snapshot\n+type optional_boxed_ast_expr = option<@ast::expr>;\n+\n+impl optional_boxed_ast_expr: get_node_info {\n     fn info() -> option<node_info> {\n         self.chain(|s| s.info())\n     }\n@@ -471,7 +474,7 @@ fn block_parent(cx: block) -> block {\n \n // Accessors\n \n-impl bcx_cxs for block {\n+impl block {\n     pure fn ccx() -> @crate_ctxt { self.fcx.ccx }\n     pure fn tcx() -> ty::ctxt { self.fcx.ccx.tcx }\n     pure fn sess() -> session { self.fcx.ccx.sess }"}, {"sha": "939a50e8b715cbb521f32f5b297fd7736a41c096", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -18,7 +18,7 @@ enum reflector = {\n     mut bcx: block\n };\n \n-impl methods for reflector {\n+impl reflector {\n \n     fn c_uint(u: uint) -> ValueRef {\n         C_uint(self.bcx.ccx(), u)"}, {"sha": "32687733554507a2a7f38c5b8a1f2ea3430a4e5e", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -15,8 +15,7 @@ import syntax::ast_util::{dummy_sp, new_def_hash};\n import syntax::util::interner;\n import util::ppaux::ty_to_str;\n import syntax::codemap::span;\n-import dvec::{dvec, extensions};\n-import vec::extensions;\n+import dvec::dvec;\n \n import std::map::hashmap;\n import option::is_some;"}, {"sha": "5c4fe4686861589a55f2f8bc4c468c7726a71de3", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,7 +5,7 @@ import back::abi;\n import base::{call_memmove,\n               INIT, copy_val, load_if_immediate, get_tydesc,\n               sub_block, do_spill_noroot,\n-              dest, bcx_icx, non_gc_box_cast, move_val, lval_owned};\n+              dest, non_gc_box_cast, move_val, lval_owned};\n import syntax::codemap::span;\n import shape::llsize_of;\n import build::*;"}, {"sha": "8cc87932b035bd05bce260c319cbfc6aec22ec2c", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -485,17 +485,17 @@ trait vid {\n     pure fn to_str() -> ~str;\n }\n \n-impl of vid for tv_vid {\n+impl tv_vid: vid {\n     pure fn to_uint() -> uint { *self }\n     pure fn to_str() -> ~str { fmt!{\"<V%u>\", self.to_uint()} }\n }\n \n-impl of vid for tvi_vid {\n+impl tvi_vid: vid {\n     pure fn to_uint() -> uint { *self }\n     pure fn to_str() -> ~str { fmt!{\"<VI%u>\", self.to_uint()} }\n }\n \n-impl of vid for region_vid {\n+impl region_vid: vid {\n     pure fn to_uint() -> uint { *self }\n     pure fn to_str() -> ~str { fmt!{\"<R%u>\", self.to_uint()} }\n }\n@@ -504,7 +504,7 @@ trait purity_to_str {\n     pure fn to_str() -> ~str;\n }\n \n-impl of purity_to_str for purity {\n+impl purity: purity_to_str {\n     pure fn to_str() -> ~str {\n         purity_to_str(self)\n     }\n@@ -1469,7 +1469,7 @@ fn remove_copyable(k: kind) -> kind {\n     k - kind_(KIND_MASK_COPY)\n }\n \n-impl operators for kind {\n+impl kind {\n     fn &(other: kind) -> kind {\n         lower_kind(self, other)\n     }\n@@ -1483,23 +1483,23 @@ impl operators for kind {\n     }\n }\n \n-impl operators of ops::bitand<kind,kind> for kind {\n+impl kind: ops::bitand<kind,kind> {\n     pure fn bitand(other: kind) -> kind {\n         unchecked {\n             lower_kind(self, other)\n         }\n     }\n }\n \n-impl operators of ops::bitor<kind,kind> for kind {\n+impl kind: ops::bitor<kind,kind> {\n     pure fn bitor(other: kind) -> kind {\n         unchecked {\n             raise_kind(self, other)\n         }\n     }\n }\n \n-impl operators of ops::sub<kind,kind> for kind {\n+impl kind: ops::sub<kind,kind> {\n     pure fn sub(other: kind) -> kind {\n         unchecked {\n             kind_(*self & !*other)"}, {"sha": "690322ec4db30d3dbbdcf7eb970fef14ad957e58", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -38,7 +38,7 @@ independently:\n \n */\n \n-import result::{result, extensions};\n+import result::result;\n import syntax::{ast, ast_util, ast_map};\n import ast::spanned;\n import ast::{required, provided};\n@@ -54,9 +54,7 @@ import pat_util::{pat_is_variant, pat_id_map};\n import middle::ty;\n import middle::ty::{arg, field, node_type_table, mk_nil,\n                     ty_param_bounds_and_ty, lookup_public_fields};\n-import middle::typeck::infer::methods;\n import std::smallintmap;\n-import std::smallintmap::map;\n import std::map;\n import std::map::{hashmap, int_hash};\n import std::serialization::{serialize_uint, deserialize_uint};"}, {"sha": "fa1fb0002345a0233f11aa949ad05f6d18ff7af3", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -68,13 +68,11 @@ type parameter).\n \n import astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n import astconv::{ast_region_to_region};\n-import collect::{methods}; // ccx.to_ty()\n import middle::ty::{tv_vid, vid};\n import regionmanip::{replace_bound_regions_in_fn_ty};\n import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n import rscope::{in_binding_rscope, region_scope, type_rscope};\n import syntax::ast::ty_i;\n-import typeck::infer::{unify_methods}; // infcx.set()\n import typeck::infer::{resolve_type, force_tvar};\n \n import std::map::str_hash;\n@@ -149,7 +147,7 @@ trait get_and_find_region {\n     fn find(br: ty::bound_region) -> option<ty::region>;\n }\n \n-impl methods of get_and_find_region for isr_alist {\n+impl isr_alist: get_and_find_region {\n     fn get(br: ty::bound_region) -> ty::region {\n         option::get(self.find(br))\n     }\n@@ -504,7 +502,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     }\n }\n \n-impl of ast_conv for @fn_ctxt {\n+impl @fn_ctxt: ast_conv {\n     fn tcx() -> ty::ctxt { self.ccx.tcx }\n     fn ccx() -> @crate_ctxt { self.ccx }\n \n@@ -517,7 +515,7 @@ impl of ast_conv for @fn_ctxt {\n     }\n }\n \n-impl of region_scope for @fn_ctxt {\n+impl @fn_ctxt: region_scope {\n     fn anon_region() -> result<ty::region, ~str> {\n         result::ok(self.infcx.next_region_var_nb())\n     }\n@@ -534,7 +532,7 @@ impl of region_scope for @fn_ctxt {\n     }\n }\n \n-impl methods for @fn_ctxt {\n+impl @fn_ctxt {\n     fn tag() -> ~str { fmt!{\"%x\", ptr::addr_of(*self) as uint} }\n     fn block_region() -> result<ty::region, ~str> {\n         result::ok(ty::re_scope(self.region_lb))"}, {"sha": "99afc9e19fe145fa11a738f6a794288af7550d05", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,3 @@\n-import middle::typeck::infer::methods; // next_ty_var,\n-                                       // resolve_type_vars_if_possible\n import syntax::print::pprust;\n \n fn check_alt(fcx: @fn_ctxt,"}, {"sha": "cdb2a93060871ef9bcd707b29c3682b8ed6de522", "filename": "src/rustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,4 +1,4 @@\n-import check::{fn_ctxt, methods};\n+import check::fn_ctxt;\n \n // Requires that the two types unify, and prints an error message if they\n // don't."}, {"sha": "6ff3c768b1c1510901498a7e561af32b9223df9e", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,14 +3,13 @@\n import coherence::get_base_type_def_id;\n import middle::resolve3::{Impl, MethodInfo};\n import middle::ty::{mk_box, mk_rptr, mk_uniq};\n-import middle::typeck::infer::methods; // next_ty_vars\n import syntax::ast::{def_id,\n                      sty_static, sty_box, sty_by_ref, sty_region, sty_uniq};\n import syntax::ast::{sty_value};\n import syntax::ast_map;\n import syntax::ast_map::node_id_to_str;\n import syntax::ast_util::{dummy_sp, new_def_hash};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n type candidate = {\n     self_ty: ty::t,          // type of a in a.b()"}, {"sha": "34a0bfc41a56e9dee90010884b35f244ae57af15", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -27,7 +27,7 @@ import middle::pat_util::pat_bindings;\n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;\n \n-impl methods for @rcx {\n+impl @rcx {\n     /// Try to resolve the type for the given node.\n     ///\n     /// Note one important point: we do not attempt to resolve *region"}, {"sha": "3632ad33e0e109f3f7044c34b2c0dd08a974632a", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,6 @@\n-import check::{fn_ctxt, impl_self_ty, methods};\n+import check::{fn_ctxt, impl_self_ty};\n import infer::{resolve_type, resolve_all, force_all, fixup_err_to_str};\n import ast_util::new_def_hash;\n-import dvec::extensions;\n \n fn has_trait_bounds(tps: ~[ty::param_bounds]) -> bool {\n     vec::any(tps, |bs| {"}, {"sha": "9e336ca5ea02f6b48ffcf09df4fe8c56d7adcad0", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-import check::{fn_ctxt, lookup_local, methods};\n+import check::{fn_ctxt, lookup_local};\n import infer::{resolve_type, resolve_all, force_all};\n export resolve_type_vars_in_fn;\n export resolve_type_vars_in_expr;"}, {"sha": "d84b7ad69c07d42b5fdc49d7735ee50a364e427b", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -30,8 +30,8 @@ import syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n import syntax::visit::{visit_mod};\n import util::ppaux::ty_to_str;\n \n-import dvec::{dvec, extensions};\n-import result::{extensions, ok};\n+import dvec::dvec;\n+import result::ok;\n import std::map::{hashmap, int_hash};\n import uint::range;\n import vec::{len, push};"}, {"sha": "02ca13aee2e907dd01a722cf88ea5bef66bf85bc", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -68,15 +68,15 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n     }));\n }\n \n-impl methods for @crate_ctxt {\n+impl @crate_ctxt {\n     fn to_ty<RS: region_scope copy owned>(\n         rs: RS, ast_ty: @ast::ty) -> ty::t {\n \n         ast_ty_to_ty(self, rs, ast_ty)\n     }\n }\n \n-impl of ast_conv for @crate_ctxt {\n+impl @crate_ctxt: ast_conv {\n     fn tcx() -> ty::ctxt { self.tcx }\n     fn ccx() -> @crate_ctxt { self }\n "}, {"sha": "9f62b8c7eb260e8533ddc7d516cd27768b512587", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -166,22 +166,21 @@ section on \"Type Combining\" below for details.\n \n import std::smallintmap;\n import std::smallintmap::smallintmap;\n-import std::smallintmap::map;\n import std::map::hashmap;\n import middle::ty;\n import middle::ty::{tv_vid, tvi_vid, region_vid, vid,\n                     ty_int, ty_uint, get};\n import syntax::{ast, ast_util};\n import syntax::ast::{ret_style, purity};\n import util::ppaux::{ty_to_str, mt_to_str};\n-import result::{result, extensions, ok, err, map_vec, map_vec2, iter_vec2};\n+import result::{result, ok, err, map_vec, map_vec2, iter_vec2};\n import ty::{mk_fn, type_is_bot};\n import check::regionmanip::{replace_bound_regions_in_fn_ty};\n import driver::session::session;\n import util::common::{indent, indenter};\n import ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n import ast::{m_const, m_imm, m_mutbl};\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n export infer_ctxt;\n export new_infer_ctxt;\n@@ -441,7 +440,7 @@ trait then {\n         -> result<T,ty::type_err>;\n }\n \n-impl methods of then for ures {\n+impl ures: then {\n     fn then<T:copy>(f: fn() -> result<T,ty::type_err>)\n         -> result<T,ty::type_err> {\n         self.chain(|_i| f())\n@@ -453,7 +452,7 @@ trait cres_helpers<T> {\n     fn compare(t: T, f: fn() -> ty::type_err) -> cres<T>;\n }\n \n-impl methods<T:copy> of cres_helpers<T> for cres<T> {\n+impl<T:copy> cres<T>: cres_helpers<T> {\n     fn to_ures() -> ures {\n         match self {\n           ok(_v) => ok(()),\n@@ -476,25 +475,25 @@ trait to_str {\n     fn to_str(cx: infer_ctxt) -> ~str;\n }\n \n-impl of to_str for ty::t {\n+impl ty::t: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         ty_to_str(cx.tcx, self)\n     }\n }\n \n-impl of to_str for ty::mt {\n+impl ty::mt: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         mt_to_str(cx.tcx, self)\n     }\n }\n \n-impl of to_str for ty::region {\n+impl ty::region: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         util::ppaux::region_to_str(cx.tcx, self)\n     }\n }\n \n-impl<V:copy to_str> of to_str for bound<V> {\n+impl<V:copy to_str> bound<V>: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         match self {\n           some(v) => v.to_str(cx),\n@@ -503,23 +502,23 @@ impl<V:copy to_str> of to_str for bound<V> {\n     }\n }\n \n-impl<T:copy to_str> of to_str for bounds<T> {\n+impl<T:copy to_str> bounds<T>: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         fmt!{\"{%s <: %s}\",\n              self.lb.to_str(cx),\n              self.ub.to_str(cx)}\n     }\n }\n \n-impl of to_str for int_ty_set {\n+impl int_ty_set: to_str {\n     fn to_str(_cx: infer_ctxt) -> ~str {\n         match self {\n           int_ty_set(v) => uint::to_str(v, 10u)\n         }\n     }\n }\n \n-impl<V:copy vid, T:copy to_str> of to_str for var_value<V,T> {\n+impl<V:copy vid, T:copy to_str> var_value<V, T>: to_str {\n     fn to_str(cx: infer_ctxt) -> ~str {\n         match self {\n           redirect(vid) => fmt!{\"redirect(%s)\", vid.to_str()},\n@@ -535,7 +534,7 @@ trait st {\n     fn glb(infcx: infer_ctxt, b: self) -> cres<self>;\n }\n \n-impl of st for ty::t {\n+impl ty::t: st {\n     fn sub(infcx: infer_ctxt, &&b: ty::t) -> ures {\n         sub(infcx).tys(self, b).to_ures()\n     }\n@@ -549,7 +548,7 @@ impl of st for ty::t {\n     }\n }\n \n-impl of st for ty::region {\n+impl ty::region: st {\n     fn sub(infcx: infer_ctxt, &&b: ty::region) -> ures {\n         sub(infcx).regions(self, b).chain(|_r| ok(()))\n     }\n@@ -576,7 +575,7 @@ fn rollback_to<V:copy vid, T:copy>(\n     }\n }\n \n-impl transaction_methods for infer_ctxt {\n+impl infer_ctxt {\n     /// Execute `f` and commit the bindings if successful\n     fn commit<T,E>(f: fn() -> result<T,E>) -> result<T,E> {\n \n@@ -625,7 +624,7 @@ impl transaction_methods for infer_ctxt {\n     }\n }\n \n-impl methods for infer_ctxt {\n+impl infer_ctxt {\n     fn next_ty_var_id() -> tv_vid {\n         let id = *self.ty_var_counter;\n         *self.ty_var_counter += 1u;\n@@ -695,7 +694,7 @@ impl methods for infer_ctxt {\n     }\n }\n \n-impl unify_methods for infer_ctxt {\n+impl infer_ctxt {\n \n     fn set<V:copy vid, T:copy to_str>(\n         vb: vals_and_bindings<V, T>, vid: V,\n@@ -1123,7 +1122,7 @@ fn resolver(infcx: infer_ctxt, modes: uint) -> resolve_state {\n                      mut v_seen: ~[]})\n }\n \n-impl methods for resolve_state {\n+impl resolve_state {\n     fn should(mode: uint) -> bool {\n         (self.modes & mode) == mode\n     }\n@@ -1347,7 +1346,7 @@ impl methods for resolve_state {\n // A.  But this upper-bound might be stricter than what is truly\n // needed.\n \n-impl assignment for infer_ctxt {\n+impl infer_ctxt {\n     fn assign_tys(anmnt: assignment, a: ty::t, b: ty::t) -> ures {\n \n         fn select(fst: option<ty::t>, snd: option<ty::t>) -> option<ty::t> {\n@@ -1878,7 +1877,7 @@ fn super_tys<C:combine>(\n     }\n }\n \n-impl of combine for sub {\n+impl sub: combine {\n     fn infcx() -> infer_ctxt { *self }\n     fn tag() -> ~str { ~\"sub\" }\n \n@@ -2057,7 +2056,7 @@ impl of combine for sub {\n     }\n }\n \n-impl of combine for lub {\n+impl lub: combine {\n     fn infcx() -> infer_ctxt { *self }\n     fn tag() -> ~str { ~\"lub\" }\n \n@@ -2237,7 +2236,7 @@ impl of combine for lub {\n     }\n }\n \n-impl of combine for glb {\n+impl glb: combine {\n     fn infcx() -> infer_ctxt { *self }\n     fn tag() -> ~str { ~\"glb\" }\n \n@@ -2448,7 +2447,7 @@ trait lattice_ops {\n     fn ty_bot(t: ty::t) -> cres<ty::t>;\n }\n \n-impl of lattice_ops for lub {\n+impl lub: lattice_ops {\n     fn bnd<T:copy>(b: bounds<T>) -> option<T> { b.ub }\n     fn with_bnd<T:copy>(b: bounds<T>, t: T) -> bounds<T> {\n         {ub: some(t) with b}\n@@ -2458,7 +2457,7 @@ impl of lattice_ops for lub {\n     }\n }\n \n-impl of lattice_ops for glb {\n+impl glb: lattice_ops {\n     fn bnd<T:copy>(b: bounds<T>) -> option<T> { b.lb }\n     fn with_bnd<T:copy>(b: bounds<T>, t: T) -> bounds<T> {\n         {lb: some(t) with b}"}, {"sha": "9d1fb7d20f8bf2f7a510c89b1b938b13d0d9a69e", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait region_scope {\n }\n \n enum empty_rscope { empty_rscope }\n-impl of region_scope for empty_rscope {\n+impl empty_rscope: region_scope {\n     fn anon_region() -> result<ty::region, ~str> {\n         result::ok(ty::re_static)\n     }\n@@ -17,7 +17,7 @@ impl of region_scope for empty_rscope {\n }\n \n enum type_rscope = bool;\n-impl of region_scope for type_rscope {\n+impl type_rscope: region_scope {\n     fn anon_region() -> result<ty::region, ~str> {\n         if *self {\n             result::ok(ty::re_bound(ty::br_self))\n@@ -42,7 +42,7 @@ fn in_anon_rscope<RS: region_scope copy owned>(self: RS, r: ty::region)\n     -> @anon_rscope {\n     @anon_rscope({anon: r, base: self as region_scope})\n }\n-impl of region_scope for @anon_rscope {\n+impl @anon_rscope: region_scope {\n     fn anon_region() -> result<ty::region, ~str> {\n         result::ok(self.anon)\n     }\n@@ -57,7 +57,7 @@ fn in_binding_rscope<RS: region_scope copy owned>(self: RS)\n     let base = self as region_scope;\n     @binding_rscope({base: base})\n }\n-impl of region_scope for @binding_rscope {\n+impl @binding_rscope: region_scope {\n     fn anon_region() -> result<ty::region, ~str> {\n         result::ok(ty::re_bound(ty::br_anon))\n     }"}, {"sha": "52746f66425c8f1c765eb628cdd0bcb64c2e59f4", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -144,7 +144,7 @@ fn build_error_handlers(\n         inner: diagnostic::handler,\n     };\n \n-    impl of diagnostic::handler for diagnostic_handler {\n+    impl diagnostic_handler: diagnostic::handler {\n         fn fatal(msg: ~str) -> ! { self.inner.fatal(msg) }\n         fn err(msg: ~str) { self.inner.err(msg) }\n         fn bump_err_count() {"}, {"sha": "9fb37977231912573626de34701622db274bea0b", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -176,7 +176,7 @@ trait the_shunned_house {\n }\n \n /// Whatever\n-impl of the_shunned_house for omnomnomy {\n+impl omnomnomy: the_shunned_house {\n     fn dingy_house(_unkempt_yard: int) {\n     }\n "}, {"sha": "2ab273407915923470daf57cc1d92e8285e3bb72", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -138,7 +138,7 @@ type index_entry = {\n     link: ~str\n };\n \n-impl util for doc {\n+impl doc {\n     fn cratedoc() -> cratedoc {\n         option::get(vec::foldl(none, self.pages, |_m, page| {\n             match page {\n@@ -154,7 +154,7 @@ impl util for doc {\n }\n \n /// Some helper methods on moddoc, mostly for testing\n-impl util for moddoc {\n+impl moddoc {\n \n     fn mods() -> ~[moddoc] {\n         do vec::filter_map(self.items) |itemtag| {\n@@ -240,7 +240,7 @@ trait page_utils {\n     fn types() -> ~[tydoc];\n }\n \n-impl util of page_utils for ~[page] {\n+impl ~[page]: page_utils {\n \n     fn mods() -> ~[moddoc] {\n         do vec::filter_map(self) |page| {\n@@ -319,7 +319,7 @@ trait item {\n     pure fn item() -> itemdoc;\n }\n \n-impl of item for itemtag {\n+impl itemtag: item {\n     pure fn item() -> itemdoc {\n         match self {\n           doc::modtag(doc) => doc.item,\n@@ -334,27 +334,27 @@ impl of item for itemtag {\n     }\n }\n \n-impl of item for simpleitemdoc {\n+impl simpleitemdoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n-impl of item for moddoc {\n+impl moddoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n-impl of item for nmoddoc {\n+impl nmoddoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n-impl of item for enumdoc {\n+impl enumdoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n-impl of item for traitdoc {\n+impl traitdoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n-impl of item for impldoc {\n+impl impldoc: item {\n     pure fn item() -> itemdoc { self.item }\n }\n \n@@ -367,7 +367,7 @@ trait item_utils {\n     pure fn sections() -> ~[section];\n }\n \n-impl util<A:item> of item_utils for A {\n+impl<A:item> A: item_utils {\n     pure fn id() -> ast_id {\n         self.item().id\n     }"}, {"sha": "6ddd8f29b65c0ee95378833e9699890916c0e797", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,6 @@\n \n import doc::item_utils;\n import markdown_writer::writer;\n-import markdown_writer::writer_util;\n import markdown_writer::writer_utils;\n import markdown_writer::writer_factory;\n "}, {"sha": "139ea0f36f520ff5748daa8cca35f668f46dfa5b", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -23,7 +23,7 @@ trait writer_utils {\n     fn write_done();\n }\n \n-impl writer_util of writer_utils for writer {\n+impl writer: writer_utils {\n     fn write_str(str: ~str) {\n         self(write(str));\n     }"}, {"sha": "eed27b58aa85a769e9479c08ff65c26accd18a23", "filename": "src/test/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,4 +1,4 @@\n trait me {\n     fn me() -> uint;\n }\n-impl methods1 of me for uint { fn me() -> uint { self } }\n+impl uint: me { fn me() -> uint { self } }"}, {"sha": "1f0f2574ba3bb42c1e2b2eff30bb8d0bcebb2a1b", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,7 @@ trait uint_helpers {\n     fn to(v: uint, f: fn(uint));\n }\n \n-impl helpers of uint_helpers for uint {\n+impl uint: uint_helpers {\n     #[inline]\n     fn to(v: uint, f: fn(uint)) {\n         let mut i = self;"}, {"sha": "38bc20f637b14424f4669c1956a1c716141fe7c3", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,4 +1,4 @@\n-import dvec::{dvec,extensions};\n+import dvec::dvec;\n \n type entry<A,B> = {key: A, value: B};\n type alist<A,B> = { eq_fn: fn@(A,A) -> bool, data: dvec<entry<A,B>> };"}, {"sha": "bd3f63038572007fdf75b93253da2550c2f86e39", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,6 @@\n export rust;\n \n import name_pool::add;\n-import name_pool::methods;\n \n mod name_pool {\n \n@@ -13,7 +12,7 @@ mod name_pool {\n         fn add(s: ~str);\n     }\n \n-    impl methods of add for name_pool {\n+    impl name_pool: add {\n         fn add(s: ~str) {\n         }\n     }\n@@ -22,9 +21,10 @@ mod name_pool {\n mod rust {\n \n     import name_pool::add;\n+    // FIXME #3155: this is a hack\n+    import name_pool::__extensions__;\n     export add;\n     export rt;\n-    export methods;\n     export cx;\n \n     type rt = @();\n@@ -33,7 +33,7 @@ mod rust {\n         fn cx();\n     }\n \n-    impl methods of cx for rt {\n+    impl rt: cx {\n         fn cx() {\n         }\n     }"}, {"sha": "eb38c48158cfe54a2f030d647dad3b72f1cdfa23", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,7 @@\n trait i<T> { }\n \n fn f<T>() -> i<T> {\n-    impl <T> of i<T> for () { }\n+    impl<T> (): i<T> { }\n \n     () as i::<T>\n }"}, {"sha": "805d1625681b269b715229d1cdac723c4a2f5625", "filename": "src/test/auxiliary/issue-2414-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ trait foo {\n     fn foo();\n }\n \n-impl t2 of foo for ~str {\n+impl ~str: foo {\n     fn foo() {}\n }\n "}, {"sha": "2b2db4cda5dda18cf43deb6adbd1f20ab45742d7", "filename": "src/test/auxiliary/issue-2414-b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,5 +5,3 @@\n \n use a;\n \n-import a::t2;\n-export t2;"}, {"sha": "f8b374dcf85d97233be90376fee4f6e2c34bd827", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -31,6 +31,6 @@ class context_res {\n \n type context = arc_destruct<context_res>;\n \n-impl context for context {\n+impl context {\n     fn socket() { }\n }"}, {"sha": "c00f27cd51188206a433b634f2276becffa5b28c", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,6 +5,6 @@ trait to_str {\n     fn to_str() -> ~str;\n }\n \n-impl of to_str for ~str {\n+impl ~str: to_str {\n     fn to_str() -> ~str { self }\n }"}, {"sha": "a676066acf398ef468a5f9a8379748fb4b0e2c1f", "filename": "src/test/auxiliary/issue_2242_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,6 +4,6 @@\n use a;\n import a::to_str;\n \n-impl of to_str for int {\n+impl int: to_str {\n     fn to_str() -> ~str { fmt!{\"%?\", self} }\n }"}, {"sha": "35c82ff7c01d5ed39e06b46b856727b746d3531b", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,6 +5,6 @@ use a;\n \n import a::to_str;\n \n-impl of to_str for bool {\n+impl bool: to_str {\n     fn to_str() -> ~str { fmt!{\"%b\", self} }\n }"}, {"sha": "3312a15f49e47dbd00c0493b8a7d9b94c3f02c41", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,13 +9,13 @@ trait read {\n     static fn readMaybe(s: ~str) -> option<self>;\n }\n \n-impl of read for int {\n+impl int: read {\n     static fn readMaybe(s: ~str) -> option<int> {\n         int::from_str(s)\n     }\n }\n \n-impl of read for bool {\n+impl bool: read {\n     static fn readMaybe(s: ~str) -> option<bool> {\n         match s {\n           ~\"true\" => some(true),"}, {"sha": "c6a11eca75b88be6e92a63f66b7ec4930a86a1c4", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ import std::time::precise_time_s;\n import std::map;\n import std::map::{map, hashmap};\n \n-import io::{reader, reader_util};\n+import io::reader;\n \n fn main(argv: ~[~str]) {\n     #macro["}, {"sha": "59923a77a38286b680ec40fd378300556b0cc911", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n // A raw test of vector appending performance.\n \n use std;\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n import io::writer_util;\n \n fn collect_raw(num: uint) -> ~[uint] {"}, {"sha": "0d7bd2185ebcf421191142246128edbf50897da5", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -14,7 +14,6 @@ use std;\n import io::writer;\n import io::writer_util;\n \n-import arc::methods;\n import pipes::{port, chan, shared_chan};\n \n macro_rules! move_out {"}, {"sha": "e3c51ec8d4372c75195acf644b2c4188bc8848a6", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,6 @@\n \n import comm::*;\n import future::future;\n-import future::extensions;\n \n use std;\n import std::time;"}, {"sha": "17f2129ed80c03dc1b54841767e74321376a3502", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,5 @@\n // chameneos\n \n-import io::reader_util;\n-\n use std;\n import std::map;\n import std::map::hashmap;"}, {"sha": "d0234022a855d70e1998be3babc9db588e8836b5", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,8 +2,6 @@\n \n // multi tasking k-nucleotide\n \n-import io::reader_util;\n-\n use std;\n import std::map;\n import std::map::hashmap;"}, {"sha": "e5bd37c19686297d830615243e6710f9a91ee808", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,8 +2,6 @@\n \n // multi tasking k-nucleotide\n \n-import io::reader_util;\n-\n use std;\n import std::map;\n import std::map::hashmap;"}, {"sha": "3ff45e6f713c4b5c3ae44ab019fc560ffbfb4c74", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -90,7 +90,7 @@ fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n \n type devnull = {dn: int};\n \n-impl of io::writer for devnull {\n+impl devnull: io::writer {\n     fn write(_b: &[const u8]) {}\n     fn seek(_i: int, _s: io::seek_style) {}\n     fn tell() -> uint {0_u}"}, {"sha": "e166688e45714bc80b002afe19918327d306875c", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@\n \n use std;\n import std::smallintmap;\n-import std::smallintmap::{smallintmap, map};\n+import std::smallintmap::smallintmap;\n import io::writer_util;\n \n fn append_sequential(min: uint, max: uint, map: smallintmap<uint>) {"}, {"sha": "4f100f0581ff11a0ee87753b4bac53c679e16380", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n use std;\n \n import std::bitv;\n-import io::{writer_util, reader_util};\n+import io::writer_util;\n \n // Computes a single solution to a given 9x9 sudoku\n //"}, {"sha": "086aba0ac4034b89fdc6f203b03b8120ead2bd42", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -20,7 +20,7 @@ import std::map;\n import std::map::hashmap;\n import vec;\n import io;\n-import io::{reader_util, writer_util};\n+import io::writer_util;\n \n import std::time;\n import u64;\n@@ -31,7 +31,6 @@ import comm::chan;\n import comm::port;\n import comm::recv;\n import comm::send;\n-import comm::methods;\n \n macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n@@ -53,7 +52,7 @@ fn mk_hash<K: const hash_key, V: copy>() -> map::hashmap<K, V> {\n     map::hashmap(hashfn, hasheq)\n }\n \n-impl of hash_key for ~str {\n+impl ~str: hash_key {\n     pure fn hash() -> uint { str::hash(&self) }\n     pure fn eq(&&x: ~str) -> bool { self == x }\n }\n@@ -74,7 +73,7 @@ fn join(t: joinable_task) {\n     t.recv()\n }\n \n-impl of word_reader for io::reader {\n+impl io::reader: word_reader {\n     fn read_word() -> option<~str> { read_word(self) }\n }\n "}, {"sha": "51c19db4a941d837fe58a503257c95b351fe38de", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,11 +1,10 @@\n // xfail-fast aux-build\n // aux-build:ambig_impl_2_lib.rs\n use ambig_impl_2_lib;\n-import ambig_impl_2_lib::methods1;\n import ambig_impl_2_lib::me;\n trait me {\n     fn me() -> uint;\n }\n-impl methods2 of me for uint { fn me() -> uint { self } } //~ NOTE is `methods2::me`\n+impl uint: me { fn me() -> uint { self } } //~ NOTE is `__extensions__::me`\n fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n-//~^ NOTE is `ambig_impl_2_lib::methods1::me`\n+//~^ NOTE is `ambig_impl_2_lib::__extensions__::me`"}, {"sha": "fc78da19aabca78890dfc69f0e28578ccd116b59", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,12 +2,12 @@ trait foo {\n     fn foo() -> int;\n }\n \n-impl methods of foo for ~[uint] {\n-    fn foo() -> int {1} //~ NOTE candidate #1 is `methods::foo`\n+impl ~[uint]: foo {\n+    fn foo() -> int {1} //~ NOTE candidate #1 is `__extensions__::foo`\n }\n \n-impl methods of foo for ~[int] {\n-    fn foo() -> int {2} //~ NOTE candidate #2 is `methods::foo`\n+impl ~[int]: foo {\n+    fn foo() -> int {2} //~ NOTE candidate #2 is `__extensions__::foo`\n }\n \n fn main() {"}, {"sha": "1da4ec8a62667731972ac1eaaf11cd307f019bc4", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait bar {\n     fn bar<T:copy>();\n }\n \n-impl methods of bar for uint {\n+impl uint: bar {\n     fn bar<T:copy>() {\n     }\n }"}, {"sha": "6972905a8ccc918e52976bc245e2d8be24d9fb3f", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait methods {\n     pure fn purem();\n }\n \n-impl foo of methods for point {\n+impl point: methods {\n     fn impurem() {\n     }\n "}, {"sha": "a8ffc30eeb2ea212d86a3b4cf7e7b1efc193b405", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,13 +5,13 @@ trait to_opt {\n     fn to_option() -> option<self>;\n }\n \n-impl of to_opt for uint {\n+impl uint: to_opt {\n     fn to_option() -> option<uint> {\n         some(self)\n     }\n }\n \n-impl<T:copy> of to_opt for option<T> {\n+impl<T:copy> option<T>: to_opt {\n     fn to_option() -> option<option<T>> {\n         some(self)\n     }"}, {"sha": "ac2f757502f45e629a8f12a18895a78eb6407ecd", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ trait to_str_2 {\n // I use an impl here because it will cause\n // the compiler to attempt autoderef and then\n // try to resolve the method.\n-impl methods of to_str_2 for t {\n+impl t: to_str_2 {\n     fn to_str() -> ~str { ~\"t\" }\n }\n "}, {"sha": "3917e73a9ae40482fd60d329a2c0e9cc51342edc", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]);\n }\n \n-impl monad<A> of vec_monad<A> for ~[A] {\n+impl<A> ~[A]: vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]) {\n         let mut r = fail;\n         for self.each |elt| { r += f(elt); }"}, {"sha": "aee379cac708e3e9dd73ec4e741a84fe9b5e0eb7", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,7 +5,7 @@ trait channel<T> {\n }\n \n // `chan` is not a trait, it's an enum\n-impl of chan for int { //~ ERROR can only implement trait types\n+impl int: chan { //~ ERROR can only implement trait types\n     fn send(v: int) { fail }\n }\n "}, {"sha": "ef66cfc3da65d199f4ed4cc06c1d5e5c74da93db", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -8,7 +8,7 @@ trait parse {\n     fn parse() -> ~[mut int];\n }\n \n-impl parser of parse for parser {\n+impl parser: parse {\n     fn parse() -> ~[mut int] {\n         dvec::unwrap(self.tokens) //~ ERROR illegal move from self\n     }"}, {"sha": "facbcee4cc83872063c21f460432d18c4bebaccc", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n mod stream {\n     enum stream<T: send> { send(T, server::stream<T>), }\n     mod server {\n-        impl recv<T: send> for stream<T> {\n+        impl<T: send> stream<T> {\n             fn recv() -> extern fn(+stream<T>) -> stream::stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes."}, {"sha": "d0e0a288839b887d04b4bc9c669a2f6741ceaab9", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -18,7 +18,7 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n         return v0 ^ v1;\n     }\n \n-   impl of siphash for sipstate {\n+   impl sipstate: siphash {\n         fn reset() {\n             self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n             //~^ ERROR unresolved name: k0"}, {"sha": "656e2094e6262e0e07d8e5ac132d6d1e31006224", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ fn siphash(k0 : u64) -> siphash {\n     };\n \n \n-   impl of siphash for sipstate {\n+   impl sipstate: siphash {\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0"}, {"sha": "8a7de8160fb4fa25c4dcf794fab965eea79e38e5", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,6 @@\n trait repeat<A> { fn get() -> A; }\n \n-impl<A:copy> of repeat<A> for @A {\n+impl<A:copy> @A: repeat<A> {\n     fn get() -> A { *self }\n }\n "}, {"sha": "80a0e3bc0d50f17a2db89ec77e71d24cb1a5d4ee", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,7 +5,7 @@ trait foo {\n     fn foo(i: &self/int) -> int;\n }\n \n-impl<T:copy> of foo for T {\n+impl<T:copy> T: foo {\n     fn foo(i: &self/int) -> int {*i}\n }\n "}, {"sha": "4a5d879a32dfb46e938d6a91084c59c5859313ef", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -12,7 +12,7 @@ trait modify_in_box_rec {\n     pure fn modify_in_box_rec(sum: @{mut f: int});\n }\n \n-impl foo of modify_in_box_rec for int {\n+impl int: modify_in_box_rec {\n     pure fn modify_in_box_rec(sum: @{mut f: int}) {\n         sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n     }"}, {"sha": "eb6a52ce64c10f4ac3f51588adc8c697867624a7", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -24,7 +24,7 @@ type fake_options = {cfg: ast::crate_cfg};\n type fake_session = {opts: @fake_options,\n                      parse_sess: parse::parse_sess};\n \n-impl of fake_ext_ctxt for fake_session {\n+impl fake_session: fake_ext_ctxt {\n     fn session() -> fake_session {self}\n }\n "}, {"sha": "8e9edb54613288b6e7bcb2fccde098c459a59a4d", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -24,7 +24,7 @@ type fake_options = {cfg: ast::crate_cfg};\n type fake_session = {opts: @fake_options,\n                      parse_sess: parser::parse_sess};\n \n-impl of fake_ext_ctxt for fake_session {\n+impl fake_session: fake_ext_ctxt {\n     fn session() -> fake_session {self}\n }\n "}, {"sha": "140dbc9e1b3ef4c9f95d8e3f54a62b0a8c69824e", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait deref {\n     fn get() -> int;\n }\n \n-impl of deref for &int {\n+impl &int: deref {\n     fn get() -> int {\n         *self\n     }"}, {"sha": "5c5dd8537ca03ddd25ac854c07fff711f4142967", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ trait set_f {\n     fn set_f_bad(b: @b);\n }\n \n-impl methods of set_f for c {\n+impl c: set_f {\n     fn set_f_ok(b: @b/&self) {\n         self.f = b;\n     }"}, {"sha": "73b834c2624bd7afb257ab956b729bff6bcfbbda", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -13,7 +13,7 @@ trait set_foo_foo {\n     fn set_foo(f: foo);\n }\n \n-impl methods of set_foo_foo for with_foo {\n+impl with_foo: set_foo_foo {\n     fn set_foo(f: foo) {\n         self.f = f; //~ ERROR mismatched types: expected `foo/&self` but found `foo/&`\n     }\n@@ -31,7 +31,7 @@ trait set_foo_bar {\n     fn set_foo(f: bar);\n }\n \n-impl methods of set_foo_bar for with_bar {\n+impl with_bar: set_foo_bar {\n     fn set_foo(f: bar) {\n         self.f = f;\n     }"}, {"sha": "4932712aa0adde8d5ee40087e6e3b9d64660ad68", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ trait get_ctxt {\n \n type has_ctxt = { c: &ctxt };\n \n-impl of get_ctxt for has_ctxt {\n+impl has_ctxt: get_ctxt {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:"}, {"sha": "a34a903e3ba6ad380c9614ac9022b490b62de501", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait get_ctxt {\n \n type has_ctxt = { c: &ctxt };\n \n-impl of get_ctxt for has_ctxt {\n+impl has_ctxt: get_ctxt {\n     fn get_ctxt() -> &self/ctxt { self.c }\n }\n "}, {"sha": "9324ada075e16f2fa607dc9d87bc723e5a5e33c4", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait add {\n     fn plus(++x: self) -> self;\n }\n \n-impl of add for int {\n+impl int: add {\n     fn plus(++x: int) -> int { self + x }\n }\n "}, {"sha": "c416e3de2063d55fca437e3c0ebb8f145d629d7d", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,10 +2,10 @@ use std;\n fn main() {\n trait seq { }\n \n-impl <T> of seq<T> for ~[T] { //~ ERROR wrong number of type arguments\n+impl<T> ~[T]: seq<T> { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n-impl of seq<bool> for u32 {\n+impl u32: seq<bool> {\n    /* Treat the integer as a sequence of bits */\n }\n "}, {"sha": "51c7a819860330aea0518e0c9af3eb8050affabc", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,7 @@ trait foo {\n     static fn bar();\n }\n \n-impl of foo for int {\n+impl int: foo {\n     fn bar() {} //~ ERROR self type does not match the trait method's\n }\n "}, {"sha": "88039f234b51473009fa638ce264b4388291ccf4", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ enum box_impl<T> = {\n     mut f: T\n };\n \n-impl<T:copy> of box_trait<T> for box_impl<T> {\n+impl<T:copy> box_impl<T>: box_trait<T> {\n     fn get() -> T { return self.f; }\n     fn set(t: T) { self.f = t; }\n }"}, {"sha": "8cf572d27abe58f5e107096b84856c75e3029662", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n trait foo {\n     fn bar(x: uint) -> self;\n }\n-impl of foo for int {\n+impl int: foo {\n     fn bar() -> int {\n         //~^ ERROR method `bar` has 0 parameters but the trait has 1\n         self"}, {"sha": "664a7b7995d38c5fec74061f64abcbc4fa7a55dc", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,6 @@\n trait bar { fn dup() -> self; fn blah<X>(); }\n-impl of bar for int { fn dup() -> int { self } fn blah<X>() {} }\n-impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n+impl int: bar { fn dup() -> int { self } fn blah<X>() {} }\n+impl uint: bar { fn dup() -> uint { self } fn blah<X>() {} }\n \n fn main() {\n     10.dup::<int>(); //~ ERROR does not take type parameters"}, {"sha": "e76910a321c270bd2eaa24ac4eccf9370b27d71f", "filename": "src/test/compile-fail/trait-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n trait foo { fn foo(); }\n \n-impl of int for uint { fn foo() {} } //~ ERROR trait\n+impl uint: int { fn foo() {} } //~ ERROR trait\n \n fn main() {}"}, {"sha": "f0ef08b65582eff8abf4e33a343ed967c951310d", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:explicit failure\n // Don't double free the string\n use std;\n-import io::{reader, reader_util};\n+import io::reader;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {"}, {"sha": "524c0c3dcaac692ac9553c2a26c1c875ebaae40d", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -8,7 +8,7 @@ trait i {\n     fn foo();\n }\n \n-impl of i for ~int {\n+impl ~int: i {\n     fn foo() { }\n }\n "}, {"sha": "6cff0afec08e45a6255797d3c5a354d1e6f3cd1b", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,7 @@\n use std;\n import uint;\n import u8;\n-import vec::{extensions, same_length, zip};\n+import vec::{same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}, {"sha": "d531c5ca6478e120cb0b714d68531e14a82b8ac8", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -18,7 +18,7 @@ trait fake_ext_ctxt {\n \n type fake_session = ();\n \n-impl of fake_ext_ctxt for fake_session {\n+impl fake_session: fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { parse::new_parse_sess(none) }\n }"}, {"sha": "3f53525a5bab4a4594fcbe625c33ac61dc56cd00", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,13 +6,13 @@ trait iterable<A> {\n     fn iterate(blk: fn(A) -> bool);\n }\n \n-impl vec<A> of iterable<A> for &[A] {\n+impl<A> &[A]: iterable<A> {\n     fn iterate(f: fn(A) -> bool) {\n         vec::each(self, f);\n     }\n }\n \n-impl vec<A> of iterable<A> for ~[A] {\n+impl<A> ~[A]: iterable<A> {\n     fn iterate(f: fn(A) -> bool) {\n         vec::each(self, f);\n     }"}, {"sha": "25ade45e2d6590a31a341e1fb3a14a7f48ec1e03", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -5,9 +5,6 @@ use std;\n \n import std::ebml;\n import io::writer;\n-import std::prettyprint::serializer;\n-import std::ebml::serializer;\n-import std::ebml::deserializer;\n import std::serialization::{serialize_uint, deserialize_uint};\n \n fn test_ser_and_deser<A>(a1: A,"}, {"sha": "8dd60004b6c43e913aa6b00932b563e8cd1f2a37", "filename": "src/test/run-pass/autoderef-method-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait double {\n     fn double() -> uint;\n }\n \n-impl methods of double for uint {\n+impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n "}, {"sha": "e44a210a57cbc59ea5d39ed7e417355d29da3a7d", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,11 +2,11 @@ trait double {\n     fn double() -> uint;\n }\n \n-impl methods of double for uint {\n+impl uint: double {\n     fn double() -> uint { self }\n }\n \n-impl methods of double for @uint {\n+impl @uint: double {\n     fn double() -> uint { *self * 2u }\n }\n "}, {"sha": "979d656cd2dada4c5bde30bffa007acdca6d0956", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait double {\n     fn double() -> uint;\n }\n \n-impl methods of double for @@uint {\n+impl @@uint: double {\n     fn double() -> uint { **self * 2u }\n }\n "}, {"sha": "661fd8394301298e85860330661b12ca1dcce342", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait double {\n     fn double() -> uint;\n }\n \n-impl methods of double for uint {\n+impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n "}, {"sha": "34045444bcc6a4bd1d0217cb6f727f2001208be3", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait double {\n     fn double() -> uint;\n }\n \n-impl methods of double for uint {\n+impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n "}, {"sha": "1dd4bb9e31ab0eee7491d112d84af9a88540ecb4", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait frob {\n     fn frob();\n }\n \n-impl quuux of frob for foo {\n+impl foo: frob {\n     fn frob() {\n         really_impure(self.bar);\n     }"}, {"sha": "1abde0084c218d6460601619cfc53218e1d46378", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,6 @@\n use cci_capture_clause;\n \n import comm::recv;\n-import comm::methods;\n \n fn main() {\n     cci_capture_clause::foo(()).recv()"}, {"sha": "fab76a02569b53137b7c5e1ac3fa93f2335a6a77", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,6 @@\n // aux-build:cci_impl_lib.rs\n \n use cci_impl_lib;\n-import cci_impl_lib::helpers;\n import cci_impl_lib::uint_helpers;\n \n fn main() {"}, {"sha": "9be142647b5a05a5c5bc0c9c978547e60e1b4cb6", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -35,7 +35,7 @@ class cat {\n   }\n }\n \n-impl of to_str for cat {\n+impl cat: to_str {\n   fn to_str() -> ~str { self.name }\n }\n "}, {"sha": "849c85c7d186129322e8b6f872b6f518ecb28d01", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -8,7 +8,6 @@\n use crate_method_reexport_grrrrrrr2;\n \n fn main() {\n-    import crate_method_reexport_grrrrrrr2::rust::methods;\n     import crate_method_reexport_grrrrrrr2::rust::add;\n     import crate_method_reexport_grrrrrrr2::rust::cx;\n     let x = @();"}, {"sha": "78b804ecf386dd48fb5a1bfb220ddaedf77766a8", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,4 +1,4 @@\n-import dvec::{dvec, extensions};\n+import dvec::dvec;\n \n fn main() {\n     let d = dvec();"}, {"sha": "3ad13779b736504c3fd1744f367920e802c7fcb1", "filename": "src/test/run-pass/impl-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-variance.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait foo {\n     fn foo() -> uint;\n }\n \n-impl extensions<T> of foo for ~[const T] {\n+impl<T> ~[const T]: foo {\n     fn foo() -> uint { vec::len(self) }\n }\n "}, {"sha": "35793e85bfdd2df1b2d96695f0ac0eeb2ff6a1d8", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,11 +6,11 @@ trait iterable<A> {\n     fn iter(blk: fn(A));\n }\n \n-impl<A> of iterable<A> for fn@(fn(A)) {\n+impl<A> fn@(fn(A)): iterable<A> {\n     fn iter(blk: fn(A)) { self(blk); }\n }\n \n-impl of iterable<uint> for fn@(fn(uint)) {\n+impl fn@(fn(uint)): iterable<uint> {\n     fn iter(blk: fn(&&uint)) { self( |i| blk(i) ) }\n }\n "}, {"sha": "b004eba99c4443085b956dc302a6915180ce9089", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ class c1<T: copy> {\n     }\n }\n \n-impl i1<T: copy> for c1<T> {\n+impl<T: copy> c1<T> {\n     fn f2(x: int) {\n     }\n }"}, {"sha": "461dbfadbac1f6b3aef06fa65776c5160ef1387d", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -7,7 +7,7 @@ class c1<T: copy> {\n     fn f1(x: T) {}\n }\n \n-impl i1<T: copy> for c1<T> {\n+impl<T: copy> c1<T> {\n     fn f2(x: T) {}\n }\n "}, {"sha": "a440d4f05d41e83e54ea1cd61090ead6b85e0f27", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n trait hax { } \n-impl <A> of hax for A { } \n+impl <A> A: hax { } \n \n fn perform_hax<T: owned>(x: @T) -> hax {\n     x as hax "}, {"sha": "81fbae5710547564bc3c829afee30e83f7ed5d74", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n trait hax { } \n-impl <A> of hax for A { } \n+impl <A> A: hax { } \n \n fn perform_hax<T: owned>(x: @T) -> hax {\n     x as hax "}, {"sha": "200fe185f9f6e0b09de844ed8accc196ae24942c", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,8 +2,6 @@\n \n use std;\n \n-import io::reader_util;\n-\n enum square {\n     bot,\n     wall,\n@@ -15,7 +13,7 @@ enum square {\n     empty\n }\n \n-impl of to_str::to_str for square {\n+impl square: to_str::to_str {\n     fn to_str() -> ~str {\n         match self {\n           bot => { ~\"R\" }"}, {"sha": "855f5caf9a06dbe64e6f9019c5099539203a3d8a", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait it {\n     fn f();\n }\n \n-impl  of it for t {\n+impl t: it {\n     fn f() { }\n }\n "}, {"sha": "7de63c20e0ce4cd57c08d4eae7d59d8a2fbcea2b", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,6 +1,6 @@\n trait repeat<A> { fn get() -> A; }\n \n-impl<A:copy> of repeat<A> for @A {\n+impl<A:copy> @A: repeat<A> {\n     fn get() -> A { *self }\n }\n "}, {"sha": "2301b45f7ddbb80386953d02fca0142d41c1699e", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,7 +9,7 @@ trait frobable {\n }\n \n #[int_frobable]\n-impl frobable of frobable for int {\n+impl int: frobable {\n     #[frob_attr1]\n     fn frob() {\n         #[frob_attr2];"}, {"sha": "983a4039eeb2e284acc4860a94f8bd20377230ee", "filename": "src/test/run-pass/module-polymorphism4-files/trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4-files%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4-files%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4-files%2Ftrait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait says {\n     fn says() -> ~str;\n }\n \n-impl talky of says for T {\n+impl T: says {\n \n     // 'animal' and 'talk' functions are implemented by the module\n     // instantiating the talky trait. They are 'abstract'"}, {"sha": "0824e5b49bb479272c176f8ef2b540ed363cc4ce", "filename": "src/test/run-pass/module-polymorphism4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,8 +3,6 @@\n // xfail-test\n \n fn main() {\n-    import cat::trait::talky;\n-    import dog::trait::talky;\n     let cat1 = cat::inst::meowlycat;\n     let cat2 = cat::inst::howlycat;\n     let dog = dog::inst::dog;"}, {"sha": "e4ae676bfa874c1dd4202362adce864e2b5d9e34", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,7 +2,7 @@ trait vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]) -> ~[B];\n }\n \n-impl monad<A> of vec_monad<A> for ~[A] {\n+impl<A> ~[A]: vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n         for self.each |elt| { r += f(elt); }\n@@ -14,7 +14,7 @@ trait option_monad<A> {\n     fn bind<B>(f: fn(A) -> option<B>) -> option<B>;\n }\n \n-impl monad<A> of option_monad<A> for option<A> {\n+impl<A> option<A>: option_monad<A> {\n     fn bind<B>(f: fn(A) -> option<B>) -> option<B> {\n         match self {\n           some(a) => { f(a) }"}, {"sha": "364fc28fb168bd4666838f97ec876d22f73cc5ea", "filename": "src/test/run-pass/monomorphize-trait-in-fn-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -10,7 +10,7 @@ trait ty_ops {\n     fn mk() -> uint;\n }\n \n-impl of ty_ops for () {\n+impl (): ty_ops {\n     fn mk() -> uint { 22u }\n }\n "}, {"sha": "cdd79e3c3c2ed11fbf8233c54d43410e9e54cd05", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,7 @@ trait get {\n }\n \n // Note: impl on a slice\n-impl foo of get for &int {\n+impl &int: get {\n     fn get() -> int {\n         return *self;\n     }"}, {"sha": "2d08d9b6948ac15f06cb0bdb366c6bcb85ee93ad", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -3,7 +3,7 @@ trait sum {\n }\n \n // Note: impl on a slice\n-impl foo of sum for &[int] {\n+impl &[int]: sum {\n     fn sum() -> int {\n         let mut sum = 0;\n         for vec::each(self) |e| { sum += e; }"}, {"sha": "de1e27f24f65bea49662a653cceb6f53f23ea7ea", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -25,8 +25,7 @@ fn align(size: uint, align: uint) -> uint {\n enum ptr_visit_adaptor<V: ty_visitor movable_ptr> = {\n     inner: V\n };\n-impl ptr_visitor<V: ty_visitor movable_ptr>\n-    of ty_visitor for ptr_visit_adaptor<V> {\n+impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n \n     #[inline(always)]\n     fn bump(sz: uint) {\n@@ -464,7 +463,7 @@ enum my_visitor = @{\n     mut vals: ~[~str]\n };\n \n-impl extra_methods for my_visitor {\n+impl my_visitor {\n     fn get<T>(f: fn(T)) {\n         unsafe {\n             f(*(self.ptr1 as *T));\n@@ -479,14 +478,14 @@ impl extra_methods for my_visitor {\n     }\n }\n \n-impl of movable_ptr for my_visitor {\n+impl my_visitor: movable_ptr {\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void) {\n         self.ptr1 = adjustment(self.ptr1);\n         self.ptr2 = adjustment(self.ptr2);\n     }\n }\n \n-impl of ty_visitor for my_visitor {\n+impl my_visitor: ty_visitor {\n \n     fn visit_bot() -> bool { true }\n     fn visit_nil() -> bool { true }"}, {"sha": "7afc85af60f622dd4b8ab18e88fed47801afe9a4", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -4,7 +4,7 @@ trait get_chowder {\n     fn get_chowder() -> &self/int;\n }\n \n-impl clam of get_chowder for clam {\n+impl clam: get_chowder {\n     fn get_chowder() -> &self/int { return self.chowder; }\n }\n "}, {"sha": "4be94ba2446931b6a963437f52a9fa8ab4b8751e", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -6,7 +6,7 @@ trait get_ctxt {\n \n type has_ctxt = { c: &ctxt };\n \n-impl of get_ctxt for has_ctxt {\n+impl has_ctxt: get_ctxt {\n     fn get_ctxt() -> &self/ctxt {\n         self.c\n     }"}, {"sha": "388c000daf0b4cfeecdc71b5bd1b44f93d48b572", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,24 +1,23 @@\n import a::*;\n-import b::baz;\n \n trait plus {\n     fn plus() -> int;\n }\n \n mod a {\n-    impl foo of plus for uint { fn plus() -> int { self as int + 20 } }\n+    impl uint: plus { fn plus() -> int { self as int + 20 } }\n }\n \n mod b {\n-    impl baz of plus for ~str { fn plus() -> int { 200 } }\n+    impl ~str: plus { fn plus() -> int { 200 } }\n }\n \n trait uint_utils {\n     fn str() -> ~str;\n     fn multi(f: fn(uint));\n }\n \n-impl util of uint_utils for uint {\n+impl uint: uint_utils {\n     fn str() -> ~str { uint::str(self) }\n     fn multi(f: fn(uint)) {\n         let mut c = 0u;\n@@ -32,7 +31,7 @@ trait vec_utils<T> {\n     fn map_<U>(f: fn(T) -> U) -> ~[U];\n }\n \n-impl util<T> of vec_utils<T> for ~[T] {\n+impl<T> ~[T]: vec_utils<T> {\n     fn length_() -> uint { vec::len(self) }\n     fn iter_(f: fn(T)) { for self.each |x| { f(x); } }\n     fn map_<U>(f: fn(T) -> U) -> ~[U] {"}, {"sha": "99c5776a5acc175fd60e539db706e84557a50153", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,13 +9,13 @@ fn andand<T: bool_like copy>(x1: T, x2: T) -> T {\n     select(x1, x2, x1)\n }\n \n-impl of bool_like for bool {\n+impl bool: bool_like {\n     static fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n         if b { x1 } else { x2 }\n     }\n }\n \n-impl of bool_like for int {\n+impl int: bool_like {\n     static fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n         if b != 0 { x1 } else { x2 }\n     }\n@@ -28,14 +28,14 @@ trait buildable<A> {\n }\n \n \n-impl extensions<A> of buildable<A> for @[A] {\n+impl<A> @[A]: buildable<A> {\n     #[inline(always)]\n      static pure fn build_sized(size: uint,\n                                 builder: fn(push: pure fn(+A))) -> @[A] {\n          at_vec::build_sized(size, builder)\n      }\n }\n-impl extensions<A> of buildable<A> for ~[A] {\n+impl<A> ~[A]: buildable<A> {\n     #[inline(always)]\n      static pure fn build_sized(size: uint,\n                                 builder: fn(push: pure fn(+A))) -> ~[A] {"}, {"sha": "19ad551d1e781b9ad58541f70f23a165e4faae36", "filename": "src/test/run-pass/trait-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -9,11 +9,11 @@ trait connection_factory<C: connection> {\n type my_connection = ();\n type my_connection_factory = ();\n \n-impl of connection for () {\n+impl (): connection {\n     fn read() -> int { 43 }\n }\n \n-impl of connection_factory<my_connection> for my_connection_factory {\n+impl my_connection_factory: connection_factory<my_connection> {\n     fn create() -> my_connection { () }\n }\n "}, {"sha": "db15409d7bbbbc342ef2e624b0ac0531f7555c09", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -11,7 +11,7 @@ trait to_str {\n     fn to_str() -> ~str;\n }\n \n-impl <T: to_str> of to_str for option<T> {\n+impl <T: to_str> option<T>: to_str {\n     fn to_str() -> ~str {\n         match self {\n           none => { ~\"none\" }\n@@ -20,11 +20,11 @@ impl <T: to_str> of to_str for option<T> {\n     }\n }\n \n-impl of to_str for int {\n+impl int: to_str {\n     fn to_str() -> ~str { int::str(self) }\n }\n \n-impl of to_str for Tree {\n+impl Tree: to_str {\n     fn to_str() -> ~str {\n         let l = self.left, r = self.right;\n         fmt!{\"[%s, %s, %s]\", self.val.to_str(),"}, {"sha": "4019ca72bd6a35a1e54d17830db91e1222967cf5", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,20 +1,20 @@\n trait to_str {\n     fn to_str() -> ~str;\n }\n-impl of to_str for int {\n+impl int: to_str {\n     fn to_str() -> ~str { int::str(self) }\n }\n-impl of to_str for ~str {\n+impl ~str: to_str {\n     fn to_str() -> ~str { self }\n }\n-impl of to_str for () {\n+impl (): to_str {\n     fn to_str() -> ~str { ~\"()\" }\n }\n \n trait map<T> {\n     fn map<U>(f: fn(T) -> U) -> ~[U];\n }\n-impl <T> of map<T> for ~[T] {\n+impl<T> ~[T]: map<T> {\n     fn map<U>(f: fn(T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.each |x| { r += ~[f(x)]; }"}, {"sha": "26d15ce790d5f0b53a24705534805c636c8f6f89", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -2,11 +2,11 @@ trait to_str {\n     fn to_str() -> ~str;\n }\n \n-impl of to_str for int {\n+impl int: to_str {\n     fn to_str() -> ~str { int::str(self) }\n }\n \n-impl <T: to_str> of to_str for ~[T] {\n+impl<T: to_str> ~[T]: to_str {\n     fn to_str() -> ~str {\n         ~\"[\" + str::connect(vec::map(self, |e| e.to_str() ), ~\", \") + ~\"]\"\n     }"}, {"sha": "654b78f05a42c3af216c172629a7d3aee9545312", "filename": "src/test/run-pass/use-trait-before-def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0720b439a4692f55d3b9951e74d452a7aef802/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs?ref=6a0720b439a4692f55d3b9951e74d452a7aef802", "patch": "@@ -1,5 +1,5 @@\n // Issue #1761\n \n-impl of foo for int { fn foo() -> int { 10 } }\n+impl int: foo { fn foo() -> int { 10 } }\n trait foo { fn foo() -> int; }\n fn main() {}\n\\ No newline at end of file"}]}