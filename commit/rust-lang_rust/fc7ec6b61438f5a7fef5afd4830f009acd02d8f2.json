{"sha": "fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjN2VjNmI2MTQzOGY1YTdmZWY1YWZkNDgzMGYwMDlhY2QwMmQ4ZjI=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-23T23:35:26Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: add {span_,}bug! macros\n\n... as single \"internal compiler error\" entry point.\n\nThe macros pass `file!()`, `line!()` and `format_args!(...)` on to a\ncold, never-inlined function, ultimately calling `bug()` or `span_bug()`\non the `Handler` from `session::diagnostic()` via the tcx in tls or,\nfailing that, panicking directly.", "tree": {"sha": "ee6363c077b024d01f17a54f7cbb47dbd9e329d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6363c077b024d01f17a54f7cbb47dbd9e329d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "html_url": "https://github.com/rust-lang/rust/commit/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3399d19a2c9503d991e4a315118b2d6146f66046", "url": "https://api.github.com/repos/rust-lang/rust/commits/3399d19a2c9503d991e4a315118b2d6146f66046", "html_url": "https://github.com/rust-lang/rust/commit/3399d19a2c9503d991e4a315118b2d6146f66046"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "76dca1bb5b64941b61d989de99b18515c84c47dd", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "patch": "@@ -44,3 +44,18 @@ macro_rules! enum_from_u32 {\n         }\n     }\n }\n+\n+#[macro_export]\n+macro_rules! bug {\n+    () => ( bug!(\"impossible case reached\") );\n+    ($($message:tt)*) => ({\n+        $crate::session::bug_fmt(file!(), line!(), format_args!($($message)*))\n+    })\n+}\n+\n+#[macro_export]\n+macro_rules! span_bug {\n+    ($span:expr, $($message:tt)*) => ({\n+        $crate::session::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n+    })\n+}"}, {"sha": "d8792928f5e03fa53c0d69561437787040b6b706", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "patch": "@@ -12,6 +12,7 @@ use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n+use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n use mir::transform as mir_pass;\n \n@@ -35,6 +36,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::rc::Rc;\n+use std::fmt;\n \n pub mod config;\n pub mod filesearch;\n@@ -541,3 +543,35 @@ pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n         Err(err_count)\n     }\n }\n+\n+#[cold]\n+#[inline(never)]\n+pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n+    // this wrapper mostly exists so I don't have to write a fully\n+    // qualified path of None::<Span> inside the bug!() macro defintion\n+    opt_span_bug_fmt(file, line, None::<Span>, args);\n+}\n+\n+#[cold]\n+#[inline(never)]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(file: &'static str,\n+                                        line: u32,\n+                                        span: S,\n+                                        args: fmt::Arguments) -> ! {\n+    opt_span_bug_fmt(file, line, Some(span), args);\n+}\n+\n+fn opt_span_bug_fmt<S: Into<MultiSpan>>(file: &'static str,\n+                                          line: u32,\n+                                          span: Option<S>,\n+                                          args: fmt::Arguments) -> ! {\n+    tls::with_opt(move |tcx| {\n+        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        match (tcx, span) {\n+            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n+            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n+            (None, _) => panic!(msg)\n+        }\n+    });\n+    unreachable!();\n+}"}]}