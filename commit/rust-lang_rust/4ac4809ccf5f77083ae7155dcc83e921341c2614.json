{"sha": "4ac4809ccf5f77083ae7155dcc83e921341c2614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzQ4MDljY2Y1Zjc3MDgzYWU3MTU1ZGNjODNlOTIxMzQxYzI2MTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-07T00:12:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-07T00:12:12Z"}, "message": "Auto merge of #64906 - Aaron1011:feature/extern-const-fn, r=Centril\n\nAdd support for `const unsafe? extern fn`\n\nThis works just as you might expect - an `const extern fn` is a `const fn` that is callable from foreign code.\n\nCurrently, panicking is not allowed in `const`s. When https://github.com/rust-lang/rfcs/pull/2345 (https://github.com/rust-lang/rust/issues/51999) is stabilized, then panicking in an `const extern fn` will produce a compile-time error when invoked at compile time, and an abort when invoked at runtime.\n\nSince this is extending the language (we're allowing the `const` keyword in a new context), I believe that this will need an FCP. However, it's a very minor change, so I didn't think that filing an RFC was necessary.\n\nThis will allow libc (and other FFI crates) to make many functions `const`, without having to give up on making them `extern` as well.\n\nTracking issue: https://github.com/rust-lang/rust/issues/64926.", "tree": {"sha": "4a1db137f47b0a1e888027b3f19454963b14e177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1db137f47b0a1e888027b3f19454963b14e177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac4809ccf5f77083ae7155dcc83e921341c2614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4809ccf5f77083ae7155dcc83e921341c2614", "html_url": "https://github.com/rust-lang/rust/commit/4ac4809ccf5f77083ae7155dcc83e921341c2614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4809ccf5f77083ae7155dcc83e921341c2614/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09868a56c95f7bc7b6ee3ab7611e3ca551031dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/09868a56c95f7bc7b6ee3ab7611e3ca551031dbd", "html_url": "https://github.com/rust-lang/rust/commit/09868a56c95f7bc7b6ee3ab7611e3ca551031dbd"}, {"sha": "a4cad414ad42d36adfe27ac4b9271831e8af5125", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cad414ad42d36adfe27ac4b9271831e8af5125", "html_url": "https://github.com/rust-lang/rust/commit/a4cad414ad42d36adfe27ac4b9271831e8af5125"}], "stats": {"total": 320, "additions": 301, "deletions": 19}, "files": [{"sha": "20a77fa37cf6a10872cf9de3198e82db0545e486", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -519,6 +519,9 @@ declare_features! (\n     /// Allows the use of or-patterns (e.g., `0 | 1`).\n     (active, or_patterns, \"1.38.0\", Some(54883), None),\n \n+    /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n+    (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "9e40b1a26ac1a6d0ae34a52f2522c68a673b0ec9", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -821,6 +821,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n+    gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "1518da23b096f329e786525a7a052f9c057c5850", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -57,6 +57,8 @@ pub struct GatedSpans {\n     pub yields: Lock<Vec<Span>>,\n     /// Spans collected for gating `or_patterns`, e.g. `Some(Foo | Bar)`.\n     pub or_patterns: Lock<Vec<Span>>,\n+    /// Spans collected for gating `const_extern_fn`, e.g. `const extern fn foo`.\n+    pub const_extern_fn: Lock<Vec<Span>>,\n }\n \n /// Info about a parsing session."}, {"sha": "93165b096490320ab9652f7eada271d422773db1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -1487,6 +1487,15 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Parses `extern` followed by an optional ABI string, or nothing.\n+    fn parse_extern_abi(&mut self) -> PResult<'a, Abi> {\n+        if self.eat_keyword(kw::Extern) {\n+            Ok(self.parse_opt_abi()?.unwrap_or(Abi::C))\n+        } else {\n+            Ok(Abi::Rust)\n+        }\n+    }\n+\n     /// Parses a string as an ABI spec on an extern type or module. Consumes\n     /// the `extern` keyword, if one is found.\n     fn parse_opt_abi(&mut self) -> PResult<'a, Option<Abi>> {"}, {"sha": "2ac0352764fa0c2f07124310fbd63975f333cefd", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -149,17 +149,24 @@ impl<'a> Parser<'a> {\n         }\n         if self.eat_keyword(kw::Const) {\n             let const_span = self.prev_span;\n-            if self.check_keyword(kw::Fn)\n-                || (self.check_keyword(kw::Unsafe)\n-                    && self.is_keyword_ahead(1, &[kw::Fn])) {\n+            if [kw::Fn, kw::Unsafe, kw::Extern].iter().any(|k| self.check_keyword(*k)) {\n                 // CONST FUNCTION ITEM\n+\n                 let unsafety = self.parse_unsafety();\n-                self.bump();\n+\n+                if self.check_keyword(kw::Extern) {\n+                    self.sess.gated_spans.const_extern_fn.borrow_mut().push(\n+                        lo.to(self.token.span)\n+                    );\n+                }\n+                let abi = self.parse_extern_abi()?;\n+                self.bump(); // 'fn'\n+\n                 let header = FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n                     constness: respan(const_span, Constness::Const),\n-                    abi: Abi::Rust,\n+                    abi,\n                 };\n                 return self.parse_item_fn(lo, visibility, attrs, header);\n             }\n@@ -257,11 +264,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `unsafe`\n             // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n             self.check(&token::OpenDelim(token::Brace));\n-            let abi = if self.eat_keyword(kw::Extern) {\n-                self.parse_opt_abi()?.unwrap_or(Abi::C)\n-            } else {\n-                Abi::Rust\n-            };\n+            let abi = self.parse_extern_abi()?;\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n             let header = FnHeader {\n@@ -834,11 +837,7 @@ impl<'a> Parser<'a> {\n         let (constness, unsafety, abi) = if is_const_fn {\n             (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n-            let abi = if self.eat_keyword(kw::Extern) {\n-                self.parse_opt_abi()?.unwrap_or(Abi::C)\n-            } else {\n-                Abi::Rust\n-            };\n+            let abi = self.parse_extern_abi()?;\n             (respan(self.prev_span, Constness::NotConst), unsafety, abi)\n         };\n         if !self.eat_keyword(kw::Fn) {\n@@ -1278,14 +1277,30 @@ impl<'a> Parser<'a> {\n         // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n         if self.check_keyword(kw::Static) || self.token.is_keyword(kw::Const) {\n             if self.token.is_keyword(kw::Const) {\n-                self.diagnostic()\n-                    .struct_span_err(self.token.span, \"extern items cannot be `const`\")\n-                    .span_suggestion(\n+                let mut err = self\n+                    .struct_span_err(self.token.span, \"extern items cannot be `const`\");\n+\n+\n+                // The user wrote 'const fn'\n+                if self.is_keyword_ahead(1, &[kw::Fn, kw::Unsafe]) {\n+                    err.emit();\n+                    // Consume `const`\n+                    self.bump();\n+                    // Consume `unsafe` if present, since `extern` blocks\n+                    // don't allow it. This will leave behind a plain 'fn'\n+                    self.eat_keyword(kw::Unsafe);\n+                    // Treat 'const fn` as a plain `fn` for error recovery purposes.\n+                    // We've already emitted an error, so compilation is guaranteed\n+                    // to fail\n+                    return Ok(self.parse_item_foreign_fn(visibility, lo, attrs, extern_sp)?);\n+                }\n+                err.span_suggestion(\n                         self.token.span,\n                         \"try using a static value\",\n                         \"static\".to_owned(),\n                         Applicability::MachineApplicable\n-                    ).emit();\n+                );\n+                err.emit();\n             }\n             self.bump(); // `static` or `const`\n             return Ok(self.parse_item_foreign_static(visibility, lo, attrs)?);"}, {"sha": "cc95dcb3c4484e8172f48851cae3393efce59849", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -196,6 +196,7 @@ symbols! {\n         console,\n         const_compare_raw_pointers,\n         const_constructor,\n+        const_extern_fn,\n         const_fn,\n         const_fn_union,\n         const_generics,"}, {"sha": "7c6a574a2110f24db0bf8e6a1b498c204c485bc3", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_extern_fn)]\n+\n+extern \"C\" {\n+    fn regular_in_block();\n+}\n+\n+const extern fn bar() {\n+    unsafe {\n+        regular_in_block();\n+        //~^ ERROR: cannot call functions with `\"C\"` abi in `min_const_fn`\n+    }\n+}\n+\n+extern fn regular() {}\n+\n+const extern fn foo() {\n+    unsafe {\n+        regular();\n+        //~^ ERROR: cannot call functions with `\"C\"` abi in `min_const_fn`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d8bdf0a57cf666c9382debb2d50af5317081504a", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,21 @@\n+error[E0723]: cannot call functions with `\"C\"` abi in `min_const_fn`\n+  --> $DIR/const-extern-fn-call-extern-fn.rs:9:9\n+   |\n+LL |         regular_in_block();\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: cannot call functions with `\"C\"` abi in `min_const_fn`\n+  --> $DIR/const-extern-fn-call-extern-fn.rs:18:9\n+   |\n+LL |         regular();\n+   |         ^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "561981176880146ddc47110f9ac7f51f34a3419c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_extern_fn)]\n+\n+const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+//~^ ERROR unsizing casts are not allowed in const fn\n+const unsafe extern \"C\" fn closure() -> fn() { || {} }\n+//~^ ERROR function pointers in const fn are unstable\n+const unsafe extern fn use_float() { 1.0 + 1.0; }\n+//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n+//~^ ERROR casting pointers to ints is unstable in const fn\n+\n+\n+fn main() {}"}, {"sha": "0ab1ddd8d52253254afd74b5e05c38b30c0682b3", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,39 @@\n+error[E0723]: unsizing casts are not allowed in const fn\n+  --> $DIR/const-extern-fn-min-const-fn.rs:3:48\n+   |\n+LL | const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+   |                                                ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/const-extern-fn-min-const-fn.rs:5:41\n+   |\n+LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n+   |                                         ^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/const-extern-fn-min-const-fn.rs:7:38\n+   |\n+LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n+   |\n+LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n+   |                                                ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "cab175bbfa8180263e8850ab2f4b72fa756dd458", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_extern_fn)]\n+\n+const unsafe extern fn foo() -> usize { 5 }\n+\n+fn main() {\n+    let a: [u8; foo()];\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    foo();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+}"}, {"sha": "5196b8ee0a21d3c81fd147818bc30ee1a3cee12a", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.stderr?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:8:5\n+   |\n+LL |     foo();\n+   |     ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:6:17\n+   |\n+LL |     let a: [u8; foo()];\n+   |                 ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1dc0f83cadf7d98a3542e57f67a148bc5a497d87", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(const_extern_fn)]\n+\n+const extern fn foo1(val: u8) -> u8 {\n+    val + 1\n+}\n+\n+const extern \"C\" fn foo2(val: u8) -> u8 {\n+    val + 1\n+}\n+\n+const unsafe extern fn bar1(val: bool) -> bool {\n+    !val\n+}\n+\n+const unsafe extern \"C\" fn bar2(val: bool) -> bool {\n+    !val\n+}\n+\n+\n+fn main() {\n+    let a: [u8; foo1(25) as usize] = [0; 26];\n+    let b: [u8; foo2(25) as usize] = [0; 26];\n+    assert_eq!(a, b);\n+\n+    let bar1_res = unsafe { bar1(false) };\n+    let bar2_res = unsafe { bar2(false) };\n+    assert!(bar1_res);\n+    assert_eq!(bar1_res, bar2_res);\n+\n+    let _foo1_cast: extern fn(u8) -> u8 = foo1;\n+    let _foo2_cast: extern fn(u8) -> u8 = foo2;\n+    let _bar1_cast: unsafe extern fn(bool) -> bool = bar1;\n+    let _bar2_cast: unsafe extern fn(bool) -> bool = bar2;\n+}"}, {"sha": "d39f2c1fe277e115d3899de51bb435ed47dae1e7", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,12 @@\n+// Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n+\n+#[cfg(FALSE)] const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n+#[cfg(FALSE)] const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n+#[cfg(FALSE)] const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n+#[cfg(FALSE)] const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n+#[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n+//~^ ERROR `const extern fn` definitions are unstable\n+#[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n+//~^ ERROR `const extern fn` definitions are unstable\n+\n+fn main() {}"}, {"sha": "f138620ffefbaea966421a352ae66465c85c2114", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:3:15\n+   |\n+LL | #[cfg(FALSE)] const extern fn foo1() {}\n+   |               ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:4:15\n+   |\n+LL | #[cfg(FALSE)] const extern \"C\" fn foo2() {}\n+   |               ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:5:15\n+   |\n+LL | #[cfg(FALSE)] const extern \"Rust\" fn foo3() {}\n+   |               ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:6:15\n+   |\n+LL | #[cfg(FALSE)] const unsafe extern fn bar1() {}\n+   |               ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:15\n+   |\n+LL | #[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n+   |               ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error[E0658]: `const extern fn` definitions are unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:9:15\n+   |\n+LL | #[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n+   |               ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "29f26389ded1876c2be6187ab7156915df03a005", "filename": "src/test/ui/parser/no-const-fn-in-extern-block.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,8 @@\n+extern {\n+    const fn foo();\n+    //~^ ERROR extern items cannot be `const`\n+    const unsafe fn bar();\n+    //~^ ERROR extern items cannot be `const`\n+}\n+\n+fn main() {}"}, {"sha": "5b4663a702f06af428b12a58d578e3f86a65cc37", "filename": "src/test/ui/parser/no-const-fn-in-extern-block.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4809ccf5f77083ae7155dcc83e921341c2614/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr?ref=4ac4809ccf5f77083ae7155dcc83e921341c2614", "patch": "@@ -0,0 +1,14 @@\n+error: extern items cannot be `const`\n+  --> $DIR/no-const-fn-in-extern-block.rs:2:5\n+   |\n+LL |     const fn foo();\n+   |     ^^^^^\n+\n+error: extern items cannot be `const`\n+  --> $DIR/no-const-fn-in-extern-block.rs:4:5\n+   |\n+LL |     const unsafe fn bar();\n+   |     ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}