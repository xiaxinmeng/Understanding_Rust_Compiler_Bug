{"sha": "e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDZmOWM0NGYxZTE3Y2FjNjZkN2I3NWUyY2EwOTljODdhMmRmY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-15T09:30:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-15T09:30:00Z"}, "message": "Auto merge of #88619 - GuillaumeGomez:simplify-std-os-reexports, r=Amanieu\n\nRemove `cfg(doc)` from std::os module reexports to fix rustdoc linking issues\n\nFixes https://github.com/rust-lang/rust/issues/88304.\n\nI tested it based on https://github.com/rust-lang/rust/pull/88292.\n\nNot sure if it's the best approach, but at least it makes thing a bit simpler.\n\ncc `@jyn514`", "tree": {"sha": "59cf8c9410a0e87e88c06771b4e041fd25751e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cf8c9410a0e87e88c06771b4e041fd25751e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "html_url": "https://github.com/rust-lang/rust/commit/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdeba02ff71416e014f7130f75166890688be986", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdeba02ff71416e014f7130f75166890688be986", "html_url": "https://github.com/rust-lang/rust/commit/cdeba02ff71416e014f7130f75166890688be986"}, {"sha": "9a3b1cfeb08db360b11dd313ab2907d3e8c45bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3b1cfeb08db360b11dd313ab2907d3e8c45bb3", "html_url": "https://github.com/rust-lang/rust/commit/9a3b1cfeb08db360b11dd313ab2907d3e8c45bb3"}], "stats": {"total": 211, "additions": 115, "deletions": 96}, "files": [{"sha": "069a5376a441c9062b8e945ba0f7610b46ddcbc4", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 114, "deletions": 95, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "patch": "@@ -10,117 +10,136 @@ pub mod raw;\n // of a macro that is not vendored by Rust and included in the toolchain.\n // See https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n \n+// On certain platforms right now the \"main modules\" modules that are\n+// documented don't compile (missing things in `libc` which is empty),\n+// so just omit them with an empty module and add the \"unstable\" attribute.\n+\n+// Unix, linux, wasi and windows are handled a bit differently.\n #[cfg(all(\n     doc,\n-    not(any(\n+    any(\n         all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n         all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    ))\n+    )\n ))]\n-#[path = \".\"]\n-mod doc {\n-    // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n-    // modules as these are the \"main modules\" that are used across platforms,\n-    // so these modules are enabled when `cfg(doc)` is set.\n-    // This should help show platform-specific functionality in a hopefully cross-platform\n-    // way in the documentation.\n-\n-    pub mod unix;\n-\n-    pub mod linux;\n-\n-    pub mod wasi;\n-\n-    pub mod windows;\n-}\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+pub mod unix {}\n #[cfg(all(\n     doc,\n     any(\n         all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n         all(target_vendor = \"fortanix\", target_env = \"sgx\")\n     )\n ))]\n-mod doc {\n-    // On certain platforms right now the \"main modules\" modules that are\n-    // documented don't compile (missing things in `libc` which is empty),\n-    // so just omit them with an empty module.\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod unix {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod linux {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod wasi {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod windows {}\n-}\n-#[cfg(doc)]\n-#[stable(feature = \"os\", since = \"1.0.0\")]\n-pub use doc::*;\n-\n-#[cfg(not(doc))]\n-#[path = \".\"]\n-mod imp {\n-    // If we're not documenting std then we only expose modules appropriate for the\n-    // current platform.\n-\n-    #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-    pub mod fortanix_sgx;\n-\n-    #[cfg(target_os = \"hermit\")]\n-    #[path = \"hermit/mod.rs\"]\n-    pub mod unix;\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+pub mod linux {}\n+#[cfg(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+))]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+pub mod wasi {}\n+#[cfg(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+))]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+pub mod windows {}\n \n-    #[cfg(target_os = \"android\")]\n-    pub mod android;\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub mod dragonfly;\n-    #[cfg(target_os = \"emscripten\")]\n-    pub mod emscripten;\n-    #[cfg(target_os = \"espidf\")]\n-    pub mod espidf;\n-    #[cfg(target_os = \"freebsd\")]\n-    pub mod freebsd;\n-    #[cfg(target_os = \"fuchsia\")]\n-    pub mod fuchsia;\n-    #[cfg(target_os = \"haiku\")]\n-    pub mod haiku;\n-    #[cfg(target_os = \"illumos\")]\n-    pub mod illumos;\n-    #[cfg(target_os = \"ios\")]\n-    pub mod ios;\n-    #[cfg(target_os = \"l4re\")]\n-    pub mod linux;\n-    #[cfg(target_os = \"linux\")]\n-    pub mod linux;\n-    #[cfg(target_os = \"macos\")]\n-    pub mod macos;\n-    #[cfg(target_os = \"netbsd\")]\n-    pub mod netbsd;\n-    #[cfg(target_os = \"openbsd\")]\n-    pub mod openbsd;\n-    #[cfg(target_os = \"redox\")]\n-    pub mod redox;\n-    #[cfg(target_os = \"solaris\")]\n-    pub mod solaris;\n-    #[cfg(unix)]\n-    pub mod unix;\n+// unix\n+#[cfg(not(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+)))]\n+#[cfg(target_os = \"hermit\")]\n+#[path = \"hermit/mod.rs\"]\n+pub mod unix;\n+#[cfg(not(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+)))]\n+#[cfg(all(not(target_os = \"hermit\"), any(unix, doc)))]\n+pub mod unix;\n \n-    #[cfg(target_os = \"vxworks\")]\n-    pub mod vxworks;\n+// linux\n+#[cfg(not(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+)))]\n+#[cfg(any(target_os = \"linux\", target_os = \"l4re\", doc))]\n+pub mod linux;\n \n-    #[cfg(target_os = \"wasi\")]\n-    pub mod wasi;\n+// wasi\n+#[cfg(not(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+)))]\n+#[cfg(any(target_os = \"wasi\", doc))]\n+pub mod wasi;\n \n-    #[cfg(windows)]\n-    pub mod windows;\n-}\n-#[cfg(not(doc))]\n-#[stable(feature = \"os\", since = \"1.0.0\")]\n-pub use imp::*;\n+// windows\n+#[cfg(not(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+)))]\n+#[cfg(any(windows, doc))]\n+pub mod windows;\n+\n+// Others.\n+#[cfg(target_os = \"android\")]\n+pub mod android;\n+#[cfg(target_os = \"dragonfly\")]\n+pub mod dragonfly;\n+#[cfg(target_os = \"emscripten\")]\n+pub mod emscripten;\n+#[cfg(target_os = \"espidf\")]\n+pub mod espidf;\n+#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+pub mod fortanix_sgx;\n+#[cfg(target_os = \"freebsd\")]\n+pub mod freebsd;\n+#[cfg(target_os = \"fuchsia\")]\n+pub mod fuchsia;\n+#[cfg(target_os = \"haiku\")]\n+pub mod haiku;\n+#[cfg(target_os = \"illumos\")]\n+pub mod illumos;\n+#[cfg(target_os = \"ios\")]\n+pub mod ios;\n+#[cfg(target_os = \"macos\")]\n+pub mod macos;\n+#[cfg(target_os = \"netbsd\")]\n+pub mod netbsd;\n+#[cfg(target_os = \"openbsd\")]\n+pub mod openbsd;\n+#[cfg(target_os = \"redox\")]\n+pub mod redox;\n+#[cfg(target_os = \"solaris\")]\n+pub mod solaris;\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub mod vxworks;\n \n #[cfg(any(unix, target_os = \"wasi\", doc))]\n mod fd;"}, {"sha": "80be4350c3c1a5027bba117e3d78ad09e4d4f9c5", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=e846f9c44f1e17cac66d7b75e2ca099c87a2dfcb", "patch": "@@ -104,7 +104,7 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n-pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"os\", \"imp\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n+pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];"}]}