{"sha": "6c017f071d5894a75c3cb37aa48791e77f50a8f2", "node_id": "C_kwDOAAsO6NoAKDZjMDE3ZjA3MWQ1ODk0YTc1YzNjYjM3YWE0ODc5MWU3N2Y1MGE4ZjI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T02:24:12Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T02:28:52Z"}, "message": "rustdoc: Merge visits of extern crates into one loop", "tree": {"sha": "9edd9d33fbb66dcbd9b418ef4598f44fce8a2855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9edd9d33fbb66dcbd9b418ef4598f44fce8a2855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c017f071d5894a75c3cb37aa48791e77f50a8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c017f071d5894a75c3cb37aa48791e77f50a8f2", "html_url": "https://github.com/rust-lang/rust/commit/6c017f071d5894a75c3cb37aa48791e77f50a8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c017f071d5894a75c3cb37aa48791e77f50a8f2/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41beab5cd939745924a61d5af691a05f156bd12", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41beab5cd939745924a61d5af691a05f156bd12", "html_url": "https://github.com/rust-lang/rust/commit/f41beab5cd939745924a61d5af691a05f156bd12"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "a5c9370c05ce5cbecba752adeb443676e5cdf655", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c017f071d5894a75c3cb37aa48791e77f50a8f2/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c017f071d5894a75c3cb37aa48791e77f50a8f2/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=6c017f071d5894a75c3cb37aa48791e77f50a8f2", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n use crate::clean::{self, ExternalCrate, ItemId, PrimitiveType};\n-use crate::config::RenderOptions;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n@@ -145,23 +144,20 @@ impl Cache {\n         debug!(?cx.cache.crate_version);\n         cx.cache.traits = krate.external_traits.take();\n \n-        let mut externs = Vec::new();\n-        for &cnum in cx.tcx.crates(()) {\n-            externs.push(ExternalCrate { crate_num: cnum });\n-            // Analyze doc-reachability for extern items\n-            LibEmbargoVisitor::new(cx).visit_lib(cnum);\n-        }\n-\n-        let RenderOptions { extern_html_root_takes_precedence, output: dst, .. } =\n-            &cx.render_options;\n-\n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for e in externs {\n+        for &crate_num in cx.tcx.crates(()) {\n+            let e = ExternalCrate { crate_num };\n+            // Analyze doc-reachability for extern items\n+            LibEmbargoVisitor::new(cx).visit_lib(e.crate_num);\n+\n             let name = e.name(tcx);\n+            let render_options = &cx.render_options;\n             let extern_url =\n-                cx.render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            let location = e.location(extern_url, *extern_html_root_takes_precedence, dst, tcx);\n+                render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n+            let extern_url_takes_precedence = render_options.extern_html_root_takes_precedence;\n+            let dst = &render_options.output;\n+            let location = e.location(extern_url, extern_url_takes_precedence, dst, tcx);\n             cx.cache.extern_locations.insert(e.crate_num, location);\n             cx.cache.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }"}]}