{"sha": "7403b0ceaa59918f490271ba9b394df4615bc60d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDNiMGNlYWE1OTkxOGY0OTAyNzFiYTliMzk0ZGY0NjE1YmM2MGQ=", "commit": {"author": {"name": "Mukilan Thiyagarajan", "email": "mukilanthiagarajan@gmail.com", "date": "2014-12-04T13:21:44Z"}, "committer": {"name": "Mukilan Thiyagarajan", "email": "mukilanthiagarajan@gmail.com", "date": "2014-12-04T13:21:44Z"}, "message": "Handle conflicting import of items declared in the same module\n\nFixes #19498", "tree": {"sha": "19f28a7961b669c3cab9befdbde8f913dc419c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19f28a7961b669c3cab9befdbde8f913dc419c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7403b0ceaa59918f490271ba9b394df4615bc60d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7403b0ceaa59918f490271ba9b394df4615bc60d", "html_url": "https://github.com/rust-lang/rust/commit/7403b0ceaa59918f490271ba9b394df4615bc60d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7403b0ceaa59918f490271ba9b394df4615bc60d/comments", "author": {"login": "mukilan", "id": 251518, "node_id": "MDQ6VXNlcjI1MTUxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/251518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mukilan", "html_url": "https://github.com/mukilan", "followers_url": "https://api.github.com/users/mukilan/followers", "following_url": "https://api.github.com/users/mukilan/following{/other_user}", "gists_url": "https://api.github.com/users/mukilan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mukilan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mukilan/subscriptions", "organizations_url": "https://api.github.com/users/mukilan/orgs", "repos_url": "https://api.github.com/users/mukilan/repos", "events_url": "https://api.github.com/users/mukilan/events{/privacy}", "received_events_url": "https://api.github.com/users/mukilan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mukilan", "id": 251518, "node_id": "MDQ6VXNlcjI1MTUxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/251518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mukilan", "html_url": "https://github.com/mukilan", "followers_url": "https://api.github.com/users/mukilan/followers", "following_url": "https://api.github.com/users/mukilan/following{/other_user}", "gists_url": "https://api.github.com/users/mukilan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mukilan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mukilan/subscriptions", "organizations_url": "https://api.github.com/users/mukilan/orgs", "repos_url": "https://api.github.com/users/mukilan/repos", "events_url": "https://api.github.com/users/mukilan/events{/privacy}", "received_events_url": "https://api.github.com/users/mukilan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a325c666d2cb7e297bf3057ff2442f96a79428b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a325c666d2cb7e297bf3057ff2442f96a79428b", "html_url": "https://github.com/rust-lang/rust/commit/3a325c666d2cb7e297bf3057ff2442f96a79428b"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "17dff18c3c37834eeafea2a2d6cdf9124c2659ea", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7403b0ceaa59918f490271ba9b394df4615bc60d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7403b0ceaa59918f490271ba9b394df4615bc60d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7403b0ceaa59918f490271ba9b394df4615bc60d", "patch": "@@ -2654,10 +2654,34 @@ impl<'a> Resolver<'a> {\n \n                     }\n                     Some(_) => {\n-                        // The import is unresolved. Bail out.\n-                        debug!(\"(resolving single import) unresolved import; \\\n-                                bailing out\");\n-                        return Indeterminate;\n+                        // If containing_module is the same module whose import we are resolving\n+                        // and there it has an unresolved import with the same name as `source`,\n+                        // then the user is actually trying to import an item that is declared\n+                        // in the same scope\n+                        //\n+                        // e.g\n+                        // use self::submodule;\n+                        // pub mod submodule;\n+                        //\n+                        // In this case we continue as if we resolved the import and let the\n+                        // check_for_conflicts_between_imports_and_items call below handle\n+                        // the conflict\n+                        match (module_.def_id.get(),  containing_module.def_id.get()) {\n+                            (Some(id1), Some(id2)) if id1 == id2  => {\n+                                if value_result.is_unknown() {\n+                                    value_result = UnboundResult;\n+                                }\n+                                if type_result.is_unknown() {\n+                                    type_result = UnboundResult;\n+                                }\n+                            }\n+                            _ =>  {\n+                                // The import is unresolved. Bail out.\n+                                debug!(\"(resolving single import) unresolved import; \\\n+                                        bailing out\");\n+                                return Indeterminate;\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -3018,7 +3042,7 @@ impl<'a> Resolver<'a> {\n     fn check_for_conflicts_between_imports_and_items(&mut self,\n                                                      module: &Module,\n                                                      import_resolution:\n-                                                     &mut ImportResolution,\n+                                                     &ImportResolution,\n                                                      import_span: Span,\n                                                      name: Name) {\n         if self.session.features.borrow().import_shadowing {"}]}