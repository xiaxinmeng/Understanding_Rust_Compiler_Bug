{"sha": "e56121c584893d8b46af5e4cd5d580d30f221d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjEyMWM1ODQ4OTNkOGI0NmFmNWU0Y2Q1ZDU4MGQzMGYyMjFkOWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-26T16:49:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "Do not import variants from RenderedLineKind", "tree": {"sha": "01c324ed1ec7931f0e3a55450f18c4d01c28dad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01c324ed1ec7931f0e3a55450f18c4d01c28dad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56121c584893d8b46af5e4cd5d580d30f221d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56121c584893d8b46af5e4cd5d580d30f221d9f", "html_url": "https://github.com/rust-lang/rust/commit/e56121c584893d8b46af5e4cd5d580d30f221d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56121c584893d8b46af5e4cd5d580d30f221d9f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9c9afbe265b1fc9dbb1ed8bdb9b82523badf9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9c9afbe265b1fc9dbb1ed8bdb9b82523badf9c", "html_url": "https://github.com/rust-lang/rust/commit/9a9c9afbe265b1fc9dbb1ed8bdb9b82523badf9c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0018667e67b65f8df507fa4f65c4c5a6e44214b3", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e56121c584893d8b46af5e4cd5d580d30f221d9f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56121c584893d8b46af5e4cd5d580d30f221d9f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=e56121c584893d8b46af5e4cd5d580d30f221d9f", "patch": "@@ -103,7 +103,7 @@ pub enum RenderedLineKind {\n     Annotations,\n     Elision,\n }\n-use self::RenderedLineKind::*;\n+use self::RenderedLineKind as RLK;\n \n impl SnippetData {\n     pub fn new(codemap: Rc<CodeMap>,\n@@ -244,19 +244,19 @@ impl RenderedLine {\n impl RenderedLineKind {\n     fn prefix(&self) -> StyledString {\n         match *self {\n-            SourceText { file: _, line_index } =>\n+            RLK::SourceText { file: _, line_index } =>\n                 StyledString {\n                     text: format!(\"{}\", line_index + 1),\n                     style: LineNumber,\n                 },\n-            Elision =>\n+            RLK::Elision =>\n                 StyledString {\n                     text: String::from(\"...\"),\n                     style: LineNumber,\n                 },\n-            PrimaryFileName |\n-            OtherFileName |\n-            Annotations =>\n+            RLK::PrimaryFileName |\n+            RLK::OtherFileName |\n+            RLK::Annotations =>\n                 StyledString {\n                     text: String::from(\"\"),\n                     style: LineNumber,\n@@ -296,7 +296,7 @@ impl StyledBuffer {\n                 //We know our first output line is source and the rest are highlights and labels\n                 output.push(RenderedLine { text: styled_vec, kind: source_kind.clone() });\n             } else {\n-                output.push(RenderedLine { text: styled_vec, kind: Annotations });\n+                output.push(RenderedLine { text: styled_vec, kind: RLK::Annotations });\n             }\n             styled_vec = vec![];\n         }\n@@ -484,7 +484,7 @@ impl FileInfo {\n                         text: format!(\":{}:{}\", lo.line, lo.col.0 + 1),\n                         style: LineAndColumn,\n                     }],\n-                    kind: PrimaryFileName,\n+                    kind: RLK::PrimaryFileName,\n                 });\n             }\n             None => {\n@@ -493,7 +493,7 @@ impl FileInfo {\n                         text: self.file.name.clone(),\n                         style: FileNameStyle,\n                     }],\n-                    kind: OtherFileName,\n+                    kind: RLK::OtherFileName,\n                 });\n             }\n         }\n@@ -534,7 +534,7 @@ impl FileInfo {\n                     if prev_ends_at_eol && is_single_unlabeled_annotated_line {\n                         if !elide_unlabeled_region {\n                             output.push(RenderedLine::from((String::new(),\n-                                NoStyle, Elision)));\n+                                NoStyle, RLK::Elision)));\n                             elide_unlabeled_region = true;\n                             prev_ends_at_eol = true;\n                         }\n@@ -548,7 +548,7 @@ impl FileInfo {\n                 }\n             } else {\n                 if group.len() > 1 {\n-                    output.push(RenderedLine::from((String::new(), NoStyle, Elision)));\n+                    output.push(RenderedLine::from((String::new(), NoStyle, RLK::Elision)));\n                 } else {\n                     let mut v: Vec<RenderedLine> =\n                         group.iter().flat_map(|line| self.render_line(line)).collect();\n@@ -563,7 +563,7 @@ impl FileInfo {\n     fn render_line(&self, line: &Line) -> Vec<RenderedLine> {\n         let source_string = self.file.get_line(line.line_index)\n                                      .unwrap_or(\"\");\n-        let source_kind = SourceText {\n+        let source_kind = RLK::SourceText {\n             file: self.file.clone(),\n             line_index: line.line_index,\n         };"}]}