{"sha": "d17a378b16b852e3c4d72eebad85c702fe5b6d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2EzNzhiMTZiODUyZTNjNGQ3MmVlYmFkODVjNzAyZmU1YjZkNTg=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-07-09T15:32:49Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-07-20T15:13:37Z"}, "message": "rustdoc: set panic output before starting compiler thread pool", "tree": {"sha": "44f4daabe04d1406dfb50a233721b3e4124192ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f4daabe04d1406dfb50a233721b3e4124192ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17a378b16b852e3c4d72eebad85c702fe5b6d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17a378b16b852e3c4d72eebad85c702fe5b6d58", "html_url": "https://github.com/rust-lang/rust/commit/d17a378b16b852e3c4d72eebad85c702fe5b6d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17a378b16b852e3c4d72eebad85c702fe5b6d58/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bea4d1fc66b0ab1406c4c0e184af761485a3c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bea4d1fc66b0ab1406c4c0e184af761485a3c6a", "html_url": "https://github.com/rust-lang/rust/commit/3bea4d1fc66b0ab1406c4c0e184af761485a3c6a"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "c1beb453acce5452a7ce709aef7fcebe10e49242", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d17a378b16b852e3c4d72eebad85c702fe5b6d58/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17a378b16b852e3c4d72eebad85c702fe5b6d58/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d17a378b16b852e3c4d72eebad85c702fe5b6d58", "patch": "@@ -232,40 +232,42 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         ..config::basic_options().clone()\n     };\n \n-    let (libdir, outdir) = driver::spawn_thread_pool(sessopts, |sessopts| {\n-        // Shuffle around a few input and output handles here. We're going to pass\n-        // an explicit handle into rustc to collect output messages, but we also\n-        // want to catch the error message that rustc prints when it fails.\n-        //\n-        // We take our thread-local stderr (likely set by the test runner) and replace\n-        // it with a sink that is also passed to rustc itself. When this function\n-        // returns the output of the sink is copied onto the output of our own thread.\n-        //\n-        // The basic idea is to not use a default Handler for rustc, and then also\n-        // not print things by default to the actual stderr.\n-        struct Sink(Arc<Mutex<Vec<u8>>>);\n-        impl Write for Sink {\n-            fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-                Write::write(&mut *self.0.lock().unwrap(), data)\n-            }\n-            fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    // Shuffle around a few input and output handles here. We're going to pass\n+    // an explicit handle into rustc to collect output messages, but we also\n+    // want to catch the error message that rustc prints when it fails.\n+    //\n+    // We take our thread-local stderr (likely set by the test runner) and replace\n+    // it with a sink that is also passed to rustc itself. When this function\n+    // returns the output of the sink is copied onto the output of our own thread.\n+    //\n+    // The basic idea is to not use a default Handler for rustc, and then also\n+    // not print things by default to the actual stderr.\n+    struct Sink(Arc<Mutex<Vec<u8>>>);\n+    impl Write for Sink {\n+        fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+            Write::write(&mut *self.0.lock().unwrap(), data)\n         }\n-        struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n-        impl Drop for Bomb {\n-            fn drop(&mut self) {\n-                let _ = self.1.write_all(&self.0.lock().unwrap());\n-            }\n+        fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    }\n+    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n+    impl Drop for Bomb {\n+        fn drop(&mut self) {\n+            let _ = self.1.write_all(&self.0.lock().unwrap());\n         }\n-        let data = Arc::new(Mutex::new(Vec::new()));\n+    }\n+    let data = Arc::new(Mutex::new(Vec::new()));\n+\n+    let old = io::set_panic(Some(box Sink(data.clone())));\n+    let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n+\n+    let (libdir, outdir) = driver::spawn_thread_pool(sessopts, |sessopts| {\n         let codemap = Lrc::new(CodeMap::new_doctest(\n             sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n         ));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                         Some(codemap.clone()),\n                                                         false,\n                                                         false);\n-        let old = io::set_panic(Some(box Sink(data.clone())));\n-        let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n         // Compile the code\n         let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);"}]}