{"sha": "5c20a8aa9c377f339bda7f16e8701070d23e6b4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjBhOGFhOWMzNzdmMzM5YmRhN2YxNmU4NzAxMDcwZDIzZTZiNGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T18:38:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T18:44:36Z"}, "message": "Make \"cannot determine a type for this expression\" non-fatal. Closes #621", "tree": {"sha": "6b5cb6cb88a378e50ec86dd99020d1e1df13a2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b5cb6cb88a378e50ec86dd99020d1e1df13a2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c20a8aa9c377f339bda7f16e8701070d23e6b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c20a8aa9c377f339bda7f16e8701070d23e6b4e", "html_url": "https://github.com/rust-lang/rust/commit/5c20a8aa9c377f339bda7f16e8701070d23e6b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c20a8aa9c377f339bda7f16e8701070d23e6b4e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31472e84545a90cea929f728cd48a00a10d8274", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31472e84545a90cea929f728cd48a00a10d8274", "html_url": "https://github.com/rust-lang/rust/commit/c31472e84545a90cea929f728cd48a00a10d8274"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "7c042eee43a441ad035f0489ead77b6d3e2d74dc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5c20a8aa9c377f339bda7f16e8701070d23e6b4e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c20a8aa9c377f339bda7f16e8701070d23e6b4e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5c20a8aa9c377f339bda7f16e8701070d23e6b4e", "patch": "@@ -1027,28 +1027,45 @@ mod writeback {\n     export resolve_type_vars_in_block;\n \n     fn resolve_type_vars_in_type(&@fn_ctxt fcx, &span sp, ty::t typ) ->\n-       ty::t {\n-        if (!ty::type_contains_vars(fcx.ccx.tcx, typ)) { ret typ; }\n+        option::t[ty::t] {\n+        if (!ty::type_contains_vars(fcx.ccx.tcx, typ)) { ret some(typ); }\n         alt (ty::unify::fixup_vars(fcx.ccx.tcx, fcx.var_bindings, typ)) {\n-            case (fix_ok(?new_type)) { ret new_type; }\n+            case (fix_ok(?new_type)) { ret some(new_type); }\n             case (fix_err(?vid)) {\n-                fcx.ccx.tcx.sess.span_fatal(sp,\n+                fcx.ccx.tcx.sess.span_err(sp,\n                                           \"cannot determine a type \\\n                                            for this expression\");\n+                ret none;\n             }\n         }\n     }\n-    fn resolve_type_vars_for_node(&@fn_ctxt fcx, &span sp, ast::node_id id) {\n+    fn resolve_type_vars_for_node(&@wb_ctxt wbcx,\n+                                  &span sp, ast::node_id id) {\n+        auto fcx = wbcx.fcx;\n         auto tpot = ty::node_id_to_ty_param_substs_opt_and_ty\n             (fcx.ccx.tcx, id);\n-        auto new_ty = resolve_type_vars_in_type(fcx, sp, tpot._1);\n+        auto new_ty = alt (resolve_type_vars_in_type(fcx, sp, tpot._1)) {\n+            case (some(?t)) { t }\n+            case (none) {\n+                wbcx.success = false;\n+                ret\n+            }\n+        };\n         auto new_substs_opt;\n         alt (tpot._0) {\n             case (none[vec[ty::t]]) { new_substs_opt = none[vec[ty::t]]; }\n             case (some[vec[ty::t]](?substs)) {\n                 let vec[ty::t] new_substs = [];\n                 for (ty::t subst in substs) {\n-                    new_substs += [resolve_type_vars_in_type(fcx, sp, subst)];\n+                    alt (resolve_type_vars_in_type(fcx, sp, subst)) {\n+                        case (some(?t)) {\n+                            new_substs += [t];\n+                        }\n+                        case (none) {\n+                            wbcx.success = false;\n+                            ret;\n+                        }\n+                    }\n                 }\n                 new_substs_opt = some[vec[ty::t]](new_substs);\n             }\n@@ -1058,19 +1075,20 @@ mod writeback {\n \n     type wb_ctxt = rec(@fn_ctxt fcx,\n                        // A flag to ignore contained items and lambdas\n-                       mutable bool ignore);\n+                       mutable bool ignore,\n+                       mutable bool success);\n \n     fn visit_stmt_pre(@wb_ctxt wbcx, &@ast::stmt s) {\n-        resolve_type_vars_for_node(wbcx.fcx, s.span, ty::stmt_node_id(s));\n+        resolve_type_vars_for_node(wbcx, s.span, ty::stmt_node_id(s));\n     }\n     fn visit_expr_pre(@wb_ctxt wbcx, &@ast::expr e) {\n-        resolve_type_vars_for_node(wbcx.fcx, e.span, e.id);\n+        resolve_type_vars_for_node(wbcx, e.span, e.id);\n     }\n     fn visit_block_pre(@wb_ctxt wbcx, &ast::block b) {\n-        resolve_type_vars_for_node(wbcx.fcx, b.span, b.node.id);\n+        resolve_type_vars_for_node(wbcx, b.span, b.node.id);\n     }\n     fn visit_pat_pre(@wb_ctxt wbcx, &@ast::pat p) {\n-        resolve_type_vars_for_node(wbcx.fcx, p.span, p.id);\n+        resolve_type_vars_for_node(wbcx, p.span, p.id);\n     }\n     fn visit_local_pre(@wb_ctxt wbcx, &@ast::local l) {\n         auto var_id = lookup_local(wbcx.fcx, l.span, l.node.id);\n@@ -1105,11 +1123,12 @@ mod writeback {\n                      &ast::fn_ident i, ast::node_id d) {\n         wbcx.ignore = false;\n     }\n-    fn keep_going(@wb_ctxt wbcx) -> bool { ret !wbcx.ignore; }\n+    fn keep_going(@wb_ctxt wbcx) -> bool { !wbcx.ignore && wbcx.success }\n \n-    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block block) {\n+    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block block) -> bool {\n         auto wbcx = @rec(fcx = fcx,\n-                        mutable ignore = false);\n+                         mutable ignore = false,\n+                         mutable success = true);\n         auto visit =\n             rec(keep_going=bind keep_going(wbcx),\n                 visit_item_pre=bind visit_item_pre(wbcx, _),\n@@ -1123,6 +1142,7 @@ mod writeback {\n                 visit_local_pre=bind visit_local_pre(wbcx, _)\n                 with walk::default_visitor());\n         walk::walk_block(visit, block);\n+        ret wbcx.success;\n     }\n }\n \n@@ -2482,9 +2502,9 @@ fn check_fn(&@crate_ctxt ccx, &ast::fn_decl decl, ast::proto proto,\n         case (_) { }\n     }\n \n-    writeback::resolve_type_vars_in_block(fcx, body);\n+    auto success = writeback::resolve_type_vars_in_block(fcx, body);\n \n-    if (option::is_some(body.node.expr)) {\n+    if (success && option::is_some(body.node.expr)) {\n         auto tail_expr = option::get(body.node.expr);\n         auto tail_expr_ty = expr_ty(ccx.tcx, tail_expr);\n         // Have to exclude ty_nil to allow functions to end in"}]}