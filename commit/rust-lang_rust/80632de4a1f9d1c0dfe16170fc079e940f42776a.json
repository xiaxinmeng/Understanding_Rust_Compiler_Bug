{"sha": "80632de4a1f9d1c0dfe16170fc079e940f42776a", "node_id": "C_kwDOAAsO6NoAKDgwNjMyZGU0YTFmOWQxYzBkZmUxNjE3MGZjMDc5ZTk0MGY0Mjc3NmE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-08T03:12:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:20:01Z"}, "message": "Address review comments.", "tree": {"sha": "9493f3787491e99a10f0a3d86f98d75c4e9a1a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9493f3787491e99a10f0a3d86f98d75c4e9a1a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80632de4a1f9d1c0dfe16170fc079e940f42776a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80632de4a1f9d1c0dfe16170fc079e940f42776a", "html_url": "https://github.com/rust-lang/rust/commit/80632de4a1f9d1c0dfe16170fc079e940f42776a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80632de4a1f9d1c0dfe16170fc079e940f42776a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a95fb8b150a256856aedeca7ebf30b662d2e5141", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95fb8b150a256856aedeca7ebf30b662d2e5141", "html_url": "https://github.com/rust-lang/rust/commit/a95fb8b150a256856aedeca7ebf30b662d2e5141"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "c79a5ebf0933bbfba4b73418256b1964f5fb6302", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80632de4a1f9d1c0dfe16170fc079e940f42776a/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80632de4a1f9d1c0dfe16170fc079e940f42776a/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=80632de4a1f9d1c0dfe16170fc079e940f42776a", "patch": "@@ -62,17 +62,13 @@ impl<'a, T> PartialEq for Interned<'a, T> {\n \n impl<'a, T> Eq for Interned<'a, T> {}\n \n-impl<'a, T: PartialOrd> PartialOrd for Interned<'a, T> {\n+// In practice you can't intern any `T` that doesn't implement `Eq`, because\n+// that's needed for hashing. Therefore, we won't be interning any `T` that\n+// implements `PartialOrd` without also implementing `Ord`. So we can have the\n+// bound `T: Ord` here and avoid duplication with the `Ord` impl below.\n+impl<'a, T: Ord> PartialOrd for Interned<'a, T> {\n     fn partial_cmp(&self, other: &Interned<'a, T>) -> Option<Ordering> {\n-        // Pointer equality implies equality, due to the uniqueness constraint,\n-        // but the contents must be compared otherwise.\n-        if ptr::eq(self.0, other.0) {\n-            Some(Ordering::Equal)\n-        } else {\n-            let res = self.0.partial_cmp(&other.0);\n-            debug_assert!(res != Some(Ordering::Equal));\n-            res\n-        }\n+        Some(self.cmp(other))\n     }\n }\n \n@@ -84,7 +80,7 @@ impl<'a, T: Ord> Ord for Interned<'a, T> {\n             Ordering::Equal\n         } else {\n             let res = self.0.cmp(&other.0);\n-            debug_assert!(res != Ordering::Equal);\n+            debug_assert_ne!(res, Ordering::Equal);\n             res\n         }\n     }"}]}