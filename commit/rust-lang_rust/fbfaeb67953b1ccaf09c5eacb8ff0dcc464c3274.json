{"sha": "fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "node_id": "C_kwDOAAsO6NoAKGZiZmFlYjY3OTUzYjFjY2FmMDljNWVhY2I4ZmYwZGNjNDY0YzMyNzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T06:28:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T06:28:54Z"}, "message": "Rollup merge of #106274 - jyn514:dump-mono-stats, r=lqd\n\nAdd JSON output to -Zdump-mono-stats\n\nFollow-up to https://github.com/rust-lang/rust/pull/105481\n\nr? `@lqd` cc `@wesleywiser`", "tree": {"sha": "121d648c712a33ff9d7973a595d71c345a9de5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/121d648c712a33ff9d7973a595d71c345a9de5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtRymCRBK7hj4Ov3rIwAAVfwIADiH2hyctCl465/KOhDMkWVF\nBrc2viBQimxa/8FHF0e0iOuZJmiCyhlugemWRagtCHSXtyqX8eu2w8H08K0PzwxR\ntawtD46xQKkG5I+r5+EYr6kN86z0DhTHzTQKnnSG8FL2Lf304/+PdUIJy72BIHT0\njfZehXj+gi9Dm99JTcz3ABqG9li4DlHriWddrau4mOVBWti3ettxBG1lfT0hgpGB\nIa7EqS6fFe9CCxJKxFgMHuPNyar27nxCV7QKnkjxb5WDgiGc6WscDmbbjFhAA7+z\neJO7LZQWQf2LZWRwHlUJ2L9UhNFPIpe3EtTYMI1bijy86YNIru7GlQzjyzRjXT8=\n=HDaV\n-----END PGP SIGNATURE-----\n", "payload": "tree 121d648c712a33ff9d7973a595d71c345a9de5d7\nparent 70468af5916cd13240e3c852f0921c7f325ec421\nparent 5c79624bfaf28540b739f33ffe9d2d1f132555d2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672813734 +0100\ncommitter GitHub <noreply@github.com> 1672813734 +0100\n\nRollup merge of #106274 - jyn514:dump-mono-stats, r=lqd\n\nAdd JSON output to -Zdump-mono-stats\n\nFollow-up to https://github.com/rust-lang/rust/pull/105481\n\nr? `@lqd` cc `@wesleywiser`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "html_url": "https://github.com/rust-lang/rust/commit/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70468af5916cd13240e3c852f0921c7f325ec421", "url": "https://api.github.com/repos/rust-lang/rust/commits/70468af5916cd13240e3c852f0921c7f325ec421", "html_url": "https://github.com/rust-lang/rust/commit/70468af5916cd13240e3c852f0921c7f325ec421"}, {"sha": "5c79624bfaf28540b739f33ffe9d2d1f132555d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c79624bfaf28540b739f33ffe9d2d1f132555d2", "html_url": "https://github.com/rust-lang/rust/commit/5c79624bfaf28540b739f33ffe9d2d1f132555d2"}], "stats": {"total": 137, "additions": 111, "deletions": 26}, "files": [{"sha": "46b0a01a18ec513ab746b832684d1f91d0210217", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -4243,6 +4243,8 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serde\",\n+ \"serde_json\",\n  \"smallvec\",\n  \"tracing\",\n ]"}, {"sha": "9ec71c6b87edf6bb2f27c6b42a831ca5c0291cf1", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -3,17 +3,16 @@ use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n-use rustc_session::config::InstrumentCoverage;\n-use rustc_session::config::Strip;\n+use rustc_session::config::rustc_optgroups;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n-use rustc_session::config::{\n-    rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n-};\n use rustc_session::config::{\n     BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n     ProcMacroExecutionStrategy, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n+use rustc_session::config::{DumpMonoStatsFormat, MirSpanview};\n+use rustc_session::config::{ErrorOutputType, ExternLocation, LocationDetail, Options, Strip};\n+use rustc_session::config::{InstrumentCoverage, Passes};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n@@ -647,6 +646,9 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(dump_mir_dir, String::from(\"abc\"));\n     untracked!(dump_mir_exclude_pass_number, true);\n     untracked!(dump_mir_graphviz, true);\n+    untracked!(dump_mir_spanview, Some(MirSpanview::Statement));\n+    untracked!(dump_mono_stats, SwitchWithOptPath::Enabled(Some(\"mono-items-dir/\".into())));\n+    untracked!(dump_mono_stats_format, DumpMonoStatsFormat::Json);\n     untracked!(dylib_lto, true);\n     untracked!(emit_stack_sizes, true);\n     untracked!(future_incompat_test, true);"}, {"sha": "c8af10576b42fcf4526aafc92e2985774d9d2680", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -6,6 +6,8 @@ edition = \"2021\"\n [lib]\n \n [dependencies]\n+serde = \"1\"\n+serde_json = \"1\"\n smallvec = { version = \"1.8.1\", features = [ \"union\", \"may_dangle\" ] }\n tracing = \"0.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "97fbb458e792a1d5b315c2f4bdc0c43d829cb16b", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -102,14 +102,14 @@ use std::path::{Path, PathBuf};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n-use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::def_id::{DefIdSet, LOCAL_CRATE};\n use rustc_middle::mir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::SwitchWithOptPath;\n+use rustc_session::config::{DumpMonoStatsFormat, SwitchWithOptPath};\n use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n@@ -417,7 +417,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     // Output monomorphization stats per def_id\n     if let SwitchWithOptPath::Enabled(ref path) = tcx.sess.opts.unstable_opts.dump_mono_stats {\n         if let Err(err) =\n-            dump_mono_items_stats(tcx, &codegen_units, path, tcx.sess.opts.crate_name.as_deref())\n+            dump_mono_items_stats(tcx, &codegen_units, path, tcx.crate_name(LOCAL_CRATE))\n         {\n             tcx.sess.emit_fatal(CouldntDumpMonoStats { error: err.to_string() });\n         }\n@@ -483,7 +483,7 @@ fn dump_mono_items_stats<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     codegen_units: &[CodegenUnit<'tcx>],\n     output_directory: &Option<PathBuf>,\n-    crate_name: Option<&str>,\n+    crate_name: Symbol,\n ) -> Result<(), Box<dyn std::error::Error>> {\n     let output_directory = if let Some(ref directory) = output_directory {\n         fs::create_dir_all(directory)?;\n@@ -492,9 +492,11 @@ fn dump_mono_items_stats<'tcx>(\n         Path::new(\".\")\n     };\n \n-    let filename = format!(\"{}.mono_items.md\", crate_name.unwrap_or(\"unknown-crate\"));\n+    let format = tcx.sess.opts.unstable_opts.dump_mono_stats_format;\n+    let ext = format.extension();\n+    let filename = format!(\"{crate_name}.mono_items.{ext}\");\n     let output_path = output_directory.join(&filename);\n-    let file = File::create(output_path)?;\n+    let file = File::create(&output_path)?;\n     let mut file = BufWriter::new(file);\n \n     // Gather instantiated mono items grouped by def_id\n@@ -508,30 +510,44 @@ fn dump_mono_items_stats<'tcx>(\n         }\n     }\n \n+    #[derive(serde::Serialize)]\n+    struct MonoItem {\n+        name: String,\n+        instantiation_count: usize,\n+        size_estimate: usize,\n+        total_estimate: usize,\n+    }\n+\n     // Output stats sorted by total instantiated size, from heaviest to lightest\n     let mut stats: Vec<_> = items_per_def_id\n         .into_iter()\n         .map(|(def_id, items)| {\n+            let name = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n             let instantiation_count = items.len();\n             let size_estimate = items[0].size_estimate(tcx);\n             let total_estimate = instantiation_count * size_estimate;\n-            (def_id, instantiation_count, size_estimate, total_estimate)\n+            MonoItem { name, instantiation_count, size_estimate, total_estimate }\n         })\n         .collect();\n-    stats.sort_unstable_by_key(|(_, _, _, total_estimate)| cmp::Reverse(*total_estimate));\n+    stats.sort_unstable_by_key(|item| cmp::Reverse(item.total_estimate));\n \n     if !stats.is_empty() {\n-        writeln!(\n-            file,\n-            \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n-        )?;\n-        writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n-        for (def_id, instantiation_count, size_estimate, total_estimate) in stats {\n-            let item = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n-            writeln!(\n-                file,\n-                \"| {item} | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n-            )?;\n+        match format {\n+            DumpMonoStatsFormat::Json => serde_json::to_writer(file, &stats)?,\n+            DumpMonoStatsFormat::Markdown => {\n+                writeln!(\n+                    file,\n+                    \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n+                )?;\n+                writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n+\n+                for MonoItem { name, instantiation_count, size_estimate, total_estimate } in stats {\n+                    writeln!(\n+                        file,\n+                        \"| `{name}` | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n+                    )?;\n+                }\n+            }\n         }\n     }\n "}, {"sha": "5f78f6d079d0131c8d3f80b44f1f4fa16ad2b121", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -2981,3 +2981,21 @@ pub enum ProcMacroExecutionStrategy {\n     /// Run the proc-macro code on a different thread.\n     CrossThread,\n }\n+\n+/// Which format to use for `-Z dump-mono-stats`\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum DumpMonoStatsFormat {\n+    /// Pretty-print a markdown table\n+    Markdown,\n+    /// Emit structured JSON\n+    Json,\n+}\n+\n+impl DumpMonoStatsFormat {\n+    pub fn extension(self) -> &'static str {\n+        match self {\n+            Self::Markdown => \"md\",\n+            Self::Json => \"json\",\n+        }\n+    }\n+}"}, {"sha": "b379aef80fb2e8c5e056aeb8c1334d5b123dd830", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -377,6 +377,7 @@ mod desc {\n     pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n     pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n+    pub const parse_dump_mono_stats: &str = \"`markdown` (default) or `json`\";\n     pub const parse_instrument_coverage: &str =\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n@@ -820,6 +821,21 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_dump_mono_stats(slot: &mut DumpMonoStatsFormat, v: Option<&str>) -> bool {\n+        match v {\n+            None => true,\n+            Some(\"json\") => {\n+                *slot = DumpMonoStatsFormat::Json;\n+                true\n+            }\n+            Some(\"markdown\") => {\n+                *slot = DumpMonoStatsFormat::Markdown;\n+                true\n+            }\n+            Some(_) => false,\n+        }\n+    }\n+\n     pub(crate) fn parse_instrument_coverage(\n         slot: &mut Option<InstrumentCoverage>,\n         v: Option<&str>,\n@@ -1295,7 +1311,9 @@ options! {\n         an additional `.html` file showing the computed coverage spans.\"),\n     dump_mono_stats: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n-        \"output statistics about monomorphization collection (format: markdown)\"),\n+        \"output statistics about monomorphization collection\"),\n+    dump_mono_stats_format: DumpMonoStatsFormat = (DumpMonoStatsFormat::Markdown, parse_dump_mono_stats, [UNTRACKED],\n+        \"the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n     dylib_lto: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "a497a75261fede1f681c1c163b6453ae2289420a", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats-format.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -0,0 +1,6 @@\n+# `dump-mono-stats-format`\n+\n+--------------------\n+\n+The `-Z dump-mono-stats-format` compiler flag controls what file format to use for `-Z dump-mono-stats`.\n+The default is markdown; currently JSON is also supported. JSON can be useful for programatically manipulating the results (e.g. to find the item that took the longest to compile)."}, {"sha": "4c8bc8b457898e59c693170a1e75c7846393256c", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -0,0 +1,14 @@\n+# `dump-mono-stats`\n+\n+--------------------\n+\n+The `-Z dump-mono-stats` compiler flag generates a file with a list of the monomorphized items in the current crate.\n+It is useful for investigating compile times.\n+\n+It accepts an optional directory where the file will be located. If no directory is specified, the file will be placed in the current directory.\n+\n+See also `-Z dump-mono-stats-format` and `-Z print-mono-items`. Unlike `print-mono-items`,\n+`dump-mono-stats` aggregates monomorphized items by definition and includes a size estimate of how\n+large the item is when codegened.\n+\n+See <https://rustc-dev-guide.rust-lang.org/backend/monomorph.html> for an overview of monomorphized items."}, {"sha": "fe1112fb0a4a8463827cb7cb2e3e9ebbf30cc80b", "filename": "src/test/run-make/dump-mono-stats/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -0,0 +1,5 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-type lib foo.rs -Z dump-mono-stats=$(TMPDIR) -Zdump-mono-stats-format=json\n+\tcat $(TMPDIR)/foo.mono_items.json | $(CGREP) '\"name\":\"bar\"'"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/dump-mono-stats/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "9bd6c5fedf5427b897bd35129697795b0f236056", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=fbfaeb67953b1ccaf09c5eacb8ff0dcc464c3274", "patch": "@@ -35,7 +35,8 @@\n     -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n     -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n-    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection (format: markdown)\n+    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection\n+    -Z                  dump-mono-stats-format=val -- the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n     -Z                               dylib-lto=val -- enables LTO for dylib crate type\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)"}]}