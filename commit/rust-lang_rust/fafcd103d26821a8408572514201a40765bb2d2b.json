{"sha": "fafcd103d26821a8408572514201a40765bb2d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZmNkMTAzZDI2ODIxYTg0MDg1NzI1MTQyMDFhNDA3NjViYjJkMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T16:18:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T16:18:52Z"}, "message": "remove Cancelable from ids", "tree": {"sha": "dfeae99da99f6f9b2d91d31f84c0a3b527cfffbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfeae99da99f6f9b2d91d31f84c0a3b527cfffbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafcd103d26821a8408572514201a40765bb2d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafcd103d26821a8408572514201a40765bb2d2b", "html_url": "https://github.com/rust-lang/rust/commit/fafcd103d26821a8408572514201a40765bb2d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafcd103d26821a8408572514201a40765bb2d2b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490112dea10d476e9b5829499bc6670f03f7d138", "url": "https://api.github.com/repos/rust-lang/rust/commits/490112dea10d476e9b5829499bc6670f03f7d138", "html_url": "https://github.com/rust-lang/rust/commit/490112dea10d476e9b5829499bc6670f03f7d138"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "66d7e1713f192680b1491f34b32c3d6c9ebd4230", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -2,7 +2,6 @@ mod scope;\n \n use std::sync::Arc;\n \n-use ra_db::Cancelable;\n use ra_syntax::{TreeArc, ast::{self, NameOwner}};\n \n use crate::{\n@@ -24,12 +23,12 @@ impl Function {\n         db.body_hir(self.def_id)\n     }\n \n-    pub(crate) fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub(crate) fn module(&self, db: &impl HirDatabase) -> Module {\n         self.def_id.module(db)\n     }\n \n     /// The containing impl block, if this is a method.\n-    pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n+    pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Option<ImplBlock> {\n         self.def_id.impl_block(db)\n     }\n }"}, {"sha": "161a5e7148c7b2cfe8c2788f9a176d261c762f0f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -97,7 +97,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn crate::module_tree::ModuleTree::module_tree_query;\n     }\n \n-    fn impls_in_module(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<ModuleImplBlocks>> {\n+    fn impls_in_module(source_root_id: SourceRootId, module_id: ModuleId) -> Arc<ModuleImplBlocks> {\n         type ImplsInModuleQuery;\n         use fn crate::impl_block::impls_in_module;\n     }"}, {"sha": "0d8e675476133494af71f470279ed3aa72490934", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -1,4 +1,4 @@\n-use ra_db::{SourceRootId, LocationIntener, Cancelable, FileId};\n+use ra_db::{SourceRootId, LocationIntener, FileId};\n use ra_syntax::{TreeArc, SyntaxKind, SyntaxNode, SourceFile, AstNode, ast};\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n@@ -205,25 +205,21 @@ impl DefId {\n     }\n \n     /// For a module, returns that module; for any other def, returns the containing module.\n-    pub fn module(self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n         let loc = self.loc(db);\n-        Ok(Module::from_module_id(\n-            db,\n-            loc.source_root_id,\n-            loc.module_id,\n-        ))\n+        Module::from_module_id(db, loc.source_root_id, loc.module_id)\n     }\n \n     /// Returns the containing crate.\n-    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        Ok(self.module(db)?.krate(db))\n+    pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n+        self.module(db).krate(db)\n     }\n \n     /// Returns the containing impl block, if this is an impl item.\n-    pub fn impl_block(self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n+    pub fn impl_block(self, db: &impl HirDatabase) -> Option<ImplBlock> {\n         let loc = self.loc(db);\n-        let module_impls = db.impls_in_module(loc.source_root_id, loc.module_id)?;\n-        Ok(ImplBlock::containing(module_impls, self))\n+        let module_impls = db.impls_in_module(loc.source_root_id, loc.module_id);\n+        ImplBlock::containing(module_impls, self)\n     }\n }\n "}, {"sha": "ab996a12c56c0623d7a22b8d0046d2e7fb0a317c", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -3,7 +3,7 @@ use rustc_hash::FxHashMap;\n \n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::ast::{self, AstNode};\n-use ra_db::{LocationIntener, Cancelable, SourceRootId};\n+use ra_db::{LocationIntener, SourceRootId};\n \n use crate::{\n     DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n@@ -166,7 +166,7 @@ impl ModuleImplBlocks {\n         }\n     }\n \n-    fn collect(&mut self, db: &impl HirDatabase, module: Module) -> Cancelable<()> {\n+    fn collect(&mut self, db: &impl HirDatabase, module: Module) {\n         let (file_id, module_source) = module.definition_source(db);\n         let node = match &module_source {\n             ModuleSource::SourceFile(node) => node.syntax(),\n@@ -185,18 +185,16 @@ impl ModuleImplBlocks {\n                 self.impls_by_def.insert(impl_item.def_id(), id);\n             }\n         }\n-\n-        Ok(())\n     }\n }\n \n pub(crate) fn impls_in_module(\n     db: &impl HirDatabase,\n     source_root_id: SourceRootId,\n     module_id: ModuleId,\n-) -> Cancelable<Arc<ModuleImplBlocks>> {\n+) -> Arc<ModuleImplBlocks> {\n     let mut result = ModuleImplBlocks::new();\n     let module = Module::from_module_id(db, source_root_id, module_id);\n-    result.collect(db, module)?;\n-    Ok(Arc::new(result))\n+    result.collect(db, module);\n+    Arc::new(result)\n }"}, {"sha": "e5f8ffc2e358a373e8e2f81075c50f63e2d32c72", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -447,8 +447,8 @@ impl fmt::Display for Ty {\n /// function body.\n fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n     let signature = f.signature(db);\n-    let module = f.module(db)?;\n-    let impl_block = f.impl_block(db)?;\n+    let module = f.module(db);\n+    let impl_block = f.impl_block(db);\n     // TODO we ignore type parameters for now\n     let input = signature\n         .params()\n@@ -517,8 +517,8 @@ pub(super) fn type_for_field(\n             def_id\n         ),\n     };\n-    let module = def_id.module(db)?;\n-    let impl_block = def_id.impl_block(db)?;\n+    let module = def_id.module(db);\n+    let impl_block = def_id.impl_block(db);\n     let type_ref = ctry!(variant_data.get_field_type_ref(&field));\n     Ok(Some(Ty::from_hir(\n         db,\n@@ -1207,8 +1207,8 @@ pub fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceRe\n     let function = Function::new(def_id); // TODO: consts also need inference\n     let body = function.body(db);\n     let scopes = db.fn_scopes(def_id);\n-    let module = function.module(db)?;\n-    let impl_block = function.impl_block(db)?;\n+    let module = function.module(db);\n+    let impl_block = function.impl_block(db);\n     let mut ctx = InferenceContext::new(db, body, scopes, module, impl_block);\n \n     let signature = function.signature(db);"}, {"sha": "94c5124a9dc6a2725de4eae6cc98656338da9784", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafcd103d26821a8408572514201a40765bb2d2b/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=fafcd103d26821a8408572514201a40765bb2d2b", "patch": "@@ -49,14 +49,14 @@ impl CrateImplBlocks {\n             .into_iter()\n             .flat_map(|i| i.iter())\n             .map(move |(module_id, impl_id)| {\n-                let module_impl_blocks = db.impls_in_module(self.source_root_id, *module_id)?;\n+                let module_impl_blocks = db.impls_in_module(self.source_root_id, *module_id);\n                 Ok(ImplBlock::from_id(module_impl_blocks, *impl_id))\n             })\n     }\n \n     fn collect_recursive(&mut self, db: &impl HirDatabase, module: Module) -> Cancelable<()> {\n         let module_id = module.def_id.loc(db).module_id;\n-        let module_impl_blocks = db.impls_in_module(self.source_root_id, module_id)?;\n+        let module_impl_blocks = db.impls_in_module(self.source_root_id, module_id);\n \n         for (impl_id, impl_data) in module_impl_blocks.impls.iter() {\n             let impl_block = ImplBlock::from_id(Arc::clone(&module_impl_blocks), impl_id);\n@@ -100,10 +100,10 @@ impl CrateImplBlocks {\n     }\n }\n \n-fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Cancelable<Option<Crate>> {\n+fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Option<Crate> {\n     match ty {\n         Ty::Adt { def_id, .. } => def_id.krate(db),\n-        _ => Ok(None),\n+        _ => None,\n     }\n }\n \n@@ -139,7 +139,7 @@ impl Ty {\n         // rustc does an autoderef and then autoref again).\n \n         for derefed_ty in self.autoderef(db) {\n-            let krate = match def_crate(db, &derefed_ty)? {\n+            let krate = match def_crate(db, &derefed_ty) {\n                 Some(krate) => krate,\n                 None => continue,\n             };"}]}