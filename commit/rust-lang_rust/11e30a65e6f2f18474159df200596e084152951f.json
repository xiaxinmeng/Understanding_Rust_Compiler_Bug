{"sha": "11e30a65e6f2f18474159df200596e084152951f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTMwYTY1ZTZmMmYxODQ3NDE1OWRmMjAwNTk2ZTA4NDE1Mjk1MWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-21T11:39:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T07:56:21Z"}, "message": "Split up miri into the librustc_mir and bin parts", "tree": {"sha": "bbf46caa3e1eb969dffb64d0c2847207fca62630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf46caa3e1eb969dffb64d0c2847207fca62630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e30a65e6f2f18474159df200596e084152951f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmANCUACgkQpp+NIls6\n19kwVw//aB7fGOB1kUOS6JYaW2OU6CY2L3Dvi2u1V/C8jv5lnYYh7rh9mgIyGQqb\nRtjpZyKwlUDHhHgA/3Z3mhJvGA+xKsnbqibOKYqz92/xhQlmNRyujOoG1iKYE6YC\nh/Cw/QIMFNN7clEcU/DlaEj+sjEZF5AXGjXizKY3Y9sta+cJef99hvHwAo66GtDE\nh6O8ToUIWPYZ2XG/POojgPeYkyH25hqGp7ux7l014W2VzOxB/RIH1D1tHDjGoN+P\nh6irNSmQw053nnjP1H9LZQUOprlxtxlXo0jao2ICjcD2U+I2lJetrdt5mvzGG30g\nRnvnW+qmU3oNCSZlYUMNyz0M0oKkLZGfrhxDsSUDZWlAWKdoawehtma+WbA5haie\nOi5DmtXo57lteT7g7TIqLObelIpn0TSugVZDo38l/BRWfIy7tT/2HXWYyoKctC7G\n8YgE+wnmNwJb3rC/6ALxXpc6HpLNLW8wTOH7WYFS3xaMvI41VowmtFo4IKtE69SR\njfZ/Yt+is8FNc8WegNFa1Fb5ncCCtD7tB65w4VWC4XL3bzEM4DrF6RJ1Svg/xPP6\nCGeNDne0FmxDlHJfmgs2G0pcF4TMzhjhq/YyZId6wh0Zn5E4EAkUmqaFUa0Dh/qw\nZ+/C8JjdKJIIZMLOd25Y5jIEdgD2I3vLmY0e73auHRQ8B5Be54c=\n=6erY\n-----END PGP SIGNATURE-----", "payload": "tree bbf46caa3e1eb969dffb64d0c2847207fca62630\nparent 6d3c88c061d01a5bac016e261785ae39c65caa9d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500637146 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1501574181 +0200\n\nSplit up miri into the librustc_mir and bin parts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e30a65e6f2f18474159df200596e084152951f", "html_url": "https://github.com/rust-lang/rust/commit/11e30a65e6f2f18474159df200596e084152951f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e30a65e6f2f18474159df200596e084152951f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3c88c061d01a5bac016e261785ae39c65caa9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3c88c061d01a5bac016e261785ae39c65caa9d", "html_url": "https://github.com/rust-lang/rust/commit/6d3c88c061d01a5bac016e261785ae39c65caa9d"}], "stats": {"total": 416, "additions": 248, "deletions": 168}, "files": [{"sha": "a52628cdbc3094fdbb614a3801cb03dc6247eb1d", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -15,10 +15,10 @@ script:\n   xargo/build.sh\n - |\n   # Test plain miri\n-  cd src/librustc_mir/ && cargo build &&\n+  cd miri/ && cargo build &&\n   cargo test &&\n   cargo install &&\n-  cd ../..\n+  cd ..\n - |\n   # Test cargo miri\n   cd cargo-miri-test &&\n@@ -27,7 +27,7 @@ script:\n   cd ..\n - |\n   # and run all tests with full mir\n-  cd src/librustc_mir/ && MIRI_SYSROOT=~/.xargo/HOST cargo test && cd ../..\n+  cd miri/ && MIRI_SYSROOT=~/.xargo/HOST cargo test && cd ..\n notifications:\n   email:\n     on_success: never"}, {"sha": "bcc8984441c9374809d16546ef0bab0cbcefa2a7", "filename": "Cargo.lock", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,13 +1,10 @@\n [root]\n-name = \"miri\"\n+name = \"rustc_miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"byteorder 1.0.0 (git+https://github.com/BurntSushi/byteorder)\",\n- \"cargo_metadata 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -30,16 +27,16 @@ dependencies = [\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.0.0\"\n-source = \"git+https://github.com/BurntSushi/byteorder#f8e7685b3a81c52f5448fd77fb4e0535bc92f880\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.2.1\"\n+version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -48,7 +45,7 @@ name = \"compiletest_rs\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -62,7 +59,7 @@ name = \"env_logger\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -87,12 +84,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.22\"\n+version = \"0.2.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"log\"\n-version = \"0.3.7\"\n+version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -108,20 +105,33 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"miri\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_miri 0.1.0\",\n ]\n \n [[package]]\n name = \"num-traits\"\n-version = \"0.1.37\"\n+version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -170,22 +180,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.2\"\n+version = \"1.0.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.2\"\n+version = \"1.0.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive_internals\"\n-version = \"0.15.0\"\n+version = \"0.15.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -199,8 +209,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -227,7 +237,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -288,29 +298,29 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n-\"checksum byteorder 1.0.0 (git+https://github.com/BurntSushi/byteorder)\" = \"<none>\"\n-\"checksum cargo_metadata 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d84cb53c78e573aa126a4b9f963fdb2629f8183b26e235da08bb36dc7381162\"\n+\"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n+\"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum compiletest_rs 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"617b23d0ed4f57b3bcff6b5fe0a78f0010f1efb636298317665a960b6dbc0533\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n-\"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n-\"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n+\"checksum libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"30885bcb161cf67054244d10d4a7f4835ffd58773bc72e07d35fecf472295503\"\n+\"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n-\"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n+\"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b46a59dd63931010fdb1d88538513f3279090d88b5c22ef4fe8440cfffcc6e3\"\n-\"checksum serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c06b68790963518008b8ae0152d48be4bbbe77015d2c717f6282eea1824be9a\"\n-\"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n+\"checksum serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"433d7d9f8530d5a939ad5e0e72a6243d2e42a24804f70bf592c679363dcacb2f\"\n+\"checksum serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b707cf0d4cab852084f573058def08879bb467fda89d99052485e7d00edd624\"\n+\"checksum serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37aee4e0da52d801acfbc0cc219eb1eda7142112339726e427926a6f6ee65d3a\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\""}, {"sha": "5081cb1081b716cad95f5cdbddbf2a7ad96ac67f", "filename": "Cargo.toml", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -0,0 +1,37 @@\n+[package]\n+authors = [\"Scott Olson <scott@solson.me>\"]\n+description = \"An experimental interpreter for Rust MIR.\"\n+license = \"MIT/Apache-2.0\"\n+name = \"miri\"\n+repository = \"https://github.com/solson/miri\"\n+version = \"0.1.0\"\n+\n+[[bin]]\n+doc = false\n+name = \"miri\"\n+test = false\n+path = \"miri/bin/miri.rs\"\n+\n+[[bin]]\n+doc = false\n+name = \"cargo-miri\"\n+test = false\n+path = \"miri/bin/cargo-miri.rs\"\n+\n+[lib]\n+test = false\n+path = \"miri/lib.rs\"\n+\n+[dependencies]\n+byteorder = { version = \"1.1\", features = [\"i128\"]}\n+env_logger = \"0.3.3\"\n+log = \"0.3.6\"\n+log_settings = \"0.1.1\"\n+cargo_metadata = \"0.2\"\n+rustc_miri = { path = \"src/librustc_mir\" }\n+\n+[dev-dependencies]\n+compiletest_rs = \"0.2.6\"\n+\n+[workspace]\n+members = [\"src/librustc_mir\"]"}, {"sha": "6eff6650fa9c41b2cab4bb0730a6462f8611a2b4", "filename": "miri/bin/cargo-miri.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/miri%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/miri%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fcargo-miri.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "previous_filename": "src/librustc_mir/interpret/bin/cargo-miri.rs"}, {"sha": "01a4a8656b40fd2c57d69e74d933a02796c6e498", "filename": "miri/bin/miri.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "previous_filename": "src/librustc_mir/interpret/bin/miri.rs"}, {"sha": "28059637507d97b6bccb9984999c2176803f157a", "filename": "miri/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -0,0 +1,3 @@\n+extern crate rustc_miri;\n+\n+pub use rustc_miri::interpret::*;"}, {"sha": "2199e1e0a5862d5890a6b00c4c7fde1dc89fd0e3", "filename": "rustc_tests/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/rustc_tests%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/rustc_tests%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2FCargo.toml?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -4,4 +4,4 @@ version = \"0.1.0\"\n authors = [\"Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>\"]\n \n [dependencies]\n-miri = { path = \"..\" }\n+miri = { path = \"../miri\" }"}, {"sha": "8e734b4807e1cdbcc5c6410b5152e4a99f4708b1", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -2,38 +2,17 @@\n authors = [\"Scott Olson <scott@solson.me>\"]\n description = \"An experimental interpreter for Rust MIR.\"\n license = \"MIT/Apache-2.0\"\n-name = \"miri\"\n+name = \"rustc_miri\"\n repository = \"https://github.com/solson/miri\"\n version = \"0.1.0\"\n \n-[[bin]]\n-doc = false\n-name = \"miri\"\n-path = \"interpret/bin/miri.rs\"\n-test = false\n-\n-[[bin]]\n-doc = false\n-name = \"cargo-miri\"\n-path = \"interpret/bin/cargo-miri.rs\"\n-test = false\n-\n [lib]\n test = false\n-path = \"interpret/mod.rs\"\n-\n-[[test]]\n-name = \"compiletest\"\n-path = \"../../tests/compiletest.rs\"\n+path = \"lib.rs\"\n \n [dependencies]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-env_logger = \"0.3.3\"\n log = \"0.3.6\"\n log_settings = \"0.1.1\"\n-cargo_metadata = \"0.2\"\n-regex = \"0.2.2\"\n lazy_static = \"0.2.8\"\n-\n-[dev-dependencies]\n-compiletest_rs = \"0.2.6\"\n+regex = \"0.2.2\""}, {"sha": "e70327d80403f8aedf03784f35dee76f6e82f8aa", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,10 +1,13 @@\n use rustc::ty::{self, Ty};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n-use error::{EvalResult, EvalError};\n-use eval_context::EvalContext;\n-use value::PrimVal;\n-use memory::{MemoryPointer, PointerArithmetic};\n+use super::{\n+    PrimVal,\n+    EvalContext,\n+    EvalResult,\n+    EvalError,\n+    MemoryPointer, PointerArithmetic,\n+};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn cast_primval(\n@@ -19,7 +22,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             PrimVal::Undef => Ok(PrimVal::Undef),\n             PrimVal::Ptr(ptr) => self.cast_from_ptr(ptr, dest_ty),\n             val @ PrimVal::Bytes(_) => {\n-                use value::PrimValKind::*;\n+                use super::PrimValKind::*;\n                 match src_kind {\n                     F32 => self.cast_from_float(val.to_f32()? as f64, dest_ty),\n                     F64 => self.cast_from_float(val.to_f64()?, dest_ty),"}, {"sha": "130f95aad28884eed4c7e72b138b77079453650c", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -2,17 +2,20 @@ use rustc::traits::Reveal;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use syntax::ast::Mutability;\n \n-use error::{EvalError, EvalResult};\n-use lvalue::{Global, GlobalId, Lvalue};\n-use value::PrimVal;\n+use super::{\n+    EvalError, EvalResult,\n+    Global, GlobalId, Lvalue,\n+    PrimVal,\n+    EvalContext, StackPopCleanup,\n+};\n+\n use rustc_const_math::ConstInt;\n-use eval_context::{EvalContext, StackPopCleanup};\n \n pub fn eval_body_as_primval<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n ) -> EvalResult<'tcx, (PrimVal, Ty<'tcx>)> {\n-    let limits = ::ResourceLimits::default();\n+    let limits = super::ResourceLimits::default();\n     let mut ecx = EvalContext::new(tcx, limits);\n     let cid = GlobalId { instance, promoted: None };\n     if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {"}, {"sha": "a4976d8aec498e5681cc24d6416152a96696621e", "filename": "src/librustc_mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ferror.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -2,7 +2,11 @@ use std::error::Error;\n use std::fmt;\n use rustc::mir;\n use rustc::ty::{FnSig, Ty, layout};\n-use memory::{MemoryPointer, LockInfo, AccessKind, Kind};\n+\n+use super::{\n+    MemoryPointer, Kind, LockInfo, AccessKind\n+};\n+\n use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n \n@@ -101,7 +105,7 @@ pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n \n impl<'tcx> Error for EvalError<'tcx> {\n     fn description(&self) -> &str {\n-        use EvalError::*;\n+        use self::EvalError::*;\n         match *self {\n             FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n@@ -223,7 +227,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n \n impl<'tcx> fmt::Display for EvalError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use EvalError::*;\n+        use self::EvalError::*;\n         match *self {\n             PointerOutOfBounds { ptr, access, allocation_size } => {\n                 write!(f, \"{} at offset {}, outside bounds of allocation {} which has size {}\","}, {"sha": "94db6d840a6cfc0edd3c0c0490b6b9e0991a4763", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -16,13 +16,15 @@ use syntax::codemap::{self, DUMMY_SP, Span};\n use syntax::ast::{self, Mutability};\n use syntax::abi::Abi;\n \n-use error::{EvalError, EvalResult};\n-use lvalue::{Global, GlobalId, Lvalue, LvalueExtra};\n-use memory::{Memory, MemoryPointer, TlsKey, HasMemory};\n-use memory::Kind as MemoryKind;\n-use operator;\n-use value::{PrimVal, PrimValKind, Value, Pointer};\n-use validation::ValidationQuery;\n+use super::{\n+    EvalError, EvalResult,\n+    Global, GlobalId, Lvalue, LvalueExtra,\n+    Memory, MemoryPointer, TlsKey, HasMemory,\n+    Kind as MemoryKind,\n+    operator,\n+    PrimVal, PrimValKind, Value, Pointer,\n+    ValidationQuery,\n+};\n \n pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc."}, {"sha": "9a8608ac5b14a5bacb25cf9cfb4c8ed485274dc4", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -4,10 +4,12 @@ use rustc::ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::ast::Mutability;\n \n-use error::{EvalError, EvalResult};\n-use eval_context::EvalContext;\n-use memory::MemoryPointer;\n-use value::{PrimVal, Pointer, Value};\n+use super::{\n+    EvalError, EvalResult,\n+    EvalContext,\n+    MemoryPointer,\n+    PrimVal, Value, Pointer,\n+};\n \n #[derive(Copy, Clone, Debug)]\n pub enum Lvalue<'tcx> {"}, {"sha": "5d96e9f64f9480ac6f42a3993e775142aa5fc977", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -8,9 +8,11 @@ use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n use rustc::middle::region::CodeExtent;\n \n-use error::{EvalError, EvalResult};\n-use value::{PrimVal, Pointer};\n-use eval_context::{EvalContext, DynamicLifetime};\n+use super::{\n+    EvalError, EvalResult,\n+    PrimVal, Pointer,\n+    EvalContext, DynamicLifetime,\n+};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Locks"}, {"sha": "ff7f3cceef4eda4f79dff21c531dfcd04c9346b1", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,25 +1,3 @@\n-#![feature(\n-    i128_type,\n-    rustc_private,\n-    conservative_impl_trait,\n-)]\n-\n-// From rustc.\n-#[macro_use]\n-extern crate log;\n-extern crate log_settings;\n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_const_math;\n-extern crate rustc_data_structures;\n-extern crate syntax;\n-\n-// From crates.io.\n-extern crate byteorder;\n-#[macro_use]\n-extern crate lazy_static;\n-extern crate regex;\n-\n mod cast;\n mod const_eval;\n mod error;\n@@ -33,37 +11,54 @@ mod terminator;\n mod traits;\n mod value;\n \n-pub use error::{\n+pub use self::error::{\n     EvalError,\n     EvalResult,\n };\n \n-pub use eval_context::{\n+pub use self::eval_context::{\n     EvalContext,\n     Frame,\n     ResourceLimits,\n     StackPopCleanup,\n     eval_main,\n+    DynamicLifetime,\n+    TyAndPacked,\n };\n \n-pub use lvalue::{\n+pub use self::lvalue::{\n     Lvalue,\n     LvalueExtra,\n+    Global,\n+    GlobalId,\n };\n \n-pub use memory::{\n+pub use self::memory::{\n     AllocId,\n     Memory,\n     MemoryPointer,\n+    Kind,\n+    TlsKey,\n };\n \n-pub use value::{\n+use self::memory::{\n+    HasMemory,\n+    PointerArithmetic,\n+    LockInfo,\n+    AccessKind,\n+};\n+\n+pub use self::value::{\n     PrimVal,\n     PrimValKind,\n     Value,\n     Pointer,\n };\n \n-pub use const_eval::{\n+pub use self::const_eval::{\n     eval_body_as_integer,\n };\n+\n+pub use self::validation::{\n+    ValidationQuery,\n+};"}, {"sha": "21a2bbd4616f614e34f239849f86fc3be7575462", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,11 +1,14 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n \n-use error::{EvalError, EvalResult};\n-use eval_context::EvalContext;\n-use memory::MemoryPointer;\n-use lvalue::Lvalue;\n-use value::{\n+use super::{\n+    EvalError, EvalResult,\n+    EvalContext,\n+    MemoryPointer,\n+    Lvalue,\n+};\n+\n+use super::value::{\n     PrimVal,\n     PrimValKind,\n     Value,\n@@ -72,7 +75,7 @@ macro_rules! int_arithmetic {\n     ($kind:expr, $int_op:ident, $l:expr, $r:expr) => ({\n         let l = $l;\n         let r = $r;\n-        use value::PrimValKind::*;\n+        use super::PrimValKind::*;\n         match $kind {\n             I8  => overflow!($int_op, l as i8,  r as i8),\n             I16 => overflow!($int_op, l as i16, r as i16),\n@@ -142,7 +145,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         right_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, (PrimVal, bool)> {\n         use rustc::mir::BinOp::*;\n-        use value::PrimValKind::*;\n+        use super::PrimValKind::*;\n \n         let left_kind  = self.ty_to_primval_kind(left_ty)?;\n         let right_kind = self.ty_to_primval_kind(right_ty)?;\n@@ -344,7 +347,7 @@ pub fn unary_op<'tcx>(\n     val_kind: PrimValKind,\n ) -> EvalResult<'tcx, PrimVal> {\n     use rustc::mir::UnOp::*;\n-    use value::PrimValKind::*;\n+    use super::PrimValKind::*;\n \n     let bytes = val.to_bytes()?;\n "}, {"sha": "1b4a21c433982f034af73d11bc79b319875d7434", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -11,15 +11,17 @@ use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n \n+use super::{\n+    EvalResult, EvalError,\n+    EvalContext, StackPopCleanup, TyAndPacked,\n+    Global, GlobalId, Lvalue,\n+    Value, PrimVal,\n+    HasMemory,\n+};\n+\n use syntax::codemap::Span;\n use syntax::ast::Mutability;\n \n-use error::{EvalResult, EvalError};\n-use eval_context::{EvalContext, StackPopCleanup, TyAndPacked};\n-use lvalue::{Global, GlobalId, Lvalue};\n-use value::{Value, PrimVal};\n-use memory::HasMemory;\n-\n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn inc_step_counter_and_check_limit(&mut self, n: u64) -> EvalResult<'tcx> {\n         self.steps_remaining = self.steps_remaining.saturating_sub(n);"}, {"sha": "c0005c351d69b594f234929c1479ab4b8b33d174", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -2,11 +2,12 @@ use rustc::mir;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n \n-use error::EvalResult;\n-use eval_context::{EvalContext, StackPopCleanup};\n-use lvalue::{Lvalue, LvalueExtra};\n-use value::PrimVal;\n-use value::Value;\n+use interpret::{\n+    EvalResult,\n+    EvalContext, StackPopCleanup,\n+    Lvalue, LvalueExtra,\n+    PrimVal, Value,\n+};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(crate) fn drop_lvalue(&mut self, lval: Lvalue<'tcx>, instance: ty::Instance<'tcx>, ty: Ty<'tcx>, span: Span) -> EvalResult<'tcx> {"}, {"sha": "69afb0ef78a90ca3901383af9277ba63f9cdf13e", "filename": "src/librustc_mir/interpret/terminator/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fintrinsic.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -4,11 +4,13 @@ use rustc::ty::layout::{Layout, Size, Align};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n \n-use error::{EvalError, EvalResult};\n-use eval_context::EvalContext;\n-use lvalue::{Lvalue, LvalueExtra};\n-use value::{PrimVal, PrimValKind, Value, Pointer};\n-use memory::HasMemory;\n+use interpret::{\n+    EvalError, EvalResult,\n+    EvalContext,\n+    Lvalue, LvalueExtra,\n+    PrimVal, PrimValKind, Value, Pointer,\n+    HasMemory,\n+};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn call_intrinsic(\n@@ -584,7 +586,7 @@ fn numeric_intrinsic<'tcx>(\n ) -> EvalResult<'tcx, PrimVal> {\n     macro_rules! integer_intrinsic {\n         ($method:ident) => ({\n-            use value::PrimValKind::*;\n+            use interpret::PrimValKind::*;\n             let result_bytes = match kind {\n                 I8 => (bytes as i8).$method() as u128,\n                 U8 => (bytes as u8).$method() as u128,"}, {"sha": "e908365d26f122d016aa51f634d79f6ba4ea5ce0", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -6,13 +6,18 @@ use syntax::codemap::Span;\n use syntax::attr;\n use syntax::abi::Abi;\n \n-use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, IntegerExt, StackPopCleanup, TyAndPacked, is_inhabited, self};\n-use lvalue::Lvalue;\n-use memory::{MemoryPointer, TlsKey, Kind, HasMemory};\n-use value::{PrimVal, Value};\n+use super::{\n+    EvalError, EvalResult,\n+    EvalContext, StackPopCleanup, eval_context, TyAndPacked,\n+    Lvalue, GlobalId,\n+    MemoryPointer, TlsKey, Kind,\n+    PrimVal, Value,\n+    const_eval,\n+    HasMemory,\n+};\n+use super::eval_context::IntegerExt;\n+\n use rustc_data_structures::indexed_vec::Idx;\n-use const_eval;\n \n use std::mem;\n \n@@ -221,7 +226,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => return Err(EvalError::Unreachable),\n                 };\n                 let ty = sig.output();\n-                if !is_inhabited(self.tcx, ty) {\n+                if !eval_context::is_inhabited(self.tcx, ty) {\n                     return Err(EvalError::Unreachable);\n                 }\n                 let layout = self.type_layout(ty)?;\n@@ -867,7 +872,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n                     if let Ok(instance) = self.resolve_path(path) {\n-                        use lvalue::GlobalId;\n                         let cid = GlobalId { instance, promoted: None };\n                         // compute global if not cached\n                         let val = match self.globals.get(&cid).map(|glob| glob.value) {"}, {"sha": "f83baafdd98048ecf25bb10b0b685459be19708d", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,16 +1,16 @@\n use rustc::traits::{self, Reveal};\n-\n-use eval_context::{EvalContext, self};\n-use memory::{MemoryPointer, Kind};\n-use value::{Value, PrimVal};\n-\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n use syntax::codemap::DUMMY_SP;\n use syntax::ast::{self, Mutability};\n \n-use error::{EvalResult, EvalError};\n+use super::{\n+    EvalResult, EvalError,\n+    EvalContext, eval_context,\n+    MemoryPointer, Kind,\n+    Value, PrimVal,\n+};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n "}, {"sha": "b4a23d3241b455becacdcd54ac4d786a6faecc16", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -10,11 +10,13 @@ use rustc::traits::Reveal;\n use rustc::infer::TransNormalize;\n use rustc::middle::region::CodeExtent;\n \n-use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, DynamicLifetime};\n-use memory::{AccessKind, LockInfo};\n-use value::{PrimVal, Value};\n-use lvalue::{Lvalue, LvalueExtra};\n+use super::{\n+    EvalError, EvalResult,\n+    EvalContext, DynamicLifetime,\n+    AccessKind, LockInfo,\n+    PrimVal, Value,\n+    Lvalue, LvalueExtra,\n+};\n \n // FIXME remove this once it lands in rustc\n #[derive(Copy, Clone, PartialEq, Eq)]"}, {"sha": "26730dffaddcd27322ce1fae737118ba15597629", "filename": "src/librustc_mir/interpret/value.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -1,10 +1,13 @@\n #![allow(unknown_lints)]\n #![allow(float_cmp)]\n \n-use error::{EvalError, EvalResult};\n-use memory::{Memory, MemoryPointer, HasMemory, PointerArithmetic};\n use rustc::ty::layout::HasDataLayout;\n \n+use super::{\n+    EvalError, EvalResult,\n+    Memory, MemoryPointer, HasMemory, PointerArithmetic\n+};\n+\n pub(super) fn bytes_to_f32(bytes: u128) -> f32 {\n     f32::from_bits(bytes as u32)\n }"}, {"sha": "46a570349f0d6a6cedd5ffe9d3b2fcc10d76a01a", "filename": "src/librustc_mir/lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -0,0 +1,23 @@\n+#![feature(\n+    i128_type,\n+    rustc_private,\n+    conservative_impl_trait,\n+)]\n+\n+// From rustc.\n+#[macro_use]\n+extern crate log;\n+extern crate log_settings;\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_const_math;\n+extern crate rustc_data_structures;\n+extern crate syntax;\n+\n+// From crates.io.\n+extern crate byteorder;\n+#[macro_use]\n+extern crate lazy_static;\n+extern crate regex;\n+\n+pub mod interpret;"}, {"sha": "7b3ad7d8b78a6ddae24e60e6916b27ade91eba72", "filename": "tests/compiletest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e30a65e6f2f18474159df200596e084152951f/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e30a65e6f2f18474159df200596e084152951f/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=11e30a65e6f2f18474159df200596e084152951f", "patch": "@@ -130,16 +130,16 @@ fn run_pass_miri() {\n \n     for &opt in [false, true].iter() {\n         for_all_targets(&sysroot, |target| {\n-            miri_pass(\"../../tests/run-pass\", &target, &host, false, opt);\n+            miri_pass(\"tests/run-pass\", &target, &host, false, opt);\n         });\n-        miri_pass(\"../../tests/run-pass-fullmir\", &host, &host, true, opt);\n+        miri_pass(\"tests/run-pass-fullmir\", &host, &host, true, opt);\n     }\n }\n \n #[test]\n fn run_pass_rustc() {\n-    run_pass(\"../../tests/run-pass\");\n-    run_pass(\"../../tests/run-pass-fullmir\");\n+    run_pass(\"tests/run-pass\");\n+    run_pass(\"tests/run-pass-fullmir\");\n }\n \n #[test]\n@@ -148,7 +148,7 @@ fn compile_fail_miri() {\n     let host = get_host();\n \n     for_all_targets(&sysroot, |target| {\n-        compile_fail(&sysroot, \"../../tests/compile-fail\", &target, &host, false);\n+        compile_fail(&sysroot, \"tests/compile-fail\", &target, &host, false);\n     });\n-    compile_fail(&sysroot, \"../../tests/compile-fail-fullmir\", &host, &host, true);\n+    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n }"}]}