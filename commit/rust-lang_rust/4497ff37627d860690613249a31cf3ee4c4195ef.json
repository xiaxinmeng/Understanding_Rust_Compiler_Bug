{"sha": "4497ff37627d860690613249a31cf3ee4c4195ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTdmZjM3NjI3ZDg2MDY5MDYxMzI0OWEzMWNmM2VlNGM0MTk1ZWY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-05T17:06:26Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Emit feature gate suggestion", "tree": {"sha": "632c96a9ead5264bd33c51fdd0e350f02787e1be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632c96a9ead5264bd33c51fdd0e350f02787e1be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4497ff37627d860690613249a31cf3ee4c4195ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4497ff37627d860690613249a31cf3ee4c4195ef", "html_url": "https://github.com/rust-lang/rust/commit/4497ff37627d860690613249a31cf3ee4c4195ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4497ff37627d860690613249a31cf3ee4c4195ef/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d90652e203aee41ae41b7ad696652e77654766", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d90652e203aee41ae41b7ad696652e77654766", "html_url": "https://github.com/rust-lang/rust/commit/e5d90652e203aee41ae41b7ad696652e77654766"}], "stats": {"total": 115, "additions": 75, "deletions": 40}, "files": [{"sha": "3b9c8ae2d3c507b3a25f1b0df5dd2565f4ae9172", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=4497ff37627d860690613249a31cf3ee4c4195ef", "patch": "@@ -46,7 +46,8 @@ impl_stable_hash_for!(enum mir::BorrowKind {\n \n impl_stable_hash_for!(enum mir::UnsafetyViolationKind {\n     General,\n-    MinConstFn,\n+    GeneralAndConstFn,\n+    GatedConstFnCall,\n     ExternStatic(lint_node_id),\n     BorrowPacked(lint_node_id),\n });"}, {"sha": "09b344cd38d258f2fb72453c88461c116a553594", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4497ff37627d860690613249a31cf3ee4c4195ef", "patch": "@@ -2770,9 +2770,11 @@ impl Location {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n-    /// Right now function calls to `const unsafe fn` are the only permitted unsafe operation in\n-    /// const fn. Also, even `const unsafe fn` need an `unsafe` block to do the allowed operations\n-    MinConstFn,\n+    /// Right now function calls to `const unsafe fn` are only permitted behind a feature gate\n+    /// Also, even `const unsafe fn` need an `unsafe` block to do the allowed operations.\n+    GatedConstFnCall,\n+    /// Permitted in const fn and regular fns\n+    GeneralAndConstFn,\n     ExternStatic(ast::NodeId),\n     BorrowPacked(ast::NodeId),\n }"}, {"sha": "25dbd160d19f4cb95b8e4d0eb6dd619a7d54836f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4497ff37627d860690613249a31cf3ee4c4195ef", "patch": "@@ -23,6 +23,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n use syntax::ast;\n use syntax::symbol::Symbol;\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n \n use std::ops::Bound;\n \n@@ -96,7 +97,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\"call to unsafe function\",\n                         \"consult the function's documentation for information on how to avoid \\\n-                         undefined behavior\", UnsafetyViolationKind::MinConstFn)\n+                         undefined behavior\", UnsafetyViolationKind::GatedConstFnCall)\n                 }\n             }\n         }\n@@ -146,7 +147,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n                             \"initializing a layout restricted type's field with a value outside \\\n                             the valid range is undefined behavior\",\n-                            UnsafetyViolationKind::MinConstFn,\n+                            UnsafetyViolationKind::GeneralAndConstFn,\n                         ),\n                     }\n                 }\n@@ -319,12 +320,21 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             (Safety::Safe, _) => {\n                 for violation in violations {\n                     let mut violation = violation.clone();\n-                    if self.min_const_fn {\n-                        // overwrite unsafety violation in const fn with a single hard error kind\n-                        violation.kind = UnsafetyViolationKind::MinConstFn;\n-                    } else if let UnsafetyViolationKind::MinConstFn = violation.kind {\n-                        // outside of const fns we treat `MinConstFn` and `General` the same\n-                        violation.kind = UnsafetyViolationKind::General;\n+                    match violation.kind {\n+                        UnsafetyViolationKind::GeneralAndConstFn |\n+                        UnsafetyViolationKind::General => {},\n+                        UnsafetyViolationKind::BorrowPacked(_) |\n+                        UnsafetyViolationKind::ExternStatic(_) => if self.min_const_fn {\n+                            // const fns don't need to be backwards compatible and can\n+                            // emit these violations as a hard error instead of a backwards\n+                            // compat lint\n+                            violation.kind = UnsafetyViolationKind::General;\n+                        },\n+                        UnsafetyViolationKind::GatedConstFnCall => {\n+                            // safe code can't call unsafe const fns, this `UnsafetyViolationKind`\n+                            // is only relevant for `Safety::ExplicitUnsafe` in `unsafe const fn`s\n+                            violation.kind = UnsafetyViolationKind::General;\n+                        }\n                     }\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n@@ -344,13 +354,24 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     for violation in violations {\n                         match violation.kind {\n                             // these are allowed\n-                            UnsafetyViolationKind::MinConstFn\n+                            UnsafetyViolationKind::GatedConstFnCall => {\n                                 // if `#![feature(min_const_unsafe_fn)]` is active\n-                                if self.tcx.sess.features_untracked().min_const_unsafe_fn => {},\n-                            _ => {\n+                                if !self.tcx.sess.features_untracked().min_const_unsafe_fn {\n+                                    if !self.violations.contains(&violation) {\n+                                        self.violations.push(violation.clone())\n+                                    }\n+                                }\n+                            }\n+                            // these unsafe things are stable in const fn\n+                            UnsafetyViolationKind::GeneralAndConstFn => {},\n+                            UnsafetyViolationKind::General |\n+                            UnsafetyViolationKind::BorrowPacked(_) |\n+                            UnsafetyViolationKind::ExternStatic(_) => {\n                                 let mut violation = violation.clone();\n-                                // overwrite unsafety violation in const fn with a hard error\n-                                violation.kind = UnsafetyViolationKind::MinConstFn;\n+                                // const fns don't need to be backwards compatible and can\n+                                // emit these violations as a hard error instead of a backwards\n+                                // compat lint\n+                                violation.kind = UnsafetyViolationKind::General;\n                                 if !self.violations.contains(&violation) {\n                                     self.violations.push(violation)\n                                 }\n@@ -400,7 +421,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                     source_info,\n                                     description: Symbol::intern(description).as_interned_str(),\n                                     details: Symbol::intern(details).as_interned_str(),\n-                                    kind: UnsafetyViolationKind::MinConstFn,\n+                                    kind: UnsafetyViolationKind::GeneralAndConstFn,\n                                 }], &[]);\n                             }\n                         },\n@@ -592,6 +613,16 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     } in violations.iter() {\n         // Report an error.\n         match kind {\n+            UnsafetyViolationKind::General if tcx.is_min_const_fn(def_id) => {\n+                tcx.sess.struct_span_err(\n+                    source_info.span,\n+                    &format!(\"{} is unsafe and unsafe operations \\\n+                            are not allowed in const fn\", description))\n+                    .span_label(source_info.span, &description.as_str()[..])\n+                    .note(&details.as_str()[..])\n+                    .emit();\n+            }\n+            UnsafetyViolationKind::GeneralAndConstFn |\n             UnsafetyViolationKind::General => {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n@@ -600,14 +631,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                     .note(&details.as_str()[..])\n                     .emit();\n             }\n-            UnsafetyViolationKind::MinConstFn => {\n-                tcx.sess.struct_span_err(\n+            UnsafetyViolationKind::GatedConstFnCall => {\n+                emit_feature_err(\n+                    &tcx.sess.parse_sess,\n+                    \"min_const_unsafe_fn\",\n                     source_info.span,\n-                    &format!(\"{} is unsafe and unsafe operations \\\n-                            are not allowed in const fn\", description))\n-                    .span_label(source_info.span, &description.as_str()[..])\n-                    .note(&details.as_str()[..])\n-                    .emit();\n+                    GateIssue::Language,\n+                    \"calls to `const unsafe fn` in const fns are unstable\",\n+                );\n+\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node_note(SAFE_EXTERN_STATICS,"}, {"sha": "02a357551df307a7a13c34a91e1d7496531441bb", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=4497ff37627d860690613249a31cf3ee4c4195ef", "patch": "@@ -18,13 +18,13 @@ const fn no_unsafe() { unsafe {} }\n \n // not ok\n const fn foo8() -> i32 {\n-    unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n+    unsafe { foo4() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n }\n const fn foo9() -> *const String {\n-    unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n+    unsafe { foo5::<String>() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n }\n const fn foo10() -> *const Vec<std::cell::Cell<u32>> {\n-    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n+    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR calls to `const unsafe fn` in const fns\n }\n const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n //~^ dereferencing raw pointers in constant functions"}, {"sha": "0b8ff4717c128427049b44c7496549c8dc404c94", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4497ff37627d860690613249a31cf3ee4c4195ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=4497ff37627d860690613249a31cf3ee4c4195ef", "patch": "@@ -14,29 +14,29 @@ LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n   --> $DIR/min_const_fn_unsafe.rs:21:14\n    |\n-LL |     unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n-   |              ^^^^^^ call to unsafe function\n+LL |     unsafe { foo4() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+   |              ^^^^^^\n    |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n   --> $DIR/min_const_fn_unsafe.rs:24:14\n    |\n-LL |     unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n-   |              ^^^^^^^^^^^^^^^^ call to unsafe function\n+LL |     unsafe { foo5::<String>() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+   |              ^^^^^^^^^^^^^^^^\n    |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n   --> $DIR/min_const_fn_unsafe.rs:27:14\n    |\n-LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR calls to `const unsafe fn` in const fns\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe.rs:29:51"}]}