{"sha": "c3694d732ef9ed641671fbf116d183e78dc4e90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjk0ZDczMmVmOWVkNjQxNjcxZmJmMTE2ZDE4M2U3OGRjNGU5MGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T23:46:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:01Z"}, "message": "test: De-`@mut` the test suite", "tree": {"sha": "9491998229d82615ae8d547ff4061e433947b373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9491998229d82615ae8d547ff4061e433947b373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3694d732ef9ed641671fbf116d183e78dc4e90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3694d732ef9ed641671fbf116d183e78dc4e90a", "html_url": "https://github.com/rust-lang/rust/commit/c3694d732ef9ed641671fbf116d183e78dc4e90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3694d732ef9ed641671fbf116d183e78dc4e90a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df13c64c3b221f0408fa7e149884e25ff5b02343", "url": "https://api.github.com/repos/rust-lang/rust/commits/df13c64c3b221f0408fa7e149884e25ff5b02343", "html_url": "https://github.com/rust-lang/rust/commit/df13c64c3b221f0408fa7e149884e25ff5b02343"}], "stats": {"total": 1188, "additions": 351, "deletions": 837}, "files": [{"sha": "90b01f8888bef4186b5ade011bdc4ca2c2baaa65", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,18 +10,21 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n pub struct Entry<A,B> {\n     key: A,\n     value: B\n }\n \n pub struct alist<A,B> {\n     eq_fn: extern \"Rust\" fn(A,A) -> bool,\n-    data: @mut ~[Entry<A,B>]\n+    data: @RefCell<~[Entry<A,B>]>,\n }\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n-    lst.data.push(Entry{key:k, value:v});\n+    let mut data = lst.data.borrow_mut();\n+    data.get().push(Entry{key:k, value:v});\n }\n \n pub fn alist_get<A:Clone + 'static,\n@@ -30,7 +33,8 @@ pub fn alist_get<A:Clone + 'static,\n                  k: A)\n                  -> B {\n     let eq_fn = lst.eq_fn;\n-    for entry in lst.data.iter() {\n+    let data = lst.data.borrow();\n+    for entry in data.get().iter() {\n         if eq_fn(entry.key.clone(), k.clone()) {\n             return entry.value.clone();\n         }\n@@ -41,12 +45,18 @@ pub fn alist_get<A:Clone + 'static,\n #[inline]\n pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n-    return alist {eq_fn: eq_int, data: @mut ~[]};\n+    return alist {\n+        eq_fn: eq_int,\n+        data: @RefCell::new(~[]),\n+    };\n }\n \n #[inline]\n pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(a: int, b: int) -> bool { a == b }\n-    return alist {eq_fn: eq_int, data: @mut ~[]};\n+    return alist {\n+        eq_fn: eq_int,\n+        data: @RefCell::new(~[]),\n+    };\n }"}, {"sha": "15dde899ce374c2de5bdd1d99ab9c97af96f9173", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -14,11 +14,12 @@\n \n extern mod extra;\n \n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n \n-pub type header_map = HashMap<~str, @mut ~[@~str]>;\n+pub type header_map = HashMap<~str, @RefCell<~[@~str]>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {\n-  let _x = (*((**req.get(&~\"METHOD\")).clone())[0u]).clone();\n+  let _x = (*((**req.get(&~\"METHOD\")).clone()).get()[0u]).clone();\n }"}, {"sha": "75587f17b10330c552f45d43bdcf81e5dd347e1c", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -86,7 +86,7 @@ impl Sudoku {\n         return Sudoku::new(g)\n     }\n \n-    pub fn write(&self, writer: @mut io::Writer) {\n+    pub fn write(&self, writer: &mut io::Writer) {\n         for row in range(0u8, 9u8) {\n             write!(writer, \"{}\", self.grid[row][0]);\n             for col in range(1u8, 9u8) {\n@@ -280,5 +280,5 @@ fn main() {\n         Sudoku::read(BufferedReader::new(io::stdin()))\n     };\n     sudoku.solve();\n-    sudoku.write(@mut io::stdout() as @mut io::Writer);\n+    sudoku.write(&mut io::stdout());\n }"}, {"sha": "817696c6d20de1faff64208ad87aa62b7c649f95", "filename": "src/test/compile-fail/cast-immutable-mutable-trait.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-trait T {\n-    fn foo(@mut self);\n-}\n-\n-struct S {\n-    unused: int\n-}\n-\n-impl T for S {\n-    fn foo(@mut self) {\n-    }\n-}\n-\n-fn main() {\n-    let s = @S { unused: 0 };\n-    let _s2 = s as @mut T; //~ error: types differ in mutability\n-    let _s3 = &s as &mut T; //~ error: types differ in mutability\n-}"}, {"sha": "2277f7080af75c464225f56ee34b52336f579f1d", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -8,19 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+fn takes_imm(x: &int) { }\n \n-fn takes_mut(x: @mut int) { }\n-fn takes_imm(x: @int) { }\n+fn takes_mut(x: &mut int) { }\n \n fn apply<T>(t: T, f: |T|) {\n     f(t)\n }\n \n fn main() {\n-    apply(@3, takes_mut); //~ ERROR (values differ in mutability)\n-    apply(@3, takes_imm);\n+    apply(&3, takes_mut); //~ ERROR (values differ in mutability)\n+    apply(&3, takes_imm);\n \n-    apply(@mut 3, takes_mut);\n-    apply(@mut 3, takes_imm); //~ ERROR (values differ in mutability)\n+    apply(&mut 3, takes_mut);\n+    apply(&mut 3, takes_imm); //~ ERROR (values differ in mutability)\n }"}, {"sha": "302e883942e6cc0f36c22e13a35d9d118dba715a", "filename": "src/test/compile-fail/issue-10487.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,6 +12,5 @@\n \n static x: ~[int] = ~[123, 456]; //~ ERROR: cannot allocate vectors in constant expressions\n static y: @[int] = @[123, 456]; //~ ERROR: cannot allocate vectors in constant expressions\n-static z: @mut [int] = @mut [123, 456]; //~ ERROR: cannot allocate vectors in constant expressions\n \n fn main() {}"}, {"sha": "def712d9e8de4314cebbbcd500dec0d4debbd202", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,28 +12,28 @@\n \n // A test case for #2548.\n \n-struct foo {\n-    x: @mut int,\n-\n+use std::cell::Cell;\n \n+struct foo {\n+    x: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for foo {\n     fn drop(&mut self) {\n         unsafe {\n             println(\"Goodbye, World!\");\n-            *self.x += 1;\n+            self.x.set(self.x.get() + 1);\n         }\n     }\n }\n \n-fn foo(x: @mut int) -> foo {\n+fn foo(x: @Cell<int>) -> foo {\n     foo { x: x }\n }\n \n fn main() {\n-    let x = @mut 0;\n+    let x = @Cell::new(0);\n \n     {\n         let mut res = foo(x);\n@@ -43,5 +43,5 @@ fn main() {\n         assert_eq!(v.len(), 2);\n     }\n \n-    assert_eq!(*x, 1);\n+    assert_eq!(x.get(), 1);\n }"}, {"sha": "fe57d7171a68fe7b4c1c923726dfd6f264602b66", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-struct P { child: Option<@mut P> }\n+struct P { child: Option<@P> }\n trait PTrait {\n    fn getChildOption(&self) -> Option<@P>;\n }"}, {"sha": "de277b4c36efddcb70a7b4346dcd7c798c2f34d4", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -1,12 +1,11 @@\n #[feature(managed_boxes)];\n \n struct Foo {\n-    f: @mut int,\n+    f: @int,\n }\n \n impl Drop for Foo { //~ ERROR cannot implement a destructor on a structure that does not satisfy Send\n     fn drop(&mut self) {\n-        *self.f = 10;\n     }\n }\n "}, {"sha": "0ce8ee40d3bfa203c148f02cefbf2928d640549b", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-fn two_args<T>(x: T, y: T) { }\n-\n-fn main() {\n-    let a: @mut int = @mut 3;\n-    let b: @int = @3;\n-\n-    // NOTE:\n-    //\n-    // The fact that this test fails to compile reflects a known\n-    // shortcoming of the current inference algorithm.  These errors\n-    // are *not* desirable.\n-\n-    two_args(a, b); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "2270cb6f498b1f479958644eba0f0edece7d713c", "filename": "src/test/compile-fail/object-pointer-types.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -15,7 +15,6 @@ trait Foo {\n     fn borrowed_mut(&mut self);\n \n     fn managed(@self);\n-    fn managed_mut(@mut self);\n \n     fn owned(~self);\n }\n@@ -24,39 +23,27 @@ fn borrowed_receiver(x: &Foo) {\n     x.borrowed();\n     x.borrowed_mut(); // See [1]\n     x.managed(); //~ ERROR does not implement any method\n-    x.managed_mut(); //~ ERROR does not implement any method\n     x.owned(); //~ ERROR does not implement any method\n }\n \n fn borrowed_mut_receiver(x: &mut Foo) {\n     x.borrowed();\n     x.borrowed_mut();\n     x.managed(); //~ ERROR does not implement any method\n-    x.managed_mut(); //~ ERROR does not implement any method\n     x.owned(); //~ ERROR does not implement any method\n }\n \n fn managed_receiver(x: @Foo) {\n     x.borrowed();\n     x.borrowed_mut(); // See [1]\n     x.managed();\n-    x.managed_mut();  //~ ERROR does not implement any method\n-    x.owned(); //~ ERROR does not implement any method\n-}\n-\n-fn managed_mut_receiver(x: @mut Foo) {\n-    x.borrowed();\n-    x.borrowed_mut();\n-    x.managed();  //~ ERROR does not implement any method\n-    x.managed_mut();\n     x.owned(); //~ ERROR does not implement any method\n }\n \n fn owned_receiver(x: ~Foo) {\n     x.borrowed();\n     x.borrowed_mut(); // See [1]\n     x.managed();  //~ ERROR does not implement any method\n-    x.managed_mut();  //~ ERROR does not implement any method\n     x.owned();\n }\n "}, {"sha": "9c9b4a9f4d5b0babeca2348808ead932e4938684", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,20 +10,22 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct r {\n-  i: @mut int,\n+  i: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {\n         unsafe {\n-            *(self.i) = *(self.i) + 1;\n+            self.i.set(self.i.get() + 1);\n         }\n     }\n }\n \n-fn r(i: @mut int) -> r {\n+fn r(i: @Cell<int>) -> r {\n     r {\n         i: i\n     }\n@@ -34,7 +36,7 @@ struct A {\n }\n \n fn main() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         // Can't do this copy\n         let x = ~~~A {y: r(i)};"}, {"sha": "b36933c4957f2f47e3c5c6cd0c1c2f697c929d52", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n struct invariant<'a> {\n-    f: 'static |x: @mut &'a int|\n+    f: 'static |x: &mut &'a int|\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "449cbc6970fdb2e61a8646be3ff4c3f701db290b", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n struct invariant<'a> {\n-    f: 'static || -> @mut &'a int\n+    f: 'static || -> &mut &'a int\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "c604e66507e0a32e89a981b36177dba2b68db060", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,15 +10,17 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct r {\n-  i: @mut int,\n+  i: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {\n         unsafe {\n-            *(self.i) = *(self.i) + 1;\n+            self.i.set(self.i.get() + 1);\n         }\n     }\n }\n@@ -27,12 +29,12 @@ fn f<T>(_i: ~[T], _j: ~[T]) {\n }\n \n fn main() {\n-    let i1 = @mut 0;\n-    let i2 = @mut 1;\n+    let i1 = @Cell::new(0);\n+    let i2 = @Cell::new(1);\n     let r1 = ~[~r { i: i1 }];\n     let r2 = ~[~r { i: i2 }];\n     f(r1.clone(), r2.clone());\n     //~^ ERROR failed to find an implementation of\n-    info!(\"{:?}\", (r2, *i1));\n-    info!(\"{:?}\", (r1, *i2));\n+    info!(\"{:?}\", (r2, i1.get()));\n+    info!(\"{:?}\", (r1, i2.get()));\n }"}, {"sha": "3f789fa456a9c4eaffe1469c9e9ed1bacad912d3", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -14,16 +14,18 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n fn test1() { let val = @0; { } *val; }\n \n fn test2() -> int { let val = @0; { } *val }\n \n struct S { eax: int }\n \n fn test3() {\n-    let regs = @mut S {eax: 0};\n+    let regs = @Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }\n-    (*regs).eax = 1;\n+    regs.set(S {eax: 1});\n }\n \n fn test4() -> bool { let regs = @true; if true { } *regs || false }\n@@ -51,10 +53,13 @@ fn test8() -> int {\n     }\n }\n \n-fn test9() { let regs = @mut 0; match true { true => { } _ => { } } *regs += 1; }\n+fn test9() {\n+    let regs = @Cell::new(0);\n+    match true { true => { } _ => { } } regs.set(regs.get() + 1);\n+}\n \n fn test10() -> int {\n-    let regs = @mut ~[0];\n+    let regs = @~[0];\n     match true { true => { } _ => { } }\n     (*regs)[0]\n }"}, {"sha": "09e7d0bc28c1fc2d99f00b71e9caef8d9fcedf93", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -14,7 +14,7 @@\n #[feature(managed_boxes)];\n \n fn main() {\n-    let _count = @mut 0u;\n+    let _count = @0u;\n     let mut map = std::hashmap::HashMap::new();\n     let mut arr = ~[];\n     for _i in range(0u, 10u) {"}, {"sha": "02ce1fd4b262a756ae3243f60c5fb2b24e71e9f1", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,19 +10,24 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n struct Pair<A,B> {\n     a: A, b: B\n }\n \n struct RecEnum<A>(Rec<A>);\n struct Rec<A> {\n     val: A,\n-    rec: Option<@mut RecEnum<A>>\n+    rec: Option<@RefCell<RecEnum<A>>>\n }\n \n fn make_cycle<A:'static>(a: A) {\n-    let g: @mut RecEnum<A> = @mut RecEnum(Rec {val: a, rec: None});\n-    g.rec = Some(g);\n+    let g: @RefCell<RecEnum<A>> = @RefCell::new(RecEnum(Rec {val: a, rec: None}));\n+    {\n+        let mut gb = g.borrow_mut();\n+        gb.get().rec = Some(g);\n+    }\n }\n \n struct Invoker<A,B> {"}, {"sha": "8058556a469fb8d2ff0351450e361d7b9d9067fa", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -35,8 +35,8 @@ fn test_ebml<'a, A:\n     Encodable<EBWriter::Encoder> +\n     Decodable<EBReader::Decoder<'a>>\n >(a1: &A) {\n-    let mut wr = @mut std::io::mem::MemWriter::new();\n-    let mut ebml_w = EBWriter::Encoder(wr);\n+    let mut wr = std::io::mem::MemWriter::new();\n+    let mut ebml_w = EBWriter::Encoder(&mut wr);\n     a1.encode(&mut ebml_w);\n     let bytes = wr.inner_ref().as_slice();\n "}, {"sha": "8871035908bbf2d3a57d7096bd7f54c43e6ea0fe", "filename": "src/test/run-pass/borrowck-preserve-box-in-arm-not-taken.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,15 +12,18 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n pub fn main() {\n-    let x: @mut @Option<~int> = @mut @None;\n-    match x {\n-      @@Some(ref _y) => {\n+    let x: @RefCell<@Option<~int>> = @RefCell::new(@None);\n+    let mut xb = x.borrow_mut();\n+    match *xb.get() {\n+      @Some(ref _y) => {\n         // here, the refcount of `*x` is bumped so\n         // `_y` remains valid even if `*x` is modified.\n-        *x = @None;\n+        *xb.get() = @None;\n       }\n-      @@None => {\n+      @None => {\n         // here, no bump of the ref count of `*x` is needed, but in\n         // fact a bump occurs anyway because of how pattern marching\n         // works."}, {"sha": "b333bcae5823add944d0739ccc1c920a0d2877a3", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,23 +12,25 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n use std::ptr;\n \n struct F { f: ~int }\n \n pub fn main() {\n-    let x = @mut @F {f: ~3};\n-    match x {\n-      @@F{f: ref b_x} => {\n+    let x = @RefCell::new(@F {f: ~3});\n+    let mut xb = x.borrow_mut();\n+    match *xb.get() {\n+      @F{f: ref b_x} => {\n         assert_eq!(**b_x, 3);\n-        assert_eq!(ptr::to_unsafe_ptr(&(x.f)), ptr::to_unsafe_ptr(b_x));\n+        assert_eq!(ptr::to_unsafe_ptr(&(xb.get().f)), ptr::to_unsafe_ptr(b_x));\n \n-        *x = @F {f: ~4};\n+        *xb.get() = @F {f: ~4};\n \n         info!(\"ptr::to_unsafe_ptr(*b_x) = {:x}\",\n                ptr::to_unsafe_ptr(&(**b_x)) as uint);\n         assert_eq!(**b_x, 3);\n-        assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(**b_x)));\n+        assert!(ptr::to_unsafe_ptr(&(*xb.get().f)) != ptr::to_unsafe_ptr(&(**b_x)));\n       }\n     }\n }"}, {"sha": "97d92f421c1488bf32236491dd9408f2f18738a1", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,6 +10,8 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n enum newtype {\n     newtype(int)\n }\n@@ -19,12 +21,12 @@ pub fn main() {\n     // Test that borrowck treats enums with a single variant\n     // specially.\n \n-    let x = @mut 5;\n-    let y = @mut newtype(3);\n-    let z = match *y {\n+    let x = @Cell::new(5);\n+    let y = @Cell::new(newtype(3));\n+    let z = match y.get() {\n       newtype(b) => {\n-        *x += 1;\n-        *x * b\n+        x.set(x.get() + 1);\n+        x.get() * b\n       }\n     };\n     assert_eq!(z, 18);"}, {"sha": "09d10502b846b82215f05f6e829654dd11972f9d", "filename": "src/test/run-pass/cast-mutable-trait.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-trait T {\n-    fn foo(@mut self);\n-}\n-\n-struct S {\n-    unused: int\n-}\n-\n-impl T for S {\n-    fn foo(@mut self) {\n-    }\n-}\n-\n-fn bar(t: @mut T) {\n-    t.foo();\n-}\n-\n-pub fn main() {\n-    let s = @mut S { unused: 0 };\n-    let s2 = s as @mut T;\n-    s2.foo();\n-    bar(s2);\n-    bar(s as @mut T);\n-}"}, {"sha": "8c14276894475f94ebe50a4a349cdd482d173b9b", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -11,86 +11,92 @@\n #[feature(managed_boxes)];\n \n trait noisy {\n-  fn speak(&self) -> int;\n+  fn speak(&mut self) -> int;\n }\n \n struct dog {\n-  priv barks : @mut uint,\n+  priv barks: uint,\n \n-  volume : @mut int,\n+  volume: int,\n }\n \n impl dog {\n-    fn bark(&self) -> int {\n-      info!(\"Woof {} {}\", *self.barks, *self.volume);\n-      *self.barks += 1u;\n-      if *self.barks % 3u == 0u {\n-          *self.volume += 1;\n+    fn bark(&mut self) -> int {\n+      info!(\"Woof {} {}\", self.barks, self.volume);\n+      self.barks += 1u;\n+      if self.barks % 3u == 0u {\n+          self.volume += 1;\n       }\n-      if *self.barks % 10u == 0u {\n-          *self.volume -= 2;\n+      if self.barks % 10u == 0u {\n+          self.volume -= 2;\n       }\n-      info!(\"Grrr {} {}\", *self.barks, *self.volume);\n-      *self.volume\n+      info!(\"Grrr {} {}\", self.barks, self.volume);\n+      self.volume\n     }\n }\n \n impl noisy for dog {\n-  fn speak(&self) -> int { self.bark() }\n+    fn speak(&mut self) -> int {\n+        self.bark()\n+    }\n }\n \n fn dog() -> dog {\n     dog {\n-        volume: @mut 0,\n-        barks: @mut 0u\n+        volume: 0,\n+        barks: 0u\n     }\n }\n \n #[deriving(Clone)]\n struct cat {\n-  priv meows : @mut uint,\n+  priv meows: uint,\n \n-  how_hungry : @mut int,\n-  name : ~str,\n+  how_hungry: int,\n+  name: ~str,\n }\n \n impl noisy for cat {\n-  fn speak(&self) -> int { self.meow() as int }\n+    fn speak(&mut self) -> int {\n+        self.meow() as int\n+    }\n }\n \n impl cat {\n-  pub fn meow_count(&self) -> uint { *self.meows }\n+    pub fn meow_count(&self) -> uint {\n+        self.meows\n+    }\n }\n \n impl cat {\n-    fn meow(&self) -> uint {\n-      info!(\"Meow\");\n-      *self.meows += 1u;\n-      if *self.meows % 5u == 0u {\n-          *self.how_hungry += 1;\n-      }\n-      *self.meows\n+    fn meow(&mut self) -> uint {\n+        info!(\"Meow\");\n+        self.meows += 1u;\n+        if self.meows % 5u == 0u {\n+            self.how_hungry += 1;\n+        }\n+        self.meows\n     }\n }\n \n-fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+fn cat(in_x: uint, in_y: int, in_name: ~str) -> cat {\n     cat {\n-        meows: @mut in_x,\n-        how_hungry: @mut in_y,\n+        meows: in_x,\n+        how_hungry: in_y,\n         name: in_name\n     }\n }\n \n \n-fn annoy_neighbors(critter: @noisy) {\n+fn annoy_neighbors(critter: &mut noisy) {\n     for _i in range(0u, 10) { critter.speak(); }\n }\n \n pub fn main() {\n-  let nyan : cat  = cat(0u, 2, ~\"nyan\");\n-  let whitefang : dog = dog();\n-  annoy_neighbors(@nyan.clone() as @noisy);\n-  annoy_neighbors(@whitefang as @noisy);\n+  let mut nyan: cat = cat(0u, 2, ~\"nyan\");\n+  let mut whitefang: dog = dog();\n+  annoy_neighbors(&mut nyan);\n+  annoy_neighbors(&mut whitefang);\n   assert_eq!(nyan.meow_count(), 10u);\n-  assert_eq!(*whitefang.volume, 1);\n+  assert_eq!(whitefang.volume, 1);\n }"}, {"sha": "86764df6ae07a2fc9e4410213b1fdda092c791a2", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -58,6 +58,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n pub fn main() {\n-  let nyan: @mut noisy = @mut cat(0u, 2, ~\"nyan\") as @mut noisy;\n-  nyan.speak();\n+    let mut nyan = cat(0u, 2, ~\"nyan\");\n+    let mut nyan: &mut noisy = &mut nyan;\n+    nyan.speak();\n }"}, {"sha": "ca1e18eb87b97e1bf0999804da71876e19ef463b", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,14 +10,16 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n enum taggy {\n-    cons(@mut taggy),\n+    cons(@RefCell<taggy>),\n     nil,\n }\n \n fn f() {\n-    let a_box = @mut nil;\n-    *a_box = cons(a_box);\n+    let a_box = @RefCell::new(nil);\n+    a_box.set(cons(a_box));\n }\n \n pub fn main() {"}, {"sha": "f10592bf80097b7a92c27f9bde40ff750e4d73a8", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-struct foo {\n-    z: Option<@Invokable>,\n-}\n-\n-struct Thing {\n-    w: @mut foo,\n-}\n-\n-trait Invokable {\n-    fn f(&self);\n-}\n-\n-impl Invokable for Thing {\n-    fn f(&self) {\n-        nop_foo(self.w);\n-    }\n-}\n-\n-fn nop() { }\n-fn nop_foo(_x : @mut foo) { }\n-\n-pub fn main() {\n-    let w = @mut foo {\n-        z: None,\n-    };\n-    let x = @Thing {\n-        w: w,\n-    } as @Invokable;\n-    w.z = Some(x);\n-}"}, {"sha": "914805c126f376fe442fddcdf519f0c95861eb54", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,4 +10,10 @@\n \n #[feature(managed_boxes)];\n \n-pub fn main() { let x = @mut 5; *x = 1000; info!(\"{:?}\", *x); }\n+use std::cell::Cell;\n+\n+pub fn main() {\n+    let x = @Cell::new(5);\n+    x.set(1000);\n+    info!(\"{:?}\", x.get());\n+}"}, {"sha": "9194304a376b1c1033c12787f50727cdc8f32ca5", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -58,8 +58,8 @@ struct G<T> {\n fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder> +\n                     Decodable<Decoder<'a>>>() {\n     let obj: T = random();\n-    let w = @mut MemWriter::new();\n-    let mut e = Encoder(w);\n+    let mut w = MemWriter::new();\n+    let mut e = Encoder(&mut w);\n     obj.encode(&mut e);\n     let doc = ebml::reader::Doc(@w.inner_ref().to_owned());\n     let mut dec = Decoder(doc);"}, {"sha": "d28e54d57ad4ceafef8740425d74d1f3d6698d4c", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -30,7 +30,7 @@ struct Lots {\n     e: char,\n     f: f64,\n     g: (f32, char),\n-    h: @mut (int, int),\n+    h: @(int, int),\n     i: bool,\n     j: (),\n }"}, {"sha": "c7e5681c0c1db98a5bbf74084b2812fefa923dd0", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -18,9 +18,6 @@ impl Box {\n     pub fn set_many(&mut self, xs: &[uint]) {\n         for x in xs.iter() { self.x = *x; }\n     }\n-    pub fn set_many2(@mut self, xs: &[uint]) {\n-        for x in xs.iter() { self.x = *x; }\n-    }\n }\n \n pub fn main() {}"}, {"sha": "e1be481099c1888422778071f739bc60c827dd8c", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -13,10 +13,4 @@ pub fn main() {\n     println(v[2].to_str());\n     println(v[3].to_str());\n     println(v[4].to_str());\n-    let v: @mut [int] = @mut [ 3, ..5 ];\n-    println((v[0]).to_str());\n-    println((v[1]).to_str());\n-    println((v[2]).to_str());\n-    println((v[3]).to_str());\n-    println((v[4]).to_str());\n }"}, {"sha": "d9505e01de95b43a64c404ebf597eec38e4c26db", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,15 +10,21 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct Point {x: int, y: int, z: int}\n \n-fn f(p: @mut Point) { assert!((p.z == 12)); p.z = 13; assert!((p.z == 13)); }\n+fn f(p: @Cell<Point>) {\n+    assert!((p.get().z == 12));\n+    p.set(Point {x: 10, y: 11, z: 13});\n+    assert!((p.get().z == 13));\n+}\n \n pub fn main() {\n     let a: Point = Point {x: 10, y: 11, z: 12};\n-    let b: @mut Point = @mut a;\n-    assert_eq!(b.z, 12);\n+    let b: @Cell<Point> = @Cell::new(a);\n+    assert_eq!(b.get().z, 12);\n     f(b);\n     assert_eq!(a.z, 12);\n-    assert_eq!(b.z, 13);\n+    assert_eq!(b.get().z, 13);\n }"}, {"sha": "905fa42635b9be59ff0e879c68d3192ff2dc5735", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -40,7 +40,7 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: SharedChan<ctrl_proto>, input: ~str) {\n-        let intermediates = @mut HashMap::new();\n+        let mut intermediates = HashMap::new();\n \n         fn emit(im: &mut HashMap<~str, int>,\n                 ctrl: SharedChan<ctrl_proto>, key: ~str,\n@@ -58,7 +58,7 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        ::map(input, |a,b| emit(intermediates, ctrl.clone(), a, b) );\n+        ::map(input, |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n         ctrl_clone.send(mapper_done);\n     }\n "}, {"sha": "ede67275ba9d79277658e42188eb028e4697b9b6", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,80 +10,82 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n // Resources can't be copied, but storing into data structures counts\n // as a move unless the stored thing is used afterwards.\n \n struct r {\n-  i: @mut int,\n+    i: @Cell<int>,\n }\n \n struct Box { x: r }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {\n-        *(self.i) = *(self.i) + 1;\n+        self.i.set(self.i.get() + 1)\n     }\n }\n \n-fn r(i: @mut int) -> r {\n+fn r(i: @Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n fn test_box() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = @r(i);\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n fn test_rec() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = Box {x: r(i)};\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n fn test_tag() {\n     enum t {\n         t0(r),\n     }\n \n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = t0(r(i));\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = (r(i), 0);\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = ~r(i);\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n fn test_box_rec() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     {\n         let _a = @Box {\n             x: r(i)\n         };\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }\n \n pub fn main() {"}, {"sha": "dc46bef4ed46cfca8d17de1487d11c425e4eade7", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -16,11 +16,12 @@\n extern mod req;\n \n use req::request;\n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];\n   let mut m: req::header_map = HashMap::new();\n-  m.insert(~\"METHOD\", @mut v);\n+  m.insert(~\"METHOD\", @RefCell::new(v));\n   request::<int>(&m);\n }"}, {"sha": "44222315dcd0931c21698357615f7484819002c5", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,26 +10,28 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n // This test should behave exactly like issue-2735-3\n struct defer {\n-    b: @mut bool,\n+    b: @Cell<bool>,\n }\n \n #[unsafe_destructor]\n impl Drop for defer {\n     fn drop(&mut self) {\n-        *self.b = true;\n+        self.b.set(true);\n     }\n }\n \n-fn defer(b: @mut bool) -> defer {\n+fn defer(b: @Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = @mut false;\n+    let dtor_ran = @Cell::new(false);\n     let _  = defer(dtor_ran);\n-    assert!(*dtor_ran);\n+    assert!(dtor_ran.get());\n }"}, {"sha": "f48e763966b1ac90f866f0a5198fef5374e68290", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,26 +10,28 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n // This test should behave exactly like issue-2735-2\n struct defer {\n-    b: @mut bool,\n+    b: @Cell<bool>,\n }\n \n #[unsafe_destructor]\n impl Drop for defer {\n     fn drop(&mut self) {\n-        *self.b = true;\n+        self.b.set(true);\n     }\n }\n \n-fn defer(b: @mut bool) -> defer {\n+fn defer(b: @Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = @mut false;\n+    let dtor_ran = @Cell::new(false);\n     defer(dtor_ran);\n-    assert!(*dtor_ran);\n+    assert!(dtor_ran.get());\n }"}, {"sha": "dc2f59f14816c79b4c71036c70f9ea96894f8e52", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -62,8 +62,8 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + io::Reader>(input: rdr) -> ~[~[square]] {\n-    let input = @mut input as @mut io::Reader;\n+fn read_board_grid<rdr:'static + io::Reader>(mut input: rdr) -> ~[~[square]] {\n+    let mut input: &mut io::Reader = &mut input;\n     let mut grid = ~[];\n     let mut line = [0, ..10];\n     input.read(line);"}, {"sha": "3d56abb3de686fbeafc601fce14b49bc33f15f3f", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,11 +10,13 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n static S: &'static str = \"str\";\n \n struct list<T> {\n     element: T,\n-    next: Option<@mut list<T>>\n+    next: Option<@RefCell<list<T>>>\n }\n \n impl<T:'static> list<T> {\n@@ -24,7 +26,7 @@ impl<T:'static> list<T> {\n             next: None\n         };\n \n-        self.next = Some(@mut newList);\n+        self.next = Some(@RefCell::new(newList));\n     }\n }\n "}, {"sha": "8a30cc9674860750762b0a210cc7c2a494a2b244", "filename": "src/test/run-pass/issue-3860.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-struct Foo { x: int }\n-\n-impl Foo {\n-    pub fn stuff<'a>(&'a mut self) -> &'a mut Foo {\n-        return self;\n-    }\n-}\n-\n-pub fn main() {\n-    let x = @mut Foo { x: 3 };\n-    // Neither of the next two lines should cause an error\n-    let _ = x.stuff();\n-    x.stuff();\n-}"}, {"sha": "088376c1068b983fdc9edde36b3ef70333eadaa3", "filename": "src/test/run-pass/issue-5275.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-// Regression test for issue #5275\n-\n-fn foo(self_: &A) -> int {\n-    if true {\n-        fail!()\n-    } else {\n-        *bar(self_.bar)\n-    }\n-}\n-\n-fn bar<'r>(_: &'r mut int) -> &'r int {\n-    fail!()\n-}\n-\n-struct A {\n-    bar: @mut int,\n-}\n-\n-pub fn main() {}"}, {"sha": "a5c318a20f47d8c0e4cc1187e03cfcd454262db0", "filename": "src/test/run-pass/issue-5517.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5517.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-pub fn main() {\n-    let box1 = @mut 42;\n-    let _x = *(&mut *box1) == 42 || *(&mut *box1) == 31337;\n-}"}, {"sha": "ca83e783268e833e37bc90abc035ee403a822c6f", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,28 +10,30 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct r {\n-  b: @mut int,\n+    b: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {\n-        *(self.b) += 1;\n+        self.b.set(self.b.get() + 1);\n     }\n }\n \n-fn r(b: @mut int) -> r {\n+fn r(b: @Cell<int>) -> r {\n     r {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let b = @mut 0;\n+    let b = @Cell::new(0);\n     {\n         let _p = Some(r(b));\n     }\n \n-    assert_eq!(*b, 1);\n+    assert_eq!(b.get(), 1);\n }"}, {"sha": "f6dc4adcf9b5af86e3fe9f991ea429864ced7830", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,16 +10,20 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n enum maybe_pointy {\n     no_pointy,\n-    yes_pointy(@mut Pointy),\n+    yes_pointy(@RefCell<Pointy>),\n }\n \n struct Pointy {\n-    x : maybe_pointy\n+    x: maybe_pointy\n }\n \n pub fn main() {\n-    let m = @mut Pointy { x : no_pointy };\n-    m.x = yes_pointy(m);\n+    let m = @RefCell::new(Pointy { x : no_pointy });\n+    m.set(Pointy {\n+        x: yes_pointy(m)\n+    });\n }"}, {"sha": "65f95f78ea86f6dbb89a7d22aadcb551077c5f64", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -11,12 +11,10 @@\n // This should typecheck even though the type of e is not fully\n // resolved when we finish typechecking the ||.\n \n-#[feature(managed_boxes)];\n-\n struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n-    let e = @mut Refs{refs: ~[], n: 0};\n+    let mut e = Refs{refs: ~[], n: 0};\n     let _f: || = || error!(\"{}\", e.n);\n     e.refs.push(1);\n }"}, {"sha": "e4dd3b56fca603a1989ee57973956bc25667e65d", "filename": "src/test/run-pass/log-linearized.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-// Tests that shapes respect linearize_ty_params().\n-\n-enum option<T> {\n-    none,\n-    some(T),\n-}\n-\n-struct Smallintmap<T> {v: ~[option<T>]}\n-\n-struct V<T> { v: ~[option<T>] }\n-\n-fn mk<T:'static>() -> @mut Smallintmap<T> {\n-    let v: ~[option<T>] = ~[];\n-    return @mut Smallintmap {v: v};\n-}\n-\n-fn f<T,U:'static>() {\n-    let sim = mk::<U>();\n-    error!(\"{:?}\", sim);\n-}\n-\n-pub fn main() {\n-    f::<int,int>();\n-}"}, {"sha": "fb352ea07085b1b17f0a2520589560b060573ada", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -11,25 +11,24 @@\n // xfail-fast\n // exec-env:RUST_LOG=debug\n \n-#[feature(managed_boxes)];\n-\n+use std::cell::Cell;\n use std::fmt;\n \n-struct Foo(@mut int);\n+struct Foo(Cell<int>);\n \n impl fmt::Default for Foo {\n     fn fmt(f: &Foo, _fmt: &mut fmt::Formatter) {\n-        assert!(***f == 0);\n-        ***f = 1;\n+        assert!(f.get() == 0);\n+        f.set(1);\n     }\n }\n \n pub fn main() {\n     let (p,c) = Chan::new();\n     do spawn {\n-        let f = Foo(@mut 0);\n+        let mut f = Foo(Cell::new(0));\n         debug!(\"{}\", f);\n-        assert!(**f == 1);\n+        assert!(f.get() == 1);\n         c.send(());\n     }\n     p.recv();"}, {"sha": "66e7fc4265b6c08cf31ba38bc8050e015776124a", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-extern mod std;\n-use std::gc;\n-use std::gc::rustrt;\n-\n-struct cell {c: @list}\n-\n-enum list { link(@mut cell), nil, }\n-\n-pub fn main() {\n-    let first: @cell = @mut cell{c: @nil()};\n-    let second: @cell = @mut cell{c: @link(first)};\n-    first._0 = @link(second);\n-    rustrt::gc();\n-    let third: @cell = @mut cell{c: @nil()};\n-}"}, {"sha": "4a2756f5446eb35eb43628fff73a6a65bc4e085b", "filename": "src/test/run-pass/new-vstore-mut-box-syntax.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-vstore-mut-box-syntax.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-pub fn main() {\n-    let _x: @mut [int] = @mut [ 1, 2, 3 ];\n-\n-}"}, {"sha": "f190a5102d2b462478525d737df6912ff9738c23", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,19 +12,21 @@\n \n // Make sure the destructor is run for newtype structs.\n \n-struct Foo(@mut int);\n+use std::cell::Cell;\n+\n+struct Foo(@Cell<int>);\n \n #[unsafe_destructor]\n impl Drop for Foo {\n     fn drop(&mut self) {\n-        ***self = 23;\n+        self.set(23);\n     }\n }\n \n pub fn main() {\n-    let y = @mut 32;\n+    let y = @Cell::new(32);\n     {\n         let _x = Foo(y);\n     }\n-    assert_eq!(*y, 23);\n+    assert_eq!(y.get(), 23);\n }"}, {"sha": "52792c8c4279391ee7ac64e658dde4e7a4ca3139", "filename": "src/test/run-pass/objects-coerce-from-managed-to-borrowed.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -14,24 +14,12 @@\n \n trait Foo {\n     fn foo(&self) -> uint;\n-    fn bar(&mut self) -> uint;\n }\n \n impl Foo for uint {\n     fn foo(&self) -> uint {\n         *self\n     }\n-\n-    fn bar(&mut self) -> uint {\n-        *self += 1;\n-        *self\n-    }\n-}\n-\n-fn do_it_mut(obj: &mut Foo) {\n-    let x = obj.bar();\n-    let y = obj.foo();\n-    assert_eq!(x, y);\n }\n \n fn do_it_imm(obj: &Foo, v: uint) {\n@@ -40,7 +28,6 @@ fn do_it_imm(obj: &Foo, v: uint) {\n }\n \n pub fn main() {\n-    let x = @mut 22u as @mut Foo;\n-    do_it_mut(x);\n-    do_it_imm(x, 23u);\n+    let x = @22u as @Foo;\n+    do_it_imm(x, 22u);\n }"}, {"sha": "0806bcd185e4f0de1f2aecba6268817c9427580e", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,16 +10,17 @@\n \n #[feature(managed_boxes)];\n \n-struct dtor {\n-    x: @mut int,\n+use std::cell::Cell;\n \n+struct dtor {\n+    x: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for dtor {\n     fn drop(&mut self) {\n         // abuse access to shared mutable state to write this code\n-        *self.x -= 1;\n+        self.x.set(self.x.get() - 1);\n     }\n }\n \n@@ -31,12 +32,12 @@ fn unwrap<T>(o: Option<T>) -> T {\n }\n \n pub fn main() {\n-    let x = @mut 1;\n+    let x = @Cell::new(1);\n \n     {\n         let b = Some(dtor { x:x });\n         let _c = unwrap(b);\n     }\n \n-    assert_eq!(*x, 0);\n+    assert_eq!(x.get(), 0);\n }"}, {"sha": "cba923ef646f8ec83945fe672fa477a3fc16697d", "filename": "src/test/run-pass/packed-struct-generic-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n \n     assert_eq!(mem::size_of::<S<u64, u16>>(), 11);\n \n-    assert_eq!(mem::size_of::<S<~str, @mut [int]>>(),\n-               1 + mem::size_of::<~str>() + mem::size_of::<@mut [int]>());\n+    assert_eq!(mem::size_of::<S<~str, @[int]>>(),\n+               1 + mem::size_of::<~str>() + mem::size_of::<@[int]>());\n }"}, {"sha": "f694cc98ad350803183c9126a6ad2553c278f68e", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -49,7 +49,7 @@ struct S7_Option {\n     a: f32,\n     b: u8,\n     c: u16,\n-    d: Option<@mut f64>\n+    d: Option<@f64>\n }\n \n // Placing packed structs in statics should work\n@@ -63,5 +63,5 @@ pub fn main() {\n     assert_eq!(mem::size_of::<S5>(), 5);\n     assert_eq!(mem::size_of::<S13_str>(), 13 + mem::size_of::<~str>());\n     assert_eq!(mem::size_of::<S3_Foo>(), 3 + mem::size_of::<Foo>());\n-    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<@mut f64>>());\n+    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<@f64>>());\n }"}, {"sha": "7d2be73edc398266278e908aea051e9ab57b85b9", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -30,7 +30,7 @@ enum Foo {\n struct S3_Foo(u8, u16, Foo);\n \n #[packed]\n-struct S7_Option(f32, u8, u16, Option<@mut f64>);\n+struct S7_Option(f32, u8, u16, Option<@f64>);\n \n pub fn main() {\n     assert_eq!(mem::size_of::<S4>(), 4);\n@@ -44,5 +44,5 @@ pub fn main() {\n                3 + mem::size_of::<Foo>());\n \n     assert_eq!(mem::size_of::<S7_Option>(),\n-              7 + mem::size_of::<Option<@mut f64>>());\n+              7 + mem::size_of::<Option<@f64>>());\n }"}, {"sha": "8c1be0a6219756a89d31cd0a0b5c60c5bc9d1bd1", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -24,7 +24,7 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = @mut 6;\n+    let x = @6;\n     let y = x.get();\n     assert_eq!(y, 6);\n "}, {"sha": "0d4277d2e1d638308a7748cfc5110ff4fce8d814", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n use std::libc::c_void;\n use std::ptr;\n use std::mem;\n@@ -458,8 +459,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n }\n \n-struct my_visitor(@mut Stuff);\n+struct my_visitor(@RefCell<Stuff>);\n \n+#[deriving(Clone)]\n struct Stuff {\n     ptr1: *c_void,\n     ptr2: *c_void,\n@@ -469,7 +471,7 @@ struct Stuff {\n impl my_visitor {\n     pub fn get<T:Clone>(&mut self, f: |T|) {\n         unsafe {\n-            f((*(self.ptr1 as *T)).clone());\n+            f((*((**self).get().ptr1 as *T)).clone());\n         }\n     }\n \n@@ -487,8 +489,9 @@ struct Inner<V> { inner: V }\n \n impl movable_ptr for my_visitor {\n     fn move_ptr(&mut self, adjustment: |*c_void| -> *c_void) {\n-        self.ptr1 = adjustment(self.ptr1);\n-        self.ptr2 = adjustment(self.ptr2);\n+        let mut this = self.borrow_mut();\n+        this.get().ptr1 = adjustment(this.get().ptr1);\n+        this.get().ptr2 = adjustment(this.get().ptr2);\n     }\n }\n \n@@ -497,11 +500,17 @@ impl TyVisitor for my_visitor {\n     fn visit_bot(&mut self) -> bool { true }\n     fn visit_nil(&mut self) -> bool { true }\n     fn visit_bool(&mut self) -> bool {\n-        self.get::<bool>(|b| self.vals.push(b.to_str()));\n+        self.get::<bool>(|b| {\n+            let mut this = self.borrow_mut();\n+            this.get().vals.push(b.to_str());\n+        });\n         true\n     }\n     fn visit_int(&mut self) -> bool {\n-        self.get::<int>(|i| self.vals.push(i.to_str()));\n+        self.get::<int>(|i| {\n+            let mut this = self.borrow_mut();\n+            this.get().vals.push(i.to_str());\n+        });\n         true\n     }\n     fn visit_i8(&mut self) -> bool { true }\n@@ -622,21 +631,22 @@ pub fn main() {\n     unsafe {\n         let r = (1,2,3,true,false, Triple {x:5,y:4,z:3}, (12,));\n         let p = ptr::to_unsafe_ptr(&r) as *c_void;\n-        let u = my_visitor(@mut Stuff {ptr1: p,\n-                                       ptr2: p,\n-                                       vals: ~[]});\n+        let u = my_visitor(@RefCell::new(Stuff {ptr1: p,\n+                                                ptr2: p,\n+                                                vals: ~[]}));\n         let mut v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n         error!(\"tydesc sz: {}, align: {}\",\n                (*td).size, (*td).align);\n         visit_tydesc(td, &mut v as &mut TyVisitor);\n \n-        let r = u.vals.clone();\n+        let mut ub = u.borrow_mut();\n+        let r = ub.get().vals.clone();\n         for s in r.iter() {\n             println!(\"val: {}\", *s);\n         }\n-        error!(\"{:?}\", u.vals.clone());\n-        assert_eq!(u.vals.clone(),\n+        error!(\"{:?}\", ub.get().vals.clone());\n+        assert_eq!(ub.get().vals.clone(),\n                    ~[ ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"]);\n     }\n }"}, {"sha": "5acb072fd2d3723fec8586b92f3ebbb85f834737", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -13,7 +13,7 @@\n use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n \n struct MyVisitor {\n-    types: @mut ~[~str],\n+    types: ~[~str],\n }\n \n impl TyVisitor for MyVisitor {\n@@ -153,7 +153,7 @@ fn visit_ty<T>(v: &mut MyVisitor) {\n }\n \n pub fn main() {\n-    let mut v = MyVisitor {types: @mut ~[]};\n+    let mut v = MyVisitor {types: ~[]};\n \n     visit_ty::<bool>(&mut v);\n     visit_ty::<int>(&mut v);\n@@ -164,5 +164,5 @@ pub fn main() {\n     for s in v.types.iter() {\n         println!(\"type: {}\", (*s).clone());\n     }\n-    assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n+    assert_eq!(v.types.clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}, {"sha": "bec101a6d45a93c9f14b2c9ae79f8205e9cc0bcb", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,31 +10,33 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct r {\n-  i: @mut int,\n+    i: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {\n-        *(self.i) += 1;\n+        self.i.set(self.i.get() + 1);\n     }\n }\n \n-fn r(i: @mut int) -> r {\n+fn r(i: @Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let i = @mut 0;\n+    let i = @Cell::new(0);\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n         info!(\"{:?}\", c);\n     }\n-    assert_eq!(*i, 1);\n+    assert_eq!(i.get(), 1);\n }"}, {"sha": "898f6327aeb17b6de37179aeabf61a9c581cd15c", "filename": "src/test/run-pass/resource-cycle.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-// Don't leak the unique pointers\n-\n-use std::cast;\n-\n-struct r {\n-  v: *int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            info!(\"r's dtor: self = {:x}, self.v = {:x}, self.v's value = {:x}\",\n-              cast::transmute::<*mut r, uint>(self),\n-              cast::transmute::<**int, uint>(&(self.v)),\n-              cast::transmute::<*int, uint>(self.v));\n-            let _v2: ~int = cast::transmute(self.v);\n-        }\n-    }\n-}\n-\n-fn r(v: *int) -> r {\n-    r {\n-        v: v\n-    }\n-}\n-\n-struct t(Node);\n-\n-struct Node {\n-    next: Option<@mut t>,\n-    r: r\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let i1 = ~0;\n-        let i1p = cast::transmute_copy(&i1);\n-        cast::forget(i1);\n-        let i2 = ~0;\n-        let i2p = cast::transmute_copy(&i2);\n-        cast::forget(i2);\n-\n-        let x1 = @mut t(Node{\n-            next: None,\n-              r: {\n-              let rs = r(i1p);\n-              info!(\"r = {:x}\", cast::transmute::<*r, uint>(&rs));\n-              rs }\n-        });\n-\n-        info!(\"x1 = {:x}, x1.r = {:x}\",\n-               cast::transmute::<@mut t, uint>(x1),\n-               cast::transmute::<*r, uint>(&x1.r));\n-\n-        let x2 = @mut t(Node{\n-            next: None,\n-              r: {\n-              let rs = r(i2p);\n-              info!(\"r2 = {:x}\", cast::transmute::<*r, uint>(&rs));\n-              rs\n-                }\n-        });\n-\n-        info!(\"x2 = {:x}, x2.r = {:x}\",\n-               cast::transmute::<@mut t, uint>(x2),\n-               cast::transmute::<*r, uint>(&(x2.r)));\n-\n-        x1.next = Some(x2);\n-        x2.next = Some(x1);\n-    }\n-}"}, {"sha": "c7ad9711ed45d147dbe6dec94eb91a585ff99df4", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,71 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-// Don't leak the unique pointers\n-\n-use std::cast;\n-\n-struct U {\n-    a: int,\n-    b: int,\n-    c: *int\n-}\n-\n-struct r {\n-  v: U,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _v2: ~int = cast::transmute(self.v.c);\n-        }\n-    }\n-}\n-\n-fn r(v: U) -> r {\n-    r {\n-        v: v\n-    }\n-}\n-\n-struct t(Node);\n-\n-struct Node {\n-    next: Option<@mut t>,\n-    r: r\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let i1 = ~0xA;\n-        let i1p = cast::transmute_copy(&i1);\n-        cast::forget(i1);\n-        let i2 = ~0xA;\n-        let i2p = cast::transmute_copy(&i2);\n-        cast::forget(i2);\n-\n-        let u1 = U {a: 0xB, b: 0xC, c: i1p};\n-        let u2 = U {a: 0xB, b: 0xC, c: i2p};\n-\n-        let x1 = @mut t(Node {\n-            next: None,\n-            r: r(u1)\n-        });\n-        let x2 = @mut t(Node {\n-            next: None,\n-            r: r(u2)\n-        });\n-        x1.next = Some(x2);\n-        x2.next = Some(x1);\n-    }\n-}"}, {"sha": "8d11eca44922d6905c34af1d18debc847845f7c0", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,80 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-// same as resource-cycle2, but be sure to give r multiple fields...\n-\n-// Don't leak the unique pointers\n-\n-use std::cast;\n-\n-struct U {\n-    a: int,\n-    b: int,\n-    c: *int\n-}\n-\n-struct R {\n-  v: U,\n-  w: int,\n-  x: *int,\n-}\n-\n-impl Drop for R {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _v2: ~int = cast::transmute(self.v.c);\n-            // let _v3: ~int = cast::transmute_copy(self.x);\n-        }\n-    }\n-}\n-\n-fn r(v: U, w: int, _x: *int) -> R {\n-    unsafe {\n-        R {\n-            v: v,\n-            w: w,\n-            x: cast::transmute(0)\n-        }\n-    }\n-}\n-\n-struct t(Node);\n-\n-struct Node {\n-    next: Option<@mut t>,\n-    r: R\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let i1 = ~0xA;\n-        let i1p = cast::transmute_copy(&i1);\n-        cast::forget(i1);\n-        let i2 = ~0xA;\n-        let i2p = cast::transmute_copy(&i2);\n-        cast::forget(i2);\n-\n-        let u1 = U {a: 0xB, b: 0xC, c: i1p};\n-        let u2 = U {a: 0xB, b: 0xC, c: i2p};\n-\n-        let x1 = @mut t(Node{\n-            next: None,\n-            r: r(u1, 42, i1p)\n-        });\n-        let x2 = @mut t(Node{\n-            next: None,\n-            r: r(u2, 42, i2p)\n-        });\n-        x1.next = Some(x2);\n-        x2.next = Some(x1);\n-    }\n-}"}, {"sha": "93183f8dba47582b86a057c1fbdd310dabb58410", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,30 +10,32 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n struct shrinky_pointer {\n-  i: @@mut int,\n+  i: @@Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for shrinky_pointer {\n     fn drop(&mut self) {\n-        error!(\"Hello!\"); **(self.i) -= 1;\n+        error!(\"Hello!\"); self.i.set(self.i.get() - 1);\n     }\n }\n \n impl shrinky_pointer {\n-    pub fn look_at(&self) -> int { return **(self.i); }\n+    pub fn look_at(&self) -> int { return self.i.get(); }\n }\n \n-fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n+fn shrinky_pointer(i: @@Cell<int>) -> shrinky_pointer {\n     shrinky_pointer {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let my_total = @@mut 10;\n+    let my_total = @@Cell::new(10);\n     { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n-    error!(\"my_total = {}\", **my_total);\n-    assert_eq!(**my_total, 9);\n+    error!(\"my_total = {}\", my_total.get());\n+    assert_eq!(my_total.get(), 9);\n }"}, {"sha": "1c5ad9ce525df33bd129b6b05b0dc22b5017b95a", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -13,7 +13,9 @@\n // Ensures that class dtors run if the object is inside an enum\n // variant\n \n-type closable = @mut bool;\n+use std::cell::Cell;\n+\n+type closable = @Cell<bool>;\n \n struct close_res {\n   i: closable,\n@@ -23,7 +25,7 @@ struct close_res {\n #[unsafe_destructor]\n impl Drop for close_res {\n     fn drop(&mut self) {\n-        *(self.i) = false;\n+        self.i.set(false);\n     }\n }\n \n@@ -38,8 +40,8 @@ enum option<T> { none, some(T), }\n fn sink(_res: option<close_res>) { }\n \n pub fn main() {\n-    let c = @mut true;\n+    let c = @Cell::new(true);\n     sink(none);\n     sink(some(close_res(c)));\n-    assert!((!*c));\n+    assert!(!c.get());\n }"}, {"sha": "16e9cb538919cbc173db9a898e51315be0c56a8c", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -13,12 +13,14 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n+use std::cell::Cell;\n use std::comm::*;\n use std::ptr;\n use std::task;\n \n struct notify {\n-    ch: Chan<bool>, v: @mut bool,\n+    ch: Chan<bool>,\n+    v: @Cell<bool>,\n }\n \n #[unsafe_destructor]\n@@ -36,7 +38,7 @@ impl Drop for notify {\n     }\n }\n \n-fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n+fn notify(ch: Chan<bool>, v: @Cell<bool>) -> notify {\n     notify {\n         ch: ch,\n         v: v\n@@ -45,10 +47,10 @@ fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n \n fn joinable(f: proc()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: ||) {\n-        let b = @mut false;\n+        let b = @Cell::new(false);\n         error!(\"wrapper: task=%? allocated v=%x\",\n                0,\n-               ptr::to_unsafe_ptr(&(*b)) as uint);\n+               ptr::to_unsafe_ptr(&b) as uint);\n         let _r = notify(c, b);\n         f();\n         *b = true;"}, {"sha": "bf8b0b5522dca76b0514ac7229130e69d533cba9", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -12,7 +12,9 @@\n \n // Test cyclic detector when using trait instances.\n \n-struct Tree(@mut TreeR);\n+use std::cell::RefCell;\n+\n+struct Tree(@RefCell<TreeR>);\n struct TreeR {\n     left: Option<Tree>,\n     right: Option<Tree>,\n@@ -38,23 +40,28 @@ impl to_str for int {\n \n impl to_str for Tree {\n     fn to_str_(&self) -> ~str {\n-        let (l, r) = (self.left, self.right);\n-        let val = &self.val;\n+        let this = self.borrow();\n+        let (l, r) = (this.get().left, this.get().right);\n+        let val = &this.get().val;\n         format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n \n fn foo<T:to_str>(x: T) -> ~str { x.to_str_() }\n \n pub fn main() {\n-    let t1 = Tree(@mut TreeR{left: None,\n-                             right: None,\n-                             val: ~1 as ~to_str });\n-    let t2 = Tree(@mut TreeR{left: Some(t1),\n-                             right: Some(t1),\n-                             val: ~2 as ~to_str });\n+    let t1 = Tree(@RefCell::new(TreeR{left: None,\n+                                      right: None,\n+                                      val: ~1 as ~to_str}));\n+    let t2 = Tree(@RefCell::new(TreeR{left: Some(t1),\n+                                      right: Some(t1),\n+                                      val: ~2 as ~to_str}));\n     let expected = ~\"[2, some([1, none, none]), some([1, none, none])]\";\n     assert!(t2.to_str_() == expected);\n     assert!(foo(t2) == expected);\n-    t1.left = Some(t2); // create cycle\n+\n+    {\n+        let mut t1 = t1.borrow_mut();\n+        t1.get().left = Some(t2); // create cycle\n+    }\n }"}, {"sha": "53836a6e17dfbb9e589a7dde3ef606db0fc7245d", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,11 +10,12 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n use std::ptr;\n \n enum maybe_pointy {\n     none,\n-    p(@mut Pointy),\n+    p(@RefCell<Pointy>),\n }\n \n struct Pointy {\n@@ -27,14 +28,17 @@ fn make_uniq_closure<A:Send>(a: A) -> proc() -> uint {\n     result\n }\n \n-fn empty_pointy() -> @mut Pointy {\n-    return @mut Pointy {\n+fn empty_pointy() -> @RefCell<Pointy> {\n+    return @RefCell::new(Pointy {\n         a : none,\n         d : make_uniq_closure(~\"hi\")\n-    }\n+    })\n }\n \n pub fn main() {\n     let v = empty_pointy();\n-    v.a = p(v);\n+    {\n+        let mut vb = v.borrow_mut();\n+        vb.get().a = p(v);\n+    }\n }"}, {"sha": "23a27dece46f1b2b43685a6c5cbb14036004f6ea", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,9 +10,11 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::RefCell;\n+\n enum maybe_pointy {\n     none,\n-    p(@mut Pointy),\n+    p(@RefCell<Pointy>),\n }\n \n struct Pointy {\n@@ -21,15 +23,18 @@ struct Pointy {\n     d : proc()->(),\n }\n \n-fn empty_pointy() -> @mut Pointy {\n-    return @mut Pointy {\n+fn empty_pointy() -> @RefCell<Pointy> {\n+    return @RefCell::new(Pointy {\n         a : none,\n         c : ~22,\n         d : proc() {},\n-    }\n+    })\n }\n \n pub fn main() {\n     let v = empty_pointy();\n-    v.a = p(v);\n+    {\n+        let mut vb = v.borrow_mut();\n+        vb.get().a = p(v);\n+    }\n }"}, {"sha": "a7c326ba11c4222bd5c168e38042f1a7f410ae63", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df13c64c3b221f0408fa7e149884e25ff5b02343/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=df13c64c3b221f0408fa7e149884e25ff5b02343", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[feature(managed_boxes)];\n-\n-struct r {\n-  i: @mut int,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        *(self.i) = *(self.i) + 1;\n-    }\n-}\n-\n-fn r(i: @mut int) -> r {\n-    r {\n-        i: i\n-    }\n-}\n-\n-pub fn main() {\n-    let i = @mut 0;\n-    {\n-        let _j = ~r(i);\n-    }\n-    assert_eq!(*i, 1);\n-}"}, {"sha": "f8e28dc792cfd6dfe6494b997657bb17ec8f7f99", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,29 +10,31 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n+\n // Make sure that destructors get run on slice literals\n struct foo {\n-    x: @mut int,\n+    x: @Cell<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for foo {\n     fn drop(&mut self) {\n-        *self.x += 1;\n+        self.x.set(self.x.get() + 1);\n     }\n }\n \n-fn foo(x: @mut int) -> foo {\n+fn foo(x: @Cell<int>) -> foo {\n     foo {\n         x: x\n     }\n }\n \n pub fn main() {\n-    let x = @mut 0;\n+    let x = @Cell::new(0);\n     {\n         let l = &[foo(x)];\n-        assert_eq!(*l[0].x, 0);\n+        assert_eq!(l[0].x.get(), 0);\n     }\n-    assert_eq!(*x, 1);\n+    assert_eq!(x.get(), 1);\n }"}, {"sha": "f62ab6f59a06242712085acf7dccfcaab4797a4a", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3694d732ef9ed641671fbf116d183e78dc4e90a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=c3694d732ef9ed641671fbf116d183e78dc4e90a", "patch": "@@ -10,6 +10,7 @@\n \n #[feature(managed_boxes)];\n \n+use std::cell::Cell;\n use std::util;\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n@@ -22,11 +23,13 @@ fn funny() {\n }\n \n fn what() {\n-    fn the(x: @mut bool) { return while !*x { *x = true; }; }\n-    let i = @mut false;\n+    fn the(x: @Cell<bool>) {\n+        return while !x.get() { x.set(true); };\n+    }\n+    let i = @Cell::new(false);\n     let dont = {||the(i)};\n     dont();\n-    assert!((*i));\n+    assert!((i.get()));\n }\n \n fn zombiejesus() {"}]}