{"sha": "ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZmI5Yzk1MjZmZDhhYWY4ZTUyYzM2M2YyODQxZDk1MWM5NzEyZDk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T13:37:10Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T13:37:10Z"}, "message": "Move items-related stuffs to item mod from visitor mod\n\nMove `rewrite_extern_crate`, is_mod_decl`, `is_use_item` and `is_extern_crate`.", "tree": {"sha": "fb4826d47367ed86b5bb38ef9001ec9daba684b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4826d47367ed86b5bb38ef9001ec9daba684b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "html_url": "https://github.com/rust-lang/rust/commit/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8852fd78737395fc7fa94d13d9cfbbf361c4df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8852fd78737395fc7fa94d13d9cfbbf361c4df6", "html_url": "https://github.com/rust-lang/rust/commit/a8852fd78737395fc7fa94d13d9cfbbf361c4df6"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "3503546c0102d881e2900e80c491ec2401016608", "filename": "rustfmt-core/src/items.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fitems.rs?ref=ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "patch": "@@ -14,6 +14,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use config::lists::*;\n+use regex::Regex;\n use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::{CrateSugar, ImplItem};\n use syntax::codemap::{BytePos, Span};\n@@ -2854,3 +2855,37 @@ pub fn rewrite_mod(item: &ast::Item) -> String {\n     result.push(';');\n     result\n }\n+\n+/// Rewrite `extern crate foo;` WITHOUT attributes.\n+pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Option<String> {\n+    assert!(is_extern_crate(item));\n+    let new_str = context.snippet(item.span);\n+    Some(if contains_comment(new_str) {\n+        new_str.to_owned()\n+    } else {\n+        let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n+        String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))\n+    })\n+}\n+\n+/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n+pub fn is_mod_decl(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::Mod(ref m) => m.inner.hi() != item.span.hi(),\n+        _ => false,\n+    }\n+}\n+\n+pub fn is_use_item(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::Use(_) => true,\n+        _ => false,\n+    }\n+}\n+\n+pub fn is_extern_crate(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::ExternCrate(..) => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "d4bc36fc83f3fbfb605d9649230c72956f2809c9", "filename": "rustfmt-core/src/reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Freorder.rs?ref=ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "patch": "@@ -23,13 +23,13 @@ use attr::filter_inline_attrs;\n use codemap::LineRangeUtils;\n use comment::combine_strs_with_missing_comments;\n use imports::{path_to_imported_ident, rewrite_import};\n-use items::rewrite_mod;\n+use items::{rewrite_extern_crate, rewrite_mod};\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n use utils::mk_sp;\n-use visitor::{rewrite_extern_crate, FmtVisitor};\n+use visitor::FmtVisitor;\n \n use std::cmp::Ordering;\n "}, {"sha": "35102f58609063d1afab46d31a249f27e473992a", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfb9c9526fd8aaf8e52c363f2841d951c9712d9/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=ecfb9c9526fd8aaf8e52c363f2841d951c9712d9", "patch": "@@ -15,39 +15,17 @@ use syntax::parse::ParseSess;\n \n use attr::*;\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, CodeCharKind, CommentCodeSlices, FindUncommented};\n+use comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n use config::{BraceStyle, Config};\n-use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n-            rewrite_associated_type, rewrite_type_alias, FnSig, StaticParts, StructParts};\n+use items::{format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n+            rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n+            rewrite_type_alias, FnSig, StaticParts, StructParts};\n use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n-use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n-/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n-fn is_mod_decl(item: &ast::Item) -> bool {\n-    match item.node {\n-        ast::ItemKind::Mod(ref m) => m.inner.hi() != item.span.hi(),\n-        _ => false,\n-    }\n-}\n-\n-fn is_use_item(item: &ast::Item) -> bool {\n-    match item.node {\n-        ast::ItemKind::Use(_) => true,\n-        _ => false,\n-    }\n-}\n-\n-fn is_extern_crate(item: &ast::Item) -> bool {\n-    match item.node {\n-        ast::ItemKind::ExternCrate(..) => true,\n-        _ => false,\n-    }\n-}\n-\n /// Creates a string slice corresponding to the specified span.\n pub struct SnippetProvider<'a> {\n     /// A pointer to the content of the file we are formatting.\n@@ -720,15 +698,3 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n     }\n }\n-\n-// Rewrite `extern crate foo;` WITHOUT attributes.\n-pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Option<String> {\n-    assert!(is_extern_crate(item));\n-    let new_str = context.snippet(item.span);\n-    Some(if contains_comment(new_str) {\n-        new_str.to_owned()\n-    } else {\n-        let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n-        String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))\n-    })\n-}"}]}