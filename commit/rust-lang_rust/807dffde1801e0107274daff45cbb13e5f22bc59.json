{"sha": "807dffde1801e0107274daff45cbb13e5f22bc59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwN2RmZmRlMTgwMWUwMTA3Mjc0ZGFmZjQ1Y2JiMTNlNWYyMmJjNTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-22T16:44:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-23T17:33:21Z"}, "message": "Minor library doc copyediting", "tree": {"sha": "3c876c82dba0298f7ac70fa04df1dc187e61f12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c876c82dba0298f7ac70fa04df1dc187e61f12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/807dffde1801e0107274daff45cbb13e5f22bc59", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/807dffde1801e0107274daff45cbb13e5f22bc59", "html_url": "https://github.com/rust-lang/rust/commit/807dffde1801e0107274daff45cbb13e5f22bc59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/807dffde1801e0107274daff45cbb13e5f22bc59/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3f0918ad70cd9b0bfcd2f93aea0218ec92fb87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3f0918ad70cd9b0bfcd2f93aea0218ec92fb87", "html_url": "https://github.com/rust-lang/rust/commit/5f3f0918ad70cd9b0bfcd2f93aea0218ec92fb87"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "49e935f3a8b204b5664128dbec9534baa3af228d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=807dffde1801e0107274daff45cbb13e5f22bc59", "patch": "@@ -88,11 +88,10 @@\n //! ```\n //! extern crate collections;\n //!\n-//! use collections::HashMap;\n //! use std::cell::RefCell;\n //!\n //! struct Graph {\n-//!     edges: HashMap<uint, uint>,\n+//!     edges: Vec<(uint, uint)>,\n //!     span_tree_cache: RefCell<Option<Vec<(uint, uint)>>>\n //! }\n //!"}, {"sha": "342ae17ba3cebe9561cce2f5bfc13f259527cf26", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=807dffde1801e0107274daff45cbb13e5f22bc59", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The Rust Core Library\n+//! # The Rust Core Library\n //!\n //! The Rust Core Library is the dependency-free foundation of [The\n //! Rust Standard Library](../std/index.html). It is the portable glue"}, {"sha": "e4e1e3b76cb9a0f6489fce975fe53fb174f3b573", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=807dffde1801e0107274daff45cbb13e5f22bc59", "patch": "@@ -10,23 +10,18 @@\n \n // FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n \n-//! Conveniences for working with unsafe pointers, the `*T`, and `*mut T` types.\n+//! Operations on unsafe pointers, `*T`, and `*mut T`.\n //!\n-//! Working with unsafe pointers in Rust is fairly uncommon,\n-//! and often limited to some narrow use cases: holding\n-//! an unsafe pointer when safe pointers are unsuitable;\n-//! checking for null; and converting back to safe pointers.\n-//! As a result, there is not yet an abundance of library code\n-//! for working with unsafe pointers, and in particular,\n-//! since pointer math is fairly uncommon in Rust, it is not\n-//! all that convenient.\n+//! Working with unsafe pointers in Rust is uncommon,\n+//! typically limited to a few patterns.\n //!\n //! Use the [`null` function](fn.null.html) to create null pointers,\n //! the [`is_null`](trait.RawPtr.html#tymethod.is_null)\n //! and [`is_not_null`](trait.RawPtr.html#method.is_not_null)\n //! methods of the [`RawPtr` trait](trait.RawPtr.html) to check for null.\n //! The `RawPtr` trait is imported by the prelude, so `is_null` etc.\n-//! work everywhere.\n+//! work everywhere. The `RawPtr` also defines the `offset` method,\n+//! for pointer math.\n //!\n //! # Common ways to create unsafe pointers\n //!\n@@ -316,7 +311,7 @@ pub unsafe fn array_each<T>(arr: **T, cb: |*T|) {\n     array_each_with_len(arr, len, cb);\n }\n \n-/// Extension methods for raw pointers.\n+/// Methods on raw pointers\n pub trait RawPtr<T> {\n     /// Returns the null pointer.\n     fn null() -> Self;"}, {"sha": "eacbb967b50401d1a5c2481d2240d9bae688ce10", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807dffde1801e0107274daff45cbb13e5f22bc59/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=807dffde1801e0107274daff45cbb13e5f22bc59", "patch": "@@ -20,8 +20,7 @@\n //! modules deal with unsafe pointers and memory manipulation.\n //! [`kinds`](../core/kinds/index.html) defines the special built-in traits,\n //! and [`raw`](../core/raw/index.html) the runtime representation of Rust types.\n-//! These are some of the lowest-level building blocks of Rust\n-//! abstractions.\n+//! These are some of the lowest-level building blocks in Rust.\n //!\n //! ## Math on primitive types and math traits\n //!"}]}