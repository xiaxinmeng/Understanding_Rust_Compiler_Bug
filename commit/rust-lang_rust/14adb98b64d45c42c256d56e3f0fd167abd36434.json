{"sha": "14adb98b64d45c42c256d56e3f0fd167abd36434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YWRiOThiNjRkNDVjNDJjMjU2ZDU2ZTNmMGZkMTY3YWJkMzY0MzQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T01:00:08Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T19:12:25Z"}, "message": "Bounded protocols work well enough to compile core, but map reduce has too many type parameters, so we have to get fancier.", "tree": {"sha": "f7a9aa5233ca63cb4f565dd2f28d1240890a446f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a9aa5233ca63cb4f565dd2f28d1240890a446f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14adb98b64d45c42c256d56e3f0fd167abd36434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14adb98b64d45c42c256d56e3f0fd167abd36434", "html_url": "https://github.com/rust-lang/rust/commit/14adb98b64d45c42c256d56e3f0fd167abd36434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14adb98b64d45c42c256d56e3f0fd167abd36434/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dde5e7fc2ed6c1530919a0298bd3691feca3e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dde5e7fc2ed6c1530919a0298bd3691feca3e2f", "html_url": "https://github.com/rust-lang/rust/commit/1dde5e7fc2ed6c1530919a0298bd3691feca3e2f"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "529a5953dd5137a91c58681fdb29e6938921717d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/14adb98b64d45c42c256d56e3f0fd167abd36434/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14adb98b64d45c42c256d56e3f0fd167abd36434/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=14adb98b64d45c42c256d56e3f0fd167abd36434", "patch": "@@ -110,7 +110,8 @@ impl compile of gen_send for message {\n \n             cx.item_fn_poly(self.name(),\n                             args_ast,\n-                            cx.ty_path_ast_builder(path(next.data_name(), span)\n+                            cx.ty_path_ast_builder(path(next.data_name(),\n+                                                        span)\n                                       .add_tys(next_tys)),\n                             self.get_params(),\n                             cx.expr_block(body))\n@@ -230,7 +231,6 @@ impl compile of to_type_decls for state {\n                           self.ty_params));\n         }\n         else {\n-            let ext_cx = cx;\n             vec::push(items,\n                       cx.item_ty_poly(\n                           self.data_name(),\n@@ -240,7 +240,7 @@ impl compile of to_type_decls for state {\n                               .add_tys(~[cx.ty_path_ast_builder(\n                                   (self.proto.name + self.data_name())\n                                   .add_tys(cx.ty_vars(self.ty_params))),\n-                                         #ast[ty] { buffer }])),\n+                                         self.proto.buffer_ty_path(cx)])),\n                           self.ty_params));\n         };\n         items\n@@ -288,7 +288,7 @@ impl compile of gen_init for protocol {\n \n     fn gen_buffer_init(ext_cx: ext_ctxt) -> @ast::expr {\n         ext_cx.rec(self.states.map_to_vec(|s| {\n-            let fty = ext_cx.ty_path_ast_builder(path(s.name, s.span));\n+            let fty = s.to_ty(ext_cx);\n             ext_cx.field_imm(s.name, #ast { pipes::mk_packet::<$(fty)>() })\n         }))\n     }\n@@ -318,19 +318,40 @@ impl compile of gen_init for protocol {\n         }}\n     }\n \n+    fn buffer_ty_path(cx: ext_ctxt) -> @ast::ty {\n+        let mut params = ~[];\n+        for (copy self.states).each |s| {\n+            for s.ty_params.each |tp| {\n+                if !params.contains(tp) {\n+                    vec::push(params, tp);\n+                }\n+            }\n+        }\n+\n+        cx.ty_path_ast_builder(path(@~\"buffer\", self.span)\n+                               .add_tys(cx.ty_vars(params)))\n+    }\n+\n     fn gen_buffer_type(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n-        cx.item_ty(\n+        let mut params = ~[];\n+        let fields = do (copy self.states).map_to_vec |s| {\n+            for s.ty_params.each |tp| {\n+                if !params.contains(tp) {\n+                    vec::push(params, tp);\n+                }\n+            }\n+            let ty = s.to_ty(cx);\n+            let fty = #ast[ty] {\n+                pipes::packet<$(ty)>\n+            };\n+            cx.ty_field_imm(s.name, fty)\n+        };\n+\n+        cx.item_ty_poly(\n             @~\"buffer\",\n-            cx.ty_rec(\n-                (copy self.states).map_to_vec(\n-                    |s| {\n-                        let ty = cx.ty_path_ast_builder(path(s.name, s.span));\n-                        let fty = #ast[ty] {\n-                            pipes::packet<$(ty)>\n-                        };\n-                        cx.ty_field_imm(s.name, fty)\n-                    })))\n+            cx.ty_rec(fields),\n+            params)\n     }\n \n     fn compile(cx: ext_ctxt) -> @ast::item {"}, {"sha": "1adff98f31cabea93fa438cc570f3a37280def44", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14adb98b64d45c42c256d56e3f0fd167abd36434/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14adb98b64d45c42c256d56e3f0fd167abd36434/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=14adb98b64d45c42c256d56e3f0fd167abd36434", "patch": "@@ -74,7 +74,7 @@ enum state {\n }\n \n impl methods for state {\n-    fn add_message(name: ident, span: span, \n+    fn add_message(name: ident, span: span,\n                    +data: ~[@ast::ty], next: next_state) {\n         self.messages.push(message(name, span, data, self,\n                                    next));\n@@ -88,6 +88,7 @@ impl methods for state {\n         self.name\n     }\n \n+    /// Returns the type that is used for the messages.\n     fn to_ty(cx: ext_ctxt) -> @ast::ty {\n         cx.ty_path_ast_builder\n             (path(self.name, self.span).add_tys(cx.ty_vars(self.ty_params)))"}]}