{"sha": "0e1cd5935faf9240850c07afb2b7fd8d582c5e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWNkNTkzNWZhZjkyNDA4NTBjMDdhZmIyYjdmZDhkNTgyYzVlMjU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-03-04T16:23:12Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-03-04T16:23:26Z"}, "message": "Toolstate: remove redundant beta-week check.", "tree": {"sha": "b5807c9e192d332424843f6d1c288d0eaf0e9255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5807c9e192d332424843f6d1c288d0eaf0e9255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1cd5935faf9240850c07afb2b7fd8d582c5e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1cd5935faf9240850c07afb2b7fd8d582c5e25", "html_url": "https://github.com/rust-lang/rust/commit/0e1cd5935faf9240850c07afb2b7fd8d582c5e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1cd5935faf9240850c07afb2b7fd8d582c5e25/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "html_url": "https://github.com/rust-lang/rust/commit/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2"}], "stats": {"total": 39, "additions": 9, "deletions": 30}, "files": [{"sha": "7b41ba371a83a41d6bcdb2f4037266117dad700a", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e1cd5935faf9240850c07afb2b7fd8d582c5e25/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1cd5935faf9240850c07afb2b7fd8d582c5e25/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=0e1cd5935faf9240850c07afb2b7fd8d582c5e25", "patch": "@@ -215,13 +215,18 @@ impl Step for ToolStateCheck {\n                             tool, old_state, state\n                         );\n                     } else {\n+                        // This warning only appears in the logs, which most\n+                        // people won't read. It's mostly here for testing and\n+                        // debugging.\n                         eprintln!(\n                             \"warning: Tool `{}` is not test-pass (is `{}`), \\\n                             this should be fixed before beta is branched.\",\n                             tool, state\n                         );\n                     }\n                 }\n+                // publish_toolstate.py will be responsible for creating\n+                // comments/issues warning people if there is a regression.\n             }\n         }\n \n@@ -230,7 +235,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {\n-            commit_toolstate_change(&toolstates, in_beta_week);\n+            commit_toolstate_change(&toolstates);\n         }\n     }\n \n@@ -373,14 +378,12 @@ fn read_old_toolstate() -> Vec<RepoState> {\n ///\n ///       * See <https://help.github.com/articles/about-commit-email-addresses/>\n ///           if a private email by GitHub is wanted.\n-fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool) {\n-    let old_toolstate = read_old_toolstate();\n-\n+fn commit_toolstate_change(current_toolstate: &ToolstateData) {\n     let message = format!(\"({} CI update)\", OS.expect(\"linux/windows only\"));\n     let mut success = false;\n     for _ in 1..=5 {\n         // Update the toolstate results (the new commit-to-toolstate mapping) in the toolstate repo.\n-        change_toolstate(&current_toolstate, &old_toolstate, in_beta_week);\n+        change_toolstate(&current_toolstate);\n \n         // `git commit` failing means nothing to commit.\n         let status = t!(Command::new(\"git\")\n@@ -429,31 +432,7 @@ fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool\n     }\n }\n \n-fn change_toolstate(\n-    current_toolstate: &ToolstateData,\n-    old_toolstate: &[RepoState],\n-    in_beta_week: bool,\n-) {\n-    let mut regressed = false;\n-    for repo_state in old_toolstate {\n-        let tool = &repo_state.tool;\n-        let state = repo_state.state();\n-        let new_state = current_toolstate[tool.as_str()];\n-\n-        if new_state != state {\n-            eprintln!(\"The state of `{}` has changed from `{}` to `{}`\", tool, state, new_state);\n-            if new_state < state {\n-                if !NIGHTLY_TOOLS.iter().any(|(name, _path)| name == tool) {\n-                    regressed = true;\n-                }\n-            }\n-        }\n-    }\n-\n-    if regressed && in_beta_week {\n-        std::process::exit(1);\n-    }\n-\n+fn change_toolstate(current_toolstate: &ToolstateData) {\n     let commit = t!(std::process::Command::new(\"git\").arg(\"rev-parse\").arg(\"HEAD\").output());\n     let commit = t!(String::from_utf8(commit.stdout));\n "}]}