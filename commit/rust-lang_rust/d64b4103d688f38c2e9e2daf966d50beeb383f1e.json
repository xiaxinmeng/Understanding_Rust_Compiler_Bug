{"sha": "d64b4103d688f38c2e9e2daf966d50beeb383f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGI0MTAzZDY4OGYzOGMyZTllMmRhZjk2NmQ1MGJlZWIzODNmMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-26T21:47:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-26T21:47:47Z"}, "message": "auto merge of #17464 : pcwalton/rust/inherent-methods-on-equal-footing, r=nikomatsakis\n\nover inherent methods accessible via more autoderefs.\r\n\r\nThis simplifies the trait matching algorithm. It breaks code like:\r\n\r\n    impl Foo {\r\n        fn foo(self) {\r\n            // before this change, this will be called\r\n        }\r\n    }\r\n\r\n    impl<'a,'b,'c> Trait for &'a &'b &'c Foo {\r\n        fn foo(self) {\r\n            // after this change, this will be called\r\n        }\r\n    }\r\n\r\n    fn main() {\r\n        let x = &(&(&Foo));\r\n        x.foo();\r\n    }\r\n\r\nTo explicitly indicate that you wish to call the inherent method, perform\r\nexplicit dereferences. For example:\r\n\r\n    fn main() {\r\n        let x = &(&(&Foo));\r\n        (***x).foo();\r\n    }\r\n\r\nPart of #17282.\r\n\r\n[breaking-change]\r\n\r\nr? @nikomatsakis", "tree": {"sha": "5242f7c1eae334e68e7709667a0f63b850e9beaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5242f7c1eae334e68e7709667a0f63b850e9beaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64b4103d688f38c2e9e2daf966d50beeb383f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64b4103d688f38c2e9e2daf966d50beeb383f1e", "html_url": "https://github.com/rust-lang/rust/commit/d64b4103d688f38c2e9e2daf966d50beeb383f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64b4103d688f38c2e9e2daf966d50beeb383f1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d653c17a656e8fe1572c7a695e33b188eda0597", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d653c17a656e8fe1572c7a695e33b188eda0597", "html_url": "https://github.com/rust-lang/rust/commit/5d653c17a656e8fe1572c7a695e33b188eda0597"}, {"sha": "21df9c805f6e0101cff7a04391c6c5fcff8056df", "url": "https://api.github.com/repos/rust-lang/rust/commits/21df9c805f6e0101cff7a04391c6c5fcff8056df", "html_url": "https://github.com/rust-lang/rust/commit/21df9c805f6e0101cff7a04391c6c5fcff8056df"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "141b03d9b9f17c2d00f36e27d42e1208f1ba380f", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -158,13 +158,7 @@ pub fn lookup<'a, 'tcx>(\n \n     debug!(\"searching inherent candidates\");\n     lcx.push_inherent_candidates(self_ty);\n-    let mme = lcx.search(self_ty);\n-    if mme.is_some() {\n-        return mme;\n-    }\n-\n     debug!(\"searching extension candidates\");\n-    lcx.reset_candidates();\n     lcx.push_bound_candidates(self_ty, None);\n     lcx.push_extension_candidates(expr.id);\n     lcx.search(self_ty)\n@@ -425,11 +419,6 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n     // ______________________________________________________________________\n     // Candidate collection (see comment at start of file)\n \n-    fn reset_candidates(&mut self) {\n-        self.inherent_candidates = Vec::new();\n-        self.extension_candidates = Vec::new();\n-    }\n-\n     fn push_inherent_candidates(&mut self, self_ty: ty::t) {\n         /*!\n          * Collect all inherent candidates into"}, {"sha": "fcb613426fcb54182faa2b70c61671dec1a82d8f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -881,7 +881,8 @@ impl Repr for ty::Variance {\n         // The first `.to_string()` returns a &'static str (it is not an implementation\n         // of the ToString trait). Because of that, we need to call `.to_string()` again\n         // if we want to have a `String`.\n-        self.to_string().to_string()\n+        let result: &'static str = (*self).to_string();\n+        result.to_string()\n     }\n }\n "}, {"sha": "81e05648567b23a0b82fe691ac8a70cb495630c1", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -946,11 +946,14 @@ pub trait Reader {\n }\n \n impl<'a> Reader for Box<Reader+'a> {\n-    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.read(buf) }\n+    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n+        let reader: &mut Reader = &mut **self;\n+        reader.read(buf)\n+    }\n }\n \n impl<'a> Reader for &'a mut Reader+'a {\n-    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.read(buf) }\n+    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { (*self).read(buf) }\n }\n \n /// Returns a slice of `v` between `start` and `end`.\n@@ -1281,10 +1284,14 @@ pub trait Writer {\n \n impl<'a> Writer for Box<Writer+'a> {\n     #[inline]\n-    fn write(&mut self, buf: &[u8]) -> IoResult<()> { self.write(buf) }\n+    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n+        (&mut **self).write(buf)\n+    }\n \n     #[inline]\n-    fn flush(&mut self) -> IoResult<()> { self.flush() }\n+    fn flush(&mut self) -> IoResult<()> {\n+        (&mut **self).flush()\n+    }\n }\n \n impl<'a> Writer for &'a mut Writer+'a {"}, {"sha": "cfee1a812311bb0c891abab3d892cf12d52ea6b2", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -15,7 +15,7 @@ use std::to_string::ToString;\n use cci_class_cast::kitty::cat;\n \n fn print_out(thing: Box<ToString>, expected: String) {\n-  let actual = thing.to_string();\n+  let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }"}, {"sha": "86d7b72f4ffd0c28c60d902df379ea62c21eccd0", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -58,7 +58,7 @@ impl fmt::Show for cat {\n }\n \n fn print_out(thing: Box<ToString>, expected: String) {\n-  let actual = thing.to_string();\n+  let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }"}, {"sha": "416c070180454e4b4cec12686f596bf3b5b5062c", "filename": "src/test/run-pass/inherent-trait-method-order.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[allow(dead_code)]\n+    fn foo(self) {\n+        fail!(\"wrong method!\")\n+    }\n+}\n+\n+trait Trait {\n+    fn foo(self);\n+}\n+\n+impl<'a,'b,'c> Trait for &'a &'b &'c Foo {\n+    fn foo(self) {\n+        // ok\n+    }\n+}\n+\n+fn main() {\n+    let x = &(&(&Foo));\n+    x.foo();\n+}\n+"}, {"sha": "9c09b8cd1c7232e601689742ec8ac27c36f5c155", "filename": "src/test/run-pass/issue-3702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64b4103d688f38c2e9e2daf966d50beeb383f1e/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3702.rs?ref=d64b4103d688f38c2e9e2daf966d50beeb383f1e", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n   }\n \n   fn to_string(t: Box<Text>) {\n-    println!(\"{}\", t.to_string());\n+    println!(\"{}\", (*t).to_string());\n   }\n \n }"}]}