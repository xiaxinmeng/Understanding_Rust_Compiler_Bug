{"sha": "5a21661ce54bf2485e90d21282e1fe7be45879af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjE2NjFjZTU0YmYyNDg1ZTkwZDIxMjgyZTFmZTdiZTQ1ODc5YWY=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-28T20:40:13Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-28T20:40:13Z"}, "message": "Some bugfixing", "tree": {"sha": "ac82e98ede3caab7e9b49aedbe68a03dedb94399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac82e98ede3caab7e9b49aedbe68a03dedb94399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a21661ce54bf2485e90d21282e1fe7be45879af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a21661ce54bf2485e90d21282e1fe7be45879af", "html_url": "https://github.com/rust-lang/rust/commit/5a21661ce54bf2485e90d21282e1fe7be45879af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a21661ce54bf2485e90d21282e1fe7be45879af/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "html_url": "https://github.com/rust-lang/rust/commit/ce0dc9b70e1f021043bb3b4edfb8068590bc8325"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "970aeef623ee82bce9490d46e129d6fa343abee7", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5a21661ce54bf2485e90d21282e1fe7be45879af/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a21661ce54bf2485e90d21282e1fe7be45879af/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=5a21661ce54bf2485e90d21282e1fe7be45879af", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{higher, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, Lit, UnOp};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Lit, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n@@ -409,22 +409,46 @@ fn is_zero(expr: &Expr<'_>) -> bool {\n }\n \n fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-//    if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n-        // Check for the positive-first variant\n-//        if let ExprKind::Unary(UnOp::UnNeg, expr) = else_body.kind {\n-//            if are_exprs_equal(cx, expr, body) && is_testing_positive(cx, cond, body) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    SUBOPTIMAL_FLOPS,\n-                    expr.span,\n-                    \"This looks like you've implemented your own absolute value function\",\n-                    \"try\",\n-                    \"a.abs()\".to_string(),//format!(\"{:?}.abs()\", body),\n-                    Applicability::MachineApplicable,\n-                );\n-//            }\n-//        }\n-//    }\n+    if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n+        if let ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr:\n+                    Some(Expr {\n+                        kind: ExprKind::Unary(UnOp::UnNeg, else_expr),\n+                        ..\n+                    }),\n+                ..\n+            },\n+            _,\n+        ) = else_body.kind\n+        {\n+            if let ExprKind::Block(\n+                Block {\n+                    stmts: [],\n+                    expr: Some(body),\n+                    ..\n+                },\n+                _,\n+            ) = &body.kind\n+            {\n+                if are_exprs_equal(cx, else_expr, body) {\n+                    dbg!(\"if (cond) body else -body\\nbody: {:?}\", &body.kind);\n+                    if is_testing_positive(cx, cond, body) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SUBOPTIMAL_FLOPS,\n+                            expr.span,\n+                            \"This looks like you've implemented your own absolute value function\",\n+                            \"try\",\n+                            format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {"}, {"sha": "0efc7092899a71f7d891b2eb2766f5c86e22fc8e", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5a21661ce54bf2485e90d21282e1fe7be45879af/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a21661ce54bf2485e90d21282e1fe7be45879af/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=5a21661ce54bf2485e90d21282e1fe7be45879af", "patch": "@@ -1,4 +1,8 @@\n #[warn(clippy::suboptimal_flops)]\n+struct A {\n+    a: f64,\n+    b: f64\n+}\n \n fn fake_abs1(num: f64) -> f64 {\n     if num >= 0.0 {\n@@ -16,6 +20,14 @@ fn fake_abs2(num: f64) -> f64 {\n     }\n }\n \n+fn fake_abs3(a: A) -> f64 {\n+    if a.a > 0.0 {\n+        a.a\n+    } else {\n+        -a.a\n+    }\n+}\n+\n fn fake_nabs1(num: f64) -> f64 {\n     if num < 0.0 {\n         num\n@@ -32,6 +44,14 @@ fn fake_nabs2(num: f64) -> f64 {\n     }\n }\n \n+fn fake_nabs3(a: A) -> A {\n+    A { a: if a.a >= 0.0 {\n+            a.a\n+        } else {\n+            -a.a\n+        }, b: a.b }\n+}\n+\n fn not_fake_abs1(num: f64) -> f64 {\n     if num > 0.0 {\n         num\n@@ -56,4 +76,20 @@ fn not_fake_abs3(num1: f64, num2: f64) -> f64 {\n     }\n }\n \n+fn not_fake_abs4(a: A) -> f64 {\n+    if a.a > 0.0 {\n+        a.b\n+    } else {\n+        -a.b\n+    }\n+}\n+\n+fn not_fake_abs5(a: A) -> f64 {\n+    if a.a > 0.0 {\n+        a.a\n+    } else {\n+        -a.b\n+    }\n+}\n+\n fn main() {}"}, {"sha": "bbd67de17c00090f3e83b14c98da7eb672cdf4dd", "filename": "tests/ui/floating_point_abs.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a21661ce54bf2485e90d21282e1fe7be45879af/tests%2Fui%2Ffloating_point_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a21661ce54bf2485e90d21282e1fe7be45879af/tests%2Fui%2Ffloating_point_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.stderr?ref=5a21661ce54bf2485e90d21282e1fe7be45879af", "patch": "@@ -0,0 +1,14 @@\n+error: This looks like you've implemented your own absolute value function\n+  --> $DIR/floating_point_abs.rs:4:5\n+   |\n+LL | /     if num >= 0.0 {\n+LL | |         num\n+LL | |     } else {\n+LL | |         -num\n+LL | |     }\n+   | |_____^ help: try: `num.abs()`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}