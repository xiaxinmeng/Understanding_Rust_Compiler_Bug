{"sha": "077979f4a284ff6d3725a6933896330692b9d468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Nzk3OWY0YTI4NGZmNmQzNzI1YTY5MzM4OTYzMzA2OTJiOWQ0Njg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-10T06:23:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-10T06:23:57Z"}, "message": "Rollup merge of #48015 - o01eg:disableable-installation, r=alexcrichton\n\nCustomizable extended tools\n\nThis PR adds `build.tools` option to manage installation of extended rust tools.\n\nBy default it doesn't change installation. All tools are built and `rls` and `rustfmt` allowed to fail installation.\n\nIf some set of tools chosen only those tools are built and installed without any fails allowed.\n\nIt solves some slotting issues with extended build enabled: https://bugs.gentoo.org/show_bug.cgi?id=645498", "tree": {"sha": "b7292d101c65e1054c7f45ab323e1401a4433475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7292d101c65e1054c7f45ab323e1401a4433475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077979f4a284ff6d3725a6933896330692b9d468", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJafo/9CRBK7hj4Ov3rIwAAdHIIACLP8Pv+MZ8mgnY0sIP+x41O\nuQtn9gf/lug8VZDNh++1gtePxp88r1yUcVFnb2Kx1ccotE3TCc/CjJqHOJby1Cwt\nmGmgAa34iugoZ8jmW7Rg6TPrYQEd1pIAbgoFQSZ0ON053cj793BLHZvpe+7UhcSk\nZ5Fxe4zfuqBmEf6I/NFWgN3oFElcj3Pvm+HxUtWjwO74ERqhC91bpGnKWFx/cjoQ\nLEYIsOHSZph+9iUO6jGq3PpEggHlyXRYyj8HNvFjoo2Y6T3Pmzq7ocrDhDnzFLE4\nO7IkJPrBHlYtc7pyAbb4YxTP8YAZB3NDpnd29pkdLVMAx335HEsxkYMpMJCGwL4=\n=Bt8h\n-----END PGP SIGNATURE-----\n", "payload": "tree b7292d101c65e1054c7f45ab323e1401a4433475\nparent 262703cbbe7840cf6ad22d110016583e65102a79\nparent 78a0b7fd466093003841cec6fd20d65270cf2175\nauthor kennytm <kennytm@gmail.com> 1518243837 +0800\ncommitter GitHub <noreply@github.com> 1518243837 +0800\n\nRollup merge of #48015 - o01eg:disableable-installation, r=alexcrichton\n\nCustomizable extended tools\n\nThis PR adds `build.tools` option to manage installation of extended rust tools.\n\nBy default it doesn't change installation. All tools are built and `rls` and `rustfmt` allowed to fail installation.\n\nIf some set of tools chosen only those tools are built and installed without any fails allowed.\n\nIt solves some slotting issues with extended build enabled: https://bugs.gentoo.org/show_bug.cgi?id=645498\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077979f4a284ff6d3725a6933896330692b9d468", "html_url": "https://github.com/rust-lang/rust/commit/077979f4a284ff6d3725a6933896330692b9d468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077979f4a284ff6d3725a6933896330692b9d468/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "262703cbbe7840cf6ad22d110016583e65102a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/262703cbbe7840cf6ad22d110016583e65102a79", "html_url": "https://github.com/rust-lang/rust/commit/262703cbbe7840cf6ad22d110016583e65102a79"}, {"sha": "78a0b7fd466093003841cec6fd20d65270cf2175", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a0b7fd466093003841cec6fd20d65270cf2175", "html_url": "https://github.com/rust-lang/rust/commit/78a0b7fd466093003841cec6fd20d65270cf2175"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "f153562a5389471c199e6afbcd5d59549a2dd95e", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077979f4a284ff6d3725a6933896330692b9d468/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/077979f4a284ff6d3725a6933896330692b9d468/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=077979f4a284ff6d3725a6933896330692b9d468", "patch": "@@ -151,6 +151,10 @@\n # default.\n #extended = false\n \n+# Installs choosen set of extended tools if enables. By default builds all.\n+# If choosen tool failed to build the installation fails.\n+#tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\n+\n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n #verbose = 0\n "}, {"sha": "4f4fd14ae8cabcc8c1c64635b35214b690c727a3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=077979f4a284ff6d3725a6933896330692b9d468", "patch": "@@ -13,7 +13,7 @@\n //! This module implements parsing `config.toml` configuration files to tweak\n //! how the build runs.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n@@ -52,6 +52,7 @@ pub struct Config {\n     pub target_config: HashMap<Interned<String>, Target>,\n     pub full_bootstrap: bool,\n     pub extended: bool,\n+    pub tools: Option<HashSet<String>>,\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub ignore_git: bool,\n@@ -191,6 +192,7 @@ struct Build {\n     python: Option<String>,\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n+    tools: Option<HashSet<String>>,\n     verbose: Option<usize>,\n     sanitizers: Option<bool>,\n     profiler: Option<bool>,\n@@ -395,6 +397,7 @@ impl Config {\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n+        config.tools = build.tools;\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n         set(&mut config.profiler, build.profiler);"}, {"sha": "99a3ee4e4c3695f7c82f07601968b33df3c38285", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=077979f4a284ff6d3725a6933896330692b9d468", "patch": "@@ -144,6 +144,7 @@ def v(*args):\n o(\"full-bootstrap\", \"build.full-bootstrap\", \"build three compilers instead of two\")\n o(\"extended\", \"build.extended\", \"build an extended rust tool set\")\n \n+v(\"tools\", \"build.tools\", \"List of extended tools will be installed\")\n v(\"build\", \"build.build\", \"GNUs ./configure syntax LLVM build triple\")\n v(\"host\", None, \"GNUs ./configure syntax LLVM host triples\")\n v(\"target\", None, \"GNUs ./configure syntax LLVM target triples\")"}, {"sha": "20f7d379a6967a45700f87a4de5d767e609a6b65", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077979f4a284ff6d3725a6933896330692b9d468/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=077979f4a284ff6d3725a6933896330692b9d468", "patch": "@@ -22,6 +22,7 @@ use dist::{self, pkgname, sanitize_sh, tmpdir};\n \n use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n+use config::Config;\n \n pub fn install_docs(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"docs\", \"rust-docs\", stage, Some(host));\n@@ -144,6 +145,19 @@ macro_rules! install {\n             pub host: Interned<String>,\n         }\n \n+        impl $name {\n+            #[allow(dead_code)]\n+            fn should_build(config: &Config) -> bool {\n+                config.extended && config.tools.as_ref()\n+                    .map_or(true, |t| t.contains($path))\n+            }\n+\n+            #[allow(dead_code)]\n+            fn should_install(builder: &Builder) -> bool {\n+                builder.config.tools.as_ref().map_or(false, |t| t.contains($path))\n+            }\n+        }\n+\n         impl Step for $name {\n             type Output = ();\n             const DEFAULT: bool = true;\n@@ -185,32 +199,34 @@ install!((self, builder, _config),\n             install_std(builder, self.stage, *target);\n         }\n     };\n-    Cargo, \"cargo\", _config.extended, only_hosts: true, {\n+    Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n         install_cargo(builder, self.stage, self.target);\n     };\n-    Rls, \"rls\", _config.extended, only_hosts: true, {\n-        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() {\n+    Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n+        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() ||\n+            Self::should_install(builder) {\n             install_rls(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install RLS stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Rustfmt, \"rustfmt\", _config.extended, only_hosts: true, {\n-        if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() {\n+    Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n+        if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n+            Self::should_install(builder) {\n             install_rustfmt(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Analysis, \"analysis\", _config.extended, only_hosts: false, {\n+    Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", _config.extended, only_hosts: true, {\n+    Src, \"src\", Self::should_build(_config) , only_hosts: true, {\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;"}]}