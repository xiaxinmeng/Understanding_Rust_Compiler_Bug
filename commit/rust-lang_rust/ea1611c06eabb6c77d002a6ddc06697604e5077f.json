{"sha": "ea1611c06eabb6c77d002a6ddc06697604e5077f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTYxMWMwNmVhYmI2Yzc3ZDAwMmE2ZGRjMDY2OTc2MDRlNTA3N2Y=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-23T04:05:07Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:27:50Z"}, "message": "feat(config): expose all width heurstic options", "tree": {"sha": "a1d13505e2fd2ac4499e1a91386f552a0e7e11f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d13505e2fd2ac4499e1a91386f552a0e7e11f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1611c06eabb6c77d002a6ddc06697604e5077f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1611c06eabb6c77d002a6ddc06697604e5077f", "html_url": "https://github.com/rust-lang/rust/commit/ea1611c06eabb6c77d002a6ddc06697604e5077f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1611c06eabb6c77d002a6ddc06697604e5077f/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "html_url": "https://github.com/rust-lang/rust/commit/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1"}], "stats": {"total": 173, "additions": 151, "deletions": 22}, "files": [{"sha": "7407ac0c03c83f41ab33f58faf62c1231d2f4d6d", "filename": "src/config/config_type.rs", "status": "modified", "additions": 99, "deletions": 11, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=ea1611c06eabb6c77d002a6ddc06697604e5077f", "patch": "@@ -95,7 +95,15 @@ macro_rules! create_config {\n             pub fn $i(&mut self, value: $ty) {\n                 (self.0).$i.2 = value;\n                 match stringify!($i) {\n-                    \"max_width\" | \"use_small_heuristics\" => self.0.set_heuristics(),\n+                    \"max_width\"\n+                    | \"use_small_heuristics\"\n+                    | \"fn_call_width\"\n+                    | \"single_line_if_else_max_width\"\n+                    | \"attr_fn_like_width\"\n+                    | \"struct_lit_width\"\n+                    | \"struct_variant_width\"\n+                    | \"array_width\"\n+                    | \"chain_width\" => self.0.set_heuristics(),\n                     \"license_template_path\" => self.0.set_license_template(),\n                     \"merge_imports\" => self.0.set_merge_imports(),\n                     &_ => (),\n@@ -230,7 +238,15 @@ macro_rules! create_config {\n                 }\n \n                 match key {\n-                    \"max_width\" | \"use_small_heuristics\" => self.set_heuristics(),\n+                    \"max_width\"\n+                    | \"use_small_heuristics\"\n+                    | \"fn_call_width\"\n+                    | \"single_line_if_else_max_width\"\n+                    | \"attr_fn_like_width\"\n+                    | \"struct_lit_width\"\n+                    | \"struct_variant_width\"\n+                    | \"array_width\"\n+                    | \"chain_width\" => self.set_heuristics(),\n                     \"license_template_path\" => self.set_license_template(),\n                     \"merge_imports\" => self.set_merge_imports(),\n                     &_ => (),\n@@ -281,16 +297,88 @@ macro_rules! create_config {\n                 )+\n             }\n \n+            fn set_width_heuristics(&mut self, heuristics: WidthHeuristics) {\n+                let max_width = self.max_width.2;\n+                let get_width_value = |\n+                    was_set: bool,\n+                    override_value: usize,\n+                    heuristic_value: usize,\n+                    config_key: &str,\n+                | -> usize {\n+                    if !was_set {\n+                        return heuristic_value;\n+                    }\n+                    if override_value > max_width {\n+                        panic!(\"`{}` cannot have a value that exceeds `max_width`\", config_key);\n+                    }\n+                    override_value\n+                };\n+\n+                let fn_call_width = get_width_value(\n+                    self.was_set().fn_call_width(),\n+                    self.fn_call_width.2,\n+                    heuristics.fn_call_width,\n+                    \"fn_call_width\",\n+                );\n+                self.fn_call_width.2 = fn_call_width;\n+\n+                let attr_fn_like_width = get_width_value(\n+                    self.was_set().attr_fn_like_width(),\n+                    self.attr_fn_like_width.2,\n+                    heuristics.attr_fn_like_width,\n+                    \"attr_fn_like_width\",\n+                );\n+                self.attr_fn_like_width.2 = attr_fn_like_width;\n+\n+                let struct_lit_width = get_width_value(\n+                    self.was_set().struct_lit_width(),\n+                    self.struct_lit_width.2,\n+                    heuristics.struct_lit_width,\n+                    \"struct_lit_width\",\n+                );\n+                self.struct_lit_width.2 = struct_lit_width;\n+\n+                let struct_variant_width = get_width_value(\n+                    self.was_set().struct_variant_width(),\n+                    self.struct_variant_width.2,\n+                    heuristics.struct_variant_width,\n+                    \"struct_variant_width\",\n+                );\n+                self.struct_variant_width.2 = struct_variant_width;\n+\n+                let array_width = get_width_value(\n+                    self.was_set().array_width(),\n+                    self.array_width.2,\n+                    heuristics.array_width,\n+                    \"array_width\",\n+                );\n+                self.array_width.2 = array_width;\n+\n+                let chain_width = get_width_value(\n+                    self.was_set().chain_width(),\n+                    self.chain_width.2,\n+                    heuristics.chain_width,\n+                    \"chain_width\",\n+                );\n+                self.chain_width.2 = chain_width;\n+\n+                let single_line_if_else_max_width = get_width_value(\n+                    self.was_set().single_line_if_else_max_width(),\n+                    self.single_line_if_else_max_width.2,\n+                    heuristics.single_line_if_else_max_width,\n+                    \"single_line_if_else_max_width\",\n+                );\n+                self.single_line_if_else_max_width.2 = single_line_if_else_max_width;\n+            }\n+\n             fn set_heuristics(&mut self) {\n-                if self.use_small_heuristics.2 == Heuristics::Default {\n-                    let max_width = self.max_width.2;\n-                    self.set().width_heuristics(WidthHeuristics::scaled(max_width));\n-                } else if self.use_small_heuristics.2 == Heuristics::Max {\n-                    let max_width = self.max_width.2;\n-                    self.set().width_heuristics(WidthHeuristics::set(max_width));\n-                } else {\n-                    self.set().width_heuristics(WidthHeuristics::null());\n-                }\n+                let max_width = self.max_width.2;\n+                match self.use_small_heuristics.2 {\n+                    Heuristics::Default =>\n+                        self.set_width_heuristics(WidthHeuristics::scaled(max_width)),\n+                    Heuristics::Max => self.set_width_heuristics(WidthHeuristics::set(max_width)),\n+                    Heuristics::Off => self.set_width_heuristics(WidthHeuristics::null()),\n+                };\n             }\n \n             fn set_license_template(&mut self) {"}, {"sha": "f16273423ff076a85c74fd3313b4fe5fa5910e47", "filename": "src/config/mod.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=ea1611c06eabb6c77d002a6ddc06697604e5077f", "patch": "@@ -35,9 +35,26 @@ create_config! {\n     hard_tabs: bool, false, true, \"Use tab characters for indentation, spaces for alignment\";\n     tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n     newline_style: NewlineStyle, NewlineStyle::Auto, true, \"Unix or Windows line endings\";\n+    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items\";\n+\n+    // Width Heuristics\n     use_small_heuristics: Heuristics, Heuristics::Default, true, \"Whether to use different \\\n         formatting for items and expressions if they satisfy a heuristic notion of 'small'\";\n-    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items\";\n+    width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n+        \"'small' heuristic values\";\n+    fn_call_width: usize, 60, true, \"Maximum width of the args of a function call before \\\n+        falling back to vertical formatting.\";\n+    attr_fn_like_width: usize, 70, true, \"Maximum width of the args of a function-like \\\n+        attributes before falling back to vertical formatting.\";\n+    struct_lit_width: usize, 18, true, \"Maximum width in the body of a struct lit before \\\n+        falling back to vertical formatting.\";\n+    struct_variant_width: usize, 35, true, \"Maximum width in the body of a struct variant before \\\n+        falling back to vertical formatting.\";\n+    array_width: usize, 60, true,  \"Maximum width of an array literal before falling \\\n+        back to vertical formatting.\";\n+    chain_width: usize, 60, true, \"Maximum length of a chain to fit on a single line.\";\n+    single_line_if_else_max_width: usize, 50, true, \"Maximum line length for single line if-else \\\n+        expressions. A value of zero means always break if-else expressions.\";\n \n     // Comments. macros, and strings\n     wrap_comments: bool, false, false, \"Break comments to fit on the line\";\n@@ -154,8 +171,6 @@ create_config! {\n     file_lines: FileLines, FileLines::all(), false,\n         \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n          via the --file-lines option\";\n-    width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n-        \"'small' heuristic values\";\n     emit_mode: EmitMode, EmitMode::Files, false,\n         \"What emit Mode to use when none is supplied\";\n     make_backup: bool, false, false, \"Backup changed files\";\n@@ -394,9 +409,6 @@ mod test {\n         create_config! {\n             // Options that are used by the generated functions\n             max_width: usize, 100, true, \"Maximum width of each line\";\n-            use_small_heuristics: Heuristics, Heuristics::Default, true,\n-                \"Whether to use different formatting for items and \\\n-                 expressions if they satisfy a heuristic notion of 'small'.\";\n             license_template_path: String, String::default(), false,\n                 \"Beginning of file must match license template\";\n             required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n@@ -408,13 +420,33 @@ mod test {\n             file_lines: FileLines, FileLines::all(), false,\n                 \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n                     via the --file-lines option\";\n-            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n-                \"'small' heuristic values\";\n+\n             // merge_imports deprecation\n             imports_granularity: ImportGranularity, ImportGranularity::Preserve, false,\n                 \"Merge imports\";\n             merge_imports: bool, false, false, \"(deprecated: use imports_granularity instead)\";\n \n+            // Width Heuristics\n+            use_small_heuristics: Heuristics, Heuristics::Default, true,\n+                \"Whether to use different formatting for items and \\\n+                 expressions if they satisfy a heuristic notion of 'small'.\";\n+            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n+                \"'small' heuristic values\";\n+\n+            fn_call_width: usize, 60, true, \"Maximum width of the args of a function call before \\\n+                falling back to vertical formatting.\";\n+            attr_fn_like_width: usize, 70, true, \"Maximum width of the args of a function-like \\\n+                attributes before falling back to vertical formatting.\";\n+            struct_lit_width: usize, 18, true, \"Maximum width in the body of a struct lit before \\\n+                falling back to vertical formatting.\";\n+            struct_variant_width: usize, 35, true, \"Maximum width in the body of a struct \\\n+                variant before falling back to vertical formatting.\";\n+            array_width: usize, 60, true,  \"Maximum width of an array literal before falling \\\n+                back to vertical formatting.\";\n+            chain_width: usize, 60, true, \"Maximum length of a chain to fit on a single line.\";\n+            single_line_if_else_max_width: usize, 50, true, \"Maximum line length for single \\\n+                line if-else expressions. A value of zero means always break if-else expressions.\";\n+\n             // Options that are used by the tests\n             stable_option: bool, false, true, \"A stable option\";\n             unstable_option: bool, false, false, \"An unstable option\";\n@@ -519,8 +551,15 @@ mod test {\n hard_tabs = false\n tab_spaces = 4\n newline_style = \"Auto\"\n-use_small_heuristics = \"Default\"\n indent_style = \"Block\"\n+use_small_heuristics = \"Default\"\n+fn_call_width = 60\n+attr_fn_like_width = 70\n+struct_lit_width = 18\n+struct_variant_width = 35\n+array_width = 60\n+chain_width = 60\n+single_line_if_else_max_width = 50\n wrap_comments = false\n format_code_in_doc_comments = false\n comment_width = 80"}, {"sha": "3b91021813c16a164df655535c8ecbfb28f26915", "filename": "src/config/options.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1611c06eabb6c77d002a6ddc06697604e5077f/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=ea1611c06eabb6c77d002a6ddc06697604e5077f", "patch": "@@ -79,13 +79,15 @@ pub enum TypeDensity {\n }\n \n #[config_type]\n-/// To what extent does rustfmt pursue its heuristics?\n+/// Heuristic settings that can be used to simply\n+/// the configuration of the granular width configurations\n+/// like `struct_lit_width`, `array_width`, etc.\n pub enum Heuristics {\n     /// Turn off any heuristics\n     Off,\n     /// Turn on max heuristics\n     Max,\n-    /// Use Rustfmt's defaults\n+    /// Use scaled values based on the value of `max_width`\n     Default,\n }\n "}]}