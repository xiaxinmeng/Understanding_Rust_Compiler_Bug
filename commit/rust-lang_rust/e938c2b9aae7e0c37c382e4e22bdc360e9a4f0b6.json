{"sha": "e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzhjMmI5YWFlN2UwYzM3YzM4MmU0ZTIyYmRjMzYwZTlhNGYwYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T19:52:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T19:52:05Z"}, "message": "Auto merge of #60211 - Centril:rollup-akw4r85, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #59823 ([wg-async-await] Drop `async fn` arguments in async block )\n - #59839 (Warn on unused results for operation methods on nums)\n - #60146 (Update fonts used by rustdoc)\n - #60169 (Warn when ignore-tidy-linelength is present, but no lines are too long)\n - #60177 (Promote rust comments to rustdoc)\n - #60191 (Add f16c target_feature)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4c16f95720b55ef5c1e387e81cae2c010a3427b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c16f95720b55ef5c1e387e81cae2c010a3427b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "html_url": "https://github.com/rust-lang/rust/commit/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff8526a789e0dfa8b97f7dec91b7b5c18e8544", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff8526a789e0dfa8b97f7dec91b7b5c18e8544", "html_url": "https://github.com/rust-lang/rust/commit/4eff8526a789e0dfa8b97f7dec91b7b5c18e8544"}, {"sha": "0353fa5b90d74520052158d27578ed41fcc229e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0353fa5b90d74520052158d27578ed41fcc229e4", "html_url": "https://github.com/rust-lang/rust/commit/0353fa5b90d74520052158d27578ed41fcc229e4"}], "stats": {"total": 1728, "additions": 1182, "deletions": 546}, "files": [{"sha": "dad9792233847fd7ad77a28fc72dc4d5aa439a6a", "filename": "src/ci/docker/dist-various-1/install-x86_64-redox.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n #!/usr/bin/env bash\n-# ignore-tidy-linelength\n \n set -ex\n "}, {"sha": "3b91918288a2b5d72438a64ff81707f4d59b83f1", "filename": "src/ci/docker/dist-various-2/build-fuchsia-toolchain.sh", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,5 @@\n #!/usr/bin/env bash\n \n-# ignore-tidy-linelength\n-\n set -ex\n source shared.sh\n "}, {"sha": "f1325f383eedb5454c89fe8cae95e1a7a1af3225", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -377,6 +377,8 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_left(n) as Self\n@@ -401,6 +403,8 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_right(n) as Self\n@@ -598,6 +602,8 @@ assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -620,6 +626,8 @@ assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -642,6 +650,8 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -665,6 +675,8 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_div(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n@@ -691,6 +703,8 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n@@ -718,6 +732,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n@@ -745,6 +761,8 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n@@ -791,6 +809,8 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -812,6 +832,8 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n@@ -860,6 +882,8 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -901,6 +925,8 @@ $EndFeature, \"\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -924,6 +950,8 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -947,6 +975,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn saturating_mul(self, rhs: Self) -> Self {\n                 self.checked_mul(rhs).unwrap_or_else(|| {\n@@ -976,6 +1006,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -1001,6 +1033,8 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 intrinsics::overflowing_add(self, rhs)\n@@ -1022,6 +1056,8 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 intrinsics::overflowing_sub(self, rhs)\n@@ -1042,6 +1078,8 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n                 intrinsics::overflowing_mul(self, rhs)\n@@ -1070,6 +1108,8 @@ assert_eq!((-128i8).wrapping_div(-1), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_div(self, rhs: Self) -> Self {\n                 self.overflowing_div(rhs).0\n@@ -1098,6 +1138,8 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_div_euclid(rhs).0\n@@ -1126,6 +1168,8 @@ assert_eq!((-128i8).wrapping_rem(-1), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_rem(self, rhs: Self) -> Self {\n                 self.overflowing_rem(rhs).0\n@@ -1153,6 +1197,8 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_rem_euclid(rhs).0\n@@ -1203,6 +1249,8 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1230,6 +1278,8 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1284,6 +1334,8 @@ assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -1326,6 +1378,8 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n \"::MIN, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -1351,6 +1405,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n \"::MAX, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -1374,6 +1430,8 @@ assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -1405,6 +1463,8 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n@@ -1438,6 +1498,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n@@ -1470,6 +1532,8 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (0, true)\n@@ -1502,6 +1566,8 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n@@ -1555,6 +1621,8 @@ assert_eq!(0x1i32.overflowing_shl(36), (0x10, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n@@ -1578,6 +1646,8 @@ assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n@@ -1630,6 +1700,8 @@ assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n@@ -1677,6 +1749,8 @@ assert_eq!(x.pow(5), 32);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub fn pow(self, mut exp: u32) -> Self {\n@@ -1732,6 +1806,8 @@ assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub fn div_euclid(self, rhs: Self) -> Self {\n@@ -1770,6 +1846,8 @@ assert_eq!(a.rem_euclid(-b), 3);\n assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub fn rem_euclid(self, rhs: Self) -> Self {\n@@ -2277,6 +2355,8 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 intrinsics::rotate_left(self, n as $SelfT)\n@@ -2301,6 +2381,8 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 intrinsics::rotate_right(self, n as $SelfT)\n@@ -2496,6 +2578,8 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -2516,6 +2600,8 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -2536,6 +2622,8 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -2556,6 +2644,8 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_div(self, rhs: Self) -> Option<Self> {\n                 match rhs {\n@@ -2579,6 +2669,8 @@ assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n@@ -2603,6 +2695,8 @@ Basic usage:\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n@@ -2627,6 +2721,8 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n@@ -2672,6 +2768,8 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -2692,6 +2790,8 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n@@ -2712,6 +2812,8 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -2750,6 +2852,8 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n@@ -2770,6 +2874,8 @@ Basic usage:\n assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n@@ -2793,6 +2899,8 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn saturating_mul(self, rhs: Self) -> Self {\n                 self.checked_mul(rhs).unwrap_or(Self::max_value())\n@@ -2815,6 +2923,8 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -2838,6 +2948,8 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 intrinsics::overflowing_add(self, rhs)\n@@ -2858,6 +2970,8 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 intrinsics::overflowing_sub(self, rhs)\n@@ -2879,6 +2993,8 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::overflowing_mul(self, rhs)\n@@ -2899,6 +3015,8 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_div(self, rhs: Self) -> Self {\n                 self / rhs\n@@ -2924,6 +3042,8 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n@@ -2946,6 +3066,8 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_rem(self, rhs: Self) -> Self {\n                 self % rhs\n@@ -2972,6 +3094,8 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n@@ -3026,6 +3150,8 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3055,6 +3181,8 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3076,6 +3204,8 @@ Basic usage:\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -3118,6 +3248,8 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -3144,6 +3276,8 @@ assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT),\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -3169,6 +3303,8 @@ $EndFeature, \"\n         /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n@@ -3196,6 +3332,8 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n@@ -3226,6 +3364,8 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n@@ -3252,6 +3392,8 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n@@ -3282,6 +3424,8 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n@@ -3329,6 +3473,8 @@ Basic usage\n assert_eq!(0x1\", stringify!($SelfT), \".overflowing_shl(132), (0x10, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n@@ -3353,6 +3499,8 @@ Basic usage\n assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n@@ -3374,6 +3522,8 @@ Basic usage:\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n@@ -3418,6 +3568,8 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".pow(5), 32);\", $EndFeature, \"\n ```\"),\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub fn pow(self, mut exp: u32) -> Self {\n@@ -3459,6 +3611,8 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub fn div_euclid(self, rhs: Self) -> Self {\n@@ -3483,6 +3637,8 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub fn rem_euclid(self, rhs: Self) -> Self {"}, {"sha": "a0c9e5983a1d7dae5e25a0a35df0d3c37c181880", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -58,10 +58,10 @@ impl<'a> FnKind<'a> {\n         }\n     }\n \n-    pub fn header(&self) -> Option<FnHeader> {\n+    pub fn header(&self) -> Option<&FnHeader> {\n         match *self {\n-            FnKind::ItemFn(_, _, header, _, _) => Some(header),\n-            FnKind::Method(_, sig, _, _) => Some(sig.header),\n+            FnKind::ItemFn(_, _, ref header, _, _) => Some(header),\n+            FnKind::Method(_, ref sig, _, _) => Some(&sig.header),\n             FnKind::Closure(_) => None,\n         }\n     }\n@@ -262,6 +262,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_pat(&mut self, p: &'v Pat) {\n         walk_pat(self, p)\n     }\n+    fn visit_argument_source(&mut self, s: &'v ArgSource) {\n+        walk_argument_source(self, s)\n+    }\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n@@ -399,10 +402,17 @@ pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body) {\n     for argument in &body.arguments {\n         visitor.visit_id(argument.hir_id);\n         visitor.visit_pat(&argument.pat);\n+        visitor.visit_argument_source(&argument.source);\n     }\n     visitor.visit_expr(&body.value);\n }\n \n+pub fn walk_argument_source<'v, V: Visitor<'v>>(visitor: &mut V, source: &'v ArgSource) {\n+    if let ArgSource::AsyncFn(pat) = source {\n+        visitor.visit_pat(pat);\n+    }\n+}\n+\n pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     // Intentionally visiting the expr first - the initialization expr\n     // dominates the local's definition."}, {"sha": "380dee5fcdcc21403a51affab28b73d6369664b2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 135, "deletions": 49, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -448,10 +448,9 @@ impl<'a> LoweringContext<'a> {\n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n             fn visit_pat(&mut self, p: &'lcx Pat) {\n                 match p.node {\n-                    // Doesn't generate a Hir node\n+                    // Doesn't generate a HIR node\n                     PatKind::Paren(..) => {},\n                     _ => {\n-\n                         if let Some(owner) = self.hir_id_owner {\n                             self.lctx.lower_node_id_with_owner(p.id, owner);\n                         }\n@@ -461,6 +460,32 @@ impl<'a> LoweringContext<'a> {\n                 visit::walk_pat(self, p)\n             }\n \n+            fn visit_fn(&mut self, fk: visit::FnKind<'lcx>, fd: &'lcx FnDecl, s: Span, _: NodeId) {\n+                if fk.header().map(|h| h.asyncness.node.is_async()).unwrap_or(false) {\n+                    // Don't visit the original pattern for async functions as it will be\n+                    // replaced.\n+                    for arg in &fd.inputs {\n+                        if let ArgSource::AsyncFn(pat) = &arg.source { self.visit_pat(pat); }\n+                        self.visit_ty(&arg.ty)\n+                    }\n+                    self.visit_fn_ret_ty(&fd.output);\n+\n+                    match fk {\n+                        visit::FnKind::ItemFn(_, decl, _, body) => {\n+                            self.visit_fn_header(decl);\n+                            self.visit_block(body)\n+                        },\n+                        visit::FnKind::Method(_, sig, _, body) => {\n+                            self.visit_fn_header(&sig.header);\n+                            self.visit_block(body)\n+                        },\n+                        visit::FnKind::Closure(body) => self.visit_expr(body),\n+                    }\n+                } else {\n+                    visit::walk_fn(self, fk, fd, s)\n+                }\n+            }\n+\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n \n@@ -784,12 +809,10 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn record_body(&mut self, value: hir::Expr, decl: Option<&FnDecl>) -> hir::BodyId {\n+    fn record_body(&mut self, value: hir::Expr, arguments: HirVec<hir::Arg>) -> hir::BodyId {\n         let body = hir::Body {\n-            arguments: decl.map_or(hir_vec![], |decl| {\n-                decl.inputs.iter().map(|x| self.lower_arg(x)).collect()\n-            }),\n             is_generator: self.is_generator,\n+            arguments,\n             value,\n         };\n         let id = body.id();\n@@ -1112,11 +1135,10 @@ impl<'a> LoweringContext<'a> {\n         capture_clause: CaptureBy,\n         closure_node_id: NodeId,\n         ret_ty: Option<&Ty>,\n+        span: Span,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let prev_is_generator = mem::replace(&mut self.is_generator, true);\n-        let body_expr = body(self);\n-        let span = body_expr.span;\n         let output = match ret_ty {\n             Some(ty) => FunctionRetTy::Ty(P(ty.clone())),\n             None => FunctionRetTy::Default(span),\n@@ -1126,7 +1148,11 @@ impl<'a> LoweringContext<'a> {\n             output,\n             c_variadic: false\n         };\n-        let body_id = self.record_body(body_expr, Some(&decl));\n+        // Lower the arguments before the body otherwise the body will call `lower_def` expecting\n+        // the argument to have been assigned an id already.\n+        let arguments = self.lower_args(Some(&decl));\n+        let body_expr = body(self);\n+        let body_id = self.record_body(body_expr, arguments);\n         self.is_generator = prev_is_generator;\n \n         let capture_clause = self.lower_capture_clause(capture_clause);\n@@ -1157,8 +1183,9 @@ impl<'a> LoweringContext<'a> {\n         F: FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     {\n         let prev = mem::replace(&mut self.is_generator, false);\n+        let arguments = self.lower_args(decl);\n         let result = f(self);\n-        let r = self.record_body(result, decl);\n+        let r = self.record_body(result, arguments);\n         self.is_generator = prev;\n         return r;\n     }\n@@ -2224,22 +2251,41 @@ impl<'a> LoweringContext<'a> {\n             init: l.init.as_ref().map(|e| P(self.lower_expr(e))),\n             span: l.span,\n             attrs: l.attrs.clone(),\n-            source: hir::LocalSource::Normal,\n+            source: self.lower_local_source(l.source),\n         }, ids)\n     }\n \n+    fn lower_local_source(&mut self, ls: LocalSource) -> hir::LocalSource {\n+        match ls {\n+            LocalSource::Normal => hir::LocalSource::Normal,\n+            LocalSource::AsyncFn => hir::LocalSource::AsyncFn,\n+        }\n+    }\n+\n     fn lower_mutability(&mut self, m: Mutability) -> hir::Mutability {\n         match m {\n             Mutability::Mutable => hir::MutMutable,\n             Mutability::Immutable => hir::MutImmutable,\n         }\n     }\n \n+    fn lower_args(&mut self, decl: Option<&FnDecl>) -> HirVec<hir::Arg> {\n+        decl.map_or(hir_vec![], |decl| decl.inputs.iter().map(|x| self.lower_arg(x)).collect())\n+    }\n+\n     fn lower_arg(&mut self, arg: &Arg) -> hir::Arg {\n         let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(arg.id);\n         hir::Arg {\n             hir_id,\n             pat: self.lower_pat(&arg.pat),\n+            source: self.lower_arg_source(&arg.source),\n+        }\n+    }\n+\n+    fn lower_arg_source(&mut self, source: &ArgSource) -> hir::ArgSource {\n+        match source {\n+            ArgSource::Normal => hir::ArgSource::Normal,\n+            ArgSource::AsyncFn(pat) => hir::ArgSource::AsyncFn(self.lower_pat(pat)),\n         }\n     }\n \n@@ -2993,15 +3039,21 @@ impl<'a> LoweringContext<'a> {\n     fn lower_async_body(\n         &mut self,\n         decl: &FnDecl,\n-        asyncness: IsAsync,\n+        asyncness: &IsAsync,\n         body: &Block,\n     ) -> hir::BodyId {\n-        self.lower_body(Some(decl), |this| {\n-            if let IsAsync::Async { closure_id, .. } = asyncness {\n+        self.lower_body(Some(&decl), |this| {\n+            if let IsAsync::Async { closure_id, ref arguments, .. } = asyncness {\n+                let mut body = body.clone();\n+\n+                for a in arguments.iter().rev() {\n+                    body.stmts.insert(0, a.stmt.clone());\n+                }\n+\n                 let async_expr = this.make_async_expr(\n-                    CaptureBy::Value, closure_id, None,\n+                    CaptureBy::Value, *closure_id, None, body.span,\n                     |this| {\n-                        let body = this.lower_block(body, false);\n+                        let body = this.lower_block(&body, false);\n                         this.expr_block(body, ThinVec::new())\n                     });\n                 this.expr(body.span, async_expr, ThinVec::new())\n@@ -3060,26 +3112,42 @@ impl<'a> LoweringContext<'a> {\n                     value\n                 )\n             }\n-            ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n+            ItemKind::Fn(ref decl, ref header, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n-                    // Note: we don't need to change the return type from `T` to\n-                    // `impl Future<Output = T>` here because lower_body\n-                    // only cares about the input argument patterns in the function\n-                    // declaration (decl), not the return types.\n-                    let body_id = this.lower_async_body(decl, header.asyncness.node, body);\n+                    let mut lower_fn = |decl: &FnDecl| {\n+                        // Note: we don't need to change the return type from `T` to\n+                        // `impl Future<Output = T>` here because lower_body\n+                        // only cares about the input argument patterns in the function\n+                        // declaration (decl), not the return types.\n+                        let body_id = this.lower_async_body(&decl, &header.asyncness.node, body);\n+\n+                        let (generics, fn_decl) = this.add_in_band_defs(\n+                            generics,\n+                            fn_def_id,\n+                            AnonymousLifetimeMode::PassThrough,\n+                            |this, idty| this.lower_fn_decl(\n+                                &decl,\n+                                Some((fn_def_id, idty)),\n+                                true,\n+                                header.asyncness.node.opt_return_id()\n+                            ),\n+                        );\n \n-                    let (generics, fn_decl) = this.add_in_band_defs(\n-                        generics,\n-                        fn_def_id,\n-                        AnonymousLifetimeMode::PassThrough,\n-                        |this, idty| this.lower_fn_decl(\n-                            decl,\n-                            Some((fn_def_id, idty)),\n-                            true,\n-                            header.asyncness.node.opt_return_id()\n-                        ),\n-                    );\n+                        (body_id, generics, fn_decl)\n+                    };\n+\n+                    let (body_id, generics, fn_decl) = if let IsAsync::Async {\n+                        arguments, ..\n+                    } = &header.asyncness.node {\n+                        let mut decl = decl.clone();\n+                        // Replace the arguments of this async function with the generated\n+                        // arguments that will be moved into the closure.\n+                        decl.inputs = arguments.clone().drain(..).map(|a| a.arg).collect();\n+                        lower_fn(&decl)\n+                    } else {\n+                        lower_fn(decl)\n+                    };\n \n                     hir::ItemKind::Fn(\n                         fn_decl,\n@@ -3558,15 +3626,33 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness.node, body);\n-                let impl_trait_return_allow = !self.is_in_trait_impl;\n-                let (generics, sig) = self.lower_method_sig(\n-                    &i.generics,\n-                    sig,\n-                    impl_item_def_id,\n-                    impl_trait_return_allow,\n-                    sig.header.asyncness.node.opt_return_id(),\n-                );\n+                let mut lower_method = |sig: &MethodSig| {\n+                    let body_id = self.lower_async_body(\n+                        &sig.decl, &sig.header.asyncness.node, body\n+                    );\n+                    let impl_trait_return_allow = !self.is_in_trait_impl;\n+                    let (generics, sig) = self.lower_method_sig(\n+                        &i.generics,\n+                        sig,\n+                        impl_item_def_id,\n+                        impl_trait_return_allow,\n+                        sig.header.asyncness.node.opt_return_id(),\n+                    );\n+                    (body_id, generics, sig)\n+                };\n+\n+                let (body_id, generics, sig) = if let IsAsync::Async {\n+                    ref arguments, ..\n+                } = sig.header.asyncness.node {\n+                    let mut sig = sig.clone();\n+                    // Replace the arguments of this async function with the generated\n+                    // arguments that will be moved into the closure.\n+                    sig.decl.inputs = arguments.clone().drain(..).map(|a| a.arg).collect();\n+                    lower_method(&sig)\n+                } else {\n+                    lower_method(sig)\n+                };\n+\n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n             ImplItemKind::Type(ref ty) => (\n@@ -3760,7 +3846,7 @@ impl<'a> LoweringContext<'a> {\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n     ) -> (hir::Generics, hir::MethodSig) {\n-        let header = self.lower_fn_header(sig.header);\n+        let header = self.lower_fn_header(&sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n             fn_def_id,\n@@ -3782,10 +3868,10 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n+    fn lower_fn_header(&mut self, h: &FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n-            asyncness: self.lower_asyncness(h.asyncness.node),\n+            asyncness: self.lower_asyncness(&h.asyncness.node),\n             constness: self.lower_constness(h.constness),\n             abi: h.abi,\n         }\n@@ -3805,7 +3891,7 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_asyncness(&mut self, a: IsAsync) -> hir::IsAsync {\n+    fn lower_asyncness(&mut self, a: &IsAsync) -> hir::IsAsync {\n         match a {\n             IsAsync::Async { .. } => hir::IsAsync::Async,\n             IsAsync::NotAsync => hir::IsAsync::NotAsync,\n@@ -4110,15 +4196,15 @@ impl<'a> LoweringContext<'a> {\n                 hir::MatchSource::Normal,\n             ),\n             ExprKind::Async(capture_clause, closure_node_id, ref block) => {\n-                self.make_async_expr(capture_clause, closure_node_id, None, |this| {\n+                self.make_async_expr(capture_clause, closure_node_id, None, block.span, |this| {\n                     this.with_new_scopes(|this| {\n                         let block = this.lower_block(block, false);\n                         this.expr_block(block, ThinVec::new())\n                     })\n                 })\n             }\n             ExprKind::Closure(\n-                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n+                capture_clause, ref asyncness, movability, ref decl, ref body, fn_decl_span\n             ) => {\n                 if let IsAsync::Async { closure_id, .. } = asyncness {\n                     let outer_decl = FnDecl {\n@@ -4156,7 +4242,7 @@ impl<'a> LoweringContext<'a> {\n                                 Some(&**ty)\n                             } else { None };\n                             let async_body = this.make_async_expr(\n-                                capture_clause, closure_id, async_ret_ty,\n+                                capture_clause, *closure_id, async_ret_ty, body.span,\n                                 |this| {\n                                     this.with_new_scopes(|this| this.lower_expr(body))\n                                 });"}, {"sha": "0fa973853221580c01cb68e747b336a3c44f1d14", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -68,16 +68,17 @@ impl<'a> DefCollector<'a> {\n         id: NodeId,\n         name: Name,\n         span: Span,\n-        header: &FnHeader,\n+        header: &'a FnHeader,\n         generics: &'a Generics,\n         decl: &'a FnDecl,\n         body: &'a Block,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n+        let (closure_id, return_impl_trait_id, arguments) = match &header.asyncness.node {\n             IsAsync::Async {\n                 closure_id,\n                 return_impl_trait_id,\n-            } => (closure_id, return_impl_trait_id),\n+                arguments,\n+            } => (closure_id, return_impl_trait_id, arguments),\n             _ => unreachable!(),\n         };\n \n@@ -86,17 +87,31 @@ impl<'a> DefCollector<'a> {\n         let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n         let fn_def = self.create_def(id, fn_def_data, ITEM_LIKE_SPACE, span);\n         return self.with_parent(fn_def, |this| {\n-            this.create_def(return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n+            this.create_def(*return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n \n             visit::walk_generics(this, generics);\n-            visit::walk_fn_decl(this, decl);\n \n-            let closure_def = this.create_def(closure_id,\n-                                              DefPathData::ClosureExpr,\n-                                              REGULAR_SPACE,\n-                                              span);\n+            // Walk the generated arguments for the `async fn`.\n+            for a in arguments {\n+                use visit::Visitor;\n+                this.visit_ty(&a.arg.ty);\n+            }\n+\n+            // We do not invoke `walk_fn_decl` as this will walk the arguments that are being\n+            // replaced.\n+            visit::walk_fn_ret_ty(this, &decl.output);\n+\n+            let closure_def = this.create_def(\n+                *closure_id, DefPathData::ClosureExpr, REGULAR_SPACE, span,\n+            );\n             this.with_parent(closure_def, |this| {\n-                visit::walk_block(this, body);\n+                for a in arguments {\n+                    use visit::Visitor;\n+                    // Walk each of the generated statements before the regular block body.\n+                    this.visit_stmt(&a.stmt);\n+                }\n+\n+                visit::walk_block(this, &body);\n             })\n         })\n     }\n@@ -290,7 +305,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         match expr.node {\n             ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id),\n-            ExprKind::Closure(_, asyncness, ..) => {\n+            ExprKind::Closure(_, ref asyncness, ..) => {\n                 let closure_def = self.create_def(expr.id,\n                                           DefPathData::ClosureExpr,\n                                           REGULAR_SPACE,\n@@ -300,7 +315,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n                 if let IsAsync::Async { closure_id, .. } = asyncness {\n-                    let async_def = self.create_def(closure_id,\n+                    let async_def = self.create_def(*closure_id,\n                                                     DefPathData::ClosureExpr,\n                                                     REGULAR_SPACE,\n                                                     expr.span);"}, {"sha": "f114f0fc236958ef6c9ebd1ae49753eb256a0877", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1583,6 +1583,17 @@ pub enum LocalSource {\n     Normal,\n     /// A desugared `for _ in _ { .. }` loop.\n     ForLoopDesugar,\n+    /// When lowering async functions, we create locals within the `async move` so that\n+    /// all arguments are dropped after the future is polled.\n+    ///\n+    /// ```ignore (pseudo-Rust)\n+    /// async fn foo(<pattern> @ x: Type) {\n+    ///     async move {\n+    ///         let <pattern> = x;\n+    ///     }\n+    /// }\n+    /// ```\n+    AsyncFn,\n }\n \n /// Hints at the original code for a `match _ { .. }`.\n@@ -1883,6 +1894,26 @@ pub struct InlineAsm {\n pub struct Arg {\n     pub pat: P<Pat>,\n     pub hir_id: HirId,\n+    pub source: ArgSource,\n+}\n+\n+impl Arg {\n+    /// Returns the pattern representing the original binding for this argument.\n+    pub fn original_pat(&self) -> &P<Pat> {\n+        match &self.source {\n+            ArgSource::Normal => &self.pat,\n+            ArgSource::AsyncFn(pat) => &pat,\n+        }\n+    }\n+}\n+\n+/// Represents the source of an argument in a function header.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum ArgSource {\n+    /// Argument as specified by the user.\n+    Normal,\n+    /// Generated argument from `async fn` lowering, contains the original binding pattern.\n+    AsyncFn(P<Pat>),\n }\n \n /// Represents the header (not the body) of a function declaration."}, {"sha": "944cc8a8b1999b0112ca47b95ea4ede49cb825fc", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -86,19 +86,16 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let sub_is_ret_type =\n             self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n-        let span_label_var1 = if let Some(simple_ident) = anon_arg_sup.pat.simple_ident() {\n-            format!(\" from `{}`\", simple_ident)\n-        } else {\n-            String::new()\n+        let span_label_var1 = match anon_arg_sup.original_pat().simple_ident() {\n+            Some(simple_ident) => format!(\" from `{}`\", simple_ident),\n+            None => String::new(),\n         };\n \n-        let span_label_var2 = if let Some(simple_ident) = anon_arg_sub.pat.simple_ident() {\n-            format!(\" into `{}`\", simple_ident)\n-        } else {\n-            String::new()\n+        let span_label_var2 = match anon_arg_sub.original_pat().simple_ident() {\n+            Some(simple_ident) => format!(\" into `{}`\", simple_ident),\n+            None => String::new(),\n         };\n \n-\n         let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n             (None, None) => {\n                 let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {"}, {"sha": "2d7587b11b6f8e51ea905ddc5c3f0cedfcf9fd2d", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -95,13 +95,12 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let (error_var, span_label_var) = if let Some(simple_ident) = arg.pat.simple_ident() {\n-            (\n+        let (error_var, span_label_var) = match arg.original_pat().simple_ident() {\n+            Some(simple_ident) => (\n                 format!(\"the type of `{}`\", simple_ident),\n                 format!(\"the type of `{}`\", simple_ident),\n-            )\n-        } else {\n-            (\"parameter type\".to_owned(), \"type\".to_owned())\n+            ),\n+            None => (\"parameter type\".to_owned(), \"type\".to_owned()),\n         };\n \n         let mut diag = struct_span_err!("}, {"sha": "f33250343513113f870c9a9594f38b79e45e1099", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 134, "deletions": 137, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -111,31 +111,31 @@ pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// and for error reporting logic to read arbitrary node types.\n     pub in_progress_tables: Option<&'a RefCell<ty::TypeckTables<'tcx>>>,\n \n-    // Cache for projections. This cache is snapshotted along with the\n-    // infcx.\n-    //\n-    // Public so that `traits::project` can use it.\n+    /// Cache for projections. This cache is snapshotted along with the\n+    /// infcx.\n+    ///\n+    /// Public so that `traits::project` can use it.\n     pub projection_cache: RefCell<traits::ProjectionCache<'tcx>>,\n \n-    // We instantiate UnificationTable with bounds<Ty> because the\n-    // types that might instantiate a general type variable have an\n-    // order, represented by its upper and lower bounds.\n+    /// We instantiate `UnificationTable` with `bounds<Ty>` because the\n+    /// types that might instantiate a general type variable have an\n+    /// order, represented by its upper and lower bounds.\n     pub type_variables: RefCell<type_variable::TypeVariableTable<'tcx>>,\n \n-    // Map from integral variable to the kind of integer it represents\n+    /// Map from integral variable to the kind of integer it represents\n     int_unification_table: RefCell<ut::UnificationTable<ut::InPlace<ty::IntVid>>>,\n \n-    // Map from floating variable to the kind of float it represents\n+    /// Map from floating variable to the kind of float it represents\n     float_unification_table: RefCell<ut::UnificationTable<ut::InPlace<ty::FloatVid>>>,\n \n-    // Tracks the set of region variables and the constraints between\n-    // them.  This is initially `Some(_)` but when\n-    // `resolve_regions_and_report_errors` is invoked, this gets set\n-    // to `None` -- further attempts to perform unification etc may\n-    // fail if new region constraints would've been added.\n+    /// Tracks the set of region variables and the constraints between\n+    /// them.  This is initially `Some(_)` but when\n+    /// `resolve_regions_and_report_errors` is invoked, this gets set\n+    /// to `None` -- further attempts to perform unification etc may\n+    /// fail if new region constraints would've been added.\n     region_constraints: RefCell<Option<RegionConstraintCollector<'tcx>>>,\n \n-    // Once region inference is done, the values for each variable.\n+    /// Once region inference is done, the values for each variable.\n     lexical_region_resolutions: RefCell<Option<LexicalRegionResolutions<'tcx>>>,\n \n     /// Caches the results of trait selection. This cache is used\n@@ -145,65 +145,65 @@ pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Caches the results of trait evaluation.\n     pub evaluation_cache: traits::EvaluationCache<'tcx>,\n \n-    // the set of predicates on which errors have been reported, to\n-    // avoid reporting the same error twice.\n+    /// the set of predicates on which errors have been reported, to\n+    /// avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FxHashMap<Span, Vec<ty::Predicate<'tcx>>>>,\n \n-    // When an error occurs, we want to avoid reporting \"derived\"\n-    // errors that are due to this original failure. Normally, we\n-    // handle this with the `err_count_on_creation` count, which\n-    // basically just tracks how many errors were reported when we\n-    // started type-checking a fn and checks to see if any new errors\n-    // have been reported since then. Not great, but it works.\n-    //\n-    // However, when errors originated in other passes -- notably\n-    // resolve -- this heuristic breaks down. Therefore, we have this\n-    // auxiliary flag that one can set whenever one creates a\n-    // type-error that is due to an error in a prior pass.\n-    //\n-    // Don't read this flag directly, call `is_tainted_by_errors()`\n-    // and `set_tainted_by_errors()`.\n+    /// When an error occurs, we want to avoid reporting \"derived\"\n+    /// errors that are due to this original failure. Normally, we\n+    /// handle this with the `err_count_on_creation` count, which\n+    /// basically just tracks how many errors were reported when we\n+    /// started type-checking a fn and checks to see if any new errors\n+    /// have been reported since then. Not great, but it works.\n+    ///\n+    /// However, when errors originated in other passes -- notably\n+    /// resolve -- this heuristic breaks down. Therefore, we have this\n+    /// auxiliary flag that one can set whenever one creates a\n+    /// type-error that is due to an error in a prior pass.\n+    ///\n+    /// Don't read this flag directly, call `is_tainted_by_errors()`\n+    /// and `set_tainted_by_errors()`.\n     tainted_by_errors_flag: Cell<bool>,\n \n-    // Track how many errors were reported when this infcx is created.\n-    // If the number of errors increases, that's also a sign (line\n-    // `tained_by_errors`) to avoid reporting certain kinds of errors.\n+    /// Track how many errors were reported when this infcx is created.\n+    /// If the number of errors increases, that's also a sign (line\n+    /// `tained_by_errors`) to avoid reporting certain kinds of errors.\n     err_count_on_creation: usize,\n \n-    // This flag is true while there is an active snapshot.\n+    /// This flag is true while there is an active snapshot.\n     in_snapshot: Cell<bool>,\n \n-    // A set of constraints that regionck must validate. Each\n-    // constraint has the form `T:'a`, meaning \"some type `T` must\n-    // outlive the lifetime 'a\". These constraints derive from\n-    // instantiated type parameters. So if you had a struct defined\n-    // like\n-    //\n-    //     struct Foo<T:'static> { ... }\n-    //\n-    // then in some expression `let x = Foo { ... }` it will\n-    // instantiate the type parameter `T` with a fresh type `$0`. At\n-    // the same time, it will record a region obligation of\n-    // `$0:'static`. This will get checked later by regionck. (We\n-    // can't generally check these things right away because we have\n-    // to wait until types are resolved.)\n-    //\n-    // These are stored in a map keyed to the id of the innermost\n-    // enclosing fn body / static initializer expression. This is\n-    // because the location where the obligation was incurred can be\n-    // relevant with respect to which sublifetime assumptions are in\n-    // place. The reason that we store under the fn-id, and not\n-    // something more fine-grained, is so that it is easier for\n-    // regionck to be sure that it has found *all* the region\n-    // obligations (otherwise, it's easy to fail to walk to a\n-    // particular node-id).\n-    //\n-    // Before running `resolve_regions_and_report_errors`, the creator\n-    // of the inference context is expected to invoke\n-    // `process_region_obligations` (defined in `self::region_obligations`)\n-    // for each body-id in this map, which will process the\n-    // obligations within. This is expected to be done 'late enough'\n-    // that all type inference variables have been bound and so forth.\n+    /// A set of constraints that regionck must validate. Each\n+    /// constraint has the form `T:'a`, meaning \"some type `T` must\n+    /// outlive the lifetime 'a\". These constraints derive from\n+    /// instantiated type parameters. So if you had a struct defined\n+    /// like\n+    ///\n+    ///     struct Foo<T:'static> { ... }\n+    ///\n+    /// then in some expression `let x = Foo { ... }` it will\n+    /// instantiate the type parameter `T` with a fresh type `$0`. At\n+    /// the same time, it will record a region obligation of\n+    /// `$0:'static`. This will get checked later by regionck. (We\n+    /// can't generally check these things right away because we have\n+    /// to wait until types are resolved.)\n+    ///\n+    /// These are stored in a map keyed to the id of the innermost\n+    /// enclosing fn body / static initializer expression. This is\n+    /// because the location where the obligation was incurred can be\n+    /// relevant with respect to which sublifetime assumptions are in\n+    /// place. The reason that we store under the fn-id, and not\n+    /// something more fine-grained, is so that it is easier for\n+    /// regionck to be sure that it has found *all* the region\n+    /// obligations (otherwise, it's easy to fail to walk to a\n+    /// particular node-id).\n+    ///\n+    /// Before running `resolve_regions_and_report_errors`, the creator\n+    /// of the inference context is expected to invoke\n+    /// `process_region_obligations` (defined in `self::region_obligations`)\n+    /// for each body-id in this map, which will process the\n+    /// obligations within. This is expected to be done 'late enough'\n+    /// that all type inference variables have been bound and so forth.\n     pub region_obligations: RefCell<Vec<(hir::HirId, RegionObligation<'tcx>)>>,\n \n     /// What is the innermost universe we have created? Starts out as\n@@ -247,85 +247,85 @@ pub struct TypeTrace<'tcx> {\n /// See `error_reporting` module for more details\n #[derive(Clone, Debug)]\n pub enum SubregionOrigin<'tcx> {\n-    // Arose from a subtyping relation\n+    /// Arose from a subtyping relation\n     Subtype(TypeTrace<'tcx>),\n \n-    // Stack-allocated closures cannot outlive innermost loop\n-    // or function so as to ensure we only require finite stack\n+    /// Stack-allocated closures cannot outlive innermost loop\n+    /// or function so as to ensure we only require finite stack\n     InfStackClosure(Span),\n \n-    // Invocation of closure must be within its lifetime\n+    /// Invocation of closure must be within its lifetime\n     InvokeClosure(Span),\n \n-    // Dereference of reference must be within its lifetime\n+    /// Dereference of reference must be within its lifetime\n     DerefPointer(Span),\n \n-    // Closure bound must not outlive captured free variables\n+    /// Closure bound must not outlive captured free variables\n     FreeVariable(Span, ast::NodeId),\n \n-    // Index into slice must be within its lifetime\n+    /// Index into slice must be within its lifetime\n     IndexSlice(Span),\n \n-    // When casting `&'a T` to an `&'b Trait` object,\n-    // relating `'a` to `'b`\n+    /// When casting `&'a T` to an `&'b Trait` object,\n+    /// relating `'a` to `'b`\n     RelateObjectBound(Span),\n \n-    // Some type parameter was instantiated with the given type,\n-    // and that type must outlive some region.\n+    /// Some type parameter was instantiated with the given type,\n+    /// and that type must outlive some region.\n     RelateParamBound(Span, Ty<'tcx>),\n \n-    // The given region parameter was instantiated with a region\n-    // that must outlive some other region.\n+    /// The given region parameter was instantiated with a region\n+    /// that must outlive some other region.\n     RelateRegionParamBound(Span),\n \n-    // A bound placed on type parameters that states that must outlive\n-    // the moment of their instantiation.\n+    /// A bound placed on type parameters that states that must outlive\n+    /// the moment of their instantiation.\n     RelateDefaultParamBound(Span, Ty<'tcx>),\n \n-    // Creating a pointer `b` to contents of another reference\n+    /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    // Creating a pointer `b` to contents of an upvar\n+    /// Creating a pointer `b` to contents of an upvar\n     ReborrowUpvar(Span, ty::UpvarId),\n \n-    // Data with type `Ty<'tcx>` was borrowed\n+    /// Data with type `Ty<'tcx>` was borrowed\n     DataBorrowed(Ty<'tcx>, Span),\n \n-    // (&'a &'b T) where a >= b\n+    /// (&'a &'b T) where a >= b\n     ReferenceOutlivesReferent(Ty<'tcx>, Span),\n \n-    // Type or region parameters must be in scope.\n+    /// Type or region parameters must be in scope.\n     ParameterInScope(ParameterOrigin, Span),\n \n-    // The type T of an expression E must outlive the lifetime for E.\n+    /// The type T of an expression E must outlive the lifetime for E.\n     ExprTypeIsNotInScope(Ty<'tcx>, Span),\n \n-    // A `ref b` whose region does not enclose the decl site\n+    /// A `ref b` whose region does not enclose the decl site\n     BindingTypeIsNotValidAtDecl(Span),\n \n-    // Regions appearing in a method receiver must outlive method call\n+    /// Regions appearing in a method receiver must outlive method call\n     CallRcvr(Span),\n \n-    // Regions appearing in a function argument must outlive func call\n+    /// Regions appearing in a function argument must outlive func call\n     CallArg(Span),\n \n-    // Region in return type of invoked fn must enclose call\n+    /// Region in return type of invoked fn must enclose call\n     CallReturn(Span),\n \n-    // Operands must be in scope\n+    /// Operands must be in scope\n     Operand(Span),\n \n-    // Region resulting from a `&` expr must enclose the `&` expr\n+    /// Region resulting from a `&` expr must enclose the `&` expr\n     AddrOf(Span),\n \n-    // An auto-borrow that does not enclose the expr where it occurs\n+    /// An auto-borrow that does not enclose the expr where it occurs\n     AutoBorrow(Span),\n \n-    // Region constraint arriving from destructor safety\n+    /// Region constraint arriving from destructor safety\n     SafeDestructor(Span),\n \n-    // Comparing the signature and requirements of an impl method against\n-    // the containing trait.\n+    /// Comparing the signature and requirements of an impl method against\n+    /// the containing trait.\n     CompareImplMethodObligation {\n         span: Span,\n         item_name: ast::Name,\n@@ -361,35 +361,35 @@ pub enum LateBoundRegionConversionTime {\n /// See `error_reporting` module for more details\n #[derive(Copy, Clone, Debug)]\n pub enum RegionVariableOrigin {\n-    // Region variables created for ill-categorized reasons,\n-    // mostly indicates places in need of refactoring\n+    /// Region variables created for ill-categorized reasons,\n+    /// mostly indicates places in need of refactoring\n     MiscVariable(Span),\n \n-    // Regions created by a `&P` or `[...]` pattern\n+    /// Regions created by a `&P` or `[...]` pattern\n     PatternRegion(Span),\n \n-    // Regions created by `&` operator\n+    /// Regions created by `&` operator\n     AddrOfRegion(Span),\n \n-    // Regions created as part of an autoref of a method receiver\n+    /// Regions created as part of an autoref of a method receiver\n     Autoref(Span),\n \n-    // Regions created as part of an automatic coercion\n+    /// Regions created as part of an automatic coercion\n     Coercion(Span),\n \n-    // Region variables created as the values for early-bound regions\n+    /// Region variables created as the values for early-bound regions\n     EarlyBoundRegion(Span, InternedString),\n \n-    // Region variables created for bound regions\n-    // in a function or method that is called\n+    /// Region variables created for bound regions\n+    /// in a function or method that is called\n     LateBoundRegion(Span, ty::BoundRegion, LateBoundRegionConversionTime),\n \n     UpvarRegion(ty::UpvarId, Span),\n \n     BoundRegionInCoherence(ast::Name),\n \n-    // This origin is used for the inference variables that we create\n-    // during NLL region processing.\n+    /// This origin is used for the inference variables that we create\n+    /// during NLL region processing.\n     NLL(NLLRegionVariableOrigin),\n }\n \n@@ -686,22 +686,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Clear the \"currently in a snapshot\" flag, invoke the closure,\n-    // then restore the flag to its original value. This flag is a\n-    // debugging measure designed to detect cases where we start a\n-    // snapshot, create type variables, and register obligations\n-    // which may involve those type variables in the fulfillment cx,\n-    // potentially leaving \"dangling type variables\" behind.\n-    // In such cases, an assertion will fail when attempting to\n-    // register obligations, within a snapshot. Very useful, much\n-    // better than grovelling through megabytes of RUST_LOG output.\n-    //\n-    // HOWEVER, in some cases the flag is unhelpful. In particular, we\n-    // sometimes create a \"mini-fulfilment-cx\" in which we enroll\n-    // obligations. As long as this fulfillment cx is fully drained\n-    // before we return, this is not a problem, as there won't be any\n-    // escaping obligations in the main cx. In those cases, you can\n-    // use this function.\n+    /// Clear the \"currently in a snapshot\" flag, invoke the closure,\n+    /// then restore the flag to its original value. This flag is a\n+    /// debugging measure designed to detect cases where we start a\n+    /// snapshot, create type variables, and register obligations\n+    /// which may involve those type variables in the fulfillment cx,\n+    /// potentially leaving \"dangling type variables\" behind.\n+    /// In such cases, an assertion will fail when attempting to\n+    /// register obligations, within a snapshot. Very useful, much\n+    /// better than grovelling through megabytes of `RUST_LOG` output.\n+    ///\n+    /// HOWEVER, in some cases the flag is unhelpful. In particular, we\n+    /// sometimes create a \"mini-fulfilment-cx\" in which we enroll\n+    /// obligations. As long as this fulfillment cx is fully drained\n+    /// before we return, this is not a problem, as there won't be any\n+    /// escaping obligations in the main cx. In those cases, you can\n+    /// use this function.\n     pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R\n     where\n         F: FnOnce(&Self) -> R,\n@@ -828,7 +828,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         r\n     }\n \n-    // Execute `f` in a snapshot, and commit the bindings it creates\n+    /// Execute `f` in a snapshot, and commit the bindings it creates.\n     pub fn in_snapshot<T, F>(&self, f: F) -> T\n     where\n         F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> T,\n@@ -854,9 +854,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Scan the constraints produced since `snapshot` began and returns:\n     ///\n-    /// - None -- if none of them involve \"region outlives\" constraints\n-    /// - Some(true) -- if there are `'a: 'b` constraints where `'a` or `'b` is a placehodler\n-    /// - Some(false) -- if there are `'a: 'b` constraints but none involve placeholders\n+    /// - `None` -- if none of them involve \"region outlives\" constraints\n+    /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder\n+    /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders\n     pub fn region_constraints_added_in_snapshot(\n         &self,\n         snapshot: &CombinedSnapshot<'a, 'tcx>,\n@@ -1292,19 +1292,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.type_variables.borrow_mut().root_var(var)\n     }\n \n+    /// Where possible, replaces type/int/float variables in\n+    /// `value` with their final value. Note that region variables\n+    /// are unaffected. If a type variable has not been unified, it\n+    /// is left as is. This is an idempotent operation that does\n+    /// not affect inference state in any way and so you can do it\n+    /// at will.\n     pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        /*!\n-         * Where possible, replaces type/int/float variables in\n-         * `value` with their final value. Note that region variables\n-         * are unaffected. If a type variable has not been unified, it\n-         * is left as is. This is an idempotent operation that does\n-         * not affect inference state in any way and so you can do it\n-         * at will.\n-         */\n-\n         if !value.needs_infer() {\n             return value.clone(); // avoid duplicated subst-folding\n         }"}, {"sha": "f5cb4cfa29f5cd84596de5a94ef2c28957307e10", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1326,6 +1326,25 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n         run_early_pass!(self, check_mac, mac);\n     }\n+\n+    fn visit_fn_header(&mut self, header: &'a ast::FnHeader) {\n+        // Unlike in HIR lowering and name resolution, the `AsyncArgument` statements are not added\n+        // to the function body and the arguments do not replace those in the declaration. They are\n+        // still visited manually here so that buffered lints can be emitted.\n+        if let ast::IsAsync::Async { ref arguments, .. } = header.asyncness.node {\n+            for a in arguments {\n+                // Visit the argument..\n+                self.visit_pat(&a.arg.pat);\n+                if let ast::ArgSource::AsyncFn(pat) = &a.arg.source {\n+                    self.visit_pat(pat);\n+                }\n+                self.visit_ty(&a.arg.ty);\n+\n+                // ..and the statement.\n+                self.visit_stmt(&a.stmt);\n+            }\n+        }\n+    }\n }\n \n struct LateLintPassObjects<'a> {"}, {"sha": "814776c21bd2afd9edda1e8aa07b4da005070fbd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -2421,7 +2421,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             let help_name = if let Some(body) = parent {\n                 let arg = &self.tcx.hir().body(body).arguments[index];\n-                format!(\"`{}`\", self.tcx.hir().hir_to_pretty_string(arg.pat.hir_id))\n+                format!(\"`{}`\", self.tcx.hir().hir_to_pretty_string(arg.original_pat().hir_id))\n             } else {\n                 format!(\"argument {}\", index + 1)\n             };"}, {"sha": "67be228d232e16c2fe5ef75fdda7eefa049f6d7b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -438,12 +438,12 @@ bitflags! {\n         // FIXME: Rename this to the actual property since it's used for generators too\n         const HAS_TY_CLOSURE     = 1 << 9;\n \n-        // `true` if there are \"names\" of types and regions and so forth\n-        // that are local to a particular fn\n+        /// `true` if there are \"names\" of types and regions and so forth\n+        /// that are local to a particular fn\n         const HAS_FREE_LOCAL_NAMES    = 1 << 10;\n \n-        // Present if the type belongs in a local type context.\n-        // Only set for Infer other than Fresh.\n+        /// Present if the type belongs in a local type context.\n+        /// Only set for Infer other than Fresh.\n         const KEEP_IN_LOCAL_TCX  = 1 << 11;\n \n         // Is there a projection that does not involve a bound region?\n@@ -462,9 +462,9 @@ bitflags! {\n                                    TypeFlags::HAS_SELF.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n \n-        // Flags representing the nominal content of a type,\n-        // computed by FlagsComputation. If you add a new nominal\n-        // flag, it should be added here too.\n+        /// Flags representing the nominal content of a type,\n+        /// computed by FlagsComputation. If you add a new nominal\n+        /// flag, it should be added here too.\n         const NOMINAL_FLAGS     = TypeFlags::HAS_PARAMS.bits |\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |"}, {"sha": "b8ae0430502b5f9d5bd0c4ae8103d31d191f9493", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -439,16 +439,16 @@ struct SubstFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     substs: &'a [Kind<'tcx>],\n \n-    // The location for which the substitution is performed, if available.\n+    /// The location for which the substitution is performed, if available.\n     span: Option<Span>,\n \n-    // The root type that is being substituted, if available.\n+    /// The root type that is being substituted, if available.\n     root_ty: Option<Ty<'tcx>>,\n \n-    // Depth of type stack\n+    /// Depth of type stack\n     ty_stack_depth: usize,\n \n-    // Number of region binders we have passed through while doing the substitution\n+    /// Number of region binders we have passed through while doing the substitution\n     binders_passed: u32,\n }\n "}, {"sha": "f1b8d532eeb7619354756489b5afec74a4fa56ba", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -145,6 +145,7 @@ const X86_WHITELIST: &[(&str, Option<&str>)] = &[\n     (\"bmi1\", None),\n     (\"bmi2\", None),\n     (\"cmpxchg16b\", Some(\"cmpxchg16b_target_feature\")),\n+    (\"f16c\", Some(\"f16c_target_feature\")),\n     (\"fma\", None),\n     (\"fxsr\", None),\n     (\"lzcnt\", None),"}, {"sha": "2d7f8b1a1aec9459f8b747bf05e0f101e445e523", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n         self.check_irrefutable(&loc.pat, match loc.source {\n             hir::LocalSource::Normal => \"local binding\",\n             hir::LocalSource::ForLoopDesugar => \"`for` loop binding\",\n+            hir::LocalSource::AsyncFn => \"async fn binding\",\n         });\n \n         // Check legality of move bindings and `@` patterns."}, {"sha": "9dd8a7050fd289374b0bac8685ceaf521f808063", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -222,7 +222,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_async(&self, span: Span, asyncness: IsAsync) {\n+    fn check_trait_fn_not_async(&self, span: Span, asyncness: &IsAsync) {\n         if asyncness.is_async() {\n             struct_span_err!(self.session, span, E0706,\n                              \"trait fns cannot be declared `async`\").emit()\n@@ -570,7 +570,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.invalid_visibility(&impl_item.vis, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         self.check_trait_fn_not_const(sig.header.constness);\n-                        self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n+                        self.check_trait_fn_not_async(impl_item.span, &sig.header.asyncness.node);\n                     }\n                 }\n             }\n@@ -642,7 +642,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n-                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n+                        self.check_trait_fn_not_async(trait_item.span, &sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n                             self.check_decl_no_pat(&sig.decl, |span, mut_ident| {"}, {"sha": "57e17eb6878e1a08544147686131dc7d753a1ce5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -948,6 +948,16 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n \n         intravisit::walk_pat(self, pat);\n     }\n+\n+    fn visit_argument_source(&mut self, s: &'tcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////////////////\n@@ -1133,6 +1143,16 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         intravisit::walk_pat(self, pattern);\n     }\n \n+    fn visit_argument_source(&mut self, s: &'tcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n+\n     fn visit_local(&mut self, local: &'tcx hir::Local) {\n         if let Some(ref init) = local.init {\n             if self.check_expr_pat_type(init.hir_id, init.span) {"}, {"sha": "2ef05f7efeb7303e8c36c87e3d4380730b106676", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -817,13 +817,13 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (FnItemRibKind, header.asyncness.node),\n+                (FnItemRibKind, &header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n-                (TraitOrImplItemRibKind, sig.header.asyncness.node),\n+                (TraitOrImplItemRibKind, &sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n                 // Async closures aren't resolved through `visit_fn`-- they're\n                 // processed separately\n-                (ClosureRibKind(node_id), IsAsync::NotAsync),\n+                (ClosureRibKind(node_id), &IsAsync::NotAsync),\n         };\n \n         // Create a value rib for the function.\n@@ -834,26 +834,42 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n         // Add each argument to the rib.\n         let mut bindings_list = FxHashMap::default();\n-        for argument in &declaration.inputs {\n+        let mut add_argument = |argument: &ast::Arg| {\n             self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n-\n             self.visit_ty(&argument.ty);\n-\n             debug!(\"(resolving function) recorded argument\");\n+        };\n+\n+        // Walk the generated async arguments if this is an `async fn`, otherwise walk the\n+        // normal arguments.\n+        if let IsAsync::Async { ref arguments, .. } = asyncness {\n+            for a in arguments { add_argument(&a.arg); }\n+        } else {\n+            for a in &declaration.inputs { add_argument(a); }\n         }\n+\n         visit::walk_fn_ret_ty(self, &declaration.output);\n \n         // Resolve the function body, potentially inside the body of an async closure\n         if let IsAsync::Async { closure_id, .. } = asyncness {\n-            let rib_kind = ClosureRibKind(closure_id);\n+            let rib_kind = ClosureRibKind(*closure_id);\n             self.ribs[ValueNS].push(Rib::new(rib_kind));\n             self.label_ribs.push(Rib::new(rib_kind));\n         }\n \n         match function_kind {\n-            FnKind::ItemFn(.., body) |\n-            FnKind::Method(.., body) => {\n-                self.visit_block(body);\n+            FnKind::ItemFn(.., body) | FnKind::Method(.., body) => {\n+                if let IsAsync::Async { ref arguments, .. } = asyncness {\n+                    let mut body = body.clone();\n+                    // Insert the generated statements into the body before attempting to\n+                    // resolve names.\n+                    for a in arguments {\n+                        body.stmts.insert(0, a.stmt.clone());\n+                    }\n+                    self.visit_block(&body);\n+                } else {\n+                    self.visit_block(body);\n+                }\n             }\n             FnKind::Closure(body) => {\n                 self.visit_expr(body);"}, {"sha": "5ac75d012752333c9284796841875a9c0a21c85f", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -374,7 +374,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref generics, _) => {\n+            ast::ItemKind::Fn(ref decl, ref header, ref generics, _) => {\n                 let mut text = String::new();\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");"}, {"sha": "79477b6fea87dbe6ce72b7641802a8bffdf6e447", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1005,6 +1005,16 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // Don't descend into the bodies of nested closures\n     fn visit_fn(&mut self, _: intravisit::FnKind<'gcx>, _: &'gcx hir::FnDecl,\n                 _: hir::BodyId, _: Span, _: hir::HirId) { }\n+\n+    fn visit_argument_source(&mut self, s: &'gcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n /// When `check_fn` is invoked on a generator (i.e., a body that"}, {"sha": "efff08f66969023dec04864237e20303c7fec56f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -297,6 +297,16 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n         let ty = self.resolve(&ty, &hir_ty.span);\n         self.write_ty_to_tables(hir_ty.hir_id, ty);\n     }\n+\n+    fn visit_argument_source(&mut self, s: &'gcx hir::ArgSource) {\n+        match s {\n+            // Don't visit the pattern in `ArgSource::AsyncFn`, it contains a pattern which has\n+            // a `NodeId` w/out a type, as it is only used for getting the name of the original\n+            // pattern for diagnostics where only an `hir::Arg` is present.\n+            hir::ArgSource::AsyncFn(..) => {},\n+            _ => intravisit::walk_argument_source(self, s),\n+        }\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {"}, {"sha": "4ff16e4a26760cb7244215a65bf198cd0bf1573a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -2017,7 +2017,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty], hir::BodyId) {\n         Arguments {\n             values: self.0.iter().enumerate().map(|(i, ty)| {\n                 Argument {\n-                    name: name_from_pat(&body.arguments[i].pat),\n+                    name: name_from_pat(&body.arguments[i].original_pat()),\n                     type_: ty.clean(cx),\n                 }\n             }).collect()"}, {"sha": "487c57172d9b16d13945d17e3bd37c4629b4e63a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -930,13 +930,13 @@ themePicker.onblur = handleThemeButtonsBlur;\n           static_files::source_serif_pro::BOLD)?;\n     write(cx.dst.join(\"SourceSerifPro-It.ttf.woff\"),\n           static_files::source_serif_pro::ITALIC)?;\n-    write(cx.dst.join(\"SourceSerifPro-LICENSE.txt\"),\n+    write(cx.dst.join(\"SourceSerifPro-LICENSE.md\"),\n           static_files::source_serif_pro::LICENSE)?;\n     write(cx.dst.join(\"SourceCodePro-Regular.woff\"),\n           static_files::source_code_pro::REGULAR)?;\n     write(cx.dst.join(\"SourceCodePro-Semibold.woff\"),\n           static_files::source_code_pro::SEMIBOLD)?;\n-    write(cx.dst.join(\"SourceCodePro-LICENSE.txt\"),\n+    write(cx.dst.join(\"SourceCodePro-LICENSE.md\"),\n           static_files::source_code_pro::LICENSE)?;\n     write(cx.dst.join(\"LICENSE-MIT.txt\"),\n           static_files::LICENSE_MIT)?;"}, {"sha": "d444ea92b6f123b901c30ab7e988cb31ae1bc2bc", "filename": "src/librustdoc/html/static/FiraSans-LICENSE.txt", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,10 +1,5 @@\n-Copyright (c) 2014, Mozilla Foundation https://mozilla.org/\n-with Reserved Font Name Fira Sans.\n-\n-Copyright (c) 2014, Mozilla Foundation https://mozilla.org/\n-with Reserved Font Name Fira Mono.\n-\n-Copyright (c) 2014, Telefonica S.A.\n+Digitized data copyright (c) 2012-2015, The Mozilla Foundation and Telefonica S.A.\n+with Reserved Font Name < Fira >, \n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n This license is copied below, and is also available with a FAQ at:\n@@ -24,7 +19,7 @@ with others.\n \n The OFL allows the licensed fonts to be used, studied, modified and\n redistributed freely as long as they are not sold by themselves. The\n-fonts, including any derivative works, can be bundled, embedded,\n+fonts, including any derivative works, can be bundled, embedded, \n redistributed and/or sold with any software provided that any reserved\n names are not used by derivative works. The fonts and derivatives,\n however, cannot be released under any other type of license. The"}, {"sha": "7d742c5fb7d4597ae140f8418f52ffe03dc75343", "filename": "src/librustdoc/html/static/FiraSans-Medium.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Medium.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Medium.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Medium.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "d8e0363f4e1a000568d782653291e14c66ee3485", "filename": "src/librustdoc/html/static/FiraSans-Regular.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-Regular.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "1177330426de9f788fedeae13dfe6a195a06d3b2", "filename": "src/librustdoc/html/static/SourceCodePro-LICENSE.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-LICENSE.md?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -18,7 +18,7 @@ with others.\n \n The OFL allows the licensed fonts to be used, studied, modified and\n redistributed freely as long as they are not sold by themselves. The\n-fonts, including any derivative works, can be bundled, embedded,\n+fonts, including any derivative works, can be bundled, embedded, \n redistributed and/or sold with any software provided that any reserved\n names are not used by derivative works. The fonts and derivatives,\n however, cannot be released under any other type of license. The", "previous_filename": "src/librustdoc/html/static/SourceCodePro-LICENSE.txt"}, {"sha": "117c7e5142c3811eed73b9321760132160c526c7", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "270873a86a09b98551ed36397921ac4c9ecaec8c", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "ca254318fe9ea9fc0f3313bc5df7ea5109f16921", "filename": "src/librustdoc/html/static/SourceSerifPro-Bold.ttf.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "a287bbe6ed3f871376686682bb455d71a13882b2", "filename": "src/librustdoc/html/static/SourceSerifPro-It.ttf.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "22cb755f2f1db03cafa44f955b924eeb8ec90219", "filename": "src/librustdoc/html/static/SourceSerifPro-LICENSE.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-LICENSE.md?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,4 @@\n-Copyright 2014 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.\n+Copyright 2014-2018 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n ", "previous_filename": "src/librustdoc/html/static/SourceSerifPro-LICENSE.txt"}, {"sha": "a3d55cfdf2555f47860979797d2e8971520c2fa4", "filename": "src/librustdoc/html/static/SourceSerifPro-Regular.ttf.woff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}, {"sha": "24fe61e977a1ee5fee3d1af0e3c385dbd5914fd9", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -91,7 +91,7 @@ pub mod source_serif_pro {\n     pub static ITALIC: &'static [u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n \n     /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.txt\");\n+    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font.\n@@ -103,7 +103,7 @@ pub mod source_code_pro {\n     pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n+    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.md\");\n }\n \n /// Files related to the sidebar in rustdoc sources."}, {"sha": "334fcfd74f357eb44fe24b4cf1c8bc7dfe8b66d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -888,6 +888,17 @@ pub struct Local {\n     pub id: NodeId,\n     pub span: Span,\n     pub attrs: ThinVec<Attribute>,\n+    /// Origin of this local variable.\n+    pub source: LocalSource,\n+}\n+\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub enum LocalSource {\n+    /// Local was parsed from source.\n+    Normal,\n+    /// Within `ast::IsAsync::Async`, a local is generated that will contain the moved arguments\n+    /// of an `async fn`.\n+    AsyncFn,\n }\n \n /// An arm of a 'match'.\n@@ -1725,6 +1736,16 @@ pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n     pub id: NodeId,\n+    pub source: ArgSource,\n+}\n+\n+/// The source of an argument in a function header.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum ArgSource {\n+    /// Argument as written by the user.\n+    Normal,\n+    /// Argument from `async fn` lowering, contains the original binding pattern.\n+    AsyncFn(P<Pat>),\n }\n \n /// Alternative representation for `Arg`s describing `self` parameter of methods.\n@@ -1784,6 +1805,7 @@ impl Arg {\n             }),\n             ty,\n             id: DUMMY_NODE_ID,\n+            source: ArgSource::Normal,\n         };\n         match eself.node {\n             SelfKind::Explicit(ty, mutbl) => arg(mutbl, ty),\n@@ -1838,31 +1860,48 @@ pub enum Unsafety {\n     Normal,\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct AsyncArgument {\n+    /// `__arg0`\n+    pub ident: Ident,\n+    /// `__arg0: <ty>` argument to replace existing function argument `<pat>: <ty>`.\n+    pub arg: Arg,\n+    /// `let <pat>: <ty> = __arg0;` statement to be inserted at the start of the block.\n+    pub stmt: Stmt,\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAsync {\n     Async {\n         closure_id: NodeId,\n         return_impl_trait_id: NodeId,\n+        /// This field stores the arguments and statements that are used in HIR lowering to\n+        /// ensure that `async fn` arguments are dropped at the correct time.\n+        ///\n+        /// The argument and statements here are generated at parse time as they are required in\n+        /// both the hir lowering, def collection and name resolution and this stops them needing\n+        /// to be created in each place.\n+        arguments: Vec<AsyncArgument>,\n     },\n     NotAsync,\n }\n \n impl IsAsync {\n-    pub fn is_async(self) -> bool {\n-        if let IsAsync::Async { .. } = self {\n+    pub fn is_async(&self) -> bool {\n+        if let IsAsync::Async { .. } = *self {\n             true\n         } else {\n             false\n         }\n     }\n \n     /// In ths case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n-    pub fn opt_return_id(self) -> Option<NodeId> {\n+    pub fn opt_return_id(&self) -> Option<NodeId> {\n         match self {\n             IsAsync::Async {\n                 return_impl_trait_id,\n                 ..\n-            } => Some(return_impl_trait_id),\n+            } => Some(*return_impl_trait_id),\n             IsAsync::NotAsync => None,\n         }\n     }\n@@ -2202,7 +2241,7 @@ impl Item {\n ///\n /// All the information between the visibility and the name of the function is\n /// included in this struct (e.g., `async unsafe fn` or `const extern \"C\" fn`).\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub asyncness: Spanned<IsAsync>,"}, {"sha": "40dd187ed28a7e5560ee7eeb26e0a226dc16bfd9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -526,6 +526,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n             attrs: ThinVec::new(),\n+            source: ast::LocalSource::Normal,\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -554,6 +555,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n             attrs: ThinVec::new(),\n+            source: ast::LocalSource::Normal,\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -571,6 +573,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span,\n             attrs: ThinVec::new(),\n+            source: ast::LocalSource::Normal,\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -976,7 +979,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::Arg {\n             ty,\n             pat: arg_pat,\n-            id: ast::DUMMY_NODE_ID\n+            id: ast::DUMMY_NODE_ID,\n+            source: ast::ArgSource::Normal,\n         }\n     }\n "}, {"sha": "68cd3c28676f9cec9e9f5a6b5de9e9f327ff7ba6", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -102,6 +102,13 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     fn remove(&mut self, id: ast::NodeId) -> AstFragment {\n         self.expanded_fragments.remove(&id).unwrap()\n     }\n+\n+    fn next_id(&mut self, id: &mut ast::NodeId) {\n+        if self.monotonic {\n+            assert_eq!(*id, ast::DUMMY_NODE_ID);\n+            *id = self.cx.resolver.next_node_id()\n+        }\n+    }\n }\n \n impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n@@ -183,9 +190,16 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         noop_visit_block(block, self);\n \n         for stmt in block.stmts.iter_mut() {\n-            if self.monotonic {\n-                assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n-                stmt.id = self.cx.resolver.next_node_id();\n+            self.next_id(&mut stmt.id);\n+        }\n+    }\n+\n+    fn visit_asyncness(&mut self, a: &mut ast::IsAsync) {\n+        noop_visit_asyncness(a, self);\n+\n+        if let ast::IsAsync::Async { ref mut arguments, .. } = a {\n+            for argument in arguments.iter_mut() {\n+                self.next_id(&mut argument.stmt.id);\n             }\n         }\n     }"}, {"sha": "d3441a2039b175e7ab1bf488d58b567fa2e58e16", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -208,6 +208,10 @@ pub trait MutVisitor: Sized {\n         noop_visit_local(l, self);\n     }\n \n+    fn visit_local_source(&mut self, l: &mut LocalSource) {\n+        noop_visit_local_source(l, self);\n+    }\n+\n     fn visit_mac(&mut self, _mac: &mut Mac) {\n         panic!(\"visit_mac disabled by default\");\n         // N.B., see note about macros above. If you really want a visitor that\n@@ -231,6 +235,10 @@ pub trait MutVisitor: Sized {\n         noop_visit_arg(a, self);\n     }\n \n+    fn visit_arg_source(&mut self, a: &mut ArgSource) {\n+        noop_visit_arg_source(a, self);\n+    }\n+\n     fn visit_generics(&mut self, generics: &mut Generics) {\n         noop_visit_generics(generics, self);\n     }\n@@ -511,13 +519,17 @@ pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>(args: &mut Parenth\n }\n \n pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n-    let Local { id, pat, ty, init, span, attrs } = local.deref_mut();\n+    let Local { id, pat, ty, init, span, attrs, source } = local.deref_mut();\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     visit_opt(ty, |ty| vis.visit_ty(ty));\n     visit_opt(init, |init| vis.visit_expr(init));\n     vis.visit_span(span);\n     visit_thin_attrs(attrs, vis);\n+    vis.visit_local_source(source);\n+}\n+\n+pub fn noop_visit_local_source<T: MutVisitor>(_local_source: &mut LocalSource, _vis: &mut T) {\n }\n \n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n@@ -556,10 +568,18 @@ pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty }: &mut Arg, vis: &mut T) {\n+pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty, source }: &mut Arg, vis: &mut T) {\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     vis.visit_ty(ty);\n+    vis.visit_arg_source(source);\n+}\n+\n+pub fn noop_visit_arg_source<T: MutVisitor>(source: &mut ArgSource, vis: &mut T) {\n+    match source {\n+        ArgSource::Normal => {},\n+        ArgSource::AsyncFn(pat) => vis.visit_pat(pat),\n+    }\n }\n \n pub fn noop_visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {\n@@ -671,9 +691,17 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n \n pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T) {\n     match asyncness {\n-        IsAsync::Async { closure_id, return_impl_trait_id } => {\n+        IsAsync::Async { closure_id, return_impl_trait_id, ref mut arguments } => {\n             vis.visit_id(closure_id);\n             vis.visit_id(return_impl_trait_id);\n+            for AsyncArgument { ident, arg, stmt } in arguments.iter_mut() {\n+                vis.visit_ident(ident);\n+                vis.visit_arg(arg);\n+                visit_clobber(stmt, |stmt| {\n+                    vis.flat_map_stmt(stmt)\n+                        .expect_one(\"expected visitor to produce exactly one item\")\n+                });\n+            }\n         }\n         IsAsync::NotAsync => {}\n     }"}, {"sha": "53dab510ac39fc95e1b6863a67d422bbc9e07a38", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,7 @@\n-use crate::ast::{AngleBracketedArgs, ParenthesizedArgs, AttrStyle, BareFnTy};\n+use crate::ast::{AngleBracketedArgs, AsyncArgument, ParenthesizedArgs, AttrStyle, BareFnTy};\n use crate::ast::{GenericBound, TraitBoundModifier};\n use crate::ast::Unsafety;\n-use crate::ast::{Mod, AnonConst, Arg, Arm, Guard, Attribute, BindingMode, TraitItemKind};\n+use crate::ast::{Mod, AnonConst, Arg, ArgSource, Arm, Guard, Attribute, BindingMode, TraitItemKind};\n use crate::ast::Block;\n use crate::ast::{BlockCheckMode, CaptureBy, Movability};\n use crate::ast::{Constness, Crate};\n@@ -14,7 +14,7 @@ use crate::ast::{GenericParam, GenericParamKind};\n use crate::ast::GenericArg;\n use crate::ast::{Ident, ImplItem, IsAsync, IsAuto, Item, ItemKind};\n use crate::ast::{Label, Lifetime, Lit, LitKind};\n-use crate::ast::Local;\n+use crate::ast::{Local, LocalSource};\n use crate::ast::MacStmtStyle;\n use crate::ast::{Mac, Mac_, MacDelimiter};\n use crate::ast::{MutTy, Mutability};\n@@ -550,7 +550,7 @@ fn dummy_arg(span: Span) -> Arg {\n         span,\n         id: ast::DUMMY_NODE_ID\n     };\n-    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n+    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal }\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -1517,6 +1517,7 @@ impl<'a> Parser<'a> {\n             IsAsync::Async {\n                 closure_id: ast::DUMMY_NODE_ID,\n                 return_impl_trait_id: ast::DUMMY_NODE_ID,\n+                arguments: Vec::new(),\n             }\n         } else {\n             IsAsync::NotAsync\n@@ -1575,7 +1576,7 @@ impl<'a> Parser<'a> {\n             // trait item macro.\n             (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac), ast::Generics::default())\n         } else {\n-            let (constness, unsafety, asyncness, abi) = self.parse_fn_front_matter()?;\n+            let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n \n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n@@ -1589,6 +1590,7 @@ impl<'a> Parser<'a> {\n                 p.parse_arg_general(p.span.rust_2018(), true, false)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n+            self.construct_async_arguments(&mut asyncness, &d);\n \n             let sig = ast::MethodSig {\n                 header: FnHeader {\n@@ -2124,7 +2126,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID })\n+        Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal })\n     }\n \n     /// Parses a single function argument.\n@@ -2147,7 +2149,8 @@ impl<'a> Parser<'a> {\n         Ok(Arg {\n             ty: t,\n             pat,\n-            id: ast::DUMMY_NODE_ID\n+            id: ast::DUMMY_NODE_ID,\n+            source: ast::ArgSource::Normal,\n         })\n     }\n \n@@ -5029,6 +5032,7 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n             attrs,\n+            source: LocalSource::Normal,\n         }))\n     }\n \n@@ -6566,7 +6570,7 @@ impl<'a> Parser<'a> {\n     /// Parses an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n-                     asyncness: Spanned<IsAsync>,\n+                     mut asyncness: Spanned<IsAsync>,\n                      constness: Spanned<Constness>,\n                      abi: Abi)\n                      -> PResult<'a, ItemInfo> {\n@@ -6575,6 +6579,7 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n+        self.construct_async_arguments(&mut asyncness, &decl);\n         let header = FnHeader { unsafety, asyncness, constness, abi };\n         Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n     }\n@@ -6755,11 +6760,12 @@ impl<'a> Parser<'a> {\n             Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(),\n                 ast::ImplItemKind::Macro(mac)))\n         } else {\n-            let (constness, unsafety, asyncness, abi) = self.parse_fn_front_matter()?;\n+            let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n             let decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n             generics.where_clause = self.parse_where_clause()?;\n+            self.construct_async_arguments(&mut asyncness, &decl);\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n             let header = ast::FnHeader { abi, unsafety, constness, asyncness };\n@@ -8181,6 +8187,7 @@ impl<'a> Parser<'a> {\n                                    respan(async_span, IsAsync::Async {\n                                        closure_id: ast::DUMMY_NODE_ID,\n                                        return_impl_trait_id: ast::DUMMY_NODE_ID,\n+                                       arguments: Vec::new(),\n                                    }),\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n@@ -8826,6 +8833,68 @@ impl<'a> Parser<'a> {\n             }\n         }\n     }\n+\n+    /// When lowering a `async fn` to the HIR, we need to move all of the arguments of the function\n+    /// into the generated closure so that they are dropped when the future is polled and not when\n+    /// it is created.\n+    ///\n+    /// The arguments of the function are replaced in HIR lowering with the arguments created by\n+    /// this function and the statements created here are inserted at the top of the closure body.\n+    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &FnDecl) {\n+        if let IsAsync::Async { ref mut arguments, .. } = asyncness.node {\n+            for (index, input) in decl.inputs.iter().enumerate() {\n+                let id = ast::DUMMY_NODE_ID;\n+                let span = input.pat.span;\n+\n+                // Construct a name for our temporary argument.\n+                let name = format!(\"__arg{}\", index);\n+                let ident = Ident::from_str(&name);\n+\n+                // Construct an argument representing `__argN: <ty>` to replace the argument of the\n+                // async function.\n+                let arg = Arg {\n+                    ty: input.ty.clone(),\n+                    id,\n+                    pat: P(Pat {\n+                        id,\n+                        node: PatKind::Ident(\n+                            BindingMode::ByValue(Mutability::Immutable), ident, None,\n+                        ),\n+                        span,\n+                    }),\n+                    source: ArgSource::AsyncFn(input.pat.clone()),\n+                };\n+\n+                // Construct a `let <pat> = __argN;` statement to insert at the top of the\n+                // async closure.\n+                let local = P(Local {\n+                    pat: input.pat.clone(),\n+                    // We explicitly do not specify the type for this statement. When the user's\n+                    // argument type is `impl Trait` then this would require the\n+                    // `impl_trait_in_bindings` feature to also be present for that same type to\n+                    // be valid in this binding. At the time of writing (13 Mar 19),\n+                    // `impl_trait_in_bindings` is not stable.\n+                    ty: None,\n+                    init: Some(P(Expr {\n+                        id,\n+                        node: ExprKind::Path(None, ast::Path {\n+                            span,\n+                            segments: vec![PathSegment { ident, id, args: None }],\n+                        }),\n+                        span,\n+                        attrs: ThinVec::new(),\n+                    })),\n+                    id,\n+                    span,\n+                    attrs: ThinVec::new(),\n+                    source: LocalSource::AsyncFn,\n+                });\n+                let stmt = Stmt { id, node: StmtKind::Local(local), span, };\n+\n+                arguments.push(AsyncArgument { ident, arg, stmt });\n+            }\n+        }\n+    }\n }\n \n pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler: &errors::Handler) {"}, {"sha": "7ce3951f13ecd9f1890231259579d18cd705fecd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -372,7 +372,7 @@ pub fn vis_to_string(v: &ast::Visibility) -> String {\n }\n \n pub fn fun_to_string(decl: &ast::FnDecl,\n-                     header: ast::FnHeader,\n+                     header: &ast::FnHeader,\n                      name: ast::Ident,\n                      generics: &ast::Generics)\n                      -> String {\n@@ -1133,7 +1133,7 @@ impl<'a> State<'a> {\n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 self.head(\"\")?;\n-                self.print_fn(decl, ast::FnHeader::default(),\n+                self.print_fn(decl, &ast::FnHeader::default(),\n                               Some(item.ident),\n                               generics, &item.vis)?;\n                 self.end()?; // end head-ibox\n@@ -1263,7 +1263,7 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n+            ast::ItemKind::Fn(ref decl, ref header, ref param_names, ref body) => {\n                 self.head(\"\")?;\n                 self.print_fn(\n                     decl,\n@@ -1615,7 +1615,7 @@ impl<'a> State<'a> {\n                             vis: &ast::Visibility)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n-                      m.header,\n+                      &m.header,\n                       Some(ident),\n                       &generics,\n                       vis)\n@@ -2213,7 +2213,7 @@ impl<'a> State<'a> {\n                 self.bclose_(expr.span, INDENT_UNIT)?;\n             }\n             ast::ExprKind::Closure(\n-                capture_clause, asyncness, movability, ref decl, ref body, _) => {\n+                capture_clause, ref asyncness, movability, ref decl, ref body, _) => {\n                 self.print_movability(movability)?;\n                 self.print_asyncness(asyncness)?;\n                 self.print_capture_clause(capture_clause)?;\n@@ -2798,7 +2798,7 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n-                    header: ast::FnHeader,\n+                    header: &ast::FnHeader,\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n                     vis: &ast::Visibility) -> io::Result<()> {\n@@ -2853,8 +2853,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_asyncness(&mut self, asyncness: ast::IsAsync)\n-                                -> io::Result<()> {\n+    pub fn print_asyncness(&mut self, asyncness: &ast::IsAsync) -> io::Result<()> {\n         if asyncness.is_async() {\n             self.word_nbsp(\"async\")?;\n         }\n@@ -3126,7 +3125,7 @@ impl<'a> State<'a> {\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n-                      ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n+                      &ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n                       name,\n                       &generics,\n                       &source_map::dummy_spanned(ast::VisibilityKind::Inherited))?;\n@@ -3189,7 +3188,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_header_info(&mut self,\n-                                header: ast::FnHeader,\n+                                header: &ast::FnHeader,\n                                 vis: &ast::Visibility) -> io::Result<()> {\n         self.s.word(visibility_qualified(vis, \"\"))?;\n \n@@ -3198,7 +3197,7 @@ impl<'a> State<'a> {\n             ast::Constness::Const => self.word_nbsp(\"const\")?\n         }\n \n-        self.print_asyncness(header.asyncness.node)?;\n+        self.print_asyncness(&header.asyncness.node)?;\n         self.print_unsafety(header.unsafety)?;\n \n         if header.abi != Abi::Rust {\n@@ -3247,7 +3246,7 @@ mod tests {\n             assert_eq!(\n                 fun_to_string(\n                     &decl,\n-                    ast::FnHeader {\n+                    &ast::FnHeader {\n                         unsafety: ast::Unsafety::Normal,\n                         constness: source_map::dummy_spanned(ast::Constness::NotConst),\n                         asyncness: source_map::dummy_spanned(ast::IsAsync::NotAsync),"}, {"sha": "fc99d10b0b6c613cb76f4ec67b8f9522a2dc8ead", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -544,6 +544,9 @@ pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FunctionR\n pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &'a FnDecl) {\n     for argument in &function_declaration.inputs {\n         visitor.visit_pat(&argument.pat);\n+        if let ArgSource::AsyncFn(pat) = &argument.source {\n+            visitor.visit_pat(pat);\n+        }\n         visitor.visit_ty(&argument.ty)\n     }\n     visitor.visit_fn_ret_ty(&function_declaration.output)"}, {"sha": "2fc1fc9140dc38ce096b3f0b4cb12b74d928ba0f", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -128,6 +128,7 @@ fn stmt_let_undescore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> ast\n         id: ast::DUMMY_NODE_ID,\n         span: sp,\n         attrs: ThinVec::new(),\n+        source: ast::LocalSource::Normal,\n     });\n     ast::Stmt {\n         id: ast::DUMMY_NODE_ID,"}, {"sha": "c806020039d267cd4462cc9f5baa6be84d6caf2b", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -24,11 +24,11 @@ struct SyntaxContextData {\n     outer_mark: Mark,\n     transparency: Transparency,\n     prev_ctxt: SyntaxContext,\n-    // This context, but with all transparent and semi-transparent marks filtered away.\n+    /// This context, but with all transparent and semi-transparent marks filtered away.\n     opaque: SyntaxContext,\n-    // This context, but with all transparent marks filtered away.\n+    /// This context, but with all transparent marks filtered away.\n     opaque_and_semitransparent: SyntaxContext,\n-    // Name of the crate to which `$crate` with this context would resolve.\n+    /// Name of the crate to which `$crate` with this context would resolve.\n     dollar_crate_name: Symbol,\n }\n "}, {"sha": "6af344fab15125428d6bc0251eb3123a7377e836", "filename": "src/test/codegen-units/item-collection/cross-crate-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -3,7 +3,6 @@\n // ignoring this test until MIR codegen has taken over completely\n // ignore-test\n \n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "e1991046d4366397e3ae8b94cc8a54d50b017d9b", "filename": "src/test/codegen-units/item-collection/cross-crate-generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "442438b64b66f95ee974968ecbef65d7f0e6b780", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "3f61f124d240937ba08e622c7c89616e5b7b51fd", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "839097042048279afc959d16b429699b49b74eac", "filename": "src/test/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "571bb4fa867cbf432d21e0a2f18787c57f4f123b", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "e45644cd375626bd89095957142de42a5a199895", "filename": "src/test/codegen-units/item-collection/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "10bc52f6a8d22ceab4d3e5de62842f2eb8ea9bcd", "filename": "src/test/codegen-units/item-collection/items-within-generic-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "26d2fb1b42194a977e1f8e4733607a131e6e7a51", "filename": "src/test/codegen-units/item-collection/non-generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "2358d38942a71d672b5c9ba7e3b711ea686f0c2e", "filename": "src/test/codegen-units/item-collection/overloaded-operators.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "f6005eed43c7d85afba6c4ddef2516fe70206a4b", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags:-Zprint-mono-items=eager\n-// ignore-tidy-linelength\n \n #![feature(start)]\n "}, {"sha": "7e28ba58b63faa074d0d8e620cb25361bf05e9c9", "filename": "src/test/codegen-units/item-collection/statics-and-consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "f090c0c8d130ad3af4ada94cc4db3961177c86b7", "filename": "src/test/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "27ace8e31add3743fffeb5ae330c9615e789eba3", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "11f6cc62d49e3c9ee72f3b8c2befb8db8a5297f1", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "ec6be0ecf43efb41bae6e57f0e32cd593366c55b", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=lazy\n \n #![deny(dead_code)]"}, {"sha": "4d095e4d6c7e99753222ec0cc3a01ddc58583196", "filename": "src/test/codegen-units/item-collection/unreferenced-inline-function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=lazy\n \n // N.B., we do not expect *any* monomorphization to be generated here."}, {"sha": "fd794df37608b131fb566dbe8060c86fd2bbf0b0", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "4a5e294ea0f4ae7beb4ac480a0bf54b5a823bba0", "filename": "src/test/codegen-units/item-collection/unused-traits-and-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![crate_type=\"lib\"]"}, {"sha": "bbded480b0c15400abe0a789cda03d19bd6215e8", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Zincremental=tmp/partitioning-tests/statics"}, {"sha": "ae2ff9994fdf0c77151d3f62dd3ba8b645fa0fd8", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "2272488375fdde6a587eee480c359fc401e42c83", "filename": "src/test/codegen/enum-debug-niche.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -2,7 +2,6 @@\n // before 7.0, then backported to the Rust LLVM fork.  It tests that\n // optimized enum debug info accurately reflects the enum layout.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // min-system-llvm-version 8.0\n "}, {"sha": "3539aae42eae7af03048e5a9bd33ac08a591e0a4", "filename": "src/test/codegen/enum-debug-tagged.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -2,7 +2,6 @@\n // before 7.0, then backported to the Rust LLVM fork.  It tests that\n // debug info for tagged (ordinary) enums is properly emitted.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // min-system-llvm-version 8.0\n "}, {"sha": "eea16805c596821b25e6b713e7ae9f32f592631c", "filename": "src/test/codegen/generic-debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-windows\n \n // compile-flags: -g -C no-prepopulate-passes"}, {"sha": "7f1b0e17f871e53014cc51027edda93b3187ea84", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,6 @@\n // This test depends on a patch that was committed to upstream LLVM\n // before 4.0, formerly backported to the Rust LLVM fork.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "b03290af0e3b76a382be7bcf73a4dd5f960fc238", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "49f93cf62c7544edc6c2d78d9686797935c9a442", "filename": "src/test/codegen/noreturn-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -g -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "95c100571ce6ed418808ab020d45754ad53c656d", "filename": "src/test/codegen/noreturnflag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -g -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "bbe0d81de3d421b93a94e96d6edefd7cf4070736", "filename": "src/test/codegen/panic-abort-windows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // This test is for *-windows-msvc only.\n // ignore-android\n // ignore-bitrig"}, {"sha": "cbb9942347673a03f18b41952a29ced69520614a", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "30d6112fd02f6a5e3b1aa66e54438eae99dbec9e", "filename": "src/test/codegen/remap_path_prefix/xcrate-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows\n-// ignore-tidy-linelength\n // compile-flags: -g -C metadata=foo -C no-prepopulate-passes\n // aux-build:xcrate-generic.rs\n "}, {"sha": "82d65b101b06d38732220dfaa4c6ecd500a9ac06", "filename": "src/test/codegen/vtabletype.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,6 @@\n // This test depends on a patch that was committed to upstream LLVM\n // after 5.0, then backported to the Rust LLVM fork.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "13577b0587ff04cb5c0579c7296c73b69f80d9e6", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n // min-system-llvm-version: 8.0\n // min-gdb-version: 8.2"}, {"sha": "72d38a6f045442ddab8382864cd1e4dae228cb72", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb: FIXME(#27089)\n // min-lldb-version: 310\n "}, {"sha": "4f75ef4fa9b9a548dfae9d70fa7a5f4882a661bd", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it."}, {"sha": "c440ce059f7215f47906460319e5cd48e5e33bc5", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n // min-system-llvm-version: 8.0"}, {"sha": "627b99445ea81707a477f8ecd12c00486b5ae5f4", "filename": "src/test/incremental/remapped_paths_cc/auxiliary/extern_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n //[rpass1] compile-flags: -g\n //[rpass2] compile-flags: -g\n //[rpass3] compile-flags: -g --remap-path-prefix={{src-base}}=/the/src"}, {"sha": "ca0e9fa811a260a5a0f65dfb26496d9c8435498e", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -5,8 +5,6 @@\n // so subtle breakage in them can leave a quite hard-to-find trail of\n // destruction.\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     let nodrop_x = false;\n     let nodrop_y;"}, {"sha": "84567e1b4b8f26cf9e17016210eca120315a1cc8", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -20,7 +20,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 29 }];\n+//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 31 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "2be48927fd3b73b5828796064e4f5225ea8668ad", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 13 }];\n+//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 15 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "2a6c2db03bec14abff7b5cfb629f5c8ec06f331c", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -5,7 +5,6 @@\n \n // compile-flags:-Zborrowck=mir -Zverbose\n //                              ^^^^^^^^^ force compiler to dump more region information\n-// ignore-tidy-linelength\n \n #![allow(warnings)]\n "}, {"sha": "c099b1dccb6684fce22ed078e7077b00b96adaff", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n fn main() {\n     let a = 0;\n     {"}, {"sha": "6d5a9876c373c37ab5a6f5c68ba3eb9b4496acc7", "filename": "src/test/run-pass/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -12,7 +12,7 @@ fn expect_free_supply_free<'x>(x: &'x u32) {\n         x.push(22_u32);\n \n         // ...since we now know the type of `y` and can resolve the method call.\n-        y.wrapping_add(1);\n+        let _ = y.wrapping_add(1);\n     });\n }\n "}, {"sha": "ea4f5e076b005b294470c613891f52d3d35506a2", "filename": "src/test/run-pass/issue-54716.rs", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-54716.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -0,0 +1,184 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await, await_macro, futures_api)]\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::sync::Arc;\n+use std::rc::Rc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_poll<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    expected_order: &[DropOrder],\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    assert_eq!(*actual_order.borrow(), expected_order);\n+}\n+\n+fn main() {\n+    use DropOrder::*;\n+\n+    // At time of writing (23/04/19), the `bar` and `foobar` tests do not output the same order as\n+    // the equivalent non-async functions. This is because the drop order of captured variables\n+    // doesn't match the drop order of arguments in a function.\n+\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| foo(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 &[Function, Val(\"_y\"), Val(\"x\")]);\n+    assert_drop_order_after_poll(|l| bar(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| baz((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| {\n+        foobar(\n+            D(\"x\", l.clone()),\n+            (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+            D(\"_\", l.clone()),\n+            D(\"_y\", l.clone()),\n+        )\n+    }, &[Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\")]);\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| Foo::foo(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 &[Function, Val(\"_y\"), Val(\"x\")]);\n+    assert_drop_order_after_poll(|l| Foo::bar(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| Foo::baz((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| {\n+        Foo::foobar(\n+            D(\"x\", l.clone()),\n+            (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+            D(\"_\", l.clone()),\n+            D(\"_y\", l.clone()),\n+        )\n+    }, &[Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\")]);\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_poll(|l| b.foo(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 &[Function, Val(\"_y\"), Val(\"x\")]);\n+    assert_drop_order_after_poll(|l| b.bar(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| b.baz((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 &[Function, Val(\"x\"), Val(\"_\")]);\n+    assert_drop_order_after_poll(|l| {\n+        b.foobar(\n+            D(\"x\", l.clone()),\n+            (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+            D(\"_\", l.clone()),\n+            D(\"_y\", l.clone()),\n+        )\n+    }, &[Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\")]);\n+}"}, {"sha": "2f47b694ae912ee8089558451c174ccaebdd9034", "filename": "src/test/run-pass/issues/issue-16278.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -3,8 +3,8 @@\n \n // this file has some special \\r\\n endings (use xxd to see them)\n \n-fn main() {assert_eq!(b\"\", b\"\\\n+fn main() {assert_eq!(b\"\", b\"\\\r\n                                    \");\n-assert_eq!(b\"\\n\", b\"\n+assert_eq!(b\"\\n\", b\"\r\n \");\n }"}, {"sha": "c7a13bbf606cbe68d0db8bbfa9b87c05021e31e0", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-end-whitespace\n-\n #![deny(intra_doc_link_resolution_failure)]\n \n // An error in calculating spans while reporting intra-doc link resolution errors caused rustdoc to"}, {"sha": "79702a1a546b7497fbebf082a0de0717bdf1e51a", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,11 +1,11 @@\n error: `[i]` cannot be resolved, ignoring it...\n-  --> $DIR/intra-link-span-ice-55723.rs:11:10\n+  --> $DIR/intra-link-span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n    |           ^ cannot be resolved, ignoring\n    |\n note: lint level defined here\n-  --> $DIR/intra-link-span-ice-55723.rs:3:9\n+  --> $DIR/intra-link-span-ice-55723.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c2a98049a48cb7000f9e5ad0db4d7fe9a06c81cc", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: --document-private-items\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'"}, {"sha": "60b7b28ae4acf6b4c9fa99102f21f4a65277ff59", "filename": "src/test/rustdoc/extern-html-root-url.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // compile-flags:-Z unstable-options --extern-html-root-url core=https://example.com/core/0.1.0\n \n // @has extern_html_root_url/index.html"}, {"sha": "9f24e817fd3ebcc298d3f874afdbe54080279c2d", "filename": "src/test/rustdoc/method-list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmethod-list.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html"}, {"sha": "8e88b2b59015d7b7bc7fc23b894da3bb3c34f30a", "filename": "src/test/rustdoc/pub-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-method.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: --document-private-items\n \n #![crate_name = \"foo\"]"}, {"sha": "40786c032b180f611ef8b7549f97446845c61a62", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:32:15\n+  --> $DIR/two-phase-activation-sharing-interference.rs:30:15\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:40:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:38:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:51:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:49:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -32,7 +32,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:62:14\n+  --> $DIR/two-phase-activation-sharing-interference.rs:60:14\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here"}, {"sha": "4d77ac915b1e7657729fb52204f2126a94f615a9", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // revisions: nll_target\n \n // The following revisions are disabled due to missing support from two-phase beyond autorefs"}, {"sha": "1174a76adabcbcc8bc0bfb66d9b760c478003d9b", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(const_indexing)]\n \n const FOO: [usize; 3] = [1, 2, 3];"}, {"sha": "f25cac5cddd474c5f5852b65ed1feda2c57a3fda", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-array-oob.rs:8:19\n+  --> $DIR/const-array-oob.rs:6:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n    |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4"}, {"sha": "c4f9fdce74907f1e1a08d913f8030f5ce9fd68d7", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // run-pass\n \n #![deny(deprecated_in_future)]"}, {"sha": "2284cfa8d685b9f0d730067665de5d037a261a73", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n warning: use of deprecated item 'deprecated_future': text\n-  --> $DIR/deprecation-in-future.rs:11:5\n+  --> $DIR/deprecation-in-future.rs:9:5\n    |\n LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "f4a6f3fd62a05666513111af0b5c152e4852ba5a", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #[derive(Eqr)]\n //~^ ERROR cannot find derive macro `Eqr` in this scope\n struct Foo;"}, {"sha": "cf0173dfad5cd53e347ce1e4423dfc5ea28917ea", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error: cannot find derive macro `Eqr` in this scope\n-  --> $DIR/deriving-meta-unknown-trait.rs:3:10\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: try: `Eq`"}, {"sha": "f8f565f4d9c14be524db2eb7fc8217ce26ad0979", "filename": "src/test/ui/discrim/discrim-overflow-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Issue 23030: Detect overflowing discriminant\n //\n // Check that we detect the overflow even if enum is not used."}, {"sha": "198ebe9eb51f9383c264e600c1d8c5bf1f02a5c7", "filename": "src/test/ui/discrim/discrim-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:17:9\n+  --> $DIR/discrim-overflow-2.rs:15:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:26:9\n+  --> $DIR/discrim-overflow-2.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:35:9\n+  --> $DIR/discrim-overflow-2.rs:33:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:44:9\n+  --> $DIR/discrim-overflow-2.rs:42:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:53:9\n+  --> $DIR/discrim-overflow-2.rs:51:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:62:9\n+  --> $DIR/discrim-overflow-2.rs:60:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:71:9\n+  --> $DIR/discrim-overflow-2.rs:69:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:80:9\n+  --> $DIR/discrim-overflow-2.rs:78:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "d8a9dacfa5180e0fb0b7990549153f11063bfc0f", "filename": "src/test/ui/discrim/discrim-overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Issue 23030: Detect overflowing discriminant\n \n // See also run-pass/discrim-explicit-23030.rs where the suggested"}, {"sha": "a2ae4863f9f79abe6e3c8ed35b077d7ab46b4c8b", "filename": "src/test/ui/discrim/discrim-overflow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:15:9\n+  --> $DIR/discrim-overflow.rs:13:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:26:9\n+  --> $DIR/discrim-overflow.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:37:9\n+  --> $DIR/discrim-overflow.rs:35:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:48:9\n+  --> $DIR/discrim-overflow.rs:46:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:60:9\n+  --> $DIR/discrim-overflow.rs:58:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:72:9\n+  --> $DIR/discrim-overflow.rs:70:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:84:9\n+  --> $DIR/discrim-overflow.rs:82:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:96:9\n+  --> $DIR/discrim-overflow.rs:94:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "3631415fc5f987f9f9f981a8628667aa48e995fe", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2015\n \n // tests that editions work with the tyvar warning-turned-error"}, {"sha": "508d5df2a7160cc59ff9c4fe189e06732c91f0b4", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,11 +1,11 @@\n error: type annotations needed\n-  --> $DIR/edition-raw-pointer-method-2015.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2015.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/edition-raw-pointer-method-2015.rs:6:8\n+  --> $DIR/edition-raw-pointer-method-2015.rs:5:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^"}, {"sha": "af0b2d6bd4aa698596c40fe96858757d72da147c", "filename": "src/test/ui/editions/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2018\n \n // tests that editions work with the tyvar warning-turned-error"}, {"sha": "23452495b4bc6fbe84ca9e2e6934cde63721b5ab", "filename": "src/test/ui/editions/edition-raw-pointer-method-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0699]: the type of this value must be known to call a method on a raw pointer on it\n-  --> $DIR/edition-raw-pointer-method-2018.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2018.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^"}, {"sha": "0c03a8761df01ce8ec850c838e85256ca3c31877", "filename": "src/test/ui/error-codes/E0375.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n "}, {"sha": "a68b3af5aaf76be695286389958e6c803ea837c2", "filename": "src/test/ui/error-codes/E0375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0375]: implementing the trait `CoerceUnsized` requires multiple coercions\n-  --> $DIR/E0375.rs:12:12\n+  --> $DIR/E0375.rs:10:12\n    |\n LL | impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^ requires multiple coercions"}, {"sha": "d118b7f4ff2b230c0617e42ca63709c7e565ae3f", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![crate_type = \"lib\"]\n \n extern {"}, {"sha": "72e414eab9248aedbd831511d741abb53765afaa", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature\n-  --> $DIR/feature-gate-ffi_returns_twice.rs:5:5\n+  --> $DIR/feature-gate-ffi_returns_twice.rs:4:5\n    |\n LL |     #[ffi_returns_twice]\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "845e18df11b54f8975fef122b0a17ceceea2d6ac", "filename": "src/test/ui/ffi_returns_twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_returns_twice.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![feature(ffi_returns_twice)]\n #![crate_type = \"lib\"]\n "}, {"sha": "862892e27be98a1b3e82b22a33bda6956b33532c", "filename": "src/test/ui/ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_returns_twice.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n-  --> $DIR/ffi_returns_twice.rs:5:1\n+  --> $DIR/ffi_returns_twice.rs:4:1\n    |\n LL | #[ffi_returns_twice]\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1c601bc3c34eaff144bca7db1920fcd0be9866b7", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::cell::Cell;\n use std::rc::Rc;\n "}, {"sha": "61450d3203cd876830e14d34858be9b4b383a610", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,29 +1,29 @@\n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -35,30 +35,30 @@ LL | | }\n    | |_^\n \n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -70,15 +70,15 @@ LL | | }\n    | |_^\n \n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:17:5\n+  --> $DIR/auto-trait-leak.rs:15:5\n    |\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:6:1\n+  --> $DIR/auto-trait-leak.rs:4:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fb4b54051237c1366a406be296be90570e8b9405", "filename": "src/test/ui/impl-trait/auto-trait-leak2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::cell::Cell;\n use std::rc::Rc;\n "}, {"sha": "19899ff83f7c30310592c2d4103490ed55b06ca3", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,29 +1,29 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:15:5\n+  --> $DIR/auto-trait-leak2.rs:13:5\n    |\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:9:5: 9:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:18:5\n+  --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:26:5: 26:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c5c966a959ae950499dae99599c1877305ddeeec", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,6 +1,4 @@\n // issue #21405\n-// ignore-tidy-linelength\n-\n struct Foo;\n \n fn foo<F>(f: F) where F: FnMut(Foo) {}"}, {"sha": "afb3376638a96f9373570e19af0718c7bc82ebd4", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `is_empty` found for type `Foo` in the current scope\n-  --> $DIR/method-suggestion-no-duplication.rs:9:15\n+  --> $DIR/method-suggestion-no-duplication.rs:7:15\n    |\n LL | struct Foo;\n    | ----------- method `is_empty` not found for this"}, {"sha": "254d810d79dbc1d6a9a684949a1db873f69abea6", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n mod auxiliary {\n     mod foo;\n }"}, {"sha": "b902893bf822438bfcf7d4302ae4cfd22527ea9e", "filename": "src/test/ui/issues/issue-21950.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::ops::Add;\n \n fn main() {"}, {"sha": "7655e0811e066b4f0cd5b7b11d8e0fc06d33e783", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,13 +1,13 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ associated type `Output` must be specified"}, {"sha": "90912cfda0d4e78a005f860d21aee35d66c0f80b", "filename": "src/test/ui/issues/issue-22370.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait A<T=Self> {}\n \n fn f(a: &A) {}"}, {"sha": "f21551a55bc9a0732d6681fe28e141cfcf9d8f71", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/issue-22370.rs:5:10\n+  --> $DIR/issue-22370.rs:3:10\n    |\n LL | fn f(a: &A) {}\n    |          ^ missing reference to `T`"}, {"sha": "4b8e3aa9eb3e10afdcc68e1279c4d7a832f62751", "filename": "src/test/ui/issues/issue-22560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::ops::{Add, Sub};\n \n type Test = Add +"}, {"sha": "5a056dff590feebdbed4e16e51bdeafbbd6f4def", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,27 +1,27 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL | type Test = Add +\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ non-auto additional trait\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = Add +\n    |  _____________^"}, {"sha": "319aa2a5cce9eb50ce24795ab30b3fca2a0c9c23", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,6 +1,4 @@\n-// ignore-tidy-linelength\n-\n-//~^^ ERROR\n+//~ ERROR\n \n #![feature(optin_builtin_traits)]\n "}, {"sha": "1103de0d91043802d61b4674962c2b7eb135d342", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:7:1\n+  --> $DIR/issue-23080-2.rs:5:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "fdfee6981447df330673cc00b57766fe273a40c2", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {"}, {"sha": "91c27217324269672ab0f74ff7ff419ec69e0b5b", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:5:1\n+  --> $DIR/issue-23080.rs:3:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "2b457a57d3ede06f54e2839a3abb8ce02bbc392c", "filename": "src/test/ui/issues/issue-23281.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n pub struct Struct;\n \n impl Struct {"}, {"sha": "e540d4e8192428ad76842dba27b045a4539898ca", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-23281.rs:6:5\n+  --> $DIR/issue-23281.rs:4:5\n    |\n LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "6fa9961f26cc8aca036eacafc8abdb786147f825", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n fn foo() -> i32 {\n     42\n }"}, {"sha": "e0cb1f7b96df8c3b84a01dc20aa9b522cf118b4e", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:16:9\n+  --> $DIR/issue-59488.rs:14:9\n    |\n LL |     foo > 12;\n    |     --- ^ -- {integer}\n@@ -8,7 +8,7 @@ LL |     foo > 12;\n    |     help: you might have forgotten to call this function: `foo()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:16:11\n+  --> $DIR/issue-59488.rs:14:11\n    |\n LL |     foo > 12;\n    |           ^^ expected fn item, found integer\n@@ -17,7 +17,7 @@ LL |     foo > 12;\n               found type `i32`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n-  --> $DIR/issue-59488.rs:20:9\n+  --> $DIR/issue-59488.rs:18:9\n    |\n LL |     bar > 13;\n    |     --- ^ -- {integer}\n@@ -26,7 +26,7 @@ LL |     bar > 13;\n    |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:20:11\n+  --> $DIR/issue-59488.rs:18:11\n    |\n LL |     bar > 13;\n    |           ^^ expected fn item, found integer\n@@ -35,7 +35,7 @@ LL |     bar > 13;\n               found type `i64`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:24:9\n+  --> $DIR/issue-59488.rs:22:9\n    |\n LL |     foo > foo;\n    |     --- ^ --- fn() -> i32 {foo}\n@@ -51,7 +51,7 @@ LL |     foo > foo();\n    |           ^^^^^\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:27:9\n+  --> $DIR/issue-59488.rs:25:9\n    |\n LL |     foo > bar;\n    |     --- ^ --- fn(i64) -> i64 {bar}\n@@ -61,7 +61,7 @@ LL |     foo > bar;\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:27:11\n+  --> $DIR/issue-59488.rs:25:11\n    |\n LL |     foo > bar;\n    |           ^^^ expected fn item, found a different fn item\n@@ -70,7 +70,7 @@ LL |     foo > bar;\n               found type `fn(i64) -> i64 {bar}`\n \n error[E0369]: binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n@@ -93,7 +93,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`"}, {"sha": "d53b5144760257809a5d2f8f5449ae4ad83c96dc", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait Foo {}\n \n impl Foo for dyn Send {}"}, {"sha": "448cc953d40adac7d35c97d8e185f2862a3c9ee8", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:7:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n@@ -12,7 +12,7 @@ LL | impl Foo for dyn Send + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:13:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n@@ -24,7 +24,7 @@ LL | impl Foo for dyn Sync + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:17:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here"}, {"sha": "516325ce1d797f33e6eb1a0069884f079c05b57b", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "e28b22035f5d4c67e0dfc1291c4d58be1952e472", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/moves-based-on-type-block-bad.rs:24:19\n+  --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {\n    |                   ^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            - data moved here\n    |\n note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/moves-based-on-type-block-bad.rs:27:28\n+  --> $DIR/moves-based-on-type-block-bad.rs:25:28\n    |\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            ^"}, {"sha": "fd3dc0abdc8fc98638144e7512aa3d803e752a47", "filename": "src/test/ui/on-unimplemented/auxiliary/no_debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_type = \"lib\"]\n \n pub struct Bar;"}, {"sha": "758220d3c4ecd028fc9dfcf424094e6efe7b351e", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,4 @@\n // Test new Index error message for slices\n-// ignore-tidy-linelength\n-\n-\n \n use std::ops::Index;\n "}, {"sha": "25a65460071da4efd600e61b5fecf57ab59d7843", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:11:5\n+  --> $DIR/slice-index.rs:8:5\n    |\n LL |     x[1i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n@@ -8,7 +8,7 @@ LL |     x[1i32];\n    = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `std::ops::RangeTo<i32>`\n-  --> $DIR/slice-index.rs:12:5\n+  --> $DIR/slice-index.rs:9:5\n    |\n LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`"}, {"sha": "8d8ee4da987176134799b5835c1c5ea3d91f4ae1", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,8 +1,5 @@\n // compile-flags: -Z continue-parse-after-error\n \n-\n-// ignore-tidy-tab\n-\n static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {"}, {"sha": "b8554844440105035d4574bb6e74780a846f3e96", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,29 +1,29 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:6:32\n+  --> $DIR/byte-string-literals.rs:3:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:9:8\n+  --> $DIR/byte-string-literals.rs:6:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-string-literals.rs:10:10\n+  --> $DIR/byte-string-literals.rs:7:10\n    |\n LL |     b\"\\x0Z\";\n    |          ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-string-literals.rs:11:7\n+  --> $DIR/byte-string-literals.rs:8:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n \n error: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:12:7\n+  --> $DIR/byte-string-literals.rs:9:7\n    |\n LL |       b\"a\n    |  _______^"}, {"sha": "5297d0d9842e28835b5da3be1a2fc913a8925fbb", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n /*\n  * We don't infer `T: 'static` outlives relationships by default.\n  * Instead an additional feature gate `infer_static_outlives_requirements`"}, {"sha": "b049d8a4ab3c31b1dc67e7ea4cc3ce04a39e6e84", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound `U: 'static`...\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |\n note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^"}, {"sha": "71d2d322265565c2f933de0d642f2d428fcedbe0", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(rustc_attrs)]\n \n // Needs an explicit where clause stating outlives condition. (RFC 2093)"}, {"sha": "dd56c1f79c71230e5cfdb5f9729ec483c9e6398d", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/enum.rs:9:1\n+  --> $DIR/enum.rs:7:1\n    |\n LL | / enum Foo<'a, T> {\n LL | |     One(Bar<'a, T>)\n@@ -9,7 +9,7 @@ LL | | }\n    = note: T : 'a\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:15:1\n+  --> $DIR/enum.rs:13:1\n    |\n LL | / struct Bar<'b, U> {\n LL | |     field2: &'b U\n@@ -19,7 +19,7 @@ LL | | }\n    = note: U : 'b\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:21:1\n+  --> $DIR/enum.rs:19:1\n    |\n LL | / enum Ying<'c, K> {\n LL | |     One(&'c Yang<K>)"}, {"sha": "7ec05aab29a715dcccfaf443095b1cd068f68b93", "filename": "src/test/ui/span/issue-24356.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #24356\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     {\n         use std::ops::Deref;"}, {"sha": "4827e9ddd50fd4eeb1ceb2427307a1ec90a6c2ac", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Target`\n-  --> $DIR/issue-24356.rs:20:9\n+  --> $DIR/issue-24356.rs:18:9\n    |\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation"}, {"sha": "ea0a66540b93125888be4906a7f0d4c5b12fa7a4", "filename": "src/test/ui/span/issue-7575.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,6 +1,4 @@\n // Test the mechanism for warning about possible missing `self` declarations.\n-// ignore-tidy-linelength\n-\n trait CtxtFn {\n     fn f8(self, _: usize) -> usize;\n     fn f9(_: usize) -> usize;"}, {"sha": "614638752f166590a16fc5ac86ae991cfa268cb3", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,24 +1,24 @@\n error[E0599]: no method named `f9` found for type `usize` in the current scope\n-  --> $DIR/issue-7575.rs:64:18\n+  --> $DIR/issue-7575.rs:62:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |                  ^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: candidate #1 is defined in the trait `CtxtFn`\n-  --> $DIR/issue-7575.rs:6:5\n+  --> $DIR/issue-7575.rs:4:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n note: candidate #2 is defined in the trait `OtherTrait`\n-  --> $DIR/issue-7575.rs:10:5\n+  --> $DIR/issue-7575.rs:8:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n note: candidate #3 is defined in the trait `UnusedTrait`\n-  --> $DIR/issue-7575.rs:19:5\n+  --> $DIR/issue-7575.rs:17:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL |     fn f9(_: usize) -> usize;\n            candidate #3: `UnusedTrait`\n \n error[E0599]: no method named `fff` found for type `Myisize` in the current scope\n-  --> $DIR/issue-7575.rs:64:30\n+  --> $DIR/issue-7575.rs:62:30\n    |\n LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n@@ -43,20 +43,20 @@ LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Myisize`\n-  --> $DIR/issue-7575.rs:41:5\n+  --> $DIR/issue-7575.rs:39:5\n    |\n LL |     fn fff(i: isize) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `is_str` found for type `T` in the current scope\n-  --> $DIR/issue-7575.rs:72:7\n+  --> $DIR/issue-7575.rs:70:7\n    |\n LL |     t.is_str()\n    |       ^^^^^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`\n-  --> $DIR/issue-7575.rs:47:5\n+  --> $DIR/issue-7575.rs:45:5\n    |\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "cda1aff133f94b63d5ffb23949e2063376e7e0df", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,6 +1,4 @@\n // aux-build:stability_attribute_issue.rs\n-// ignore-tidy-linelength\n-\n #![deny(deprecated)]\n \n extern crate stability_attribute_issue;"}, {"sha": "7e6fbe1600d1ed2e74066bc17189ec9f3bbb2bbc", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n-  --> $DIR/stability-attribute-issue.rs:10:5\n+  --> $DIR/stability-attribute-issue.rs:8:5\n    |\n LL |     unstable();\n    |     ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     unstable();\n    = help: add #![feature(unstable_test_feature)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_test_feature': message\n-  --> $DIR/stability-attribute-issue.rs:12:5\n+  --> $DIR/stability-attribute-issue.rs:10:5\n    |\n LL |     unstable_msg();\n    |     ^^^^^^^^^^^^"}, {"sha": "e4487fb110cf1bb71a641261cdcfa30456dde2dd", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n struct Managed;"}, {"sha": "4d435bf4e8b249c9b23bc5e18eb7c46db4e7a55b", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:35:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n    |\n LL |     is_sync::<MyNotSync>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:38:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<u8>`\n    = note: required because it appears within the type `MyTypeWUnsafe`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Managed` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:41:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `std::marker::Sync` is not implemented for `Managed`\n    = note: required because it appears within the type `MyTypeManaged`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9ab88d6e9aeac8049dc68c1c39a7b4325319cf25", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 75, "deletions": 22, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "patch": "@@ -9,8 +9,8 @@\n //! * No `TODO` or `XXX` directives.\n //! * No unexplained ` ```ignore ` or ` ```rust,ignore ` doc tests.\n //!\n-//! A number of these checks can be opted-out of with various directives like\n-//! `// ignore-tidy-linelength`.\n+//! A number of these checks can be opted-out of with various directives of the form:\n+//! `// ignore-tidy-CHECK-NAME`.\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -90,6 +90,36 @@ fn long_line_is_ok(line: &str) -> bool {\n     false\n }\n \n+enum Directive {\n+    /// By default, tidy always warns against style issues.\n+    Deny,\n+\n+    /// `Ignore(false)` means that an `ignore-tidy-*` directive\n+    /// has been provided, but is unnecessary. `Ignore(true)`\n+    /// means that it is necessary (i.e. a warning would be\n+    /// produced if `ignore-tidy-*` was not present).\n+    Ignore(bool),\n+}\n+\n+fn contains_ignore_directive(contents: &String, check: &str) -> Directive {\n+    if contents.contains(&format!(\"// ignore-tidy-{}\", check)) ||\n+        contents.contains(&format!(\"# ignore-tidy-{}\", check)) {\n+        Directive::Ignore(false)\n+    } else {\n+        Directive::Deny\n+    }\n+}\n+\n+macro_rules! suppressible_tidy_err {\n+    ($err:ident, $skip:ident, $msg:expr) => {\n+        if let Directive::Deny = $skip {\n+            $err($msg);\n+        } else {\n+            $skip = Directive::Ignore(true);\n+        }\n+    };\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n@@ -107,29 +137,32 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n-        let skip_cr = contents.contains(\"ignore-tidy-cr\");\n-        let skip_tab = contents.contains(\"ignore-tidy-tab\");\n-        let skip_length = contents.contains(\"ignore-tidy-linelength\");\n-        let skip_end_whitespace = contents.contains(\"ignore-tidy-end-whitespace\");\n-        let skip_copyright = contents.contains(\"ignore-tidy-copyright\");\n+        let mut skip_cr = contains_ignore_directive(&contents, \"cr\");\n+        let mut skip_tab = contains_ignore_directive(&contents, \"tab\");\n+        let mut skip_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n+        let mut skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n         for (i, line) in contents.split('\\n').enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n-            if !skip_length && line.chars().count() > COLS\n-                && !long_line_is_ok(line) {\n-                    err(&format!(\"line longer than {} chars\", COLS));\n+            if line.chars().count() > COLS && !long_line_is_ok(line) {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_length,\n+                    &format!(\"line longer than {} chars\", COLS)\n+                );\n             }\n-            if !skip_tab && line.contains('\\t') {\n-                err(\"tab character\");\n+            if line.contains('\\t') {\n+                suppressible_tidy_err!(err, skip_tab, \"tab character\");\n             }\n-            if !skip_end_whitespace && (line.ends_with(' ') || line.ends_with('\\t')) {\n-                err(\"trailing whitespace\");\n+            if line.ends_with(' ') || line.ends_with('\\t') {\n+                suppressible_tidy_err!(err, skip_end_whitespace, \"trailing whitespace\");\n             }\n-            if !skip_cr && line.contains('\\r') {\n-                err(\"CR character\");\n+            if line.contains('\\r') {\n+                suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n                 if line.contains(\"TODO\") {\n@@ -139,12 +172,16 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n             }\n-            if !skip_copyright && (line.starts_with(\"// Copyright\") ||\n-                                   line.starts_with(\"# Copyright\") ||\n-                                   line.starts_with(\"Copyright\"))\n-                               && (line.contains(\"Rust Developers\") ||\n-                                   line.contains(\"Rust Project Developers\")) {\n-                err(\"copyright notices attributed to the Rust Project Developers are deprecated\");\n+            if (line.starts_with(\"// Copyright\") ||\n+                line.starts_with(\"# Copyright\") ||\n+                line.starts_with(\"Copyright\"))\n+                && (line.contains(\"Rust Developers\") ||\n+                    line.contains(\"Rust Project Developers\")) {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_copyright,\n+                    \"copyright notices attributed to the Rust Project Developers are deprecated\"\n+                );\n             }\n             if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n@@ -169,5 +206,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n             1 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n+\n+        if let Directive::Ignore(false) = skip_cr {\n+            tidy_error!(bad, \"{}: ignoring CR characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_tab {\n+            tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_length {\n+            tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_end_whitespace {\n+            tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_copyright {\n+            tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n+        }\n     })\n }"}]}