{"sha": "e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZmM2MmExZWY2Y2ZiNTQ1ZDRmMzM5MTRhNDQ0MGM2YmJjYmY5ZWI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-07-04T09:48:30Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-07-22T04:43:37Z"}, "message": "Don't use SIMD in mem::swap for types smaller than the block size\n\nLLVM isn't able to remove the alloca for the unaligned block in the SIMD tail in some cases, so doing this helps SRoA work in cases where it currently doesn't.  Found in the `replace_with` RFC discussion.", "tree": {"sha": "170eec70a297f7237aee84232ab1572f62706113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170eec70a297f7237aee84232ab1572f62706113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "html_url": "https://github.com/rust-lang/rust/commit/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874dec25ed4c08d36f17d396b6872ca50313fc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/874dec25ed4c08d36f17d396b6872ca50313fc8e", "html_url": "https://github.com/rust-lang/rust/commit/874dec25ed4c08d36f17d396b6872ca50313fc8e"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "a0fe6e98806062059136688fc77f9374ecfde8b5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "patch": "@@ -638,7 +638,7 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        ptr::swap_nonoverlapping(x, y, 1);\n+        ptr::swap_nonoverlapping_one(x, y);\n     }\n }\n "}, {"sha": "f1405b58e1b32a3e324761f5def7dde4e35c6129", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "patch": "@@ -187,6 +187,19 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     swap_nonoverlapping_bytes(x, y, len)\n }\n \n+#[inline]\n+pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+    // For types smaller than the block optimization below,\n+    // just swap directly to avoid pessimizing codegen.\n+    if mem::size_of::<T>() < 32 {\n+        let z = read(x);\n+        copy_nonoverlapping(y, x, 1);\n+        write(y, z);\n+    } else {\n+        swap_nonoverlapping(x, y, 1);\n+    }\n+}\n+\n #[inline]\n unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals"}, {"sha": "f34a1d669bda9072ac4d8a53d64de50ae19357a2", "filename": "src/test/codegen/swap-small-types.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=e6fc62a1ef6cfb545d4f33914a4440c6bbcbf9eb", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+use std::mem::swap;\n+\n+type RGB48 = [u16; 3];\n+\n+// CHECK-LABEL: @swap_rgb48\n+#[no_mangle]\n+pub fn swap_rgb48(x: &mut RGB48, y: &mut RGB48) {\n+// CHECK-NOT: alloca\n+// CHECK: load i48\n+// CHECK: store i48\n+    swap(x, y)\n+}"}]}