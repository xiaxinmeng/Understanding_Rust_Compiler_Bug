{"sha": "21399dca12a7bd812b89d359e2d838965c25f17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMzk5ZGNhMTJhN2JkODEyYjg5ZDM1OWUyZDgzODk2NWMyNWYxN2Q=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T18:53:25Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T18:53:25Z"}, "message": "Change resources to classes in libstd and rustc", "tree": {"sha": "7ec5797aee3f445f64ca455a53f0d797e9cf5db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec5797aee3f445f64ca455a53f0d797e9cf5db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21399dca12a7bd812b89d359e2d838965c25f17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21399dca12a7bd812b89d359e2d838965c25f17d", "html_url": "https://github.com/rust-lang/rust/commit/21399dca12a7bd812b89d359e2d838965c25f17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21399dca12a7bd812b89d359e2d838965c25f17d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25aa3605952719fbfc7ccb998a7980fad6df2eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/25aa3605952719fbfc7ccb998a7980fad6df2eb1", "html_url": "https://github.com/rust-lang/rust/commit/25aa3605952719fbfc7ccb998a7980fad6df2eb1"}], "stats": {"total": 137, "additions": 85, "deletions": 52}, "files": [{"sha": "3c89adfb1aaeff58b229f4db2fb6fc7c201088f2", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -41,11 +41,15 @@ enum c_vec<T> {\n     c_vec_({ base: *mut T, len: uint, rsrc: @dtor_res})\n }\n \n-resource dtor_res(dtor: option<fn@()>) {\n-    alt dtor {\n+class dtor_res {\n+  let dtor: option<fn@()>;\n+  new(dtor: option<fn@()>) { self.dtor = dtor; }\n+  drop {\n+    alt self.dtor {\n       option::none { }\n       option::some(f) { f(); }\n     }\n+  }\n }\n \n /*"}, {"sha": "5e116cd11cfd50611de8953f4e72022b3ff301e2", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -35,40 +35,49 @@ Encapsulates an open TCP/IP connection through libuv\n underlying libuv data structures when it goes out of scope. This is the\n data structure that is used for read/write operations over a TCP stream.\n \"]\n-resource tcp_socket(socket_data: @tcp_socket_data)\n+class tcp_socket {\n+  let socket_data: @tcp_socket_data;\n+  new(socket_data: @tcp_socket_data) { self.socket_data = socket_data; }\n+  drop {\n     unsafe {\n-    let closed_po = comm::port::<()>();\n-    let closed_ch = comm::chan(closed_po);\n-    let close_data = {\n-        closed_ch: closed_ch\n-    };\n-    let close_data_ptr = ptr::addr_of(close_data);\n-    let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n-    iotask::interact((*socket_data).iotask) {|loop_ptr|\n-        log(debug, #fmt(\"interact dtor for tcp_socket stream %? loop %?\",\n+       let closed_po = comm::port::<()>();\n+       let closed_ch = comm::chan(closed_po);\n+       let close_data = {\n+             closed_ch: closed_ch\n+       };\n+       let close_data_ptr = ptr::addr_of(close_data);\n+       let stream_handle_ptr = (*(self.socket_data)).stream_handle_ptr;\n+       iotask::interact((*(self.socket_data)).iotask) {|loop_ptr|\n+          log(debug, #fmt(\"interact dtor for tcp_socket stream %? loop %?\",\n             stream_handle_ptr, loop_ptr));\n-        uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n+           uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n                                        close_data_ptr);\n-        uv::ll::close(stream_handle_ptr, tcp_socket_dtor_close_cb);\n-    };\n-    comm::recv(closed_po);\n-    log(debug, #fmt(\"about to free socket_data at %?\", socket_data));\n-    rustrt::rust_uv_current_kernel_free(stream_handle_ptr\n-                                       as *libc::c_void);\n-    log(debug, \"exiting dtor for tcp_socket\");\n+           uv::ll::close(stream_handle_ptr, tcp_socket_dtor_close_cb);\n+       };\n+       comm::recv(closed_po);\n+       log(debug, #fmt(\"about to free socket_data at %?\", self.socket_data));\n+       rustrt::rust_uv_current_kernel_free(stream_handle_ptr\n+                                           as *libc::c_void);\n+       log(debug, \"exiting dtor for tcp_socket\");\n+    }\n+  }\n }\n \n-resource tcp_conn_port(conn_data: @tcp_conn_port_data) unsafe {\n-    let conn_data_ptr = ptr::addr_of(*conn_data);\n+class tcp_conn_port {\n+  let conn_data: @tcp_conn_port_data;\n+  new(conn_data: @tcp_conn_port_data) { self.conn_data = conn_data; }\n+  drop unsafe {\n+    let conn_data_ptr = ptr::addr_of(*(self.conn_data));\n     let server_stream_ptr = ptr::addr_of((*conn_data_ptr).server_stream);\n-    let stream_closed_po = (*conn_data).stream_closed_po;\n+    let stream_closed_po = (*(self.conn_data)).stream_closed_po;\n     let iotask = (*conn_data_ptr).iotask;\n     iotask::interact(iotask) {|loop_ptr|\n         log(debug, #fmt(\"dtor for tcp_conn_port loop: %?\",\n                        loop_ptr));\n         uv::ll::close(server_stream_ptr, tcp_nl_close_cb);\n     }\n     comm::recv(stream_closed_po);\n+  }\n }\n \n #[doc=\"\n@@ -207,7 +216,7 @@ value as the `err` variant\n \"]\n fn write(sock: tcp_socket, raw_write_data: [u8])\n     -> result::result<(), tcp_err_data> unsafe {\n-    let socket_data_ptr = ptr::addr_of(**sock);\n+    let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n     write_common_impl(socket_data_ptr, raw_write_data)\n }\n \n@@ -240,7 +249,7 @@ value as the `err` variant\n \"]\n fn write_future(sock: tcp_socket, raw_write_data: [u8])\n     -> future::future<result::result<(), tcp_err_data>> unsafe {\n-    let socket_data_ptr = ptr::addr_of(**sock);\n+    let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n     future::spawn {||\n         write_common_impl(socket_data_ptr, raw_write_data)\n     }\n@@ -262,7 +271,7 @@ on) from until `read_stop` is called, or a `tcp_err_data` record\n fn read_start(sock: tcp_socket)\n     -> result::result<comm::port<\n         result::result<[u8], tcp_err_data>>, tcp_err_data> unsafe {\n-    let socket_data = ptr::addr_of(**sock);\n+    let socket_data = ptr::addr_of(*(sock.socket_data));\n     read_start_common_impl(socket_data)\n }\n \n@@ -275,7 +284,7 @@ Stop reading from an open TCP connection; used with `read_start`\n \"]\n fn read_stop(sock: tcp_socket) ->\n     result::result<(), tcp_err_data> unsafe {\n-    let socket_data = ptr::addr_of(**sock);\n+    let socket_data = ptr::addr_of(*(sock.socket_data));\n     read_stop_common_impl(socket_data)\n }\n \n@@ -295,7 +304,7 @@ read attempt. Pass `0u` to wait indefinitely\n \"]\n fn read(sock: tcp_socket, timeout_msecs: uint)\n     -> result::result<[u8],tcp_err_data> {\n-    let socket_data = ptr::addr_of(**sock);\n+    let socket_data = ptr::addr_of(*(sock.socket_data));\n     read_common_impl(socket_data, timeout_msecs)\n }\n \n@@ -329,7 +338,7 @@ read attempt. Pass `0u` to wait indefinitely\n \"]\n fn read_future(sock: tcp_socket, timeout_msecs: uint)\n     -> future::future<result::result<[u8],tcp_err_data>> {\n-    let socket_data = ptr::addr_of(**sock);\n+    let socket_data = ptr::addr_of(*(sock.socket_data));\n     future::spawn {||\n         read_common_impl(socket_data, timeout_msecs)\n     }\n@@ -444,8 +453,8 @@ variant\n \"]\n fn conn_recv(server_port: tcp_conn_port)\n     -> result::result<tcp_socket, tcp_err_data> {\n-    let new_conn_po = (**server_port).new_conn_po;\n-    let iotask = (**server_port).iotask;\n+    let new_conn_po = (*(server_port.conn_data)).new_conn_po;\n+    let iotask = (*(server_port.conn_data)).iotask;\n     let new_conn_result = comm::recv(new_conn_po);\n     alt new_conn_result {\n       ok(client_stream_ptr) {\n@@ -475,8 +484,8 @@ once a new connection is recv'd. Its parameter:\n \"]\n fn conn_recv_spawn(server_port: tcp_conn_port,\n                    +cb: fn~(result::result<tcp_socket, tcp_err_data>)) {\n-    let new_conn_po = (**server_port).new_conn_po;\n-    let iotask = (**server_port).iotask;\n+    let new_conn_po = (*(server_port.conn_data)).new_conn_po;\n+    let iotask = (*(server_port.conn_data)).iotask;\n     let new_conn_result = comm::recv(new_conn_po);\n     task::spawn {||\n         let sock_create_result = alt new_conn_result {\n@@ -507,7 +516,7 @@ connection\n none.\n \"]\n fn conn_peek(server_port: tcp_conn_port) -> bool {\n-    let new_conn_po = (**server_port).new_conn_po;\n+    let new_conn_po = (*(server_port.conn_data)).new_conn_po;\n     comm::peek(new_conn_po)\n }\n "}, {"sha": "634d5587f175afc2d15b4252af8deaa9bbcba575", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -223,8 +223,10 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n             diagnostic::emit(cmsp, msg, lvl);\n         };\n \n-        resource finally(ch: comm::chan<monitor_msg>) {\n-            comm::send(ch, done);\n+        class finally {\n+            let ch: comm::chan<monitor_msg>;\n+            new(ch: comm::chan<monitor_msg>) { self.ch = ch; }\n+            drop { comm::send(self.ch, done); }\n         }\n \n         let _finally = finally(ch);"}, {"sha": "1c5d41b0939c10dbf003fd2c1f6481cb8d31ea40", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -1092,8 +1092,10 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n \n /* Memory-managed interface to target data. */\n \n-resource target_data_res(TD: TargetDataRef) {\n-    llvm::LLVMDisposeTargetData(TD);\n+class target_data_res {\n+    let TD: TargetDataRef;\n+    new(TD: TargetDataRef) { self.TD = TD; }\n+    drop { llvm::LLVMDisposeTargetData(self.TD); }\n }\n \n type target_data = {lltd: TargetDataRef, dtor: @target_data_res};\n@@ -1106,8 +1108,10 @@ fn mk_target_data(string_rep: str) -> target_data {\n \n /* Memory-managed interface to pass managers. */\n \n-resource pass_manager_res(PM: PassManagerRef) {\n-    llvm::LLVMDisposePassManager(PM);\n+class pass_manager_res {\n+    let PM: PassManagerRef;\n+    new(PM: PassManagerRef) { self.PM = PM; }\n+    drop { llvm::LLVMDisposePassManager(self.PM); }\n }\n \n type pass_manager = {llpm: PassManagerRef, dtor: @pass_manager_res};\n@@ -1119,8 +1123,10 @@ fn mk_pass_manager() -> pass_manager {\n \n /* Memory-managed interface to object files. */\n \n-resource object_file_res(ObjectFile: ObjectFileRef) {\n-    llvm::LLVMDisposeObjectFile(ObjectFile);\n+class object_file_res {\n+    let ObjectFile: ObjectFileRef;\n+    new(ObjectFile: ObjectFileRef) { self.ObjectFile = ObjectFile; }\n+    drop { llvm::LLVMDisposeObjectFile(self.ObjectFile); }\n }\n \n type object_file = {llof: ObjectFileRef, dtor: @object_file_res};\n@@ -1133,8 +1139,10 @@ fn mk_object_file(llmb: MemoryBufferRef) -> option<object_file> {\n \n /* Memory-managed interface to section iterators. */\n \n-resource section_iter_res(SI: SectionIteratorRef) {\n-    llvm::LLVMDisposeSectionIterator(SI);\n+class section_iter_res {\n+    let SI: SectionIteratorRef;\n+    new(SI: SectionIteratorRef) { self.SI = SI; }\n+    drop { llvm::LLVMDisposeSectionIterator(self.SI); }\n }\n \n type section_iter = {llsi: SectionIteratorRef, dtor: @section_iter_res};"}, {"sha": "dc4e681dc162f1947ace18e4e09722881b5ab34a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -88,9 +88,13 @@ fn dup_for_join(dest: dest) -> dest {\n     }\n }\n \n-resource icx_popper(ccx: @crate_ctxt) {\n-    if ccx.sess.count_llvm_insns() {\n-        vec::pop(*ccx.stats.llvm_insn_ctxt);\n+class icx_popper {\n+    let ccx: @crate_ctxt;\n+    new(ccx: @crate_ctxt) { self.ccx = ccx; }\n+    drop {\n+      if self.ccx.sess.count_llvm_insns() {\n+          vec::pop(*(self.ccx.stats.llvm_insn_ctxt));\n+      }\n     }\n }\n \n@@ -5186,7 +5190,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let llbb = str::as_c_str(\"top\", {|buf|\n             llvm::LLVMAppendBasicBlock(llfn, buf)\n         });\n-        let bld = *ccx.builder;\n+        let bld = ccx.builder.B;\n         llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n         let crate_map = ccx.crate_map;\n         let start_ty = T_fn([val_ty(rust_main), ccx.int_type, ccx.int_type,"}, {"sha": "6932dbda0bbe531073fe14ca1b6c7755fd1a18ab", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -10,7 +10,7 @@ import common::*;\n import driver::session::session;\n \n fn B(cx: block) -> BuilderRef {\n-    let b = *cx.fcx.ccx.builder;\n+    let b = cx.fcx.ccx.builder.B;\n     llvm::LLVMPositionBuilderAtEnd(b, cx.llbb);\n     ret b;\n }"}, {"sha": "8c0abd5166e22f6cb5b79109524d90c049ed229b", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -62,7 +62,11 @@ type stats =\n      llvm_insns: hashmap<str, uint>,\n      fn_times: @mut [{ident: str, time: int}]};\n \n-resource BuilderRef_res(B: BuilderRef) { llvm::LLVMDisposeBuilder(B); }\n+class BuilderRef_res {\n+    let B: BuilderRef;\n+    new(B: BuilderRef) { self.B = B; }\n+    drop { llvm::LLVMDisposeBuilder(self.B); }\n+}\n \n // Crate context.  Every crate we compile has one of these.\n type crate_ctxt = {"}, {"sha": "381b5ce6a823eef80da8dbe6a4c3c22a233d5343", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21399dca12a7bd812b89d359e2d838965c25f17d/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=21399dca12a7bd812b89d359e2d838965c25f17d", "patch": "@@ -14,8 +14,10 @@ fn indent<R>(op: fn() -> R) -> R {\n     ret r;\n }\n \n-resource _indenter(_i: ()) {\n-    #debug[\"<<\"];\n+class _indenter {\n+    let _i: ();\n+    new(_i: ()) { self._i = (); }\n+    drop { #debug[\"<<\"]; }\n }\n \n fn indenter() -> _indenter {"}]}