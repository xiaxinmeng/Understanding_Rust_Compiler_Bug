{"sha": "dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "node_id": "C_kwDOAAsO6NoAKGRiYjhmZWRmOGI4ODdhZGZkZTNiNDQ1ZjllYzRiZGYxMWRhOWFlOWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T15:09:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T15:09:53Z"}, "message": "Auto merge of #13221 - mdx97:mdx97/annotations-above-whole-item, r=Veykril\n\nAllow configuration of annotation location.\n\nI've added the ability to configure where lens annotations render relevant to the item they describe. Previously, these would render directly above the line the item is declared on. Now, there is the ability to render these annotations above the entire item (including doc comments, and attributes).\n\nThe names of the config options are up for debate, I did what seemed best to me but if anyone has better ideas let me know.\n\nThis is my first contribution so if I've missed anything please let me know.\n\nHere's a preview of what the new option looks like:\n\n<img width=\"577\" alt=\"Screen Shot 2022-09-11 at 10 39 51 PM\" src=\"https://user-images.githubusercontent.com/33100798/189570298-b4fcbf9c-ee49-4b79-aae6-1037ae4f26af.png\">\n\ncloses https://github.com/rust-lang/rust-analyzer/issues/13218", "tree": {"sha": "f8d369c61f18e5f5d6170fa8e39106f4c5ce3fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d369c61f18e5f5d6170fa8e39106f4c5ce3fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "html_url": "https://github.com/rust-lang/rust/commit/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba15f75c39acf488d1fc4cc11cfc1cbb3dda0f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba15f75c39acf488d1fc4cc11cfc1cbb3dda0f7a", "html_url": "https://github.com/rust-lang/rust/commit/ba15f75c39acf488d1fc4cc11cfc1cbb3dda0f7a"}, {"sha": "f57c15f3e9843ad6b220d5f75f3e0b2cb126098a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57c15f3e9843ad6b220d5f75f3e0b2cb126098a", "html_url": "https://github.com/rust-lang/rust/commit/f57c15f3e9843ad6b220d5f75f3e0b2cb126098a"}], "stats": {"total": 145, "additions": 126, "deletions": 19}, "files": [{"sha": "bfbe0db6e4b84f3c579a376cd9ca40faa2cade2c", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -41,6 +41,12 @@ pub struct AnnotationConfig {\n     pub annotate_references: bool,\n     pub annotate_method_references: bool,\n     pub annotate_enum_variant_references: bool,\n+    pub location: AnnotationLocation,\n+}\n+\n+pub enum AnnotationLocation {\n+    AboveName,\n+    AboveWholeItem,\n }\n \n pub(crate) fn annotations(\n@@ -65,10 +71,10 @@ pub(crate) fn annotations(\n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| {\n         let range = match def {\n             Definition::Const(konst) if config.annotate_references => {\n-                konst.source(db).and_then(|node| name_range(db, node, file_id))\n+                konst.source(db).and_then(|node| name_range(db, config, node, file_id))\n             }\n             Definition::Trait(trait_) if config.annotate_references || config.annotate_impls => {\n-                trait_.source(db).and_then(|node| name_range(db, node, file_id))\n+                trait_.source(db).and_then(|node| name_range(db, config, node, file_id))\n             }\n             Definition::Adt(adt) => match adt {\n                 hir::Adt::Enum(enum_) => {\n@@ -77,7 +83,9 @@ pub(crate) fn annotations(\n                             .variants(db)\n                             .into_iter()\n                             .map(|variant| {\n-                                variant.source(db).and_then(|node| name_range(db, node, file_id))\n+                                variant\n+                                    .source(db)\n+                                    .and_then(|node| name_range(db, config, node, file_id))\n                             })\n                             .flatten()\n                             .for_each(|range| {\n@@ -88,14 +96,14 @@ pub(crate) fn annotations(\n                             })\n                     }\n                     if config.annotate_references || config.annotate_impls {\n-                        enum_.source(db).and_then(|node| name_range(db, node, file_id))\n+                        enum_.source(db).and_then(|node| name_range(db, config, node, file_id))\n                     } else {\n                         None\n                     }\n                 }\n                 _ => {\n                     if config.annotate_references || config.annotate_impls {\n-                        adt.source(db).and_then(|node| name_range(db, node, file_id))\n+                        adt.source(db).and_then(|node| name_range(db, config, node, file_id))\n                     } else {\n                         None\n                     }\n@@ -113,6 +121,7 @@ pub(crate) fn annotations(\n             annotations\n                 .push(Annotation { range, kind: AnnotationKind::HasImpls { file_id, data: None } });\n         }\n+\n         if config.annotate_references {\n             annotations.push(Annotation {\n                 range,\n@@ -122,12 +131,18 @@ pub(crate) fn annotations(\n \n         fn name_range<T: HasName>(\n             db: &RootDatabase,\n+            config: &AnnotationConfig,\n             node: InFile<T>,\n             source_file_id: FileId,\n         ) -> Option<TextRange> {\n             if let Some(InFile { file_id, value }) = node.original_ast_node(db) {\n                 if file_id == source_file_id.into() {\n-                    return value.name().map(|it| it.syntax().text_range());\n+                    return match config.location {\n+                        AnnotationLocation::AboveName => {\n+                            value.name().map(|name| name.syntax().text_range())\n+                        }\n+                        AnnotationLocation::AboveWholeItem => Some(value.syntax().text_range()),\n+                    };\n                 }\n             }\n             None\n@@ -188,21 +203,23 @@ mod tests {\n \n     use crate::{fixture, Annotation, AnnotationConfig};\n \n-    fn check(ra_fixture: &str, expect: Expect) {\n+    use super::AnnotationLocation;\n+\n+    const DEFAULT_CONFIG: AnnotationConfig = AnnotationConfig {\n+        binary_target: true,\n+        annotate_runnables: true,\n+        annotate_impls: true,\n+        annotate_references: true,\n+        annotate_method_references: true,\n+        annotate_enum_variant_references: true,\n+        location: AnnotationLocation::AboveName,\n+    };\n+\n+    fn check_with_config(ra_fixture: &str, expect: Expect, config: &AnnotationConfig) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n \n         let annotations: Vec<Annotation> = analysis\n-            .annotations(\n-                &AnnotationConfig {\n-                    binary_target: true,\n-                    annotate_runnables: true,\n-                    annotate_impls: true,\n-                    annotate_references: true,\n-                    annotate_method_references: true,\n-                    annotate_enum_variant_references: true,\n-                },\n-                file_id,\n-            )\n+            .annotations(config, file_id)\n             .unwrap()\n             .into_iter()\n             .map(|annotation| analysis.resolve_annotation(annotation).unwrap())\n@@ -211,6 +228,10 @@ mod tests {\n         expect.assert_debug_eq(&annotations);\n     }\n \n+    fn check(ra_fixture: &str, expect: Expect) {\n+        check_with_config(ra_fixture, expect, &DEFAULT_CONFIG);\n+    }\n+\n     #[test]\n     fn const_annotations() {\n         check(\n@@ -786,4 +807,40 @@ m!();\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_annotations_appear_above_whole_item_when_configured_to_do_so() {\n+        check_with_config(\n+            r#\"\n+/// This is a struct named Foo, obviously.\n+#[derive(Clone)]\n+struct Foo;\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 0..71,\n+                        kind: HasImpls {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..71,\n+                        kind: HasReferences {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            data: None,\n+                        },\n+                    },\n+                ]\n+            \"#]],\n+            &AnnotationConfig { location: AnnotationLocation::AboveWholeItem, ..DEFAULT_CONFIG },\n+        );\n+    }\n }"}, {"sha": "c1ef25b592b1be4e2aebc8c3a6b719f7c3c27db3", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -74,7 +74,7 @@ use syntax::SourceFile;\n use crate::navigation_target::{ToNav, TryToNav};\n \n pub use crate::{\n-    annotations::{Annotation, AnnotationConfig, AnnotationKind},\n+    annotations::{Annotation, AnnotationConfig, AnnotationKind, AnnotationLocation},\n     call_hierarchy::CallItem,\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},"}, {"sha": "3cafbc743351c90f4847a75a8e2c589801dc0979", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -308,6 +308,7 @@ config_data! {\n         /// Join lines unwraps trivial blocks.\n         joinLines_unwrapTrivialBlock: bool = \"true\",\n \n+\n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_debug_enable: bool            = \"true\",\n@@ -319,6 +320,8 @@ config_data! {\n         /// Whether to show `Implementations` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_implementations_enable: bool  = \"true\",\n+        /// Where to render annotations.\n+        lens_location: AnnotationLocation = \"\\\"above_name\\\"\",\n         /// Whether to show `References` lens for Struct, Enum, and Union.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n         lens_references_adt_enable: bool = \"false\",\n@@ -498,6 +501,25 @@ pub struct LensConfig {\n     pub refs_adt: bool,   // for Struct, Enum, Union and Trait\n     pub refs_trait: bool, // for Struct, Enum, Union and Trait\n     pub enum_variant_refs: bool,\n+\n+    // annotations\n+    pub location: AnnotationLocation,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum AnnotationLocation {\n+    AboveName,\n+    AboveWholeItem,\n+}\n+\n+impl From<AnnotationLocation> for ide::AnnotationLocation {\n+    fn from(location: AnnotationLocation) -> Self {\n+        match location {\n+            AnnotationLocation::AboveName => ide::AnnotationLocation::AboveName,\n+            AnnotationLocation::AboveWholeItem => ide::AnnotationLocation::AboveWholeItem,\n+        }\n+    }\n }\n \n impl LensConfig {\n@@ -1196,6 +1218,7 @@ impl Config {\n             refs_trait: self.data.lens_enable && self.data.lens_references_trait_enable,\n             enum_variant_refs: self.data.lens_enable\n                 && self.data.lens_references_enumVariant_enable,\n+            location: self.data.lens_location,\n         }\n     }\n \n@@ -1932,6 +1955,14 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Use server-side file watching\",\n             ],\n         },\n+        \"AnnotationLocation\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"above_name\", \"above_whole_item\"],\n+            \"enumDescriptions\": [\n+                \"Render annotations above the name of the item.\",\n+                \"Render annotations above the whole item, including documentation comments and attributes.\"\n+            ],\n+        },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),\n     }\n "}, {"sha": "7dfa32cf3743886b0b92ca205663645d45a9b96c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -1240,6 +1240,7 @@ pub(crate) fn handle_code_lens(\n             annotate_references: lens_config.refs_adt,\n             annotate_method_references: lens_config.method_refs,\n             annotate_enum_variant_references: lens_config.enum_variant_refs,\n+            location: lens_config.location.into(),\n         },\n         file_id,\n     )?;"}, {"sha": "62671459d7baeddffb43c067debd0af3b88b86cf", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -479,6 +479,11 @@ client doesn't set the corresponding capability.\n Whether to show `Implementations` lens. Only applies when\n `#rust-analyzer.lens.enable#` is set.\n --\n+[[rust-analyzer.lens.location]]rust-analyzer.lens.location (default: `\"above_name\"`)::\n++\n+--\n+Where to render annotations.\n+--\n [[rust-analyzer.lens.references.adt.enable]]rust-analyzer.lens.references.adt.enable (default: `false`)::\n +\n --"}, {"sha": "e2cc2c16c926b51268759de90d645b05cc4419ca", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=dbb8fedf8b887adfde3b445f9ec4bdf11da9ae9f", "patch": "@@ -963,6 +963,19 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.lens.location\": {\n+                    \"markdownDescription\": \"Where to render annotations.\",\n+                    \"default\": \"above_name\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"above_name\",\n+                        \"above_whole_item\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Render annotations above the name of the item.\",\n+                        \"Render annotations above the whole item, including documentation comments and attributes.\"\n+                    ]\n+                },\n                 \"rust-analyzer.lens.references.adt.enable\": {\n                     \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, and Union.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,"}]}