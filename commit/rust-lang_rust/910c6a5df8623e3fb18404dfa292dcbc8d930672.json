{"sha": "910c6a5df8623e3fb18404dfa292dcbc8d930672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGM2YTVkZjg2MjNlM2ZiMTg0MDRkZmEyOTJkY2JjOGQ5MzA2NzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-12T07:49:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-12T07:49:13Z"}, "message": "core: Fill out missing functions for basic types", "tree": {"sha": "91f07afa70c1127720552fafbff455d69ab526b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f07afa70c1127720552fafbff455d69ab526b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910c6a5df8623e3fb18404dfa292dcbc8d930672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910c6a5df8623e3fb18404dfa292dcbc8d930672", "html_url": "https://github.com/rust-lang/rust/commit/910c6a5df8623e3fb18404dfa292dcbc8d930672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910c6a5df8623e3fb18404dfa292dcbc8d930672/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d17be8462725c61e0104bc1fe6b5607e642065", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d17be8462725c61e0104bc1fe6b5607e642065", "html_url": "https://github.com/rust-lang/rust/commit/87d17be8462725c61e0104bc1fe6b5607e642065"}], "stats": {"total": 189, "additions": 162, "deletions": 27}, "files": [{"sha": "d46a3bda312cb1ddbb2e61c7888ebe4c3cc30e47", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `f32`\"];\n+#[doc = \"Operations and constants for `f32`\"];\n \n // PORT\n "}, {"sha": "6d0f838d5576db30c40eb0af89fa1ce517f35a35", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `f64`\"];\n+#[doc = \"Operations and constants for `f64`\"];\n \n // PORT\n "}, {"sha": "f8a0e5ea7cf8573ee1b2e2435fc7f68ade3b5152", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `float`\"];\n+#[doc = \"Operations and constants for `float`\"];\n \n /*\n Module: float"}, {"sha": "7fc0edebe6f6d2d5ef98704bc8295ee34018c799", "filename": "src/libcore/i16.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi16.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1 +1,28 @@\n-#[doc = \"Operations and constants constants for `i16`\"];\n+#[doc = \"Operations and constants for `i16`\"];\n+\n+const min_value: i16 = -1i16 << 15i16;\n+const max_value: i16 = (-1i16 << 15i16) - 1i16;\n+\n+pure fn add(x: i16, y: i16) -> i16 { x + y }\n+pure fn sub(x: i16, y: i16) -> i16 { x - y }\n+pure fn mul(x: i16, y: i16) -> i16 { x * y }\n+pure fn div(x: i16, y: i16) -> i16 { x / y }\n+pure fn rem(x: i16, y: i16) -> i16 { x % y }\n+\n+pure fn lt(x: i16, y: i16) -> bool { x < y }\n+pure fn le(x: i16, y: i16) -> bool { x <= y }\n+pure fn eq(x: i16, y: i16) -> bool { x == y }\n+pure fn ne(x: i16, y: i16) -> bool { x != y }\n+pure fn ge(x: i16, y: i16) -> bool { x >= y }\n+pure fn gt(x: i16, y: i16) -> bool { x > y }\n+\n+pure fn positive(x: i16) -> bool { x > 0i16 }\n+pure fn negative(x: i16) -> bool { x < 0i16 }\n+pure fn nonpositive(x: i16) -> bool { x <= 0i16 }\n+pure fn nonnegative(x: i16) -> bool { x >= 0i16 }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: i16, hi: i16, it: fn(i16)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1i16; }\n+}"}, {"sha": "9d5e4e986effe59fadc7aa0076ca9d8b9840f07e", "filename": "src/libcore/i32.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi32.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1 +1,28 @@\n-#[doc = \"Operations and constants constants for `i32`\"];\n+#[doc = \"Operations and constants for `i32`\"];\n+\n+const min_value: i32 = -1i32 << 31i32;\n+const max_value: i32 = (-1i32 << 31i32) - 1i32;\n+\n+pure fn add(x: i32, y: i32) -> i32 { x + y }\n+pure fn sub(x: i32, y: i32) -> i32 { x - y }\n+pure fn mul(x: i32, y: i32) -> i32 { x * y }\n+pure fn div(x: i32, y: i32) -> i32 { x / y }\n+pure fn rem(x: i32, y: i32) -> i32 { x % y }\n+\n+pure fn lt(x: i32, y: i32) -> bool { x < y }\n+pure fn le(x: i32, y: i32) -> bool { x <= y }\n+pure fn eq(x: i32, y: i32) -> bool { x == y }\n+pure fn ne(x: i32, y: i32) -> bool { x != y }\n+pure fn ge(x: i32, y: i32) -> bool { x >= y }\n+pure fn gt(x: i32, y: i32) -> bool { x > y }\n+\n+pure fn positive(x: i32) -> bool { x > 0i32 }\n+pure fn negative(x: i32) -> bool { x < 0i32 }\n+pure fn nonpositive(x: i32) -> bool { x <= 0i32 }\n+pure fn nonnegative(x: i32) -> bool { x >= 0i32 }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: i32, hi: i32, it: fn(i32)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1i32; }\n+}"}, {"sha": "1cdefcb68a64fd978179195a722d7a9a49a2a10d", "filename": "src/libcore/i64.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi64.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1 +1,28 @@\n #[doc = \"Operations and constants constants for `i64`\"];\n+\n+const min_value: i64 = -1i64 << 63i64;\n+const max_value: i64 = (-1i64 << 63i64) - 1i64;\n+\n+pure fn add(x: i64, y: i64) -> i64 { x + y }\n+pure fn sub(x: i64, y: i64) -> i64 { x - y }\n+pure fn mul(x: i64, y: i64) -> i64 { x * y }\n+pure fn div(x: i64, y: i64) -> i64 { x / y }\n+pure fn rem(x: i64, y: i64) -> i64 { x % y }\n+\n+pure fn lt(x: i64, y: i64) -> bool { x < y }\n+pure fn le(x: i64, y: i64) -> bool { x <= y }\n+pure fn eq(x: i64, y: i64) -> bool { x == y }\n+pure fn ne(x: i64, y: i64) -> bool { x != y }\n+pure fn ge(x: i64, y: i64) -> bool { x >= y }\n+pure fn gt(x: i64, y: i64) -> bool { x > y }\n+\n+pure fn positive(x: i64) -> bool { x > 0i64 }\n+pure fn negative(x: i64) -> bool { x < 0i64 }\n+pure fn nonpositive(x: i64) -> bool { x <= 0i64 }\n+pure fn nonnegative(x: i64) -> bool { x >= 0i64 }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: i64, hi: i64, it: fn(i64)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1i64; }\n+}"}, {"sha": "8b3650cd983bfca46984bca70cd9a298b80321d3", "filename": "src/libcore/i8.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi8.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1 +1,28 @@\n-#[doc = \"Operations and constants constants for `i8`\"];\n+#[doc = \"Operations and constants for `i8`\"];\n+\n+const min_value: i8 = -1i8 << 7i8;\n+const max_value: i8 = (-1i8 << 7i8) - 1i8;\n+\n+pure fn add(x: i8, y: i8) -> i8 { x + y }\n+pure fn sub(x: i8, y: i8) -> i8 { x - y }\n+pure fn mul(x: i8, y: i8) -> i8 { x * y }\n+pure fn div(x: i8, y: i8) -> i8 { x / y }\n+pure fn rem(x: i8, y: i8) -> i8 { x % y }\n+\n+pure fn lt(x: i8, y: i8) -> bool { x < y }\n+pure fn le(x: i8, y: i8) -> bool { x <= y }\n+pure fn eq(x: i8, y: i8) -> bool { x == y }\n+pure fn ne(x: i8, y: i8) -> bool { x != y }\n+pure fn ge(x: i8, y: i8) -> bool { x >= y }\n+pure fn gt(x: i8, y: i8) -> bool { x > y }\n+\n+pure fn positive(x: i8) -> bool { x > 0i8 }\n+pure fn negative(x: i8) -> bool { x < 0i8 }\n+pure fn nonpositive(x: i8) -> bool { x <= 0i8 }\n+pure fn nonnegative(x: i8) -> bool { x >= 0i8 }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: i8, hi: i8, it: fn(i8)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1i8; }\n+}"}, {"sha": "e7583b23553fb533d158c743955304f94f5dd476", "filename": "src/libcore/int.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,31 +1,31 @@\n-#[doc = \"Operations and constants constants for `int`\"];\n+#[doc = \"Operations and constants for `int`\"];\n \n /*\n Module: int\n */\n \n /*\n-Const: max_value\n+Const: min_value\n \n-The maximum value of an integer\n+The minumum value of an integer\n */\n-// FIXME: Find another way to access the machine word size in a const expr\n #[cfg(target_arch=\"x86\")]\n-const max_value: int = (-1 << 31)-1;\n+const min_value: int = -1 << 31;\n \n #[cfg(target_arch=\"x86_64\")]\n-const max_value: int = (-1 << 63)-1;\n+const min_value: int = -1 << 63;\n \n /*\n-Const: min_value\n+Const: max_value\n \n-The minumum value of an integer\n+The maximum value of an integer\n */\n+// FIXME: Find another way to access the machine word size in a const expr\n #[cfg(target_arch=\"x86\")]\n-const min_value: int = -1 << 31;\n+const max_value: int = (-1 << 31)-1;\n \n #[cfg(target_arch=\"x86_64\")]\n-const min_value: int = -1 << 63;\n+const max_value: int = (-1 << 63)-1;\n \n /* Function: add */\n pure fn add(x: int, y: int) -> int { ret x + y; }"}, {"sha": "36e68ecfdd201a770d506aaf62e74c1109be0e3b", "filename": "src/libcore/u16.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu16.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1 +1,28 @@\n-#[doc = \"Operations and constants constants for `u16`\"];\n+#[doc = \"Operations and constants for `u16`\"];\n+\n+const min_value: u16 = 0u16;\n+const max_value: u16 = 0u16 - 1u16;\n+\n+pure fn add(x: u16, y: u16) -> u16 { x + y }\n+pure fn sub(x: u16, y: u16) -> u16 { x - y }\n+pure fn mul(x: u16, y: u16) -> u16 { x * y }\n+pure fn div(x: u16, y: u16) -> u16 { x / y }\n+pure fn rem(x: u16, y: u16) -> u16 { x % y }\n+\n+pure fn lt(x: u16, y: u16) -> bool { x < y }\n+pure fn le(x: u16, y: u16) -> bool { x <= y }\n+pure fn eq(x: u16, y: u16) -> bool { x == y }\n+pure fn ne(x: u16, y: u16) -> bool { x != y }\n+pure fn ge(x: u16, y: u16) -> bool { x >= y }\n+pure fn gt(x: u16, y: u16) -> bool { x > y }\n+\n+pure fn positive(x: u16) -> bool { x > 0u16 }\n+pure fn negative(x: u16) -> bool { x < 0u16 }\n+pure fn nonpositive(x: u16) -> bool { x <= 0u16 }\n+pure fn nonnegative(x: u16) -> bool { x >= 0u16 }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: u16, hi: u16, it: fn(u16)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1u16; }\n+}"}, {"sha": "ed002a8c1e5453651d81e3f145263589583b8512", "filename": "src/libcore/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu32.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `u32`\"];\n+#[doc = \"Operations and constants for `u32`\"];\n \n /*\n Module: u32"}, {"sha": "a8cbeab9c9cd8c2c4dc10d86ad63233b41b5388f", "filename": "src/libcore/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu64.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `u64`\"];\n+#[doc = \"Operations and constants for `u64`\"];\n \n /*\n Module: u64"}, {"sha": "34553c27eb34c5d61d7fc34ab3ccf9622c9de2f5", "filename": "src/libcore/u8.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu8.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,22 +1,22 @@\n-#[doc = \"Operations and constants constants for `u8`\"];\n+#[doc = \"Operations and constants for `u8`\"];\n \n /*\n Module: u8\n */\n \n /*\n-Const: max_value\n+Const: min_value\n \n-The maximum value of a u8.\n+The minumum value of a u8.\n */\n-const max_value: u8 = 255u8;\n+const min_value: u8 = 0u8;\n \n /*\n-Const: min_value\n+Const: max_value\n \n-The minumum value of a u8.\n+The maximum value of a u8.\n */\n-const min_value: u8 = 0u8;\n+const max_value: u8 = 255u8;\n \n /* Function: add */\n pure fn add(x: u8, y: u8) -> u8 { ret x + y; }"}, {"sha": "cd1bf7ea555a29ee414c9894c24803a1983e8253", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c6a5df8623e3fb18404dfa292dcbc8d930672/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=910c6a5df8623e3fb18404dfa292dcbc8d930672", "patch": "@@ -1,4 +1,4 @@\n-#[doc = \"Operations and constants constants for `uint`\"];\n+#[doc = \"Operations and constants for `uint`\"];\n \n /*\n Module: uint"}]}