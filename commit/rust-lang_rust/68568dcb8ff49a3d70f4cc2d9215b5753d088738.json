{"sha": "68568dcb8ff49a3d70f4cc2d9215b5753d088738", "node_id": "C_kwDOAAsO6NoAKDY4NTY4ZGNiOGZmNDlhM2Q3MGY0Y2MyZDkyMTViNTc1M2QwODg3Mzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-07T15:19:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-07T15:19:11Z"}, "message": "Auto merge of #90671 - petrochenkov:astnaming, r=jackh726\n\nast: Fix naming conventions in AST structures\n\nTraitKind -> Trait\nTyAliasKind -> TyAlias\nImplKind -> Impl\nFnKind -> Fn\n\nAll `*Kind`s in AST are supposed to be enums.\n\nTuple structs are converted to braced structs for the types above, and fields are reordered in syntactic order.\n\nAlso, mutable AST visitor now correctly visit spans in defaultness, unsafety, impl polarity and constness.\n\nNoticed when reviewing #90076.", "tree": {"sha": "719962657b5d72f28b84204e2ffbe37cba4f96e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719962657b5d72f28b84204e2ffbe37cba4f96e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68568dcb8ff49a3d70f4cc2d9215b5753d088738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68568dcb8ff49a3d70f4cc2d9215b5753d088738", "html_url": "https://github.com/rust-lang/rust/commit/68568dcb8ff49a3d70f4cc2d9215b5753d088738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68568dcb8ff49a3d70f4cc2d9215b5753d088738/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fecfc0e6cc78d74d5898f168cfeee81256ac9ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fecfc0e6cc78d74d5898f168cfeee81256ac9ac7", "html_url": "https://github.com/rust-lang/rust/commit/fecfc0e6cc78d74d5898f168cfeee81256ac9ac7"}, {"sha": "2834f57c4584e33471f8bdc3cc57617fc0863fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/2834f57c4584e33471f8bdc3cc57617fc0863fde", "html_url": "https://github.com/rust-lang/rust/commit/2834f57c4584e33471f8bdc3cc57617fc0863fde"}], "stats": {"total": 715, "additions": 426, "deletions": 289}, "files": [{"sha": "f9e19d30fcc7e5456ca3ab086d145ed1ab6d3fe0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -2645,34 +2645,42 @@ impl Default for FnHeader {\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct TraitKind(\n-    pub IsAuto,\n-    pub Unsafe,\n-    pub Generics,\n-    pub GenericBounds,\n-    pub Vec<P<AssocItem>>,\n-);\n+pub struct Trait {\n+    pub unsafety: Unsafe,\n+    pub is_auto: IsAuto,\n+    pub generics: Generics,\n+    pub bounds: GenericBounds,\n+    pub items: Vec<P<AssocItem>>,\n+}\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct TyAliasKind(pub Defaultness, pub Generics, pub GenericBounds, pub Option<P<Ty>>);\n+pub struct TyAlias {\n+    pub defaultness: Defaultness,\n+    pub generics: Generics,\n+    pub bounds: GenericBounds,\n+    pub ty: Option<P<Ty>>,\n+}\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct ImplKind {\n-    pub unsafety: Unsafe,\n-    pub polarity: ImplPolarity,\n+pub struct Impl {\n     pub defaultness: Defaultness,\n-    pub constness: Const,\n+    pub unsafety: Unsafe,\n     pub generics: Generics,\n-\n+    pub constness: Const,\n+    pub polarity: ImplPolarity,\n     /// The trait being implemented, if any.\n     pub of_trait: Option<TraitRef>,\n-\n     pub self_ty: P<Ty>,\n     pub items: Vec<P<AssocItem>>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct FnKind(pub Defaultness, pub FnSig, pub Generics, pub Option<P<Block>>);\n+pub struct Fn {\n+    pub defaultness: Defaultness,\n+    pub generics: Generics,\n+    pub sig: FnSig,\n+    pub body: Option<P<Block>>,\n+}\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n@@ -2695,7 +2703,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(Box<FnKind>),\n+    Fn(Box<Fn>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`.\n@@ -2711,7 +2719,7 @@ pub enum ItemKind {\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    TyAlias(Box<TyAliasKind>),\n+    TyAlias(Box<TyAlias>),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2727,15 +2735,15 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(Box<TraitKind>),\n+    Trait(Box<Trait>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n     TraitAlias(Generics, GenericBounds),\n     /// An implementation.\n     ///\n     /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.\n-    Impl(Box<ImplKind>),\n+    Impl(Box<Impl>),\n     /// A macro invocation.\n     ///\n     /// E.g., `foo!(..)`.\n@@ -2782,14 +2790,14 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         match self {\n-            Self::Fn(box FnKind(_, _, generics, _))\n-            | Self::TyAlias(box TyAliasKind(_, generics, ..))\n+            Self::Fn(box Fn { generics, .. })\n+            | Self::TyAlias(box TyAlias { generics, .. })\n             | Self::Enum(_, generics)\n             | Self::Struct(_, generics)\n             | Self::Union(_, generics)\n-            | Self::Trait(box TraitKind(_, _, generics, ..))\n+            | Self::Trait(box Trait { generics, .. })\n             | Self::TraitAlias(generics, _)\n-            | Self::Impl(box ImplKind { generics, .. }) => Some(generics),\n+            | Self::Impl(box Impl { generics, .. }) => Some(generics),\n             _ => None,\n         }\n     }\n@@ -2812,9 +2820,9 @@ pub enum AssocItemKind {\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n     Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// An associated function.\n-    Fn(Box<FnKind>),\n+    Fn(Box<Fn>),\n     /// An associated type.\n-    TyAlias(Box<TyAliasKind>),\n+    TyAlias(Box<TyAlias>),\n     /// A macro expanding to associated items.\n     MacCall(MacCall),\n }\n@@ -2825,9 +2833,9 @@ rustc_data_structures::static_assert_size!(AssocItemKind, 72);\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(def, ..)\n-            | Self::Fn(box FnKind(def, ..))\n-            | Self::TyAlias(box TyAliasKind(def, ..)) => def,\n+            Self::Const(defaultness, ..)\n+            | Self::Fn(box Fn { defaultness, .. })\n+            | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n         }\n     }\n@@ -2864,9 +2872,9 @@ pub enum ForeignItemKind {\n     /// A foreign static item (`static FOO: u8`).\n     Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// An foreign function.\n-    Fn(Box<FnKind>),\n+    Fn(Box<Fn>),\n     /// An foreign type.\n-    TyAlias(Box<TyAliasKind>),\n+    TyAlias(Box<TyAlias>),\n     /// A macro expanding to foreign items.\n     MacCall(MacCall),\n }"}, {"sha": "fc5cc963992579b76514eeddb92d9fb0a851b3b3", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 79, "deletions": 23, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -459,7 +459,8 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_mt(mt);\n         }\n         TyKind::BareFn(bft) => {\n-            let BareFnTy { unsafety: _, ext: _, generic_params, decl } = bft.deref_mut();\n+            let BareFnTy { unsafety, ext: _, generic_params, decl } = bft.deref_mut();\n+            visit_unsafety(unsafety, vis);\n             generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_fn_decl(decl);\n         }\n@@ -488,7 +489,8 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n }\n \n pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis: &mut T) {\n-    let ForeignMod { unsafety: _, abi: _, items } = foreign_mod;\n+    let ForeignMod { unsafety, abi: _, items } = foreign_mod;\n+    visit_unsafety(unsafety, vis);\n     items.flat_map_in_place(|item| vis.flat_map_foreign_item(item));\n }\n \n@@ -788,6 +790,38 @@ pub fn visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis: &mut\n     }\n }\n \n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+pub fn visit_defaultness<T: MutVisitor>(defaultness: &mut Defaultness, vis: &mut T) {\n+    match defaultness {\n+        Defaultness::Default(span) => vis.visit_span(span),\n+        Defaultness::Final => {}\n+    }\n+}\n+\n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+pub fn visit_unsafety<T: MutVisitor>(unsafety: &mut Unsafe, vis: &mut T) {\n+    match unsafety {\n+        Unsafe::Yes(span) => vis.visit_span(span),\n+        Unsafe::No => {}\n+    }\n+}\n+\n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+pub fn visit_polarity<T: MutVisitor>(polarity: &mut ImplPolarity, vis: &mut T) {\n+    match polarity {\n+        ImplPolarity::Positive => {}\n+        ImplPolarity::Negative(span) => vis.visit_span(span),\n+    }\n+}\n+\n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+pub fn visit_constness<T: MutVisitor>(constness: &mut Const, vis: &mut T) {\n+    match constness {\n+        Const::Yes(span) => vis.visit_span(span),\n+        Const::No => {}\n+    }\n+}\n+\n pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {\n     match asyncness {\n         Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n@@ -955,25 +989,35 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) | ItemKind::Const(_, ty, expr) => {\n+        ItemKind::Static(ty, _, expr) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+        ItemKind::Const(defaultness, ty, expr) => {\n+            visit_defaultness(defaultness, vis);\n+            vis.visit_ty(ty);\n+            visit_opt(expr, |expr| vis.visit_expr(expr));\n+        }\n+        ItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n+            visit_defaultness(defaultness, vis);\n             visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n-        ItemKind::Mod(_unsafety, mod_kind) => match mod_kind {\n-            ModKind::Loaded(items, _inline, inner_span) => {\n-                vis.visit_span(inner_span);\n-                items.flat_map_in_place(|item| vis.flat_map_item(item));\n+        ItemKind::Mod(unsafety, mod_kind) => {\n+            visit_unsafety(unsafety, vis);\n+            match mod_kind {\n+                ModKind::Loaded(items, _inline, inner_span) => {\n+                    vis.visit_span(inner_span);\n+                    items.flat_map_in_place(|item| vis.flat_map_item(item));\n+                }\n+                ModKind::Unloaded => {}\n             }\n-            ModKind::Unloaded => {}\n-        },\n+        }\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(asm) => noop_visit_inline_asm(asm, vis),\n-        ItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n+        ItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+            visit_defaultness(defaultness, vis);\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             visit_opt(ty, |ty| vis.visit_ty(ty));\n@@ -986,22 +1030,27 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_variant_data(variant_data);\n             vis.visit_generics(generics);\n         }\n-        ItemKind::Impl(box ImplKind {\n-            unsafety: _,\n-            polarity: _,\n-            defaultness: _,\n-            constness: _,\n+        ItemKind::Impl(box Impl {\n+            defaultness,\n+            unsafety,\n             generics,\n+            constness,\n+            polarity,\n             of_trait,\n             self_ty,\n             items,\n         }) => {\n+            visit_defaultness(defaultness, vis);\n+            visit_unsafety(unsafety, vis);\n             vis.visit_generics(generics);\n+            visit_constness(constness, vis);\n+            visit_polarity(polarity, vis);\n             visit_opt(of_trait, |trait_ref| vis.visit_trait_ref(trait_ref));\n             vis.visit_ty(self_ty);\n             items.flat_map_in_place(|item| vis.flat_map_impl_item(item));\n         }\n-        ItemKind::Trait(box TraitKind(.., generics, bounds, items)) => {\n+        ItemKind::Trait(box Trait { unsafety, is_auto: _, generics, bounds, items }) => {\n+            visit_unsafety(unsafety, vis);\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             items.flat_map_in_place(|item| vis.flat_map_trait_item(item));\n@@ -1025,16 +1074,19 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) => {\n+        AssocItemKind::Const(defaultness, ty, expr) => {\n+            visit_defaultness(defaultness, visitor);\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+        AssocItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n+            visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n+        AssocItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+            visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n@@ -1047,8 +1099,10 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n }\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n-    let FnHeader { unsafety: _, asyncness, constness: _, ext: _ } = header;\n+    let FnHeader { unsafety, asyncness, constness, ext: _ } = header;\n+    visit_constness(constness, vis);\n     vis.visit_asyncness(asyncness);\n+    visit_unsafety(unsafety, vis);\n }\n \n // FIXME: Avoid visiting the crate as a `Mod` item, flat map only the inner items if possible,\n@@ -1114,12 +1168,14 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        ForeignItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+        ForeignItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n+            visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ForeignItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n+        ForeignItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+            visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));"}, {"sha": "be794ed221ae702331d0940d0df935545d255b61", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -285,7 +285,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body)) => {\n+        ItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id)\n@@ -300,7 +300,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n-        ItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref ty)) => {\n+        ItemKind::TyAlias(box TyAlias { defaultness: _, ref generics, ref bounds, ref ty }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -309,12 +309,12 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n         }\n-        ItemKind::Impl(box ImplKind {\n-            unsafety: _,\n-            polarity: _,\n+        ItemKind::Impl(box Impl {\n             defaultness: _,\n-            constness: _,\n+            unsafety: _,\n             ref generics,\n+            constness: _,\n+            polarity: _,\n             ref of_trait,\n             ref self_ty,\n             ref items,\n@@ -329,7 +329,13 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             visitor.visit_variant_data(struct_definition);\n         }\n-        ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref items)) => {\n+        ItemKind::Trait(box Trait {\n+            unsafety: _,\n+            is_auto: _,\n+            ref generics,\n+            ref bounds,\n+            ref items,\n+        }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_assoc_item, items, AssocCtxt::Trait);\n@@ -547,12 +553,12 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ForeignItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+        ForeignItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        ForeignItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n+        ForeignItemKind::TyAlias(box TyAlias { defaultness: _, generics, bounds, ty }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -653,12 +659,12 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+        AssocItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n+        AssocItemKind::TyAlias(box TyAlias { defaultness: _, generics, bounds, ty }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "6a4571cf6d278928ab4bd8ae10ceda56613f7e56", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -49,7 +49,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n             let this = &mut ItemLowerer { lctx: this };\n             match item.kind {\n-                ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n+                ItemKind::Impl(box Impl { ref of_trait, .. }) => {\n                     this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n                 }\n                 _ => visit::walk_item(this, item),\n@@ -218,12 +218,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n-            ItemKind::Fn(box FnKind(\n-                _,\n-                FnSig { ref decl, header, span: fn_sig_span },\n+            ItemKind::Fn(box Fn {\n+                sig: FnSig { ref decl, header, span: fn_sig_span },\n                 ref generics,\n                 ref body,\n-            )) => {\n+                ..\n+            }) => {\n                 let fn_def_id = self.resolver.local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -273,7 +273,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::GlobalAsm(ref asm) => {\n                 hir::ItemKind::GlobalAsm(self.lower_inline_asm(span, asm))\n             }\n-            ItemKind::TyAlias(box TyAliasKind(_, ref gen, _, Some(ref ty))) => {\n+            ItemKind::TyAlias(box TyAlias { ref generics, ty: Some(ref ty), .. }) => {\n                 // We lower\n                 //\n                 // type Foo = impl Trait\n@@ -288,10 +288,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n                     },\n                 );\n-                let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n-            ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, None)) => {\n+            ItemKind::TyAlias(box TyAlias { ref generics, ty: None, .. }) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -318,7 +318,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -384,13 +384,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     items: new_impl_items,\n                 })\n             }\n-            ItemKind::Trait(box TraitKind(\n+            ItemKind::Trait(box Trait {\n                 is_auto,\n                 unsafety,\n                 ref generics,\n                 ref bounds,\n                 ref items,\n-            )) => {\n+            }) => {\n                 let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n                 let items = self\n                     .arena\n@@ -655,7 +655,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             def_id,\n             ident: self.lower_ident(i.ident),\n             kind: match i.kind {\n-                ForeignItemKind::Fn(box FnKind(_, ref sig, ref generics, _)) => {\n+                ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n                         generics,\n@@ -772,13 +772,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n-            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, None)) => {\n+            AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n-            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, Some(ref body))) => {\n+            AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n                     self.lower_maybe_async_body(i.span, &sig.decl, asyncness, Some(&body));\n@@ -791,8 +791,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref default)) => {\n-                let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n+            AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n+                let ty = ty.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n@@ -818,11 +818,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n             AssocItemKind::Const(_, _, default) => (hir::AssocItemKind::Const, default.is_some()),\n-            AssocItemKind::TyAlias(box TyAliasKind(_, _, _, default)) => {\n-                (hir::AssocItemKind::Type, default.is_some())\n+            AssocItemKind::TyAlias(box TyAlias { ty, .. }) => {\n+                (hir::AssocItemKind::Type, ty.is_some())\n             }\n-            AssocItemKind::Fn(box FnKind(_, sig, _, default)) => {\n-                (hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }, default.is_some())\n+            AssocItemKind::Fn(box Fn { sig, body, .. }) => {\n+                (hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }, body.is_some())\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n@@ -853,7 +853,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n                 )\n             }\n-            AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n+            AssocItemKind::Fn(box Fn { sig, generics, body, .. }) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n@@ -869,7 +869,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(box TyAliasKind(_, generics, _, ty)) => {\n+            AssocItemKind::TyAlias(box TyAlias { generics, ty, .. }) => {\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n@@ -920,7 +920,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n-                AssocItemKind::Fn(box FnKind(_, sig, ..)) => {\n+                AssocItemKind::Fn(box Fn { sig, .. }) => {\n                     hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::MacCall(..) => unimplemented!(),"}, {"sha": "1822ba6ec996493d952d217a25fa39253c5c383a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1064,7 +1064,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 unsafety,\n                 polarity,\n                 defaultness: _,\n@@ -1111,7 +1111,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 });\n                 return; // Avoid visiting again.\n             }\n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -1152,8 +1152,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(box FnKind(def, ref sig, ref generics, ref body)) => {\n-                self.check_defaultness(item.span, def);\n+            ItemKind::Fn(box Fn { defaultness, ref sig, ref generics, ref body }) => {\n+                self.check_defaultness(item.span, defaultness);\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";\n@@ -1195,19 +1195,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(box TraitKind(\n-                is_auto,\n-                _,\n-                ref generics,\n-                ref bounds,\n-                ref trait_items,\n-            )) => {\n+            ItemKind::Trait(box Trait { is_auto, ref generics, ref bounds, ref items, .. }) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     self.deny_generic_params(generics, item.ident.span);\n                     self.deny_super_traits(bounds, item.ident.span);\n                     self.deny_where_clause(&generics.where_clause, item.ident.span);\n-                    self.deny_items(trait_items, item.ident.span);\n+                    self.deny_items(items, item.ident.span);\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n \n@@ -1217,7 +1211,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n                 self.with_banned_tilde_const(|this| walk_list!(this, visit_param_bound, bounds));\n-                walk_list!(self, visit_assoc_item, trait_items, AssocCtxt::Trait);\n+                walk_list!(self, visit_assoc_item, items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n             }\n@@ -1278,9 +1272,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n-            ItemKind::TyAlias(box TyAliasKind(def, _, ref bounds, ref body)) => {\n-                self.check_defaultness(item.span, def);\n-                if body.is_none() {\n+            ItemKind::TyAlias(box TyAlias { defaultness, ref bounds, ref ty, .. }) => {\n+                self.check_defaultness(item.span, defaultness);\n+                if ty.is_none() {\n                     let msg = \"free type alias without body\";\n                     self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n                 }\n@@ -1294,15 +1288,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match &fi.kind {\n-            ForeignItemKind::Fn(box FnKind(def, sig, _, body)) => {\n-                self.check_defaultness(fi.span, *def);\n+            ForeignItemKind::Fn(box Fn { defaultness, sig, body, .. }) => {\n+                self.check_defaultness(fi.span, *defaultness);\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n                 self.check_foreign_item_ascii_only(fi.ident);\n             }\n-            ForeignItemKind::TyAlias(box TyAliasKind(def, generics, bounds, body)) => {\n-                self.check_defaultness(fi.span, *def);\n-                self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n+            ForeignItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty, .. }) => {\n+                self.check_defaultness(fi.span, *defaultness);\n+                self.check_foreign_kind_bodyless(fi.ident, \"type\", ty.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n                 self.check_foreign_ty_genericless(generics);\n                 self.check_foreign_item_ascii_only(fi.ident);\n@@ -1587,11 +1581,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 AssocItemKind::Const(_, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n                 }\n-                AssocItemKind::Fn(box FnKind(_, _, _, body)) => {\n+                AssocItemKind::Fn(box Fn { body, .. }) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(box TyAliasKind(_, _, bounds, body)) => {\n-                    self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n+                AssocItemKind::TyAlias(box TyAlias { bounds, ty, .. }) => {\n+                    self.check_impl_item_provided(item.span, ty, \"type\", \" = <type>;\");\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n                 }\n                 _ => {}\n@@ -1600,7 +1594,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n             self.invalid_visibility(&item.vis, None);\n-            if let AssocItemKind::Fn(box FnKind(_, sig, _, _)) = &item.kind {\n+            if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n                 self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }\n@@ -1611,7 +1605,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref ty))\n+            AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. })\n                 if ctxt == AssocCtxt::Trait =>\n             {\n                 self.visit_vis(&item.vis);\n@@ -1623,7 +1617,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 });\n                 walk_list!(self, visit_ty, ty);\n             }\n-            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n+            AssocItemKind::Fn(box Fn { ref sig, ref generics, ref body, .. })\n                 if self.in_const_trait_impl\n                     || ctxt == AssocCtxt::Trait\n                     || matches!(sig.header.constness, Const::Yes(_)) =>"}, {"sha": "a421a563c46559d1d1b24d5fe4e55b05b85d23a1", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -423,9 +423,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl(box ast::ImplKind {\n-                polarity, defaultness, ref of_trait, ..\n-            }) => {\n+            ast::ItemKind::Impl(box ast::Impl { polarity, defaultness, ref of_trait, .. }) => {\n                 if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n@@ -441,7 +439,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Trait(box ast::TraitKind(ast::IsAuto::Yes, ..)) => {\n+            ast::ItemKind::Trait(box ast::Trait { is_auto: ast::IsAuto::Yes, .. }) => {\n                 gate_feature_post!(\n                     &self,\n                     auto_traits,\n@@ -459,7 +457,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::TyAlias(box ast::TyAliasKind(_, _, _, Some(ref ty))) => {\n+            ast::ItemKind::TyAlias(box ast::TyAlias { ty: Some(ref ty), .. }) => {\n                 self.check_impl_trait(&ty)\n             }\n \n@@ -634,7 +632,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n         let is_fn = match i.kind {\n             ast::AssocItemKind::Fn(_) => true,\n-            ast::AssocItemKind::TyAlias(box ast::TyAliasKind(_, ref generics, _, ref ty)) => {\n+            ast::AssocItemKind::TyAlias(box ast::TyAlias { ref generics, ref ty, .. }) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "ee369517aeba90b1bb5839c0428a3adbb3260b45", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 57, "deletions": 17, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1044,15 +1044,27 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::ForeignItemKind::Fn(box ast::FnKind(def, sig, gen, body)) => {\n-                self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n+            ast::ForeignItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n+                self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n-            ast::ForeignItemKind::TyAlias(box ast::TyAliasKind(def, generics, bounds, ty)) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n+            ast::ForeignItemKind::TyAlias(box ast::TyAlias {\n+                defaultness,\n+                generics,\n+                bounds,\n+                ty,\n+            }) => {\n+                self.print_associated_type(\n+                    ident,\n+                    generics,\n+                    bounds,\n+                    ty.as_deref(),\n+                    vis,\n+                    *defaultness,\n+                );\n             }\n             ast::ForeignItemKind::MacCall(m) => {\n                 self.print_mac(m);\n@@ -1156,9 +1168,17 @@ impl<'a> State<'a> {\n             ast::ItemKind::Const(def, ref ty, ref body) => {\n                 self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Fn(box ast::FnKind(def, ref sig, ref gen, ref body)) => {\n+            ast::ItemKind::Fn(box ast::Fn { defaultness, ref sig, ref generics, ref body }) => {\n                 let body = body.as_deref();\n-                self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n+                self.print_fn_full(\n+                    sig,\n+                    item.ident,\n+                    generics,\n+                    &item.vis,\n+                    defaultness,\n+                    body,\n+                    &item.attrs,\n+                );\n             }\n             ast::ItemKind::Mod(unsafety, ref mod_kind) => {\n                 self.head(self.to_string(|s| {\n@@ -1203,9 +1223,21 @@ impl<'a> State<'a> {\n                 self.print_inline_asm(asm);\n                 self.end();\n             }\n-            ast::ItemKind::TyAlias(box ast::TyAliasKind(def, ref generics, ref bounds, ref ty)) => {\n+            ast::ItemKind::TyAlias(box ast::TyAlias {\n+                defaultness,\n+                ref generics,\n+                ref bounds,\n+                ref ty,\n+            }) => {\n                 let ty = ty.as_deref();\n-                self.print_associated_type(item.ident, generics, bounds, ty, &item.vis, def);\n+                self.print_associated_type(\n+                    item.ident,\n+                    generics,\n+                    bounds,\n+                    ty,\n+                    &item.vis,\n+                    defaultness,\n+                );\n             }\n             ast::ItemKind::Enum(ref enum_definition, ref params) => {\n                 self.print_enum_def(enum_definition, params, item.ident, item.span, &item.vis);\n@@ -1218,7 +1250,7 @@ impl<'a> State<'a> {\n                 self.head(visibility_qualified(&item.vis, \"union\"));\n                 self.print_struct(struct_def, generics, item.ident, item.span, true);\n             }\n-            ast::ItemKind::Impl(box ast::ImplKind {\n+            ast::ItemKind::Impl(box ast::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -1261,13 +1293,14 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span);\n             }\n-            ast::ItemKind::Trait(box ast::TraitKind(\n+            ast::ItemKind::Trait(box ast::Trait {\n                 is_auto,\n                 unsafety,\n                 ref generics,\n                 ref bounds,\n-                ref trait_items,\n-            )) => {\n+                ref items,\n+                ..\n+            }) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_unsafety(unsafety);\n@@ -1290,7 +1323,7 @@ impl<'a> State<'a> {\n                 self.s.word(\" \");\n                 self.bopen();\n                 self.print_inner_attributes(&item.attrs);\n-                for trait_item in trait_items {\n+                for trait_item in items {\n                     self.print_assoc_item(trait_item);\n                 }\n                 self.bclose(item.span);\n@@ -1483,14 +1516,21 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::AssocItemKind::Fn(box ast::FnKind(def, sig, gen, body)) => {\n-                self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n+            ast::AssocItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n+                self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n             ast::AssocItemKind::Const(def, ty, body) => {\n                 self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::TyAlias(box ast::TyAliasKind(def, generics, bounds, ty)) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n+            ast::AssocItemKind::TyAlias(box ast::TyAlias { defaultness, generics, bounds, ty }) => {\n+                self.print_associated_type(\n+                    ident,\n+                    generics,\n+                    bounds,\n+                    ty.as_deref(),\n+                    vis,\n+                    *defaultness,\n+                );\n             }\n             ast::AssocItemKind::MacCall(m) => {\n                 self.print_mac(m);"}, {"sha": "994a74a5a9b9f939190f50b3bcfa5184b3f9f4bb", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -557,12 +557,12 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: Vec::new(),\n-                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAliasKind(\n-                    ast::Defaultness::Final,\n-                    Generics::default(),\n-                    Vec::new(),\n-                    Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n-                ))),\n+                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAlias {\n+                    defaultness: ast::Defaultness::Final,\n+                    generics: Generics::default(),\n+                    bounds: Vec::new(),\n+                    ty: Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n+                })),\n                 tokens: None,\n             })\n         });\n@@ -726,7 +726,7 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             Ident::empty(),\n             a,\n-            ast::ItemKind::Impl(Box::new(ast::ImplKind {\n+            ast::ItemKind::Impl(Box::new(ast::Impl {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n@@ -955,7 +955,7 @@ impl<'a> MethodDef<'a> {\n             decl: fn_decl,\n             span: trait_.span,\n         };\n-        let def = ast::Defaultness::Final;\n+        let defaultness = ast::Defaultness::Final;\n \n         // Create the method.\n         P(ast::AssocItem {\n@@ -968,12 +968,12 @@ impl<'a> MethodDef<'a> {\n                 tokens: None,\n             },\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(Box::new(ast::FnKind(\n-                def,\n+            kind: ast::AssocItemKind::Fn(Box::new(ast::Fn {\n+                defaultness,\n                 sig,\n-                fn_generics,\n-                Some(body_block),\n-            ))),\n+                generics: fn_generics,\n+                body: Some(body_block),\n+            })),\n             tokens: None,\n         })\n     }"}, {"sha": "367a5aa732370a0dff03491b22f151322989206e", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n-use rustc_ast::{ImplKind, ItemKind, MetaItem};\n+use rustc_ast::{Impl, ItemKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -180,7 +180,7 @@ fn inject_impl_of_structural_trait(\n         span,\n         Ident::empty(),\n         attrs,\n-        ItemKind::Impl(Box::new(ImplKind {\n+        ItemKind::Impl(Box::new(Impl {\n             unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,"}, {"sha": "a433876147f8d903edbc8568485649f5eef0cf92", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::expand::allocator::{\n };\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n-use rustc_ast::{FnKind, ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n+use rustc_ast::{Fn, ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -84,13 +84,13 @@ impl AllocFnFactory<'_, '_> {\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header, span: self.span };\n-        let block = Some(self.cx.block_expr(output_expr));\n-        let kind = ItemKind::Fn(Box::new(FnKind(\n-            ast::Defaultness::Final,\n+        let body = Some(self.cx.block_expr(output_expr));\n+        let kind = ItemKind::Fn(Box::new(Fn {\n+            defaultness: ast::Defaultness::Final,\n             sig,\n-            Generics::default(),\n-            block,\n-        )));\n+            generics: Generics::default(),\n+            body,\n+        }));\n         let item = self.cx.item(\n             self.span,\n             Ident::from_str_and_span(&self.kind.fn_name(method.name), self.span),"}, {"sha": "d2629926b51da705f3ae4e1dfbb28b9c1f54911d", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -429,7 +429,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = cx.sess.contains_name(&i.attrs, sym::should_panic);\n     let sd = &cx.sess.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(box ast::FnKind(_, ref sig, ref generics, _)) = i.kind {\n+    if let ast::ItemKind::Fn(box ast::Fn { ref sig, ref generics, .. }) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n                 .span_label(span, \"`unsafe` because of this\")\n@@ -478,7 +478,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(box ast::Fn { ref sig, .. }) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n         sig.decl.inputs.len() == 1"}, {"sha": "64ccd4331e58a7c3492840e3bba07e8d88452e4b", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -313,13 +313,13 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default(), span: sp };\n-    let def = ast::Defaultness::Final;\n-    let main = ast::ItemKind::Fn(Box::new(ast::FnKind(\n-        def,\n+    let defaultness = ast::Defaultness::Final;\n+    let main = ast::ItemKind::Fn(Box::new(ast::Fn {\n+        defaultness,\n         sig,\n-        ast::Generics::default(),\n-        Some(main_body),\n-    )));\n+        generics: ast::Generics::default(),\n+        body: Some(main_body),\n+    }));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}, {"sha": "946502378732a55dc2b373ae1cbcc06a715b41e9", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -776,7 +776,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) => Self::is_sig_const(sig),\n+            ast::ItemKind::Fn(box ast::Fn { ref sig, .. }) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -785,7 +785,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(box ast::Fn { ref sig, .. }) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "a56177847be0a8b067497cd0d1f087dbdd601b5c", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -369,12 +369,12 @@ impl EarlyLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n-            ast::ItemKind::Trait(box ast::TraitKind(_, ast::Unsafe::Yes(_), ..)) => self\n+            ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"declaration of an `unsafe` trait\").emit()\n                 }),\n \n-            ast::ItemKind::Impl(box ast::ImplKind { unsafety: ast::Unsafe::Yes(_), .. }) => self\n+            ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"implementation of an `unsafe` trait\").emit()\n                 }),\n@@ -921,7 +921,7 @@ impl EarlyLintPass for AnonymousParameters {\n             // This is a hard error in future editions; avoid linting and erroring\n             return;\n         }\n-        if let ast::AssocItemKind::Fn(box FnKind(_, ref sig, _, _)) = it.kind {\n+        if let ast::AssocItemKind::Fn(box Fn { ref sig, .. }) = it.kind {\n             for arg in sig.decl.inputs.iter() {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n                     if ident.name == kw::Empty {"}, {"sha": "b726a0624179cbd01894879c2d85c2bec9984eec", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -238,8 +238,7 @@ declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n \n impl EarlyLintPass for LintPassImpl {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if let ast::ItemKind::Impl(box ast::ImplKind { of_trait: Some(lint_pass), .. }) = &item.kind\n-        {\n+        if let ast::ItemKind::Impl(box ast::Impl { of_trait: Some(lint_pass), .. }) = &item.kind {\n             if let Some(last) = lint_pass.path.segments.last() {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();"}, {"sha": "eb0a693226c480d51c91311cd63ddcc5bd1cfd76", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -29,6 +29,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n use std::collections::BTreeMap;\n+use std::ops::Fn;\n use std::path::Path;\n use std::{cmp, env};\n use tracing::{debug, info};"}, {"sha": "73ca809ab1d3a53f72523025251250e2bd842f18", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -220,7 +220,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n-            (ident, ItemKind::Fn(Box::new(FnKind(def(), sig, generics, body))))\n+            (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -560,7 +560,7 @@ impl<'a> Parser<'a> {\n                 };\n                 let trait_ref = TraitRef { path, ref_id: ty_first.id };\n \n-                ItemKind::Impl(Box::new(ImplKind {\n+                ItemKind::Impl(Box::new(Impl {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -573,7 +573,7 @@ impl<'a> Parser<'a> {\n             }\n             None => {\n                 // impl Type\n-                ItemKind::Impl(Box::new(ImplKind {\n+                ItemKind::Impl(Box::new(Impl {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -682,7 +682,7 @@ impl<'a> Parser<'a> {\n \n         self.expect_keyword(kw::Trait)?;\n         let ident = self.parse_ident()?;\n-        let mut tps = self.parse_generics()?;\n+        let mut generics = self.parse_generics()?;\n \n         // Parse optional colon and supertrait bounds.\n         let had_colon = self.eat(&token::Colon);\n@@ -702,7 +702,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let bounds = self.parse_generic_bounds(None)?;\n-            tps.where_clause = self.parse_where_clause()?;\n+            generics.where_clause = self.parse_where_clause()?;\n             self.expect_semi()?;\n \n             let whole_span = lo.to(self.prev_token.span);\n@@ -717,12 +717,15 @@ impl<'a> Parser<'a> {\n \n             self.sess.gated_spans.gate(sym::trait_alias, whole_span);\n \n-            Ok((ident, ItemKind::TraitAlias(tps, bounds)))\n+            Ok((ident, ItemKind::TraitAlias(generics, bounds)))\n         } else {\n             // It's a normal trait.\n-            tps.where_clause = self.parse_where_clause()?;\n+            generics.where_clause = self.parse_where_clause()?;\n             let items = self.parse_item_list(attrs, |p| p.parse_trait_item(ForceCollect::No))?;\n-            Ok((ident, ItemKind::Trait(Box::new(TraitKind(is_auto, unsafety, tps, bounds, items)))))\n+            Ok((\n+                ident,\n+                ItemKind::Trait(Box::new(Trait { is_auto, unsafety, generics, bounds, items })),\n+            ))\n         }\n     }\n \n@@ -769,7 +772,7 @@ impl<'a> Parser<'a> {\n     /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n     /// ```\n     /// The `\"type\"` has already been eaten.\n-    fn parse_type_alias(&mut self, def: Defaultness) -> PResult<'a, ItemInfo> {\n+    fn parse_type_alias(&mut self, defaultness: Defaultness) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -778,10 +781,10 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n         generics.where_clause = self.parse_where_clause()?;\n \n-        let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n+        let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(Box::new(TyAliasKind(def, generics, bounds, default)))))\n+        Ok((ident, ItemKind::TyAlias(Box::new(TyAlias { defaultness, generics, bounds, ty }))))\n     }\n \n     /// Parses a `UseTree`.\n@@ -1039,9 +1042,7 @@ impl<'a> Parser<'a> {\n         };\n \n         match impl_info.1 {\n-            ItemKind::Impl(box ImplKind {\n-                of_trait: Some(ref trai), ref mut constness, ..\n-            }) => {\n+            ItemKind::Impl(box Impl { of_trait: Some(ref trai), ref mut constness, .. }) => {\n                 *constness = Const::Yes(const_span);\n \n                 let before_trait = trai.path.span.shrink_to_lo();"}, {"sha": "d77a70e5327994dee768eadc67e7ac6dbdc7c440", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -15,7 +15,7 @@ use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n-use rustc_ast::{Block, FnKind, ForeignItem, ForeignItemKind, ImplKind, Item, ItemKind, NodeId};\n+use rustc_ast::{Block, Fn, ForeignItem, ForeignItemKind, Impl, Item, ItemKind, NodeId};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n@@ -880,7 +880,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items do not add names to modules.\n-            ItemKind::Impl(box ImplKind { of_trait: Some(..), .. }) => {\n+            ItemKind::Impl(box Impl { of_trait: Some(..), .. }) => {\n                 self.r.trait_impl_items.insert(local_def_id);\n             }\n             ItemKind::Impl { .. } | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n@@ -1380,7 +1380,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         if ctxt == AssocCtxt::Trait {\n             let (def_kind, ns) = match item.kind {\n                 AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),\n-                AssocItemKind::Fn(box FnKind(_, ref sig, _, _)) => {\n+                AssocItemKind::Fn(box Fn { ref sig, .. }) => {\n                     if sig.decl.has_self() {\n                         self.r.has_self.insert(def_id);\n                     }"}, {"sha": "e67f7f03516803c0a7cb7ca7acfb57b9f05f4846", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -498,8 +498,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n-            ForeignItemKind::Fn(box FnKind(_, _, ref generics, _))\n-            | ForeignItemKind::TyAlias(box TyAliasKind(_, ref generics, ..)) => {\n+            ForeignItemKind::Fn(box Fn { ref generics, .. })\n+            | ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -953,8 +953,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n \n         match item.kind {\n-            ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, _))\n-            | ItemKind::Fn(box FnKind(_, _, ref generics, _)) => {\n+            ItemKind::TyAlias(box TyAlias { ref generics, .. })\n+            | ItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.compute_num_lifetime_params(item.id, generics);\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n@@ -968,7 +968,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_adt(item, generics);\n             }\n \n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 ref generics,\n                 ref of_trait,\n                 ref self_ty,\n@@ -979,7 +979,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n-            ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref trait_items)) => {\n+            ItemKind::Trait(box Trait { ref generics, ref bounds, ref items, .. }) => {\n                 self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n@@ -994,8 +994,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             });\n                         };\n \n-                        this.with_trait_items(trait_items, |this| {\n-                            for item in trait_items {\n+                        this.with_trait_items(items, |this| {\n+                            for item in items {\n                                 match &item.kind {\n                                     AssocItemKind::Const(_, ty, default) => {\n                                         this.visit_ty(ty);\n@@ -1015,10 +1015,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             );\n                                         }\n                                     }\n-                                    AssocItemKind::Fn(box FnKind(_, _, generics, _)) => {\n+                                    AssocItemKind::Fn(box Fn { generics, .. }) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n-                                    AssocItemKind::TyAlias(box TyAliasKind(_, generics, _, _)) => {\n+                                    AssocItemKind::TyAlias(box TyAlias { generics, .. }) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n                                     AssocItemKind::MacCall(_) => {\n@@ -1338,7 +1338,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::Fn(box FnKind(.., generics, _)) => {\n+                                        AssocItemKind::Fn(box Fn { generics, .. }) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Fn\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n@@ -1363,12 +1363,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::TyAlias(box TyAliasKind(\n-                                            _,\n-                                            generics,\n-                                            _,\n-                                            _,\n-                                        )) => {\n+                                        AssocItemKind::TyAlias(box TyAlias {\n+                                            generics, ..\n+                                        }) => {\n                                             debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib("}, {"sha": "1d5b36155f46cbbd74125b513368d8996fd526c6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1235,9 +1235,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 if assoc_item.ident == ident {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,\n-                        ast::AssocItemKind::Fn(box ast::FnKind(_, sig, ..))\n-                            if sig.decl.has_self() =>\n-                        {\n+                        ast::AssocItemKind::Fn(box ast::Fn { sig, .. }) if sig.decl.has_self() => {\n                             AssocSuggestion::MethodWithSelf\n                         }\n                         ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,"}, {"sha": "5472baae3f2b0bb0d1a9de1cef1b0bf7729524ba", "filename": "src/test/run-make-fulldeps/print-cfg/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1,3 +1,5 @@\n+# needs-llvm-components: x86 arm\n+\n -include ../tools.mk\n \n all: default"}, {"sha": "d4ba072807f8f891adb1de3f37b3327d5b9ea0eb", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n+use rustc_ast::ast::{Async, AttrKind, Attribute, Fn, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -639,7 +639,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(box FnKind(_, sig, _, Some(block))) if item.ident.name == sym::main => {\n+                            ItemKind::Fn(box Fn { sig, body: Some(block), .. }) if item.ident.name == sym::main => {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "09b6e20083889e863ac884636ad2c3b20f08db50", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::in_macro;\n-use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n+use rustc_ast::ast::{AssocItemKind, Extern, Fn, FnSig, Impl, Item, ItemKind, Trait, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -162,17 +162,17 @@ impl EarlyLintPass for ExcessiveBools {\n                     );\n                 }\n             },\n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 of_trait: None, items, ..\n             })\n-            | ItemKind::Trait(box TraitKind(.., items)) => {\n+            | ItemKind::Trait(box Trait { items, .. }) => {\n                 for item in items {\n-                    if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n-                        self.check_fn_sig(cx, fn_sig, item.span);\n+                    if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n+                        self.check_fn_sig(cx, sig, item.span);\n                     }\n                 }\n             },\n-            ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n+            ItemKind::Fn(box Fn { sig, .. }) => self.check_fn_sig(cx, sig, item.span),\n             _ => (),\n         }\n     }"}, {"sha": "e28cc49bf2a1a0f955ac3686c132d4c201b2b6ef", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat, PatKind,\n+    self, Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -357,7 +357,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let ItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n+        if let ItemKind::Fn(box ast::Fn { ref sig, body: Some(ref blk), .. }) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n@@ -367,7 +367,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let AssocItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n+        if let AssocItemKind::Fn(box ast::Fn { ref sig, body: Some(ref blk), .. }) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }"}, {"sha": "b412e15ae4f82c9b474f71837b84cb944ebbd23e", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -4,7 +4,7 @@ use std::ops::{Deref, Range};\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n-use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n+use rustc_ast::ast::{Expr, ExprKind, Impl, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -243,7 +243,7 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box ImplKind {\n+        if let ItemKind::Impl(box Impl {\n             of_trait: Some(trait_ref),\n             ..\n         }) = &item.kind"}, {"sha": "1b05a8a35046ede0d99e4a5b439f52659ab2a075", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -250,7 +250,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (Mod(lu, lmk), Mod(ru, rmk)) => {\n@@ -266,7 +267,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, eq_str_lit) && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -276,7 +278,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n         },\n-        (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n+        (Trait(box ast::Trait { is_auto: la, unsafety: lu, generics: lg, bounds: lb, items: li }),\n+         Trait(box ast::Trait { is_auto: ra, unsafety: ru, generics: rg, bounds: rb, items: ri })) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && eq_generics(lg, rg)\n@@ -285,7 +288,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, eq_generic_bound),\n         (\n-            Impl(box ImplKind {\n+            Impl(box ast::Impl {\n                 unsafety: lu,\n                 polarity: lp,\n                 defaultness: ld,\n@@ -295,7 +298,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 self_ty: lst,\n                 items: li,\n             }),\n-            Impl(box ImplKind {\n+            Impl(box ast::Impl {\n                 unsafety: ru,\n                 polarity: rp,\n                 defaultness: rd,\n@@ -325,10 +328,12 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -343,10 +348,12 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)"}, {"sha": "c828798d933114db056b331834a3d2a02f96d403", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -622,7 +622,7 @@ impl<'a> FmtVisitor<'a> {\n             fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n                 match (a, b) {\n                     (TyAlias(lty), TyAlias(rty))\n-                        if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                        if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                     {\n                         false\n                     }\n@@ -633,16 +633,16 @@ impl<'a> FmtVisitor<'a> {\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n                 (TyAlias(lty), TyAlias(rty))\n-                    if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                    if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(ty), _) if is_type(&ty.3) => Ordering::Less,\n-                (_, TyAlias(ty)) if is_type(&ty.3) => Ordering::Greater,\n+                (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n+                (_, TyAlias(ty)) if is_type(&ty.ty) => Ordering::Greater,\n                 (TyAlias(..), _) => Ordering::Less,\n                 (_, TyAlias(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n@@ -679,7 +679,7 @@ pub(crate) fn format_impl(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             ref generics,\n             ref self_ty,\n             ref items,\n@@ -833,7 +833,7 @@ fn format_impl_ref_and_type(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             unsafety,\n             polarity,\n             defaultness,\n@@ -1029,8 +1029,13 @@ pub(crate) fn format_trait(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Trait(trait_kind) = &item.kind {\n-        let ast::TraitKind(is_auto, unsafety, ref generics, ref generic_bounds, ref trait_items) =\n-            **trait_kind;\n+        let ast::Trait {\n+            is_auto,\n+            unsafety,\n+            ref generics,\n+            ref bounds,\n+            ref items,\n+        } = **trait_kind;\n         let mut result = String::with_capacity(128);\n         let header = format!(\n             \"{}{}{}trait \",\n@@ -1048,11 +1053,11 @@ pub(crate) fn format_trait(\n         result.push_str(&generics_str);\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n-        if !generic_bounds.is_empty() {\n+        if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n                 .span_after(item.span, &item.ident.as_str());\n-            let bound_hi = generic_bounds.last().unwrap().span().hi();\n+            let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {\n                 return None;\n@@ -1061,7 +1066,7 @@ pub(crate) fn format_trait(\n             result = rewrite_assign_rhs_with(\n                 context,\n                 result + \":\",\n-                generic_bounds,\n+                bounds,\n                 shape,\n                 RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n@@ -1072,10 +1077,10 @@ pub(crate) fn format_trait(\n             let where_on_new_line = context.config.indent_style() != IndentStyle::Block;\n \n             let where_budget = context.budget(last_line_width(&result));\n-            let pos_before_where = if generic_bounds.is_empty() {\n+            let pos_before_where = if bounds.is_empty() {\n                 generics.where_clause.span.lo()\n             } else {\n-                generic_bounds[generic_bounds.len() - 1].span().hi()\n+                bounds[bounds.len() - 1].span().hi()\n             };\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n@@ -1134,7 +1139,7 @@ pub(crate) fn format_trait(\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n                 if result.contains('\\n')\n-                    || (!generics.where_clause.predicates.is_empty() && !trait_items.is_empty())\n+                    || (!generics.where_clause.predicates.is_empty() && !items.is_empty())\n                 {\n                     result.push_str(&offset.to_string_with_newline(context.config));\n                 } else {\n@@ -1149,12 +1154,12 @@ pub(crate) fn format_trait(\n         let open_pos = snippet.find_uncommented(\"{\")? + 1;\n         let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-        if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n+        if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = block_span.lo() + BytePos(open_pos as u32);\n \n-            for item in trait_items {\n+            for item in items {\n                 visitor.visit_trait_item(item);\n             }\n \n@@ -3125,17 +3130,22 @@ impl Rewrite for ast::ForeignItem {\n \n         let item_str = match self.kind {\n             ast::ForeignItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref fn_sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let mut visitor = FmtVisitor::from_context(context);\n                     visitor.block_indent = shape.indent;\n                     visitor.last_pos = self.span.lo();\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, &fn_sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, &sig, &self.vis, Some(body)),\n                         generics,\n-                        &fn_sig.decl,\n+                        &sig.decl,\n                         self.span,\n                         defaultness,\n                         Some(&inner_attrs),\n@@ -3146,7 +3156,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&fn_sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(&sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3168,16 +3178,20 @@ impl Rewrite for ast::ForeignItem {\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n+                let ast::TyAlias {\n+                    ref generics,\n+                    ref bounds,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 rewrite_type(\n                     &context,\n                     shape.indent,\n                     self.ident,\n                     &self.vis,\n                     generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n+                    Some(bounds),\n+                    ty.as_ref(),\n                     self.span,\n                 )\n             }"}, {"sha": "2cfd4e3f15c5886c5792d216bfdbf3b5dcf99802", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68568dcb8ff49a3d70f4cc2d9215b5753d088738/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=68568dcb8ff49a3d70f4cc2d9215b5753d088738", "patch": "@@ -540,44 +540,41 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.visit_static(&StaticParts::from_item(item));\n                 }\n                 ast::ItemKind::Fn(ref fn_kind) => {\n-                    let ast::FnKind(defaultness, ref fn_signature, ref generics, ref block) =\n-                        **fn_kind;\n-                    if let Some(ref body) = block {\n+                    let ast::Fn {\n+                        defaultness,\n+                        ref sig,\n+                        ref generics,\n+                        ref body,\n+                    } = **fn_kind;\n+                    if let Some(ref body) = body {\n                         let inner_attrs = inner_attributes(&item.attrs);\n-                        let fn_ctxt = match fn_signature.header.ext {\n+                        let fn_ctxt = match sig.header.ext {\n                             ast::Extern::None => visit::FnCtxt::Free,\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(\n-                                fn_ctxt,\n-                                item.ident,\n-                                &fn_signature,\n-                                &item.vis,\n-                                Some(body),\n-                            ),\n+                            visit::FnKind::Fn(fn_ctxt, item.ident, &sig, &item.vis, Some(body)),\n                             generics,\n-                            &fn_signature.decl,\n+                            &sig.decl,\n                             item.span,\n                             defaultness,\n                             Some(&inner_attrs),\n                         )\n                     } else {\n                         let indent = self.block_indent;\n                         let rewrite = self.rewrite_required_fn(\n-                            indent,\n-                            item.ident,\n-                            &fn_signature,\n-                            &item.vis,\n-                            generics,\n-                            item.span,\n+                            indent, item.ident, &sig, &item.vis, generics, item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n                 ast::ItemKind::TyAlias(ref alias_kind) => {\n-                    let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref ty) =\n-                        **alias_kind;\n+                    let ast::TyAlias {\n+                        ref generics,\n+                        ref bounds,\n+                        ref ty,\n+                        ..\n+                    } = **alias_kind;\n                     match ty {\n                         Some(ty) => {\n                             let rewrite = rewrite_type(\n@@ -586,7 +583,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                                 item.ident,\n                                 &item.vis,\n                                 generics,\n-                                Some(generic_bounds),\n+                                Some(bounds),\n                                 Some(&*ty),\n                                 item.span,\n                             );\n@@ -597,7 +594,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                                 &self.get_context(),\n                                 self.block_indent,\n                                 item.ident,\n-                                generic_bounds,\n+                                bounds,\n                                 generics,\n                                 &item.vis,\n                                 item.span,\n@@ -639,8 +636,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         match ti.kind {\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n             ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let inner_attrs = inner_attributes(&ti.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                     self.visit_fn(\n@@ -659,16 +661,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n             }\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n+                let ast::TyAlias {\n+                    ref generics,\n+                    ref bounds,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 let rewrite = rewrite_type(\n                     &self.get_context(),\n                     self.block_indent,\n                     ti.ident,\n                     &ti.vis,\n                     generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n+                    Some(bounds),\n+                    ty.as_ref(),\n                     ti.span,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n@@ -689,8 +695,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         match ii.kind {\n             ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let inner_attrs = inner_attributes(&ii.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n                     self.visit_fn(\n@@ -710,7 +721,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(defaultness, ref generics, _, ref ty) = **ty_alias_kind;\n+                let ast::TyAlias {\n+                    defaultness,\n+                    ref generics,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 self.push_rewrite(\n                     ii.span,\n                     rewrite_impl_type("}]}