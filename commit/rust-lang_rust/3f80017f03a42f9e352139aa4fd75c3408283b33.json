{"sha": "3f80017f03a42f9e352139aa4fd75c3408283b33", "node_id": "C_kwDOAAsO6NoAKDNmODAwMTdmMDNhNDJmOWUzNTIxMzlhYTRmZDc1YzM0MDgyODNiMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-14T22:15:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-14T23:12:27Z"}, "message": "Better label for illegal impl trait types", "tree": {"sha": "8ffdf9fcb53ab2a82c96e7be55a5f1802b688d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffdf9fcb53ab2a82c96e7be55a5f1802b688d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f80017f03a42f9e352139aa4fd75c3408283b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f80017f03a42f9e352139aa4fd75c3408283b33", "html_url": "https://github.com/rust-lang/rust/commit/3f80017f03a42f9e352139aa4fd75c3408283b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f80017f03a42f9e352139aa4fd75c3408283b33/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}], "stats": {"total": 109, "additions": 67, "deletions": 42}, "files": [{"sha": "c4442b34fe42bc4a43e09db5f81210488b4f091a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -139,13 +139,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Cast(expr, ty) => {\n                     let expr = self.lower_expr(expr);\n                     let ty =\n-                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Cast));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(expr, ty) => {\n                     let expr = self.lower_expr(expr);\n                     let ty =\n-                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Cast));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ohs) => {"}, {"sha": "6bafbfbc14c736434928d400a33d49af769fa496", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -378,8 +378,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             )\n                         });\n \n-                        let lowered_ty = this\n-                            .lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        let lowered_ty = this.lower_ty(\n+                            ty,\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::ImplSelf),\n+                        );\n \n                         (trait_ref, lowered_ty)\n                     });\n@@ -458,7 +460,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+        let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -608,8 +610,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(t, m, _) => {\n-                    let ty =\n-                        self.lower_ty(t, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(t, &ImplTraitContext::Disallowed(ImplTraitPosition::StaticTy));\n                     hir::ForeignItemKind::Static(ty, *m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -679,11 +681,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                &ImplTraitContext::Disallowed(ImplTraitPosition::FieldTy),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+            self.lower_ty(&f.ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FieldTy))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -708,7 +710,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind, has_default) = match &i.kind {\n             AssocItemKind::Const(_, ty, default) => {\n-                let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n@@ -746,7 +749,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let ty = ty.as_ref().map(|x| {\n-                            this.lower_ty(x, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                            this.lower_ty(\n+                                x,\n+                                &ImplTraitContext::Disallowed(ImplTraitPosition::AssocTy),\n+                            )\n                         });\n                         hir::TraitItemKind::Type(\n                             this.lower_param_bounds(\n@@ -805,7 +811,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -1441,7 +1448,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir_id: self.next_id(),\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n                 bounded_ty: self\n-                    .lower_ty(bounded_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    .lower_ty(bounded_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Bound)),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {\n                     self.lower_param_bound(\n                         bound,\n@@ -1465,9 +1472,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             WherePredicate::EqPredicate(WhereEqPredicate { lhs_ty, rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                     lhs_ty: self\n-                        .lower_ty(lhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                        .lower_ty(lhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Bound)),\n                     rhs_ty: self\n-                        .lower_ty(rhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                        .lower_ty(rhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Bound)),\n                     span: self.lower_span(*span),\n                 })\n             }"}, {"sha": "b543be3be50839ffa0ef2eee5bd5068c922f4cec", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -253,7 +253,6 @@ enum ImplTraitContext {\n enum ImplTraitPosition {\n     Path,\n     Variable,\n-    Type,\n     Trait,\n     AsyncBlock,\n     Bound,\n@@ -270,14 +269,20 @@ enum ImplTraitPosition {\n     FnTraitReturn,\n     TraitReturn,\n     ImplReturn,\n+    GenericDefault,\n+    ConstTy,\n+    StaticTy,\n+    AssocTy,\n+    FieldTy,\n+    Cast,\n+    ImplSelf,\n }\n \n impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n             ImplTraitPosition::Path => \"path\",\n             ImplTraitPosition::Variable => \"variable binding\",\n-            ImplTraitPosition::Type => \"type\",\n             ImplTraitPosition::Trait => \"trait\",\n             ImplTraitPosition::AsyncBlock => \"async block\",\n             ImplTraitPosition::Bound => \"bound\",\n@@ -294,6 +299,13 @@ impl std::fmt::Display for ImplTraitPosition {\n             ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n             ImplTraitPosition::TraitReturn => \"trait method return\",\n             ImplTraitPosition::ImplReturn => \"`impl` method return\",\n+            ImplTraitPosition::GenericDefault => \"generic parameter default\",\n+            ImplTraitPosition::ConstTy => \"const type\",\n+            ImplTraitPosition::StaticTy => \"static type\",\n+            ImplTraitPosition::AssocTy => \"associated type\",\n+            ImplTraitPosition::FieldTy => \"field type\",\n+            ImplTraitPosition::Cast => \"cast type\",\n+            ImplTraitPosition::ImplSelf => \"impl header\",\n         };\n \n         write!(f, \"{name}\")\n@@ -2166,15 +2178,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        self.lower_ty(\n+                            x,\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::GenericDefault),\n+                        )\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ty, kw_span: _, default } => {\n-                let ty = self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty = self.lower_ty(\n+                    &ty,\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::GenericDefault),\n+                );\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 (\n                     hir::ParamName::Plain(self.lower_ident(param.ident)),"}, {"sha": "08570d4a5d982e65ff4d362fac7cfcfc65d49796", "filename": "tests/ui/associated-consts/issue-105330.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -33,7 +33,7 @@ LL | fn main<A: TraitWAssocConst<A=32>>() {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n   --> $DIR/issue-105330.rs:6:27\n    |\n LL | impl TraitWAssocConst for impl Demo {"}, {"sha": "6f2919b6c0909a2627721a805c5d3b8a85dbb4ba", "filename": "tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -115,13 +115,13 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n   --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;"}, {"sha": "f591c07bcf5f48f723c9fcd7af5fec630740680a", "filename": "tests/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {"}, {"sha": "a227f0ba7d135416bb3749009a2aa8c79ea493ae", "filename": "tests/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "a137777840b31d8163e2766446465cd048e4a6c2", "filename": "tests/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {"}, {"sha": "201aba3adff969cb43bf8034c31de0c083a724ab", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f80017f03a42f9e352139aa4fd75c3408283b33/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=3f80017f03a42f9e352139aa4fd75c3408283b33", "patch": "@@ -115,31 +115,31 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n   --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n   --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n   --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n   --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n   --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n@@ -187,31 +187,31 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n   --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n   --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n   --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n   --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n   --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n@@ -235,37 +235,37 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n   --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}"}]}