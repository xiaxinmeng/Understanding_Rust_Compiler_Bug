{"sha": "dd2b19539ea4d62a150cf13d45942e58b6b44e54", "node_id": "C_kwDOAAsO6NoAKGRkMmIxOTUzOWVhNGQ2MmExNTBjZjEzZDQ1OTQyZTU4YjZiNDRlNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T15:57:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T15:57:59Z"}, "message": "Auto merge of #109862 - klensy:llvm-dd, r=nikic\n\nllvm: replace some deprecated functions, add fixmes\n\nReplace some deprecated llvm functions, add FIXME's (for simpler future work), replace some rust custom functions with llvm ones.", "tree": {"sha": "a0b87e6829f2bb28b3eb825f5269d942aa59055d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b87e6829f2bb28b3eb825f5269d942aa59055d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2b19539ea4d62a150cf13d45942e58b6b44e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2b19539ea4d62a150cf13d45942e58b6b44e54", "html_url": "https://github.com/rust-lang/rust/commit/dd2b19539ea4d62a150cf13d45942e58b6b44e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2b19539ea4d62a150cf13d45942e58b6b44e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f87a63edcef5c8c06229ff13e0f64f427537378", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f87a63edcef5c8c06229ff13e0f64f427537378", "html_url": "https://github.com/rust-lang/rust/commit/4f87a63edcef5c8c06229ff13e0f64f427537378"}, {"sha": "fdfca765a71770d743981e71aab01625188328fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfca765a71770d743981e71aab01625188328fc", "html_url": "https://github.com/rust-lang/rust/commit/fdfca765a71770d743981e71aab01625188328fc"}], "stats": {"total": 201, "additions": 65, "deletions": 136}, "files": [{"sha": "e7668341eb6e728b0738e96ae110b200d638f8a4", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -381,7 +381,7 @@ impl<'tcx> AsmMethods<'tcx> for CodegenCx<'_, 'tcx> {\n         }\n \n         unsafe {\n-            llvm::LLVMRustAppendModuleInlineAsm(\n+            llvm::LLVMAppendModuleInlineAsm(\n                 self.llmod,\n                 template_str.as_ptr().cast(),\n                 template_str.len(),"}, {"sha": "7136f750f39d9ee0a207de8ff16482b2c643c88f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -904,9 +904,9 @@ unsafe fn embed_bitcode(\n         // We need custom section flags, so emit module-level inline assembly.\n         let section_flags = if cgcx.is_pe_coff { \"n\" } else { \"e\" };\n         let asm = create_section_with_flags_asm(\".llvmbc\", section_flags, bitcode);\n-        llvm::LLVMRustAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n+        llvm::LLVMAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n         let asm = create_section_with_flags_asm(\".llvmcmd\", section_flags, cmdline.as_bytes());\n-        llvm::LLVMRustAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n+        llvm::LLVMAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n     }\n }\n "}, {"sha": "6819a2af09da402482b99db9a7544b600c0a4b72", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -2,7 +2,7 @@ use crate::abi::FnAbiLlvmExt;\n use crate::attributes;\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n-use crate::llvm::{self, AtomicOrdering, AtomicRmwBinOp, BasicBlock};\n+use crate::llvm::{self, AtomicOrdering, AtomicRmwBinOp, BasicBlock, False, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -841,7 +841,15 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn intcast(&mut self, val: &'ll Value, dest_ty: &'ll Type, is_signed: bool) -> &'ll Value {\n-        unsafe { llvm::LLVMRustBuildIntCast(self.llbuilder, val, dest_ty, is_signed) }\n+        unsafe {\n+            llvm::LLVMBuildIntCast2(\n+                self.llbuilder,\n+                val,\n+                dest_ty,\n+                if is_signed { True } else { False },\n+                UNNAMED,\n+            )\n+        }\n     }\n \n     fn pointercast(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n@@ -1001,11 +1009,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n         let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCleanupPad(\n+            llvm::LLVMBuildCleanupPad(\n                 self.llbuilder,\n                 parent,\n-                args.len() as c_uint,\n                 args.as_ptr(),\n+                args.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n@@ -1014,19 +1022,19 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn cleanup_ret(&mut self, funclet: &Funclet<'ll>, unwind: Option<&'ll BasicBlock>) {\n         unsafe {\n-            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n+            llvm::LLVMBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n                 .expect(\"LLVM does not have support for cleanupret\");\n         }\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n         let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCatchPad(\n+            llvm::LLVMBuildCatchPad(\n                 self.llbuilder,\n                 parent,\n-                args.len() as c_uint,\n                 args.as_ptr(),\n+                args.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n@@ -1041,7 +1049,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     ) -> &'ll Value {\n         let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCatchSwitch(\n+            llvm::LLVMBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n@@ -1052,7 +1060,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let ret = ret.expect(\"LLVM does not have support for catchswitch\");\n         for handler in handlers {\n             unsafe {\n-                llvm::LLVMRustAddHandler(ret, handler);\n+                llvm::LLVMAddHandler(ret, handler);\n             }\n         }\n         ret\n@@ -1376,8 +1384,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n     }\n \n     pub fn catch_ret(&mut self, funclet: &Funclet<'ll>, unwind: &'ll BasicBlock) -> &'ll Value {\n-        let ret =\n-            unsafe { llvm::LLVMRustBuildCatchRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n+        let ret = unsafe { llvm::LLVMBuildCatchRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n         ret.expect(\"LLVM does not have support for catchret\")\n     }\n "}, {"sha": "940358acde9a2ad72cd982f43f1d62b17e930996", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -7,7 +7,6 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use cstr::cstr;\n-use libc::c_uint;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -486,10 +485,10 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n             // go into custom sections of the wasm executable.\n             if self.tcx.sess.target.is_like_wasm {\n                 if let Some(section) = attrs.link_section {\n-                    let section = llvm::LLVMMDStringInContext(\n+                    let section = llvm::LLVMMDStringInContext2(\n                         self.llcx,\n                         section.as_str().as_ptr().cast(),\n-                        section.as_str().len() as c_uint,\n+                        section.as_str().len(),\n                     );\n                     assert!(alloc.provenance().ptrs().is_empty());\n \n@@ -498,17 +497,15 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                     // as part of the interpreter execution).\n                     let bytes =\n                         alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len());\n-                    let alloc = llvm::LLVMMDStringInContext(\n-                        self.llcx,\n-                        bytes.as_ptr().cast(),\n-                        bytes.len() as c_uint,\n-                    );\n+                    let alloc =\n+                        llvm::LLVMMDStringInContext2(self.llcx, bytes.as_ptr().cast(), bytes.len());\n                     let data = [section, alloc];\n-                    let meta = llvm::LLVMMDNodeInContext(self.llcx, data.as_ptr(), 2);\n+                    let meta = llvm::LLVMMDNodeInContext2(self.llcx, data.as_ptr(), data.len());\n+                    let val = llvm::LLVMMetadataAsValue(self.llcx, meta);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n                         \"wasm.custom_sections\\0\".as_ptr().cast(),\n-                        meta,\n+                        val,\n                     );\n                 }\n             } else {"}, {"sha": "21a0a60b012a6f27eb2d7317d8824b236cb41052", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -864,29 +864,24 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n         );\n \n         if tcx.sess.opts.unstable_opts.profile {\n-            let cu_desc_metadata =\n-                llvm::LLVMRustMetadataAsValue(debug_context.llcontext, unit_metadata);\n             let default_gcda_path = &output_filenames.with_extension(\"gcda\");\n             let gcda_path =\n                 tcx.sess.opts.unstable_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n \n             let gcov_cu_info = [\n                 path_to_mdstring(debug_context.llcontext, &output_filenames.with_extension(\"gcno\")),\n                 path_to_mdstring(debug_context.llcontext, gcda_path),\n-                cu_desc_metadata,\n+                unit_metadata,\n             ];\n-            let gcov_metadata = llvm::LLVMMDNodeInContext(\n+            let gcov_metadata = llvm::LLVMMDNodeInContext2(\n                 debug_context.llcontext,\n                 gcov_cu_info.as_ptr(),\n-                gcov_cu_info.len() as c_uint,\n+                gcov_cu_info.len(),\n             );\n+            let val = llvm::LLVMMetadataAsValue(debug_context.llcontext, gcov_metadata);\n \n             let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n-            llvm::LLVMAddNamedMetadataOperand(\n-                debug_context.llmod,\n-                llvm_gcov_ident.as_ptr(),\n-                gcov_metadata,\n-            );\n+            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, llvm_gcov_ident.as_ptr(), val);\n         }\n \n         // Insert `llvm.ident` metadata on the wasm targets since that will\n@@ -907,15 +902,9 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n         return unit_metadata;\n     };\n \n-    fn path_to_mdstring<'ll>(llcx: &'ll llvm::Context, path: &Path) -> &'ll Value {\n+    fn path_to_mdstring<'ll>(llcx: &'ll llvm::Context, path: &Path) -> &'ll llvm::Metadata {\n         let path_str = path_to_c_string(path);\n-        unsafe {\n-            llvm::LLVMMDStringInContext(\n-                llcx,\n-                path_str.as_ptr(),\n-                path_str.as_bytes().len() as c_uint,\n-            )\n-        }\n+        unsafe { llvm::LLVMMDStringInContext2(llcx, path_str.as_ptr(), path_str.as_bytes().len()) }\n     }\n }\n "}, {"sha": "d56c414cf651e535107f97f6ed5c4a0102cc1ade", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -209,8 +209,7 @@ impl<'ll> DebugInfoBuilderMethods for Builder<'_, 'll, '_> {\n \n     fn set_dbg_loc(&mut self, dbg_loc: &'ll DILocation) {\n         unsafe {\n-            let dbg_loc_as_llval = llvm::LLVMRustMetadataAsValue(self.cx().llcx, dbg_loc);\n-            llvm::LLVMSetCurrentDebugLocation(self.llbuilder, dbg_loc_as_llval);\n+            llvm::LLVMSetCurrentDebugLocation2(self.llbuilder, dbg_loc);\n         }\n     }\n "}, {"sha": "09f3fe0216503ca67a5201002bc1fa1687b71c60", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -1018,7 +1018,7 @@ extern \"C\" {\n     pub fn LLVMSetDataLayout(M: &Module, Triple: *const c_char);\n \n     /// See Module::setModuleInlineAsm.\n-    pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n+    pub fn LLVMAppendModuleInlineAsm(M: &Module, Asm: *const c_char, Len: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: &Type) -> TypeKind;\n@@ -1065,7 +1065,7 @@ extern \"C\" {\n \n     // Operations on other types\n     pub fn LLVMVoidTypeInContext(C: &Context) -> &Type;\n-    pub fn LLVMRustMetadataTypeInContext(C: &Context) -> &Type;\n+    pub fn LLVMMetadataTypeInContext(C: &Context) -> &Type;\n \n     // Operations on all values\n     pub fn LLVMTypeOf(Val: &Value) -> &Type;\n@@ -1084,7 +1084,12 @@ extern \"C\" {\n     pub fn LLVMGetPoison(Ty: &Type) -> &Value;\n \n     // Operations on metadata\n+    // FIXME: deprecated, replace with LLVMMDStringInContext2\n     pub fn LLVMMDStringInContext(C: &Context, Str: *const c_char, SLen: c_uint) -> &Value;\n+\n+    pub fn LLVMMDStringInContext2(C: &Context, Str: *const c_char, SLen: size_t) -> &Metadata;\n+\n+    // FIXME: deprecated, replace with LLVMMDNodeInContext2\n     pub fn LLVMMDNodeInContext<'a>(\n         C: &'a Context,\n         Vals: *const &'a Value,\n@@ -1123,6 +1128,8 @@ extern \"C\" {\n         Packed: Bool,\n     ) -> &'a Value;\n \n+    // FIXME: replace with LLVMConstArray2 when bumped minimal version to llvm-17\n+    // https://github.com/llvm/llvm-project/commit/35276f16e5a2cae0dfb49c0fbf874d4d2f177acc\n     pub fn LLVMConstArray<'a>(\n         ElementTy: &'a Type,\n         ConstantVals: *const &'a Value,\n@@ -1262,7 +1269,7 @@ extern \"C\" {\n     pub fn LLVMDisposeBuilder<'a>(Builder: &'a mut Builder<'a>);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation<'a>(Builder: &Builder<'a>, L: &'a Value);\n+    pub fn LLVMSetCurrentDebugLocation2<'a>(Builder: &Builder<'a>, Loc: &'a Metadata);\n \n     // Terminators\n     pub fn LLVMBuildRetVoid<'a>(B: &Builder<'a>) -> &'a Value;\n@@ -1302,38 +1309,38 @@ extern \"C\" {\n     pub fn LLVMBuildResume<'a>(B: &Builder<'a>, Exn: &'a Value) -> &'a Value;\n     pub fn LLVMBuildUnreachable<'a>(B: &Builder<'a>) -> &'a Value;\n \n-    pub fn LLVMRustBuildCleanupPad<'a>(\n+    pub fn LLVMBuildCleanupPad<'a>(\n         B: &Builder<'a>,\n         ParentPad: Option<&'a Value>,\n-        ArgCnt: c_uint,\n         Args: *const &'a Value,\n+        NumArgs: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCleanupRet<'a>(\n+    pub fn LLVMBuildCleanupRet<'a>(\n         B: &Builder<'a>,\n         CleanupPad: &'a Value,\n-        UnwindBB: Option<&'a BasicBlock>,\n+        BB: Option<&'a BasicBlock>,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchPad<'a>(\n+    pub fn LLVMBuildCatchPad<'a>(\n         B: &Builder<'a>,\n         ParentPad: &'a Value,\n-        ArgCnt: c_uint,\n         Args: *const &'a Value,\n+        NumArgs: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchRet<'a>(\n+    pub fn LLVMBuildCatchRet<'a>(\n         B: &Builder<'a>,\n-        Pad: &'a Value,\n+        CatchPad: &'a Value,\n         BB: &'a BasicBlock,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchSwitch<'a>(\n+    pub fn LLVMBuildCatchSwitch<'a>(\n         Builder: &Builder<'a>,\n         ParentPad: Option<&'a Value>,\n-        BB: Option<&'a BasicBlock>,\n+        UnwindBB: Option<&'a BasicBlock>,\n         NumHandlers: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustAddHandler<'a>(CatchSwitch: &'a Value, Handler: &'a BasicBlock);\n+    pub fn LLVMAddHandler<'a>(CatchSwitch: &'a Value, Dest: &'a BasicBlock);\n     pub fn LLVMSetPersonalityFn<'a>(Func: &'a Value, Pers: &'a Value);\n \n     // Add a case to the switch instruction\n@@ -1627,11 +1634,12 @@ extern \"C\" {\n         DestTy: &'a Type,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMRustBuildIntCast<'a>(\n+    pub fn LLVMBuildIntCast2<'a>(\n         B: &Builder<'a>,\n         Val: &'a Value,\n         DestTy: &'a Type,\n-        IsSigned: bool,\n+        IsSigned: Bool,\n+        Name: *const c_char,\n     ) -> &'a Value;\n \n     // Comparisons\n@@ -1920,7 +1928,7 @@ extern \"C\" {\n     );\n     pub fn LLVMRustHasModuleFlag(M: &Module, name: *const c_char, len: size_t) -> bool;\n \n-    pub fn LLVMRustMetadataAsValue<'a>(C: &'a Context, MD: &'a Metadata) -> &'a Value;\n+    pub fn LLVMMetadataAsValue<'a>(C: &'a Context, MD: &'a Metadata) -> &'a Value;\n \n     pub fn LLVMRustDIBuilderCreate(M: &Module) -> &mut DIBuilder<'_>;\n "}, {"sha": "bef4647f20789c72abf07c7d9f1537b16d86c88e", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -53,7 +53,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n     }\n \n     pub(crate) fn type_metadata(&self) -> &'ll Type {\n-        unsafe { llvm::LLVMRustMetadataTypeInContext(self.llcx) }\n+        unsafe { llvm::LLVMMetadataTypeInContext(self.llcx) }\n     }\n \n     ///x Creates an integer type with the given number of bits, e.g., i24"}, {"sha": "cadb6b1e23fe9d2597a7436ec5729da7101d2fdb", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 74, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dd2b19539ea4d62a150cf13d45942e58b6b44e54/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=dd2b19539ea4d62a150cf13d45942e58b6b44e54", "patch": "@@ -152,10 +152,6 @@ LLVMRustInsertPrivateGlobal(LLVMModuleRef M, LLVMTypeRef Ty) {\n                                  nullptr));\n }\n \n-extern \"C\" LLVMTypeRef LLVMRustMetadataTypeInContext(LLVMContextRef C) {\n-  return wrap(Type::getMetadataTy(*unwrap(C)));\n-}\n-\n static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   switch (Kind) {\n   case AlwaysInline:\n@@ -480,11 +476,6 @@ extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,\n #endif\n }\n \n-extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm,\n-                                              size_t AsmLen) {\n-  unwrap(M)->appendModuleInlineAsm(StringRef(Asm, AsmLen));\n-}\n-\n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n template <typename DIT> DIT *unwrapDIPtr(LLVMMetadataRef Ref) {\n@@ -753,10 +744,6 @@ extern \"C\" bool LLVMRustHasModuleFlag(LLVMModuleRef M, const char *Name,\n   return unwrap(M)->getModuleFlag(StringRef(Name, Len)) != nullptr;\n }\n \n-extern \"C\" LLVMValueRef LLVMRustMetadataAsValue(LLVMContextRef C, LLVMMetadataRef MD) {\n-  return wrap(MetadataAsValue::get(*unwrap(C), unwrap(MD)));\n-}\n-\n extern \"C\" void LLVMRustGlobalAddMetadata(\n     LLVMValueRef Global, unsigned Kind, LLVMMetadataRef MD) {\n   unwrap<GlobalObject>(Global)->addMetadata(Kind, *unwrap<MDNode>(MD));\n@@ -1153,6 +1140,8 @@ extern \"C\" void LLVMRustWriteValueToString(LLVMValueRef V,\n }\n \n // LLVMArrayType function does not support 64-bit ElementCount\n+// FIXME: replace with LLVMArrayType2 when bumped minimal version to llvm-17\n+// https://github.com/llvm/llvm-project/commit/35276f16e5a2cae0dfb49c0fbf874d4d2f177acc\n extern \"C\" LLVMTypeRef LLVMRustArrayType(LLVMTypeRef ElementTy,\n                                          uint64_t ElementCount) {\n   return wrap(ArrayType::get(unwrap(ElementTy), ElementCount));\n@@ -1408,61 +1397,6 @@ extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n   return true;\n }\n \n-extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,\n-                                                LLVMValueRef ParentPad,\n-                                                unsigned ArgCount,\n-                                                LLVMValueRef *LLArgs,\n-                                                const char *Name) {\n-  Value **Args = unwrap(LLArgs);\n-  if (ParentPad == nullptr) {\n-    Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n-    ParentPad = wrap(Constant::getNullValue(Ty));\n-  }\n-  return wrap(unwrap(B)->CreateCleanupPad(\n-      unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCleanupRet(LLVMBuilderRef B,\n-                                                LLVMValueRef CleanupPad,\n-                                                LLVMBasicBlockRef UnwindBB) {\n-  CleanupPadInst *Inst = cast<CleanupPadInst>(unwrap(CleanupPad));\n-  return wrap(unwrap(B)->CreateCleanupRet(Inst, unwrap(UnwindBB)));\n-}\n-\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildCatchPad(LLVMBuilderRef B, LLVMValueRef ParentPad,\n-                      unsigned ArgCount, LLVMValueRef *LLArgs, const char *Name) {\n-  Value **Args = unwrap(LLArgs);\n-  return wrap(unwrap(B)->CreateCatchPad(\n-      unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCatchRet(LLVMBuilderRef B,\n-                                              LLVMValueRef Pad,\n-                                              LLVMBasicBlockRef BB) {\n-  return wrap(unwrap(B)->CreateCatchRet(cast<CatchPadInst>(unwrap(Pad)),\n-                                              unwrap(BB)));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCatchSwitch(LLVMBuilderRef B,\n-                                                 LLVMValueRef ParentPad,\n-                                                 LLVMBasicBlockRef BB,\n-                                                 unsigned NumHandlers,\n-                                                 const char *Name) {\n-  if (ParentPad == nullptr) {\n-    Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n-    ParentPad = wrap(Constant::getNullValue(Ty));\n-  }\n-  return wrap(unwrap(B)->CreateCatchSwitch(unwrap(ParentPad), unwrap(BB),\n-                                                 NumHandlers, Name));\n-}\n-\n-extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n-                                   LLVMBasicBlockRef Handler) {\n-  Value *CatchSwitch = unwrap(CatchSwitchRef);\n-  cast<CatchSwitchInst>(CatchSwitch)->addHandler(unwrap(Handler));\n-}\n-\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,\n                                                            unsigned NumInputs) {\n@@ -1627,6 +1561,7 @@ extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V,\n   LLVMSetLinkage(V, fromRust(RustLinkage));\n }\n \n+// FIXME: replace with LLVMConstInBoundsGEP2 when bumped minimal version to llvm-14\n extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n                                                   LLVMValueRef ConstantVal,\n                                                   LLVMValueRef *ConstantIndices,\n@@ -1704,12 +1639,6 @@ extern \"C\" LLVMRustVisibility LLVMRustGetVisibility(LLVMValueRef V) {\n   return toRust(LLVMGetVisibility(V));\n }\n \n-// Oh hey, a binding that makes sense for once? (because LLVM\u2019s own do not)\n-extern \"C\" LLVMValueRef LLVMRustBuildIntCast(LLVMBuilderRef B, LLVMValueRef Val,\n-                                             LLVMTypeRef DestTy, bool isSigned) {\n-  return wrap(unwrap(B)->CreateIntCast(unwrap(Val), unwrap(DestTy), isSigned, \"\"));\n-}\n-\n extern \"C\" void LLVMRustSetVisibility(LLVMValueRef V,\n                                       LLVMRustVisibility RustVisibility) {\n   LLVMSetVisibility(V, fromRust(RustVisibility));"}]}