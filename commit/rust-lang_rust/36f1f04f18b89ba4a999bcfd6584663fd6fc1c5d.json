{"sha": "36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjFmMDRmMThiODliYTRhOTk5YmNmZDY1ODQ2NjNmZDZmYzFjNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T19:39:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T19:39:03Z"}, "message": "Auto merge of #82122 - bstrie:dep4real, r=dtolnay\n\nDeprecate `intrinsics::drop_in_place` and `collections::Bound`, which accidentally weren't deprecated\n\nFixes #82080.\n\nI've taken the liberty of updating the `since` values to 1.52, since an unobservable deprecation isn't much of a deprecation (even the detailed release notes never bothered to mention these deprecations).\n\nAs mentioned in the issue I'm *pretty* sure that using a type alias for `Bound` is semantically equivalent to the re-export; [the reference implies](https://doc.rust-lang.org/reference/items/type-aliases.html) that type aliases only observably differ from types when used on unit structs or tuple structs, whereas `Bound` is an enum.", "tree": {"sha": "b459b40c8e394c6495440e7b5a7595c99e951ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b459b40c8e394c6495440e7b5a7595c99e951ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "html_url": "https://github.com/rust-lang/rust/commit/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4adc21c4fa245994b4936df5b4f7d94ca633c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4adc21c4fa245994b4936df5b4f7d94ca633c5d", "html_url": "https://github.com/rust-lang/rust/commit/b4adc21c4fa245994b4936df5b4f7d94ca633c5d"}, {"sha": "49aa79ec11fe40c67e160d9663addb7a0b7151f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/49aa79ec11fe40c67e160d9663addb7a0b7151f9", "html_url": "https://github.com/rust-lang/rust/commit/49aa79ec11fe40c67e160d9663addb7a0b7151f9"}], "stats": {"total": 131, "additions": 68, "deletions": 63}, "files": [{"sha": "b5371d6b69dbb075d4585b756a9121d74044d35f", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -65,9 +65,13 @@ use crate::sync::atomic::{self, AtomicBool, AtomicI32, AtomicIsize, AtomicU32, O\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(\n     reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n-    since = \"1.18.0\"\n+    since = \"1.52.0\"\n )]\n-pub use crate::ptr::drop_in_place;\n+#[inline]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    // SAFETY: see `ptr::drop_in_place`\n+    unsafe { crate::ptr::drop_in_place(to_drop) }\n+}\n \n extern \"rust-intrinsic\" {\n     // N.B., these intrinsics take raw pointers because they mutate aliased"}, {"sha": "7f8f9c991fe409cf336f53ecd82685c0b903e78d", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -401,9 +401,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n+#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.52.0\")]\n #[doc(hidden)]\n-pub use crate::ops::Bound;\n+pub type Bound<T> = crate::ops::Bound<T>;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::collections::{binary_heap, btree_map, btree_set};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f58117f44d83aa592fc8ae5401d0c3ac7aac4657", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(start)]\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDtor> - shim(Some(StructWithDtor)) @@ drop_in_place_intrinsic-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<StructWithDtor> - shim(Some(StructWithDtor)) @@ drop_in_place_intrinsic-cgu.0[Internal]\n struct StructWithDtor(u32);\n \n impl Drop for StructWithDtor {\n@@ -16,7 +16,7 @@ impl Drop for StructWithDtor {\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<[StructWithDtor; 2]> - shim(Some([StructWithDtor; 2])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<[StructWithDtor; 2]> - shim(Some([StructWithDtor; 2])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n     let x = [StructWithDtor(0), StructWithDtor(1)];\n \n     drop_slice_in_place(&x);\n@@ -30,7 +30,7 @@ fn drop_slice_in_place(x: &[StructWithDtor]) {\n         // This is the interesting thing in this test case: Normally we would\n         // not have drop-glue for the unsized [StructWithDtor]. This has to be\n         // generated though when the drop_in_place() intrinsic is used.\n-        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<[StructWithDtor]> - shim(Some([StructWithDtor])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n-        ::std::intrinsics::drop_in_place(x as *const _ as *mut [StructWithDtor]);\n+        //~ MONO_ITEM fn std::ptr::drop_in_place::<[StructWithDtor]> - shim(Some([StructWithDtor])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n+        ::std::ptr::drop_in_place(x as *const _ as *mut [StructWithDtor]);\n     }\n }"}, {"sha": "948098b0cbc77a41f9597d21fdb35c2b72c62d44", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -37,7 +37,7 @@ enum EnumNoDrop<T1, T2> {\n struct NonGenericNoDrop(i32);\n \n struct NonGenericWithDrop(i32);\n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<NonGenericWithDrop> - shim(Some(NonGenericWithDrop)) @@ generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<NonGenericWithDrop> - shim(Some(NonGenericWithDrop)) @@ generic_drop_glue-cgu.0[Internal]\n \n impl Drop for NonGenericWithDrop {\n     //~ MONO_ITEM fn <NonGenericWithDrop as std::ops::Drop>::drop\n@@ -47,11 +47,11 @@ impl Drop for NonGenericWithDrop {\n //~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop<i8, char>> - shim(Some(StructWithDrop<i8, char>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<StructWithDrop<i8, char>> - shim(Some(StructWithDrop<i8, char>)) @@ generic_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <StructWithDrop<i8, char> as std::ops::Drop>::drop\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop<&str, NonGenericNoDrop>> - shim(Some(StructWithDrop<&str, NonGenericNoDrop>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<StructWithDrop<&str, NonGenericNoDrop>> - shim(Some(StructWithDrop<&str, NonGenericNoDrop>)) @@ generic_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <StructWithDrop<&str, NonGenericNoDrop> as std::ops::Drop>::drop\n     let _ = StructWithDrop { x: \"&str\", y: NonGenericNoDrop(0) }.y;\n \n@@ -60,17 +60,17 @@ fn start(_: isize, _: *const *const u8) -> isize {\n \n     // This is supposed to generate drop-glue because it contains a field that\n     // needs to be dropped.\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructNoDrop<NonGenericWithDrop, f64>> - shim(Some(StructNoDrop<NonGenericWithDrop, f64>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<StructNoDrop<NonGenericWithDrop, f64>> - shim(Some(StructNoDrop<NonGenericWithDrop, f64>)) @@ generic_drop_glue-cgu.0[Internal]\n     let _ = StructNoDrop { x: NonGenericWithDrop(0), y: 0f64 }.y;\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop<i32, i64>> - shim(Some(EnumWithDrop<i32, i64>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<EnumWithDrop<i32, i64>> - shim(Some(EnumWithDrop<i32, i64>)) @@ generic_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <EnumWithDrop<i32, i64> as std::ops::Drop>::drop\n     let _ = match EnumWithDrop::A::<i32, i64>(0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as i32\n     };\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop<f64, f32>> - shim(Some(EnumWithDrop<f64, f32>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<EnumWithDrop<f64, f32>> - shim(Some(EnumWithDrop<f64, f32>)) @@ generic_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <EnumWithDrop<f64, f32> as std::ops::Drop>::drop\n     let _ = match EnumWithDrop::B::<f64, f32>(1.0) {\n         EnumWithDrop::A(x) => x,"}, {"sha": "919c43738fb725f25db186fbf21ba3e1424aeec2", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -23,13 +23,13 @@ impl<T> Trait for Struct<T> {\n fn start(_: isize, _: *const *const u8) -> isize {\n     let s1 = Struct { _a: 0u32 };\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct<u32>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<Struct<u32>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n     //~ MONO_ITEM fn <Struct<u32> as Trait>::foo\n     //~ MONO_ITEM fn <Struct<u32> as Trait>::bar\n     let _ = &s1 as &Trait;\n \n     let s1 = Struct { _a: 0u64 };\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct<u64>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<Struct<u64>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n     //~ MONO_ITEM fn <Struct<u64> as Trait>::foo\n     //~ MONO_ITEM fn <Struct<u64> as Trait>::bar\n     let _ = &s1 as &Trait;"}, {"sha": "720421d3e0f716a663f84a759602527886d0cdd8", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -5,7 +5,7 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop> - shim(Some(StructWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<StructWithDrop> - shim(Some(StructWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n struct StructWithDrop {\n     x: i32\n }\n@@ -19,7 +19,7 @@ struct StructNoDrop {\n     x: i32\n }\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop> - shim(Some(EnumWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<EnumWithDrop> - shim(Some(EnumWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n enum EnumWithDrop {\n     A(i32)\n }"}, {"sha": "2ec572b4373e9d9bc1e04da30876fb81565bcb16", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -5,11 +5,11 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Root> - shim(Some(Root)) @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Root> - shim(Some(Root)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Root(Intermediate);\n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Intermediate> - shim(Some(Intermediate)) @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Intermediate> - shim(Some(Intermediate)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Intermediate(Leaf);\n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Leaf> - shim(Some(Leaf)) @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Leaf> - shim(Some(Leaf)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Leaf;\n \n impl Drop for Leaf {\n@@ -30,15 +30,15 @@ impl<T> Drop for LeafGen<T> {\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = Root(Intermediate(Leaf));\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<RootGen<u32>> - shim(Some(RootGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<IntermediateGen<u32>> - shim(Some(IntermediateGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LeafGen<u32>> - shim(Some(LeafGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<RootGen<u32>> - shim(Some(RootGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<IntermediateGen<u32>> - shim(Some(IntermediateGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<LeafGen<u32>> - shim(Some(LeafGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <LeafGen<u32> as std::ops::Drop>::drop\n     let _ = RootGen(IntermediateGen(LeafGen(0u32)));\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<RootGen<i16>> - shim(Some(RootGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<IntermediateGen<i16>> - shim(Some(IntermediateGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LeafGen<i16>> - shim(Some(LeafGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<RootGen<i16>> - shim(Some(RootGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<IntermediateGen<i16>> - shim(Some(IntermediateGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<LeafGen<i16>> - shim(Some(LeafGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n     //~ MONO_ITEM fn <LeafGen<i16> as std::ops::Drop>::drop\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n "}, {"sha": "232570779c84c581c33741d256a5e08250a726b6", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -5,7 +5,7 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Dropped> - shim(Some(Dropped)) @@ tuple_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Dropped> - shim(Some(Dropped)) @@ tuple_drop_glue-cgu.0[Internal]\n struct Dropped;\n \n impl Drop for Dropped {\n@@ -16,11 +16,11 @@ impl Drop for Dropped {\n //~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(u32, Dropped)> - shim(Some((u32, Dropped))) @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<(u32, Dropped)> - shim(Some((u32, Dropped))) @@ tuple_drop_glue-cgu.0[Internal]\n     let x = (0u32, Dropped);\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(i16, (Dropped, bool))> - shim(Some((i16, (Dropped, bool)))) @@ tuple_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(Dropped, bool)> - shim(Some((Dropped, bool)))  @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<(i16, (Dropped, bool))> - shim(Some((i16, (Dropped, bool)))) @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<(Dropped, bool)> - shim(Some((Dropped, bool)))  @@ tuple_drop_glue-cgu.0[Internal]\n     let x = (0i16, (Dropped, true));\n \n     0"}, {"sha": "1b963a24ce8be616d3227d81b99dbe1ede94405f", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -48,13 +48,13 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Wrapper<U>> for Wrapper<T>\n fn start(_: isize, _: *const *const u8) -> isize {\n     // simple case\n     let bool_sized = &true;\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<bool> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<bool> - shim(None) @@ unsizing-cgu.0[Internal]\n     //~ MONO_ITEM fn <bool as Trait>::foo\n     let _bool_unsized = bool_sized as &Trait;\n \n     let char_sized = &'a';\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<char> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<char> - shim(None) @@ unsizing-cgu.0[Internal]\n     //~ MONO_ITEM fn <char as Trait>::foo\n     let _char_unsized = char_sized as &Trait;\n \n@@ -64,13 +64,13 @@ fn start(_: isize, _: *const *const u8) -> isize {\n         _b: 2,\n         _c: 3.0f64\n     };\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<f64> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<f64> - shim(None) @@ unsizing-cgu.0[Internal]\n     //~ MONO_ITEM fn <f64 as Trait>::foo\n     let _struct_unsized = struct_sized as &Struct<Trait>;\n \n     // custom coercion\n     let wrapper_sized = Wrapper(&0u32);\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<u32> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<u32> - shim(None) @@ unsizing-cgu.0[Internal]\n     //~ MONO_ITEM fn <u32 as Trait>::foo\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n "}, {"sha": "6232b9edf82c7d199beacd6d12d7f4bd4c1c6804", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -12,13 +12,13 @@\n // aux-build:cgu_extern_drop_glue.rs\n extern crate cgu_extern_drop_glue;\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<cgu_extern_drop_glue::Struct> - shim(Some(cgu_extern_drop_glue::Struct)) @@ extern_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<cgu_extern_drop_glue::Struct> - shim(Some(cgu_extern_drop_glue::Struct)) @@ extern_drop_glue-fallback.cgu[External]\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n //~ MONO_ITEM fn user @@ extern_drop_glue[External]\n pub fn user() {\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LocalStruct> - shim(Some(LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<LocalStruct> - shim(Some(LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n     let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n }\n \n@@ -29,7 +29,7 @@ pub mod mod1 {\n \n     //~ MONO_ITEM fn mod1::user @@ extern_drop_glue-mod1[External]\n     pub fn user() {\n-        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<mod1::LocalStruct> - shim(Some(mod1::LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n+        //~ MONO_ITEM fn std::ptr::drop_in_place::<mod1::LocalStruct> - shim(Some(mod1::LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n     }\n }"}, {"sha": "3017e4f9494c729add91ebf5280d1aef6dc9c2db", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -8,7 +8,7 @@\n #![allow(dead_code)]\n #![crate_type = \"rlib\"]\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct> - shim(Some(Struct)) @@ local_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Struct> - shim(Some(Struct)) @@ local_drop_glue-fallback.cgu[External]\n struct Struct {\n     _a: u32,\n }\n@@ -18,7 +18,7 @@ impl Drop for Struct {\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Outer> - shim(Some(Outer)) @@ local_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::ptr::drop_in_place::<Outer> - shim(Some(Outer)) @@ local_drop_glue-fallback.cgu[External]\n struct Outer {\n     _a: Struct,\n }\n@@ -31,10 +31,10 @@ pub fn user() {\n pub mod mod1 {\n     use super::Struct;\n \n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<mod1::Struct2> - shim(Some(mod1::Struct2)) @@ local_drop_glue-fallback.cgu[External]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<mod1::Struct2> - shim(Some(mod1::Struct2)) @@ local_drop_glue-fallback.cgu[External]\n     struct Struct2 {\n         _a: Struct,\n-        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(u32, Struct)> - shim(Some((u32, Struct))) @@ local_drop_glue-fallback.cgu[Internal]\n+        //~ MONO_ITEM fn std::ptr::drop_in_place::<(u32, Struct)> - shim(Some((u32, Struct))) @@ local_drop_glue-fallback.cgu[Internal]\n         _b: (u32, Struct),\n     }\n "}, {"sha": "8028c4f5f0ba16518b65f2661a97dffe5ec0ae85", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -66,7 +66,7 @@ mod mod1 {\n //~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<u32> - shim(None) @@ vtable_through_const[Internal]\n+    //~ MONO_ITEM fn std::ptr::drop_in_place::<u32> - shim(None) @@ vtable_through_const[Internal]\n \n     // Since Trait1::do_something() is instantiated via its default implementation,\n     // it is considered a generic and is instantiated here only because it is"}, {"sha": "b35d5c83552f29e405c27a5822641e81483e5a9b", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -21,7 +21,7 @@ pub fn droppy() {\n // regular function exit. We used to have problems with quadratic growths of drop calls in such\n // functions.\n // FIXME(eddyb) the `void @` forces a match on the instruction, instead of the\n-// comment, that's `; call core::intrinsics::drop_in_place::<drop::SomeUniqueName>`\n+// comment, that's `; call core::ptr::drop_in_place::<drop::SomeUniqueName>`\n // for the `v0` mangling, should switch to matching on that once `legacy` is gone.\n // CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName"}, {"sha": "9494c4c64184fa70a0b3e535ba8a8e7801c8c182", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -11,7 +11,7 @@\n       scope 1 {\n       }\n       scope 2 {\n-+         scope 3 (inlined drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40\n++         scope 3 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40\n +             let mut _6: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n +             let mut _7: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n +         }\n@@ -21,21 +21,21 @@\n           StorageLive(_3);                 // scope 0 at $DIR/inline-shims.rs:11:5: 11:42\n           StorageLive(_4);                 // scope 1 at $DIR/inline-shims.rs:11:38: 11:39\n           _4 = _1;                         // scope 1 at $DIR/inline-shims.rs:11:38: 11:39\n-          _3 = drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:11:14: 11:40\n+          _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:11:14: 11:40\n                                            // mir::Constant\n                                            // + span: $DIR/inline-shims.rs:11:14: 11:37\n-                                           // + literal: Const { ty: unsafe fn(*mut std::vec::Vec<A>) {std::intrinsics::drop_in_place::<std::vec::Vec<A>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(*mut std::vec::Vec<A>) {std::ptr::drop_in_place::<std::vec::Vec<A>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_4);                 // scope 1 at $DIR/inline-shims.rs:11:39: 11:40\n           StorageDead(_3);                 // scope 0 at $DIR/inline-shims.rs:11:41: 11:42\n           StorageLive(_5);                 // scope 2 at $DIR/inline-shims.rs:12:38: 12:39\n           _5 = _2;                         // scope 2 at $DIR/inline-shims.rs:12:38: 12:39\n--         _0 = drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n+-         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n--                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::intrinsics::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::ptr::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40"}, {"sha": "aadc1db0e0d3afd93ea32bf074e4b4fdeaf307e5", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `drop_in_place` after SimplifyCfg-make_shim\n+// MIR for `std::ptr::drop_in_place` after SimplifyCfg-make_shim\n \n-fn drop_in_place(_1: *mut Test) -> () {\n+fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut Test;               // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "54ca9dc6682bcd3e5771190f4835f2d9cefe0dab", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.32bit.mir?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `drop_in_place` before AddMovesForPackedDrops\n+// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n \n-fn drop_in_place(_1: *mut [String]) -> () {\n+fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "54ca9dc6682bcd3e5771190f4835f2d9cefe0dab", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `drop_in_place` before AddMovesForPackedDrops\n+// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n \n-fn drop_in_place(_1: *mut [String]) -> () {\n+fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "97c83010e22d08218be4b039fc0d7186bf202535", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `drop_in_place` before AddMovesForPackedDrops\n+// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n \n-fn drop_in_place(_1: *mut Vec<i32>) -> () {\n+fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "97c83010e22d08218be4b039fc0d7186bf202535", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `drop_in_place` before AddMovesForPackedDrops\n+// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n \n-fn drop_in_place(_1: *mut Vec<i32>) -> () {\n+fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "f79dc454a83a08355f19a64adf35e617f32241d6", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -5,7 +5,7 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | calling non-const function `<Vec<i32> as Drop>::drop`\n-   | inside `drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    | \n   ::: $DIR/drop.rs:18:1\n    |"}, {"sha": "d749ee00c22bfce2f75eebba33f06d5e8e044111", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,10 +1,10 @@\n-error: reached the recursion limit while instantiating `drop_in_place::<S<fn(fn(fn(fn(fn...)))))))))))))))))))))))))))))>))`\n+error: reached the recursion limit while instantiating `std::ptr::drop_in_place::<S<fn(f...)))))))))))))))))))))))))))))>))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: `drop_in_place` defined here\n+note: `std::ptr::drop_in_place` defined here\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {"}, {"sha": "8570cd724b2f0c78eeff3304d0cd5ea6b50f453b", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -27,7 +27,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n-use std::collections::Bound;\n+use std::ops::Bound;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for matches with a single arm where an `if let`"}]}