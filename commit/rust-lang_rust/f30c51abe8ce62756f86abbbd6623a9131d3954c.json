{"sha": "f30c51abe8ce62756f86abbbd6623a9131d3954c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMGM1MWFiZThjZTYyNzU2Zjg2YWJiYmQ2NjIzYTkxMzFkMzk1NGM=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-06T20:35:21Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-06T20:35:21Z"}, "message": "Pulling out constant.", "tree": {"sha": "9dad7427e4d972461840277cab91bbfef81e6d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dad7427e4d972461840277cab91bbfef81e6d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30c51abe8ce62756f86abbbd6623a9131d3954c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElfpt1fswGixBWxap34UWHa4P82sFAmAe/Z0ACgkQ34UWHa4P\n82sj4hAAmlWjhbmqU1zb/2aIDXJRMGAcIuQSMbj2S9XgniKaXR6keoatgDXpGpHh\nNIEBTTiSttxleEvZi0alq4QAiRKyAcLVvE9R6wULwGPEyCcSTFH1/XTe8rgdN+vG\nRO2pl0H3KUw9DOGTPTjsdewHpHH2axMXyhVA15q/m2CtDz9Qws4drUB8EUQKBCYr\nGJKQiWrJ1PNZxRicq2lBMlbRIgOVLVHad6xM8aOyhneFUFrVS4Gax3urJlRJwGyw\nqoRrXZav8v6miJVhw4oxYmVVk//dFj7FJKtQsTIsClVy5VKdDXypeCtZGPgf9TND\npzQk3C2dFRYdE5Gaf4AYXW0qRvpVcpPrsP4zdS3XOWH48VrH/pFDIXXipZYgmNbE\n0c7RJx89YbAUEamahXrYvZ+hBmPo5Dn3fA6jtfpUphD6JrQ2Sx2nZ/wE8+KdcOJ9\nZf9sC9pH1SSvPcCcIK2EkpzmjLmvz9rpkWeILEMDd/xP68f6NCrh00NPesPIcchf\npzFKB0eEZuxGZTpXcFCoHkOAYpKg6zX4KP//fc3rI7Teb9DbDMSST38keytkf3d5\nQrsTWf4e0BJBKhcMq889ONUHKdP86ouKGm9RrQktXEgbgAmGeiykPRUXKHcn9rl+\nqVJzF/R0HMWfFvngW8lixZDLIwVkySlRhYkk1/mWNNx0CEerDro=\n=v8t0\n-----END PGP SIGNATURE-----", "payload": "tree 9dad7427e4d972461840277cab91bbfef81e6d26\nparent f165f49d228d2582d2dbfd588c2729cfc9585eb0\nauthor Giles Cope <gilescope@gmail.com> 1612643721 +0000\ncommitter Giles Cope <gilescope@gmail.com> 1612643721 +0000\n\nPulling out constant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30c51abe8ce62756f86abbbd6623a9131d3954c", "html_url": "https://github.com/rust-lang/rust/commit/f30c51abe8ce62756f86abbbd6623a9131d3954c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30c51abe8ce62756f86abbbd6623a9131d3954c/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f165f49d228d2582d2dbfd588c2729cfc9585eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f165f49d228d2582d2dbfd588c2729cfc9585eb0", "html_url": "https://github.com/rust-lang/rust/commit/f165f49d228d2582d2dbfd588c2729cfc9585eb0"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "4032e7770772e337f59b087f956693dc1d498eea", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f30c51abe8ce62756f86abbbd6623a9131d3954c/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30c51abe8ce62756f86abbbd6623a9131d3954c/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=f30c51abe8ce62756f86abbbd6623a9131d3954c", "patch": "@@ -7,6 +7,9 @@ use crate::unicode::{self, conversions};\n \n use super::*;\n \n+/// If 6th bit set ascii is upper case.\n+const ASCII_CASE_MASK: u8 = 0b10_0000u8;\n+\n #[lang = \"char\"]\n impl char {\n     /// The highest valid code point a `char` can have.\n@@ -1090,8 +1093,7 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n-        // 6th bit dictates ascii case.\n-        if self.is_ascii_lowercase() { ((*self as u8) & !0b10_0000u8) as char } else { *self }\n+        if self.is_ascii_lowercase() { ((*self as u8) & !ASCII_CASE_MASK) as char } else { *self }\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -1119,8 +1121,7 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n-        // 6th bit dictates ascii case.\n-        if self.is_ascii_uppercase() { ((*self as u8) | 0b10_0000u8) as char } else { *self }\n+        if self.is_ascii_uppercase() { ((*self as u8) | ASCII_CASE_MASK) as char } else { *self }\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}]}