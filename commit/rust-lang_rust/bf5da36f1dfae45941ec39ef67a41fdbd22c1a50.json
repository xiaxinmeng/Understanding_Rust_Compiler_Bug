{"sha": "bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNWRhMzZmMWRmYWU0NTk0MWVjMzllZjY3YTQxZmRiZDIyYzFhNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-06T20:44:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-06T20:44:51Z"}, "message": "Auto merge of #32778 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 12 pull requests\n\n- Successful merges: #31762, #32538, #32634, #32668, #32679, #32691, #32724, #32727, #32744, #32761, #32766, #32774\n- Failed merges:", "tree": {"sha": "c019fe043d842df6d5e19c131d304cb541f7e7a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c019fe043d842df6d5e19c131d304cb541f7e7a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "html_url": "https://github.com/rust-lang/rust/commit/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655", "url": "https://api.github.com/repos/rust-lang/rust/commits/943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655", "html_url": "https://github.com/rust-lang/rust/commit/943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655"}, {"sha": "862ae9aa75b073f4d753aa8275fb139ab9729d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/862ae9aa75b073f4d753aa8275fb139ab9729d74", "html_url": "https://github.com/rust-lang/rust/commit/862ae9aa75b073f4d753aa8275fb139ab9729d74"}], "stats": {"total": 148, "additions": 76, "deletions": 72}, "files": [{"sha": "8f1a0b50245007e3afcb559530139fdeaa242d4a", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -127,9 +127,7 @@ thread may outlive the scope of `x`, leading to a dangling pointer.\n \n To fix this, we use a `move` closure as mentioned in the error message. `move`\n closures are explained in depth [here](closures.html#move-closures); basically\n-they move variables from their environment into themselves. This means that `x`\n-is now owned by the closure, and cannot be used in `main()` after the call to\n-`spawn()`.\n+they move variables from their environment into themselves.\n \n ```rust\n use std::thread;\n@@ -164,7 +162,7 @@ The same [ownership system](ownership.html) that helps prevent using pointers\n incorrectly also helps rule out data races, one of the worst kinds of\n concurrency bugs.\n \n-As an example, here is a Rust program that would have a data race in many\n+As an example, here is a Rust program that could have a data race in many\n languages. It will not compile:\n \n ```ignore\n@@ -197,6 +195,11 @@ thread, and the thread takes ownership of the reference, we'd have three owners!\n `data` gets moved out of `main` in the first call to `spawn()`, so subsequent\n calls in the loop cannot use this variable.\n \n+Note that this specific example will not cause a data race since different array\n+indices are being accessed. But this can't be determined at compile time, and in\n+a similar situation where `i` is a constant or is random, you would have a data\n+race.\n+\n So, we need some type that lets us have more than one owning reference to a\n value. Usually, we'd use `Rc<T>` for this, which is a reference counted type\n that provides shared ownership. It has some runtime bookkeeping that keeps track"}, {"sha": "b3ccefe0a6b43c912dec430b693468bcebf1523b", "filename": "src/doc/book/crates-and-modules.md", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcrates-and-modules.md?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -118,7 +118,7 @@ build  deps  examples  libphrases-a7448e02a0468eaa.rlib  native\n `libphrases-hash.rlib` is the compiled crate. Before we see how to use this\n crate from another crate, let\u2019s break it up into multiple files.\n \n-# Multiple file crates\n+# Multiple File Crates\n \n If each crate were just one file, these files would get very large. It\u2019s often\n easier to split up crates into multiple files, and Rust supports this in two\n@@ -190,13 +190,19 @@ mod farewells;\n ```\n \n Again, these declarations tell Rust to look for either\n-`src/english/greetings.rs` and `src/japanese/greetings.rs` or\n-`src/english/farewells/mod.rs` and `src/japanese/farewells/mod.rs`. Because\n-these sub-modules don\u2019t have their own sub-modules, we\u2019ve chosen to make them\n-`src/english/greetings.rs` and `src/japanese/farewells.rs`. Whew!\n-\n-The contents of `src/english/greetings.rs` and `src/japanese/farewells.rs` are\n-both empty at the moment. Let\u2019s add some functions.\n+`src/english/greetings.rs`, `src/english/farewells.rs`,\n+`src/japanese/greetings.rs` and `src/japanese/farewells.rs` or\n+`src/english/greetings/mod.rs`, `src/english/farewells/mod.rs`,\n+`src/japanese/greetings/mod.rs` and\n+`src/japanese/farewells/mod.rs`. Because these sub-modules don\u2019t have\n+their own sub-modules, we\u2019ve chosen to make them\n+`src/english/greetings.rs`, `src/english/farewells.rs`,\n+`src/japanese/greetings.rs` and `src/japanese/farewells.rs`. Whew!\n+\n+The contents of `src/english/greetings.rs`,\n+`src/english/farewells.rs`, `src/japanese/greetings.rs` and\n+`src/japanese/farewells.rs` are all empty at the moment. Let\u2019s add\n+some functions.\n \n Put this in `src/english/greetings.rs`:\n "}, {"sha": "695b1614fb70c5cd3877cd0ed542adb6e1425e12", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -56,8 +56,8 @@ To fix this, we have to make sure that step four never happens after step\n three. The ownership system in Rust does this through a concept called\n lifetimes, which describe the scope that a reference is valid for.\n \n-When we have a function that takes a reference by argument, we can be implicit\n-or explicit about the lifetime of the reference:\n+When we have a function that takes an argument by reference, we can be\n+implicit or explicit about the lifetime of the reference:\n \n ```rust\n // implicit"}, {"sha": "6ca0db68a88ce42a1c87330c47fe1b8a34b38dc5", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -49,6 +49,18 @@ pub trait ToOwned {\n     type Owned: Borrow<Self>;\n \n     /// Creates owned data from borrowed data, usually by cloning.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s = \"a\"; // &str\n+    /// let ss = s.to_owned(); // String\n+    ///\n+    /// let v = &[1, 2]; // slice\n+    /// let vv = v.to_owned(); // Vec\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_owned(&self) -> Self::Owned;\n }"}, {"sha": "42aef3ab3dd7503e22689c45ac4fb7638d873e14", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -220,7 +220,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     /// let s: &str = \"Follow the rabbit\";\n     /// let ptr: *const u8 = s.as_ptr();\n-    /// assert!(ptr.is_null() == false);\n+    /// assert!(!ptr.is_null());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -306,7 +306,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     /// let mut s = [1, 2, 3];\n     /// let ptr: *mut u32 = s.as_mut_ptr();\n-    /// assert!(ptr.is_null() == false);\n+    /// assert!(!ptr.is_null());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "2564838c67d6567bf67acb703d851c53c534476b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -144,7 +144,7 @@ declare_lint! {\n \n declare_lint! {\n     pub ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-    Deny,\n+    Warn,\n     \"constants of struct or enum type can only be used in a pattern if \\\n      the struct or enum has `#[derive(PartialEq, Eq)]`\"\n }"}, {"sha": "9135b656736a25672d97ef4c8d30a2db6f8846ce", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -51,16 +51,8 @@ impl<'a, 'b, 'tcx:'b> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n \n impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) directives are actually\n-    // used now. If an import is not used at all, we signal a lint error. If an\n-    // import is only used for a single namespace, we remove the other namespace\n-    // from the recorded privacy information. That means in privacy.rs, we will\n-    // only check imports and namespaces which are used. In particular, this\n-    // means that if an import could name either a public or private item, we\n-    // will check the correct thing, dependent on how the import is used.\n-    fn finalize_import(&mut self, id: ast::NodeId, span: Span) {\n-        debug!(\"finalizing import uses for {:?}\",\n-               self.session.codemap().span_to_snippet(span));\n-\n+    // used now. If an import is not used at all, we signal a lint error.\n+    fn check_import(&mut self, id: ast::NodeId, span: Span) {\n         if !self.used_imports.contains(&(id, TypeNS)) &&\n            !self.used_imports.contains(&(id, ValueNS)) {\n             self.session.add_lint(lint::builtin::UNUSED_IMPORTS,\n@@ -95,23 +87,16 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             hir::ItemUse(ref p) => {\n                 match p.node {\n                     ViewPathSimple(_, _) => {\n-                        self.finalize_import(item.id, p.span)\n+                        self.check_import(item.id, p.span)\n                     }\n \n                     ViewPathList(_, ref list) => {\n                         for i in list {\n-                            self.finalize_import(i.node.id(), i.span);\n+                            self.check_import(i.node.id(), i.span);\n                         }\n                     }\n                     ViewPathGlob(_) => {\n-                        if !self.used_imports.contains(&(item.id, TypeNS)) &&\n-                           !self.used_imports.contains(&(item.id, ValueNS)) {\n-                            self.session\n-                                .add_lint(lint::builtin::UNUSED_IMPORTS,\n-                                          item.id,\n-                                          p.span,\n-                                          \"unused import\".to_string());\n-                        }\n+                        self.check_import(item.id, p.span)\n                     }\n                 }\n             }"}, {"sha": "234042ab011bc6a5cb30b8005a2b0d28ba8821c2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -428,10 +428,7 @@ fn robin_hood<'a, K: 'a, V: 'a>(bucket: FullBucketMut<'a, K, V>,\n                         mut val: V)\n                         -> &'a mut V {\n     let starting_index = bucket.index();\n-    let size = {\n-        let table = bucket.table(); // FIXME \"lifetime too short\".\n-        table.size()\n-    };\n+    let size = bucket.table().size();\n     // Save the *starting point*.\n     let mut bucket = bucket.stash();\n     // There can be at most `size - dib` buckets to displace, because\n@@ -744,10 +741,9 @@ impl<K, V, S> HashMap<K, V, S>\n                     let h = bucket.hash();\n                     let (b, k, v) = bucket.take();\n                     self.insert_hashed_ordered(h, k, v);\n-                    {\n-                        let t = b.table(); // FIXME \"lifetime too short\".\n-                        if t.size() == 0 { break }\n-                    };\n+                    if b.table().size() == 0 {\n+                        break;\n+                    }\n                     b.into_bucket()\n                 }\n                 Empty(b) => b.into_bucket()"}, {"sha": "9dc6a26cdeed30869599b0a2c1af1769cdbbbb18", "filename": "src/libstd/env.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -181,7 +181,7 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// None if the variable isn't set.\n+/// `None` if the variable isn't set.\n ///\n /// # Examples\n ///\n@@ -617,7 +617,7 @@ pub mod consts {\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n-    /// The family of the operating system. In this case, `unix`.\n+    /// The family of the operating system. Example value is `unix`.\n     ///\n     /// Some possible values:\n     ///\n@@ -626,8 +626,8 @@ pub mod consts {\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const FAMILY: &'static str = super::os::FAMILY;\n \n-    /// A string describing the specific operating system in use: in this\n-    /// case, `linux`.\n+    /// A string describing the specific operating system in use.\n+    /// Example value is `linux`.\n     ///\n     /// Some possible values:\n     ///\n@@ -646,7 +646,7 @@ pub mod consts {\n     pub const OS: &'static str = super::os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n+    /// platform. Example value is `lib`.\n     ///\n     /// Some possible values:\n     ///\n@@ -656,7 +656,7 @@ pub mod consts {\n     pub const DLL_PREFIX: &'static str = super::os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n+    /// platform. Example value is `.so`.\n     ///\n     /// Some possible values:\n     ///\n@@ -667,7 +667,7 @@ pub mod consts {\n     pub const DLL_SUFFIX: &'static str = super::os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n+    /// platform that goes after the dot. Example value is `so`.\n     ///\n     /// Some possible values:\n     ///\n@@ -678,7 +678,7 @@ pub mod consts {\n     pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n+    /// platform. Example value is `.exe`.\n     ///\n     /// Some possible values:\n     ///\n@@ -690,7 +690,7 @@ pub mod consts {\n     pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n+    /// on this platform. Example value is `exe`.\n     ///\n     /// Some possible values:\n     ///"}, {"sha": "c4d6cb33365d0f90038ce642f916f25b997d024e", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -1708,7 +1708,7 @@ mod tests {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"fileinfo_false_on_dir\");\n         check!(fs::create_dir(dir));\n-        assert!(dir.is_file() == false);\n+        assert!(!dir.is_file());\n         check!(fs::remove_dir(dir));\n     }\n "}, {"sha": "e083605a2acd5bf1ed38d6b1d7b29023b38cd296", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -425,10 +425,11 @@ mod prim_str { }\n ///\n /// # Trait implementations\n ///\n-/// If every type inside a tuple implements one of the following\n-/// traits, then a tuple itself also implements it.\n+/// If every type inside a tuple implements one of the following traits, then a\n+/// tuple itself also implements it.\n ///\n /// * [`Clone`]\n+/// * [`Copy`]\n /// * [`PartialEq`]\n /// * [`Eq`]\n /// * [`PartialOrd`]\n@@ -438,6 +439,7 @@ mod prim_str { }\n /// * [`Hash`]\n ///\n /// [`Clone`]: clone/trait.Clone.html\n+/// [`Copy`]: marker/trait.Copy.html\n /// [`PartialEq`]: cmp/trait.PartialEq.html\n /// [`Eq`]: cmp/trait.Eq.html\n /// [`PartialOrd`]: cmp/trait.PartialOrd.html"}, {"sha": "b8c926f8de9cb7b693025153067bc6d8a94ffc49", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -1188,12 +1188,12 @@ impl<'a> Parser<'a> {\n                             -> PResult<'a, TyKind> {\n         /*\n \n-        [unsafe] [extern \"ABI\"] fn <'lt> (S) -> T\n-         ^~~~^           ^~~~^     ^~~~^ ^~^    ^\n-           |               |         |    |     |\n-           |               |         |    |   Return type\n-           |               |         |  Argument types\n-           |               |     Lifetimes\n+        [unsafe] [extern \"ABI\"] fn (S) -> T\n+         ^~~~^           ^~~~^     ^~^    ^\n+           |               |        |     |\n+           |               |        |   Return type\n+           |               |      Argument types\n+           |               |\n            |              ABI\n         Function Style\n         */"}, {"sha": "e78fd0dea292ad4f478218d91a75cca8ea730d63", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -1509,7 +1509,7 @@ mod tests {\n \n         assert_eq!(filtered.len(), 1);\n         assert_eq!(filtered[0].desc.name.to_string(), \"1\");\n-        assert!(filtered[0].desc.ignore == false);\n+        assert!(!filtered[0].desc.ignore);\n     }\n \n     #[test]"}, {"sha": "62c7e3e2e4431065f1d282c8340d7c4037489e40", "filename": "src/test/run-pass/specialization/specialization-cross-crate-defaults.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -26,12 +26,12 @@ impl Foo for LocalOverride {\n }\n \n fn test_foo() {\n-    assert!(0i8.foo() == false);\n-    assert!(0i32.foo() == false);\n-    assert!(0i64.foo() == true);\n+    assert!(!0i8.foo());\n+    assert!(!0i32.foo());\n+    assert!(0i64.foo());\n \n-    assert!(LocalDefault.foo() == false);\n-    assert!(LocalOverride.foo() == true);\n+    assert!(!LocalDefault.foo());\n+    assert!(LocalOverride.foo());\n }\n \n fn test_bar() {"}, {"sha": "9cfc6aabbb4f22b0c6c0f8601fff7c55d0d62951", "filename": "src/test/run-pass/specialization/specialization-default-methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5da36f1dfae45941ec39ef67a41fdbd22c1a50/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs?ref=bf5da36f1dfae45941ec39ef67a41fdbd22c1a50", "patch": "@@ -35,9 +35,9 @@ impl Foo for i64 {\n }\n \n fn test_foo() {\n-    assert!(0i8.foo() == false);\n-    assert!(0i32.foo() == false);\n-    assert!(0i64.foo() == true);\n+    assert!(!0i8.foo());\n+    assert!(!0i32.foo());\n+    assert!(0i64.foo());\n }\n \n // Next, test mixture of explicit `default` and provided methods:"}]}