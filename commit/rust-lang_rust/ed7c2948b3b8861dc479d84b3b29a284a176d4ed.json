{"sha": "ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "node_id": "C_kwDOAAsO6NoAKGVkN2MyOTQ4YjNiODg2MWRjNDc5ZDg0YjNiMjlhMjg0YTE3NmQ0ZWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-12T06:59:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-12T06:59:39Z"}, "message": "Move lint source generator", "tree": {"sha": "779ebcbd929475e221fa92ee9aff5fa5c0c2a96b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779ebcbd929475e221fa92ee9aff5fa5c0c2a96b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "html_url": "https://github.com/rust-lang/rust/commit/ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9ecb9f5859afcca31b0c130b0b81325036e5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9ecb9f5859afcca31b0c130b0b81325036e5a6", "html_url": "https://github.com/rust-lang/rust/commit/1e9ecb9f5859afcca31b0c130b0b81325036e5a6"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "a80f05aa8b6a495878915911f07ff26f02e0f86b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "patch": "@@ -659,11 +659,13 @@ dependencies = [\n  \"profile\",\n  \"rayon\",\n  \"rustc-hash\",\n+ \"sourcegen\",\n  \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n  \"tracing\",\n+ \"xshell\",\n ]\n \n [[package]]"}, {"sha": "54179b6fbaa2456cb606a14a71f0655c584937c0", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "patch": "@@ -31,4 +31,6 @@ limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+sourcegen = { path = \"../sourcegen\" }\n+xshell = \"0.1\"\n expect-test = \"1.2.0-pre.1\""}, {"sha": "de7b889d71ad7b98e24ffe05f835ce4ba993a309", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "patch": "@@ -3,6 +3,7 @@\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n mod apply_change;\n+\n pub mod assists;\n pub mod label;\n pub mod line_index;\n@@ -161,3 +162,8 @@ pub enum SymbolKind {\n     ValueParam,\n     Variant,\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    mod sourcegen_lint_completions;\n+}"}, {"sha": "ed3ac7203b9f057b12dfa81cf5c873f562ac336e", "filename": "crates/ide_db/src/tests/sourcegen_lint_completions.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7c2948b3b8861dc479d84b3b29a284a176d4ed/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lint_completions.rs?ref=ed7c2948b3b8861dc479d84b3b29a284a176d4ed", "patch": "@@ -0,0 +1,167 @@\n+//! Generates descriptors structure for unstable feature from Unstable Book\n+use std::{borrow::Cow, fs, path::Path};\n+\n+use stdx::format_to;\n+use test_utils::project_root;\n+use xshell::cmd;\n+\n+/// This clones rustc repo, and so is not worth to keep up-to-date. We update\n+/// manually by un-ignoring the test from time to time.\n+#[test]\n+#[ignore]\n+fn sourcegen_lint_completions() {\n+    let rust_repo = project_root().join(\"./target/rust\");\n+    if !rust_repo.exists() {\n+        cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust {rust_repo}\").run().unwrap();\n+    }\n+\n+    let mut contents = r\"\n+pub struct Lint {\n+    pub label: &'static str,\n+    pub description: &'static str,\n+}\n+\"\n+    .to_string();\n+    generate_lint_descriptor(&mut contents);\n+    contents.push('\\n');\n+\n+    generate_feature_descriptor(&mut contents, &rust_repo.join(\"src/doc/unstable-book/src\"));\n+    contents.push('\\n');\n+\n+    let lints_json = project_root().join(\"./target/clippy_lints.json\");\n+    cmd!(\"curl https://rust-lang.github.io/rust-clippy/master/lints.json --output {lints_json}\")\n+        .run()\n+        .unwrap();\n+    generate_descriptor_clippy(&mut contents, &lints_json);\n+\n+    let contents =\n+        sourcegen::add_preamble(\"sourcegen_lint_completions\", sourcegen::reformat(contents));\n+\n+    let destination = project_root().join(\"crates/ide_db/src/helpers/generated_lints.rs\");\n+    sourcegen::ensure_file_contents(destination.as_path(), &contents);\n+}\n+\n+fn generate_lint_descriptor(buf: &mut String) {\n+    let stdout = cmd!(\"rustc -W help\").read().unwrap();\n+    let start_lints = stdout.find(\"----  -------  -------\").unwrap();\n+    let start_lint_groups = stdout.find(\"----  ---------\").unwrap();\n+    let end_lints = stdout.find(\"Lint groups provided by rustc:\").unwrap();\n+    let end_lint_groups = stdout\n+        .find(\"Lint tools like Clippy can provide additional lints and lint groups.\")\n+        .unwrap();\n+    buf.push_str(r#\"pub const DEFAULT_LINTS: &[Lint] = &[\"#);\n+    buf.push('\\n');\n+    let mut lints = stdout[start_lints..end_lints]\n+        .lines()\n+        .skip(1)\n+        .filter(|l| !l.is_empty())\n+        .map(|line| {\n+            let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n+            let (_default_level, description) =\n+                rest.trim().split_once(char::is_whitespace).unwrap();\n+            (name.trim(), Cow::Borrowed(description.trim()))\n+        })\n+        .collect::<Vec<_>>();\n+    lints.extend(\n+        stdout[start_lint_groups..end_lint_groups].lines().skip(1).filter(|l| !l.is_empty()).map(\n+            |line| {\n+                let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n+                (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+            },\n+        ),\n+    );\n+\n+    lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n+    lints.into_iter().for_each(|(name, description)| {\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+    });\n+    buf.push_str(\"];\\n\");\n+}\n+\n+fn generate_feature_descriptor(buf: &mut String, src_dir: &Path) {\n+    let mut features = [\"language-features\", \"library-features\"]\n+        .iter()\n+        .flat_map(|it| sourcegen::list_files(&src_dir.join(it)))\n+        .filter(|path| {\n+            // Get all `.md ` files\n+            path.extension().unwrap_or_default().to_str().unwrap_or_default() == \"md\"\n+        })\n+        .map(|path| {\n+            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+            let doc = fs::read_to_string(path).unwrap();\n+            (feature_ident, doc)\n+        })\n+        .collect::<Vec<_>>();\n+    features.sort_by(|(feature_ident, _), (feature_ident2, _)| feature_ident.cmp(feature_ident2));\n+\n+    buf.push_str(r#\"pub const FEATURES: &[Lint] = &[\"#);\n+    for (feature_ident, doc) in features.into_iter() {\n+        push_lint_completion(buf, &feature_ident, &doc)\n+    }\n+    buf.push('\\n');\n+    buf.push_str(\"];\\n\");\n+}\n+\n+#[derive(Default)]\n+struct ClippyLint {\n+    help: String,\n+    id: String,\n+}\n+\n+fn unescape(s: &str) -> String {\n+    s.replace(r#\"\\\"\"#, \"\").replace(r#\"\\n\"#, \"\\n\").replace(r#\"\\r\"#, \"\")\n+}\n+\n+fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n+    let file_content = std::fs::read_to_string(path).unwrap();\n+    let mut clippy_lints: Vec<ClippyLint> = Vec::new();\n+\n+    for line in file_content.lines().map(|line| line.trim()) {\n+        if line.starts_with(r#\"\"id\":\"#) {\n+            let clippy_lint = ClippyLint {\n+                id: line\n+                    .strip_prefix(r#\"\"id\": \"\"#)\n+                    .expect(\"should be prefixed by id\")\n+                    .strip_suffix(r#\"\",\"#)\n+                    .expect(\"should be suffixed by comma\")\n+                    .into(),\n+                help: String::new(),\n+            };\n+            clippy_lints.push(clippy_lint)\n+        } else if line.starts_with(r#\"\"What it does\":\"#) {\n+            // Typical line to strip: \"What is doest\": \"Here is my useful content\",\n+            let prefix_to_strip = r#\"\"What it does\": \"\"#;\n+            let suffix_to_strip = r#\"\",\"#;\n+\n+            let clippy_lint = clippy_lints.last_mut().expect(\"clippy lint must already exist\");\n+            clippy_lint.help = line\n+                .strip_prefix(prefix_to_strip)\n+                .expect(\"should be prefixed by what it does\")\n+                .strip_suffix(suffix_to_strip)\n+                .map(unescape)\n+                .expect(\"should be suffixed by comma\");\n+        }\n+    }\n+    clippy_lints.sort_by(|lint, lint2| lint.id.cmp(&lint2.id));\n+\n+    buf.push_str(r#\"pub const CLIPPY_LINTS: &[Lint] = &[\"#);\n+    buf.push('\\n');\n+    for clippy_lint in clippy_lints.into_iter() {\n+        let lint_ident = format!(\"clippy::{}\", clippy_lint.id);\n+        let doc = clippy_lint.help;\n+        push_lint_completion(buf, &lint_ident, &doc);\n+    }\n+    buf.push_str(\"];\\n\");\n+}\n+\n+fn push_lint_completion(buf: &mut String, label: &str, description: &str) {\n+    format_to!(\n+        buf,\n+        r###\"    Lint {{\n+        label: \"{}\",\n+        description: r##\"{}\"##\n+    }},\"###,\n+        label,\n+        description\n+    );\n+}"}]}