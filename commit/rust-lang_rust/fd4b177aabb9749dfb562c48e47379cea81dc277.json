{"sha": "fd4b177aabb9749dfb562c48e47379cea81dc277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNGIxNzdhYWJiOTc0OWRmYjU2MmM0OGU0NzM3OWNlYTgxZGMyNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T20:10:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T20:10:07Z"}, "message": "Auto merge of #72655 - jethrogb:sgx-lvi-hardening, r=petrochenkov\n\nEnable LVI hardening for x86_64-fortanix-unknown-sgx\n\nThis implements mitigations for the Load Value Injection vulnerability (CVE-2020-0551) for the `x86_64-fortanix-unknown-sgx` target by enabling new LLVM passes. More information about LVI and mitigations may be found at https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection.\n\nThis PR unconditionally enables the mitigations for `x86_64-fortanix-unknown-sgx` since there is no available hardware that doesn't require the mitigations. This may be reconsidered in the future.\n\n* [x] This depends on https://github.com/rust-lang/compiler-builtins/pull/359/", "tree": {"sha": "9fa5a5888e7b0c05aa9b798a43c471fd4e106a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa5a5888e7b0c05aa9b798a43c471fd4e106a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4b177aabb9749dfb562c48e47379cea81dc277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4b177aabb9749dfb562c48e47379cea81dc277", "html_url": "https://github.com/rust-lang/rust/commit/fd4b177aabb9749dfb562c48e47379cea81dc277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4b177aabb9749dfb562c48e47379cea81dc277/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc10b68e798477066d4b1ec4886a3b1cdc4feb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc10b68e798477066d4b1ec4886a3b1cdc4feb7e", "html_url": "https://github.com/rust-lang/rust/commit/bc10b68e798477066d4b1ec4886a3b1cdc4feb7e"}, {"sha": "ea48f2e4da5c6b120c337466e55b307a26c189b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea48f2e4da5c6b120c337466e55b307a26c189b2", "html_url": "https://github.com/rust-lang/rust/commit/ea48f2e4da5c6b120c337466e55b307a26c189b2"}], "stats": {"total": 104, "additions": 74, "deletions": 30}, "files": [{"sha": "01510b716817234c17c2ca177987ab77763f781f", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -642,9 +642,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.31\"\n+version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"702af8463c84fd83dd76a307ebd47ab3cc866e847bebd4a1deeb6bcc4a658327\"\n+checksum = \"7bc4ac2c824d2bfc612cba57708198547e9a26943af0632aff033e0693074d5c\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "ab16ca3732c1fc93a81d4ed8ac20855052155c5f", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -37,7 +37,9 @@ use crate::{Build, GitRepo};\n // try to infer the archiver path from the C compiler path.\n // In the future this logic should be replaced by calling into the `cc` crate.\n fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n-    if let Some(ar) = env::var_os(\"AR\") {\n+    if let Some(ar) = env::var_os(format!(\"AR_{}\", target.replace(\"-\", \"_\"))) {\n+        Some(PathBuf::from(ar))\n+    } else if let Some(ar) = env::var_os(\"AR\") {\n         Some(PathBuf::from(ar))\n     } else if target.contains(\"msvc\") {\n         None"}, {"sha": "43f5581f996ea437b6fd32bcb5651407d858dadc", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -28,6 +28,29 @@ RUN apt-get update && apt-get build-dep -y clang llvm && apt-get install -y --no\n RUN apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7924C5513486\n RUN add-apt-repository -y 'deb http://apt.dilos.org/dilos dilos2 main'\n \n+ENV \\\n+    AR_x86_64_fuchsia=x86_64-fuchsia-ar \\\n+    CC_x86_64_fuchsia=x86_64-fuchsia-clang \\\n+    CXX_x86_64_fuchsia=x86_64-fuchsia-clang++ \\\n+    AR_aarch64_fuchsia=aarch64-fuchsia-ar \\\n+    CC_aarch64_fuchsia=aarch64-fuchsia-clang \\\n+    CXX_aarch64_fuchsia=aarch64-fuchsia-clang++ \\\n+    AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-ar \\\n+    CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-gcc \\\n+    CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-g++ \\\n+    AR_x86_64_sun_solaris=x86_64-sun-solaris2.10-ar \\\n+    CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n+    CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++ \\\n+    CC_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-gcc-7 \\\n+    CXX_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-g++-7 \\\n+    AR_x86_64_fortanix_unknown_sgx=ar \\\n+    CC_x86_64_fortanix_unknown_sgx=x86_64-fortanix-unknown-sgx-clang-11 \\\n+    CFLAGS_x86_64_fortanix_unknown_sgx=\"-mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n+    CXX_x86_64_fortanix_unknown_sgx=x86_64-fortanix-unknown-sgx-clang++-11 \\\n+    CXXFLAGS_x86_64_fortanix_unknown_sgx=\"-mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n+    CC=gcc-7 \\\n+    CXX=g++-7\n+\n WORKDIR /build\n COPY scripts/musl.sh /build\n RUN env \\\n@@ -46,34 +69,18 @@ COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n+COPY dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh /usr/bin/x86_64-fortanix-unknown-sgx-clang-11\n+RUN ln -s /usr/bin/x86_64-fortanix-unknown-sgx-clang-11 /usr/bin/x86_64-fortanix-unknown-sgx-clang++-11\n # We pass the commit id of the port of LLVM's libunwind to the build script.\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n-RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"5125c169b30837208a842f85f7ae44a83533bd0e\"\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"800f95131fe6acd20b96b6f4723ca3c820f3d379\"\n \n COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n RUN /tmp/build-wasi-toolchain.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV \\\n-    AR_x86_64_fuchsia=x86_64-fuchsia-ar \\\n-    CC_x86_64_fuchsia=x86_64-fuchsia-clang \\\n-    CXX_x86_64_fuchsia=x86_64-fuchsia-clang++ \\\n-    AR_aarch64_fuchsia=aarch64-fuchsia-ar \\\n-    CC_aarch64_fuchsia=aarch64-fuchsia-clang \\\n-    CXX_aarch64_fuchsia=aarch64-fuchsia-clang++ \\\n-    AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-ar \\\n-    CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-gcc \\\n-    CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-g++ \\\n-    AR_x86_64_sun_solaris=x86_64-sun-solaris2.10-ar \\\n-    CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n-    CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++ \\\n-    CC_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-gcc-7 \\\n-    CXX_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-g++-7 \\\n-    CC=gcc-7 \\\n-    CXX=g++-7\n-\n ENV CARGO_TARGET_X86_64_FUCHSIA_AR /usr/local/bin/llvm-ar\n ENV CARGO_TARGET_X86_64_FUCHSIA_RUSTFLAGS \\\n -C link-arg=--sysroot=/usr/local/x86_64-fuchsia \\"}, {"sha": "4294b1ef93dd825226241d9dbe2236a46c752944", "filename": "src/ci/docker/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -13,12 +13,15 @@ url=\"https://github.com/fortanix/llvm-project/archive/${1}.tar.gz\"\n repo_name=\"llvm-project\"\n \n install_prereq() {\n+    curl https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -\n+    add-apt-repository -y 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'\n     apt-get update\n     apt-get install -y --no-install-recommends \\\n             build-essential \\\n             ca-certificates \\\n             cmake \\\n-            git\n+            git \\\n+            clang-11\n }\n \n build_unwind() {\n@@ -35,7 +38,14 @@ build_unwind() {\n     # Build libunwind\n     mkdir -p build\n     cd build\n+    target_CC=\"CC_${target//-/_}\"\n+    target_CXX=\"CXX_${target//-/_}\"\n+    target_CFLAGS=\"CFLAGS_${target//-/_}\"\n+    target_CXXFLAGS=\"CXXFLAGS_${target//-/_}\"\n     cmake -DCMAKE_BUILD_TYPE=\"RELEASE\" -DRUST_SGX=1 -G \"Unix Makefiles\" \\\n+        -DCMAKE_C_COMPILER=\"${!target_CC}\" -DCMAKE_CXX_COMPILER=\"${!target_CXX}\" \\\n+        -DCMAKE_C_FLAGS=\"${!target_CFLAGS}\" -DCMAKE_CXX_FLAGS=\"${!target_CXXFLAGS}\" \\\n+        -DCMAKE_C_COMPILER_TARGET=$target -DCMAKE_CXX_COMPILER_TARGET=$target \\\n         -DLLVM_ENABLE_WARNINGS=1 -DLIBUNWIND_ENABLE_WERROR=1 -DLIBUNWIND_ENABLE_PEDANTIC=0 \\\n         -DLLVM_PATH=../../llvm/ ../\n     make unwind_static"}, {"sha": "c4ff44c37b1e35aa6e1a2d441d8fcfbaaaa305eb", "filename": "src/ci/docker/dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Fci%2Fdocker%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -0,0 +1,14 @@\n+#!/bin/bash\n+\n+args=(\"$@\")\n+\n+for i in \"${!args[@]}\"; do\n+    # x86_64-fortanix-unknown-sgx doesn't have a C sysroot for things like\n+    # stdint.h and the C++ STL. Unlike GCC, clang will not use the host's\n+    # sysroot instead. Force it.\n+    if [ \"${args[$i]}\" = \"--target=x86_64-fortanix-unknown-sgx\" ]; then\n+        args[$i]=\"--target=x86_64-unknown-linux-gnu\"\n+    fi\n+done\n+\n+exec \"${0/x86_64-fortanix-unknown-sgx-clang/clang}\" \"${args[@]}\""}, {"sha": "81974769cafb8b0113a45411efc70aa409204984", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -61,7 +61,8 @@ pub fn target() -> Result<Target, String> {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Unwind,\n         cpu: \"x86-64\".into(),\n-        features: \"+rdrnd,+rdseed\".into(),\n+        features: \"+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening\".into(),\n+        llvm_args: vec![\"--x86-experimental-lvi-inline-asm-hardening\".into()],\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n             LinkerFlavor::Lld(LldFlavor::Ld),"}, {"sha": "6af1cbb34b6c42ff9ecf040f81f15a542e01055c", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -20,7 +20,7 @@ panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.31\" }\n+compiler_builtins = { version = \"0.1.32\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "2badfc973c9723b4fd2c480b805835412b32cc10", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/fd4b177aabb9749dfb562c48e47379cea81dc277/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=fd4b177aabb9749dfb562c48e47379cea81dc277", "patch": "@@ -324,7 +324,9 @@ usercall:\n /*  return */\n     mov %rsi,%rax /*  RAX = return value */\n     /* NOP: mov %rdx,%rdx */ /*  RDX = return value */\n-    ret\n+    pop %r11\n+    lfence\n+    jmp *%r11\n \n /*\n The following functions need to be defined externally:\n@@ -343,20 +345,28 @@ extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64\n .global get_tcs_addr\n get_tcs_addr:\n     mov %gs:tcsls_tcs_addr,%rax\n-    ret\n+    pop %r11\n+    lfence\n+    jmp *%r11\n \n .global get_tls_ptr\n get_tls_ptr:\n     mov %gs:tcsls_tls_ptr,%rax\n-    ret\n+    pop %r11\n+    lfence\n+    jmp *%r11\n \n .global set_tls_ptr\n set_tls_ptr:\n     mov %rdi,%gs:tcsls_tls_ptr\n-    ret\n+    pop %r11\n+    lfence\n+    jmp *%r11\n \n .global take_debug_panic_buf_ptr\n take_debug_panic_buf_ptr:\n     xor %rax,%rax\n     xchg %gs:tcsls_debug_panic_buf_ptr,%rax\n-    ret\n+    pop %r11\n+    lfence\n+    jmp *%r11"}]}