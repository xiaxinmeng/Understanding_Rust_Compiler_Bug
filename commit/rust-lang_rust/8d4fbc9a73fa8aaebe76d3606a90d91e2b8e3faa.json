{"sha": "8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "node_id": "C_kwDOAAsO6NoAKDhkNGZiYzlhNzNmYThhYWViZTc2ZDM2MDZhOTBkOTFlMmI4ZTNmYWE", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-11-10T23:35:59Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-11-10T23:35:59Z"}, "message": "Add `#[inline]`s to `SortedIndexMultiMap`", "tree": {"sha": "16dea6b511536447d05339223979eba849583e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dea6b511536447d05339223979eba849583e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmGMV18ACgkQ2rpbBylh\nwYo0dw//SF0f7mdM59KeAX1qwoxw3ppU5KkdCTBDWUsT9WEEemCV0heA6Uu+PkAs\nY65xO52u+3+dDtiWbuP2sXkgSE1gniboF8PO0XEgGYtcsxmEWBqM+swUJi1PTH/a\nKmDc0okog5E1mI+CNfKatKRVvbIkR5IkB0ywX8N1Wf0qpbsYuIERFoez5z3ZLSNy\nbmkFWXkJaHiNmlF51EydJkyIUfnU3FB7HFj/yOYTueSTgjRgOigJm3mZyt104oO/\nnr+Lk4AG8DdEKLJVpYoxYPlyLs5P9ykynLzsXkY9Pob0TbISpbcrDdr1ZgBlGdC8\nYOH5xRy+lQDsi2feL0AKkWc40X5zGmuWBiQCCZBrskGrSLQsy+M+ET824mAzQhOm\n6ThgiNPTPR9Dwn0BNWirdZphQUm0EkO1QF3fAT2GYTlKKuBnAd+y2FXrXAgNVkgW\n19h6BADR5g3F9KIfGHIuXr5myD1DSI8XTw3oB2u4oQrsUz96H7qhVIn4Kob2wbpp\n+kgk4YB2NBIgznD75KjEfenNVuzbieqCTMmuhBGj+8JCPwnEC/8JNRGXcTbRzi8D\njkpEDzhgIvYpbXwxGwr3vi0WHiTcZ1N2QfGBsw+oBpJ1FW9E9tglix2PjJcv6TmA\nPlFUcdaSQ7+q+ApQoXHb5CN3kxBZsTMuwr3HUh/fICdJFADwajY=\n=QbWW\n-----END PGP SIGNATURE-----", "payload": "tree 16dea6b511536447d05339223979eba849583e03\nparent 82af160c2cb9c349a0373cba98d8ad7f911f0d34\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1636587359 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1636587359 +0900\n\nAdd `#[inline]`s to `SortedIndexMultiMap`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "html_url": "https://github.com/rust-lang/rust/commit/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82af160c2cb9c349a0373cba98d8ad7f911f0d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/82af160c2cb9c349a0373cba98d8ad7f911f0d34", "html_url": "https://github.com/rust-lang/rust/commit/82af160c2cb9c349a0373cba98d8ad7f911f0d34"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "61c7239c55ff497b8b190257f8cec9b48512c5c0", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "patch": "@@ -34,39 +34,47 @@ pub struct SortedIndexMultiMap<I: Idx, K, V> {\n }\n \n impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n+    #[inline]\n     pub fn new() -> Self {\n         SortedIndexMultiMap { items: IndexVec::new(), idx_sorted_by_item_key: Vec::new() }\n     }\n \n+    #[inline]\n     pub fn len(&self) -> usize {\n         self.items.len()\n     }\n \n+    #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.items.is_empty()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn into_iter(self) -> impl DoubleEndedIterator<Item = (K, V)> {\n         self.items.into_iter()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn into_iter_enumerated(self) -> impl DoubleEndedIterator<Item = (I, (K, V))> {\n         self.items.into_iter_enumerated()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn iter(&self) -> impl '_ + DoubleEndedIterator<Item = (&K, &V)> {\n         self.items.iter().map(|(ref k, ref v)| (k, v))\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn iter_enumerated(&self) -> impl '_ + DoubleEndedIterator<Item = (I, (&K, &V))> {\n         self.items.iter_enumerated().map(|(i, (ref k, ref v))| (i, (k, v)))\n     }\n \n     /// Returns the item in the map with the given index.\n+    #[inline]\n     pub fn get(&self, idx: I) -> Option<&(K, V)> {\n         self.items.get(idx)\n     }\n@@ -75,6 +83,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n@@ -84,6 +93,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {"}]}