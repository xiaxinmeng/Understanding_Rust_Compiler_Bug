{"sha": "002d840d170e2b87c0d34dc2bf8a7bc15a014791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMmQ4NDBkMTcwZTJiODdjMGQzNGRjMmJmOGE3YmMxNWEwMTQ3OTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:07Z"}, "message": "rollup merge of #21199: dotdash/decode_lamba\n\nCurrently, we build a closure that does nothing but pass its argument\nthrough to another function, this is rather wasteful and creates lots of\nunnecessary closures.", "tree": {"sha": "2027a3f496b5d5e29418c71e84b52e65d02afe1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2027a3f496b5d5e29418c71e84b52e65d02afe1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002d840d170e2b87c0d34dc2bf8a7bc15a014791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002d840d170e2b87c0d34dc2bf8a7bc15a014791", "html_url": "https://github.com/rust-lang/rust/commit/002d840d170e2b87c0d34dc2bf8a7bc15a014791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002d840d170e2b87c0d34dc2bf8a7bc15a014791/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc94f744ef1513991939488594e2c1f0ebb110a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc94f744ef1513991939488594e2c1f0ebb110a", "html_url": "https://github.com/rust-lang/rust/commit/6dc94f744ef1513991939488594e2c1f0ebb110a"}, {"sha": "b75cee84254744990cdc158ae2304a5378e88448", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75cee84254744990cdc158ae2304a5378e88448", "html_url": "https://github.com/rust-lang/rust/commit/b75cee84254744990cdc158ae2304a5378e88448"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "f73023ddd1eb05c587928b6ec6e21971fc8c1974", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/002d840d170e2b87c0d34dc2bf8a7bc15a014791/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002d840d170e2b87c0d34dc2bf8a7bc15a014791/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=002d840d170e2b87c0d34dc2bf8a7bc15a014791", "patch": "@@ -92,11 +92,10 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n     let recurse = vec!(cx.ident_of(krate),\n                     cx.ident_of(\"Decodable\"),\n                     cx.ident_of(\"decode\"));\n+    let exprdecode = cx.expr_path(cx.path_global(trait_span, recurse));\n     // throw an underscore in front to suppress unused variable warnings\n     let blkarg = cx.ident_of(\"_d\");\n     let blkdecoder = cx.expr_ident(trait_span, blkarg);\n-    let calldecode = cx.expr_call_global(trait_span, recurse, vec!(blkdecoder.clone()));\n-    let lambdadecode = cx.lambda_expr_1(trait_span, calldecode, blkarg);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -116,7 +115,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                     cx.expr_method_call(span, blkdecoder.clone(), read_struct_field,\n                                         vec!(cx.expr_str(span, name),\n                                           cx.expr_uint(span, field),\n-                                          lambdadecode.clone())))\n+                                          exprdecode.clone())))\n             });\n             let result = cx.expr_ok(trait_span, result);\n             cx.expr_method_call(trait_span,\n@@ -147,7 +146,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                     let idx = cx.expr_uint(span, field);\n                     cx.expr_try(span,\n                         cx.expr_method_call(span, blkdecoder.clone(), rvariant_arg,\n-                                            vec!(idx, lambdadecode.clone())))\n+                                            vec!(idx, exprdecode.clone())))\n                 });\n \n                 arms.push(cx.arm(v_span,"}]}