{"sha": "837ac877091b540d95ee6a75a29e29cb64894d7e", "node_id": "C_kwDOAAsO6NoAKDgzN2FjODc3MDkxYjU0MGQ5NWVlNmE3NWEyOWUyOWNiNjQ4OTRkN2U", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T01:05:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T01:05:22Z"}, "message": "Rollup merge of #89248 - hkmatsumoto:suggest-similarly-named-assoc-items, r=estebank\n\nSuggest similarly named associated items in trait impls\n\nFix #85942\n\nPreviously, the compiler didn't suggest similarly named associated items unlike we do in many situations. This patch adds such diagnostics for associated functions, types, and constants.", "tree": {"sha": "255979f352c66e91cef079bd72c1a13a0f30ca76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255979f352c66e91cef079bd72c1a13a0f30ca76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837ac877091b540d95ee6a75a29e29cb64894d7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVl7SCRBK7hj4Ov3rIwAAG4UIAF70mlPDurGHn6Kt+LVWfUc6\ns0JMmsdMMRys0iBD0fPLlo1Tr4ruvN/ilfpRWalxONubtW6q/znN3gwboWqWwKoW\nY70O6qw3vdFI9X0Z7j8OSiqOSYDd9fqxO/NL6MTldRZnXF2FlUwtYzOehjODQ09u\nPe7+bfx7cMvnjMG5nTt0L9zqA5r3N2UtZUgOcvziFXI1nDb3uUTDGh0y/67FeTbo\nbvFW6nobN1N+OY/KmtxC2Q9sGAKonM4x+x0JrSrJCFuMJUalWeWecYt6Q6F61BNv\nK8ty+anDbsByZqMNlfNv44YKn4UdQ+I6i0sQh2jcoiDbbcpmNrEuGFZzcVqQxIk=\n=9JCk\n-----END PGP SIGNATURE-----\n", "payload": "tree 255979f352c66e91cef079bd72c1a13a0f30ca76\nparent b437be45ea74905298b046b521a328b0d7899511\nparent cef736f8a05bab8d9a16f7120b5800670ef768ee\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633050322 -0700\ncommitter GitHub <noreply@github.com> 1633050322 -0700\n\nRollup merge of #89248 - hkmatsumoto:suggest-similarly-named-assoc-items, r=estebank\n\nSuggest similarly named associated items in trait impls\n\nFix #85942\n\nPreviously, the compiler didn't suggest similarly named associated items unlike we do in many situations. This patch adds such diagnostics for associated functions, types, and constants.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837ac877091b540d95ee6a75a29e29cb64894d7e", "html_url": "https://github.com/rust-lang/rust/commit/837ac877091b540d95ee6a75a29e29cb64894d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837ac877091b540d95ee6a75a29e29cb64894d7e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b437be45ea74905298b046b521a328b0d7899511", "url": "https://api.github.com/repos/rust-lang/rust/commits/b437be45ea74905298b046b521a328b0d7899511", "html_url": "https://github.com/rust-lang/rust/commit/b437be45ea74905298b046b521a328b0d7899511"}, {"sha": "cef736f8a05bab8d9a16f7120b5800670ef768ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef736f8a05bab8d9a16f7120b5800670ef768ee", "html_url": "https://github.com/rust-lang/rust/commit/cef736f8a05bab8d9a16f7120b5800670ef768ee"}], "stats": {"total": 234, "additions": 216, "deletions": 18}, "files": [{"sha": "5acbe9864beb05343381f64f1b36b5905fb1416f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -198,7 +198,7 @@ impl<'a> Resolver<'a> {\n                 err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n                 err\n             }\n-            ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n+            ResolutionError::MethodNotMemberOfTrait(method, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -208,9 +208,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        method.span,\n+                        \"there is an associated function with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n+            ResolutionError::TypeNotMemberOfTrait(type_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -220,9 +228,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        type_.span,\n+                        \"there is an associated type with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::ConstNotMemberOfTrait(const_, trait_) => {\n+            ResolutionError::ConstNotMemberOfTrait(const_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -232,6 +248,14 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        const_.span,\n+                        \"there is an associated constant with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n             ResolutionError::VariableNotBoundInPattern(binding_error) => {"}, {"sha": "9563325796538dab148fc9d45d5f3448ba6a0980", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -1309,14 +1309,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n                                         AssocItemKind::Const(_default, _ty, _expr) => {\n-                                            debug!(\"resolve_implementation AssocItemKind::Const\",);\n+                                            debug!(\"resolve_implementation AssocItemKind::Const\");\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(\n                                                 item.ident,\n+                                                &item.kind,\n                                                 ValueNS,\n                                                 item.span,\n-                                                |n, s| ConstNotMemberOfTrait(n, s),\n+                                                |i, s, c| ConstNotMemberOfTrait(i, s, c),\n                                             );\n \n                                             // We allow arbitrary const expressions inside of associated consts,\n@@ -1338,6 +1339,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             );\n                                         }\n                                         AssocItemKind::Fn(box FnKind(.., generics, _)) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::Fn\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1347,9 +1349,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         ValueNS,\n                                                         item.span,\n-                                                        |n, s| MethodNotMemberOfTrait(n, s),\n+                                                        |i, s, c| MethodNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1366,6 +1369,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             _,\n                                             _,\n                                         )) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1375,9 +1379,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         TypeNS,\n                                                         item.span,\n-                                                        |n, s| TypeNotMemberOfTrait(n, s),\n+                                                        |i, s, c| TypeNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1401,9 +1406,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         });\n     }\n \n-    fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n-    where\n-        F: FnOnce(Symbol, &str) -> ResolutionError<'_>,\n+    fn check_trait_item<F>(\n+        &mut self,\n+        ident: Ident,\n+        kind: &AssocItemKind,\n+        ns: Namespace,\n+        span: Span,\n+        err: F,\n+    ) where\n+        F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait.\n@@ -1420,8 +1431,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 )\n                 .is_err()\n             {\n+                let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n                 let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-                self.report_error(span, err(ident.name, &path_names_to_string(path)));\n+                self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n             }\n         }\n     }"}, {"sha": "e57e7db328549fd7954d421762c9487647af4568", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -7,8 +7,8 @@ use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::visit::FnKind;\n use rustc_ast::{\n-    self as ast, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind, NodeId, Path, Ty,\n-    TyKind,\n+    self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n+    NodeId, Path, Ty, TyKind,\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1150,6 +1150,40 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         true\n     }\n \n+    /// Given the target `ident` and `kind`, search for the similarly named associated item\n+    /// in `self.current_trait_ref`.\n+    crate fn find_similarly_named_assoc_item(\n+        &mut self,\n+        ident: Symbol,\n+        kind: &AssocItemKind,\n+    ) -> Option<Symbol> {\n+        let module = if let Some((module, _)) = self.current_trait_ref {\n+            module\n+        } else {\n+            return None;\n+        };\n+        if ident == kw::Underscore {\n+            // We do nothing for `_`.\n+            return None;\n+        }\n+\n+        let resolutions = self.r.resolutions(module);\n+        let targets = resolutions\n+            .borrow()\n+            .iter()\n+            .filter_map(|(key, res)| res.borrow().binding.map(|binding| (key, binding.res())))\n+            .filter(|(_, res)| match (kind, res) {\n+                (AssocItemKind::Const(..), Res::Def(DefKind::AssocConst, _)) => true,\n+                (AssocItemKind::Fn(_), Res::Def(DefKind::AssocFn, _)) => true,\n+                (AssocItemKind::TyAlias(..), Res::Def(DefKind::AssocTy, _)) => true,\n+                _ => false,\n+            })\n+            .map(|(key, _)| key.ident.name)\n+            .collect::<Vec<_>>();\n+\n+        find_best_match_for_name(&targets, ident, None)\n+    }\n+\n     fn lookup_assoc_candidate<FilterFn>(\n         &mut self,\n         ident: Ident,"}, {"sha": "19b9e1dc460d658b38a7deaae142cb7c32c2438a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -206,11 +206,11 @@ enum ResolutionError<'a> {\n     /// parameter list.\n     NameAlreadyUsedInParameterList(Symbol, Span),\n     /// Error E0407: method is not a member of trait.\n-    MethodNotMemberOfTrait(Symbol, &'a str),\n+    MethodNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0437: type is not a member of trait.\n-    TypeNotMemberOfTrait(Symbol, &'a str),\n+    TypeNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0438: const is not a member of trait.\n-    ConstNotMemberOfTrait(Symbol, &'a str),\n+    ConstNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0408: variable `{}` is not bound in all patterns.\n     VariableNotBoundInPattern(&'a BindingError),\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm."}, {"sha": "6f6d1ff6a8f417c806a33073329a9459beb8b48e", "filename": "src/test/ui/error-codes/E0407.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `b` is not a member of trait `Foo`\n   --> $DIR/E0407.rs:9:5\n    |\n LL |     fn b() {}\n-   |     ^^^^^^^^^ not a member of trait `Foo`\n+   |     ^^^-^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `a`\n+   |     not a member of trait `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "517b1ff598888e963ac0218f7411b70905aecdd1", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `method` is not a member of trait `Tr`\n   --> $DIR/assoc_item_ctxt.rs:35:13\n    |\n LL |             fn method() {}\n-   |             ^^^^^^^^^^^^^^ not a member of trait `Tr`\n+   |             ^^^------^^^^^\n+   |             |  |\n+   |             |  help: there is an associated function with a similar name: `method`\n+   |             not a member of trait `Tr`\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation"}, {"sha": "9d42a734260962ef97a0b5bcee150b79ad9e53c5", "filename": "src/test/ui/suggestions/suggest-trait-items.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -0,0 +1,48 @@\n+trait Foo {\n+    type Type;\n+\n+    fn foo();\n+    fn bar();\n+    fn qux();\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+//~^ ERROR not all trait items implemented\n+    type Typ = ();\n+    //~^ ERROR type `Typ` is not a member of trait\n+    //~| HELP there is an associated type with a similar name\n+\n+    fn fooo() {}\n+    //~^ ERROR method `fooo` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn barr() {}\n+    //~^ ERROR method `barr` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn quux() {}\n+    //~^ ERROR method `quux` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+}\n+//~^ HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+\n+trait Bar {\n+    const Const: i32;\n+}\n+\n+struct B;\n+\n+impl Bar for B {\n+//~^ ERROR not all trait items implemented\n+    const Cnst: i32 = 0;\n+    //~^ ERROR const `Cnst` is not a member of trait\n+    //~| HELP there is an associated constant with a similar name\n+}\n+//~^ HELP implement the missing item\n+\n+fn main() {}"}, {"sha": "151bae7d1b9cb12b04de303f2ee82737208fcc3d", "filename": "src/test/ui/suggestions/suggest-trait-items.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/837ac877091b540d95ee6a75a29e29cb64894d7e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr?ref=837ac877091b540d95ee6a75a29e29cb64894d7e", "patch": "@@ -0,0 +1,74 @@\n+error[E0437]: type `Typ` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:13:5\n+   |\n+LL |     type Typ = ();\n+   |     ^^^^^---^^^^^^\n+   |     |    |\n+   |     |    help: there is an associated type with a similar name: `Type`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `fooo` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:17:5\n+   |\n+LL |     fn fooo() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `foo`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `barr` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:21:5\n+   |\n+LL |     fn barr() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `bar`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `quux` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:25:5\n+   |\n+LL |     fn quux() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `qux`\n+   |     not a member of trait `Foo`\n+\n+error[E0438]: const `Cnst` is not a member of trait `Bar`\n+  --> $DIR/suggest-trait-items.rs:42:5\n+   |\n+LL |     const Cnst: i32 = 0;\n+   |     ^^^^^^----^^^^^^^^^^\n+   |     |     |\n+   |     |     help: there is an associated constant with a similar name: `Const`\n+   |     not a member of trait `Bar`\n+\n+error[E0046]: not all trait items implemented, missing: `Type`, `foo`, `bar`, `qux`\n+  --> $DIR/suggest-trait-items.rs:11:1\n+   |\n+LL |     type Type;\n+   |     ---------- `Type` from trait\n+LL | \n+LL |     fn foo();\n+   |     --------- `foo` from trait\n+LL |     fn bar();\n+   |     --------- `bar` from trait\n+LL |     fn qux();\n+   |     --------- `qux` from trait\n+...\n+LL | impl Foo for A {\n+   | ^^^^^^^^^^^^^^ missing `Type`, `foo`, `bar`, `qux` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `Const`\n+  --> $DIR/suggest-trait-items.rs:40:1\n+   |\n+LL |     const Const: i32;\n+   |     ----------------- `Const` from trait\n+...\n+LL | impl Bar for B {\n+   | ^^^^^^^^^^^^^^ missing `Const` in implementation\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0046, E0407, E0437, E0438.\n+For more information about an error, try `rustc --explain E0046`."}]}