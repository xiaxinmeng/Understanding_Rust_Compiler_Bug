{"sha": "881e1c1a8b85cc784cf4d982203a1d26d16ba610", "node_id": "C_kwDOAAsO6NoAKDg4MWUxYzFhOGI4NWNjNzg0Y2Y0ZDk4MjIwM2ExZDI2ZDE2YmE2MTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-19T06:08:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T06:08:51Z"}, "message": "Rollup merge of #97183 - oli-obk:tait_ice_async, r=jackh726\n\nwf-check generators\n\nfixes #90409\n\nWe should not rely on generators being well formed by construction now that they can get used via type alias impl trait (and thus users can choose generic arguments that are invalid). This can cause surprising behaviour if (definitely unsound) transmutes are used, and it's generally saner to just check for well formedness.", "tree": {"sha": "8001ebf4cf88046235d620714d594645a120903c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8001ebf4cf88046235d620714d594645a120903c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881e1c1a8b85cc784cf4d982203a1d26d16ba610", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1kp0CRBK7hj4Ov3rIwAAgxsIAHmfp2FMM6T0kKky7iBcbqsd\nmrLfWZOvClusQltEozqqCAHx4kSdwuCIbO1CT19BGaVSzVQ1GgfX0kb+BsuDCB5Y\ngDHKg4koRtnYa1pQKG/HH+caqKVQfz5ro8Q6pdhjSYptP45oxPNdlIrQICourH5u\nG8cmRRMdw1BfgGQV51OLlMr7PWws238t6tLZdUiIxuJ5aVPClsoC0V9TafkJHlrQ\nUxj3fWz2dObK1QP4tkOrDSSaUdxEcl7A7FEbtaQXIYqlS7jqIgP+D7X+YlNXvepn\nMq7Zmc7LAo2Is7HnGncrRVwAauvDf6+laJgji51LpnWaHi7TeUq2mVF9K5wno3I=\n=/Sq0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8001ebf4cf88046235d620714d594645a120903c\nparent 96c2df810b0b681fee63cae11ca63844792b6190\nparent f40326027accd96214b65d44cf9c357d23de426c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658210931 +0530\ncommitter GitHub <noreply@github.com> 1658210931 +0530\n\nRollup merge of #97183 - oli-obk:tait_ice_async, r=jackh726\n\nwf-check generators\n\nfixes #90409\n\nWe should not rely on generators being well formed by construction now that they can get used via type alias impl trait (and thus users can choose generic arguments that are invalid). This can cause surprising behaviour if (definitely unsound) transmutes are used, and it's generally saner to just check for well formedness.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881e1c1a8b85cc784cf4d982203a1d26d16ba610", "html_url": "https://github.com/rust-lang/rust/commit/881e1c1a8b85cc784cf4d982203a1d26d16ba610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881e1c1a8b85cc784cf4d982203a1d26d16ba610/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c2df810b0b681fee63cae11ca63844792b6190", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c2df810b0b681fee63cae11ca63844792b6190", "html_url": "https://github.com/rust-lang/rust/commit/96c2df810b0b681fee63cae11ca63844792b6190"}, {"sha": "f40326027accd96214b65d44cf9c357d23de426c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40326027accd96214b65d44cf9c357d23de426c", "html_url": "https://github.com/rust-lang/rust/commit/f40326027accd96214b65d44cf9c357d23de426c"}], "stats": {"total": 111, "additions": 101, "deletions": 10}, "files": [{"sha": "34b37c4e410280d6c383ebe59777e9df34f91648", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -295,6 +295,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     /// This is called much less often than `needs_process_obligation`, so we\n     /// never inline it.\n     #[inline(never)]\n+    #[instrument(level = \"debug\", skip(self, pending_obligation))]\n     fn process_obligation(\n         &mut self,\n         pending_obligation: &mut PendingPredicateObligation<'tcx>,\n@@ -303,7 +304,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &mut pending_obligation.obligation;\n \n-        debug!(?obligation, \"process_obligation pre-resolve\");\n+        debug!(?obligation, \"pre-resolve\");\n \n         if obligation.predicate.has_infer_types_or_consts() {\n             obligation.predicate =\n@@ -312,8 +313,6 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &pending_obligation.obligation;\n \n-        debug!(?obligation, ?obligation.cause, \"process_obligation\");\n-\n         let infcx = self.selcx.infcx();\n \n         if obligation.predicate.has_projections() {"}, {"sha": "6b758ba63cd0f73e094c69f6a308499de3b14a4b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -559,14 +559,16 @@ impl<'tcx> WfPredicates<'tcx> {\n                     }\n                 }\n \n-                ty::Generator(..) => {\n+                ty::Generator(did, substs, ..) => {\n                     // Walk ALL the types in the generator: this will\n                     // include the upvar types as well as the yield\n                     // type. Note that this is mildly distinct from\n                     // the closure case, where we have to be careful\n                     // about the signature of the closure. We don't\n                     // have the problem of implied bounds here since\n                     // generators don't take arguments.\n+                    let obligations = self.nominal_obligations(did, substs);\n+                    self.out.extend(obligations);\n                 }\n \n                 ty::Closure(did, substs) => {\n@@ -618,11 +620,9 @@ impl<'tcx> WfPredicates<'tcx> {\n                 }\n \n                 ty::Opaque(did, substs) => {\n-                    // all of the requirements on type parameters\n-                    // should've been checked by the instantiation\n-                    // of whatever returned this exact `impl Trait`.\n-\n-                    // for named opaque `impl Trait` types we still need to check them\n+                    // All of the requirements on type parameters\n+                    // have already been checked for `impl Trait` in\n+                    // return position. We do need to check type-alias-impl-trait though.\n                     if ty::is_impl_trait_defn(self.tcx, did).is_none() {\n                         let obligations = self.nominal_obligations(did, substs);\n                         self.out.extend(obligations);\n@@ -684,6 +684,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn nominal_obligations(\n         &mut self,\n         def_id: DefId,\n@@ -698,6 +699,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         }\n \n         let predicates = predicates.instantiate(self.tcx, substs);\n+        trace!(\"{:#?}\", predicates);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())"}, {"sha": "4952a082586d0704f1a0b7ae4be69693c153d195", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // edition:2018\n \n #![feature(generic_associated_types)]\n@@ -34,6 +33,7 @@ where\n \n     fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {\n         async move { todo!() }\n+        //~^ ERROR: the size for values of type `A` cannot be known at compilation time\n     }\n }\n "}, {"sha": "5241d85a5f964a5433527dc65b989a24235a612b", "filename": "src/test/ui/generic-associated-types/issue-88287.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/issue-88287.rs:35:9\n+   |\n+LL | type SearchFutureTy<'f, A, B: 'f>\n+   |                         - this type parameter needs to be `std::marker::Sized`\n+...\n+LL |         async move { todo!() }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+note: required by a bound in `<T as SearchableResourceExt<Criteria>>`\n+  --> $DIR/issue-88287.rs:25:6\n+   |\n+LL | impl<T, Criteria> SearchableResourceExt<Criteria> for T\n+   |      ^ required by this bound in `<T as SearchableResourceExt<Criteria>>`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL -     A: SearchableResource<B> + ?Sized + 'f,\n+LL +     A: SearchableResource<B> + 'f,\n+   |\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     T: SearchableResource<Criteria> + ?Sized,\n+   |                                     ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "348586fa26bcc9b36507111795106db58c2629a0", "filename": "src/test/ui/lifetimes/issue-76168-hr-outlives-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-76168-hr-outlives-2.rs?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+// check-pass\n+\n+trait Trait<Input> {\n+    type Output;\n+}\n+\n+async fn walk<F>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+async fn walk2<F: 'static>(filter: F)\n+where\n+    for<'a> F: Trait<&'a u32> + 'a,\n+    for<'a> <F as Trait<&'a u32>>::Output: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "56323216effa4da9bb651d5c1d3af64e0b96d2a0", "filename": "src/test/ui/type-alias-impl-trait/future.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.rs?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -0,0 +1,22 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2021\n+// compile-flags: --crate-type=lib\n+\n+use std::future::Future;\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFuture<B> = impl Future<Output = ()>;\n+\n+fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+    async move { bar.bar() }\n+    //~^ ERROR: the trait bound `B: Bar` is not satisfied\n+}\n+\n+pub fn mainish(ctx: &mut std::task::Context) {\n+    let boom: FooFuture<u32> = unsafe { core::mem::zeroed() };\n+    Box::pin(boom).as_mut().poll(ctx);\n+}"}, {"sha": "7e76c120a2566c1c6733da51182ed8b5c062f9b6", "filename": "src/test/ui/type-alias-impl-trait/future.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881e1c1a8b85cc784cf4d982203a1d26d16ba610/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffuture.stderr?ref=881e1c1a8b85cc784cf4d982203a1d26d16ba610", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `B: Bar` is not satisfied\n+  --> $DIR/future.rs:15:5\n+   |\n+LL |     async move { bar.bar() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/future.rs:14:11\n+   |\n+LL | fn foo<B: Bar>(bar: B) -> FooFuture<B> {\n+   |           ^^^ required by this bound in `foo`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type FooFuture<B: Bar> = impl Future<Output = ()>;\n+   |                 +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}