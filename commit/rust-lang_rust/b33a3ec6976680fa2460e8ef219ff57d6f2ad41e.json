{"sha": "b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzM2EzZWM2OTc2NjgwZmEyNDYwZThlZjIxOWZmNTdkNmYyYWQ0MWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-20T12:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-20T12:55:36Z"}, "message": "Merge pull request #1180 from bjorn3/rust_build_system\n\nRewrite part of the build system in rust", "tree": {"sha": "2e7c3a822a3a0a46b6151656e04ad9eadeb00e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7c3a822a3a0a46b6151656e04ad9eadeb00e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzzrICRBK7hj4Ov3rIwAA+3IIAHx9+aE8bW5e0pJuTDBmsGPt\n55ONhU1QUFKTbKqxbt0pwtgAuWxl3GZC+ETjzrVGNFqLGemfYEGfnpvQjLPBwDE0\nvlIDalZfM8hYMkYzqN7rBwdPYOK+vZWJ0aAWhPiOu9j7jn7CW78I3jsE9KzFJZfv\nEdnf/3FxlXJ6MowVFiP2AvxdK/WFNJxcgxH+h7qu90hjCdrEEU/a1EAYyIv8ynvk\nOUCwsHGVhlCkRp55WX7YrFiYGUY/0vD63f1Rbx212WWTFMf+Ijj1NoM6t+YrblYG\nlxgXN38iNbq7GVOn8bmvff8M3h2XyssWj5cj5iCWDbabGHRJRE+H9SOpbrYKSJ4=\n=9n1M\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e7c3a822a3a0a46b6151656e04ad9eadeb00e51\nparent 0ddb937624265f167f66b034422252d00801cd29\nparent 03c9ecfb306f00fa39595c63d062f7ab98d6f19f\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1624193736 +0200\ncommitter GitHub <noreply@github.com> 1624193736 +0200\n\nMerge pull request #1180 from bjorn3/rust_build_system\n\nRewrite part of the build system in rust"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "html_url": "https://github.com/rust-lang/rust/commit/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddb937624265f167f66b034422252d00801cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddb937624265f167f66b034422252d00801cd29", "html_url": "https://github.com/rust-lang/rust/commit/0ddb937624265f167f66b034422252d00801cd29"}, {"sha": "03c9ecfb306f00fa39595c63d062f7ab98d6f19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c9ecfb306f00fa39595c63d062f7ab98d6f19f", "html_url": "https://github.com/rust-lang/rust/commit/03c9ecfb306f00fa39595c63d062f7ab98d6f19f"}], "stats": {"total": 1077, "additions": 803, "deletions": 274}, "files": [{"sha": "61da6a2491c52fcd3270195db5fb441e89c0a496", "filename": ".cirrus.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cirrus.yml?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -14,7 +14,7 @@ task:\n     - . $HOME/.cargo/env\n     - git config --global user.email \"user@example.com\"\n     - git config --global user.name \"User\"\n-    - ./prepare.sh\n+    - ./y.rs prepare\n   test_script:\n     - . $HOME/.cargo/env\n     - # Enable backtraces for easier debugging"}, {"sha": "4442cbe5f947751704da501e4c2d9a32da437b1c", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -53,7 +53,7 @@ jobs:\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n \n     - name: Test\n       env:\n@@ -87,3 +87,63 @@ jobs:\n       with:\n         name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n         path: cg_clif.tar.xz\n+\n+  build_windows:\n+    runs-on: windows-latest\n+    timeout-minutes: 60\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    #- name: Cache cargo installed crates\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: ~/.cargo/bin\n+    #    key: ${{ runner.os }}-cargo-installed-crates\n+\n+    #- name: Cache cargo registry and index\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: |\n+    #        ~/.cargo/registry\n+    #        ~/.cargo/git\n+    #    key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    #- name: Cache cargo target dir\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: target\n+    #    key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        git config --global core.autocrlf false\n+        rustup set default-host x86_64-pc-windows-gnu\n+        rustc y.rs -o y.exe -g\n+        ./y.exe prepare\n+\n+    - name: Build\n+      #name: Test\n+      run: |\n+        # Enable backtraces for easier debugging\n+        #export RUST_BACKTRACE=1\n+\n+        # Reduce amount of benchmark runs as they are slow\n+        #export COMPILE_RUNS=2\n+        #export RUN_RUNS=2\n+\n+        # Enable extra checks\n+        #export CG_CLIF_ENABLE_VERIFIER=1\n+\n+        ./y.exe build\n+\n+    #- name: Package prebuilt cg_clif\n+    #  run: tar cvfJ cg_clif.tar.xz build\n+\n+    #- name: Upload prebuilt cg_clif\n+    #  uses: actions/upload-artifact@v2\n+    #  with:\n+    #    name: cg_clif-${{ runner.os }}\n+    #    path: cg_clif.tar.xz"}, {"sha": "1c08e5ece33d27e67fc01b5012f1ac237f2fc51c", "filename": ".github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustc.yml?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -34,7 +34,7 @@ jobs:\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n \n     - name: Test\n       run: |\n@@ -72,7 +72,7 @@ jobs:\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n \n     - name: Test\n       run: |"}, {"sha": "3e01020465598ebe74f648cb48d0ed4728eacb6f", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -6,6 +6,7 @@ perf.data\n perf.data.old\n *.events\n *.string*\n+/y.bin\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins"}, {"sha": "38ffef5ac99e14e2192a2084de137a82b415f31c", "filename": ".vscode/settings.json", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Fsettings.json?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -1,7 +1,9 @@\n {\n     // source for rustc_* is not included in the rust-src component; disable the errors about this\n     \"rust-analyzer.diagnostics.disabled\": [\"unresolved-extern-crate\", \"unresolved-macro-call\"],\n-    \"rust-analyzer.assist.importMergeBehavior\": \"last\",\n+    \"rust-analyzer.assist.importGranularity\": \"module\",\n+    \"rust-analyzer.assist.importEnforceGranularity\": true,\n+    \"rust-analyzer.assist.importPrefix\": \"by_crate\",\n     \"rust-analyzer.cargo.runBuildScripts\": true,\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n@@ -49,6 +51,23 @@\n                     \"cfg\": [],\n                 },\n             ]\n+        },\n+        {\n+            \"roots\": [\"./y.rs\"],\n+            \"crates\": [\n+                {\n+                    \"root_module\": \"./y.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [{ \"crate\": 1, \"name\": \"std\" }],\n+                    \"cfg\": [],\n+                },\n+                {\n+                    \"root_module\": \"./build_sysroot/sysroot_src/library/std/src/lib.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [],\n+                    \"cfg\": [],\n+                },\n+            ]\n         }\n     ]\n }"}, {"sha": "dad8ed90b53b8307fb1c4b72d40b15a59c2878bd", "filename": "Readme.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -10,8 +10,8 @@ If not please open an issue.\n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift.git\n $ cd rustc_codegen_cranelift\n-$ ./prepare.sh # download and patch sysroot src and install hyperfine for benchmarking\n-$ ./build.sh\n+$ ./y.rs prepare # download and patch sysroot src and install hyperfine for benchmarking\n+$ ./y.rs build\n ```\n \n To run the test suite replace the last command with:\n@@ -20,7 +20,7 @@ To run the test suite replace the last command with:\n $ ./test.sh\n ```\n \n-This will implicitly build cg_clif too. Both `build.sh` and `test.sh` accept a `--debug` argument to\n+This will implicitly build cg_clif too. Both `y.rs build` and `test.sh` accept a `--debug` argument to\n build in debug mode.\n \n Alternatively you can download a pre built version from [GHA]. It is listed in the artifacts section\n@@ -32,12 +32,12 @@ of workflow runs. Unfortunately due to GHA restrictions you need to be logged in\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "086b9617fdfa836250813a61ebd302d56a987a20", "filename": "build.sh", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,88 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-# Settings\n-export CHANNEL=\"release\"\n-build_sysroot=\"clif\"\n-target_dir='build'\n-while [[ $# != 0 ]]; do\n-    case $1 in\n-        \"--debug\")\n-            export CHANNEL=\"debug\"\n-            ;;\n-        \"--sysroot\")\n-            build_sysroot=$2\n-            shift\n-            ;;\n-        \"--target-dir\")\n-            target_dir=$2\n-            shift\n-            ;;\n-        *)\n-            echo \"Unknown flag '$1'\"\n-            echo \"Usage: ./build.sh [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\"\n-            exit 1\n-            ;;\n-    esac\n-    shift\n-done\n-\n-# Build cg_clif\n-unset CARGO_TARGET_DIR\n-unamestr=$(uname)\n-if [[ \"$unamestr\" == 'Linux' || \"$unamestr\" == \"FreeBSD\" ]]; then\n-   export RUSTFLAGS='-Clink-arg=-Wl,-rpath=$ORIGIN/../lib '$RUSTFLAGS\n-elif [[ \"$unamestr\" == 'Darwin' ]]; then\n-   export RUSTFLAGS='-Csplit-debuginfo=unpacked -Clink-arg=-Wl,-rpath,@loader_path/../lib -Zosx-rpath-install-name '$RUSTFLAGS\n-else\n-   echo \"Unsupported os $unamestr\"\n-   exit 1\n-fi\n-if [[ \"$CHANNEL\" == \"release\" ]]; then\n-    cargo build --release\n-else\n-    cargo build\n-fi\n-\n-source scripts/ext_config.sh\n-\n-rm -rf \"$target_dir\"\n-mkdir \"$target_dir\"\n-mkdir \"$target_dir\"/bin \"$target_dir\"/lib\n-ln target/$CHANNEL/cg_clif{,_build_sysroot} \"$target_dir\"/bin\n-ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n-ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n-\n-mkdir -p \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-mkdir -p \"$target_dir/lib/rustlib/$HOST_TRIPLE/lib/\"\n-if [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-    cp $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib/*.o \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-fi\n-\n-case \"$build_sysroot\" in\n-    \"none\")\n-        ;;\n-    \"llvm\")\n-        cp -r $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib \"$target_dir/lib/rustlib/$TARGET_TRIPLE/\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            cp -r $(rustc --print sysroot)/lib/rustlib/$HOST_TRIPLE/lib \"$target_dir/lib/rustlib/$HOST_TRIPLE/\"\n-        fi\n-        ;;\n-    \"clif\")\n-        echo \"[BUILD] sysroot\"\n-        dir=$(pwd)\n-        cd \"$target_dir\"\n-        time \"$dir/build_sysroot/build_sysroot.sh\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            time TARGET_TRIPLE=\"$HOST_TRIPLE\" \"$dir/build_sysroot/build_sysroot.sh\"\n-        fi\n-        cp lib/rustlib/*/lib/libstd-* lib/\n-        ;;\n-    *)\n-        echo \"Unknown sysroot kind \\`$build_sysroot\\`.\"\n-        echo \"The allowed values are:\"\n-        echo \"    none A sysroot that doesn't contain the standard library\"\n-        echo \"    llvm Copy the sysroot from rustc compiled by cg_llvm\"\n-        echo \"    clif Build a new sysroot using cg_clif\"\n-        exit 1\n-esac"}, {"sha": "0354304e55bf77477039d6737749d845128ac80c", "filename": "build_sysroot/build_sysroot.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Requires the CHANNEL env var to be set to `debug` or `release.`\n-\n-set -e\n-\n-source ./config.sh\n-\n-dir=$(pwd)\n-\n-# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n-# build scripts are still compiled using cg_llvm.\n-export RUSTC=$dir\"/bin/cg_clif_build_sysroot\"\n-export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n-\n-cd \"$(dirname \"$0\")\"\n-\n-# Cleanup for previous run\n-#     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n-\n-# We expect the target dir in the default location. Guard against the user changing it.\n-export CARGO_TARGET_DIR=target\n-\n-# Build libs\n-export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n-export __CARGO_DEFAULT_LIB_METADATA=\"cg_clif\"\n-if [[ \"$1\" != \"--debug\" ]]; then\n-    sysroot_channel='release'\n-    # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=3\" cargo build --target \"$TARGET_TRIPLE\" --release\n-else\n-    sysroot_channel='debug'\n-    cargo build --target \"$TARGET_TRIPLE\"\n-fi\n-\n-# Copy files to sysroot\n-ln \"target/$TARGET_TRIPLE/$sysroot_channel/deps/\"* \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-rm \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"*.{rmeta,d}"}, {"sha": "7032a52a3d398cc354f06fa2ccaaf03314571a2f", "filename": "build_sysroot/prepare_sysroot_src.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/build_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/build_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fprepare_sysroot_src.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-cd \"$(dirname \"$0\")\"\n-\n-SRC_DIR=\"$(dirname \"$(rustup which rustc)\")/../lib/rustlib/src/rust/\"\n-DST_DIR=\"sysroot_src\"\n-\n-if [ ! -e \"$SRC_DIR\" ]; then\n-    echo \"Please install rust-src component\"\n-    exit 1\n-fi\n-\n-rm -rf $DST_DIR\n-mkdir -p $DST_DIR/library\n-cp -a \"$SRC_DIR/library\" $DST_DIR/\n-\n-pushd $DST_DIR\n-echo \"[GIT] init\"\n-git init\n-echo \"[GIT] add\"\n-git add .\n-echo \"[GIT] commit\"\n-git commit -m \"Initial commit\" -q\n-for file in $(ls ../../patches/ | grep -v patcha); do\n-echo \"[GIT] apply\" \"$file\"\n-git apply ../../patches/\"$file\"\n-git add -A\n-git commit --no-gpg-sign -m \"Patch $file\"\n-done\n-popd\n-\n-git clone https://github.com/rust-lang/compiler-builtins.git || echo \"rust-lang/compiler-builtins has already been cloned\"\n-pushd compiler-builtins\n-git checkout -- .\n-git checkout 0.1.45\n-git apply ../../crate_patches/000*-compiler-builtins-*.patch\n-popd\n-\n-echo \"Successfully prepared sysroot source for building\""}, {"sha": "db046be1866b20f564b61af18fe8484dc75480ed", "filename": "build_system/build_backend.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,39 @@\n+use std::env;\n+use std::process::Command;\n+\n+pub(crate) fn build_backend(channel: &str) -> String {\n+    let mut cmd = Command::new(\"cargo\");\n+    cmd.arg(\"build\");\n+\n+    match channel {\n+        \"debug\" => {}\n+        \"release\" => {\n+            cmd.arg(\"--release\");\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    if cfg!(unix) {\n+        if cfg!(target_os = \"macos\") {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Csplit-debuginfo=unpacked \\\n+                -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n+                -Zosx-rpath-install-name\"\n+                    .to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        } else {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Clink-arg=-Wl,-rpath=$ORIGIN/../lib \".to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        }\n+    }\n+\n+    eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n+    crate::utils::spawn_and_wait(cmd);\n+\n+    crate::rustc_info::get_file_name(\"rustc_codegen_cranelift\", \"dylib\")\n+}"}, {"sha": "507af3f9aa797e70e1d39ee914a766e02feb56c5", "filename": "build_system/build_sysroot.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,185 @@\n+use std::env;\n+use std::fs;\n+use std::path::Path;\n+use std::process::{self, Command};\n+\n+use crate::rustc_info::get_file_name;\n+use crate::utils::{spawn_and_wait, try_hard_link};\n+use crate::SysrootKind;\n+\n+pub(crate) fn build_sysroot(\n+    channel: &str,\n+    sysroot_kind: SysrootKind,\n+    target_dir: &Path,\n+    cg_clif_dylib: String,\n+    host_triple: &str,\n+    target_triple: &str,\n+) {\n+    if target_dir.exists() {\n+        fs::remove_dir_all(target_dir).unwrap();\n+    }\n+    fs::create_dir_all(target_dir.join(\"bin\")).unwrap();\n+    fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n+\n+    // Copy the backend\n+    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(get_file_name(file, \"bin\")),\n+            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n+        );\n+    }\n+\n+    if cfg!(windows) {\n+        // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+        // binaries.\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n+            target_dir.join(\"bin\").join(cg_clif_dylib),\n+        );\n+    } else {\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n+            target_dir.join(\"lib\").join(cg_clif_dylib),\n+        );\n+    }\n+\n+    // Build and copy cargo wrapper\n+    let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+    build_cargo_wrapper_cmd\n+        .arg(\"scripts/cargo.rs\")\n+        .arg(\"-o\")\n+        .arg(target_dir.join(\"cargo\"))\n+        .arg(\"-g\");\n+    spawn_and_wait(build_cargo_wrapper_cmd);\n+\n+    let default_sysroot = crate::rustc_info::get_default_sysroot();\n+\n+    let rustlib = target_dir.join(\"lib\").join(\"rustlib\");\n+    let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n+    let target_rustlib_lib = rustlib.join(target_triple).join(\"lib\");\n+    fs::create_dir_all(&host_rustlib_lib).unwrap();\n+    fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n+    if target_triple == \"x86_64-pc-windows-gnu\" {\n+        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\").exists() {\n+            eprintln!(\n+                \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n+                to compile a sysroot for it.\",\n+            );\n+            process::exit(1);\n+        }\n+        for file in fs::read_dir(\n+            default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+        )\n+        .unwrap()\n+        {\n+            let file = file.unwrap().path();\n+            if file.extension().map_or(true, |ext| ext.to_str().unwrap() != \"o\") {\n+                continue; // only copy object files\n+            }\n+            try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+        }\n+    }\n+\n+    match sysroot_kind {\n+        SysrootKind::None => {} // Nothing to do\n+        SysrootKind::Llvm => {\n+            for file in fs::read_dir(\n+                default_sysroot.join(\"lib\").join(\"rustlib\").join(host_triple).join(\"lib\"),\n+            )\n+            .unwrap()\n+            {\n+                let file = file.unwrap().path();\n+                let file_name_str = file.file_name().unwrap().to_str().unwrap();\n+                if file_name_str.contains(\"rustc_\")\n+                    || file_name_str.contains(\"chalk\")\n+                    || file_name_str.contains(\"tracing\")\n+                    || file_name_str.contains(\"regex\")\n+                {\n+                    // These are large crates that are part of the rustc-dev component and are not\n+                    // necessary to run regular programs.\n+                    continue;\n+                }\n+                try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n+            }\n+\n+            if target_triple != host_triple {\n+                for file in fs::read_dir(\n+                    default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+                )\n+                .unwrap()\n+                {\n+                    let file = file.unwrap().path();\n+                    try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+        SysrootKind::Clif => {\n+            build_clif_sysroot_for_triple(channel, target_dir, target_triple);\n+\n+            if host_triple != target_triple {\n+                build_clif_sysroot_for_triple(channel, target_dir, host_triple);\n+            }\n+\n+            // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n+            // libstd.\n+            for file in fs::read_dir(host_rustlib_lib).unwrap() {\n+                let file = file.unwrap().path();\n+                if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n+                    try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn build_clif_sysroot_for_triple(channel: &str, target_dir: &Path, triple: &str) {\n+    let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n+\n+    let keep_sysroot =\n+        fs::read_to_string(\"config.txt\").unwrap().lines().any(|line| line.trim() == \"keep_sysroot\");\n+    if !keep_sysroot {\n+        // Cleanup the target dir with the exception of build scripts and the incremental cache\n+        for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n+            if build_dir.join(dir).exists() {\n+                fs::remove_dir_all(build_dir.join(dir)).unwrap();\n+            }\n+        }\n+    }\n+\n+    // Build sysroot\n+    let mut build_cmd = Command::new(\"cargo\");\n+    build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n+    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    if channel == \"release\" {\n+        build_cmd.arg(\"--release\");\n+        rustflags.push_str(\" -Zmir-opt-level=3\");\n+    }\n+    build_cmd.env(\"RUSTFLAGS\", rustflags);\n+    build_cmd.env(\n+        \"RUSTC\",\n+        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n+    );\n+    // FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n+    build_cmd.env(\"CARGO_INCREMENTAL\", \"0\").env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n+    spawn_and_wait(build_cmd);\n+\n+    // Copy all relevant files to the sysroot\n+    for entry in\n+        fs::read_dir(Path::new(\"build_sysroot/target\").join(triple).join(channel).join(\"deps\"))\n+            .unwrap()\n+    {\n+        let entry = entry.unwrap();\n+        if let Some(ext) = entry.path().extension() {\n+            if ext == \"rmeta\" || ext == \"d\" || ext == \"dSYM\" {\n+                continue;\n+            }\n+        } else {\n+            continue;\n+        };\n+        try_hard_link(\n+            entry.path(),\n+            target_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n+        );\n+    }\n+}"}, {"sha": "d26f24f88564330d608420d8ac293f5fec52080d", "filename": "build_system/prepare.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,126 @@\n+use std::env;\n+use std::ffi::OsStr;\n+use std::ffi::OsString;\n+use std::fs;\n+use std::path::Path;\n+use std::process::Command;\n+\n+use crate::rustc_info::{get_file_name, get_rustc_path};\n+use crate::utils::{copy_dir_recursively, spawn_and_wait};\n+\n+pub(crate) fn prepare() {\n+    prepare_sysroot();\n+\n+    eprintln!(\"[INSTALL] hyperfine\");\n+    Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n+\n+    clone_repo(\n+        \"rand\",\n+        \"https://github.com/rust-random/rand.git\",\n+        \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n+    );\n+    apply_patches(\"rand\", Path::new(\"rand\"));\n+\n+    clone_repo(\n+        \"regex\",\n+        \"https://github.com/rust-lang/regex.git\",\n+        \"341f207c1071f7290e3f228c710817c280c8dca1\",\n+    );\n+\n+    clone_repo(\n+        \"simple-raytracer\",\n+        \"https://github.com/ebobby/simple-raytracer\",\n+        \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    );\n+\n+    eprintln!(\"[LLVM BUILD] simple-raytracer\");\n+    let mut build_cmd = Command::new(\"cargo\");\n+    build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n+    spawn_and_wait(build_cmd);\n+    fs::copy(\n+        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n+        // FIXME use get_file_name here too once testing is migrated to rust\n+        \"simple-raytracer/raytracer_cg_llvm\",\n+    )\n+    .unwrap();\n+}\n+\n+fn prepare_sysroot() {\n+    let rustc_path = get_rustc_path();\n+    let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n+    let sysroot_src = env::current_dir().unwrap().join(\"build_sysroot\").join(\"sysroot_src\");\n+\n+    assert!(sysroot_src_orig.exists());\n+\n+    if sysroot_src.exists() {\n+        fs::remove_dir_all(&sysroot_src).unwrap();\n+    }\n+    fs::create_dir_all(sysroot_src.join(\"library\")).unwrap();\n+    eprintln!(\"[COPY] sysroot src\");\n+    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.join(\"library\"));\n+\n+    eprintln!(\"[GIT] init\");\n+    let mut git_init_cmd = Command::new(\"git\");\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_init_cmd);\n+\n+    let mut git_add_cmd = Command::new(\"git\");\n+    git_add_cmd.arg(\"add\").arg(\".\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_add_cmd);\n+\n+    let mut git_commit_cmd = Command::new(\"git\");\n+    git_commit_cmd\n+        .arg(\"commit\")\n+        .arg(\"-m\")\n+        .arg(\"Initial commit\")\n+        .arg(\"-q\")\n+        .current_dir(&sysroot_src);\n+    spawn_and_wait(git_commit_cmd);\n+\n+    apply_patches(\"sysroot\", &sysroot_src);\n+\n+    clone_repo(\n+        \"build_sysroot/compiler-builtins\",\n+        \"https://github.com/rust-lang/compiler-builtins.git\",\n+        \"0.1.45\",\n+    );\n+    apply_patches(\"compiler-builtins\", Path::new(\"build_sysroot/compiler-builtins\"));\n+}\n+\n+fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n+    eprintln!(\"[CLONE] {}\", repo);\n+    // Ignore exit code as the repo may already have been checked out\n+    Command::new(\"git\").arg(\"clone\").arg(repo).arg(target_dir).spawn().unwrap().wait().unwrap();\n+\n+    let mut clean_cmd = Command::new(\"git\");\n+    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(target_dir);\n+    spawn_and_wait(clean_cmd);\n+\n+    let mut checkout_cmd = Command::new(\"git\");\n+    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(target_dir);\n+    spawn_and_wait(checkout_cmd);\n+}\n+\n+fn get_patches(crate_name: &str) -> Vec<OsString> {\n+    let mut patches: Vec<_> = fs::read_dir(\"patches\")\n+        .unwrap()\n+        .map(|entry| entry.unwrap().path())\n+        .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n+        .map(|path| path.file_name().unwrap().to_owned())\n+        .filter(|file_name| {\n+            file_name.to_str().unwrap().split_once(\"-\").unwrap().1.starts_with(crate_name)\n+        })\n+        .collect();\n+    patches.sort();\n+    patches\n+}\n+\n+fn apply_patches(crate_name: &str, target_dir: &Path) {\n+    for patch in get_patches(crate_name) {\n+        eprintln!(\"[PATCH] {:?} <- {:?}\", target_dir.file_name().unwrap(), patch);\n+        let patch_arg = env::current_dir().unwrap().join(\"patches\").join(patch);\n+        let mut apply_patch_cmd = Command::new(\"git\");\n+        apply_patch_cmd.arg(\"am\").arg(patch_arg).arg(\"-q\").current_dir(target_dir);\n+        spawn_and_wait(apply_patch_cmd);\n+    }\n+}"}, {"sha": "3bf86d9a1145fd666c32dd7b1a904f42082f013a", "filename": "build_system/rustc_info.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,59 @@\n+use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n+\n+pub(crate) fn get_host_triple() -> String {\n+    let version_info =\n+        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n+    String::from_utf8(version_info)\n+        .unwrap()\n+        .lines()\n+        .to_owned()\n+        .find(|line| line.starts_with(\"host\"))\n+        .unwrap()\n+        .split(\":\")\n+        .nth(1)\n+        .unwrap()\n+        .trim()\n+        .to_owned()\n+}\n+\n+pub(crate) fn get_rustc_path() -> PathBuf {\n+    let rustc_path = Command::new(\"rustup\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"which\", \"rustc\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(rustc_path).unwrap().trim()).to_owned()\n+}\n+\n+pub(crate) fn get_default_sysroot() -> PathBuf {\n+    let default_sysroot = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n+}\n+\n+pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n+    let file_name = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\n+            \"--crate-name\",\n+            crate_name,\n+            \"--crate-type\",\n+            crate_type,\n+            \"--print\",\n+            \"file-names\",\n+            \"-\",\n+        ])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    let file_name = String::from_utf8(file_name).unwrap().trim().to_owned();\n+    assert!(!file_name.contains('\\n'));\n+    assert!(file_name.contains(crate_name));\n+    file_name\n+}"}, {"sha": "12b5d70fad853133384fb064e19fd9a2cb9d189a", "filename": "build_system/utils.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,35 @@\n+use std::fs;\n+use std::path::Path;\n+use std::process::{self, Command};\n+\n+#[track_caller]\n+pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n+    let src = src.as_ref();\n+    let dst = dst.as_ref();\n+    if let Err(_) = fs::hard_link(src, dst) {\n+        fs::copy(src, dst).unwrap(); // Fallback to copying if hardlinking failed\n+    }\n+}\n+\n+#[track_caller]\n+pub(crate) fn spawn_and_wait(mut cmd: Command) {\n+    if !cmd.spawn().unwrap().wait().unwrap().success() {\n+        process::exit(1);\n+    }\n+}\n+\n+pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n+    for entry in fs::read_dir(from).unwrap() {\n+        let entry = entry.unwrap();\n+        let filename = entry.file_name();\n+        if filename == \".\" || filename == \"..\" {\n+            continue;\n+        }\n+        if entry.metadata().unwrap().is_dir() {\n+            fs::create_dir(to.join(&filename)).unwrap();\n+            copy_dir_recursively(&from.join(&filename), &to.join(&filename));\n+        } else {\n+            fs::copy(from.join(&filename), to.join(&filename)).unwrap();\n+        }\n+    }\n+}"}, {"sha": "f707b9322af95df1a6a616b8a61cd92c69e39de8", "filename": "config.txt", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,7 @@\n+# This file allows configuring the build system.\n+\n+# Disables cleaning of the sysroot dir. This will cause old compiled artifacts to be re-used when\n+# the sysroot source hasn't changed. This is useful when the codegen backend hasn't been modified.\n+# This option can be changed while the build system is already running for as long as sysroot\n+# building hasn't started yet.\n+#keep_sysroot"}, {"sha": "aac44b62d0127a941dcdd4297db6829d56c5ac84", "filename": "docs/usage.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/docs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/docs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fusage.md?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -2,14 +2,14 @@\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n \n ## Cargo\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -30,7 +30,7 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh jit\n+$ $cg_clif_dir/build/cargo jit\n ```\n \n or\n@@ -44,7 +44,7 @@ first called. It currently does not work with multi-threaded programs. When a no\n function is called from another thread than the main thread, you will get an ICE.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh lazy-jit\n+$ $cg_clif_dir/build/cargo lazy-jit\n ```\n \n ## Shell"}, {"sha": "7daea99f5794d2103588c152a0ac02ca1b5b14b1", "filename": "patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "crate_patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch"}, {"sha": "01dc0fcc5376138bccca396b78e729a5942bf94c", "filename": "patches/0001-rand-Enable-c2-chacha-simd-feature.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-rand-Enable-c2-chacha-simd-feature.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "crate_patches/0001-rand-Enable-c2-chacha-simd-feature.patch"}, {"sha": "19fd20d7269017cfa1dd21a9db67999d61d4b619", "filename": "patches/0002-rand-Disable-failing-test.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0002-rand-Disable-failing-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0002-rand-Disable-failing-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-rand-Disable-failing-test.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "crate_patches/0002-rand-Disable-failing-test.patch"}, {"sha": "ba0eaacd82870fd0a12952989c55b70317ef3b3a", "filename": "patches/0022-sysroot-Disable-not-compiling-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0022-sysroot-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0022-sysroot-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-sysroot-Disable-not-compiling-tests.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "patches/0022-core-Disable-not-compiling-tests.patch"}, {"sha": "5d2c3049f60ebfb03d44e5885d14390d1e0371d2", "filename": "patches/0023-sysroot-Ignore-failing-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0023-sysroot-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0023-sysroot-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-sysroot-Ignore-failing-tests.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "patches/0023-core-Ignore-failing-tests.patch"}, {"sha": "32e5930969061f0231ecc6e89c72eb77be7002cb", "filename": "patches/0027-sysroot-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/patches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-sysroot-128bit-atomic-operations.patch?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "previous_filename": "patches/0027-Disable-128bit-atomic-operations.patch"}, {"sha": "64c097261c908bf6909aec2789646e998552f4ee", "filename": "prepare.sh", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/prepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/prepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,29 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-./build_sysroot/prepare_sysroot_src.sh\n-cargo install hyperfine || echo \"Skipping hyperfine install\"\n-\n-git clone https://github.com/rust-random/rand.git || echo \"rust-random/rand has already been cloned\"\n-pushd rand\n-git checkout -- .\n-git checkout 0f933f9c7176e53b2a3c7952ded484e1783f0bf1\n-git am ../crate_patches/*-rand-*.patch\n-popd\n-\n-git clone https://github.com/rust-lang/regex.git || echo \"rust-lang/regex has already been cloned\"\n-pushd regex\n-git checkout -- .\n-git checkout 341f207c1071f7290e3f228c710817c280c8dca1\n-popd\n-\n-git clone https://github.com/ebobby/simple-raytracer || echo \"ebobby/simple-raytracer has already been cloned\"\n-pushd simple-raytracer\n-git checkout -- .\n-git checkout 804a7a21b9e673a482797aa289a18ed480e4d813\n-\n-# build with cg_llvm for perf comparison\n-unset CARGO_TARGET_DIR\n-cargo build\n-mv target/debug/main raytracer_cg_llvm\n-popd"}, {"sha": "5cb352a1aff3562e18c8fc7ac22395511f22fdd2", "filename": "scripts/cargo.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,78 @@\n+use std::env;\n+#[cfg(unix)]\n+use std::os::unix::process::CommandExt;\n+use std::path::PathBuf;\n+use std::process::{Command, Stdio};\n+\n+fn main() {\n+    if env::var(\"RUSTC_WRAPPER\").map_or(false, |wrapper| wrapper.contains(\"sccache\")) {\n+        eprintln!(\n+            \"\\x1b[1;93m=== Warning: Unsetting RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n+        );\n+        env::remove_var(\"RUSTC_WRAPPER\");\n+    }\n+\n+    let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n+\n+    env::set_var(\"RUSTC\", sysroot.join(\"bin/cg_clif\".to_string() + env::consts::EXE_SUFFIX));\n+\n+    let mut rustdoc_flags = env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new());\n+    rustdoc_flags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n+    rustdoc_flags.push_str(\n+        sysroot\n+            .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n+            .join(\n+                env::consts::DLL_PREFIX.to_string()\n+                    + \"rustc_codegen_cranelift\"\n+                    + env::consts::DLL_SUFFIX,\n+            )\n+            .to_str()\n+            .unwrap(),\n+    );\n+    rustdoc_flags.push_str(\" --sysroot \");\n+    rustdoc_flags.push_str(sysroot.to_str().unwrap());\n+    env::set_var(\"RUSTDOCFLAGS\", rustdoc_flags);\n+\n+    let default_sysroot = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    let default_sysroot = std::str::from_utf8(&default_sysroot).unwrap().trim();\n+\n+    // Ensure that the right toolchain is used\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+\n+    let args: Vec<_> = match env::args().nth(1).as_deref() {\n+        Some(\"jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit\".to_string()])\n+                .collect()\n+        }\n+        Some(\"lazy-jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit-lazy\".to_string()])\n+                .collect()\n+        }\n+        _ => env::args().skip(1).collect(),\n+    };\n+\n+    #[cfg(unix)]\n+    Command::new(\"cargo\").args(args).exec();\n+\n+    #[cfg(not(unix))]\n+    std::process::exit(\n+        Command::new(\"cargo\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+    );\n+}"}, {"sha": "267b5d99a08da76639068bd5efd418f6c65a66a1", "filename": "scripts/cargo.sh", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,18 +0,0 @@\n-#!/usr/bin/env bash\n-\n-dir=$(dirname \"$0\")\n-source \"$dir/config.sh\"\n-\n-# read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat \"$dir/rust-toolchain\" | grep channel | sed \"s/channel = \\\"\\(.*\\)\\\"/\\1/\")\n-\n-cmd=$1\n-shift || true\n-\n-if [[ \"$cmd\" = \"jit\" ]]; then\n-RUSTFLAGS=\"-Cprefer-dynamic\" cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit\n-elif [[ \"$cmd\" = \"lazy-jit\" ]]; then\n-RUSTFLAGS=\"-Cprefer-dynamic\" cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit-lazy\n-else\n-cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n-fi"}, {"sha": "d316a7c698128f2d03f9d025dbf8e7826b2f3275", "filename": "scripts/config.sh", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -2,26 +2,5 @@\n \n set -e\n \n-dylib=$(echo \"\" | rustc --print file-names --crate-type dylib --crate-name rustc_codegen_cranelift -)\n-\n-if echo \"$RUSTC_WRAPPER\" | grep sccache; then\n-echo\n-echo -e \"\\x1b[1;93m=== Warning: Unset RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n-echo\n-export RUSTC_WRAPPER=\n-fi\n-\n-dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\"; pwd)\n-\n-export RUSTC=$dir\"/bin/cg_clif\"\n-\n-export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$dir'/lib/'$dylib' --sysroot '$dir\n-\n-# FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$(uname)\" == 'Darwin' ]]; then\n-   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n-fi\n-\n-export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:\"$dir\"/lib\"\n+export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH"}, {"sha": "11d6c4c83186743f2751a2403c2996eab66746be", "filename": "scripts/ext_config.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fext_config.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -1,6 +1,6 @@\n # Note to people running shellcheck: this file should only be sourced, not executed directly.\n \n-# Various env vars that should only be set for the build system but not for cargo.sh\n+# Various env vars that should only be set for the build system\n \n set -e\n \n@@ -25,3 +25,8 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n       echo \"Unknown non-native platform\"\n    fi\n fi\n+\n+# FIXME fix `#[linkage = \"extern_weak\"]` without this\n+if [[ \"$(uname)\" == 'Darwin' ]]; then\n+   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n+fi"}, {"sha": "9e196afbe4f57c38b36576fb9621f4cee56373b5", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -2,9 +2,10 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-source build/config.sh\n+source scripts/config.sh\n+RUSTC=\"$(pwd)/build/bin/cg_clif\"\n popd\n-PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS -Cllvm-args=mode=jit -Cprefer-dynamic $0\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "cc34c08088665bc19cdea842e961593052c28e50", "filename": "scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustup.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -17,7 +17,7 @@ case $1 in\n         done\n \n         ./clean_all.sh\n-        ./prepare.sh\n+        ./y.rs prepare\n \n         (cd build_sysroot && cargo update)\n "}, {"sha": "52adaaa8de673d3661903b9353ed96ec1bbbb5dc", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -1,8 +1,8 @@\n #!/bin/bash\n set -e\n \n-./build.sh\n-source build/config.sh\n+./y.rs build\n+source scripts/config.sh\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true"}, {"sha": "c875aad2849134a51d7af6234b0e18890b2e0a30", "filename": "scripts/tests.sh", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -2,9 +2,10 @@\n \n set -e\n \n-source build/config.sh\n+source scripts/config.sh\n source scripts/ext_config.sh\n-MY_RUSTC=\"$RUSTC $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+export RUSTC=false # ensure that cg_llvm isn't accidentally used\n+MY_RUSTC=\"$(pwd)/build/bin/cg_clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n@@ -75,64 +76,64 @@ function base_sysroot_tests() {\n \n function extended_sysroot_tests() {\n     pushd rand\n-    cargo clean\n+    ../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-random/rand\"\n-        ../build/cargo.sh test --workspace\n+        ../build/cargo test --workspace\n     else\n         echo \"[AOT] rust-random/rand\"\n-        ../build/cargo.sh build --workspace --target $TARGET_TRIPLE --tests\n+        ../build/cargo build --workspace --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo.sh build\"\n+        \"../build/cargo build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n         hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n-        cargo clean\n+        ../build/cargo clean\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo.sh build --target $TARGET_TRIPLE\n+        ../build/cargo build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    cargo clean\n+    ../../../../../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo.sh test\n+        ../../../../../build/cargo test\n     else\n-        ../../../../../build/cargo.sh build --target $TARGET_TRIPLE --tests\n+        ../../../../../build/cargo build --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    cargo clean\n+    ../build/cargo clean\n     export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    ../build/cargo build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         cat examples/regexdna-input.txt \\\n-            | ../build/cargo.sh run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | ../build/cargo run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n             | grep -v \"Spawned thread\" > res.txt\n         diff -u res.txt examples/regexdna-output.txt\n     fi\n \n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+        ../build/cargo test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     else\n         echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo.sh build --tests --target $TARGET_TRIPLE\n+        ../build/cargo build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n }"}, {"sha": "a10924628bb0eba9350b56f5603ead5b068b75f4", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -1,13 +1,13 @@\n #!/usr/bin/env bash\n set -e\n \n-./build.sh --sysroot none \"$@\"\n+./y.rs build --sysroot none \"$@\"\n \n rm -r target/out || true\n \n scripts/tests.sh no_sysroot\n \n-./build.sh \"$@\"\n+./y.rs build \"$@\"\n \n scripts/tests.sh base_sysroot\n scripts/tests.sh extended_sysroot"}, {"sha": "55457745d25b59c7b6ddcd8ce5b7b712d30cf03a", "filename": "y.rs", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33a3ec6976680fa2460e8ef219ff57d6f2ad41e/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=b33a3ec6976680fa2460e8ef219ff57d6f2ad41e", "patch": "@@ -0,0 +1,147 @@\n+#!/usr/bin/env bash\n+#![allow()] /*This line is ignored by bash\n+# This block is ignored by rustc\n+set -e\n+echo \"[BUILD] y.rs\" 1>&2\n+rustc $0 -o ${0/.rs/.bin} -g\n+exec ${0/.rs/.bin} $@\n+*/\n+\n+//! The build system for cg_clif\n+//!\n+//! # Manual compilation\n+//!\n+//! If your system doesn't support shell scripts you can manually compile and run this file using\n+//! for example:\n+//!\n+//! ```shell\n+//! $ rustc y.rs -o build/y.bin\n+//! $ build/y.bin\n+//! ```\n+//!\n+//! # Naming\n+//!\n+//! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n+\n+use std::env;\n+use std::path::PathBuf;\n+use std::process;\n+\n+#[path = \"build_system/build_backend.rs\"]\n+mod build_backend;\n+#[path = \"build_system/build_sysroot.rs\"]\n+mod build_sysroot;\n+#[path = \"build_system/prepare.rs\"]\n+mod prepare;\n+#[path = \"build_system/rustc_info.rs\"]\n+mod rustc_info;\n+#[path = \"build_system/utils.rs\"]\n+mod utils;\n+\n+fn usage() {\n+    eprintln!(\"Usage:\");\n+    eprintln!(\"  ./y.rs prepare\");\n+    eprintln!(\"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\");\n+}\n+\n+macro_rules! arg_error {\n+    ($($err:tt)*) => {{\n+        eprintln!($($err)*);\n+        usage();\n+        std::process::exit(1);\n+    }};\n+}\n+\n+enum Command {\n+    Build,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum SysrootKind {\n+    None,\n+    Clif,\n+    Llvm,\n+}\n+\n+fn main() {\n+    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n+    env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n+    // The target dir is expected in the default location. Guard against the user changing it.\n+    env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n+\n+    let mut args = env::args().skip(1);\n+    let command = match args.next().as_deref() {\n+        Some(\"prepare\") => {\n+            if args.next().is_some() {\n+                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n+            }\n+            prepare::prepare();\n+            process::exit(0);\n+        }\n+        Some(\"build\") => Command::Build,\n+        Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n+        Some(command) => arg_error!(\"Unknown command {}\", command),\n+        None => {\n+            usage();\n+            process::exit(0);\n+        }\n+    };\n+\n+    let mut target_dir = PathBuf::from(\"build\");\n+    let mut channel = \"release\";\n+    let mut sysroot_kind = SysrootKind::Clif;\n+    while let Some(arg) = args.next().as_deref() {\n+        match arg {\n+            \"--target-dir\" => {\n+                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--target-dir requires argument\");\n+                }))\n+            }\n+            \"--debug\" => channel = \"debug\",\n+            \"--sysroot\" => {\n+                sysroot_kind = match args.next().as_deref() {\n+                    Some(\"none\") => SysrootKind::None,\n+                    Some(\"clif\") => SysrootKind::Clif,\n+                    Some(\"llvm\") => SysrootKind::Llvm,\n+                    Some(arg) => arg_error!(\"Unknown sysroot kind {}\", arg),\n+                    None => arg_error!(\"--sysroot requires argument\"),\n+                }\n+            }\n+            flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n+            arg => arg_error!(\"Unexpected argument {}\", arg),\n+        }\n+    }\n+\n+    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n+        host_triple\n+    } else {\n+        rustc_info::get_host_triple()\n+    };\n+    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n+        if target_triple != \"\" {\n+            target_triple\n+        } else {\n+            host_triple.clone() // Empty target triple can happen on GHA\n+        }\n+    } else {\n+        host_triple.clone()\n+    };\n+\n+    if target_triple.ends_with(\"-msvc\") {\n+        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n+        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n+        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n+        eprintln!(\"set the global default target to MinGW\");\n+        process::exit(1);\n+    }\n+\n+    let cg_clif_dylib = build_backend::build_backend(channel);\n+    build_sysroot::build_sysroot(\n+        channel,\n+        sysroot_kind,\n+        &target_dir,\n+        cg_clif_dylib,\n+        &host_triple,\n+        &target_triple,\n+    );\n+}"}]}