{"sha": "41745f48d5f867ff0896ce7906b5b4c04e72a767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzQ1ZjQ4ZDVmODY3ZmYwODk2Y2U3OTA2YjViNGMwNGU3MmE3Njc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T11:18:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T11:18:52Z"}, "message": "move Semantics::visit_file_defs to ide_db::helpers", "tree": {"sha": "8a70342d903be16b20c62f8800a59af368ffb012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a70342d903be16b20c62f8800a59af368ffb012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41745f48d5f867ff0896ce7906b5b4c04e72a767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41745f48d5f867ff0896ce7906b5b4c04e72a767", "html_url": "https://github.com/rust-lang/rust/commit/41745f48d5f867ff0896ce7906b5b4c04e72a767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41745f48d5f867ff0896ce7906b5b4c04e72a767/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c96e04be55b3412e5510fc8d09cd82675dd4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c96e04be55b3412e5510fc8d09cd82675dd4cd", "html_url": "https://github.com/rust-lang/rust/commit/a1c96e04be55b3412e5510fc8d09cd82675dd4cd"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "945638cc565ad315ffc09df1283bb1ad0ebf7107", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=41745f48d5f867ff0896ce7906b5b4c04e72a767", "patch": "@@ -2,12 +2,10 @@\n \n mod source_to_def;\n \n-use std::{cell::RefCell, collections::VecDeque, fmt, iter::successors};\n+use std::{cell::RefCell, fmt, iter::successors};\n \n use base_db::{FileId, FileRange};\n-use either::Either;\n use hir_def::{\n-    nameres::ModuleSource,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n@@ -157,28 +155,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.ancestors_at_offset_with_macros(node, offset)\n     }\n \n-    /// Iterates all `ModuleDef`s and `Impl` blocks of the given file.\n-    pub fn visit_file_defs(&self, file_id: FileId, cb: &mut dyn FnMut(Either<ModuleDef, Impl>)) {\n-        let module = match self.to_module_def(file_id) {\n-            Some(it) => it,\n-            None => return,\n-        };\n-        let mut defs: VecDeque<_> = module.declarations(self.db).into();\n-        while let Some(def) = defs.pop_front() {\n-            if let ModuleDef::Module(submodule) = def {\n-                if let ModuleSource::Module(_) = submodule.definition_source(self.db).value {\n-                    defs.extend(submodule.declarations(self.db));\n-                    submodule\n-                        .impl_defs(self.db)\n-                        .into_iter()\n-                        .for_each(|impl_| cb(Either::Right(impl_)));\n-                }\n-            }\n-            cb(Either::Left(def));\n-        }\n-        module.impl_defs(self.db).into_iter().for_each(|impl_| cb(Either::Right(impl_)));\n-    }\n-\n     /// Find a AstNode by offset inside SyntaxNode, if it is inside *Macrofile*,\n     /// search up until it is of the target AstNode type\n     pub fn find_node_at_offset_with_macros<N: AstNode>("}, {"sha": "72492f8266ba051282dfa74871b583d02f5eedeb", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=41745f48d5f867ff0896ce7906b5b4c04e72a767", "patch": "@@ -2,6 +2,7 @@ use either::Either;\n use hir::{HasSource, Semantics};\n use ide_db::{\n     base_db::{FileId, FilePosition, FileRange},\n+    helpers::visit_file_defs,\n     RootDatabase,\n };\n use syntax::{ast::NameOwner, AstNode, TextRange, TextSize};\n@@ -75,7 +76,7 @@ pub(crate) fn annotations(\n         }\n     }\n \n-    Semantics::new(db).visit_file_defs(file_id, &mut |def| match def {\n+    visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n         Either::Left(def) => {\n             let node = match def {\n                 hir::ModuleDef::Const(konst) => {"}, {"sha": "0c7a8fbf807e8e03b5be03f005ea71ca574b3565", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=41745f48d5f867ff0896ce7906b5b4c04e72a767", "patch": "@@ -8,6 +8,7 @@ use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n     defs::Definition,\n+    helpers::visit_file_defs,\n     search::SearchScope,\n     RootDatabase, SymbolKind,\n };\n@@ -105,7 +106,7 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n \n     let mut res = Vec::new();\n-    sema.visit_file_defs(file_id, &mut |def| match def {\n+    visit_file_defs(&sema, file_id, &mut |def| match def {\n         Either::Left(def) => {\n             let runnable = match def {\n                 hir::ModuleDef::Module(it) => runnable_mod(&sema, it),"}, {"sha": "9992a92bdf20ac7edad870d44f3048f3a7a73136", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41745f48d5f867ff0896ce7906b5b4c04e72a767/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=41745f48d5f867ff0896ce7906b5b4c04e72a767", "patch": "@@ -2,6 +2,10 @@\n pub mod insert_use;\n pub mod import_assets;\n \n+use std::collections::VecDeque;\n+\n+use base_db::FileId;\n+use either::Either;\n use hir::{Crate, Enum, ItemInNs, MacroDef, Module, ModuleDef, Name, ScopeDef, Semantics, Trait};\n use syntax::ast::{self, make};\n \n@@ -39,6 +43,30 @@ pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n     make::path_from_segments(segments, is_abs)\n }\n \n+/// Iterates all `ModuleDef`s and `Impl` blocks of the given file.\n+pub fn visit_file_defs(\n+    sema: &Semantics<RootDatabase>,\n+    file_id: FileId,\n+    cb: &mut dyn FnMut(Either<hir::ModuleDef, hir::Impl>),\n+) {\n+    let db = sema.db;\n+    let module = match sema.to_module_def(file_id) {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    let mut defs: VecDeque<_> = module.declarations(db).into();\n+    while let Some(def) = defs.pop_front() {\n+        if let ModuleDef::Module(submodule) = def {\n+            if let hir::ModuleSource::Module(_) = submodule.definition_source(db).value {\n+                defs.extend(submodule.declarations(db));\n+                submodule.impl_defs(db).into_iter().for_each(|impl_| cb(Either::Right(impl_)));\n+            }\n+        }\n+        cb(Either::Left(def));\n+    }\n+    module.impl_defs(db).into_iter().for_each(|impl_| cb(Either::Right(impl_)));\n+}\n+\n /// Helps with finding well-know things inside the standard library. This is\n /// somewhat similar to the known paths infra inside hir, but it different; We\n /// want to make sure that IDE specific paths don't become interesting inside"}]}