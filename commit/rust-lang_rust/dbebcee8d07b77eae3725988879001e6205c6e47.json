{"sha": "dbebcee8d07b77eae3725988879001e6205c6e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWJjZWU4ZDA3Yjc3ZWFlMzcyNTk4ODg3OTAwMWU2MjA1YzZlNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-15T10:18:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-15T10:18:09Z"}, "message": "Auto merge of #59752 - Zoxc:dylib-fix, r=alexcrichton\n\nLimit dylib symbols\n\nThis makes `windows-gnu` match the behavior of `windows-msvc`. It probably doesn't make sense to export these symbols on other platforms either.", "tree": {"sha": "ab9ec9225a499924eba707ca02369bb22f53945d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9ec9225a499924eba707ca02369bb22f53945d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbebcee8d07b77eae3725988879001e6205c6e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbebcee8d07b77eae3725988879001e6205c6e47", "html_url": "https://github.com/rust-lang/rust/commit/dbebcee8d07b77eae3725988879001e6205c6e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbebcee8d07b77eae3725988879001e6205c6e47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8cd9da7b6380b5658163141c767a321f5f0f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8cd9da7b6380b5658163141c767a321f5f0f62", "html_url": "https://github.com/rust-lang/rust/commit/9f8cd9da7b6380b5658163141c767a321f5f0f62"}, {"sha": "f8f9a2869cce570c994d96afb82f4162b1b44cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f9a2869cce570c994d96afb82f4162b1b44cca", "html_url": "https://github.com/rust-lang/rust/commit/f8f9a2869cce570c994d96afb82f4162b1b44cca"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "c45b1a9a0f1d6dac037c380a3867fb20d3763a73", "filename": "src/ci/docker/test-various/Dockerfile", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -15,10 +15,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   wget \\\n   patch\n \n-# FIXME: build the `ptx-linker` instead.\n-RUN curl -sL https://github.com/denzp/rust-ptx-linker/releases/download/v0.9.0-alpha.2/rust-ptx-linker.linux64.tar.gz | \\\n-  tar -xzvC /usr/bin\n-\n RUN curl -sL https://nodejs.org/dist/v9.2.0/node-v9.2.0-linux-x64.tar.xz | \\\n   tar -xJ\n "}, {"sha": "32696d46cd5774f45cef76d15e4146902be4a4fc", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -377,25 +377,18 @@ impl<'a> Linker for GccLinker<'a> {\n             return;\n         }\n \n-        // If we're compiling a dylib, then we let symbol visibility in object\n-        // files to take care of whether they're exported or not.\n-        //\n-        // If we're compiling a cdylib, however, we manually create a list of\n-        // exported symbols to ensure we don't expose any more. The object files\n-        // have far more public symbols than we actually want to export, so we\n-        // hide them all here.\n-        if crate_type == CrateType::Dylib ||\n-           crate_type == CrateType::ProcMacro {\n-            return\n-        }\n+        // We manually create a list of exported symbols to ensure we don't expose any more.\n+        // The object files have far more public symbols than we actually want to export,\n+        // so we hide them all here.\n \n-        // Symbol visibility takes care of this for the WebAssembly.\n-        // Additionally the only known linker, LLD, doesn't support the script\n-        // arguments just yet\n-        if self.sess.target.target.arch == \"wasm32\" {\n+        if !self.sess.target.target.options.limit_rdylib_exports {\n             return;\n         }\n \n+        if crate_type == CrateType::ProcMacro {\n+            return\n+        }\n+\n         let mut arg = OsString::new();\n         let path = tmpdir.join(\"list\");\n "}, {"sha": "08cf062e85818f7d5071c5aac7bd3ed39a304fd5", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -750,6 +750,9 @@ pub struct TargetOptions {\n     /// wasm32 where the whole program either has simd or not.\n     pub simd_types_indirect: bool,\n \n+    /// Pass a list of symbol which should be exported in the dylib to the linker.\n+    pub limit_rdylib_exports: bool,\n+\n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n     pub override_export_symbols: Option<Vec<String>>,\n@@ -845,6 +848,7 @@ impl Default for TargetOptions {\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n             simd_types_indirect: true,\n+            limit_rdylib_exports: true,\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n             target_mcount: \"mcount\".to_string(),\n@@ -1151,6 +1155,7 @@ impl Target {\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n+        key!(limit_rdylib_exports, bool);\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n         key!(target_mcount);\n@@ -1366,6 +1371,7 @@ impl ToJson for Target {\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n+        target_option_val!(limit_rdylib_exports);\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n         target_option_val!(target_mcount);"}, {"sha": "9e7eda037732b0a75c70da4d32ec1d2b44828aa9", "filename": "src/librustc_target/spec/solaris_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -8,6 +8,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         target_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n+        limit_rdylib_exports: false, // Linker doesn't support this\n \n         .. Default::default()\n     }"}, {"sha": "39a8ce9282573aaa1e4dba529dcb9871ff1a2416", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -106,6 +106,11 @@ pub fn options() -> TargetOptions {\n         // no dynamic linking, no need for default visibility!\n         default_hidden_visibility: true,\n \n+        // Symbol visibility takes care of this for the WebAssembly.\n+        // Additionally the only known linker, LLD, doesn't support the script\n+        // arguments just yet\n+        limit_rdylib_exports: false,\n+\n         // we use the LLD shipped with the Rust toolchain by default\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Wasm,"}, {"sha": "b802bee25ae7a04ee301dc597e6e1c048694452e", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -24,6 +24,7 @@ pub fn target() -> Result<Target, String> {\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n         post_link_args,\n+        limit_rdylib_exports: false,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     };"}, {"sha": "e0df36884bf5629f6325948002fbf61ea6224cf7", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> Result<Target, String> {\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n         post_link_args,\n+        limit_rdylib_exports: false,\n         target_family: Some(\"unix\".to_string()),\n         codegen_backend: \"emscripten\".to_string(),\n         .. Default::default()"}, {"sha": "8a71a6370f112e4ca61f452ced2dfa51ce727e07", "filename": "src/test/assembly/nvptx-arch-default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![no_std]\n "}, {"sha": "b252b450fa77d09fb5bed5cccc511731f75d35bd", "filename": "src/test/assembly/nvptx-arch-emit-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: emit-asm\n // compile-flags: --crate-type rlib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![no_std]\n "}, {"sha": "025a9ad498778565be6811c362d949dac77218f6", "filename": "src/test/assembly/nvptx-arch-link-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib -C link-arg=--arch=sm_60\n // only-nvptx64\n+// ignore-nvptx64\n \n #![no_std]\n "}, {"sha": "824ee9cd89732163cf4812d1b420d59a89af4947", "filename": "src/test/assembly/nvptx-arch-target-cpu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib -C target-cpu=sm_50\n // only-nvptx64\n+// ignore-nvptx64\n \n #![no_std]\n "}, {"sha": "f96398064492883754d1cefdf6d846fab535a6a0", "filename": "src/test/assembly/nvptx-atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![feature(abi_ptx, core_intrinsics)]\n #![no_std]"}, {"sha": "0004fcea7a20b32786ccbf6376fa1fb542d55b7a", "filename": "src/test/assembly/nvptx-internalizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![feature(abi_ptx)]\n #![no_std]"}, {"sha": "64b9c2f17aa7df6fa525db944bbb41e42c06ed3b", "filename": "src/test/assembly/nvptx-linking-binary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type bin\n // only-nvptx64\n+// ignore-nvptx64\n \n #![feature(abi_ptx)]\n #![no_main]"}, {"sha": "bdbc30ea97fe2b157b22ffc2c0a2625beecf4912", "filename": "src/test/assembly/nvptx-linking-cdylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![feature(abi_ptx)]\n #![no_std]"}, {"sha": "80bb04fc0f2fbc6b268cd4ee855ea941bb7cac17", "filename": "src/test/assembly/nvptx-safe-naming.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbebcee8d07b77eae3725988879001e6205c6e47/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs?ref=dbebcee8d07b77eae3725988879001e6205c6e47", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: ptx-linker\n // compile-flags: --crate-type cdylib\n // only-nvptx64\n+// ignore-nvptx64\n \n #![feature(abi_ptx)]\n #![no_std]"}]}