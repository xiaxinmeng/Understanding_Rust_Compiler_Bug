{"sha": "0a03825f764fde56c37b2dcaa02cb9833ca72382", "node_id": "C_kwDOAAsO6NoAKDBhMDM4MjVmNzY0ZmRlNTZjMzdiMmRjYWEwMmNiOTgzM2NhNzIzODI", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-07T02:36:10Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-08-07T02:22:20Z"}, "message": "Remove even more box syntax uses from src/test\n\nPrior work, notably 6550021124451628b1efc60c59284465b109e3aa from #88316\nhas removed box syntax from most of the testsuite. However,\nsome tests were left out.\nThis commit removes box_syntax uses from more locations in src/test.\nSome tests that are very box syntax specific are not being migrated.", "tree": {"sha": "93f30456f55072432c415cba4ff7ce33430f6a9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f30456f55072432c415cba4ff7ce33430f6a9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a03825f764fde56c37b2dcaa02cb9833ca72382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a03825f764fde56c37b2dcaa02cb9833ca72382", "html_url": "https://github.com/rust-lang/rust/commit/0a03825f764fde56c37b2dcaa02cb9833ca72382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a03825f764fde56c37b2dcaa02cb9833ca72382/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affe0d3a00e92fa7885e3f5d2c5073fde432d154", "url": "https://api.github.com/repos/rust-lang/rust/commits/affe0d3a00e92fa7885e3f5d2c5073fde432d154", "html_url": "https://github.com/rust-lang/rust/commit/affe0d3a00e92fa7885e3f5d2c5073fde432d154"}], "stats": {"total": 366, "additions": 154, "deletions": 212}, "files": [{"sha": "89d9391f832dc3e5290eeab56719aca61c268f72", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,6 +1,6 @@\n // unit-test: SimplifyLocals\n \n-#![feature(box_syntax)]\n+\n #![feature(thread_local)]\n \n #[derive(Copy, Clone)]"}, {"sha": "c5a70605e04cb2c9a6839d060947cec8c6182f2c", "filename": "src/test/run-make-fulldeps/save-analysis-fail/foo.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"test\"]\n-#![feature(box_syntax)]\n #![feature(rustc_private)]\n \n extern crate rustc_graphviz;\n@@ -261,9 +260,9 @@ fn hello<X: SomeTrait>((z, a): (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields { field1: 43 };\n-    let s2: Box<some_fields> = box some_fields { field1: 43 };\n-    let s3 = box nofields;\n+    let s: Box<SomeTrait> = Box::new(some_fields { field1: 43 });\n+    let s2: Box<some_fields> = Box::new(some_fields { field1: 43 });\n+    let s3 = Box::new(nofields);\n \n     s.Method(43);\n     s3.Method(43);\n@@ -317,7 +316,7 @@ mod macro_use_test {\n \n fn main() {\n     // foo\n-    let s = box some_fields { field1: 43 };\n+    let s = Box::new(some_fields { field1: 43 });\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();\n@@ -345,17 +344,17 @@ fn main() {\n     let s4: msalias::nested_struct = sub::sub2::nested_struct { field2: 55 };\n     let s4: msalias::nested_struct = sub2::nested_struct { field2: 55 };\n     println(&s2.field1.to_string());\n-    let s5: MyType = box some_fields { field1: 55 };\n+    let s5: MyType = Box::new(some_fields { field1: 55 });\n     let s = SameDir::SameStruct { name: \"Bob\".to_string() };\n     let s = SubDir::SubStruct { name: \"Bob\".to_string() };\n-    let s6: SomeEnum = SomeEnum::MyTypes(box s2.clone(), s5);\n+    let s6: SomeEnum = SomeEnum::MyTypes(Box::new(s2.clone()), s5);\n     let s7: SomeEnum = SomeEnum::Strings(\"one\", \"two\", \"three\");\n     matchSomeEnum(s6);\n     matchSomeEnum(s7);\n     let s8: SomeOtherEnum = SomeOtherEnum::SomeConst2;\n     matchSomeOtherEnum(s8);\n     let s9: SomeStructEnum =\n-        SomeStructEnum::EnumStruct2 { f1: box some_fields { field1: 10 }, f2: box s2 };\n+        SomeStructEnum::EnumStruct2 { f1: Box::new(some_fields { field1: 10 }), f2: Box::new(s2) };\n     matchSomeStructEnum(s9);\n \n     for x in &vec![1, 2, 3] {"}, {"sha": "74aaabfbf1b4b5416f4f331c0d1da05b088fb0ec", "filename": "src/test/run-make-fulldeps/save-analysis/foo.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"test\"]\n-#![feature(box_syntax)]\n #![feature(rustc_private)]\n #![feature(associated_type_defaults)]\n \n@@ -255,9 +254,9 @@ fn hello<X: SomeTrait>((z, a): (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields { field1: 43 };\n-    let s2: Box<some_fields> = box some_fields { field1: 43 };\n-    let s3 = box nofields;\n+    let s: Box<SomeTrait> = Box::new(some_fields { field1: 43 });\n+    let s2: Box<some_fields> = Box::new(some_fields { field1: 43 });\n+    let s3 = Box::new(nofields);\n \n     s.Method(43);\n     s3.Method(43);\n@@ -311,7 +310,7 @@ mod macro_use_test {\n \n fn main() {\n     // foo\n-    let s = box some_fields { field1: 43 };\n+    let s = Box::new(some_fields { field1: 43 });\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();\n@@ -339,17 +338,17 @@ fn main() {\n     let s4: msalias::nested_struct = sub::sub2::nested_struct { field2: 55 };\n     let s4: msalias::nested_struct = sub2::nested_struct { field2: 55 };\n     println(&s2.field1.to_string());\n-    let s5: MyType = box some_fields { field1: 55 };\n+    let s5: MyType = Box::new(some_fields { field1: 55 });\n     let s = SameDir::SameStruct { name: \"Bob\".to_string() };\n     let s = SubDir::SubStruct { name: \"Bob\".to_string() };\n-    let s6: SomeEnum = SomeEnum::MyTypes(box s2.clone(), s5);\n+    let s6: SomeEnum = SomeEnum::MyTypes(Box::new(s2.clone()), s5);\n     let s7: SomeEnum = SomeEnum::Strings(\"one\", \"two\", \"three\");\n     matchSomeEnum(s6);\n     matchSomeEnum(s7);\n     let s8: SomeOtherEnum = SomeOtherEnum::SomeConst2;\n     matchSomeOtherEnum(s8);\n     let s9: SomeStructEnum =\n-        SomeStructEnum::EnumStruct2 { f1: box some_fields { field1: 10 }, f2: box s2 };\n+        SomeStructEnum::EnumStruct2 { f1: Box::new(some_fields { field1: 10 }), f2: Box::new(s2) };\n     matchSomeStructEnum(s9);\n \n     for x in &vec![1, 2, 3] {"}, {"sha": "dfc094abeb9b4cab0d710946a2cc58f2b9893bd9", "filename": "src/test/run-pass-valgrind/cleanup-auto-borrow-obj.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,8 +2,6 @@\n // schedule cleanups when auto borrowing trait objects.\n // This program should be valgrind clean.\n \n-#![feature(box_syntax)]\n-\n static mut DROP_RAN: bool = false;\n \n struct Foo;\n@@ -19,7 +17,7 @@ impl Trait for Foo {}\n \n pub fn main() {\n     {\n-        let _x: &Trait = &*(box Foo as Box<Trait>);\n+        let _x: &Trait = &*(Box::new(Foo) as Box<Trait>);\n     }\n     unsafe {\n         assert!(DROP_RAN);"}, {"sha": "5b78f1ec77c54d514c37b18ef180368715e4351d", "filename": "src/test/run-pass-valgrind/coerce-match.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,15 +2,18 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let _: Box<[isize]> =\n-        if true { let b: Box<_> = box [1, 2, 3]; b } else { let b: Box<_> = box [1]; b };\n+    let _: Box<[isize]> = if true {\n+        let b: Box<_> = Box::new([1, 2, 3]);\n+        b\n+    } else {\n+        let b: Box<_> = Box::new([1]);\n+        b\n+    };\n \n     let _: Box<[isize]> = match true {\n-        true => { let b: Box<_> = box [1, 2, 3]; b }\n-        false => { let b: Box<_> = box [1]; b }\n+        true => { let b: Box<_> = Box::new([1, 2, 3]); b }\n+        false => { let b: Box<_> = Box::new([1]); b }\n     };\n \n     // Check we don't get over-keen at propagating coercions in the case of casts."}, {"sha": "56d59164d68f1d880135b8344f6167a2a7501f77", "filename": "src/test/rustdoc-ui/rustc-check-passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,4 +1,4 @@\n-#![feature(box_syntax)]\n-#![feature(box_syntax)] //~ ERROR\n+#![feature(rustdoc_internals)]\n+#![feature(rustdoc_internals)] //~ ERROR\n \n pub fn foo() {}"}, {"sha": "83f4e87c6edebad29ce5a586186c2d43b6b4686b", "filename": "src/test/rustdoc-ui/rustc-check-passes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,8 @@\n-error[E0636]: the feature `box_syntax` has already been declared\n+error[E0636]: the feature `rustdoc_internals` has already been declared\n   --> $DIR/rustc-check-passes.rs:2:12\n    |\n-LL | #![feature(box_syntax)]\n-   |            ^^^^^^^^^^\n+LL | #![feature(rustdoc_internals)]\n+   |            ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f76d09cd0b2ae60c1cf496a1ca58061a8cf2a148", "filename": "src/test/ui/closures/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     let f = move|| {\n         let _a = x;\n         drop(x);"}, {"sha": "423b79dafcc97ddfe43dc0f8af9de8c8173f9de2", "filename": "src/test/ui/closures/issue-10398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-10398.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/issue-10398.rs:7:14\n+  --> $DIR/issue-10398.rs:5:14\n    |\n LL |         let _a = x;\n    |                  - value moved here"}, {"sha": "cecb08f006fde2d439ff8fef2d41b27cfc9ba4a7", "filename": "src/test/ui/closures/issue-6801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,7 +2,7 @@\n // transferring ownership of the box before invoking the stack\n // closure results in a crash.\n \n-#![feature(box_syntax)]\n+\n \n fn twice(x: Box<usize>) -> usize {\n      *x * 2\n@@ -13,7 +13,7 @@ fn invoke<F>(f: F) where F: FnOnce() -> usize {\n }\n \n fn main() {\n-      let x  : Box<usize>  = box 9;\n+      let x  : Box<usize>  = Box::new(9);\n       let sq =  || { *x * *x };\n \n       twice(x); //~ ERROR: cannot move out of"}, {"sha": "fbb32cac1284d36004bb74fe0321ad3b16fec95b", "filename": "src/test/ui/dst/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,12 +1,10 @@\n // Check that dynamically sized rvalues are forbidden\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let _x: Box<str> = box *\"hello world\";\n+    let _x: Box<str> = Box::new(*\"hello world\");\n     //~^ ERROR E0277\n \n     let array: &[isize] = &[1, 2, 3];\n-    let _x: Box<[isize]> = box *array;\n+    let _x: Box<[isize]> = Box::new(*array);\n     //~^ ERROR E0277\n }"}, {"sha": "727f4d843033fd132349d2571fffd4fd812420e3", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,20 +1,32 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:6:28\n+  --> $DIR/dst-rvalue.rs:4:33\n    |\n-LL |     let _x: Box<str> = box *\"hello world\";\n-   |                            ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     let _x: Box<str> = Box::new(*\"hello world\");\n+   |                        -------- ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                        |\n+   |                        required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: the type of a box expression must have a statically known size\n+note: required by a bound in `Box::<T>::new`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL | impl<T> Box<T> {\n+   |      ^ required by this bound in `Box::<T>::new`\n \n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:10:32\n+  --> $DIR/dst-rvalue.rs:8:37\n    |\n-LL |     let _x: Box<[isize]> = box *array;\n-   |                                ^^^^^^ doesn't have a size known at compile-time\n+LL |     let _x: Box<[isize]> = Box::new(*array);\n+   |                            -------- ^^^^^^ doesn't have a size known at compile-time\n+   |                            |\n+   |                            required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n-   = note: the type of a box expression must have a statically known size\n+note: required by a bound in `Box::<T>::new`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL | impl<T> Box<T> {\n+   |      ^ required by this bound in `Box::<T>::new`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5da9381f8378311eee8d1e8fba59d4e222470be9", "filename": "src/test/ui/dynamically-sized-types/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-struct.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n     f1: isize,\n@@ -111,7 +110,7 @@ pub fn main() {\n     assert_eq!((*f2)[1], 2);\n \n     // Nested Box.\n-    let f1 : Box<Fat<[isize; 3]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    let f1 : Box<Fat<[isize; 3]>> = Box::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f1);\n     let f2 : Box<Fat<[isize]>> = f1;\n     foo(&*f2);"}, {"sha": "7ac6f03925bb1adc27cfa042567827f3b9ea6864", "filename": "src/test/ui/dynamically-sized-types/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-trait.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n     f1: isize,"}, {"sha": "79fd62d16332f9d69d84dc150f54c8155917eaa6", "filename": "src/test/ui/issues/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-2380.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,6 @@\n #![crate_name=\"a\"]\n #![crate_type = \"lib\"]\n \n-#![feature(box_syntax)]\n-\n pub trait i<T>\n {\n     fn dummy(&self, t: T) -> T { panic!() }\n@@ -11,5 +9,5 @@ pub trait i<T>\n pub fn f<T>() -> Box<i<T>+'static> {\n     impl<T> i<T> for () { }\n \n-    box () as Box<i<T>+'static>\n+    Box::new(()) as Box<i<T>+'static>\n }"}, {"sha": "72e4559d31a799f84d287787fec3a5dfd97fed49", "filename": "src/test/ui/issues/issue-10682.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10682.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,12 +4,10 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n fn work(_: Box<isize>) {}\n fn foo<F:FnOnce()>(_: F) {}\n \n pub fn main() {\n-  let a = box 1;\n+  let a = Box::new(1);\n   foo(move|| { foo(move|| { work(a) }) })\n }"}, {"sha": "5670cd458f39436a6a6515ec9ef5301d252bda14", "filename": "src/test/ui/issues/issue-10767.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,10 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n     fn f() {\n     }\n-    let _: Box<fn()> = box (f as fn());\n+    let _: Box<fn()> = Box::new(f as fn());\n }"}, {"sha": "99e1a92dfcc299ad9c62061f837fc7487964bd5f", "filename": "src/test/ui/issues/issue-10802.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10802.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n struct DroppableStruct;\n enum DroppableEnum {\n@@ -33,14 +32,14 @@ impl  Whatever {\n \n fn main() {\n     {\n-        let f: Box<_> = box DroppableStruct;\n-        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n+        let f: Box<_> = Box::new(DroppableStruct);\n+        let _a = Whatever::new(Box::new(f) as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n     unsafe { DROPPED = false; }\n     {\n-        let f: Box<_> = box DroppableEnum::DroppableVariant1;\n-        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n+        let f: Box<_> = Box::new(DroppableEnum::DroppableVariant1);\n+        let _a = Whatever::new(Box::new(f) as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n }"}, {"sha": "1a3d8c9fe5869ab637ce48b0790cff85f836590b", "filename": "src/test/ui/issues/issue-11192.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11192.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,20 +1,20 @@\n-#![feature(box_syntax)]\n-\n struct Foo {\n     x: isize\n }\n \n+\n impl Drop for Foo {\n     fn drop(&mut self) {\n         println!(\"drop {}\", self.x);\n     }\n }\n \n+\n fn main() {\n-    let mut ptr: Box<_> = box Foo { x: 0 };\n+    let mut ptr: Box<_> = Box::new(Foo { x: 0 });\n     let mut test = |foo: &Foo| {\n         println!(\"access {}\", foo.x);\n-        ptr = box Foo { x: ptr.x + 1 };\n+        ptr = Box::new(Foo { x: ptr.x + 1 });\n         println!(\"access {}\", foo.x);\n     };\n     test(&*ptr);"}, {"sha": "fc1548013405605ac4718fdac48dc434c3e8c212", "filename": "src/test/ui/issues/issue-11192.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as m\n LL |     let mut test = |foo: &Foo| {\n    |                    ----------- mutable borrow occurs here\n LL |         println!(\"access {}\", foo.x);\n-LL |         ptr = box Foo { x: ptr.x + 1 };\n+LL |         ptr = Box::new(Foo { x: ptr.x + 1 });\n    |         --- first borrow occurs due to use of `ptr` in closure\n ...\n LL |     test(&*ptr);"}, {"sha": "b5c942f96a7023fd545073c1a1957f88d4b31722", "filename": "src/test/ui/issues/issue-11515.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax)]\n-\n struct Test {\n     func: Box<dyn FnMut() + 'static>,\n }\n \n+\n+\n fn main() {\n     let closure: Box<dyn Fn() + 'static> = Box::new(|| ());\n-    let test = box Test { func: closure }; //~ ERROR trait upcasting coercion is experimental [E0658]\n+    let test = Box::new(Test { func: closure }); //~ ERROR trait upcasting coercion is experimental [E0658]\n }"}, {"sha": "accd47f0f5fbc0c14c086874ea5c9273468d09c2", "filename": "src/test/ui/issues/issue-11515.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: cannot cast `dyn Fn()` to `dyn FnMut()`, trait upcasting coercion is experimental\n-  --> $DIR/issue-11515.rs:9:33\n+  --> $DIR/issue-11515.rs:9:38\n    |\n-LL |     let test = box Test { func: closure };\n-   |                                 ^^^^^^^\n+LL |     let test = Box::new(Test { func: closure });\n+   |                                      ^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable"}, {"sha": "9fb9f3d2e3f34907146c8549b6032b37872f1aba", "filename": "src/test/ui/issues/issue-11552.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11552.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n #[derive(Clone)]\n enum Noun\n@@ -18,5 +17,8 @@ fn fas(n: &Noun) -> Noun\n }\n \n pub fn main() {\n-    fas(&Noun::Cell(box Noun::Atom(2), box Noun::Cell(box Noun::Atom(2), box Noun::Atom(3))));\n+    fas(\n+        &Noun::Cell(Box::new(Noun::Atom(2)),\n+        Box::new(Noun::Cell(Box::new(Noun::Atom(2)), Box::new(Noun::Atom(3)))))\n+    );\n }"}, {"sha": "f974a4702960afbcfb3a9fcde7984ddbbb1352e2", "filename": "src/test/ui/issues/issue-11844.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let a = Some(box 1);\n+    let a = Some(Box::new(1));\n     match a {\n         Ok(a) => //~ ERROR: mismatched types\n             println!(\"{}\",a),"}, {"sha": "81cf918a1030ba713435cad3b9f21f58823df710", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-11844.rs:6:9\n+  --> $DIR/issue-11844.rs:4:9\n    |\n LL |     match a {\n    |           - this expression has type `Option<Box<{integer}>>`"}, {"sha": "8b30ddc2de67e912e6f4dffdc37f3ea77f0a738d", "filename": "src/test/ui/issues/issue-12127.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,10 +1,10 @@\n-#![feature(box_syntax, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {\n-    let x: Box<_> = box 22;\n+    let x: Box<_> = Box::new(22);\n     let f = to_fn_once(move|| do_it(&*x));\n     to_fn_once(move|| {\n         f();"}, {"sha": "71e14d4dab5a6599cfd6856dca8a754efc4fc0ed", "filename": "src/test/ui/issues/issue-13323.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-13323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-13323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13323.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct StrWrap {\n     s: String\n@@ -48,7 +47,7 @@ impl<T: Eq> Matcher<T> for EqualTo<T> {\n }\n \n fn equal_to<T: Eq>(expected: T) -> Box<EqualTo<T>> {\n-    box EqualTo { expected: expected }\n+    Box::new(EqualTo { expected: expected })\n }\n \n pub fn main() {"}, {"sha": "7b32bf8e4cbb7a44be9f606e2f2719d65755fd13", "filename": "src/test/ui/issues/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14399.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -6,15 +6,13 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n #[derive(Clone)]\n struct B1;\n \n trait A { fn foo(&self) {} }\n impl A for B1 {}\n \n fn main() {\n-    let v: Box<_> = box B1;\n+    let v: Box<_> = Box::new(B1);\n     let _c: Box<dyn A> = v.clone();\n }"}, {"sha": "127b909dd63eb129492e728d72c51bc57d10601f", "filename": "src/test/ui/issues/issue-14915.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let x: Box<isize> = box 0;\n+    let x: Box<isize> = Box::new(0);\n \n     println!(\"{}\", x + 1);\n     //~^ ERROR cannot add `{integer}` to `Box<isize>`"}, {"sha": "6e63269293b75460f0010d4e54a47800980c96db", "filename": "src/test/ui/issues/issue-14915.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: cannot add `{integer}` to `Box<isize>`\n-  --> $DIR/issue-14915.rs:6:22\n+  --> $DIR/issue-14915.rs:4:22\n    |\n LL |     println!(\"{}\", x + 1);\n    |                    - ^ - {integer}"}, {"sha": "5f228b2863e46ca102ba947b7f085ed4eb42d213", "filename": "src/test/ui/issues/issue-15571.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15571.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,7 @@\n // run-pass\n-#![feature(box_syntax)]\n \n fn match_on_local() {\n-    let mut foo: Option<Box<_>> = Some(box 5);\n+    let mut foo: Option<Box<_>> = Some(Box::new(5));\n     match foo {\n         None => {},\n         Some(x) => {\n@@ -37,7 +36,7 @@ fn match_on_binding() {\n }\n \n fn match_on_upvar() {\n-    let mut foo: Option<Box<_>> = Some(box 8);\n+    let mut foo: Option<Box<_>> = Some(Box::new(8));\n     let f = move|| {\n         match foo {\n             None => {},\n@@ -52,7 +51,7 @@ fn match_on_upvar() {\n \n fn main() {\n     match_on_local();\n-    match_on_arg(Some(box 6));\n+    match_on_arg(Some(Box::new(6)));\n     match_on_binding();\n     match_on_upvar();\n }"}, {"sha": "ae0863615e2c7754fbb1d69ad47c4c671da9f393", "filename": "src/test/ui/issues/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15763.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unreachable_code)]\n-#![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]\n struct Bar {\n@@ -78,12 +77,12 @@ fn main() {\n     assert_eq!(cc().unwrap(), 3);\n     assert_eq!(dd().unwrap(), 3);\n \n-    let i = box 32isize as Box<dyn A>;\n+    let i = Box::new(32isize) as Box<dyn A>;\n     assert_eq!(i.aaa(), 3);\n-    let i = box 32isize as Box<dyn A>;\n+    let i = Box::new(32isize) as Box<dyn A>;\n     assert_eq!(i.bbb(), 3);\n-    let i = box 32isize as Box<dyn A>;\n+    let i = Box::new(32isize) as Box<dyn A>;\n     assert_eq!(i.ccc().unwrap(), 3);\n-    let i = box 32isize as Box<dyn A>;\n+    let i = Box::new(32isize) as Box<dyn A>;\n     assert_eq!(i.ddd().unwrap(), 3);\n }"}, {"sha": "b21ea4bcd7869b783383d290bf75eb957899ebdf", "filename": "src/test/ui/issues/issue-16739.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![feature(unboxed_closures, fn_traits)]\n \n // Test that unboxing shim for calling rust-call ABI methods through a\n@@ -35,12 +34,12 @@ impl FnOnce<(u32,u32)> for Foo {\n }\n \n fn main() {\n-    let mut f = box Foo { foo: 42 } as Box<dyn FnMut() -> u32>;\n+    let mut f = Box::new(Foo { foo: 42 }) as Box<dyn FnMut() -> u32>;\n     assert_eq!(f.call_mut(()), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32) -> u32>;\n+    let mut f = Box::new(Foo { foo: 40 }) as Box<dyn FnMut(u32) -> u32>;\n     assert_eq!(f.call_mut((2,)), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32, u32) -> u32>;\n+    let mut f = Box::new(Foo { foo: 40 }) as Box<dyn FnMut(u32, u32) -> u32>;\n     assert_eq!(f.call_mut((1, 1)), 42);\n }"}, {"sha": "2b308ef76e43d6f1287026aa7168ec5e2e4f9e00", "filename": "src/test/ui/issues/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16774.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n \n use std::ops::{Deref, DerefMut};\n@@ -35,7 +34,7 @@ impl DerefMut for X {\n \n fn main() {\n     {\n-        let mut test = X(box 5);\n+        let mut test = X(Box::new(5));\n         {\n             let mut change = || { *test = 10 };\n             change();"}, {"sha": "b4fc40c3f2b7c376f20ac75dcbabca7dddea7115", "filename": "src/test/ui/issues/issue-17322.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17322.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,15 +1,13 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n use std::io::{self, Write};\n \n fn f(wr: &mut dyn Write) {\n     wr.write_all(b\"hello\").ok().expect(\"failed\");\n }\n \n fn main() {\n-    let mut wr = box io::stdout() as Box<dyn Write>;\n+    let mut wr = Box::new(io::stdout()) as Box<dyn Write>;\n     f(&mut wr);\n }"}, {"sha": "91f72eb369bca73b3fcb874efd7b76cb7f796f6c", "filename": "src/test/ui/issues/issue-21033.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-21033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-21033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21033.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,7 +4,6 @@\n // pretty-expanded FIXME #23616\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n enum E {\n     StructVar { boxed: Box<i32> }\n@@ -13,7 +12,7 @@ enum E {\n fn main() {\n \n     // Test matching each shorthand notation for field patterns.\n-    let mut a = E::StructVar { boxed: box 3 };\n+    let mut a = E::StructVar { boxed: Box::new(3) };\n     match a {\n         E::StructVar { box boxed } => { }\n     }\n@@ -38,7 +37,7 @@ fn main() {\n \n     // Test matching non shorthand notation. Recreate a since last test\n     // moved `boxed`\n-    let mut a = E::StructVar { boxed: box 3 };\n+    let mut a = E::StructVar { boxed: Box::new(3) };\n     match a {\n         E::StructVar { boxed: box ref mut num } => { }\n     }"}, {"sha": "6fd690a4d956a8510914171417a303aabbda3a3b", "filename": "src/test/ui/issues/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2288.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n \n-#![feature(box_syntax)]\n-\n trait clam<A> {\n   fn chowder(&self, y: A);\n }\n@@ -30,6 +28,6 @@ fn f<A>(x: Box<dyn clam<A>>, a: A) {\n pub fn main() {\n \n   let c = foo(42);\n-  let d: Box<dyn clam<isize>> = box c as Box<dyn clam<isize>>;\n+  let d: Box<dyn clam<isize>> = Box::new(c) as Box<dyn clam<isize>>;\n   f(d, c.x);\n }"}, {"sha": "010281ee371cdd31282463d0a53ee518bc081a4c", "filename": "src/test/ui/issues/issue-23024.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,11 +1,10 @@\n-#![feature(box_syntax)]\n use std::any::Any;\n \n fn main()\n {\n     fn h(x:i32) -> i32 {3*x}\n     let mut vfnfer:Vec<Box<dyn Any>> = vec![];\n-    vfnfer.push(box h);\n+    vfnfer.push(Box::new(h));\n     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n     //~| ERROR missing generics for trait `Fn`"}, {"sha": "73f93c51d34e82d982195836796c281d637f889c", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/issue-23024.rs:9:39\n+  --> $DIR/issue-23024.rs:8:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ help: use parenthetical notation instead: `Fn() -> ()`\n@@ -8,7 +8,7 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0107]: missing generics for trait `Fn`\n-  --> $DIR/issue-23024.rs:9:39\n+  --> $DIR/issue-23024.rs:8:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ expected 1 generic argument\n@@ -24,7 +24,7 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn<Args>)(3));\n    |                                       ~~~~~~~~\n \n error[E0191]: the value of the associated type `Output` (from trait `FnOnce`) must be specified\n-  --> $DIR/issue-23024.rs:9:39\n+  --> $DIR/issue-23024.rs:8:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ help: specify the associated type: `Fn<Output = Type>`"}, {"sha": "e5f9dd3efbd2a3df3c253c8d67100a3587f5ff6b", "filename": "src/test/ui/issues/issue-23491.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n \n struct Node<T: ?Sized>(#[allow(unused_tuple_struct_fields)] T);\n \n fn main() {\n-    let x: Box<Node<[isize]>> = box Node([]);\n+    let x: Box<Node<[isize]>> = Box::new(Node([]));\n }"}, {"sha": "4e53b9d145f0b57bbc6bf6bfe848ec59d7314946", "filename": "src/test/ui/issues/issue-2708.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2708.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,7 +4,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n+\n \n struct Font {\n     fontbuf: usize,\n@@ -26,5 +26,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f: Box<_> = box Font();\n+    let _f: Box<_> = Box::new(Font());\n }"}, {"sha": "df4f394dc373f63b0907eb069f7890a5ec9d8a59", "filename": "src/test/ui/issues/issue-2734.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2734.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,21 +4,19 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n trait hax {\n     fn dummy(&self) { }\n }\n impl<A> hax for A { }\n \n fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n-    box x as Box<dyn hax+'static>\n+    Box::new(x) as Box<dyn hax+'static>\n }\n \n fn deadcode() {\n-    perform_hax(box \"deadcode\".to_string());\n+    perform_hax(Box::new(\"deadcode\".to_string()));\n }\n \n pub fn main() {\n-    let _ = perform_hax(box 42);\n+    let _ = perform_hax(Box::new(42));\n }"}, {"sha": "20d3949a9f998ca9cb98b95ba4241eb180d2f66c", "filename": "src/test/ui/issues/issue-2735.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2735.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,21 +4,19 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n trait hax {\n     fn dummy(&self) { }\n }\n impl<A> hax for A { }\n \n fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n-    box x as Box<dyn hax+'static>\n+    Box::new(x) as Box<dyn hax+'static>\n }\n \n fn deadcode() {\n-    perform_hax(box \"deadcode\".to_string());\n+    perform_hax(Box::new(\"deadcode\".to_string()));\n }\n \n pub fn main() {\n-    perform_hax(box 42);\n+    perform_hax(Box::new(42));\n }"}, {"sha": "37f8181991c404e3419de3c68da53899a1d4c2b1", "filename": "src/test/ui/issues/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2935.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n //type t = { a: isize };\n // type t = { a: bool };\n@@ -20,7 +19,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z: Box<_> = box (box true as Box<dyn it>);\n+    let z: Box<_> = Box::new(Box::new(true) as Box<dyn it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "4619a3fe78718c8e5e099fe0c0785579d93a183a", "filename": "src/test/ui/issues/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3026.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,13 +1,11 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n use std::collections::HashMap;\n \n pub fn main() {\n     let x: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n-    x = box 1;\n+    x = Box::new(1);\n     buggy_map.insert(42, &*x);\n }"}, {"sha": "4bf5b9b60a804811a81aa17fefcd1b76ebb4e0e0", "filename": "src/test/ui/issues/issue-3121.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3121.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n #[derive(Copy, Clone)]\n enum side { mayo, catsup, vinegar }\n@@ -21,5 +20,5 @@ fn foo(m: Box<meal>, cond: bool) {\n }\n \n pub fn main() {\n-    foo(box meal::for_here(order::hamburger), true)\n+    foo(Box::new(meal::for_here(order::hamburger)), true)\n }"}, {"sha": "7014d517f181ef9969b803d79ac8e0fc8492fbc0", "filename": "src/test/ui/issues/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n-#![feature(box_syntax)]\n #![allow(dead_code)]\n \n pub fn main() {\n-   let mut x: Box<_> = box 3;\n+   let mut x: Box<_> = Box::new(3);\n    x = x;\n    assert_eq!(*x, 3);\n }"}, {"sha": "ee5b22778117e1ca1c4d215e4283ad0557aacb47", "filename": "src/test/ui/issues/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3447.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n #![allow(non_camel_case_types)]\n-#![feature(box_syntax)]\n \n use std::cell::RefCell;\n \n@@ -20,7 +19,7 @@ impl<T:'static> list<T> {\n             next: None\n         };\n \n-        self.next = Some(box RefCell::new(newList));\n+        self.next = Some(Box::new(RefCell::new(newList)));\n     }\n }\n "}, {"sha": "b1f028fbccb9d81846cca70723bffb735d86d69f", "filename": "src/test/ui/issues/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![allow(dead_code)]\n \n trait T {\n@@ -26,7 +25,7 @@ fn print_s(s: &S) {\n }\n \n pub fn main() {\n-    let s: Box<S> = box S { s: 5 };\n+    let s: Box<S> = Box::new(S { s: 5 });\n     print_s(&*s);\n     let t: Box<dyn T> = s as Box<dyn T>;\n     print_t(&*t);"}, {"sha": "6de3405af0d95fda4f76ed0acd5df700650bbbec", "filename": "src/test/ui/issues/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3878.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,9 +2,8 @@\n // pretty-expanded FIXME #23616\n \n #![allow(path_statements)]\n-#![feature(box_syntax)]\n \n pub fn main() {\n-    let y: Box<_> = box 1;\n+    let y: Box<_> = Box::new(1);\n     y;\n }"}, {"sha": "e5b9e2ed57438bca387786d1b8fcf128b603007b", "filename": "src/test/ui/issues/issue-4759.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4759.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,8 +2,6 @@\n // pretty-expanded FIXME #23616\n #![allow(non_shorthand_field_patterns)]\n \n-#![feature(box_syntax)]\n-\n struct T { a: Box<isize> }\n \n trait U {\n@@ -15,6 +13,6 @@ impl U for Box<isize> {\n }\n \n pub fn main() {\n-    let T { a: a } = T { a: box 0 };\n+    let T { a: a } = T { a: Box::new(0) };\n     a.f();\n }"}, {"sha": "3f1c6f855007cc34747eb95b259b822adb58276e", "filename": "src/test/ui/issues/issue-4972.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n trait MyTrait {\n     fn dummy(&self) {}"}, {"sha": "83daded7e093e0176e78a5b980f59b5927c1054d", "filename": "src/test/ui/issues/issue-4972.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4972.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-4972.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4972.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n error[E0033]: type `Box<(dyn MyTrait + 'static)>` cannot be dereferenced\n-  --> $DIR/issue-4972.rs:14:25\n+  --> $DIR/issue-4972.rs:13:25\n    |\n LL |         TraitWrapper::A(box ref map) => map,\n    |                         ^^^^^^^^^^^ type `Box<(dyn MyTrait + 'static)>` cannot be dereferenced"}, {"sha": "69ed4b0e4328bdb794d945d065f0d2a48a845916", "filename": "src/test/ui/issues/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n+\n \n enum A { B, C }\n "}, {"sha": "e2f835c19973815c079602bfe34ccc9d811bca38", "filename": "src/test/ui/issues/issue-5192.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5192.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub trait EventLoop {\n     fn dummy(&self) { }\n }\n@@ -37,5 +35,5 @@ impl Scheduler {\n }\n \n pub fn main() {\n-    let _sched = Scheduler::new(box UvEventLoop::new() as Box<dyn EventLoop>);\n+    let _sched = Scheduler::new(Box::new(UvEventLoop::new()) as Box<dyn EventLoop>);\n }"}, {"sha": "852b264dc5dbf5a6629cf4d8e8c51daa5ba183ad", "filename": "src/test/ui/issues/issue-5439.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5439.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n struct Foo {\n     foo: isize,\n }\n@@ -10,7 +8,7 @@ struct Bar {\n \n impl Bar {\n     fn make_foo (&self, i: isize) -> Box<Foo> {\n-        return box Foo { nonexistent: self, foo: i }; //~ ERROR: no field named\n+        return Box::new(Foo { nonexistent: self, foo: i }); //~ ERROR: no field named\n     }\n }\n "}, {"sha": "dc8f8b878d730e9eef77b574ba4d026e267e3906", "filename": "src/test/ui/issues/issue-5439.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5439.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,8 @@\n error[E0560]: struct `Foo` has no field named `nonexistent`\n-  --> $DIR/issue-5439.rs:13:26\n+  --> $DIR/issue-5439.rs:11:31\n    |\n-LL |         return box Foo { nonexistent: self, foo: i };\n-   |                          ^^^^^^^^^^^ `Foo` does not have this field\n+LL |         return Box::new(Foo { nonexistent: self, foo: i });\n+   |                               ^^^^^^^^^^^ `Foo` does not have this field\n    |\n    = note: available fields are: `foo`\n "}, {"sha": "810895b1b1bc4e40c39e009c6b88f816da09a7c7", "filename": "src/test/ui/issues/issue-5666.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5666.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n \n struct Dog {\n     name : String\n@@ -17,8 +16,8 @@ impl Barks for Dog {\n \n \n pub fn main() {\n-    let snoopy = box Dog{name: \"snoopy\".to_string()};\n-    let bubbles = box Dog{name: \"bubbles\".to_string()};\n+    let snoopy = Box::new(Dog{name: \"snoopy\".to_string()});\n+    let bubbles = Box::new(Dog{name: \"bubbles\".to_string()});\n     let barker = [snoopy as Box<dyn Barks>, bubbles as Box<dyn Barks>];\n \n     for pup in &barker {"}, {"sha": "f29a1e2a060d2a43d29fb2d63f97c9bb64aaec6b", "filename": "src/test/ui/issues/issue-5718.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5718.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,14 +1,12 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n struct Element;\n \n macro_rules! foo {\n     ($tag: expr, $string: expr) => {\n         if $tag == $string {\n-            let element: Box<_> = box Element;\n+            let element: Box<_> = Box::new(Element);\n             unsafe {\n                 return std::mem::transmute::<_, usize>(element);\n             }"}, {"sha": "991c52321bfeb0f1fe19bb42124264f549e54305", "filename": "src/test/ui/issues/issue-5884.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub struct Foo {\n     a: isize,\n }\n@@ -14,7 +12,7 @@ struct Bar<'a> {\n }\n \n fn check(a: Box<Foo>) {\n-    let _ic = Bar{ b: &*a, a: box None };\n+    let _ic = Bar{ b: &*a, a: Box::new(None) };\n }\n \n pub fn main(){}"}, {"sha": "e5f245f6fb80fb67df2993bf56ea2a742ef51a9f", "filename": "src/test/ui/issues/issue-6318.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6318.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(box_syntax)]\n-\n pub enum Thing {\n     A(Box<dyn Foo+'static>)\n }\n@@ -16,7 +14,7 @@ pub struct Struct;\n impl Foo for Struct {}\n \n pub fn main() {\n-    match Thing::A(box Struct as Box<dyn Foo + 'static>) {\n+    match Thing::A(Box::new(Struct) as Box<dyn Foo + 'static>) {\n         Thing::A(_a) => 0,\n     };\n }"}, {"sha": "757e9608f1a1f2152b095dfe92e8040e92927304", "filename": "src/test/ui/issues/issue-6557.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -3,7 +3,6 @@\n // pretty-expanded FIXME #23616\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n \n fn foo(box (_x, _y): Box<(isize, isize)>) {}\n "}, {"sha": "1fb01303c78361d208b70c9d8579e76188c6562c", "filename": "src/test/ui/issues/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n \n@@ -23,6 +21,6 @@ struct A {\n }\n \n fn main() {\n-    let a = A {v: box B{v: None} as Box<dyn Foo + Send>};\n+    let a = A {v: Box::new(B{v: None}) as Box<dyn Foo + Send>};\n     //~^ ERROR `Rc<RefCell<A>>` cannot be sent between threads safely\n }"}, {"sha": "4575f4dbae62d3cca76913ae3e73bcd4e0774fc8", "filename": "src/test/ui/issues/issue-7013.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `Rc<RefCell<A>>` cannot be sent between threads safely\n-  --> $DIR/issue-7013.rs:26:19\n+  --> $DIR/issue-7013.rs:24:19\n    |\n-LL |     let a = A {v: box B{v: None} as Box<dyn Foo + Send>};\n-   |                   ^^^^^^^^^^^^^^ `Rc<RefCell<A>>` cannot be sent between threads safely\n+LL |     let a = A {v: Box::new(B{v: None}) as Box<dyn Foo + Send>};\n+   |                   ^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<A>>` cannot be sent between threads safely\n    |\n    = help: within `B`, the trait `Send` is not implemented for `Rc<RefCell<A>>`\n    = note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n note: required because it appears within the type `B`\n-  --> $DIR/issue-7013.rs:10:8\n+  --> $DIR/issue-7013.rs:8:8\n    |\n LL | struct B {\n    |        ^"}, {"sha": "79642bd411b38b1fe46de507b6664ac9839fab81", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,9 +1,7 @@\n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n \n // Regression test for issue 7364\n-static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n+static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n //~^ ERROR `RefCell<isize>` cannot be shared between threads safely [E0277]\n \n fn main() { }"}, {"sha": "1018a92f64dfcba442043fab2415aa8c81659e1e", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `RefCell<isize>` cannot be shared between threads safely\n-  --> $DIR/issue-7364.rs:6:15\n+  --> $DIR/issue-7364.rs:4:15\n    |\n-LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n+LL | static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n    |               ^^^^^^^^^^^^^^^^^^^ `RefCell<isize>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`"}, {"sha": "c089c33083984d7f77ac91b36a45cc64dcf3f7a7", "filename": "src/test/ui/issues/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -8,8 +8,6 @@\n \n */\n \n-#![feature(box_syntax)]\n-\n pub fn main() {}\n \n trait A {\n@@ -19,4 +17,4 @@ trait A {\n impl<T: 'static> A for T {}\n \n fn owned2<T: 'static>(a: Box<T>) { a as Box<dyn A>; }\n-fn owned3<T: 'static>(a: Box<T>) { box a as Box<dyn A>; }\n+fn owned3<T: 'static>(a: Box<T>) { Box::new(a) as Box<dyn A>; }"}, {"sha": "04110b3ae8959a3ca498d909a22febd2df33f54d", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -4,8 +4,6 @@\n #![allow(non_snake_case)]\n // ignore-pretty unreported\n \n-#![feature(box_syntax)]\n-\n pub trait bomb { fn boom(&self, _: Ident); }\n pub struct S;\n impl bomb for S { fn boom(&self, _: Ident) { } }\n@@ -29,6 +27,6 @@ pub fn light_fuse(fld: Box<dyn bomb>) {\n }\n \n pub fn main() {\n-    let b = box S as Box<dyn bomb>;\n+    let b = Box::new(S) as Box<dyn bomb>;\n     light_fuse(b);\n }"}, {"sha": "65718343fc6a98a1379419e37b56b3b00d4da7d0", "filename": "src/test/ui/issues/issue-9382.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fissues%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9382.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -3,7 +3,6 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n // Tests for a previous bug that occurred due to an interaction\n // between struct field initialization and the auto-coercion\n@@ -24,11 +23,11 @@ struct Thing2<'a> {\n pub fn main() {\n     let _t1_fixed = Thing1 {\n         baz: &[],\n-        bar: box 32,\n+        bar: Box::new(32),\n     };\n     Thing1 {\n         baz: &Vec::new(),\n-        bar: box 32,\n+        bar: Box::new(32),\n     };\n     let _t2_fixed = Thing2 {\n         baz: &[],"}, {"sha": "8d4cbe201846170474309da211fa78bddf51ae86", "filename": "src/test/ui/limits/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Flimits%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Flimits%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-17913.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -6,18 +6,16 @@\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n \n-#![feature(box_syntax)]\n-\n #[cfg(target_pointer_width = \"64\")]\n fn main() {\n     let n = 0_usize;\n-    let a: Box<_> = box [&n; 0xF000000000000000_usize];\n+    let a: Box<_> = Box::new([&n; 0xF000000000000000_usize]);\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {\n     let n = 0_usize;\n-    let a: Box<_> = box [&n; 0xFFFFFFFF_usize];\n+    let a: Box<_> = Box::new([&n; 0xFFFFFFFF_usize]);\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }"}, {"sha": "46a0bd35d6ada6a8ec036267cdf6c9cbed3272a9", "filename": "src/test/ui/match/issue-42679.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fmatch%2Fissue-42679.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fmatch%2Fissue-42679.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-42679.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n \n #[derive(Debug, PartialEq)]\n@@ -9,13 +8,13 @@ enum Test {\n }\n \n fn main() {\n-    let a = box Test::Foo(10);\n-    let b = box Test::Bar(-20);\n+    let a = Box::new(Test::Foo(10));\n+    let b = Box::new(Test::Bar(-20));\n     match (a, b) {\n         (_, box Test::Foo(_)) => unreachable!(),\n         (box Test::Foo(x), b) => {\n             assert_eq!(x, 10);\n-            assert_eq!(b, box Test::Bar(-20));\n+            assert_eq!(b, Box::new(Test::Bar(-20)));\n         },\n         _ => unreachable!(),\n     }"}, {"sha": "f5418e754b239a3d5485e32d41cd7488ebbc8218", "filename": "src/test/ui/structs-enums/align-struct.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fstructs-enums%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a03825f764fde56c37b2dcaa02cb9833ca72382/src%2Ftest%2Fui%2Fstructs-enums%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Falign-struct.rs?ref=0a03825f764fde56c37b2dcaa02cb9833ca72382", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(box_syntax)]\n \n use std::mem;\n \n@@ -232,9 +231,9 @@ pub fn main() {\n     assert_eq!(mem::size_of_val(&a), 32);\n     assert!(is_aligned_to(&a, 16));\n \n-    let mut large = box AlignLarge {\n+    let mut large = Box::new(AlignLarge {\n         stuff: [0; 0x10000],\n-    };\n+    });\n     large.stuff[0] = 132;\n     *large.stuff.last_mut().unwrap() = 102;\n     assert_eq!(large.stuff[0], 132);"}]}