{"sha": "d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjlhNzdiZGZkMzQ1MWY1ZTU1Zjk2ZDM4M2Y5N2FlZmI3NmU5N2U=", "commit": {"author": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-03-03T22:07:48Z"}, "committer": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-03-28T21:51:57Z"}, "message": "check impl trait first", "tree": {"sha": "255e0436e1c7f1b8920da43335e1572412cad145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255e0436e1c7f1b8920da43335e1572412cad145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "html_url": "https://github.com/rust-lang/rust/commit/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e/comments", "author": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e026b59cf4f4cb9dd86510438085efafbc630e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e026b59cf4f4cb9dd86510438085efafbc630e5a", "html_url": "https://github.com/rust-lang/rust/commit/e026b59cf4f4cb9dd86510438085efafbc630e5a"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "c7cebda95a1c549a5618e0f9e5df380d20be5de9", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let mut fn_segment = Some((segment, method_generics));\n-        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true);\n+        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true, false);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method."}, {"sha": "36ed6864f3af0b73e0240240d3f8d8c7d83452e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b9a77bdfd3451f5e55f96d383f97aefb76e97e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d2b9a77bdfd3451f5e55f96d383f97aefb76e97e", "patch": "@@ -4764,9 +4764,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // variables. If the user provided some types, we may still need\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n-        self.check_path_parameter_count(span, &mut type_segment, false);\n-        self.check_path_parameter_count(span, &mut fn_segment, false);\n-        self.check_impl_trait(span, &mut fn_segment);\n+        let supress_mismatch = self.check_impl_trait(span, &mut fn_segment);\n+        self.check_path_parameter_count(span, &mut type_segment, false, supress_mismatch);\n+        self.check_path_parameter_count(span, &mut fn_segment, false, supress_mismatch);\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n@@ -4919,7 +4919,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn check_path_parameter_count(&self,\n                                   span: Span,\n                                   segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n-                                  is_method_call: bool) {\n+                                  is_method_call: bool,\n+                                  supress_mismatch_error: bool) {\n         let (lifetimes, types, infer_types, bindings) = segment.map_or(\n             (&[][..], &[][..], true, &[][..]),\n             |(s, _)| s.parameters.as_ref().map_or(\n@@ -4959,7 +4960,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n-        } else if types.len() < required_len && !infer_types {\n+        } else if types.len() < required_len && !infer_types && !supress_mismatch_error {\n             let expected_text = count_type_params(required_len);\n             let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n@@ -5026,10 +5027,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Report error if there is an explicit type parameter when using `impl Trait`.\n     fn check_impl_trait(&self,\n                         span: Span,\n-                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>) {\n+                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>)\n+                        -> bool {\n         use hir::SyntheticTyParamKind::*;\n \n-        segment.map(|(path_segment, generics)| {\n+        let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n             let impl_trait = generics.types.iter()\n                                            .any(|ty_param| {\n@@ -5050,7 +5052,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 err.emit();\n             }\n+\n+            impl_trait\n         });\n+\n+        segment.unwrap_or(false)\n     }\n \n     // Resolves `typ` by a single level if `typ` is a type variable."}]}