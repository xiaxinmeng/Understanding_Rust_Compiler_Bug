{"sha": "11ae334f076ae488566a9814d145a727fa89a6dc", "node_id": "C_kwDOAAsO6NoAKDExYWUzMzRmMDc2YWU0ODg1NjZhOTgxNGQxNDVhNzI3ZmE4OWE2ZGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T12:37:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T16:37:57Z"}, "message": "Remove a function that doesn't actually do anything", "tree": {"sha": "4a7f5726ab6ce61d38b40dd5b3a84a65d3092523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7f5726ab6ce61d38b40dd5b3a84a65d3092523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ae334f076ae488566a9814d145a727fa89a6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ae334f076ae488566a9814d145a727fa89a6dc", "html_url": "https://github.com/rust-lang/rust/commit/11ae334f076ae488566a9814d145a727fa89a6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ae334f076ae488566a9814d145a727fa89a6dc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42e490d6f57e4a346211daab9c188cf130f532b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42e490d6f57e4a346211daab9c188cf130f532b", "html_url": "https://github.com/rust-lang/rust/commit/f42e490d6f57e4a346211daab9c188cf130f532b"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "b2702eafd33bd8cec66eca5c29241d2ea8417acd", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=11ae334f076ae488566a9814d145a727fa89a6dc", "patch": "@@ -3,7 +3,7 @@ use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n-use rustc_middle::ty::{self, Const, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::Fallible;\n \n@@ -140,13 +140,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         );\n     }\n \n-    // We don't have to worry about the equality of consts during borrow checking\n-    // as consts always have a static lifetime.\n-    // FIXME(oli-obk): is this really true? We can at least have HKL and with\n-    // inline consts we may have further lifetimes that may be unsound to treat as\n-    // 'static.\n-    fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {}\n-\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "b4a427a5d419a9519c127d76947841b303b70cd0", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=11ae334f076ae488566a9814d145a727fa89a6dc", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, BoundVar, Const, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, BoundVar, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n use std::iter;\n@@ -728,10 +728,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n-    fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {\n-        span_bug!(self.cause.span(), \"generic_const_exprs: unreachable `const_equate`\");\n-    }\n-\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "0687774078015bfd7eb8f7cff72b02e9bd011082", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae334f076ae488566a9814d145a727fa89a6dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=11ae334f076ae488566a9814d145a727fa89a6dc", "patch": "@@ -92,7 +92,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n         info: ty::VarianceDiagInfo<'tcx>,\n     );\n \n-    fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n     fn register_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n@@ -812,8 +811,12 @@ impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.delegate.const_equate(a, b);\n+    fn const_equate_obligation(&mut self, _a: ty::Const<'tcx>, _b: ty::Const<'tcx>) {\n+        // We don't have to worry about the equality of consts during borrow checking\n+        // as consts always have a static lifetime.\n+        // FIXME(oli-obk): is this really true? We can at least have HKL and with\n+        // inline consts we may have further lifetimes that may be unsound to treat as\n+        // 'static.\n     }\n }\n "}]}