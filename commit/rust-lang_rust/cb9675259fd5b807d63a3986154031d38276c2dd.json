{"sha": "cb9675259fd5b807d63a3986154031d38276c2dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTY3NTI1OWZkNWI4MDdkNjNhMzk4NjE1NDAzMWQzODI3NmMyZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-14T22:03:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:42Z"}, "message": "enable comments in generated asm, ll", "tree": {"sha": "19ecd242090d94414247c609c0bc39406b8a1430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ecd242090d94414247c609c0bc39406b8a1430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9675259fd5b807d63a3986154031d38276c2dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9675259fd5b807d63a3986154031d38276c2dd", "html_url": "https://github.com/rust-lang/rust/commit/cb9675259fd5b807d63a3986154031d38276c2dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9675259fd5b807d63a3986154031d38276c2dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "html_url": "https://github.com/rust-lang/rust/commit/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "3623f451e9d897e8b07209f83f1acdd7f31564ca", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=cb9675259fd5b807d63a3986154031d38276c2dd", "patch": "@@ -263,6 +263,7 @@ options:\n     --opt-level <lvl>  optimize with possible levels 0-3\n     -O                 equivalent to --opt-level=2\n     -S                 compile only; do not assemble or link\n+    --no-asm-comments  do not add comments into the assembly source\n     -c                 compile and assemble, but do not link\n     --emit-llvm        produce an LLVM bitcode file\n     --save-temps       write intermediate files in addition to normal output\n@@ -365,6 +366,11 @@ fn build_session_options(match: getopts::match)\n     let run_typestate = !opt_present(match, \"no-typestate\");\n     let sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n     let target_opt = getopts::opt_maybe_str(match, \"target\");\n+    let no_asm_comments = getopts::opt_present(match, \"no-asm-comments\");\n+    alt output_type { // unless we're emitting huamn-readable assembly, omit comments.\n+      link::output_type_llvm_assembly. | link::output_type_assembly. {}\n+      _ { no_asm_comments = true; }\n+    }\n     let opt_level: uint =\n         if opt_present(match, \"O\") {\n             if opt_present(match, \"opt-level\") {\n@@ -414,7 +420,8 @@ fn build_session_options(match: getopts::match)\n           parse_only: parse_only,\n           no_trans: no_trans,\n           do_gc: do_gc,\n-          stack_growth: stack_growth};\n+          stack_growth: stack_growth,\n+          no_asm_comments: no_asm_comments};\n     ret sopts;\n }\n \n@@ -453,7 +460,8 @@ fn opts() -> [getopts::opt] {\n          optflag(\"no-typestate\"), optflag(\"noverify\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\"),\n-         optflag(\"stack-growth\")];\n+         optflag(\"stack-growth\"), optflag(\"check-unsafe\"),\n+         optflag(\"no-asm-comments\")];\n }\n \n fn build_output_filenames(ifile: str, ofile: option::t<str>,"}, {"sha": "9793dae65d7776d56d341a2dcb811c7afab5a1d5", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=cb9675259fd5b807d63a3986154031d38276c2dd", "patch": "@@ -43,7 +43,8 @@ type options =\n      parse_only: bool,\n      no_trans: bool,\n      do_gc: bool,\n-     stack_growth: bool};\n+     stack_growth: bool,\n+     no_asm_comments: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "a6e1f5dbde541301e8e938e54c7222ae0eb034eb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cb9675259fd5b807d63a3986154031d38276c2dd", "patch": "@@ -24,7 +24,7 @@ import back::{link, abi, upcall};\n import syntax::{ast, ast_util};\n import syntax::visit;\n import syntax::codemap::span;\n-import syntax::print::pprust::{expr_to_str};\n+import syntax::print::pprust::{expr_to_str, path_to_str, stmt_to_str};\n import visit::vt;\n import util::common::*;\n import lib::llvm::{llvm, mk_target_data, mk_type_names};\n@@ -4605,6 +4605,8 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     // FIXME Fill in cx.sp\n \n+    add_span_comment(cx, s.span, stmt_to_str(s));\n+\n     let bcx = cx;\n     alt s.node {\n       ast::stmt_expr(e, _) { bcx = trans_expr(cx, e, ignore); }"}, {"sha": "69ef397f9e13600e232750304634a4c120376957", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9675259fd5b807d63a3986154031d38276c2dd/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=cb9675259fd5b807d63a3986154031d38276c2dd", "patch": "@@ -1,10 +1,11 @@\n import std::{vec, str};\n import std::str::sbuf;\n import lib::llvm::llvm;\n+import syntax::codemap::span;\n import llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, Opcode,\n               ModuleRef};\n-import trans_common::{block_ctxt, T_ptr, T_nil, T_i8, T_i1,\n-                      val_ty, C_i32};\n+import trans_common::{block_ctxt, T_ptr, T_nil, T_int, T_i8, T_i1, T_void,\n+                      T_fn, val_ty, bcx_ccx, C_i32};\n \n fn B(cx: @block_ctxt) -> BuilderRef {\n     let b = *cx.fcx.lcx.ccx.builder;\n@@ -504,6 +505,24 @@ fn _UndefReturn(cx: @block_ctxt, Fn: ValueRef) -> ValueRef {\n     ret llvm::LLVMGetUndef(retty);\n }\n \n+fn add_span_comment(bcx: @block_ctxt, sp: span, text: str) {\n+    let ccx = bcx_ccx(bcx);\n+    if (!ccx.sess.get_opts().no_asm_comments) {\n+        add_comment(bcx, text + \" (\" + ccx.sess.span_str(sp) + \")\");\n+    }\n+}\n+\n+fn add_comment(bcx: @block_ctxt, text: str) {\n+    let ccx = bcx_ccx(bcx);\n+    if (!ccx.sess.get_opts().no_asm_comments) {\n+        let comment_text = \"; \" + text;\n+        let asm = str::as_buf(comment_text, { |c|\n+            str::as_buf(\"\", { |e|\n+                llvm::LLVMConstInlineAsm(T_fn([], T_void()), c, e, 0, 0)})});\n+        Call(bcx, asm, []);\n+    }\n+}\n+\n fn Call(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {"}]}