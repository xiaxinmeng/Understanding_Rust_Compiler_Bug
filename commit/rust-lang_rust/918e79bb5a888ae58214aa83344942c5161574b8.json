{"sha": "918e79bb5a888ae58214aa83344942c5161574b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOGU3OWJiNWE4ODhhZTU4MjE0YWE4MzM0NDk0MmM1MTYxNTc0Yjg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-01T02:18:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-01T02:18:34Z"}, "message": "Merge pull request #2380 from topecongiro/reorder-mods\n\n[RFC] Reorder modules alphabetically", "tree": {"sha": "49f1617f5b99e3b7e94cf7de27a56dd1198bf61a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f1617f5b99e3b7e94cf7de27a56dd1198bf61a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/918e79bb5a888ae58214aa83344942c5161574b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacnj6CRBK7hj4Ov3rIwAAdHIIAEF7P1JiOeGaDrNmb9vdJU7P\n9SPBy7U4OEMCs3AYkLzIqcIma7Qs2WqUklzLn8zyjKMpdk/3QbxpLGhVQ4monN8n\nhZf5krdZCwOcb4x4rY/9jrLQfGp301as8FAwecJ9HWKepJU+NUA66J2N4A2OBTmn\npoV3+35vUTxz0oTXAPLjMvpZi3Y56/HsJA1nhvtVAK6qhLoLGE+g9JtzwUjxrgFU\n4KkYozR8TcyEr6NlrYROsgw6clMR2R/2hY+rWC+EaM+2QmZ6XoK68dAIFDzdB0nY\ndaG9l3t0aZ9kc2fFfabUGjOX8khiTSi24AKx7VOoADnaeNNvx3c4WY1iOxGM5kE=\n=RBaE\n-----END PGP SIGNATURE-----\n", "payload": "tree 49f1617f5b99e3b7e94cf7de27a56dd1198bf61a\nparent 2fb6bd3b9f01efb48593068e04efe2ed0a633b09\nparent 4c9ab8b405c8b096ce27947de6b62cb2ba7a6e48\nauthor Nick Cameron <nrc@ncameron.org> 1517451514 +1300\ncommitter GitHub <noreply@github.com> 1517451514 +1300\n\nMerge pull request #2380 from topecongiro/reorder-mods\n\n[RFC] Reorder modules alphabetically"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/918e79bb5a888ae58214aa83344942c5161574b8", "html_url": "https://github.com/rust-lang/rust/commit/918e79bb5a888ae58214aa83344942c5161574b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/918e79bb5a888ae58214aa83344942c5161574b8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6bd3b9f01efb48593068e04efe2ed0a633b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6bd3b9f01efb48593068e04efe2ed0a633b09", "html_url": "https://github.com/rust-lang/rust/commit/2fb6bd3b9f01efb48593068e04efe2ed0a633b09"}, {"sha": "4c9ab8b405c8b096ce27947de6b62cb2ba7a6e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9ab8b405c8b096ce27947de6b62cb2ba7a6e48", "html_url": "https://github.com/rust-lang/rust/commit/4c9ab8b405c8b096ce27947de6b62cb2ba7a6e48"}], "stats": {"total": 242, "additions": 155, "deletions": 87}, "files": [{"sha": "21d30756179d4da8687672939c39112a7c3bc8a0", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -2,6 +2,10 @@\n \n ## [Unreleased]\n \n+### Added\n+\n+- Add `reorder_modules` configuration option.\n+\n ## [0.3.6] 2018-01-18\n \n ### Fixed"}, {"sha": "4b7f959b3dea0bc4b333bed86cd45bd0cda62e41", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -630,6 +630,7 @@ create_config! {\n     reorder_imports_in_group: bool, false, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, true, false,\n         \"Reorder lists of names in import statements alphabetically\";\n+    reorder_modules: bool, false, false, \"Reorder module statemtents alphabetically in group\";\n \n     // Spaces around punctuation\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,"}, {"sha": "c6997bd157f6168ab837af530e833c9366fdde20", "filename": "src/imports.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -105,10 +105,13 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n     }\n }\n \n-fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n+fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.node, &b.node) {\n+        (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n+            a.ident.name.as_str().cmp(&b.ident.name.as_str())\n+        }\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n-            Some(compare_use_trees(a_tree, b_tree, false))\n+            compare_use_trees(a_tree, b_tree, false)\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n@@ -119,7 +122,7 @@ fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n                 b_name.map_or_else(|| b.ident.name.as_str(), |symbol| symbol.as_str());\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n-                return Some(result);\n+                return result;\n             }\n \n             // `extern crate foo as bar;`\n@@ -128,11 +131,11 @@ fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.name.cmp(&b.ident.name),\n+                (Some(..), Some(..)) => a.ident.name.as_str().cmp(&b.ident.name.as_str()),\n             };\n-            Some(result)\n+            result\n         }\n-        _ => None,\n+        _ => unreachable!(),\n     }\n }\n \n@@ -232,6 +235,16 @@ fn rewrite_import(\n     }\n }\n \n+/// Rewrite an inline mod.\n+fn rewrite_mod(item: &ast::Item) -> String {\n+    let mut result = String::with_capacity(32);\n+    result.push_str(&*format_visibility(&item.vis));\n+    result.push_str(\"mod \");\n+    result.push_str(&item.ident.to_string());\n+    result.push(';');\n+    result\n+}\n+\n fn rewrite_imports(\n     context: &RewriteContext,\n     use_items: &[&ast::Item],\n@@ -246,19 +259,21 @@ fn rewrite_imports(\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| {\n-            let attrs_str = item.attrs.rewrite(context, shape)?;\n+            let attrs = ::visitor::filter_inline_attrs(&item.attrs, item.span());\n+            let attrs_str = attrs.rewrite(context, shape)?;\n \n-            let missed_span = if item.attrs.is_empty() {\n+            let missed_span = if attrs.is_empty() {\n                 mk_sp(item.span.lo(), item.span.lo())\n             } else {\n-                mk_sp(item.attrs.last().unwrap().span.hi(), item.span.lo())\n+                mk_sp(attrs.last().unwrap().span.hi(), item.span.lo())\n             };\n \n             let item_str = match item.node {\n                 ast::ItemKind::Use(ref tree) => {\n                     rewrite_import(context, &item.vis, tree, &item.attrs, shape)?\n                 }\n                 ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item)?,\n+                ast::ItemKind::Mod(..) => rewrite_mod(item),\n                 _ => return None,\n             };\n \n@@ -276,7 +291,7 @@ fn rewrite_imports(\n         false,\n     );\n     let mut item_pair_vec: Vec<_> = items.zip(use_items.iter()).collect();\n-    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1).unwrap());\n+    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1));\n     let item_vec: Vec<_> = item_pair_vec.into_iter().map(|pair| pair.0).collect();\n \n     let fmt = ListFormatting {"}, {"sha": "73cbd7527ba8c650a559bb8f5c7aa393c2c53cee", "filename": "src/lib.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(decl_macro)]\n #![feature(match_default_bindings)]\n #![feature(rustc_private)]\n #![feature(type_ascription)]\n@@ -55,32 +56,32 @@ pub use self::summary::Summary;\n \n #[macro_use]\n mod utils;\n-mod shape;\n-mod spanned;\n-pub mod config;\n-pub mod codemap;\n-pub mod filemap;\n-pub mod file_lines;\n-pub mod visitor;\n+mod chains;\n mod checkstyle;\n mod closures;\n-mod items;\n-mod missed_spans;\n-mod lists;\n-mod types;\n+pub mod codemap;\n+mod comment;\n+pub mod config;\n mod expr;\n+pub mod file_lines;\n+pub mod filemap;\n mod imports;\n mod issues;\n-mod rewrite;\n-mod string;\n-mod comment;\n-pub mod modules;\n-pub mod rustfmt_diff;\n-mod chains;\n+mod items;\n+mod lists;\n mod macros;\n+mod missed_spans;\n+pub mod modules;\n mod patterns;\n+mod rewrite;\n+pub mod rustfmt_diff;\n+mod shape;\n+mod spanned;\n+mod string;\n mod summary;\n+mod types;\n mod vertical;\n+pub mod visitor;\n \n #[derive(Clone, Copy)]\n pub enum ErrorKind {"}, {"sha": "8063057e9e95d6b3fb89d3d4182283c6c621231a", "filename": "src/visitor.rs", "status": "modified", "additions": 71, "deletions": 60, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -32,6 +32,33 @@ use shape::{Indent, Shape};\n use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n+/// Returns attributes that are within `outer_span`.\n+pub fn filter_inline_attrs(attrs: &[ast::Attribute], outer_span: Span) -> Vec<ast::Attribute> {\n+    attrs\n+        .iter()\n+        .filter(|a| outer_span.lo() <= a.span.lo() && a.span.hi() <= outer_span.hi())\n+        .cloned()\n+        .collect()\n+}\n+\n+/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n+fn is_mod_decl(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::Mod(ref m) => {\n+            !(m.inner.lo() == BytePos(0) && m.inner.hi() == BytePos(0))\n+                && m.inner.hi() != item.span.hi()\n+        }\n+        _ => false,\n+    }\n+}\n+\n+/// Returns true for `mod foo;` without any inline attributes.\n+/// We cannot reorder modules with attributes because doing so can break the code.\n+/// e.g. `#[macro_use]`.\n+fn is_mod_decl_without_attr(item: &ast::Item) -> bool {\n+    is_mod_decl(item) && filter_inline_attrs(&item.attrs, item.span()).is_empty()\n+}\n+\n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::Use(_) => true,\n@@ -318,39 +345,26 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n         match item.node {\n-            ast::ItemKind::Mod(ref m) => {\n-                let outer_file = self.codemap.lookup_char_pos(item.span.lo()).file;\n-                let inner_file = self.codemap.lookup_char_pos(m.inner.lo()).file;\n-                if outer_file.name == inner_file.name {\n-                    // Module is inline, in this case we treat modules like any\n-                    // other item.\n-                    if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                        self.push_skipped_with_span(item.span());\n-                        return;\n-                    }\n-                } else if contains_skip(&item.attrs) {\n-                    // Module is not inline, but should be skipped.\n+            // Module is inline, in this case we treat it like any other item.\n+            _ if !is_mod_decl(item) => {\n+                if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n+                    self.push_skipped_with_span(item.span());\n                     return;\n-                } else {\n-                    // Module is not inline and should not be skipped. We want\n-                    // to process only the attributes in the current file.\n-                    filtered_attrs = item.attrs\n-                        .iter()\n-                        .filter_map(|a| {\n-                            let attr_file = self.codemap.lookup_char_pos(a.span.lo()).file;\n-                            if attr_file.name == outer_file.name {\n-                                Some(a.clone())\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .collect::<Vec<_>>();\n-                    // Assert because if we should skip it should be caught by\n-                    // the above case.\n-                    assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n-                    attrs = &filtered_attrs;\n                 }\n             }\n+            // Module is not inline, but should be skipped.\n+            ast::ItemKind::Mod(..) if contains_skip(&item.attrs) => {\n+                return;\n+            }\n+            // Module is not inline and should not be skipped. We want\n+            // to process only the attributes in the current file.\n+            ast::ItemKind::Mod(..) => {\n+                filtered_attrs = filter_inline_attrs(&item.attrs, item.span());\n+                // Assert because if we should skip it should be caught by\n+                // the above case.\n+                assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n+                attrs = &filtered_attrs;\n+            }\n             _ => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n                     self.push_skipped_with_span(item.span());\n@@ -397,8 +411,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.last_pos = source!(self, item.span).hi();\n             }\n             ast::ItemKind::Mod(ref module) => {\n+                let is_inline = !is_mod_decl(item);\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n-                self.format_mod(module, &item.vis, item.span, item.ident, attrs);\n+                self.format_mod(module, &item.vis, item.span, item.ident, attrs, is_inline);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);\n@@ -649,33 +664,34 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n-        while !items_left.is_empty() {\n-            // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n-            // to be potentially reordered within `format_imports`. Otherwise, just format the\n-            // next item for output.\n-            if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_use_item,\n-                    self.config.reorder_imports_in_group(),\n-                );\n+        macro try_reorder_items_with($reorder: ident, $in_group: ident, $pred: ident) {\n+            if self.config.$reorder() && $pred(&*items_left[0]) {\n+                let used_items_len =\n+                    self.reorder_items(items_left, &$pred, self.config.$in_group());\n                 let (_, rest) = items_left.split_at(used_items_len);\n                 items_left = rest;\n-            } else if self.config.reorder_extern_crates() && is_extern_crate(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_extern_crate,\n-                    self.config.reorder_extern_crates_in_group(),\n+                continue;\n+            }\n+        }\n+\n+        while !items_left.is_empty() {\n+            // If the next item is a `use`, `extern crate` or `mod`, then extract it and any\n+            // subsequent items that have the same item kind to be reordered within\n+            // `format_imports`. Otherwise, just format the next item for output.\n+            {\n+                try_reorder_items_with!(reorder_imports, reorder_imports_in_group, is_use_item);\n+                try_reorder_items_with!(\n+                    reorder_extern_crates,\n+                    reorder_extern_crates_in_group,\n+                    is_extern_crate\n                 );\n-                let (_, rest) = items_left.split_at(used_items_len);\n-                items_left = rest;\n-            } else {\n-                // `unwrap()` is safe here because we know `items_left`\n-                // has elements from the loop condition\n-                let (item, rest) = items_left.split_first().unwrap();\n-                self.visit_item(item);\n-                items_left = rest;\n+                try_reorder_items_with!(reorder_modules, reorder_modules, is_mod_decl_without_attr);\n             }\n+            // Reaching here means items were not reordered. There must be at least\n+            // one item left in `items_left`, so calling `unwrap()` here is safe.\n+            let (item, rest) = items_left.split_first().unwrap();\n+            self.visit_item(item);\n+            items_left = rest;\n         }\n     }\n \n@@ -722,13 +738,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         s: Span,\n         ident: ast::Ident,\n         attrs: &[ast::Attribute],\n+        is_internal: bool,\n     ) {\n-        // Decide whether this is an inline mod or an external mod.\n-        let local_file_name = self.codemap.span_to_filename(s);\n-        let inner_span = source!(self, m.inner);\n-        let is_internal = !(inner_span.lo().0 == 0 && inner_span.hi().0 == 0)\n-            && local_file_name == self.codemap.span_to_filename(inner_span);\n-\n         self.push_str(&*utils::format_visibility(vis));\n         self.push_str(\"mod \");\n         self.push_str(&ident.to_string());"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/dolor/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "56b1aa03ed795f9a690bc34bf1cbe30a7c8468b8", "filename": "tests/source/configs/reorder_modules/false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: false\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/ipsum/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/lorem/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/sit/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "79b0ab1e35546ad25c94363bd272c219ff2bf219", "filename": "tests/source/configs/reorder_modules/true.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: true\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/dolor/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "56b1aa03ed795f9a690bc34bf1cbe30a7c8468b8", "filename": "tests/target/configs/reorder_modules/false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: false\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/ipsum/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/lorem/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/sit/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "18361e88b5fcf2e71bfb082e659ba6d5c8425378", "filename": "tests/target/configs/reorder_modules/true.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918e79bb5a888ae58214aa83344942c5161574b8/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs?ref=918e79bb5a888ae58214aa83344942c5161574b8", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: true\n+// Reorder modules\n+\n+mod dolor;\n+mod ipsum;\n+mod lorem;\n+mod sit;"}]}