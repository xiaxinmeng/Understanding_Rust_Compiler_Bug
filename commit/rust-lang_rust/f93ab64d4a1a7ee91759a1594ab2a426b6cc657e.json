{"sha": "f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5M2FiNjRkNGExYTdlZTkxNzU5YTE1OTRhYjJhNDI2YjZjYzY1N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-21T22:32:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-21T22:32:28Z"}, "message": "Auto merge of #28567 - sanxiyn:save-lto, r=alexcrichton\n\nThis is useful for debugging LTO issues, #28066 for example.", "tree": {"sha": "4e6b11d8d1d5327548fba49db0b7a608938e82ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6b11d8d1d5327548fba49db0b7a608938e82ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "html_url": "https://github.com/rust-lang/rust/commit/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e8d19b24de6d06e4962c5959d00603c3239ac8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e8d19b24de6d06e4962c5959d00603c3239ac8c", "html_url": "https://github.com/rust-lang/rust/commit/7e8d19b24de6d06e4962c5959d00603c3239ac8c"}, {"sha": "9ba5db6690929eb0595582908dadbb4e773fbf98", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba5db6690929eb0595582908dadbb4e773fbf98", "html_url": "https://github.com/rust-lang/rust/commit/9ba5db6690929eb0595582908dadbb4e773fbf98"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "ba6ec895a8e12e356d23f3094ad5e99a9cfb9ddc", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "patch": "@@ -15,6 +15,7 @@ use llvm;\n use llvm::archive_ro::ArchiveRO;\n use llvm::{ModuleRef, TargetMachineRef, True, False};\n use rustc::util::common::time;\n+use rustc::util::common::path2cstr;\n use back::write::{ModuleConfig, with_llvm_pmb};\n \n use libc;\n@@ -24,7 +25,9 @@ use std::ffi::CString;\n \n pub fn run(sess: &session::Session, llmod: ModuleRef,\n            tm: TargetMachineRef, reachable: &[String],\n-           config: &ModuleConfig) {\n+           config: &ModuleConfig,\n+           name_extra: &str,\n+           output_names: &config::OutputFilenames) {\n     if sess.opts.cg.prefer_dynamic {\n         sess.err(\"cannot prefer dynamic linking when performing LTO\");\n         sess.note(\"only 'staticlib' and 'bin' outputs are supported with LTO\");\n@@ -124,6 +127,14 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         }\n     }\n \n+    if sess.opts.cg.save_temps {\n+        let path = output_names.with_extension(&format!(\"{}.no-opt.lto.bc\", name_extra));\n+        let cstr = path2cstr(&path);\n+        unsafe {\n+            llvm::LLVMWriteBitcodeToFile(llmod, cstr.as_ptr());\n+        }\n+    }\n+\n     // Now we have one massive module inside of llmod. Time to run the\n     // LTO-specific optimization passes that LLVM provides.\n     //"}, {"sha": "94e2891f40fa070d262de6674e241281e015ce59", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "patch": "@@ -496,7 +496,8 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n         match cgcx.lto_ctxt {\n             Some((sess, reachable)) if sess.lto() =>  {\n                 time(sess.time_passes(), \"all lto passes\", ||\n-                     lto::run(sess, llmod, tm, reachable, &config));\n+                     lto::run(sess, llmod, tm, reachable, &config,\n+                              &name_extra, &output_names));\n \n                 if config.emit_lto_bc {\n                     let name = format!(\"{}.lto.bc\", name_extra);"}]}