{"sha": "622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmM4ZjdiNTdiNzBhNjFkYzVjOWE0YjI4OGNlNWJmMmZmOGFjMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-23T23:14:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-25T08:17:57Z"}, "message": "rustdoc: Inline enums across crates", "tree": {"sha": "e88e1017b72034df9c8aab5e9ae9dceabc2324e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88e1017b72034df9c8aab5e9ae9dceabc2324e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04", "html_url": "https://github.com/rust-lang/rust/commit/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81b511bfdbb5f0fb2a6c7522cf4b8dbe5c83ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81b511bfdbb5f0fb2a6c7522cf4b8dbe5c83ece", "html_url": "https://github.com/rust-lang/rust/commit/c81b511bfdbb5f0fb2a6c7522cf4b8dbe5c83ece"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "77b835b232d9c8dc90b9439eb8ed90afb6f1ee67", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=622c8f7b57b70a61dc5c9a4b288ce5bf2ff8ac04", "patch": "@@ -1204,6 +1204,49 @@ impl Clean<Item> for doctree::Variant {\n     }\n }\n \n+impl Clean<Item> for ty::VariantInfo {\n+    fn clean(&self) -> Item {\n+        // use syntax::parse::token::special_idents::unnamed_field;\n+        let cx = super::ctxtkey.get().unwrap();\n+        let tcx = match cx.maybe_typed {\n+            core::Typed(ref tycx) => tycx,\n+            core::NotTyped(_) => fail!(\"tcx not present\"),\n+        };\n+        let kind = match self.arg_names.as_ref().map(|s| s.as_slice()) {\n+            None | Some([]) if self.args.len() == 0 => CLikeVariant,\n+            None | Some([]) => {\n+                TupleVariant(self.args.iter().map(|t| t.clean()).collect())\n+            }\n+            Some(s) => {\n+                StructVariant(VariantStruct {\n+                    struct_type: doctree::Plain,\n+                    fields_stripped: false,\n+                    fields: s.iter().zip(self.args.iter()).map(|(name, ty)| {\n+                        Item {\n+                            source: Span::empty(),\n+                            name: Some(name.clean()),\n+                            attrs: Vec::new(),\n+                            visibility: Some(ast::Public),\n+                            def_id: self.id, // FIXME: this is not accurate\n+                            inner: StructFieldItem(\n+                                TypedStructField(ty.clean())\n+                            )\n+                        }\n+                    }).collect()\n+                })\n+            }\n+        };\n+        Item {\n+            name: Some(self.name.clean()),\n+            attrs: load_attrs(tcx, self.id),\n+            source: Span::empty(),\n+            visibility: Some(ast::Public),\n+            def_id: self.id,\n+            inner: VariantItem(Variant { kind: kind }),\n+        }\n+    }\n+}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub enum VariantKind {\n     CLikeVariant,\n@@ -1524,6 +1567,10 @@ fn try_inline(id: ast::NodeId) -> Option<Vec<Item>> {\n             ret.extend(build_impls(tcx, did).move_iter());\n             StructItem(build_struct(tcx, did))\n         }\n+        ast::DefTy(did) => {\n+            ret.extend(build_impls(tcx, did).move_iter());\n+            build_type(tcx, did)\n+        }\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n@@ -1822,6 +1869,25 @@ fn build_struct(tcx: &ty::ctxt, did: ast::DefId) -> Struct {\n     }\n }\n \n+fn build_type(tcx: &ty::ctxt, did: ast::DefId) -> ItemEnum {\n+    let t = ty::lookup_item_type(tcx, did);\n+    match ty::get(t.ty).sty {\n+        ty::ty_enum(edid, _) => {\n+            return EnumItem(Enum {\n+                generics: t.generics.clean(),\n+                variants_stripped: false,\n+                variants: ty::enum_variants(tcx, edid).clean(),\n+            })\n+        }\n+        _ => {}\n+    }\n+\n+    TypedefItem(Typedef {\n+        type_: t.ty.clean(),\n+        generics: t.generics.clean(),\n+    })\n+}\n+\n fn build_impls(tcx: &ty::ctxt,\n                did: ast::DefId) -> Vec<Item> {\n     ty::populate_implementations_for_type_if_necessary(tcx, did);"}]}