{"sha": "15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTVkMmNjYmYyZGU3YWMwYmI0ODk0YTY4ODU3OTFmYTFmMjM1MjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T01:26:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T01:26:02Z"}, "message": "Convert codemap from legacy_exports", "tree": {"sha": "d67d4b5e3aff571badd3e6faf4e4c7b8bc714403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67d4b5e3aff571badd3e6faf4e4c7b8bc714403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "html_url": "https://github.com/rust-lang/rust/commit/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d115944809467bd9011d769abbdfd326f8a9d619", "url": "https://api.github.com/repos/rust-lang/rust/commits/d115944809467bd9011d769abbdfd326f8a9d619", "html_url": "https://github.com/rust-lang/rust/commit/d115944809467bd9011d769abbdfd326f8a9d619"}], "stats": {"total": 84, "additions": 27, "deletions": 57}, "files": [{"sha": "6a0e8063119e873ca1b259acec0773f368f91bfc", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 27, "deletions": 56, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "patch": "@@ -10,36 +10,7 @@ use std::serialization::{Serializable,\n                          Serializer,\n                          Deserializer};\n \n-export filename;\n-export filemap;\n-export filemap_;\n-export span;\n-export file_substr;\n-export fss_none;\n-export fss_internal;\n-export fss_external;\n-export CodeMap;\n-export expn_info;\n-export expn_info_;\n-export expanded_from;\n-export new_filemap;\n-export new_filemap_w_substr;\n-export mk_substr_filename;\n-export lookup_char_pos;\n-export lookup_char_pos_adj;\n-export adjust_span;\n-export span_to_str;\n-export span_to_filename;\n-export span_to_lines;\n-export file_lines;\n-export get_line;\n-export next_line;\n-export span_to_snippet;\n-export loc;\n-export get_filemap;\n-export new_codemap;\n-\n-struct span {\n+pub struct span {\n     lo: uint,\n     hi: uint,\n     expn_info: Option<@expn_info>\n@@ -63,20 +34,20 @@ impl<D: Deserializer> span: Deserializable<D> {\n     }\n }\n \n-enum expn_info {\n+pub enum expn_info {\n     expanded_from({call_site: span,\n                    callie: {name: ~str, span: Option<span>}})\n }\n \n-type filename = ~str;\n+pub type filename = ~str;\n \n-type lookup_fn = pure fn(file_pos) -> uint;\n+pub type lookup_fn = pure fn(file_pos) -> uint;\n \n-struct loc {\n+pub struct loc {\n     file: @filemap, line: uint, col: uint\n }\n \n-struct file_pos {\n+pub struct file_pos {\n     ch: uint, byte: uint\n }\n \n@@ -87,21 +58,21 @@ impl file_pos : cmp::Eq {\n     pure fn ne(other: &file_pos) -> bool { !self.eq(other) }\n }\n \n-enum file_substr {\n-    fss_none,\n-    fss_internal(span),\n-    fss_external({filename: ~str, line: uint, col: uint})\n+pub enum file_substr {\n+    pub fss_none,\n+    pub fss_internal(span),\n+    pub fss_external({filename: ~str, line: uint, col: uint})\n }\n \n-struct filemap {\n+pub struct filemap {\n     name: filename,\n     substr: file_substr,\n     src: @~str,\n     start_pos: file_pos,\n     mut lines: ~[file_pos]\n }\n \n-impl filemap {\n+pub impl filemap {\n     static fn new_w_substr(+filename: filename, +substr: file_substr,\n                            src: @~str,\n                            start_pos_ch: uint, start_pos_byte: uint)\n@@ -121,23 +92,23 @@ impl filemap {\n     }\n }\n \n-struct CodeMap {\n+pub struct CodeMap {\n     files: DVec<@filemap>\n }\n \n-fn new_codemap() -> CodeMap {\n+pub fn new_codemap() -> CodeMap {\n     CodeMap {\n         files: DVec()\n     }\n }\n \n-fn mk_substr_filename(cm: @CodeMap, sp: span) -> ~str\n+pub fn mk_substr_filename(cm: @CodeMap, sp: span) -> ~str\n {\n     let pos = lookup_char_pos(cm, sp.lo);\n     return fmt!(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n }\n \n-fn next_line(file: @filemap, chpos: uint, byte_pos: uint) {\n+pub fn next_line(file: @filemap, chpos: uint, byte_pos: uint) {\n     file.lines.push(file_pos {ch: chpos, byte: byte_pos + file.start_pos.byte});\n }\n \n@@ -169,7 +140,7 @@ fn lookup_pos(map: @CodeMap, pos: uint, lookup: lookup_fn) -> loc {\n     return loc {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n }\n \n-fn lookup_char_pos(map: @CodeMap, pos: uint) -> loc {\n+pub fn lookup_char_pos(map: @CodeMap, pos: uint) -> loc {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     return lookup_pos(map, pos, lookup);\n }\n@@ -179,7 +150,7 @@ fn lookup_byte_pos(map: @CodeMap, pos: uint) -> loc {\n     return lookup_pos(map, pos, lookup);\n }\n \n-fn lookup_char_pos_adj(map: @CodeMap, pos: uint)\n+pub fn lookup_char_pos_adj(map: @CodeMap, pos: uint)\n     -> {filename: ~str, line: uint, col: uint, file: Option<@filemap>}\n {\n     let loc = lookup_char_pos(map, pos);\n@@ -202,7 +173,7 @@ fn lookup_char_pos_adj(map: @CodeMap, pos: uint)\n     }\n }\n \n-fn adjust_span(map: @CodeMap, sp: span) -> span {\n+pub fn adjust_span(map: @CodeMap, sp: span) -> span {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     let line = lookup_line(map, sp.lo, lookup);\n     match (line.fm.substr) {\n@@ -222,24 +193,24 @@ fn span_to_str_no_adj(sp: span, cm: @CodeMap) -> ~str {\n              lo.line, lo.col, hi.line, hi.col)\n }\n \n-fn span_to_str(sp: span, cm: @CodeMap) -> ~str {\n+pub fn span_to_str(sp: span, cm: @CodeMap) -> ~str {\n     let lo = lookup_char_pos_adj(cm, sp.lo);\n     let hi = lookup_char_pos_adj(cm, sp.hi);\n     return fmt!(\"%s:%u:%u: %u:%u\", lo.filename,\n              lo.line, lo.col, hi.line, hi.col)\n }\n \n-struct file_lines {\n+pub struct file_lines {\n     file: @filemap,\n     lines: ~[uint]\n }\n \n-fn span_to_filename(sp: span, cm: @codemap::CodeMap) -> filename {\n+pub fn span_to_filename(sp: span, cm: @codemap::CodeMap) -> filename {\n     let lo = lookup_char_pos(cm, sp.lo);\n     return /* FIXME (#2543) */ copy lo.file.name;\n }\n \n-fn span_to_lines(sp: span, cm: @codemap::CodeMap) -> @file_lines {\n+pub fn span_to_lines(sp: span, cm: @codemap::CodeMap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     let mut lines = ~[];\n@@ -249,7 +220,7 @@ fn span_to_lines(sp: span, cm: @codemap::CodeMap) -> @file_lines {\n     return @file_lines {file: lo.file, lines: lines};\n }\n \n-fn get_line(fm: @filemap, line: int) -> ~str unsafe {\n+pub fn get_line(fm: @filemap, line: int) -> ~str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n     let end = match str::find_char_from(*fm.src, '\\n', begin) {\n       Some(e) => e,\n@@ -268,20 +239,20 @@ fn lookup_byte_offset(cm: @codemap::CodeMap, chpos: uint)\n     {fm: fm, pos: line_offset + col_offset}\n }\n \n-fn span_to_snippet(sp: span, cm: @codemap::CodeMap) -> ~str {\n+pub fn span_to_snippet(sp: span, cm: @codemap::CodeMap) -> ~str {\n     let begin = lookup_byte_offset(cm, sp.lo);\n     let end = lookup_byte_offset(cm, sp.hi);\n     assert begin.fm.start_pos == end.fm.start_pos;\n     return str::slice(*begin.fm.src, begin.pos, end.pos);\n }\n \n-fn get_snippet(cm: @codemap::CodeMap, fidx: uint, lo: uint, hi: uint) -> ~str\n+pub fn get_snippet(cm: @codemap::CodeMap, fidx: uint, lo: uint, hi: uint) -> ~str\n {\n     let fm = cm.files[fidx];\n     return str::slice(*fm.src, lo, hi)\n }\n \n-fn get_filemap(cm: @CodeMap, filename: ~str) -> @filemap {\n+pub fn get_filemap(cm: @CodeMap, filename: ~str) -> @filemap {\n     for cm.files.each |fm| { if fm.name == filename { return *fm; } }\n     //XXjdm the following triggers a mismatched type bug\n     //      (or expected function, found _|_)"}, {"sha": "9195f1fd8f7d9789c70a383e6b788bef29ecda4e", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/15a5d2ccbf2de7ac0bb4894a6885791fa1f23521/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=15a5d2ccbf2de7ac0bb4894a6885791fa1f23521", "patch": "@@ -25,7 +25,6 @@ use core::*;\n mod attr;\n #[legacy_exports]\n mod diagnostic;\n-#[legacy_exports]\n mod codemap;\n #[legacy_exports]\n mod ast;"}]}