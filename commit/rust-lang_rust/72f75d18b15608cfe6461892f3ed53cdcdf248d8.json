{"sha": "72f75d18b15608cfe6461892f3ed53cdcdf248d8", "node_id": "C_kwDOAAsO6NoAKDcyZjc1ZDE4YjE1NjA4Y2ZlNjQ2MTg5MmYzZWQ1M2NkY2RmMjQ4ZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-23T06:14:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T06:14:32Z"}, "message": "Rollup merge of #103368 - compiler-errors:normalization-ambiguity-bug, r=oli-obk\n\nDelay ambiguity span bug in normalize query iff not rustdoc\n\nOli and I decided that the compiler debt of adding another usage of `tcx.sess.opts.actually_rustdoc` is fine, because we don't really want to add more complexity to the normalize query, and moving rustdoc to use fulfill normalization (`fully_normalize`, i.e. not use the normalize query) is unnecessary overhead given that it's skipping binders and stuff.\n\nr? oli-obk\n\nFixes #102827\nFixes #103181", "tree": {"sha": "88fa6cd940d91186b3ac91c1cbf5d04712d94718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fa6cd940d91186b3ac91c1cbf5d04712d94718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f75d18b15608cfe6461892f3ed53cdcdf248d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVNvICRBK7hj4Ov3rIwAAWxUIAB1rT3rouUrI789rTt2Ph+X+\nAuKjGRziT9oR3gm8FFTsuHLLrq413rQxgs7JWYK6AQ1ytNsyq0nZwrq9EUSanQE/\nhbjaSIKidOATGi2mU0SdvCirbIOjdiZzhvhhOnpmY1jGgM7kQoSto31Frmr587cK\naQcUZix5X+MdmDFaXV03lhWqxuumYlACg2V/MW2usE3ZKoBYgaOc4oaYt6zAmWCm\nfQ3suhI0v8McqpUqaSb1p0Z5uK7hP26jxKJBSyBbdsSMWEF+HtIkauGg6Nb5cGoL\naCA95in+WHOq3Wiit0YnFppsPA6qdD+XmM5E6JurIRBQM7EaJjQDZBtVTeYDpr4=\n=pYQY\n-----END PGP SIGNATURE-----\n", "payload": "tree 88fa6cd940d91186b3ac91c1cbf5d04712d94718\nparent ff689a1404081871afd31814f31db508bcd560dc\nparent cb61113cdc158de18993a94bc6bb39aee6950a9b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666505672 +0200\ncommitter GitHub <noreply@github.com> 1666505672 +0200\n\nRollup merge of #103368 - compiler-errors:normalization-ambiguity-bug, r=oli-obk\n\nDelay ambiguity span bug in normalize query iff not rustdoc\n\nOli and I decided that the compiler debt of adding another usage of `tcx.sess.opts.actually_rustdoc` is fine, because we don't really want to add more complexity to the normalize query, and moving rustdoc to use fulfill normalization (`fully_normalize`, i.e. not use the normalize query) is unnecessary overhead given that it's skipping binders and stuff.\n\nr? oli-obk\n\nFixes #102827\nFixes #103181\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f75d18b15608cfe6461892f3ed53cdcdf248d8", "html_url": "https://github.com/rust-lang/rust/commit/72f75d18b15608cfe6461892f3ed53cdcdf248d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f75d18b15608cfe6461892f3ed53cdcdf248d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff689a1404081871afd31814f31db508bcd560dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff689a1404081871afd31814f31db508bcd560dc", "html_url": "https://github.com/rust-lang/rust/commit/ff689a1404081871afd31814f31db508bcd560dc"}, {"sha": "cb61113cdc158de18993a94bc6bb39aee6950a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb61113cdc158de18993a94bc6bb39aee6950a9b", "html_url": "https://github.com/rust-lang/rust/commit/cb61113cdc158de18993a94bc6bb39aee6950a9b"}], "stats": {"total": 180, "additions": 178, "deletions": 2}, "files": [{"sha": "715f5be8e2f4bbe22dd35ce61078f0aa370c0680", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -14,6 +14,7 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n+use rustc_span::DUMMY_SP;\n \n use std::ops::ControlFlow;\n \n@@ -253,7 +254,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let result = tcx.normalize_projection_ty(c_data)?;\n                 // We don't expect ambiguity.\n                 if result.is_ambiguous() {\n-                    bug!(\"unexpected ambiguity: {:?} {:?}\", c_data, result);\n+                    // Rustdoc normalizes possibly not well-formed types, so only\n+                    // treat this as a bug if we're not in rustdoc.\n+                    if !tcx.sess.opts.actually_rustdoc {\n+                        tcx.sess.delay_span_bug(\n+                            DUMMY_SP,\n+                            format!(\"unexpected ambiguity: {:?} {:?}\", c_data, result),\n+                        );\n+                    }\n+                    return Err(NoSolution);\n                 }\n                 let InferOk { value: result, obligations } =\n                     self.infcx.instantiate_query_response_and_region_obligations(\n@@ -296,7 +305,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let result = tcx.normalize_projection_ty(c_data)?;\n                 // We don't expect ambiguity.\n                 if result.is_ambiguous() {\n-                    bug!(\"unexpected ambiguity: {:?} {:?}\", c_data, result);\n+                    // Rustdoc normalizes possibly not well-formed types, so only\n+                    // treat this as a bug if we're not in rustdoc.\n+                    if !tcx.sess.opts.actually_rustdoc {\n+                        tcx.sess.delay_span_bug(\n+                            DUMMY_SP,\n+                            format!(\"unexpected ambiguity: {:?} {:?}\", c_data, result),\n+                        );\n+                    }\n+                    return Err(NoSolution);\n                 }\n                 let InferOk { value: result, obligations } =\n                     self.infcx.instantiate_query_response_and_region_obligations("}, {"sha": "1e9f925f8458db2f59d9d4e31c486857ddb884a1", "filename": "src/test/rustdoc/not-wf-ambiguous-normalization.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Znormalize-docs\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Allocator {\n+    type Buffer;\n+}\n+\n+struct DefaultAllocator;\n+\n+// This unconstrained impl parameter causes the normalization of\n+// `<DefaultAllocator as Allocator>::Buffer` to be ambiguous,\n+// which caused an ICE with `-Znormalize-docs`.\n+impl<T> Allocator for DefaultAllocator {\n+    type Buffer = ();\n+}\n+\n+type A = impl Fn(<DefaultAllocator as Allocator>::Buffer);\n+\n+fn foo() -> A {\n+    |_| ()\n+}\n+\n+fn main() {}"}, {"sha": "197aedf9d98bc95444224cb00a59dee2e93e2aff", "filename": "src/test/ui/impl-trait/issue-103181-1.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -0,0 +1,85 @@\n+// edition:2021\n+\n+mod hyper {\n+    use std::{fmt::Debug, future::Future, marker::PhantomData, pin::Pin, task::Poll};\n+\n+    pub trait HttpBody {\n+        type Error;\n+    }\n+    impl HttpBody for () {\n+        //~^ ERROR not all trait items implemented, missing: `Error`\n+        // don't implement `Error` here for the ICE\n+    }\n+\n+    pub struct Server<I, S>(I, S);\n+\n+    pub fn serve<I, S>(_: S) -> Server<I, S> {\n+        todo!()\n+    }\n+\n+    impl<S, B> Future for Server<(), S>\n+    where\n+        S: MakeServiceRef<(), (), ResBody = B>,\n+        B: HttpBody,\n+        B::Error: Debug,\n+    {\n+        type Output = ();\n+\n+        fn poll(self: Pin<&mut Self>, _: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n+            todo!()\n+        }\n+    }\n+\n+    pub trait MakeServiceRef<Target, ReqBody> {\n+        type ResBody;\n+    }\n+\n+    impl<T, S> MakeServiceRef<(), ()> for T\n+    where\n+        T: for<'a> Service<&'a (), Response = S>,\n+        S: Service<()>,\n+    {\n+        type ResBody = ();\n+    }\n+\n+    pub struct MakeServiceFn<F>(pub F);\n+    pub struct ServiceFn<F, R>(pub PhantomData<(F, R)>);\n+\n+    pub trait Service<Request> {\n+        type Response;\n+    }\n+\n+    impl<'t, F, Ret, Target, Svc> Service<&'t Target> for MakeServiceFn<F>\n+    where\n+        F: Fn() -> Ret,\n+        Ret: Future<Output = Result<Svc, ()>>,\n+    {\n+        type Response = Svc;\n+    }\n+\n+    impl<F, ReqBody, Ret, ResBody, E> Service<ReqBody> for ServiceFn<F, ReqBody>\n+    where\n+        F: Fn() -> Ret,\n+        Ret: Future<Output = Result<ResBody, E>>,\n+    {\n+        type Response = ResBody;\n+    }\n+}\n+\n+async fn smarvice() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn service_fn<F, R, S>(f: F) -> hyper::ServiceFn<F, R>\n+where\n+    F: Fn() -> S,\n+{\n+    hyper::ServiceFn(std::marker::PhantomData)\n+}\n+\n+async fn iceice() {\n+    let service = hyper::MakeServiceFn(|| async { Ok::<_, ()>(service_fn(|| smarvice())) });\n+    hyper::serve::<(), _>(service).await;\n+}\n+\n+fn main() {}"}, {"sha": "cd026607d52fc1b63f745c12c2239e9a987d0dd5", "filename": "src/test/ui/impl-trait/issue-103181-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Error`\n+  --> $DIR/issue-103181-1.rs:9:5\n+   |\n+LL |         type Error;\n+   |         ---------- `Error` from trait\n+LL |     }\n+LL |     impl HttpBody for () {\n+   |     ^^^^^^^^^^^^^^^^^^^^ missing `Error` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "b43ac45075e2bd409500b7209052e6bd18807141", "filename": "src/test/ui/impl-trait/issue-103181-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -0,0 +1,29 @@\n+// edition:2021\n+\n+trait SendFuture: Send {\n+    type Output;\n+}\n+\n+impl<Fut: Send> SendFuture for Fut {\n+    type Output = ();\n+}\n+\n+async fn broken_fut() {\n+    ident_error;\n+    //~^ ERROR cannot find value `ident_error` in this scope\n+}\n+\n+// triggers normalization of `<Fut as SendFuture>::Output`,\n+// which requires `Fut: Send`.\n+fn normalize<Fut: SendFuture>(_: Fut, _: Fut::Output) {}\n+\n+async fn iceice<A, B>()\n+// <- async fn is necessary\n+where\n+    A: Send,\n+    B: Send, // <- a second bound\n+{\n+    normalize(broken_fut(), ());\n+}\n+\n+fn main() {}"}, {"sha": "5eb2dd9184bec9dfe3b34e611ba192270316ff94", "filename": "src/test/ui/impl-trait/issue-103181-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f75d18b15608cfe6461892f3ed53cdcdf248d8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr?ref=72f75d18b15608cfe6461892f3ed53cdcdf248d8", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `ident_error` in this scope\n+  --> $DIR/issue-103181-2.rs:12:5\n+   |\n+LL |     ident_error;\n+   |     ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}