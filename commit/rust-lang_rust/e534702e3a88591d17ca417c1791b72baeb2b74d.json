{"sha": "e534702e3a88591d17ca417c1791b72baeb2b74d", "node_id": "C_kwDOAAsO6NoAKGU1MzQ3MDJlM2E4ODU5MWQxN2NhNDE3YzE3OTFiNzJiYWViMmI3NGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-20T21:54:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-20T21:54:12Z"}, "message": "Merge #11511\n\n11511: internal: Wrap MacroCallKind::Attr attr_args field in an Arc r=Veykril a=Veykril\n\nThis is stored in `MacroCallLoc` which is returned from a query, so cloning should be made cheap.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2a746917760663bdad18934c6c4ee98024096731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a746917760663bdad18934c6c4ee98024096731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e534702e3a88591d17ca417c1791b72baeb2b74d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEriECRBK7hj4Ov3rIwAARJgIAB75hRS4idwYf2mUjdVvs0RC\nqrZgQwVXA8r4TZBh9dWiQ69+aLkZCN45oDgr3g9eZodO7JXwTsuszX7LMyB4n5e9\nGQyo66LXMjKigtp7/HFnHMfqQNtoJv6gWIDOavqTrbCPS0uwgSLNlxPqzo93tF70\nYLbP0KIsW43qdG+VzNRfhDLQrtTWm+UfU5o/hHwM8tooTI4RKpN7eZOD3ajHt3aG\noiBaZZCC8hPYsHJKBj0QFAXYv6ENw/1aNqOGqfutP7Gp+JMVCnFC8q6EENB3KZR1\nD20TlT/pfb/D8GIBhDVWEu6je/TYsVXv2DIpiM7gUNR5n5dR3vFD07C0J4CLvdI=\n=zfml\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a746917760663bdad18934c6c4ee98024096731\nparent 1d53f695f0408f47c5cce5cefa471eb0e86b0db7\nparent fbe787ee10b3c5cf6639ca76ee4e2c40c4e322c7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645394052 +0000\ncommitter GitHub <noreply@github.com> 1645394052 +0000\n\nMerge #11511\n\n11511: internal: Wrap MacroCallKind::Attr attr_args field in an Arc r=Veykril a=Veykril\n\nThis is stored in `MacroCallLoc` which is returned from a query, so cloning should be made cheap.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e534702e3a88591d17ca417c1791b72baeb2b74d", "html_url": "https://github.com/rust-lang/rust/commit/e534702e3a88591d17ca417c1791b72baeb2b74d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e534702e3a88591d17ca417c1791b72baeb2b74d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d53f695f0408f47c5cce5cefa471eb0e86b0db7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d53f695f0408f47c5cce5cefa471eb0e86b0db7", "html_url": "https://github.com/rust-lang/rust/commit/1d53f695f0408f47c5cce5cefa471eb0e86b0db7"}, {"sha": "fbe787ee10b3c5cf6639ca76ee4e2c40c4e322c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe787ee10b3c5cf6639ca76ee4e2c40c4e322c7", "html_url": "https://github.com/rust-lang/rust/commit/fbe787ee10b3c5cf6639ca76ee4e2c40c4e322c7"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "e458db2ac0f35d02bdd0101e364bf802820e202e", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e534702e3a88591d17ca417c1791b72baeb2b74d/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534702e3a88591d17ca417c1791b72baeb2b74d/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=e534702e3a88591d17ca417c1791b72baeb2b74d", "patch": "@@ -787,7 +787,7 @@ fn attr_macro_as_call_id(\n         MacroCallKind::Attr {\n             ast_id: item_attr.ast_id,\n             attr_name: last_segment.to_string().into_boxed_str(),\n-            attr_args: arg,\n+            attr_args: Arc::new(arg),\n             invoc_attr_index: macro_attr.id.ast_index,\n         },\n     );"}, {"sha": "476e21f07566c60ce21c5c87747b62e974df3742", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e534702e3a88591d17ca417c1791b72baeb2b74d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534702e3a88591d17ca417c1791b72baeb2b74d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=e534702e3a88591d17ca417c1791b72baeb2b74d", "patch": "@@ -135,7 +135,7 @@ pub enum MacroCallKind {\n     Attr {\n         ast_id: AstId<ast::Item>,\n         attr_name: Box<str>,\n-        attr_args: (tt::Subtree, mbe::TokenMap),\n+        attr_args: Arc<(tt::Subtree, mbe::TokenMap)>,\n         /// Syntactical index of the invoking `#[attribute]`.\n         ///\n         /// Outer attributes are counted first, then inner attributes. This does not support\n@@ -472,7 +472,7 @@ impl ExpansionInfo {\n \n             let token_range = token.value.text_range();\n             match &loc.kind {\n-                MacroCallKind::Attr { attr_args: (_, map), invoc_attr_index, .. } => {\n+                MacroCallKind::Attr { attr_args, invoc_attr_index, .. } => {\n                     let attr = item\n                         .doc_comments_and_attrs()\n                         .nth(*invoc_attr_index as usize)\n@@ -486,8 +486,9 @@ impl ExpansionInfo {\n                             let relative_range =\n                                 token.value.text_range().checked_sub(attr_input_start)?;\n                             // shift by the item's tree's max id\n-                            let token_id =\n-                                self.macro_arg_shift.shift(map.token_by_range(relative_range)?);\n+                            let token_id = self\n+                                .macro_arg_shift\n+                                .shift(attr_args.1.token_by_range(relative_range)?);\n                             Some(token_id)\n                         }\n                         _ => None,\n@@ -535,13 +536,13 @@ impl ExpansionInfo {\n \n         // Attributes are a bit special for us, they have two inputs, the input tokentree and the annotated item.\n         let (token_map, tt) = match &loc.kind {\n-            MacroCallKind::Attr { attr_args: (_, arg_token_map), .. } => {\n+            MacroCallKind::Attr { attr_args, .. } => {\n                 // try unshifting the the token id, if unshifting fails, the token resides in the non-item attribute input\n                 // note that the `TokenExpander::map_id_up` earlier only unshifts for declarative macros, so we don't double unshift with this\n                 match self.macro_arg_shift.unshift(token_id) {\n                     Some(unshifted) => {\n                         token_id = unshifted;\n-                        (arg_token_map, self.attr_input_or_mac_def.clone()?.syntax().cloned())\n+                        (&attr_args.1, self.attr_input_or_mac_def.clone()?.syntax().cloned())\n                     }\n                     None => (&self.macro_arg.1, self.arg.clone()),\n                 }"}]}