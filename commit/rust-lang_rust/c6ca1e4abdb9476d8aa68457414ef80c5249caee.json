{"sha": "c6ca1e4abdb9476d8aa68457414ef80c5249caee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Y2ExZTRhYmRiOTQ3NmQ4YWE2ODQ1NzQxNGVmODBjNTI0OWNhZWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-10T16:33:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-28T08:04:50Z"}, "message": "Use `Ident`s in a number of structures in HIR\n\nNamely: labels, type parameters, bindings in patterns, parameter names in functions without body.\nAll of these do not need hygiene after lowering to HIR, only span locations.", "tree": {"sha": "1961ad3278476514ec8249654e2fd5bbbb87a1ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1961ad3278476514ec8249654e2fd5bbbb87a1ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ca1e4abdb9476d8aa68457414ef80c5249caee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ca1e4abdb9476d8aa68457414ef80c5249caee", "html_url": "https://github.com/rust-lang/rust/commit/c6ca1e4abdb9476d8aa68457414ef80c5249caee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ca1e4abdb9476d8aa68457414ef80c5249caee/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8215a4f6f7b32d0f068e72ab9a9c9f85bab0cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8215a4f6f7b32d0f068e72ab9a9c9f85bab0cdb", "html_url": "https://github.com/rust-lang/rust/commit/e8215a4f6f7b32d0f068e72ab9a9c9f85bab0cdb"}], "stats": {"total": 281, "additions": 125, "deletions": 156}, "files": [{"sha": "61583d998940b97d13be18983e05a354099702fa", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -426,7 +426,7 @@ pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, ident: Ident) {\n }\n \n pub fn walk_label<'v, V: Visitor<'v>>(visitor: &mut V, label: &'v Label) {\n-    visitor.visit_name(label.span, label.name);\n+    visitor.visit_ident(label.ident);\n }\n \n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n@@ -689,9 +689,9 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Ref(ref subpattern, _) => {\n             visitor.visit_pat(subpattern)\n         }\n-        PatKind::Binding(_, canonical_id, ref pth1, ref optional_subpattern) => {\n+        PatKind::Binding(_, canonical_id, ident, ref optional_subpattern) => {\n             visitor.visit_def_mention(Def::Local(canonical_id));\n-            visitor.visit_name(pth1.span, pth1.node);\n+            visitor.visit_ident(ident);\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }\n         PatKind::Lit(ref expression) => visitor.visit_expr(expression),\n@@ -714,11 +714,11 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     visitor.visit_name(foreign_item.span, foreign_item.name);\n \n     match foreign_item.node {\n-        ForeignItemFn(ref function_declaration, ref names, ref generics) => {\n+        ForeignItemFn(ref function_declaration, ref param_names, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_fn_decl(function_declaration);\n-            for name in names {\n-                visitor.visit_name(name.span, name.node);\n+            for &param_name in param_names {\n+                visitor.visit_ident(param_name);\n             }\n         }\n         ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n@@ -832,11 +832,11 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Required(ref names)) => {\n+        TraitItemKind::Method(ref sig, TraitMethod::Required(ref param_names)) => {\n             visitor.visit_id(trait_item.id);\n             visitor.visit_fn_decl(&sig.decl);\n-            for name in names {\n-                visitor.visit_name(name.span, name.node);\n+            for &param_name in param_names {\n+                visitor.visit_ident(param_name);\n             }\n         }\n         TraitItemKind::Method(ref sig, TraitMethod::Provided(body_id)) => {"}, {"sha": "49675f6dc080d66ed5f08092622e7ca62a5e9704", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -969,8 +969,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_label(&mut self, label: Option<Label>) -> Option<hir::Label> {\n         label.map(|label| hir::Label {\n-            name: label.ident.name,\n-            span: label.ident.span,\n+            ident: label.ident,\n         })\n     }\n \n@@ -1195,11 +1194,10 @@ impl<'a> LoweringContext<'a> {\n \n                         let hir_bounds = self.lower_param_bounds(bounds, itctx);\n                         // Set the name to `impl Bound1 + Bound2`\n-                        let ident = Ident::from_str(&pprust::ty_to_string(t));\n+                        let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n                         self.in_band_ty_params.push(hir::GenericParam {\n                             id: def_node_id,\n-                            name: ParamName::Plain(name),\n-                            span,\n+                            ident: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n                             attrs: hir_vec![],\n                             bounds: hir_bounds,\n@@ -1868,12 +1866,12 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_fn_args_to_names(&mut self, decl: &FnDecl) -> hir::HirVec<Spanned<Name>> {\n+    fn lower_fn_args_to_names(&mut self, decl: &FnDecl) -> hir::HirVec<Ident> {\n         decl.inputs\n             .iter()\n             .map(|arg| match arg.pat.node {\n-                PatKind::Ident(_, ident, None) => respan(ident.span, ident.name),\n-                _ => respan(arg.pat.span, keywords::Invalid.name()),\n+                PatKind::Ident(_, ident, _) => ident,\n+                _ => Ident::new(keywords::Invalid.name(), arg.pat.span),\n             })\n             .collect()\n     }\n@@ -3298,7 +3296,7 @@ impl<'a> LoweringContext<'a> {\n                         hir::PatKind::Binding(\n                             self.lower_binding_mode(binding_mode),\n                             canonical_id,\n-                            respan(ident.span, ident.name),\n+                            ident,\n                             sub.as_ref().map(|x| self.lower_pat(x)),\n                         )\n                     }\n@@ -4524,7 +4522,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::Pat {\n             id: node_id,\n             hir_id,\n-            node: hir::PatKind::Binding(bm, node_id, Spanned { span, node: ident.name }, None),\n+            node: hir::PatKind::Binding(bm, node_id, ident.with_span_pos(span), None),\n             span,\n         })\n     }"}, {"sha": "2c21d15f7ec769bfa0d8f8ff9c0b2126299e6848", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -616,7 +616,7 @@ impl<'hir> Map<'hir> {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => {\n                 keywords::SelfType.name()\n             }\n-            NodeGenericParam(param) => param.name.name(),\n+            NodeGenericParam(param) => param.name.ident(),\n             _ => bug!(\"ty_param_name: {} not a type parameter\", self.node_to_string(id)),\n         }\n     }\n@@ -1021,7 +1021,7 @@ impl<'hir> Map<'hir> {\n             Some(EntryBlock(_, _, block)) => block.span,\n             Some(EntryStructCtor(_, _, _)) => self.expect_item(self.get_parent(id)).span,\n             Some(EntryLifetime(_, _, lifetime)) => lifetime.span,\n-            Some(EntryGenericParam(_, _, param)) => param.span,\n+            Some(EntryGenericParam(_, _, param)) => param.ident.span,\n             Some(EntryVisibility(_, _, &Visibility::Restricted { ref path, .. })) => path.span,\n             Some(EntryVisibility(_, _, v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(EntryLocal(_, _, local)) => local.span,"}, {"sha": "47150d3d2c5a7761e1230072a50bc05a6208f5bf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -175,13 +175,12 @@ pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId(!0);\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct Label {\n-    pub name: Name,\n-    pub span: Span,\n+    pub ident: Ident,\n }\n \n impl fmt::Debug for Label {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"label({:?})\", self.name)\n+        write!(f, \"label({:?})\", self.ident)\n     }\n }\n \n@@ -493,7 +492,6 @@ pub struct GenericParam {\n     pub name: ParamName,\n     pub attrs: HirVec<Attribute>,\n     pub bounds: GenericBounds,\n-    pub span: Span,\n     pub pure_wrt_drop: bool,\n \n     pub kind: GenericParamKind,\n@@ -872,7 +870,7 @@ pub enum PatKind {\n     /// The `NodeId` is the canonical ID for the variable being bound,\n     /// e.g. in `Ok(x) | Err(x)`, both `x` use the same canonical ID,\n     /// which is the pattern ID of the first `x`.\n-    Binding(BindingAnnotation, NodeId, Spanned<Name>, Option<P<Pat>>),\n+    Binding(BindingAnnotation, NodeId, Ident, Option<P<Pat>>),\n \n     /// A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\n     /// The `bool` is `true` in the presence of a `..`.\n@@ -1550,7 +1548,7 @@ pub struct TraitItem {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TraitMethod {\n     /// No default body in the trait, just a signature.\n-    Required(HirVec<Spanned<Name>>),\n+    Required(HirVec<Ident>),\n \n     /// Both signature and body are provided in the trait.\n     Provided(BodyId),\n@@ -1645,7 +1643,7 @@ pub struct BareFnTy {\n     pub abi: Abi,\n     pub generic_params: HirVec<GenericParam>,\n     pub decl: P<FnDecl>,\n-    pub arg_names: HirVec<Spanned<Name>>,\n+    pub arg_names: HirVec<Ident>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -2185,7 +2183,7 @@ pub struct ForeignItem {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ForeignItem_ {\n     /// A foreign function\n-    ForeignItemFn(P<FnDecl>, HirVec<Spanned<Name>>, Generics),\n+    ForeignItemFn(P<FnDecl>, HirVec<Ident>, Generics),\n     /// A foreign static item (`static ext: u8`), with optional mutability\n     /// (the boolean is true when mutable)\n     ForeignItemStatic(P<Ty>, bool),"}, {"sha": "14989f1ff7d8aa3e5a29e457a575d6feee764f33", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -12,7 +12,6 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use hir::{self, HirId, PatKind};\n use syntax::ast;\n-use syntax::codemap::Spanned;\n use syntax_pos::Span;\n \n use std::iter::{Enumerate, ExactSizeIterator};\n@@ -91,11 +90,11 @@ impl hir::Pat {\n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n     pub fn each_binding<F>(&self, mut f: F)\n-        where F: FnMut(hir::BindingAnnotation, HirId, Span, &Spanned<ast::Name>),\n+        where F: FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident),\n     {\n         self.walk(|p| {\n-            if let PatKind::Binding(binding_mode, _, ref pth, _) = p.node {\n-                f(binding_mode, p.hir_id, p.span, pth);\n+            if let PatKind::Binding(binding_mode, _, ident, _) = p.node {\n+                f(binding_mode, p.hir_id, p.span, ident);\n             }\n             true\n         });\n@@ -132,20 +131,10 @@ impl hir::Pat {\n         contains_bindings\n     }\n \n-    pub fn simple_name(&self) -> Option<ast::Name> {\n+    pub fn simple_ident(&self) -> Option<ast::Ident> {\n         match self.node {\n-            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ref path1, None) |\n-            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ref path1, None) =>\n-                Some(path1.node),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn simple_span(&self) -> Option<Span> {\n-        match self.node {\n-            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ref path1, None) |\n-            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ref path1, None) =>\n-                Some(path1.span),\n+            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, None) |\n+            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, None) => Some(ident),\n             _ => None,\n         }\n     }"}, {"sha": "81f10b1be7f502bb66c3400b89ae9f4888c4b273", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -12,7 +12,7 @@ pub use self::AnnNode::*;\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::codemap::{CodeMap, Spanned};\n+use syntax::codemap::CodeMap;\n use syntax::parse::ParseSess;\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n@@ -933,7 +933,7 @@ impl<'a> State<'a> {\n                             m: &hir::MethodSig,\n                             generics: &hir::Generics,\n                             vis: &hir::Visibility,\n-                            arg_names: &[Spanned<ast::Name>],\n+                            arg_names: &[ast::Ident],\n                             body_id: Option<hir::BodyId>)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n@@ -1380,7 +1380,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprWhile(ref test, ref blk, opt_label) => {\n                 if let Some(label) = opt_label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.word_space(\":\")?;\n                 }\n                 self.head(\"while\")?;\n@@ -1390,7 +1390,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprLoop(ref blk, opt_label, _) => {\n                 if let Some(label) = opt_label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.word_space(\":\")?;\n                 }\n                 self.head(\"loop\")?;\n@@ -1426,7 +1426,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprBlock(ref blk, opt_label) => {\n                 if let Some(label) = opt_label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.word_space(\":\")?;\n                 }\n                 // containing cbox, will be closed by print-block at }\n@@ -1468,7 +1468,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"break\")?;\n                 self.s.space()?;\n                 if let Some(label) = destination.label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.s.space()?;\n                 }\n                 if let Some(ref expr) = *opt_expr {\n@@ -1480,7 +1480,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"continue\")?;\n                 self.s.space()?;\n                 if let Some(label) = destination.label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.s.space()?\n                 }\n             }\n@@ -1784,7 +1784,7 @@ impl<'a> State<'a> {\n         // is that it doesn't matter\n         match pat.node {\n             PatKind::Wild => self.s.word(\"_\")?,\n-            PatKind::Binding(binding_mode, _, ref path1, ref sub) => {\n+            PatKind::Binding(binding_mode, _, ident, ref sub) => {\n                 match binding_mode {\n                     hir::BindingAnnotation::Ref => {\n                         self.word_nbsp(\"ref\")?;\n@@ -1799,7 +1799,7 @@ impl<'a> State<'a> {\n                         self.word_nbsp(\"mut\")?;\n                     }\n                 }\n-                self.print_name(path1.node)?;\n+                self.print_ident(ident)?;\n                 if let Some(ref p) = *sub {\n                     self.s.word(\"@\")?;\n                     self.print_pat(&p)?;\n@@ -1964,7 +1964,7 @@ impl<'a> State<'a> {\n         match arm.body.node {\n             hir::ExprBlock(ref blk, opt_label) => {\n                 if let Some(label) = opt_label {\n-                    self.print_name(label.name)?;\n+                    self.print_ident(label.ident)?;\n                     self.word_space(\":\")?;\n                 }\n                 // the block will close the pattern's ibox\n@@ -1990,7 +1990,7 @@ impl<'a> State<'a> {\n                     name: Option<ast::Name>,\n                     generics: &hir::Generics,\n                     vis: &hir::Visibility,\n-                    arg_names: &[Spanned<ast::Name>],\n+                    arg_names: &[ast::Ident],\n                     body_id: Option<hir::BodyId>)\n                     -> io::Result<()> {\n         self.print_fn_header_info(header, vis)?;\n@@ -2007,8 +2007,8 @@ impl<'a> State<'a> {\n         assert!(arg_names.is_empty() || body_id.is_none());\n         self.commasep(Inconsistent, &decl.inputs, |s, ty| {\n             s.ibox(indent_unit)?;\n-            if let Some(name) = arg_names.get(i) {\n-                s.s.word(&name.node.as_str())?;\n+            if let Some(arg_name) = arg_names.get(i) {\n+                s.s.word(&arg_name.as_str())?;\n                 s.s.word(\":\")?;\n                 s.s.space()?;\n             } else if let Some(body_id) = body_id {\n@@ -2242,7 +2242,7 @@ impl<'a> State<'a> {\n                        decl: &hir::FnDecl,\n                        name: Option<ast::Name>,\n                        generic_params: &[hir::GenericParam],\n-                       arg_names: &[Spanned<ast::Name>])\n+                       arg_names: &[ast::Ident])\n                        -> io::Result<()> {\n         self.ibox(indent_unit)?;\n         if !generic_params.is_empty() {"}, {"sha": "94fda3e2874aef54da05234e896c98f20ddaba4d", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -155,8 +155,7 @@ impl_stable_hash_for!(enum hir::LifetimeName {\n });\n \n impl_stable_hash_for!(struct hir::Label {\n-    span,\n-    name\n+    ident\n });\n \n impl_stable_hash_for!(struct hir::Lifetime {\n@@ -201,7 +200,6 @@ impl_stable_hash_for!(enum hir::TraitBoundModifier {\n impl_stable_hash_for!(struct hir::GenericParam {\n     id,\n     name,\n-    span,\n     pure_wrt_drop,\n     attrs,\n     bounds,"}, {"sha": "773de8912ce9b54d22fcf903da17685500225c16", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -131,8 +131,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             labels.clear();\n             labels.push((pattern.span, format!(\"consider giving this closure parameter a type\")));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n-            if let Some(simple_name) = pattern.simple_name() {\n-                labels.push((pattern.span, format!(\"consider giving `{}` a type\", simple_name)));\n+            if let Some(simple_ident) = pattern.simple_ident() {\n+                labels.push((pattern.span, format!(\"consider giving `{}` a type\", simple_ident)));\n             } else {\n                 labels.push((pattern.span, format!(\"consider giving the pattern a type\")));\n             }"}, {"sha": "a2b8947521021ff03b810766bbdb0da8f6b1047b", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -96,14 +96,14 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let sub_is_ret_type =\n             self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n-        let span_label_var1 = if let Some(simple_name) = anon_arg_sup.pat.simple_name() {\n-            format!(\" from `{}`\", simple_name)\n+        let span_label_var1 = if let Some(simple_ident) = anon_arg_sup.pat.simple_ident() {\n+            format!(\" from `{}`\", simple_ident)\n         } else {\n             format!(\"\")\n         };\n \n-        let span_label_var2 = if let Some(simple_name) = anon_arg_sub.pat.simple_name() {\n-            format!(\" into `{}`\", simple_name)\n+        let span_label_var2 = if let Some(simple_ident) = anon_arg_sub.pat.simple_ident() {\n+            format!(\" into `{}`\", simple_ident)\n         } else {\n             format!(\"\")\n         };"}, {"sha": "51abfa2505ab5cf49943000072e1493d6f50faad", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -95,10 +95,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n+        let (error_var, span_label_var) = if let Some(simple_ident) = arg.pat.simple_ident() {\n             (\n-                format!(\"the type of `{}`\", simple_name),\n-                format!(\"the type of `{}`\", simple_name),\n+                format!(\"the type of `{}`\", simple_ident),\n+                format!(\"the type of `{}`\", simple_ident),\n             )\n         } else {\n             (\"parameter type\".to_owned(), \"type\".to_owned())"}, {"sha": "07a9dd75d4ca4ae1229449666c4a1cc72a37887f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -374,10 +374,9 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n     let body = ir.tcx.hir.body(body_id);\n \n     for arg in &body.arguments {\n-        arg.pat.each_binding(|_bm, hir_id, _x, path1| {\n+        arg.pat.each_binding(|_bm, hir_id, _x, ident| {\n             debug!(\"adding argument {:?}\", hir_id);\n-            let name = path1.node;\n-            fn_maps.add_variable(Arg(hir_id, name));\n+            fn_maps.add_variable(Arg(hir_id, ident.name));\n         })\n     };\n \n@@ -430,12 +429,11 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n         }\n     }\n \n-    pat.each_binding(|_bm, hir_id, _sp, path1| {\n-        let name = path1.node;\n-        ir.add_live_node_for_node(hir_id, VarDefNode(path1.span));\n+    pat.each_binding(|_bm, hir_id, _sp, ident| {\n+        ir.add_live_node_for_node(hir_id, VarDefNode(ident.span));\n         ir.add_variable(Local(LocalInfo {\n             id: hir_id,\n-            name,\n+            name: ident.name,\n             is_shorthand: shorthand_field_ids.contains(&hir_id)\n         }));\n     });\n@@ -1374,7 +1372,7 @@ fn check_local<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, local: &'tcx hir::Local)\n         },\n         None => {\n             this.pat_bindings(&local.pat, |this, ln, var, sp, id| {\n-                let span = local.pat.simple_span().unwrap_or(sp);\n+                let span = local.pat.simple_ident().map_or(sp, |ident| ident.span);\n                 this.warn_about_unused(span, id, ln, var);\n             })\n         }\n@@ -1475,12 +1473,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn warn_about_unused_args(&self, body: &hir::Body, entry_ln: LiveNode) {\n         for arg in &body.arguments {\n-            arg.pat.each_binding(|_bm, hir_id, _, path1| {\n-                let sp = path1.span;\n+            arg.pat.each_binding(|_bm, hir_id, _, ident| {\n+                let sp = ident.span;\n                 let var = self.variable(hir_id, sp);\n                 // Ignore unused self.\n-                let name = path1.node;\n-                if name != keywords::SelfValue.name() {\n+                if ident.name != keywords::SelfValue.name() {\n                     if !self.warn_about_unused(sp, hir_id, entry_ln, var) {\n                         if self.live_on_entry(entry_ln, var).is_none() {\n                             self.report_dead_assign(hir_id, sp, var, true);"}, {"sha": "5d5ada7b91e5a07521ba49cd764dee5b0eff809f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -254,7 +254,7 @@ struct LifetimeContext<'a, 'tcx: 'a> {\n     is_in_fn_syntax: bool,\n \n     /// List of labels in the function/method currently under analysis.\n-    labels_in_fn: Vec<(ast::Name, Span)>,\n+    labels_in_fn: Vec<ast::Ident>,\n \n     /// Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n@@ -1109,7 +1109,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n     struct GatherLabels<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         scope: ScopeRef<'a>,\n-        labels_in_fn: &'a mut Vec<(ast::Name, Span)>,\n+        labels_in_fn: &'a mut Vec<ast::Ident>,\n     }\n \n     let mut gather = GatherLabels {\n@@ -1125,41 +1125,39 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n         }\n \n         fn visit_expr(&mut self, ex: &hir::Expr) {\n-            if let Some((label, label_span)) = expression_label(ex) {\n-                for &(prior, prior_span) in &self.labels_in_fn[..] {\n+            if let Some(label) = expression_label(ex) {\n+                for prior_label in &self.labels_in_fn[..] {\n                     // FIXME (#24278): non-hygienic comparison\n-                    if label == prior {\n+                    if label.name == prior_label.name {\n                         signal_shadowing_problem(\n                             self.tcx,\n-                            label,\n-                            original_label(prior_span),\n-                            shadower_label(label_span),\n+                            label.name,\n+                            original_label(prior_label.span),\n+                            shadower_label(label.span),\n                         );\n                     }\n                 }\n \n-                check_if_label_shadows_lifetime(self.tcx, self.scope, label, label_span);\n+                check_if_label_shadows_lifetime(self.tcx, self.scope, label);\n \n-                self.labels_in_fn.push((label, label_span));\n+                self.labels_in_fn.push(label);\n             }\n             intravisit::walk_expr(self, ex)\n         }\n     }\n \n-    fn expression_label(ex: &hir::Expr) -> Option<(ast::Name, Span)> {\n+    fn expression_label(ex: &hir::Expr) -> Option<ast::Ident> {\n         match ex.node {\n-            hir::ExprWhile(.., Some(label)) | hir::ExprLoop(_, Some(label), _) => {\n-                Some((label.name, label.span))\n-            }\n+            hir::ExprWhile(.., Some(label)) |\n+            hir::ExprLoop(_, Some(label), _) => Some(label.ident),\n             _ => None,\n         }\n     }\n \n     fn check_if_label_shadows_lifetime(\n         tcx: TyCtxt<'_, '_, '_>,\n         mut scope: ScopeRef<'_>,\n-        label: ast::Name,\n-        label_span: Span,\n+        label: ast::Ident,\n     ) {\n         loop {\n             match *scope {\n@@ -1177,15 +1175,14 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n                     ref lifetimes, s, ..\n                 } => {\n                     // FIXME (#24278): non-hygienic comparison\n-                    let param_name = hir::ParamName::Plain(ast::Ident::with_empty_ctxt(label));\n-                    if let Some(def) = lifetimes.get(&param_name) {\n+                    if let Some(def) = lifetimes.get(&hir::LifetimeName::Ident(label.modern())) {\n                         let node_id = tcx.hir.as_local_node_id(def.id().unwrap()).unwrap();\n \n                         signal_shadowing_problem(\n                             tcx,\n-                            label,\n+                            label.name,\n                             original_lifetime(tcx.hir.span(node_id)),\n-                            shadower_label(label_span),\n+                            shadower_label(label.span),\n                         );\n                         return;\n                     }\n@@ -2325,13 +2322,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         mut old_scope: ScopeRef,\n         param: &'tcx hir::GenericParam,\n     ) {\n-        for &(label, label_span) in &self.labels_in_fn {\n+        for label in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n-            if param.name.ident().name == label {\n+            if param.name.ident().name == label.name {\n                 signal_shadowing_problem(\n                     self.tcx,\n-                    label,\n-                    original_label(label_span),\n+                    label.name,\n+                    original_label(label.span),\n                     shadower_lifetime(&param),\n                 );\n                 return;"}, {"sha": "241950fb6bff069b7e2d5d0a8489e440ec96c31b", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -109,10 +109,10 @@ pub fn gather_move_from_pat<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                               cmt: &'c mc::cmt_<'tcx>) {\n     let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n-        PatKind::Binding(_, _, ref path1, _) => {\n+        PatKind::Binding(_, _, ident, _) => {\n             Some(MovePlace {\n                      span: move_pat.span,\n-                     name: path1.node,\n+                     name: ident.name,\n                      pat_source: source,\n                  })\n         }"}, {"sha": "294ae1e63a9ee6f922b836ee6d2d46faa18c4d4e", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -46,11 +46,9 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n         let tcx = self.bccx.tcx;\n         let mut mutables = FxHashMap();\n         for p in pats {\n-            p.each_binding(|_, hir_id, span, path1| {\n-                let name = path1.node;\n-\n+            p.each_binding(|_, hir_id, span, ident| {\n                 // Skip anything that looks like `_foo`\n-                if name.as_str().starts_with(\"_\") {\n+                if ident.as_str().starts_with(\"_\") {\n                     return;\n                 }\n \n@@ -65,7 +63,7 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n                     _ => return,\n                 }\n \n-                mutables.entry(name).or_insert(Vec::new()).push((hir_id, span));\n+                mutables.entry(ident.name).or_insert(Vec::new()).push((hir_id, span));\n             });\n         }\n "}, {"sha": "af34530a548d5d850c634cd099819bfa923d601c", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n             GenericParamKind::Lifetime { .. } => {}\n             GenericParamKind::Type { synthetic, .. } => {\n                 if synthetic.is_none() {\n-                    self.check_case(cx, \"type parameter\", param.name.name(), param.span);\n+                    self.check_case(cx, \"type parameter\", param.name.ident().name, param.span);\n                 }\n             }\n         }\n@@ -302,20 +302,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(ref names)) = item.node {\n+        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(ref pnames)) = item.node {\n             self.check_snake_case(cx,\n                                   \"trait method\",\n                                   &item.name.as_str(),\n                                   Some(item.span));\n-            for name in names {\n-                self.check_snake_case(cx, \"variable\", &name.node.as_str(), Some(name.span));\n+            for param_name in pnames {\n+                self.check_snake_case(cx, \"variable\", &param_name.as_str(), Some(param_name.span));\n             }\n         }\n     }\n \n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n-        if let &PatKind::Binding(_, _, ref path1, _) = &p.node {\n-            self.check_snake_case(cx, \"variable\", &path1.node.as_str(), Some(p.span));\n+        if let &PatKind::Binding(_, _, ref ident, _) = &p.node {\n+            self.check_snake_case(cx, \"variable\", &ident.as_str(), Some(p.span));\n         }\n     }\n "}, {"sha": "aa952c5330e5c6c082c1fb9d35b35c4da603a670", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -182,18 +182,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                     // (Issue #49588)\n                     continue;\n                 }\n-                if let PatKind::Binding(_, _, name, None) = fieldpat.node.pat.node {\n-                    let binding_ident = ast::Ident::new(name.node, name.span);\n-                    if cx.tcx.find_field_index(binding_ident, &variant) ==\n+                if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n+                    if cx.tcx.find_field_index(ident, &variant) ==\n                        Some(cx.tcx.field_index(fieldpat.node.id, cx.tables)) {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n-                                     &format!(\"the `{}:` in this pattern is redundant\",\n-                                              name.node));\n+                                     &format!(\"the `{}:` in this pattern is redundant\", ident));\n                         let subspan = cx.tcx.sess.codemap().span_through_char(fieldpat.span, ':');\n-                        err.span_suggestion_short(subspan,\n-                                                  \"remove this\",\n-                                                  format!(\"{}\", name.node));\n+                        err.span_suggestion_short(subspan, \"remove this\", format!(\"{}\", ident));\n                         err.emit();\n                     }\n                 }"}, {"sha": "d8a224d3badd8692390396d37d31e30bcc501e76", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -39,9 +39,8 @@ use std::path::Path;\n use rustc_data_structures::sync::Lrc;\n use std::u32;\n use syntax::ast::{self, CRATE_NODE_ID};\n-use syntax::codemap::Spanned;\n use syntax::attr;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::keywords;\n use syntax_pos::{self, hygiene, FileName, FileMap, Span, DUMMY_SP};\n \n use rustc::hir::{self, PatKind};\n@@ -975,16 +974,15 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             let body = self.tcx.hir.body(body_id);\n             self.lazy_seq(body.arguments.iter().map(|arg| {\n                 match arg.pat.node {\n-                    PatKind::Binding(_, _, name, _) => name.node,\n-                    _ => Symbol::intern(\"\")\n+                    PatKind::Binding(_, _, ident, _) => ident.name,\n+                    _ => keywords::Invalid.name(),\n                 }\n             }))\n         })\n     }\n \n-    fn encode_fn_arg_names(&mut self, names: &[Spanned<ast::Name>])\n-                           -> LazySeq<ast::Name> {\n-        self.lazy_seq(names.iter().map(|name| name.node))\n+    fn encode_fn_arg_names(&mut self, param_names: &[ast::Ident]) -> LazySeq<ast::Name> {\n+        self.lazy_seq(param_names.iter().map(|ident| ident.name))\n     }\n \n     fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {"}, {"sha": "ab20b7bfea2b9490f599e4b62a33034d08e82a26", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -538,8 +538,8 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 mutability: Mutability::Not,\n             };\n             if let Some(hir::map::NodeBinding(pat)) = tcx.hir.find(var_id) {\n-                if let hir::PatKind::Binding(_, _, ref name, _) = pat.node {\n-                    decl.debug_name = name.node;\n+                if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n+                    decl.debug_name = ident.name;\n \n                     let bm = *hir.tables.pat_binding_modes()\n                                         .get(pat.hir_id)\n@@ -675,8 +675,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // If this is a simple binding pattern, give the local a nice name for debuginfo.\n             let mut name = None;\n             if let Some(pat) = pattern {\n-                if let hir::PatKind::Binding(_, _, ref ident, _) = pat.node {\n-                    name = Some(ident.node);\n+                if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n+                    name = Some(ident.name);\n                 }\n             }\n "}, {"sha": "0f4052b6fc8a47d95f7da85deef5399d0763d205", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n     pat.walk(|p| {\n-        if let PatKind::Binding(_, _, name, None) = p.node {\n+        if let PatKind::Binding(_, _, ident, None) = p.node {\n             let bm = *cx.tables\n                         .pat_binding_modes()\n                         .get(p.hir_id)\n@@ -321,13 +321,13 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n             let pat_ty = cx.tables.pat_ty(p);\n             if let ty::TyAdt(edef, _) = pat_ty.sty {\n                 if edef.is_enum() && edef.variants.iter().any(|variant| {\n-                    variant.name == name.node && variant.ctor_kind == CtorKind::Const\n+                    variant.name == ident.name && variant.ctor_kind == CtorKind::Const\n                 }) {\n                     let ty_path = cx.tcx.item_path_str(edef.did);\n                     let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n                         \"pattern binding `{}` is named the same as one \\\n                          of the variants of the type `{}`\",\n-                        name.node, ty_path);\n+                        ident, ty_path);\n                     err.span_suggestion_with_applicability(\n                         p.span,\n                         \"to match on the variant, qualify the path\","}, {"sha": "3f3e29a808a4f725d9a6634ed40716cd3ce27277", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -461,7 +461,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            PatKind::Binding(_, id, ref name, ref sub) => {\n+            PatKind::Binding(_, id, ident, ref sub) => {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n                 let region = match var_ty.sty {\n                     ty::TyRef(r, _, _) => Some(r),\n@@ -491,14 +491,14 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     if let ty::TyRef(_, rty, _) = ty.sty {\n                         ty = rty;\n                     } else {\n-                        bug!(\"`ref {}` has wrong type {}\", name.node, ty);\n+                        bug!(\"`ref {}` has wrong type {}\", ident, ty);\n                     }\n                 }\n \n                 PatternKind::Binding {\n                     mutability,\n                     mode,\n-                    name: name.node,\n+                    name: ident.name,\n                     var: id,\n                     ty: var_ty,\n                     subpattern: self.lower_opt_pattern(sub),"}, {"sha": "1c107e1cdca6d68083ebaf17ba01117928406d73", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -960,14 +960,14 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n \n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'gcx hir::Pat) {\n-        if let PatKind::Binding(_, _, ref path1, _) = p.node {\n+        if let PatKind::Binding(_, _, ident, _) = p.node {\n             let var_ty = self.assign(p.span, p.id, None);\n \n             self.fcx.require_type_is_sized(var_ty, p.span,\n                                            traits::VariableType(p.id));\n \n             debug!(\"Pattern binding {} is assigned to {} with type {:?}\",\n-                   path1.node,\n+                   ident,\n                    self.fcx.ty_to_string(\n                        self.fcx.locals.borrow().get(&p.id).unwrap().clone()),\n                    var_ty);\n@@ -1050,7 +1050,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if arg.pat.simple_name().is_none() {\n+        if arg.pat.simple_ident().is_none() {\n             fcx.require_type_is_sized(arg_ty, decl.output.span(), traits::MiscObligation);\n         }\n "}, {"sha": "852603ac51c35deb24fa8b580a0227c4a91844cb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -914,7 +914,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut i = 0;\n     params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamKind::Type { ref default, synthetic, .. } => {\n-            if param.name.name() == keywords::SelfType.name() {\n+            if param.name.ident().name == keywords::SelfType.name() {\n                 span_bug!(param.span,  \"`Self` should not be the name of a regular parameter\");\n             }\n \n@@ -931,7 +931,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             let ty_param = ty::GenericParamDef {\n                 index: type_start + i as u32,\n-                name: param.name.name().as_interned_str(),\n+                name: param.name.ident().as_interned_str(),\n                 def_id: tcx.hir.local_def_id(param.id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Type {\n@@ -1461,7 +1461,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in &ast_generics.params {\n         match param.kind {\n             GenericParamKind::Type { .. } => {\n-                let name = param.name.name().as_interned_str();\n+                let name = param.name.ident().as_interned_str();\n                 let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n                 index += 1;\n "}, {"sha": "f63084b3f19d7ab1d4a4cd248ea80e06111886f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -2150,11 +2150,11 @@ pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n \n-impl<'a> Clean<Arguments> for (&'a [hir::Ty], &'a [Spanned<ast::Name>]) {\n+impl<'a> Clean<Arguments> for (&'a [hir::Ty], &'a [ast::Ident]) {\n     fn clean(&self, cx: &DocContext) -> Arguments {\n         Arguments {\n             values: self.0.iter().enumerate().map(|(i, ty)| {\n-                let mut name = self.1.get(i).map(|n| n.node.to_string())\n+                let mut name = self.1.get(i).map(|ident| ident.to_string())\n                                             .unwrap_or(String::new());\n                 if name.is_empty() {\n                     name = \"_\".to_string();\n@@ -4064,7 +4064,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n     match p.node {\n         PatKind::Wild => \"_\".to_string(),\n-        PatKind::Binding(_, _, ref p, _) => p.node.to_string(),\n+        PatKind::Binding(_, _, ident, _) => ident.to_string(),\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", qpath_to_string(name),"}, {"sha": "faf2cf64e1d9f05aa374e6ed8b9e7b0ea90864be", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ca1e4abdb9476d8aa68457414ef80c5249caee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c6ca1e4abdb9476d8aa68457414ef80c5249caee", "patch": "@@ -7325,7 +7325,7 @@ impl<'a> Parser<'a> {\n             match self.token {\n                 token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n                     self.bump(); // `_`\n-                    Ok(Some(Ident::new(ident.name.gensymed(), ident.span)))\n+                    Ok(Some(ident.gensym()))\n                 }\n                 _ => self.parse_ident().map(Some),\n             }"}]}