{"sha": "455f8b0d4588b6d890ce8a908d488c0325e3f29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NWY4YjBkNDU4OGI2ZDg5MGNlOGE5MDhkNDg4YzAzMjVlM2YyOWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T17:58:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-13T14:27:34Z"}, "message": "deprecate fn exprs and the fn() type, preferring fn@ and native fn", "tree": {"sha": "9da702ded644a4d6eabe0936949060ca0ecc1c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da702ded644a4d6eabe0936949060ca0ecc1c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455f8b0d4588b6d890ce8a908d488c0325e3f29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455f8b0d4588b6d890ce8a908d488c0325e3f29e", "html_url": "https://github.com/rust-lang/rust/commit/455f8b0d4588b6d890ce8a908d488c0325e3f29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455f8b0d4588b6d890ce8a908d488c0325e3f29e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "html_url": "https://github.com/rust-lang/rust/commit/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a"}], "stats": {"total": 352, "additions": 177, "deletions": 175}, "files": [{"sha": "f893aae4847d61d9156a3bb77bd8db745ce583a2", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -564,16 +564,15 @@ fn link_binary(sess: session,\n                lm: link_meta) {\n     // Converts a library file name into a gcc -l argument\n     fn unlib(config: @session::config, filename: str) -> str {\n-        let rmlib =\n-            bind fn (config: @session::config, filename: str) -> str {\n-                     if config.os == session::os_macos ||\n-                            (config.os == session::os_linux ||\n-                             config.os == session::os_freebsd) &&\n-                                str::find(filename, \"lib\") == 0 {\n-                         ret str::slice(filename, 3u,\n-                                        str::byte_len(filename));\n-                     } else { ret filename; }\n-                 }(config, _);\n+        let rmlib = fn@(filename: str) -> str {\n+            if config.os == session::os_macos ||\n+                (config.os == session::os_linux ||\n+                 config.os == session::os_freebsd) &&\n+                str::find(filename, \"lib\") == 0 {\n+                ret str::slice(filename, 3u,\n+                               str::byte_len(filename));\n+            } else { ret filename; }\n+        };\n         fn rmext(filename: str) -> str {\n             let parts = str::split(filename, '.' as u8);\n             vec::pop(parts);"}, {"sha": "f874bd241e0cf1955bf950c4529efa2b288b9e53", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -43,13 +43,13 @@ fn find_linkage_metas(attrs: [ast::attribute]) -> [@ast::meta_item] {\n // Search a list of attributes and return only those with a specific name\n fn find_attrs_by_name(attrs: [ast::attribute], name: ast::ident) ->\n    [ast::attribute] {\n-    let filter =\n-        bind fn (a: ast::attribute, name: ast::ident) ->\n-                option::t<ast::attribute> {\n-                 if get_attr_name(a) == name {\n-                     option::some(a)\n-                 } else { option::none }\n-             }(_, name);\n+    let filter = (\n+        fn@(a: ast::attribute) -> option::t<ast::attribute> {\n+            if get_attr_name(a) == name {\n+                option::some(a)\n+            } else { option::none }\n+        }\n+    );\n     ret vec::filter_map(attrs, filter);\n }\n \n@@ -59,13 +59,11 @@ fn get_attr_name(attr: ast::attribute) -> ast::ident {\n \n fn find_meta_items_by_name(metas: [@ast::meta_item], name: ast::ident) ->\n    [@ast::meta_item] {\n-    let filter =\n-        bind fn (&&m: @ast::meta_item, name: ast::ident) ->\n-                option::t<@ast::meta_item> {\n-                 if get_meta_item_name(m) == name {\n-                     option::some(m)\n-                 } else { option::none }\n-             }(_, name);\n+    let filter = fn@(&&m: @ast::meta_item) -> option::t<@ast::meta_item> {\n+        if get_meta_item_name(m) == name {\n+            option::some(m)\n+        } else { option::none }\n+    };\n     ret vec::filter_map(metas, filter);\n }\n \n@@ -178,13 +176,11 @@ fn sort_meta_items(items: [@ast::meta_item]) -> [@ast::meta_item] {\n fn remove_meta_items_by_name(items: [@ast::meta_item], name: str) ->\n    [@ast::meta_item] {\n \n-    let filter =\n-        bind fn (&&item: @ast::meta_item, name: str) ->\n-                option::t<@ast::meta_item> {\n-                 if get_meta_item_name(item) != name {\n-                     option::some(item)\n-                 } else { option::none }\n-             }(_, name);\n+    let filter = fn@(&&item: @ast::meta_item) -> option::t<@ast::meta_item> {\n+        if get_meta_item_name(item) != name {\n+            option::some(item)\n+        } else { option::none }\n+    };\n \n     ret vec::filter_map(items, filter);\n }"}, {"sha": "e7890e9e926bbcb0258f6846374e891d7ec37b06", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -465,7 +465,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n \n // Path and definition ID indexing\n \n-fn create_index<T: copy>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n+fn create_index<T: copy>(index: [entry<T>], hash_fn: fn@(T) -> uint) ->\n    [@[entry<T>]] {\n     let buckets: [@mutable [entry<T>]] = [];\n     uint::range(0u, 256u) {|_i| buckets += [@mutable []]; };\n@@ -482,8 +482,8 @@ fn create_index<T: copy>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n }\n \n fn encode_index<T>(ebml_w: ebml::writer, buckets: [@[entry<T>]],\n-                   write_fn: fn(io::writer, T)) {\n-    let writer = ebml_w.writer;\n+                   write_fn: block(io::writer, T)) {\n+    let writer = io::new_writer(ebml_w.writer);\n     ebml::start_tag(ebml_w, tag_index);\n     let bucket_locs: [uint] = [];\n     ebml::start_tag(ebml_w, tag_index_buckets);"}, {"sha": "5f486ca47542da665180089833dff04748f3ca15", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -18,7 +18,7 @@ export enc_bounds;\n type ctxt =\n     // Def -> str Callback:\n     // The type context.\n-    {ds: fn(def_id) -> str, tcx: ty::ctxt, abbrevs: abbrev_ctxt};\n+    {ds: fn@(def_id) -> str, tcx: ty::ctxt, abbrevs: abbrev_ctxt};\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str.\n // Extra parameters are for converting to/from def_ids in the string rep."}, {"sha": "e51c0876f09b51673f57e06b1d8716fc168eeb4f", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -58,7 +58,7 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n // variables. `id` is the node_id for some expression that creates the\n // closure.\n fn with_appropriate_checker(cx: ctx, id: node_id,\n-                            b: block(fn(ctx, ty::t, sp: span))) {\n+                            b: block(fn@(ctx, ty::t, sp: span))) {\n     let fty = ty::node_id_to_monotype(cx.tcx, id);\n     alt ty::ty_fn_proto(cx.tcx, fty) {\n       proto_uniq. { b(check_send); }"}, {"sha": "5b9925c2ce5d404875fe5fd89403f4d8eda93262", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1706,7 +1706,7 @@ fn add_name(ch: checker, sp: span, name: ident) {\n \n fn ident_id(&&i: ident) -> ident { ret i; }\n \n-fn ensure_unique<T>(e: env, sp: span, elts: [T], id: fn(T) -> ident,\n+fn ensure_unique<T>(e: env, sp: span, elts: [T], id: block(T) -> ident,\n                     kind: str) {\n     let ch = checker(e, kind);\n     for elt: T in elts { add_name(ch, sp, id(elt)); }"}, {"sha": "f7774883fabaffb2d1a270377b574e80adf8ee71", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1140,7 +1140,7 @@ fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint])\n     ret info;\n }\n \n-type glue_helper = fn(@block_ctxt, ValueRef, ty::t);\n+type glue_helper = fn@(@block_ctxt, ValueRef, ty::t);\n \n fn declare_generic_glue(cx: @local_ctxt, t: ty::t, llfnty: TypeRef, name: str)\n    -> ValueRef {\n@@ -1570,8 +1570,8 @@ fn compare_scalar_values(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef,\n     }\n }\n \n-type val_pair_fn = fn(@block_ctxt, ValueRef, ValueRef) -> @block_ctxt;\n-type val_and_ty_fn = fn(@block_ctxt, ValueRef, ty::t) -> @block_ctxt;\n+type val_pair_fn = fn@(@block_ctxt, ValueRef, ValueRef) -> @block_ctxt;\n+type val_and_ty_fn = fn@(@block_ctxt, ValueRef, ty::t) -> @block_ctxt;\n \n fn load_inbounds(cx: @block_ctxt, p: ValueRef, idxs: [int]) -> ValueRef {\n     ret Load(cx, GEPi(cx, p, idxs));\n@@ -3268,8 +3268,8 @@ fn invoke_full(bcx: @block_ctxt, llfn: ValueRef, llargs: [ValueRef],\n fn invoke_(bcx: @block_ctxt, llfn: ValueRef, llargs: [ValueRef],\n            to_zero: [{v: ValueRef, t: ty::t}],\n            to_revoke: [{v: ValueRef, t: ty::t}],\n-           invoker: fn(@block_ctxt, ValueRef, [ValueRef],\n-                       BasicBlockRef, BasicBlockRef)) -> @block_ctxt {\n+           invoker: block(@block_ctxt, ValueRef, [ValueRef],\n+                          BasicBlockRef, BasicBlockRef)) -> @block_ctxt {\n     // FIXME: May be worth turning this into a plain call when there are no\n     // cleanups to run\n     if bcx.unreachable { ret bcx; }"}, {"sha": "3f3a466d69e9ebc2a40bd2fe0a2c1a1d5a06a98f", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -647,7 +647,7 @@ fn make_fn_glue(\n     cx: @block_ctxt,\n     v: ValueRef,\n     t: ty::t,\n-    glue_fn: fn(@block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt)\n+    glue_fn: fn@(@block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt)\n     -> @block_ctxt {\n     let bcx = cx;\n     let tcx = bcx_tcx(cx);"}, {"sha": "c33d517879058b507df019525443c50c4ebc27bc", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -237,29 +237,26 @@ fn trans_add(bcx: @block_ctxt, vec_ty: ty::t, lhs: ValueRef,\n \n     let write_ptr_ptr = do_spill_noroot\n         (bcx, get_dataptr(bcx, new_vec_ptr, llunitty));\n-    let copy_fn =\n-        bind fn (bcx: @block_ctxt, addr: ValueRef, _ty: ty::t,\n-                 write_ptr_ptr: ValueRef, unit_ty: ty::t, llunitsz: ValueRef)\n-                -> @block_ctxt {\n-                 let ccx = bcx_ccx(bcx);\n-                 let write_ptr = Load(bcx, write_ptr_ptr);\n-                 let bcx =\n-                     copy_val(bcx, INIT, write_ptr,\n-                              load_if_immediate(bcx, addr, unit_ty), unit_ty);\n-                 let incr =\n-                     ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) ?\n-                         llunitsz : C_int(ccx, 1);\n-                 Store(bcx, InBoundsGEP(bcx, write_ptr, [incr]),\n-                       write_ptr_ptr);\n-                 ret bcx;\n-             }(_, _, _, write_ptr_ptr, unit_ty, llunitsz);\n+    let copy_fn = fn@(bcx: @block_ctxt, addr: ValueRef,\n+                      _ty: ty::t) -> @block_ctxt {\n+        let ccx = bcx_ccx(bcx);\n+        let write_ptr = Load(bcx, write_ptr_ptr);\n+        let bcx = copy_val(bcx, INIT, write_ptr,\n+                           load_if_immediate(bcx, addr, unit_ty), unit_ty);\n+        let incr =\n+            ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) ?\n+            llunitsz : C_int(ccx, 1);\n+        Store(bcx, InBoundsGEP(bcx, write_ptr, [incr]),\n+              write_ptr_ptr);\n+        ret bcx;\n+    };\n \n     let bcx = iter_vec_raw(bcx, lhs, vec_ty, lhs_fill, copy_fn);\n     bcx = iter_vec_raw(bcx, rhs, vec_ty, rhs_fill, copy_fn);\n     ret trans::store_in_dest(bcx, new_vec_ptr, dest);\n }\n \n-type val_and_ty_fn = fn(@block_ctxt, ValueRef, ty::t) -> result;\n+type val_and_ty_fn = fn@(@block_ctxt, ValueRef, ty::t) -> result;\n \n type iter_vec_block = block(@block_ctxt, ValueRef, ty::t) -> @block_ctxt;\n "}, {"sha": "5c0c6c78b3a885b447fd2d1fa0c008f6f183e1fc", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -552,7 +552,7 @@ fn constraints(fcx: fn_ctxt) -> [norm_constraint] {\n fn match_args(fcx: fn_ctxt, occs: @mutable [pred_args],\n               occ: [@constr_arg_use]) -> uint {\n     #debug(\"match_args: looking at %s\",\n-           constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, occ));\n+           constr_args_to_str(fn@(i: inst) -> str { ret i.ident; }, occ));\n     for pd: pred_args in *occs {\n         log(debug,\n                  \"match_args: candidate \" + pred_args_to_str(pd));\n@@ -633,7 +633,7 @@ fn expr_to_constr(tcx: ty::ctxt, e: @expr) -> sp_constr {\n \n fn pred_args_to_str(p: pred_args) -> str {\n     \"<\" + uint::str(p.node.bit_num) + \", \" +\n-        constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, p.node.args)\n+        constr_args_to_str(fn@(i: inst) -> str { ret i.ident; }, p.node.args)\n         + \">\"\n }\n \n@@ -973,7 +973,8 @@ fn non_init_constraint_mentions(_fcx: fn_ctxt, c: norm_constraint, v: node_id)\n         };\n }\n \n-fn args_mention<T>(args: [@constr_arg_use], q: fn([T], node_id) -> bool,\n+fn args_mention<T>(args: [@constr_arg_use],\n+                   q: block([T], node_id) -> bool,\n                    s: [T]) -> bool {\n     /*\n       FIXME"}, {"sha": "c4e0987308544397af96dadd84f4fd63d213d4ad", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -151,7 +151,7 @@ fn relax_precond_block(fcx: fn_ctxt, i: node_id, b: blk) {\n           visit_expr: relax_precond_expr,\n           visit_stmt: relax_precond_stmt,\n           visit_item:\n-              fn (_i: @item, _cx: relax_ctxt, _vt: visit::vt<relax_ctxt>) { },\n+              fn@(_i: @item, _cx: relax_ctxt, _vt: visit::vt<relax_ctxt>) { },\n           visit_fn: bind do_nothing(_, _, _, _, _, _, _)\n              with *visitor};\n     let v1 = visit::mk_vt(visitor);"}, {"sha": "ab651b1094a83a99d20dca86a45cc9a2de9c46b4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1077,7 +1077,7 @@ fn type_is_native(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) { ty_native(_) { ret true; } _ { ret false; } }\n }\n \n-fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n+fn type_structurally_contains(cx: ctxt, ty: t, test: block(sty) -> bool) ->\n    bool {\n     let sty = struct(cx, ty);\n     if test(sty) { ret true; }\n@@ -1121,20 +1121,20 @@ pure fn type_has_dynamic_size(cx: ctxt, ty: t) -> bool unchecked {\n     actually checkable. It seems to me like a lot of properties\n     that the type context tracks about types should be immutable.)\n     */\n-    type_structurally_contains(cx, ty, fn (sty: sty) -> bool {\n+    type_structurally_contains(cx, ty) {|sty|\n         alt sty {\n           ty_param(_, _) { true }\n           _ { false }\n         }\n-    })\n+    }\n }\n \n // Returns true for noncopyable types and types where a copy of a value can be\n // distinguished from the value itself. I.e. types with mutable content that's\n // not shared through a pointer.\n fn type_allows_implicit_copy(cx: ctxt, ty: t) -> bool {\n-    ret !type_structurally_contains(cx, ty, fn (sty: sty) -> bool {\n-        ret alt sty {\n+    ret !type_structurally_contains(cx, ty, {|sty|\n+        alt sty {\n           ty_param(_, _) { true }\n           ty_vec(mt) {\n             mt.mut != ast::imm\n@@ -1149,12 +1149,12 @@ fn type_allows_implicit_copy(cx: ctxt, ty: t) -> bool {\n             false\n           }\n           _ { false }\n-        };\n+        }\n     }) && type_kind(cx, ty) != kind_noncopyable;\n }\n \n fn type_structurally_contains_uniques(cx: ctxt, ty: t) -> bool {\n-    ret type_structurally_contains(cx, ty, fn (sty: sty) -> bool {\n+    ret type_structurally_contains(cx, ty, {|sty|\n         ret alt sty {\n           ty_uniq(_) { ret true; }\n           ty_vec(_) { true }\n@@ -1414,7 +1414,9 @@ fn hash_type_structure(st: sty) -> uint {\n \n fn hash_raw_ty(&&rt: @raw_t) -> uint { ret rt.hash; }\n \n-fn arg_eq<T>(eq: fn(T, T) -> bool, a: @sp_constr_arg<T>, b: @sp_constr_arg<T>)\n+fn arg_eq<T>(eq: block(T, T) -> bool,\n+             a: @sp_constr_arg<T>,\n+             b: @sp_constr_arg<T>)\n    -> bool {\n     alt a.node {\n       ast::carg_base. {\n@@ -1431,7 +1433,8 @@ fn arg_eq<T>(eq: fn(T, T) -> bool, a: @sp_constr_arg<T>, b: @sp_constr_arg<T>)\n     }\n }\n \n-fn args_eq<T>(eq: fn(T, T) -> bool, a: [@sp_constr_arg<T>],\n+fn args_eq<T>(eq: block(T, T) -> bool,\n+              a: [@sp_constr_arg<T>],\n               b: [@sp_constr_arg<T>]) -> bool {\n     let i: uint = 0u;\n     for arg: @sp_constr_arg<T> in a {\n@@ -1752,12 +1755,13 @@ mod unify {\n         let root_a = ufind::find(vb.sets, set_a);\n         let root_b = ufind::find(vb.sets, set_b);\n \n-        let replace_type =\n-            bind fn (vb: @var_bindings, t: t, set_a: uint, set_b: uint) {\n-                     ufind::union(vb.sets, set_a, set_b);\n-                     let root_c: uint = ufind::find(vb.sets, set_a);\n-                     smallintmap::insert::<t>(vb.types, root_c, t);\n-                 }(_, _, set_a, set_b);\n+        let replace_type = (\n+            fn@(vb: @var_bindings, t: t) {\n+                ufind::union(vb.sets, set_a, set_b);\n+                let root_c: uint = ufind::find(vb.sets, set_a);\n+                smallintmap::insert::<t>(vb.types, root_c, t);\n+            }\n+        );\n \n \n         alt smallintmap::find(vb.types, root_a) {"}, {"sha": "ad76177eec3ef6917ebe5f73c9fce03b30c13d2b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1450,7 +1450,7 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n     }\n }\n \n-type unifier = fn(@fn_ctxt, span, ty::t, ty::t) -> ty::t;\n+type unifier = fn@(@fn_ctxt, span, ty::t, ty::t) -> ty::t;\n \n fn check_expr(fcx: @fn_ctxt, expr: @ast::expr) -> bool {\n     fn dummy_unify(_fcx: @fn_ctxt, _sp: span, _expected: ty::t, actual: ty::t)\n@@ -2886,8 +2886,8 @@ mod dict {\n     fn resolve_in_block(fcx: @fn_ctxt, bl: ast::blk) {\n         visit::visit_block(bl, fcx, visit::mk_vt(@{\n             visit_expr: resolve_expr,\n-            visit_item: fn(_i: @ast::item, &&_e: @fn_ctxt,\n-                           _v: visit::vt<@fn_ctxt>) {}\n+            visit_item: fn@(_i: @ast::item, &&_e: @fn_ctxt,\n+                            _v: visit::vt<@fn_ctxt>) {}\n             with *visit::default_visitor()\n         }));\n     }"}, {"sha": "418be6116ceab845e3af9f0d9bfe1c6a54494b52", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -32,7 +32,7 @@ fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n     file.lines += [{ch: chpos, byte: byte_pos}];\n }\n \n-type lookup_fn = fn(file_pos) -> uint;\n+type lookup_fn = fn@(file_pos) -> uint;\n \n fn lookup_pos(map: codemap, pos: uint, lookup: lookup_fn) -> loc {\n     let len = vec::len(map.files);"}, {"sha": "719c354b8a629cd3d43b6b69a4529a716e254160", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -532,7 +532,7 @@ fn block_to_ident(blk: blk_) -> option::t<ident> {\n \n fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n     fn select_pt_1(cx: ext_ctxt, m: matchable,\n-                   fn_m: fn(ast::mac) -> match_result) -> match_result {\n+                   fn_m: block(ast::mac) -> match_result) -> match_result {\n         ret alt m {\n               match_expr(e) {\n                 alt e.node { expr_mac(mac) { fn_m(mac) } _ { none } }"}, {"sha": "3a7f85b56c470460e1c72affe068433a9c0f4859", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -480,14 +480,21 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         expect(p, token::RBRACKET);\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n+        alt proto {\n+          ast::proto_bare. { p.warn(\"fn is deprecated, use native fn\"); }\n+          _ { /* fallthrough */ }\n+        }\n         t = parse_ty_fn(proto, p);\n     } else if eat_word(p, \"block\") {\n         t = parse_ty_fn(ast::proto_block, p);\n+    } else if eat_word(p, \"native\") {\n+        expect_word(p, \"fn\");\n+        t = parse_ty_fn(ast::proto_bare, p);\n     } else if eat_word(p, \"lambda\") {\n-        //(breaks prettyprinting!) p.warn(\"lambda is deprecated, use fn@\");\n+        p.warn(\"lambda is deprecated, use fn@\");\n         t = parse_ty_fn(ast::proto_box, p);\n     } else if eat_word(p, \"sendfn\") {\n-        //(breaks prettyprinting!) p.warn(\"sendfn is deprecated, use fn~\");\n+        p.warn(\"sendfn is deprecated, use fn~\");\n         t = parse_ty_fn(ast::proto_uniq, p);\n     } else if p.token == token::MOD_SEP || is_ident(p.token) {\n         let path = parse_path(p);\n@@ -786,6 +793,10 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_alt_expr(p));\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n+        alt proto {\n+          ast::proto_bare. { p.warn(\"fn expr are deprecated, use fn@\"); }\n+          _ { /* fallthrough */ }\n+        }\n         ret pexpr(parse_fn_expr(p, proto));\n     } else if eat_word(p, \"block\") {\n         ret pexpr(parse_fn_expr(p, ast::proto_block));"}, {"sha": "6c5fd6b0354295ed572b57df33161cd555fcfa9f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -194,7 +194,7 @@ fn synth_comment(s: ps, text: str) {\n     word(s.s, \"*/\");\n }\n \n-fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: fn(ps, IN)) {\n+fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: block(ps, IN)) {\n     box(s, 0u, b);\n     let first = true;\n     for elt: IN in elts {\n@@ -205,8 +205,8 @@ fn commasep<IN>(s: ps, b: breaks, elts: [IN], op: fn(ps, IN)) {\n }\n \n \n-fn commasep_cmnt<IN>(s: ps, b: breaks, elts: [IN], op: fn(ps, IN),\n-                     get_span: fn(IN) -> codemap::span) {\n+fn commasep_cmnt<IN>(s: ps, b: breaks, elts: [IN], op: block(ps, IN),\n+                     get_span: block(IN) -> codemap::span) {\n     box(s, 0u, b);\n     let len = vec::len::<IN>(elts);\n     let i = 0u;\n@@ -1246,7 +1246,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n         for elt: ast::ident in *mod_path { word(s.s, elt); word(s.s, \"::\"); }\n         word(s.s, \"{\");\n         commasep(s, inconsistent, idents,\n-                 fn (s: ps, w: ast::import_ident) { word(s.s, w.node.name) });\n+                 fn@(s: ps, w: ast::import_ident) { word(s.s, w.node.name) });\n         word(s.s, \"}\");\n       }\n       ast::view_item_import_glob(ids, _) {\n@@ -1261,7 +1261,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       ast::view_item_export(ids, _) {\n         head(s, \"export\");\n         commasep(s, inconsistent, ids,\n-                 fn (s: ps, &&w: ast::ident) { word(s.s, w) });\n+                 fn@(s: ps, &&w: ast::ident) { word(s.s, w) });\n       }\n     }\n     word(s.s, \";\");\n@@ -1604,7 +1604,7 @@ fn ast_fn_constrs_str(decl: ast::fn_decl, constrs: [@ast::constr]) -> str {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-          ast::proto_bare. { \"fn\" }\n+          ast::proto_bare. { \"native fn\" }\n           ast::proto_block. { \"block\" }\n           ast::proto_uniq. { \"fn~\" }\n           ast::proto_box. { \"fn@\" }"}, {"sha": "d4cd956d2f19c4ac04948cc5b5e1aa96bd92828a", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -391,22 +391,22 @@ type simple_visitor =\n fn simple_ignore_ty(_t: @ty) {}\n \n fn default_simple_visitor() -> simple_visitor {\n-    ret @{visit_mod: fn(_m: _mod, _sp: span) { },\n-          visit_view_item: fn(_vi: @view_item) { },\n-          visit_native_item: fn(_ni: @native_item) { },\n-          visit_item: fn(_i: @item) { },\n-          visit_local: fn(_l: @local) { },\n-          visit_block: fn(_b: ast::blk) { },\n-          visit_stmt: fn(_s: @stmt) { },\n-          visit_arm: fn(_a: arm) { },\n-          visit_pat: fn(_p: @pat) { },\n-          visit_decl: fn(_d: @decl) { },\n-          visit_expr: fn(_e: @expr) { },\n+    ret @{visit_mod: fn@(_m: _mod, _sp: span) { },\n+          visit_view_item: fn@(_vi: @view_item) { },\n+          visit_native_item: fn@(_ni: @native_item) { },\n+          visit_item: fn@(_i: @item) { },\n+          visit_local: fn@(_l: @local) { },\n+          visit_block: fn@(_b: ast::blk) { },\n+          visit_stmt: fn@(_s: @stmt) { },\n+          visit_arm: fn@(_a: arm) { },\n+          visit_pat: fn@(_p: @pat) { },\n+          visit_decl: fn@(_d: @decl) { },\n+          visit_expr: fn@(_e: @expr) { },\n           visit_ty: simple_ignore_ty,\n-          visit_ty_params: fn(_ps: [ty_param]) {},\n-          visit_constr: fn(_p: @path, _sp: span, _id: node_id) { },\n-          visit_fn: fn(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n-                       _id: node_id) { }\n+          visit_ty_params: fn@(_ps: [ty_param]) {},\n+          visit_constr: fn@(_p: @path, _sp: span, _id: node_id) { },\n+          visit_fn: fn@(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n+                        _id: node_id) { }\n          };\n }\n "}, {"sha": "261259d988676c3d3d1d8fb9bd73015c77fde9b9", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -120,7 +120,7 @@ fn spawn(+f: sendfn()) -> task {\n     spawn_inner(f, none)\n }\n \n-fn spawn_inner(-f: sendfn(),\n+fn spawn_inner(-f: fn~(),\n                notify: option<comm::chan<task_notification>>) -> task unsafe {\n     let closure: *rust_closure = unsafe::reinterpret_cast(ptr::addr_of(f));\n     #debug(\"spawn: closure={%x,%x}\", (*closure).fnptr, (*closure).envptr);\n@@ -145,7 +145,7 @@ A task that sends notification upon termination\n */\n type joinable_task = (task, comm::port<task_notification>);\n \n-fn spawn_joinable(+f: sendfn()) -> joinable_task {\n+fn spawn_joinable(+f: fn~()) -> joinable_task {\n     let notify_port = comm::port();\n     let notify_chan = comm::chan(notify_port);\n     let task = spawn_inner(f, some(notify_chan));\n@@ -161,7 +161,7 @@ fn spawn_joinable(+f: sendfn()) -> joinable_task {\n \n     let notify_port = comm::port();\n     let notify_chan = comm::chan(notify_port);\n-    let g = sendfn[copy notify_chan; move f]() {\n+    let g = fn~[copy notify_chan; move f]() {\n         let this_task = rustrt::get_task_id();\n         let result = @mutable tr_failure;\n         let _rsrc = notify_rsrc((notify_chan, this_task, result));\n@@ -203,7 +203,7 @@ supplied with a channel to send messages to the parent and a port to receive\n messages from the parent. The type parameter `ToCh` is the type for messages\n sent from the parent to the child and `FrCh` is the type for messages sent\n from the child to the parent. */\n-type connected_fn<ToCh, FrCh> = sendfn(comm::port<ToCh>, comm::chan<FrCh>);\n+type connected_fn<ToCh, FrCh> = fn~(comm::port<ToCh>, comm::chan<FrCh>);\n \n /*\n Type: connected_fn\n@@ -238,7 +238,7 @@ fn spawn_connected<ToCh:send, FrCh:send>(+f: connected_fn<ToCh, FrCh>)\n     let from_child_chan = comm::chan(from_child_port);\n     let get_to_child_port = comm::port::<comm::chan<ToCh>>();\n     let get_to_child_chan = comm::chan(get_to_child_port);\n-    let child_task = spawn(sendfn[move f]() {\n+    let child_task = spawn(fn~[move f]() {\n         let to_child_port = comm::port::<ToCh>();\n         comm::send(get_to_child_chan, comm::chan(to_child_port));\n         f(to_child_port, from_child_chan);"}, {"sha": "f55af2bd91f4880f92e8f79406f10822b01b1f26", "filename": "src/libstd/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -523,7 +523,7 @@ mod fsync {\n     type arg<t> = {\n         val: t,\n         opt_level: option::t<level>,\n-        fsync_fn: fn(t, level) -> int\n+        fsync_fn: fn@(t, level) -> int\n     };\n \n     // fsync file after executing blk\n@@ -532,7 +532,7 @@ mod fsync {\n                   blk: block(&&res<os::libc::FILE>)) {\n         blk(res({\n             val: *file, opt_level: opt_level,\n-            fsync_fn: fn(&&file: os::libc::FILE, l: level) -> int {\n+            fsync_fn: fn@(&&file: os::libc::FILE, l: level) -> int {\n                 ret os::fsync_fd(os::libc::fileno(file), l) as int;\n             }\n         }));\n@@ -543,7 +543,7 @@ mod fsync {\n                    blk: block(&&res<fd_t>)) {\n         blk(res({\n             val: *fd, opt_level: opt_level,\n-            fsync_fn: fn(&&fd: fd_t, l: level) -> int {\n+            fsync_fn: fn@(&&fd: fd_t, l: level) -> int {\n                 ret os::fsync_fd(fd, l) as int;\n             }\n         }));\n@@ -556,7 +556,7 @@ mod fsync {\n     fn obj_sync(&&o: t, opt_level: option::t<level>, blk: block(&&res<t>)) {\n         blk(res({\n             val: o, opt_level: opt_level,\n-            fsync_fn: fn(&&o: t, l: level) -> int { ret o.fsync(l); }\n+            fsync_fn: fn@(&&o: t, l: level) -> int { ret o.fsync(l); }\n         }));\n     }\n }"}, {"sha": "c1385bb87d5da6d9f3818899d04056a471056dab", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -13,14 +13,14 @@ A function that returns a hash of a value.\n The hash should concentrate entropy in the\n lower bits.\n */\n-type hashfn<K> = fn(K) -> uint;\n+type hashfn<K> = fn@(K) -> uint;\n \n /*\n Type: eqfn\n \n Equality\n */\n-type eqfn<K> = fn(K, K) -> bool;\n+type eqfn<K> = fn@(K, K) -> bool;\n \n /*\n Type: hashset"}, {"sha": "7cd084c2d7fa8c8418be29d1559ab8c5630290b0", "filename": "src/test/compile-fail/bad-var-env-capture-in-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = 3;\n-    fn blah(_a: fn()) {}\n+    fn blah(_a: native fn()) {}\n     blah({||\n         log(debug, x); //! ERROR attempted dynamic environment capture\n     });"}, {"sha": "d88558ef421ecfdec4c7ae63a718e8f06ffb718b", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    fn echo<T>(c: int, x: fn(T)) { #error(\"wee\"); }\n+    fn echo<T>(c: int, x: native fn(T)) { #error(\"wee\"); }\n \n     let y = bind echo(42, _);\n "}, {"sha": "1e3c0a7e2af039eb715618b342d81d2d0029ff66", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-fn asSendfn( f : sendfn()->uint ) -> uint {\n+fn asSendfn( f : fn~()->uint ) -> uint {\n    ret f();\n }\n "}, {"sha": "a9a4ba557ed13e9fe12a71eca3bffb102628f551", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,6 +1,6 @@\n fn force(f: block() -> int) -> int { ret f(); }\n fn main() {\n-    let f = fn () -> int { ret 7 };\n+    fn f() -> int { ret 7; }\n     assert (force(f) == 7);\n     let g = bind force(f);\n     assert (g() == 7);"}, {"sha": "19be1e81b666c640e6dcf96cd9172d56576797b7", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,8 +1,7 @@\n \n \n fn test_fn() {\n-    type t = fn() -> int;\n-\n+    type t = native fn() -> int;\n     fn ten() -> int { ret 10; }\n     let rs: t = { ten };\n     assert (rs() == 10);"}, {"sha": "98a9018b02a41dffe3678484863d3266c99d0468", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n "}, {"sha": "bee5ad13ec76aff16888af74a22db9ea16cf8500", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, B: send>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B: send>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, B: send>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B: send>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n "}, {"sha": "332ac3586c55e167ae0a57834c2cd79a9bbd44db", "filename": "src/test/run-pass/fn-bare-anon-2.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let f: fn() = fn () {\n-        #debug(\"This is a bare function\")\n-    };\n-    let g;\n-    g = f;\n-}\n\\ No newline at end of file"}, {"sha": "8f97fef2aaaf21f4533a5923e796a8177a725b97", "filename": "src/test/run-pass/fn-bare-anon.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let f: fn() = fn () {\n-        #debug(\"This is a bare function\")\n-    };\n-    f();\n-}\n\\ No newline at end of file"}, {"sha": "53972843433da94dd8326e1168f93c063c9aa3fc", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -3,7 +3,7 @@ fn f(i: int, &called: bool) {\n     called = true;\n }\n \n-fn g(f: fn(int, &bool), &called: bool) {\n+fn g(f: native fn(int, &bool), &called: bool) {\n     f(10, called);\n }\n "}, {"sha": "e05ceb809b850bfd04d78fd931ddfece5c87458f", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,6 +1,6 @@\n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<T: send>(val: T, f: fn(T)) {\n+fn spawn<T: send>(val: T, f: native fn(T)) {\n     f(val);\n }\n \n@@ -10,7 +10,4 @@ fn f(&&i: int) {\n \n fn main() {\n     spawn(100, f);\n-    spawn(100, fn(&&i: int) {\n-        assert i == 100;\n-    });\n }\n\\ No newline at end of file"}, {"sha": "55df7b61406852cc4985bcde47101dd6493eb1f0", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -3,5 +3,6 @@ type r = {\n };\n \n fn main() {\n-    let i: r = {field: fn() { }};\n+    fn f() {}\n+    let i: r = {field: f};\n }\n\\ No newline at end of file"}, {"sha": "64b28e4a289b3bc4f6862796acac3e665ef7c625", "filename": "src/test/run-pass/fn-expr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ffn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-expr.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1 +0,0 @@\n-fn main() { let x = fn (a: int) -> int { ret a + 1; }; assert (x(4) == 5); }"}, {"sha": "6cf3cc456da546a05d3b6cb46d03265ac99ecc70", "filename": "src/test/run-pass/fn-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-lval.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn foo(f: fn(int) -> int) { }\n+fn foo(f: native fn(int) -> int) { }\n \n fn id(x: int) -> int { ret x; }\n "}, {"sha": "c2b2f68e53ee1b4443f405be6ad3f977393001a7", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     // We should be able to type infer inside of fn@s.\n-    let f = fn () { let i = 10; };\n+    let f = fn@() { let i = 10; };\n }"}, {"sha": "c97411fe5b161ecce44fb036c348c5588211d3cf", "filename": "src/test/run-pass/fun-indirect-call.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -4,4 +4,8 @@\n // -*- rust -*-\n fn f() -> int { ret 42; }\n \n-fn main() { let g: fn() -> int = f; let i: int = g(); assert (i == 42); }\n+fn main() {\n+    let g: native fn() -> int = f;\n+    let i: int = g();\n+    assert (i == 42);\n+}"}, {"sha": "108f9f8e34b2845baf7e45953c303c283e1e08c5", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -4,10 +4,13 @@ fn mk() -> int { ret 1; }\n \n fn chk(&&a: int) { log(debug, a); assert (a == 1); }\n \n-fn apply<T>(produce: fn() -> T, consume: fn(T)) { consume(produce()); }\n+fn apply<T>(produce: native fn() -> T,\n+            consume: native fn(T)) {\n+    consume(produce());\n+}\n \n fn main() {\n-    let produce: fn() -> int = mk;\n-    let consume: fn(&&int) = chk;\n+    let produce: native fn() -> int = mk;\n+    let consume: native fn(&&int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "69060afce565f3a9a61777e33c2f231765f5b98b", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -28,7 +28,7 @@ mod map_reduce {\n \n     type putter = fn@(str, str);\n \n-    type mapper = fn(str, putter);\n+    type mapper = native fn(str, putter);\n \n     tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n "}, {"sha": "180fe1d0041a94e7ab14fc8db50a1cb72917aca6", "filename": "src/test/run-pass/issue-898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fissue-898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fissue-898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-898.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -2,7 +2,7 @@ fn even(&&e: int) -> bool {\n     e % 2 == 0\n }\n \n-fn log_if<T>(c: fn(T)->bool, e: T) {\n+fn log_if<T>(c: native fn(T)->bool, e: T) {\n     if c(e) { log(debug, e); }\n }\n "}, {"sha": "2e30b942c1e4097432025d75bb7c986a877b7d54", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -32,11 +32,11 @@ fn calllink08() { rustrt::get_task_id(); }\n fn calllink09() { rustrt::sched_threads(); }\n fn calllink10() { rustrt::rust_get_task(); }\n \n-fn runtest(f: sendfn(), frame_backoff: u32) {\n+fn runtest(f: fn~(), frame_backoff: u32) {\n     runtest2(f, frame_backoff, 0 as *u8);\n }\n \n-fn runtest2(f: sendfn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n+fn runtest2(f: fn~(), frame_backoff: u32, last_stk: *u8) -> u32 {\n     let curr_stk = rustrt::debug_get_stk_seg();\n     if (last_stk != curr_stk && last_stk != 0 as *u8) {\n         // We switched stacks, go back and try to hit the dynamic linker"}, {"sha": "e5331a11556c0c586f83cb519c37aaed7d8aa3f8", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,8 +1,10 @@\n // Issue #922\n-fn f2(-thing: fn()) { }\n+fn f2(-thing: fn@()) { }\n \n-fn f(-thing: fn()) { f2(thing); }\n+fn f(-thing: fn@()) {\n+    f2(thing);\n+}\n \n fn main() {\n-    f(fn(){});\n+    f(fn@() {});\n }\n\\ No newline at end of file"}, {"sha": "3152e1b69eb52dffe65ae2d2dd436bebe03a1792", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,4 +1,4 @@\n-tag mytype = {compute: fn(mytype) -> int, val: int};\n+tag mytype = {compute: native fn(mytype) -> int, val: int};\n \n fn compute(i: mytype) -> int { ret i.val + 20; }\n "}, {"sha": "34f823a543b6108d9cfe6a8ac4abf9a4197a40b7", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,4 +1,6 @@\n-resource finish<T>(arg: {val: T, fin: fn(T)}) { arg.fin(arg.val); }\n+resource finish<T>(arg: {val: T, fin: native fn(T)}) {\n+    arg.fin(arg.val);\n+}\n \n fn main() {\n     let box = @mutable 10;"}, {"sha": "f9d1fc1dbd73378deb59eed62394adafb5ed85fe", "filename": "src/test/run-pass/sendfn-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -5,11 +5,11 @@ import comm::send;\n \n fn main() { test05(); }\n \n-fn mk_counter<A:copy>() -> sendfn(A) -> (A,uint) {\n+fn mk_counter<A:copy>() -> fn~(A) -> (A,uint) {\n     // The only reason that the counter is generic is so that it closes\n     // over both a type descriptor and some data.\n     let v = [mutable 0u];\n-    ret sendfn(a: A) -> (A,uint) {\n+    ret fn~(a: A) -> (A,uint) {\n         let n = v[0];\n         v[0] = n + 1u;\n         (a, n)"}, {"sha": "14271ade9e801e38aaddfaf7b07fce596e07e556", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -11,7 +11,7 @@ fn make_generic_record<A: copy, B: copy>(a: A, b: B) -> pair<A,B> {\n     ret {a: a, b: b};\n }\n \n-fn test05_start(&&f: sendfn(&&float, &&str) -> pair<float, str>) {\n+fn test05_start(&&f: fn~(&&float, &&str) -> pair<float, str>) {\n     let p = f(22.22f, \"Hi\");\n     log(debug, p);\n     assert p.a == 22.22f;\n@@ -23,8 +23,8 @@ fn test05_start(&&f: sendfn(&&float, &&str) -> pair<float, str>) {\n     assert q.b == \"Ho\";\n }\n \n-fn spawn<A: copy, B: copy>(f: fn(sendfn(A,B)->pair<A,B>)) {\n-    let arg = sendfn(a: A, b: B) -> pair<A,B> {\n+fn spawn<A: copy, B: copy>(f: fn(fn~(A,B)->pair<A,B>)) {\n+    let arg = fn~(a: A, b: B) -> pair<A,B> {\n         ret make_generic_record(a, b);\n     };\n     task::spawn {|| f(arg); };"}, {"sha": "ce4d5dcf21ac2a1cefc1aa201168bd03e8cfcea1", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -5,17 +5,17 @@ import comm::send;\n \n fn main() { test05(); }\n \n-fn test05_start(&&f: sendfn(int)) {\n+fn test05_start(&&f: fn~(int)) {\n     f(22);\n }\n \n fn test05() {\n     let three = ~3;\n-    let fn_to_send = sendfn(n: int) {\n+    let fn_to_send = fn~(n: int) {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(sendfn[move fn_to_send]() {\n+    task::spawn(fn~[move fn_to_send]() {\n         test05_start(fn_to_send);\n     });\n }"}, {"sha": "725ac36fbc834f727b6f772e2cb753230476420e", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -6,13 +6,13 @@ fn checktrue(rs: bool) -> bool { assert (rs); ret true; }\n \n fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n-fn evenk(n: int, k: fn(bool) -> bool) -> bool {\n+fn evenk(n: int, k: native fn(bool) -> bool) -> bool {\n     #debug(\"evenk\");\n     log(debug, n);\n     if n == 0 { be k(true); } else { be oddk(n - 1, k); }\n }\n \n-fn oddk(n: int, k: fn(bool) -> bool) -> bool {\n+fn oddk(n: int, k: native fn(bool) -> bool) -> bool {\n     #debug(\"oddk\");\n     log(debug, n);\n     if n == 0 { be k(false); } else { be evenk(n - 1, k); }"}, {"sha": "8d4bccc11ffe61ded52c5d54b68976287f5a002e", "filename": "src/test/run-pass/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -1,5 +1,5 @@\n \n \n-type lteq<T> = fn(T) -> bool;\n+type lteq<T> = native fn(T) -> bool;\n \n fn main(args: [str]) { }"}, {"sha": "67b0f366acd7f6427110d6a4083106c9c40ebb87", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f8b0d4588b6d890ce8a908d488c0325e3f29e/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=455f8b0d4588b6d890ce8a908d488c0325e3f29e", "patch": "@@ -5,7 +5,7 @@ fn range(lo: uint, hi: uint, it: block(uint)) {\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n \n-fn create_index<T>(index: [{a: T, b: uint}], hash_fn: fn(T) -> uint) {\n+fn create_index<T>(index: [{a: T, b: uint}], hash_fn: native fn(T) -> uint) {\n     range(0u, 256u) {|_i| let bucket: [T] = []; }\n }\n "}]}