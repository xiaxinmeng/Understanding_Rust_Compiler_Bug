{"sha": "e20fe219e6164adc4cb96dd1326a7ea034d50451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMGZlMjE5ZTYxNjRhZGM0Y2I5NmRkMTMyNmE3ZWEwMzRkNTA0NTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-26T12:01:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-26T12:01:50Z"}, "message": "Sync from rust 1969c2e312303faa458cf19dad9783165e3c72c8", "tree": {"sha": "5fa01f48b46e020ec335ba27ac0fd71b430f8e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa01f48b46e020ec335ba27ac0fd71b430f8e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20fe219e6164adc4cb96dd1326a7ea034d50451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20fe219e6164adc4cb96dd1326a7ea034d50451", "html_url": "https://github.com/rust-lang/rust/commit/e20fe219e6164adc4cb96dd1326a7ea034d50451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20fe219e6164adc4cb96dd1326a7ea034d50451/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ffd9ae4aec7d908dabc9a7b1f384956e197978", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ffd9ae4aec7d908dabc9a7b1f384956e197978", "html_url": "https://github.com/rust-lang/rust/commit/39ffd9ae4aec7d908dabc9a7b1f384956e197978"}, {"sha": "9d41e8f90dc837cff4960a67d839db015a15ed74", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d41e8f90dc837cff4960a67d839db015a15ed74", "html_url": "https://github.com/rust-lang/rust/commit/9d41e8f90dc837cff4960a67d839db015a15ed74"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "1e89f5220b463fe2fdd8da5560ddad636d51bdcb", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e20fe219e6164adc4cb96dd1326a7ea034d50451/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fe219e6164adc4cb96dd1326a7ea034d50451/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e20fe219e6164adc4cb96dd1326a7ea034d50451", "patch": "@@ -2,11 +2,12 @@\n \n use rustc_span::DUMMY_SP;\n \n+use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n+    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n \n@@ -175,9 +176,9 @@ pub(crate) fn codegen_const_value<'tcx>(\n                 let mut alloc = Allocation::from_bytes(\n                     std::iter::repeat(0).take(size.bytes_usize()).collect::<Vec<u8>>(),\n                     align,\n+                    Mutability::Not,\n                 );\n-                let ptr = Pointer::new(AllocId(!0), Size::ZERO); // The alloc id is never used\n-                alloc.write_scalar(fx, ptr, x.into(), size).unwrap();\n+                alloc.write_scalar(fx, alloc_range(Size::ZERO, size), x.into()).unwrap();\n                 let alloc = fx.tcx.intern_const_alloc(alloc);\n                 return CValue::by_ref(pointer_for_allocation(fx, alloc), layout);\n             }"}, {"sha": "c2f469fa021e15ab0703f65b6bc1596de4c80a20", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e20fe219e6164adc4cb96dd1326a7ea034d50451/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fe219e6164adc4cb96dd1326a7ea034d50451/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=e20fe219e6164adc4cb96dd1326a7ea034d50451", "patch": "@@ -86,9 +86,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n-                        let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n-                        alloc.get_bytes(fx, ptr, size).unwrap()\n+                        alloc.get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}]}