{"sha": "dc17b35e6211b1d217d28b517406baf8775a9ace", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTdiMzVlNjIxMWIxZDIxN2QyOGI1MTc0MDZiYWY4Nzc1YTlhY2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T15:24:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T15:24:42Z"}, "message": "internal: remove a remnant of old editing infra", "tree": {"sha": "848584edd9ee3b4185cc18742b17d99c09b88529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/848584edd9ee3b4185cc18742b17d99c09b88529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc17b35e6211b1d217d28b517406baf8775a9ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc17b35e6211b1d217d28b517406baf8775a9ace", "html_url": "https://github.com/rust-lang/rust/commit/dc17b35e6211b1d217d28b517406baf8775a9ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc17b35e6211b1d217d28b517406baf8775a9ace/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90357a9090a88b2f7bc5db5d05cb576680ce2960", "url": "https://api.github.com/repos/rust-lang/rust/commits/90357a9090a88b2f7bc5db5d05cb576680ce2960", "html_url": "https://github.com/rust-lang/rust/commit/90357a9090a88b2f7bc5db5d05cb576680ce2960"}], "stats": {"total": 61, "additions": 18, "deletions": 43}, "files": [{"sha": "e59fc6ba4fe63a173851fced371da4335dc49fcf", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dc17b35e6211b1d217d28b517406baf8775a9ace/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc17b35e6211b1d217d28b517406baf8775a9ace/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=dc17b35e6211b1d217d28b517406baf8775a9ace", "patch": "@@ -209,21 +209,22 @@ pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n \n fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinaryOp::CmpOp(op) => {\n-                let rev_op = match op {\n-                    ast::CmpOp::Eq { negated: false } => T![!=],\n-                    ast::CmpOp::Eq { negated: true } => T![==],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Less, strict: true } => T![>=],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Less, strict: false } => T![>],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Greater, strict: true } => T![<=],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Greater, strict: false } => T![<],\n-                };\n-                bin.replace_op(rev_op).map(ast::Expr::from)\n-            }\n-            // Parenthesize other expressions before prefixing `!`\n-            _ => Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n-        },\n+        ast::Expr::BinExpr(bin) => {\n+            let bin = bin.clone_for_update();\n+            let op_token = bin.op_token()?;\n+            let rev_token = match op_token.kind() {\n+                T![==] => T![!=],\n+                T![!=] => T![==],\n+                T![<] => T![>=],\n+                T![<=] => T![>],\n+                T![>] => T![<=],\n+                T![>=] => T![<],\n+                // Parenthesize other expressions before prefixing `!`\n+                _ => return Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n+            };\n+            ted::replace(op_token, make::token(rev_token));\n+            Some(bin.into())\n+        }\n         ast::Expr::MethodCallExpr(mce) => {\n             let receiver = mce.receiver()?;\n             let method = mce.name_ref()?;"}, {"sha": "af440426a6694e6fdbdf61f5c072bfae7426f845", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dc17b35e6211b1d217d28b517406baf8775a9ace/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc17b35e6211b1d217d28b517406baf8775a9ace/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=dc17b35e6211b1d217d28b517406baf8775a9ace", "patch": "@@ -1,28 +1,16 @@\n //! This module contains functions for editing syntax trees. As the trees are\n //! immutable, all function here return a fresh copy of the tree, instead of\n //! doing an in-place modification.\n-use std::{\n-    fmt, iter,\n-    ops::{self, RangeInclusive},\n-};\n+use std::{fmt, iter, ops};\n \n use crate::{\n     algo,\n     ast::{self, make, AstNode},\n-    ted, AstToken, NodeOrToken, SyntaxElement, SyntaxKind,\n+    ted, AstToken, NodeOrToken, SyntaxElement,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken,\n };\n \n-impl ast::BinExpr {\n-    #[must_use]\n-    pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n-        let op_node: SyntaxElement = self.op_details()?.0.into();\n-        let to_insert: Option<SyntaxElement> = Some(make::token(op).into());\n-        Some(self.replace_children(single_node(op_node), to_insert))\n-    }\n-}\n-\n impl ast::UseTree {\n     /// Splits off the given prefix, making it the path component of the use tree, appending the rest of the path to all UseTreeList items.\n     #[must_use]\n@@ -191,15 +179,6 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n }\n \n pub trait AstNodeEdit: AstNode + Clone + Sized {\n-    #[must_use]\n-    fn replace_children(\n-        &self,\n-        to_replace: RangeInclusive<SyntaxElement>,\n-        to_insert: impl IntoIterator<Item = SyntaxElement>,\n-    ) -> Self {\n-        let new_syntax = algo::replace_children(self.syntax(), to_replace, to_insert);\n-        Self::cast(new_syntax).unwrap()\n-    }\n     fn indent_level(&self) -> IndentLevel {\n         IndentLevel::from_node(self.syntax())\n     }\n@@ -220,11 +199,6 @@ pub trait AstNodeEdit: AstNode + Clone + Sized {\n \n impl<N: AstNode + Clone> AstNodeEdit for N {}\n \n-fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElement> {\n-    let element = element.into();\n-    element.clone()..=element\n-}\n-\n #[test]\n fn test_increase_indent() {\n     let arm_list = {"}]}