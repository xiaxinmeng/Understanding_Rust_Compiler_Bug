{"sha": "e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "node_id": "C_kwDOAAsO6NoAKGU3NzMwZGNiN2ViMjlhMTBlZTczZjI2OWY0ZGM2ZTlkNjA2ZGIwZGE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-21T03:38:39Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-21T03:38:39Z"}, "message": "Expand let-else allow tests\n\nThe #[allow(...)] directive was tested for the body and the pattern,\nbut non-presence of it wasn't tested. Furthermore, it wasn't tested\nfor the expression. We add expression tests as well as ones checking\nthe non-presence of the directive.", "tree": {"sha": "822e143f433e922b037301203d7c6090a48e672a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822e143f433e922b037301203d7c6090a48e672a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "html_url": "https://github.com/rust-lang/rust/commit/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1aa85475cf5623caf50f7ef3b62903bb084e518", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1aa85475cf5623caf50f7ef3b62903bb084e518", "html_url": "https://github.com/rust-lang/rust/commit/c1aa85475cf5623caf50f7ef3b62903bb084e518"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "39f4c9060fea539e82a3b6bbdbbc2a1af9481c7d", "filename": "src/test/ui/let-else/let-else-allow-in-expr.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -0,0 +1,30 @@\n+#![feature(let_else)]\n+\n+#![deny(unused_variables)]\n+\n+fn main() {\n+    let Some(_): Option<u32> = ({\n+        let x = 1; //~ ERROR unused variable: `x`\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    #[allow(unused_variables)]\n+    let Some(_): Option<u32> = ({\n+        let x = 1;\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    let Some(_): Option<u32> = ({\n+        #[allow(unused_variables)]\n+        let x = 1;\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    let x = 1; //~ ERROR unused variable: `x`\n+}"}, {"sha": "e86bcbc850029ee1c1d404401778aa41331c3413", "filename": "src/test/ui/let-else/let-else-allow-in-expr.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -0,0 +1,20 @@\n+error: unused variable: `x`\n+  --> $DIR/let-else-allow-in-expr.rs:7:13\n+   |\n+LL |         let x = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-allow-in-expr.rs:3:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: unused variable: `x`\n+  --> $DIR/let-else-allow-in-expr.rs:29:9\n+   |\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "86ebacfa7b7d1e0660fb58c68414eebb2a4ba156", "filename": "src/test/ui/let-else/let-else-allow-unused.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // issue #89807\n \n #![feature(let_else)]\n@@ -10,5 +9,7 @@ fn main() {\n     #[allow(unused)]\n     let banana = 1;\n     #[allow(unused)]\n-    let Some(chaenomeles) = value else { return }; // OK\n+    let Some(chaenomeles) = value.clone() else { return }; // OK\n+\n+    let Some(chaenomeles) = value else { return }; //~ ERROR unused variable: `chaenomeles`\n }"}, {"sha": "05b8a9169fb70633b2ae9f8211285ef1a997a0ac", "filename": "src/test/ui/let-else/let-else-allow-unused.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -0,0 +1,14 @@\n+error: unused variable: `chaenomeles`\n+  --> $DIR/let-else-allow-unused.rs:14:14\n+   |\n+LL |     let Some(chaenomeles) = value else { return };\n+   |              ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chaenomeles`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-allow-unused.rs:5:8\n+   |\n+LL | #[deny(unused_variables)]\n+   |        ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e32cbef742a2fefdb9c5d4a9d582ef1393dfb30", "filename": "src/test/ui/let-else/let-else-check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -10,5 +10,10 @@ fn main() {\n         return;\n     };\n \n+    let Some(_): Option<u32> = Some(Default::default()) else {\n+        let x = 1; //~ ERROR unused variable: `x`\n+        return;\n+    };\n+\n     let x = 1; //~ ERROR unused variable: `x`\n }"}, {"sha": "b3da412ec280eb46ec11672af0317bede1dd21b8", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7730dcb7eb29a10ee73f269f4dc6e9d606db0da/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=e7730dcb7eb29a10ee73f269f4dc6e9d606db0da", "patch": "@@ -1,5 +1,5 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:13:9\n+  --> $DIR/let-else-check.rs:18:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unused variable: `x`\n+  --> $DIR/let-else-check.rs:14:13\n+   |\n+LL |         let x = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+error: aborting due to 2 previous errors\n "}]}