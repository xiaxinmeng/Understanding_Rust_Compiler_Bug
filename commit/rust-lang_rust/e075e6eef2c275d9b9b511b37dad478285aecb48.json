{"sha": "e075e6eef2c275d9b9b511b37dad478285aecb48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzVlNmVlZjJjMjc1ZDliOWI1MTFiMzdkYWQ0NzgyODVhZWNiNDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T14:04:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T14:04:29Z"}, "message": "Move diagnostics tests to expect", "tree": {"sha": "30f30c3e79915e8d6ea5c472f7a4b4ccce75a5d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f30c3e79915e8d6ea5c472f7a4b4ccce75a5d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e075e6eef2c275d9b9b511b37dad478285aecb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e075e6eef2c275d9b9b511b37dad478285aecb48", "html_url": "https://github.com/rust-lang/rust/commit/e075e6eef2c275d9b9b511b37dad478285aecb48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e075e6eef2c275d9b9b511b37dad478285aecb48/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70f4f5da5cb12c267aa9eb4c0a23d00bdd01608", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70f4f5da5cb12c267aa9eb4c0a23d00bdd01608", "html_url": "https://github.com/rust-lang/rust/commit/d70f4f5da5cb12c267aa9eb4c0a23d00bdd01608"}], "stats": {"total": 166, "additions": 53, "deletions": 113}, "files": [{"sha": "b429aae01e5a74debd3bc4cbaa1e5a40d0af7327", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1438,7 +1438,6 @@ dependencies = [\n  \"expect\",\n  \"flycheck\",\n  \"globset\",\n- \"insta\",\n  \"itertools\",\n  \"jod-thread\",\n  \"log\","}, {"sha": "21a458d477c56414408fa7b8d4306e64c0ba6c77", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -121,6 +121,10 @@ impl ExpectFile {\n         }\n         Runtime::fail_file(self, &expected, actual);\n     }\n+    pub fn assert_debug_eq(&self, actual: &impl fmt::Debug) {\n+        let actual = format!(\"{:#?}\\n\", actual);\n+        self.assert_eq(&actual)\n+    }\n     fn read(&self) -> String {\n         fs::read_to_string(self.abs_path()).unwrap_or_default().replace(\"\\r\\n\", \"\\n\")\n     }"}, {"sha": "dc8dbbe772232ea6442c7aba0de8bee80827c28c", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -58,7 +58,6 @@ winapi = \"0.3.8\"\n \n [dev-dependencies]\n tempfile = \"3.1.0\"\n-insta = \"0.16.0\"\n expect = { path = \"../expect\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }"}, {"sha": "808a23b1743b69061b244aa45d467492b2f8aa46", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 49, "deletions": 71, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -256,13 +256,23 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n mod tests {\n     use super::*;\n \n-    fn parse_diagnostic(val: &str) -> flycheck::Diagnostic {\n-        serde_json::from_str::<flycheck::Diagnostic>(val).unwrap()\n+    use expect::{expect_file, ExpectFile};\n+\n+    // TODO: inlay hints config order\n+    fn check(diagnostics_json: &str, expect: ExpectFile) {\n+        check_with_config(DiagnosticsConfig::default(), diagnostics_json, expect)\n+    }\n+\n+    fn check_with_config(config: DiagnosticsConfig, diagnostics_json: &str, expect: ExpectFile) {\n+        let diagnostic: flycheck::Diagnostic = serde_json::from_str(diagnostics_json).unwrap();\n+        let workspace_root = Path::new(\"/test/\");\n+        let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root);\n+        expect.assert_debug_eq(&actual)\n     }\n \n     #[test]\n-    fn snap_rustc_incompatible_type_for_trait() {\n-        let diag = parse_diagnostic(\n+    fn rustc_incompatible_type_for_trait() {\n+        check(\n             r##\"{\n                 \"message\": \"method `next` has an incompatible type for trait\",\n                 \"code\": {\n@@ -306,16 +316,13 @@ mod tests {\n                 \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n             }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_incompatible_type_for_trait.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_unused_variable() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable() {\n+        check(\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -388,17 +395,18 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     #[cfg(not(windows))]\n-    fn snap_rustc_unused_variable_as_info() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable_as_info() {\n+        check_with_config(\n+            DiagnosticsConfig {\n+                warnings_as_info: vec![\"unused_variables\".to_string()],\n+                ..DiagnosticsConfig::default()\n+            },\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -471,22 +479,18 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable_as_info.txt\"],\n         );\n-\n-        let config = DiagnosticsConfig {\n-            warnings_as_info: vec![\"unused_variables\".to_string()],\n-            ..DiagnosticsConfig::default()\n-        };\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     #[cfg(not(windows))]\n-    fn snap_rustc_unused_variable_as_hint() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable_as_hint() {\n+        check_with_config(\n+            DiagnosticsConfig {\n+                warnings_as_hint: vec![\"unused_variables\".to_string()],\n+                ..DiagnosticsConfig::default()\n+            },\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -559,21 +563,13 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable_as_hint.txt\"],\n         );\n-\n-        let config = DiagnosticsConfig {\n-            warnings_as_hint: vec![\"unused_variables\".to_string()],\n-            ..DiagnosticsConfig::default()\n-        };\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_wrong_number_of_parameters() {\n-        let diag = parse_diagnostic(\n+    fn rustc_wrong_number_of_parameters() {\n+        check(\n             r##\"{\n     \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n     \"code\": {\n@@ -688,16 +684,13 @@ mod tests {\n     \"children\": [],\n     \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_wrong_number_of_parameters.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_clippy_pass_by_ref() {\n-        let diag = parse_diagnostic(\n+    fn clippy_pass_by_ref() {\n+        check(\n             r##\"{\n     \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n     \"code\": {\n@@ -808,16 +801,13 @@ mod tests {\n     ],\n     \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/clippy_pass_by_ref.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_mismatched_type() {\n-        let diag = parse_diagnostic(\n+    fn rustc_mismatched_type() {\n+        check(\n             r##\"{\n     \"message\": \"mismatched types\",\n     \"code\": {\n@@ -851,16 +841,13 @@ mod tests {\n     \"children\": [],\n     \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_mismatched_type.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_handles_macro_location() {\n-        let diag = parse_diagnostic(\n+    fn handles_macro_location() {\n+        check(\n             r##\"{\n     \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n     \"children\": [\n@@ -1122,16 +1109,13 @@ mod tests {\n         }\n     ]\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/handles_macro_location.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_macro_compiler_error() {\n-        let diag = parse_diagnostic(\n+    fn macro_compiler_error() {\n+        check(\n             r##\"{\n         \"rendered\": \"error: Please register your known path in the path module\\n   --> crates/ra_hir_def/src/path.rs:265:9\\n    |\\n265 |         compile_error!(\\\"Please register your known path in the path module\\\")\\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n    | \\n   ::: crates/ra_hir_def/src/data.rs:80:16\\n    |\\n80  |     let path = path![std::future::Future];\\n    |                -------------------------- in this macro invocation\\n\\n\",\n         \"children\": [],\n@@ -1351,16 +1335,13 @@ mod tests {\n         ]\n     }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/macro_compiler_error.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     fn snap_multi_line_fix() {\n-        let diag = parse_diagnostic(\n+        check(\n             r##\"{\n                 \"rendered\": \"warning: returning the result of a let binding from a block\\n --> src/main.rs:4:5\\n  |\\n3 |     let a = (0..10).collect();\\n  |     -------------------------- unnecessary let binding\\n4 |     a\\n  |     ^\\n  |\\n  = note: `#[warn(clippy::let_and_return)]` on by default\\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\\nhelp: return the expression directly\\n  |\\n3 |     \\n4 |     (0..10).collect()\\n  |\\n\\n\",\n                 \"children\": [\n@@ -1484,10 +1465,7 @@ mod tests {\n                 ]\n             }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/snap_multi_line_fix.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n }"}, {"sha": "d0651712607de1199efdf98812c99fc37fbc2712", "filename": "crates/rust-analyzer/test_data/clippy_pass_by_ref.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/compiler/mir/tagset.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_clippy_pass_by_ref.snap"}, {"sha": "f5de2f07f3a0aae48e23741074495c5900692f93", "filename": "crates/rust-analyzer/test_data/handles_macro_location.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/src/main.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_handles_macro_location.snap"}, {"sha": "f695db73ceb5c7f329b7e89d13172cd80be3d021", "filename": "crates/rust-analyzer/test_data/macro_compiler_error.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/crates/ra_hir_def/src/data.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_macro_compiler_error.snap"}, {"sha": "fc54440be2385f04c6bc5166e0de9c0f7cccf34b", "filename": "crates/rust-analyzer/test_data/rustc_incompatible_type_for_trait.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/compiler/ty/list_iter.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_incompatible_type_for_trait.snap"}, {"sha": "c269af218ce8c681f32229ea290bc2065fd87b4b", "filename": "crates/rust-analyzer/test_data/rustc_mismatched_type.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/runtime/compiler_support.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_mismatched_type.snap"}, {"sha": "81f180a8615bc6818ff6e68f53d69585f9e33c1c", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/driver/subcommand/repl.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap"}, {"sha": "d5d78fd800c1c17fa9c2bc6fe8374192995c4efc", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable_as_hint.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/driver/subcommand/repl.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap"}, {"sha": "2a7505c59f0b6a8aca72a7414c95ce95704a6249", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable_as_info.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/driver/subcommand/repl.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap"}, {"sha": "efe37261db3a73f02fe7d194d0cd1649efffda68", "filename": "crates/rust-analyzer/test_data/rustc_wrong_number_of_parameters.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/compiler/ty/select.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_wrong_number_of_parameters.snap"}, {"sha": "6eca3ae2f215266c61bd3137044f7f33e8de446f", "filename": "crates/rust-analyzer/test_data/snap_multi_line_fix.txt", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e075e6eef2c275d9b9b511b37dad478285aecb48/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=e075e6eef2c275d9b9b511b37dad478285aecb48", "patch": "@@ -1,7 +1,3 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n         url: \"file:///test/src/main.rs\",", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap"}]}