{"sha": "fe7e1a45f37f4265434cead827f587e75412f85c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlN2UxYTQ1ZjM3ZjQyNjU0MzRjZWFkODI3ZjU4N2U3NTQxMmY4NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-30T08:23:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-30T08:23:41Z"}, "message": "Auto merge of #45294 - petrochenkov:prioplus, r=nikomatsakis\n\nsyntax: Lower priority of `+` in `impl Trait`/`dyn Trait`\n\nNow you have to write `Fn() -> (impl A + B)` instead of `Fn() -> impl A + B`, this is consistent with priority of `+` in trait objects (`Fn() -> A + B` means `(Fn() -> A) + B`).\n\nTo make this viable I changed the syntax to also permit `+` in return types in function declarations\n```\nfn f() -> dyn A + B { ... } // OK, don't have to write `-> (dyn A + B)`\n\n// This is acceptable, because `dyn A + B` here is an isolated type and\n// not part of a larger type with various operator priorities in play\n// like `dyn A + B` in `Fn() -> dyn A + B` despite syntax similarities.\n```\nbut you still have to use `-> (dyn A + B)` in function types and function-like trait object types (see this PR's tests for examples).\n\nThis can be a breaking change for code using `impl Trait` on nightly. The thing that is most likely to break is `&impl A + B`, it needs to be rewritten as `&(impl A + B)`.\n\ncc https://github.com/rust-lang/rust/issues/34511 https://github.com/rust-lang/rust/issues/44662 https://github.com/rust-lang/rfcs/pull/438", "tree": {"sha": "8f7739353c39511faa0ddb1abdf878b856324d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f7739353c39511faa0ddb1abdf878b856324d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7e1a45f37f4265434cead827f587e75412f85c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7e1a45f37f4265434cead827f587e75412f85c", "html_url": "https://github.com/rust-lang/rust/commit/fe7e1a45f37f4265434cead827f587e75412f85c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7e1a45f37f4265434cead827f587e75412f85c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90eb44a5897c39e3dff9c7e48e3973671dcd9496", "url": "https://api.github.com/repos/rust-lang/rust/commits/90eb44a5897c39e3dff9c7e48e3973671dcd9496", "html_url": "https://github.com/rust-lang/rust/commit/90eb44a5897c39e3dff9c7e48e3973671dcd9496"}, {"sha": "f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "html_url": "https://github.com/rust-lang/rust/commit/f57ea7cb3daf186bcd181f9add9e56cc45ff8380"}], "stats": {"total": 166, "additions": 154, "deletions": 12}, "files": [{"sha": "b3c485a85c0632ecce7ba883acc2a6fc2ced86a7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fe7e1a45f37f4265434cead827f587e75412f85c", "patch": "@@ -1364,7 +1364,7 @@ impl<'a> Parser<'a> {\n \n         self.expect_keyword(keywords::Fn)?;\n         let (inputs, variadic) = self.parse_fn_args(false, true)?;\n-        let ret_ty = self.parse_ret_ty()?;\n+        let ret_ty = self.parse_ret_ty(false)?;\n         let decl = P(FnDecl {\n             inputs,\n             output: ret_ty,\n@@ -1503,9 +1503,9 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse optional return type [ -> TY ] in function decl\n-    pub fn parse_ret_ty(&mut self) -> PResult<'a, FunctionRetTy> {\n+    fn parse_ret_ty(&mut self, allow_plus: bool) -> PResult<'a, FunctionRetTy> {\n         if self.eat(&token::RArrow) {\n-            Ok(FunctionRetTy::Ty(self.parse_ty_no_plus()?))\n+            Ok(FunctionRetTy::Ty(self.parse_ty_common(allow_plus, true)?))\n         } else {\n             Ok(FunctionRetTy::Default(self.span.with_hi(self.span.lo())))\n         }\n@@ -1530,6 +1530,7 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n+        let mut impl_dyn_multi = false;\n         let node = if self.eat(&token::OpenDelim(token::Paren)) {\n             // `(TYPE)` is a parenthesized type.\n             // `(TYPE,)` is a tuple with a single field of type TYPE.\n@@ -1616,13 +1617,17 @@ impl<'a> Parser<'a> {\n                 self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n-            // FIXME: figure out priority of `+` in `impl Trait1 + Trait2` (#34511).\n-            TyKind::ImplTrait(self.parse_ty_param_bounds()?)\n+            // Always parse bounds greedily for better error recovery.\n+            let bounds = self.parse_ty_param_bounds()?;\n+            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+            TyKind::ImplTrait(bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n                   self.look_ahead(1, |t| t.can_begin_bound() && !can_continue_type_after_ident(t)) {\n-            // FIXME: figure out priority of `+` in `dyn Trait1 + Trait2` (#34511).\n             self.bump(); // `dyn`\n-            TyKind::TraitObject(self.parse_ty_param_bounds()?, TraitObjectSyntax::Dyn)\n+            // Always parse bounds greedily for better error recovery.\n+            let bounds = self.parse_ty_param_bounds()?;\n+            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+            TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n                   self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)) {\n             // Bound list (trait object type)\n@@ -1658,6 +1663,7 @@ impl<'a> Parser<'a> {\n         let ty = Ty { node, span, id: ast::DUMMY_NODE_ID };\n \n         // Try to recover from use of `+` with incorrect priority.\n+        self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n         let ty = self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)?;\n \n@@ -1675,6 +1681,15 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n \n+    fn maybe_report_ambiguous_plus(&mut self, allow_plus: bool, impl_dyn_multi: bool, ty: &Ty) {\n+        if !allow_plus && impl_dyn_multi {\n+            let sum_with_parens = format!(\"({})\", pprust::ty_to_string(&ty));\n+            self.struct_span_err(ty.span, \"ambiguous `+` in a type\")\n+                .span_suggestion(ty.span, \"use parentheses to disambiguate\", sum_with_parens)\n+                .emit();\n+        }\n+    }\n+\n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n         if !allow_plus || self.token != token::BinOp(token::Plus) {\n@@ -4896,7 +4911,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_fn_decl(&mut self, allow_variadic: bool) -> PResult<'a, P<FnDecl>> {\n \n         let (args, variadic) = self.parse_fn_args(true, allow_variadic)?;\n-        let ret_ty = self.parse_ret_ty()?;\n+        let ret_ty = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: args,\n@@ -5037,7 +5052,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::CloseDelim(token::Paren))?;\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n-            output: self.parse_ret_ty()?,\n+            output: self.parse_ret_ty(true)?,\n             variadic: false\n         }))\n     }\n@@ -5059,7 +5074,7 @@ impl<'a> Parser<'a> {\n                 args\n             }\n         };\n-        let output = self.parse_ret_ty()?;\n+        let output = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: inputs_captures,"}, {"sha": "4c77edec56f136e647f93086f350d1d7ed7d1398", "filename": "src/test/parse-fail/closure-return-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs?ref=fe7e1a45f37f4265434cead827f587e75412f85c", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     let x = || -> i32 22;\n-    //~^ ERROR expected one of `!`, `(`, `::`, `<`, or `{`, found `22`\n+    //~^ ERROR expected one of `!`, `(`, `+`, `::`, `<`, or `{`, found `22`\n }"}, {"sha": "6fd4ee38a4d7a6e8ca3fc980f037c886a4d53ae5", "filename": "src/test/parse-fail/issue-24780.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fparse-fail%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fparse-fail%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-24780.rs?ref=fe7e1a45f37f4265434cead827f587e75412f85c", "patch": "@@ -15,6 +15,6 @@\n // compile-flags: -Z parse-only\n \n fn foo() -> Vec<usize>> {\n-    //~^ ERROR expected one of `!`, `::`, `where`, or `{`, found `>`\n+    //~^ ERROR expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n     Vec::new()\n }"}, {"sha": "f451123ca27fd83e9dee2153b4997f8879f46a0d", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs?ref=fe7e1a45f37f4265434cead827f587e75412f85c", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+fn f() -> impl A + {} // OK\n+fn f() -> impl A + B {} // OK\n+fn f() -> dyn A + B {} // OK\n+fn f() -> A + B {} // OK\n+\n+impl S {\n+    fn f(self) -> impl A + { // OK\n+        let _ = |a, b| -> impl A + {}; // OK\n+    }\n+    fn f(self) -> impl A + B { // OK\n+        let _ = |a, b| -> impl A + B {}; // OK\n+    }\n+    fn f(self) -> dyn A + B { // OK\n+        let _ = |a, b| -> dyn A + B {}; // OK\n+    }\n+    fn f(self) -> A + B { // OK\n+        let _ = |a, b| -> A + B {}; // OK\n+    }\n+}\n+\n+type A = fn() -> impl A +;\n+//~^ ERROR ambiguous `+` in a type\n+type A = fn() -> impl A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = fn() -> dyn A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = fn() -> A + B;\n+//~^ ERROR expected a path on the left-hand side of `+`, not `fn() -> A`\n+\n+type A = Fn() -> impl A +;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> impl A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> dyn A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> A + B; // OK, interpreted as `(Fn() -> A) + B` for compatibility\n+\n+type A = &impl A +;\n+//~^ ERROR ambiguous `+` in a type\n+type A = &impl A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = &dyn A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = &A + B;\n+//~^ ERROR expected a path on the left-hand side of `+`, not `&A`\n+\n+fn main() {}"}, {"sha": "885c3941971bdac51f0379e62971a3d3bd36f939", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe7e1a45f37f4265434cead827f587e75412f85c/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr?ref=fe7e1a45f37f4265434cead827f587e75412f85c", "patch": "@@ -0,0 +1,68 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:33:18\n+   |\n+33 | type A = fn() -> impl A +;\n+   |                  ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:35:18\n+   |\n+35 | type A = fn() -> impl A + B;\n+   |                  ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:37:18\n+   |\n+37 | type A = fn() -> dyn A + B;\n+   |                  ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> A`\n+  --> $DIR/impl-trait-plus-priority.rs:39:10\n+   |\n+39 | type A = fn() -> A + B;\n+   |          ^^^^^^^^^^^^^ perhaps you forgot parentheses?\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:42:18\n+   |\n+42 | type A = Fn() -> impl A +;\n+   |                  ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:44:18\n+   |\n+44 | type A = Fn() -> impl A + B;\n+   |                  ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:46:18\n+   |\n+46 | type A = Fn() -> dyn A + B;\n+   |                  ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:50:11\n+   |\n+50 | type A = &impl A +;\n+   |           ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:52:11\n+   |\n+52 | type A = &impl A + B;\n+   |           ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:54:11\n+   |\n+54 | type A = &dyn A + B;\n+   |           ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&A`\n+  --> $DIR/impl-trait-plus-priority.rs:56:10\n+   |\n+56 | type A = &A + B;\n+   |          ^^^^^^ help: try adding parentheses: `&(A + B)`\n+\n+error: aborting due to 11 previous errors\n+"}]}