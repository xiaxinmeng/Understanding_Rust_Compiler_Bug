{"sha": "4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMWIzYTU4NGVjNGM4NDgyNWFhNWY5YzExZTI4MjhhZGRlN2Y3ZDg=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-23T02:39:23Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-23T02:39:23Z"}, "message": "Use `use_verbose` for mir::Constant", "tree": {"sha": "40df9a9dd5886e16a35a23256bc3b8eee7123a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40df9a9dd5886e16a35a23256bc3b8eee7123a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDSnt4ACgkQZSV3NIU3\nbZJC1BAAzcS367Ph0Vo3SPcrj6uU9Ve9bK7JcTFQa1UfXKOqLxZdrdkcERXF0CEx\nb1Jm3Oxbtu2w5pnDijqpntU5n0uiUmHasA9z7Hu6ciMFV4EoTYzbEaDz17cIwiiX\nKaEzZt3ySeUEIBiGYX1Dfs4ImVyQ2n6Bc8xgQO6GxQ6SNKbPbc9G7XbTV+juSDyq\n3CU09KNyghNePDllTwNy03+58Der69GIh/dM3x6CnSCoJj6MLq7Wrr/FcAYMQhX/\n5MXpcv+sk2caINXe6W92L3zNyPdfcVOK+GpUqjhjDyQtJQV7nvs8ZpbG9WS1/8Ju\na6vV6s0sDr1CxS7fTfxaIF+wAtXktIa3meebISsNUmR59g5FK6+a7eMWUpNG4hYM\no+jNfE0mz3X/krnM7PtMGeX0Lslk6rcE0wYlcaSMEjj3LHqt5Td7vd13ovKK26ey\nunW9OmyCGMKiBBVbsNegm7rY/OibaK/srV3iu339FZ5EUg+IsBOncjyjmsXVCwE9\nIx7DrbVmrrF41ynxjgcLGWWZatTvp5iBG42G3/p93Bp3eR2+UU59nsFh7mzii63I\nujq3xkqT+Q0Wm03uClVDvTGQAE9v5T/v5MM6sH7ZVlx+TTvSSJJKz7eaJTkQPNCM\nPFB8Tg71TBGuheHWDtct5vSAENGvKOeSZbVd9XLTsyX2QWNqD+c=\n=ZkLU\n-----END PGP SIGNATURE-----", "payload": "tree 40df9a9dd5886e16a35a23256bc3b8eee7123a2f\nparent 4573a4a879a8e1f773944a8859e4dcd136138af8\nauthor Deadbeef <ent3rm4n@gmail.com> 1624415963 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624415963 +0800\n\nUse `use_verbose` for mir::Constant\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8", "html_url": "https://github.com/rust-lang/rust/commit/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4573a4a879a8e1f773944a8859e4dcd136138af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4573a4a879a8e1f773944a8859e4dcd136138af8", "html_url": "https://github.com/rust-lang/rust/commit/4573a4a879a8e1f773944a8859e4dcd136138af8"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "cb1203393b3d7396f8d7321925803e2e64acd9f7", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=4d1b3a584ec4c84825aa5f9c11e2828adde7f7d8", "patch": "@@ -426,14 +426,14 @@ impl ExtraComments<'tcx> {\n     }\n }\n \n-fn use_verbose(ty: &&TyS<'tcx>) -> bool {\n+fn use_verbose(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n     match ty.kind() {\n         ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n         // Unit type\n         ty::Tuple(g_args) if g_args.is_empty() => false,\n-        ty::Tuple(g_args) => g_args.iter().any(|g_arg| use_verbose(&g_arg.expect_ty())),\n-        ty::Array(ty, _) => use_verbose(ty),\n-        ty::FnDef(..) => false,\n+        ty::Tuple(g_args) => g_args.iter().any(|g_arg| use_verbose(&g_arg.expect_ty(), fn_def)),\n+        ty::Array(ty, _) => use_verbose(ty, fn_def),\n+        ty::FnDef(..) => fn_def,\n         _ => true,\n     }\n }\n@@ -442,28 +442,20 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n-        match literal.ty().kind() {\n-            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n-            // Unit type\n-            ty::Tuple(tys) if tys.is_empty() => {}\n-            _ => {\n-                self.push(\"mir::Constant\");\n-                self.push(&format!(\n-                    \"+ span: {}\",\n-                    self.tcx.sess.source_map().span_to_embeddable_string(*span)\n-                ));\n-                if let Some(user_ty) = user_ty {\n-                    self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n-                }\n-                match literal {\n-                    ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n-                    ConstantKind::Val(val, ty) => {\n-                        // To keep the diffs small, we render this almost like we render ty::Const\n-                        self.push(&format!(\n-                            \"+ literal: Const {{ ty: {}, val: Value({:?}) }}\",\n-                            ty, val\n-                        ))\n-                    }\n+        if use_verbose(&literal.ty(), true) {\n+            self.push(\"mir::Constant\");\n+            self.push(&format!(\n+                \"+ span: {}\",\n+                self.tcx.sess.source_map().span_to_embeddable_string(*span)\n+            ));\n+            if let Some(user_ty) = user_ty {\n+                self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n+            }\n+            match literal {\n+                ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n+                ConstantKind::Val(val, ty) => {\n+                    // To keep the diffs small, we render this almost like we render ty::Const\n+                    self.push(&format!(\"+ literal: Const {{ ty: {}, val: Value({:?}) }}\", ty, val))\n                 }\n             }\n         }\n@@ -472,7 +464,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n-        if use_verbose(ty) {\n+        if use_verbose(ty, false) {\n             self.push(\"ty::Const\");\n             self.push(&format!(\"+ ty: {:?}\", ty));\n             let val = match val {"}]}