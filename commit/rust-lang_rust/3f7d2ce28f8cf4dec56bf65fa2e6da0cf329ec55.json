{"sha": "3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmN2QyY2UyOGY4Y2Y0ZGVjNTZiZjY1ZmEyZTZkYTBjZjMyOWVjNTU=", "commit": {"author": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-12T10:26:10Z"}, "committer": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-12T10:26:10Z"}, "message": "Add naive shift implementation to Saturating", "tree": {"sha": "6ff83d8fc0c83fa1546912cea7c6b00d91a29dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff83d8fc0c83fa1546912cea7c6b00d91a29dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55", "html_url": "https://github.com/rust-lang/rust/commit/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55/comments", "author": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e240853dfc9c9e448bf32e8f2b059186e3cbd907", "url": "https://api.github.com/repos/rust-lang/rust/commits/e240853dfc9c9e448bf32e8f2b059186e3cbd907", "html_url": "https://github.com/rust-lang/rust/commit/e240853dfc9c9e448bf32e8f2b059186e3cbd907"}], "stats": {"total": 159, "additions": 158, "deletions": 1}, "files": [{"sha": "9f4d7104fa5ad025fb4698ef2860bf5a91fee1b8", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 158, "deletions": 1, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=3f7d2ce28f8cf4dec56bf65fa2e6da0cf329ec55", "patch": "@@ -4,7 +4,7 @@ use crate::fmt;\n use crate::ops::{Add, AddAssign, BitAnd, BitAndAssign, BitOr, BitOrAssign};\n use crate::ops::{BitXor, BitXorAssign, Div, DivAssign};\n use crate::ops::{Mul, MulAssign, Neg, Not};\n-use crate::ops::{Sub, SubAssign};\n+use crate::ops::{Shl, ShlAssign, Shr, ShrAssign, Sub, SubAssign};\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n@@ -78,6 +78,127 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Saturating<T> {\n         self.0.fmt(f)\n     }\n }\n+#[allow(unused_macros)]\n+macro_rules! sh_impl_signed {\n+    ($t:ident, $f:ident) => {\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl Shl<$f> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn shl(self, other: $f) -> Saturating<$t> {\n+                if other < 0 {\n+                    Saturating(self.0.shr((-other & self::shift_max::$t as $f) as u32))\n+                } else {\n+                    Saturating(self.0.shl((other & self::shift_max::$t as $f) as u32))\n+                }\n+            }\n+        }\n+        forward_ref_binop! { impl Shl, shl for Saturating<$t>, $f,\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl ShlAssign<$f> for Saturating<$t> {\n+            #[inline]\n+            fn shl_assign(&mut self, other: $f) {\n+                *self = *self << other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Saturating<$t>, $f }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl Shr<$f> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn shr(self, other: $f) -> Saturating<$t> {\n+                if other < 0 {\n+                    Saturating(self.0.shl((-other & self::shift_max::$t as $f) as u32))\n+                } else {\n+                    Saturating(self.0.shr((other & self::shift_max::$t as $f) as u32))\n+                }\n+            }\n+        }\n+        forward_ref_binop! { impl Shr, shr for Saturating<$t>, $f,\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl ShrAssign<$f> for Saturating<$t> {\n+            #[inline]\n+            fn shr_assign(&mut self, other: $f) {\n+                *self = *self >> other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Saturating<$t>, $f }\n+    };\n+}\n+\n+macro_rules! sh_impl_unsigned {\n+    ($t:ident, $f:ident) => {\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl Shl<$f> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn shl(self, other: $f) -> Saturating<$t> {\n+                Saturating(self.0.shl((other & self::shift_max::$t as $f) as u32))\n+            }\n+        }\n+        forward_ref_binop! { impl Shl, shl for Saturating<$t>, $f,\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl ShlAssign<$f> for Saturating<$t> {\n+            #[inline]\n+            fn shl_assign(&mut self, other: $f) {\n+                *self = *self << other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Saturating<$t>, $f }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl Shr<$f> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn shr(self, other: $f) -> Saturating<$t> {\n+                Saturating(self.0.shr((other & self::shift_max::$t as $f) as u32))\n+            }\n+        }\n+        forward_ref_binop! { impl Shr, shr for Saturating<$t>, $f,\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n+\n+        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        impl ShrAssign<$f> for Saturating<$t> {\n+            #[inline]\n+            fn shr_assign(&mut self, other: $f) {\n+                *self = *self >> other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Saturating<$t>, $f }\n+    };\n+}\n+\n+// FIXME (#23545): uncomment the remaining impls\n+macro_rules! sh_impl_all {\n+    ($($t:ident)*) => ($(\n+        //sh_impl_unsigned! { $t, u8 }\n+        //sh_impl_unsigned! { $t, u16 }\n+        //sh_impl_unsigned! { $t, u32 }\n+        //sh_impl_unsigned! { $t, u64 }\n+        //sh_impl_unsigned! { $t, u128 }\n+        sh_impl_unsigned! { $t, usize }\n+\n+        //sh_impl_signed! { $t, i8 }\n+        //sh_impl_signed! { $t, i16 }\n+        //sh_impl_signed! { $t, i32 }\n+        //sh_impl_signed! { $t, i64 }\n+        //sh_impl_signed! { $t, i128 }\n+        //sh_impl_signed! { $t, isize }\n+    )*)\n+}\n+\n+sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n // FIXME(30524): impl Op<T> for Saturating<T>, impl OpAssign<T> for Saturating<T>\n macro_rules! saturating_impl {\n@@ -774,3 +895,39 @@ macro_rules! saturating_int_impl_unsigned {\n }\n \n saturating_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n+\n+mod shift_max {\n+    #![allow(non_upper_case_globals)]\n+\n+    #[cfg(target_pointer_width = \"16\")]\n+    mod platform {\n+        pub const usize: u32 = super::u16;\n+        pub const isize: u32 = super::i16;\n+    }\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    mod platform {\n+        pub const usize: u32 = super::u32;\n+        pub const isize: u32 = super::i32;\n+    }\n+\n+    #[cfg(target_pointer_width = \"64\")]\n+    mod platform {\n+        pub const usize: u32 = super::u64;\n+        pub const isize: u32 = super::i64;\n+    }\n+\n+    pub const i8: u32 = (1 << 3) - 1;\n+    pub const i16: u32 = (1 << 4) - 1;\n+    pub const i32: u32 = (1 << 5) - 1;\n+    pub const i64: u32 = (1 << 6) - 1;\n+    pub const i128: u32 = (1 << 7) - 1;\n+    pub use self::platform::isize;\n+\n+    pub const u8: u32 = i8;\n+    pub const u16: u32 = i16;\n+    pub const u32: u32 = i32;\n+    pub const u64: u32 = i64;\n+    pub const u128: u32 = i128;\n+    pub use self::platform::usize;\n+}"}]}