{"sha": "1a6d41cdb5219763eeaf3604e5805a854e5ba931", "node_id": "C_kwDOAAsO6NoAKDFhNmQ0MWNkYjUyMTk3NjNlZWFmMzYwNGU1ODA1YTg1NGU1YmE5MzE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-02T23:37:17Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-16T16:15:39Z"}, "message": "rustdoc: resolve intra-doc links when checking HTML\n\nSimilar to #86451\n\nCC #67799", "tree": {"sha": "f2a28fef80d2eecfc3771eb2024cc3dccf26e314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a28fef80d2eecfc3771eb2024cc3dccf26e314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6d41cdb5219763eeaf3604e5805a854e5ba931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d41cdb5219763eeaf3604e5805a854e5ba931", "html_url": "https://github.com/rust-lang/rust/commit/1a6d41cdb5219763eeaf3604e5805a854e5ba931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d41cdb5219763eeaf3604e5805a854e5ba931/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "html_url": "https://github.com/rust-lang/rust/commit/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "f047f6bb1699bea6001e6e681e176854078b3293", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=1a6d41cdb5219763eeaf3604e5805a854e5ba931", "patch": "@@ -5,7 +5,7 @@ use crate::core::DocContext;\n use crate::html::markdown::main_body_opts;\n use crate::visit::DocVisitor;\n \n-use pulldown_cmark::{Event, Parser, Tag};\n+use pulldown_cmark::{BrokenLink, Event, LinkType, Parser, Tag};\n \n use std::iter::Peekable;\n use std::ops::Range;\n@@ -249,7 +249,31 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n             let mut is_in_comment = None;\n             let mut in_code_block = false;\n \n-            let p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n+            let link_names = item.link_names(&self.cx.cache);\n+\n+            let mut replacer = |broken_link: BrokenLink<'_>| {\n+                if let Some(link) =\n+                    link_names.iter().find(|link| *link.original_text == *broken_link.reference)\n+                {\n+                    Some((link.href.as_str().into(), link.new_text.as_str().into()))\n+                } else if matches!(\n+                    &broken_link.link_type,\n+                    LinkType::Reference | LinkType::ReferenceUnknown\n+                ) {\n+                    // If the link is shaped [like][this], suppress any broken HTML in the [this] part.\n+                    // The `broken_intra_doc_links` will report typos in there anyway.\n+                    Some((\n+                        broken_link.reference.to_string().into(),\n+                        broken_link.reference.to_string().into(),\n+                    ))\n+                } else {\n+                    None\n+                }\n+            };\n+\n+            let p =\n+                Parser::new_with_broken_link_callback(&dox, main_body_opts(), Some(&mut replacer))\n+                    .into_offset_iter();\n \n             for (event, range) in p {\n                 match event {"}, {"sha": "b5470c859fdf4bb8bf00763ae6c4fc6a369cc741", "filename": "src/test/rustdoc-ui/intra-doc/html-as-generics-intra-doc.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.rs?ref=1a6d41cdb5219763eeaf3604e5805a854e5ba931", "patch": "@@ -0,0 +1,25 @@\n+#![deny(rustdoc::invalid_html_tags)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub struct ExistentStruct<T>(T);\n+\n+/// This [test][ExistentStruct<i32>] thing!\n+pub struct NoError;\n+\n+/// This [ExistentStruct<i32>] thing!\n+//~^ ERROR unclosed HTML tag `i32`\n+pub struct PartialErrorOnlyHtml;\n+\n+/// This [test][NonExistentStruct<i32>] thing!\n+//~^ ERROR unresolved link\n+pub struct PartialErrorOnlyResolve;\n+\n+/// This [NonExistentStruct2<i32>] thing!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~| ERROR unresolved link\n+pub struct YesError;\n+\n+/// This [NonExistentStruct3<i32>][] thing!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~| ERROR unresolved link\n+pub struct YesErrorCollapsed;"}, {"sha": "00fe229da40ce648a8a98773bd04bab7e65eb11f", "filename": "src/test/rustdoc-ui/intra-doc/html-as-generics-intra-doc.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d41cdb5219763eeaf3604e5805a854e5ba931/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr?ref=1a6d41cdb5219763eeaf3604e5805a854e5ba931", "patch": "@@ -0,0 +1,69 @@\n+error: unresolved link to `NonExistentStruct`\n+  --> $DIR/html-as-generics-intra-doc.rs:13:17\n+   |\n+LL | /// This [test][NonExistentStruct<i32>] thing!\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ no item named `NonExistentStruct` in scope\n+   |\n+note: the lint level is defined here\n+  --> $DIR/html-as-generics-intra-doc.rs:2:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: unresolved link to `NonExistentStruct2`\n+  --> $DIR/html-as-generics-intra-doc.rs:17:11\n+   |\n+LL | /// This [NonExistentStruct2<i32>] thing!\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ no item named `NonExistentStruct2` in scope\n+   |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: unresolved link to `NonExistentStruct3`\n+  --> $DIR/html-as-generics-intra-doc.rs:22:11\n+   |\n+LL | /// This [NonExistentStruct3<i32>][] thing!\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ no item named `NonExistentStruct3` in scope\n+   |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-intra-doc.rs:9:25\n+   |\n+LL | /// This [ExistentStruct<i32>] thing!\n+   |                         ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/html-as-generics-intra-doc.rs:1:9\n+   |\n+LL | #![deny(rustdoc::invalid_html_tags)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try marking as source code\n+   |\n+LL | /// This [`ExistentStruct<i32>`] thing!\n+   |           +                   +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-intra-doc.rs:17:29\n+   |\n+LL | /// This [NonExistentStruct2<i32>] thing!\n+   |                             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [`NonExistentStruct2<i32>`] thing!\n+   |           +                       +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-intra-doc.rs:22:29\n+   |\n+LL | /// This [NonExistentStruct3<i32>][] thing!\n+   |                             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [`NonExistentStruct3<i32>`][] thing!\n+   |           +                       +\n+\n+error: aborting due to 6 previous errors\n+"}]}