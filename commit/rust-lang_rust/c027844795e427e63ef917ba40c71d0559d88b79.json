{"sha": "c027844795e427e63ef917ba40c71d0559d88b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjc4NDQ3OTVlNDI3ZTYzZWY5MTdiYTQwYzcxZDA1NTlkODhiNzk=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T13:06:25Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T13:06:25Z"}, "message": "Fill in things needed to stabilize int_error_matching", "tree": {"sha": "a6981f116dc3a4b8cc48e376b686b974a47dcaa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6981f116dc3a4b8cc48e376b686b974a47dcaa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c027844795e427e63ef917ba40c71d0559d88b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c027844795e427e63ef917ba40c71d0559d88b79", "html_url": "https://github.com/rust-lang/rust/commit/c027844795e427e63ef917ba40c71d0559d88b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c027844795e427e63ef917ba40c71d0559d88b79/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fadf0257235ddb8a464befc02e50b35652174689", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadf0257235ddb8a464befc02e50b35652174689", "html_url": "https://github.com/rust-lang/rust/commit/fadf0257235ddb8a464befc02e50b35652174689"}], "stats": {"total": 130, "additions": 66, "deletions": 64}, "files": [{"sha": "37bc1a305b2f84ffc417b0f7c3d6542ea9151c6a", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -46,7 +46,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n-#![feature(int_error_matching)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "6b6df3a303c2220a579e18026b294cb52011df7e", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -48,10 +48,12 @@ fn update_limit(\n                         .unwrap_or(attr.span);\n \n                     let error_str = match e.kind() {\n-                        IntErrorKind::Overflow => \"`limit` is too large\",\n-                        IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n+                        IntErrorKind::PosOverflow => \"`limit` is too large\",\n+                        IntErrorKind::Empty | IntErrorKind::OnlySign => {\n+                            \"`limit` must be a non-negative integer\"\n+                        }\n                         IntErrorKind::InvalidDigit => \"not a valid integer\",\n-                        IntErrorKind::Underflow => bug!(\"`limit` should never underflow\"),\n+                        IntErrorKind::NegOverflow => bug!(\"`limit` should never underflow\"),\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };"}, {"sha": "9705226ba243a33e414bc74ed93b6549d3108069", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -77,51 +77,47 @@ pub struct ParseIntError {\n /// # Example\n ///\n /// ```\n-/// #![feature(int_error_matching)]\n-///\n /// # fn main() {\n /// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n ///     println!(\"Failed conversion to i32: {:?}\", e.kind());\n /// }\n /// # }\n /// ```\n-#[unstable(\n-    feature = \"int_error_matching\",\n-    reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-    issue = \"22639\"\n-)]\n+#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[non_exhaustive]\n pub enum IntErrorKind {\n     /// Value being parsed is empty.\n     ///\n     /// Among other causes, this variant will be constructed when parsing an empty string.\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Empty,\n     /// Contains an invalid digit.\n     ///\n     /// Among other causes, this variant will be constructed when parsing a string that\n     /// contains a letter.\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     InvalidDigit,\n     /// Integer is too large to store in target integer type.\n-    Overflow,\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+    PosOverflow,\n     /// Integer is too small to store in target integer type.\n-    Underflow,\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+    NegOverflow,\n     /// Value was Zero\n     ///\n     /// This variant will be emitted when the parsing string has a value of zero, which\n     /// would be illegal for non-zero types.\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Zero,\n+    /// The value contains nothing other than signs `+` or `-`.\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+    OnlySign,\n }\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n-    #[unstable(\n-        feature = \"int_error_matching\",\n-        reason = \"it can be useful to match errors when making error messages \\\n-                  for integer parsing\",\n-        issue = \"22639\"\n-    )]\n+    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind\n     }\n@@ -136,9 +132,10 @@ impl ParseIntError {\n         match self.kind {\n             IntErrorKind::Empty => \"cannot parse integer from empty string\",\n             IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n-            IntErrorKind::Overflow => \"number too large to fit in target type\",\n-            IntErrorKind::Underflow => \"number too small to fit in target type\",\n+            IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n+            IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n             IntErrorKind::Zero => \"number would be zero for non-zero type\",\n+            IntErrorKind::OnlySign => \"only signs without digits found in string\",\n         }\n     }\n }"}, {"sha": "67b4b885dd2ecf597744ad84042a49bd737c942a", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -63,7 +63,7 @@ pub use nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, No\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use error::TryFromIntError;\n \n-#[unstable(feature = \"int_error_matching\", issue = \"22639\")]\n+#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n pub use error::IntErrorKind;\n \n macro_rules! usize_isize_to_xe_bytes_doc {\n@@ -836,7 +836,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     };\n \n     if digits.is_empty() {\n-        return Err(PIE { kind: Empty });\n+        return Err(PIE { kind: OnlySign });\n     }\n \n     let mut result = T::from_u32(0);\n@@ -849,11 +849,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Overflow }),\n+                None => return Err(PIE { kind: PosOverflow }),\n             };\n             result = match result.checked_add(x) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Overflow }),\n+                None => return Err(PIE { kind: PosOverflow }),\n             };\n         }\n     } else {\n@@ -865,11 +865,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Underflow }),\n+                None => return Err(PIE { kind: NegOverflow }),\n             };\n             result = match result.checked_sub(x) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Underflow }),\n+                None => return Err(PIE { kind: NegOverflow }),\n             };\n         }\n     }"}, {"sha": "c128691fa75253ea04b69745eb927ba9f9dd0314", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -37,7 +37,6 @@\n #![feature(try_trait)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(int_error_matching)]\n #![feature(array_value_iter)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]"}, {"sha": "fb1293c99bba934748dd13362c0a994eea41d833", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -135,11 +135,11 @@ fn test_from_str() {\n     );\n     assert_eq!(\n         \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::Underflow)\n+        Some(IntErrorKind::NegOverflow)\n     );\n     assert_eq!(\n         \"257\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::Overflow)\n+        Some(IntErrorKind::PosOverflow)\n     );\n }\n "}, {"sha": "d6f92f25e78461ecf4912a37d92222f66c9df7ee", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -2,10 +2,11 @@ use core::cmp::PartialEq;\n use core::convert::{TryFrom, TryInto};\n use core::fmt::Debug;\n use core::marker::Copy;\n-use core::num::TryFromIntError;\n+use core::num::{IntErrorKind, ParseIntError, TryFromIntError};\n use core::ops::{Add, Div, Mul, Rem, Sub};\n use core::option::Option;\n-use core::option::Option::{None, Some};\n+use core::option::Option::None;\n+use core::str::FromStr;\n \n #[macro_use]\n mod int_macros;\n@@ -65,6 +66,14 @@ where\n     assert_eq!(ten.rem(two), ten % two);\n }\n \n+fn test_parse<T>(num_str: &str, expected: Result<T, IntErrorKind>)\n+where\n+    T: FromStr<Err = ParseIntError>,\n+    Result<T, IntErrorKind>: PartialEq + Debug,\n+{\n+    assert_eq!(num_str.parse::<T>().map_err(|e| e.kind().clone()), expected)\n+}\n+\n #[test]\n fn from_str_issue7588() {\n     let u: Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n@@ -75,49 +84,51 @@ fn from_str_issue7588() {\n \n #[test]\n fn test_int_from_str_overflow() {\n-    assert_eq!(\"127\".parse::<i8>().ok(), Some(127i8));\n-    assert_eq!(\"128\".parse::<i8>().ok(), None);\n+    test_parse::<i8>(\"127\", Ok(127));\n+    test_parse::<i8>(\"128\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-128\".parse::<i8>().ok(), Some(-128i8));\n-    assert_eq!(\"-129\".parse::<i8>().ok(), None);\n+    test_parse::<i8>(\"-128\", Ok(-128));\n+    test_parse::<i8>(\"-129\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"32767\".parse::<i16>().ok(), Some(32_767i16));\n-    assert_eq!(\"32768\".parse::<i16>().ok(), None);\n+    test_parse::<i16>(\"32767\", Ok(32_767));\n+    test_parse::<i16>(\"32768\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-32768\".parse::<i16>().ok(), Some(-32_768i16));\n-    assert_eq!(\"-32769\".parse::<i16>().ok(), None);\n+    test_parse::<i16>(\"-32768\", Ok(-32_768));\n+    test_parse::<i16>(\"-32769\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"2147483647\".parse::<i32>().ok(), Some(2_147_483_647i32));\n-    assert_eq!(\"2147483648\".parse::<i32>().ok(), None);\n+    test_parse::<i32>(\"2147483647\", Ok(2_147_483_647));\n+    test_parse::<i32>(\"2147483648\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-2147483648\".parse::<i32>().ok(), Some(-2_147_483_648i32));\n-    assert_eq!(\"-2147483649\".parse::<i32>().ok(), None);\n+    test_parse::<i32>(\"-2147483648\", Ok(-2_147_483_648));\n+    test_parse::<i32>(\"-2147483649\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"9223372036854775807\".parse::<i64>().ok(), Some(9_223_372_036_854_775_807i64));\n-    assert_eq!(\"9223372036854775808\".parse::<i64>().ok(), None);\n+    test_parse::<i64>(\"9223372036854775807\", Ok(9_223_372_036_854_775_807));\n+    test_parse::<i64>(\"9223372036854775808\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-9223372036854775808\".parse::<i64>().ok(), Some(-9_223_372_036_854_775_808i64));\n-    assert_eq!(\"-9223372036854775809\".parse::<i64>().ok(), None);\n+    test_parse::<i64>(\"-9223372036854775808\", Ok(-9_223_372_036_854_775_808));\n+    test_parse::<i64>(\"-9223372036854775809\", Err(IntErrorKind::NegOverflow));\n }\n \n #[test]\n fn test_leading_plus() {\n-    assert_eq!(\"+127\".parse::<u8>().ok(), Some(127));\n-    assert_eq!(\"+9223372036854775807\".parse::<i64>().ok(), Some(9223372036854775807));\n+    test_parse::<u8>(\"+127\", Ok(127));\n+    test_parse::<i64>(\"+9223372036854775807\", Ok(9223372036854775807));\n }\n \n #[test]\n fn test_invalid() {\n-    assert_eq!(\"--129\".parse::<i8>().ok(), None);\n-    assert_eq!(\"++129\".parse::<i8>().ok(), None);\n-    assert_eq!(\"\u0421\u044a\u0435\u0448\u044c\".parse::<u8>().ok(), None);\n+    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit));\n+    // is this the correct error here. Maybe need a reapeat sign error here\n+    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit));\n }\n \n #[test]\n fn test_empty() {\n-    assert_eq!(\"-\".parse::<i8>().ok(), None);\n-    assert_eq!(\"+\".parse::<i8>().ok(), None);\n-    assert_eq!(\"\".parse::<u8>().ok(), None);\n+    test_parse::<i8>(\"-\", Err(IntErrorKind::OnlySign));\n+    test_parse::<i8>(\"+\", Err(IntErrorKind::OnlySign));\n+    test_parse::<u8>(\"\", Err(IntErrorKind::Empty));\n }\n \n #[test]"}, {"sha": "fa23229066cf1af563adb9d7f7edbb71df2b2fc4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -264,7 +264,6 @@\n #![feature(global_asm)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n-#![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n #![feature(lang_items)]"}, {"sha": "ac3b055cdb0506d4d26fd3a3495d8cdbf1301a87", "filename": "library/std/src/num.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fstd%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c027844795e427e63ef917ba40c71d0559d88b79/library%2Fstd%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnum.rs?ref=c027844795e427e63ef917ba40c71d0559d88b79", "patch": "@@ -22,12 +22,7 @@ pub use core::num::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8,\n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use core::num::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n \n-#[unstable(\n-    feature = \"int_error_matching\",\n-    reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-    issue = \"22639\"\n-)]\n+#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n pub use core::num::IntErrorKind;\n \n #[cfg(test)]"}]}