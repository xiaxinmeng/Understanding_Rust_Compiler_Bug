{"sha": "0fc063f15936761024183a3bb3790684d5de3bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzA2M2YxNTkzNjc2MTAyNDE4M2EzYmIzNzkwNjg0ZDVkZTNiZDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-07T22:14:35Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:55Z"}, "message": "Prepare generator MutVisitor to have projections interned", "tree": {"sha": "faa7142effef18ced11a947b66b91bf96408a50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa7142effef18ced11a947b66b91bf96408a50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc063f15936761024183a3bb3790684d5de3bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHj8ACgkQiMlBzaHU\nZDKYRhAApJhuT2IzVeajhubCmwe4PTaLf6f7huihwUPVr1X2yGxrwCrPNlZa7cHe\nJEKESxwvLvGY7EGdFdN7h+g2/OYOmmv+LAtNghE6zgSWHvfSkX+m7oJA/ckmtnRA\n/tTzbnOGt9lVlDg/dtiJ39XurSpBoRuJHP1dMZu6iYR/X57CkDs8VETIL6hGlIZY\ntgUyWgZbgQ4yZsVGO2YtYr9k77c3vsR6IN88lpBKBB46GVquH6ZqFChAs64OuQql\nKo3c/hPx9PlZJF62swxZJOYy67mjBYqPsE7gbcwxw8mlMjA0H31/9lS4iHvzT+Zf\nWy9ujOywo2ZADtAG3tYJUH5iMtzlUZeuWTDe1K+1HvlVeyeaBcF3DUpvEYqcJX4n\n46x5WKnOxsnafP5KlL0vDsxzVRywn9iZ8DdM+OIwj74VKHsHmmEGMMG/3LIx5MLc\n90tdkIB2i0//Vv4yWSykNys6V0KZWKa29pFygWPK8/TefVeAk0EPrjiTEv3BpM+G\nH1gfV/sifRQqs09I3SgF22jrrGyUDrHOJv1Q4pqXsve7WykyBnF8213WWJ/DW4xn\nXQcipVPEpCl/JUku6n/GiU5DW4i0zZG2AsbF/BphBxysjgpNg4RRFQw0lrg11L+r\nR4TfQZLjivZWBAzKobJXThagO/va/gGeFhMGY0uWZ4ivYriEfd8=\n=ef6J\n-----END PGP SIGNATURE-----", "payload": "tree faa7142effef18ced11a947b66b91bf96408a50c\nparent e3e99516730f72fa05cb964ae341156e1ca85c39\nauthor Santiago Pastorino <spastorino@gmail.com> 1570486475 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364415 -0400\n\nPrepare generator MutVisitor to have projections interned\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc063f15936761024183a3bb3790684d5de3bd3", "html_url": "https://github.com/rust-lang/rust/commit/0fc063f15936761024183a3bb3790684d5de3bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc063f15936761024183a3bb3790684d5de3bd3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e99516730f72fa05cb964ae341156e1ca85c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e99516730f72fa05cb964ae341156e1ca85c39", "html_url": "https://github.com/rust-lang/rust/commit/e3e99516730f72fa05cb964ae341156e1ca85c39"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "a801548efab085c9bb1a861cd40dd50576e6202f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0fc063f15936761024183a3bb3790684d5de3bd3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc063f15936761024183a3bb3790684d5de3bd3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0fc063f15936761024183a3bb3790684d5de3bd3", "patch": "@@ -88,6 +88,24 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n             *local = self.to;\n         }\n     }\n+\n+    fn visit_place(&mut self,\n+                    place: &mut Place<'tcx>,\n+                    context: PlaceContext,\n+                    location: Location) {\n+        self.visit_place_base(&mut place.base, context, location);\n+\n+        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n+            match elem {\n+                PlaceElem::Index(local) if *local == self.from => {\n+                    PlaceElem::Index(self.to)\n+                }\n+                _ => elem.clone(),\n+            }\n+        ).collect();\n+\n+        place.projection = new_projection.into_boxed_slice();\n+    }\n }\n \n struct DerefArgVisitor;\n@@ -110,7 +128,13 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n                 projection: Box::new([ProjectionElem::Deref]),\n             });\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n }\n@@ -137,7 +161,13 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 projection: Box::new([ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n             });\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n }\n@@ -247,17 +277,25 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n         assert_eq!(self.remap.get(local), None);\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    context: PlaceContext,\n-                    location: Location) {\n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         if let PlaceBase::Local(l) = place.base {\n             // Replace an Local in the remap with a generator struct access\n             if let Some(&(ty, variant_index, idx)) = self.remap.get(&l) {\n                 replace_base(place, self.make_field(variant_index, idx, ty));\n             }\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n "}]}