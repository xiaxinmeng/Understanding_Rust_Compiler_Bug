{"sha": "71eacef414d076380287dbade8d6cc62e49ff270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZWFjZWY0MTRkMDc2MzgwMjg3ZGJhZGU4ZDZjYzYyZTQ5ZmYyNzA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-08T10:15:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T08:17:25Z"}, "message": "rustc_metadata: remove predicates_of and rely on predicates_defined_on alone.", "tree": {"sha": "e88722ef4197b33e32dbd764d990b276139110cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88722ef4197b33e32dbd764d990b276139110cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71eacef414d076380287dbade8d6cc62e49ff270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71eacef414d076380287dbade8d6cc62e49ff270", "html_url": "https://github.com/rust-lang/rust/commit/71eacef414d076380287dbade8d6cc62e49ff270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71eacef414d076380287dbade8d6cc62e49ff270/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e528ffe9c32b9a6b3be7554aa7929abb77b83a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e528ffe9c32b9a6b3be7554aa7929abb77b83a1", "html_url": "https://github.com/rust-lang/rust/commit/9e528ffe9c32b9a6b3be7554aa7929abb77b83a1"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "aade35fe04a13f5397551e77507be633f8ad8df8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=71eacef414d076380287dbade8d6cc62e49ff270", "patch": "@@ -95,7 +95,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n     predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n     super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {"}, {"sha": "879d43f7fd3ec0c23df87bcc6e4ba1d6c430e4c6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=71eacef414d076380287dbade8d6cc62e49ff270", "patch": "@@ -658,14 +658,6 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_adt_def(did, adt_kind, variants, repr)\n     }\n \n-    crate fn get_predicates(\n-        &self,\n-        item_id: DefIndex,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> ty::GenericPredicates<'tcx> {\n-        self.root.per_def.predicates.get(self, item_id).unwrap().decode((self, tcx))\n-    }\n-\n     crate fn get_predicates_defined_on(\n         &self,\n         item_id: DefIndex,"}, {"sha": "eb254f0915824c8e48e032f10269720c6263afbd", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=71eacef414d076380287dbade8d6cc62e49ff270", "patch": "@@ -76,7 +76,6 @@ struct PerDefTables<'tcx> {\n     inherent_impls: PerDefTable<Lazy<[DefIndex]>>,\n     variances: PerDefTable<Lazy<[ty::Variance]>>,\n     generics: PerDefTable<Lazy<ty::Generics>>,\n-    predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n     predicates_defined_on: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n     super_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n \n@@ -524,7 +523,6 @@ impl<'tcx> EncodeContext<'tcx> {\n             inherent_impls: self.per_def.inherent_impls.encode(&mut self.opaque),\n             variances: self.per_def.variances.encode(&mut self.opaque),\n             generics: self.per_def.generics.encode(&mut self.opaque),\n-            predicates: self.per_def.predicates.encode(&mut self.opaque),\n             predicates_defined_on: self.per_def.predicates_defined_on.encode(&mut self.opaque),\n             super_predicates: self.per_def.super_predicates.encode(&mut self.opaque),\n \n@@ -676,7 +674,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -719,7 +717,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -777,7 +775,7 @@ impl EncodeContext<'tcx> {\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n     }\n \n     fn encode_struct_ctor(&mut self, adt_def_id: DefId, def_id: DefId) {\n@@ -820,7 +818,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -830,11 +828,6 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.generics[def_id] <- self.tcx.generics_of(def_id));\n     }\n \n-    fn encode_predicates(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_predicates({:?})\", def_id);\n-        record!(self.per_def.predicates[def_id] <- self.tcx.predicates_of(def_id));\n-    }\n-\n     fn encode_predicates_defined_on(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_predicates_defined_on({:?})\", def_id);\n         record!(self.per_def.predicates_defined_on[def_id] <-\n@@ -920,7 +913,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -987,7 +980,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n             hir::ImplItemKind::Method(ref sig, _) => {\n@@ -1261,21 +1254,9 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::Trait(..) |\n             hir::ItemKind::TraitAlias(..) => {\n                 self.encode_generics(def_id);\n-                self.encode_predicates(def_id);\n-            }\n-            _ => {}\n-        }\n-        // The only time that `predicates_defined_on` is used (on\n-        // an external item) is for traits, during chalk lowering,\n-        // so only encode it in that case as an efficiency\n-        // hack. (No reason not to expand it in the future if\n-        // necessary.)\n-        match item.kind {\n-            hir::ItemKind::Trait(..) |\n-            hir::ItemKind::TraitAlias(..) => {\n                 self.encode_predicates_defined_on(def_id);\n             }\n-            _ => {} // not *wrong* for other kinds of items, but not needed\n+            _ => {}\n         }\n         match item.kind {\n             hir::ItemKind::Trait(..) |\n@@ -1378,7 +1359,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.span[def_id] <- self.tcx.def_span(def_id));\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -1589,7 +1570,7 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates(def_id);\n+        self.encode_predicates_defined_on(def_id);\n     }\n }\n "}, {"sha": "eb2de0e9783d4858511a187a6357c3dbba458784", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71eacef414d076380287dbade8d6cc62e49ff270/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=71eacef414d076380287dbade8d6cc62e49ff270", "patch": "@@ -244,7 +244,6 @@ crate struct LazyPerDefTables<'tcx> {\n     pub inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n     pub variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n     pub generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n-    pub predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n     pub predicates_defined_on: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n     pub super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n "}]}