{"sha": "e91375c763a74ebf3784f2d1df542095eb8a159d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTM3NWM3NjNhNzRlYmYzNzg0ZjJkMWRmNTQyMDk1ZWI4YTE1OWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-22T15:59:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-22T15:59:58Z"}, "message": "Merge #3274\n\n3274: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6c6020aea89d7ffbd88131974a9701f39573ec94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6020aea89d7ffbd88131974a9701f39573ec94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91375c763a74ebf3784f2d1df542095eb8a159d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeUU/+CRBK7hj4Ov3rIwAAdHIIAKFELXdcz+FFz2wvZH+XE1MY\nMXo+eXre4JsTc6XJqfS3Hof7PIRoJ8j5d0lO0E2jKuy1AP23ZSPLXk6MbEXcuFrY\nQMDZ3inFlzuWwL+9R/RbP2esaWqdNPL+n4YPhPQkvUStZnBCCb3W3lywn37GlCz4\nFgWx8eekssxQ1T4GCSBBrUzmyhfFAa9VtcOz+lt6HjgciYR3/GQjWaYulrVEDgPV\nOia1xDbr++fZkRKv8tc/PmnmR/Xs+f4H3bJ1HiQUmmKit1Kgz8WV6UccW2aSyxn3\nYQtMW2jE6bG3rxt0vNMg3Y0H5ByDDfBe/T6ADUHGW/A6Y2eh6xabYDcFpfjQkyI=\n=YhfQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c6020aea89d7ffbd88131974a9701f39573ec94\nparent 46dbe4dc80ec1cca9677a5c40348712e9e713f12\nparent fda118f4e90fb3341f0aa2a6dbb583acbf39aabd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582387198 +0000\ncommitter GitHub <noreply@github.com> 1582387198 +0000\n\nMerge #3274\n\n3274: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91375c763a74ebf3784f2d1df542095eb8a159d", "html_url": "https://github.com/rust-lang/rust/commit/e91375c763a74ebf3784f2d1df542095eb8a159d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91375c763a74ebf3784f2d1df542095eb8a159d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46dbe4dc80ec1cca9677a5c40348712e9e713f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/46dbe4dc80ec1cca9677a5c40348712e9e713f12", "html_url": "https://github.com/rust-lang/rust/commit/46dbe4dc80ec1cca9677a5c40348712e9e713f12"}, {"sha": "fda118f4e90fb3341f0aa2a6dbb583acbf39aabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda118f4e90fb3341f0aa2a6dbb583acbf39aabd", "html_url": "https://github.com/rust-lang/rust/commit/fda118f4e90fb3341f0aa2a6dbb583acbf39aabd"}], "stats": {"total": 229, "additions": 58, "deletions": 171}, "files": [{"sha": "1c26a86974ca0b0e0eff6caf8a0e4b26db82f015", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=e91375c763a74ebf3784f2d1df542095eb8a159d", "patch": "@@ -15,7 +15,7 @@ pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n pub use structure::{file_structure, StructureNode};\n \n-pub(crate) use navigation_target::ToNav;\n+pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {"}, {"sha": "b42cb477e37f21359b954760c1b25776ea0e4a5c", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=e91375c763a74ebf3784f2d1df542095eb8a159d", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{expand::original_range, FileSymbol};\n+use crate::{expand::original_range, references::NameDefinition, FileSymbol};\n \n use super::short_label::ShortLabel;\n \n@@ -36,6 +36,10 @@ pub(crate) trait ToNav {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget;\n }\n \n+pub(crate) trait TryToNav {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget>;\n+}\n+\n impl NavigationTarget {\n     /// When `focus_range` is specified, returns it. otherwise\n     /// returns `full_range`\n@@ -96,26 +100,6 @@ impl NavigationTarget {\n         module.to_nav(db)\n     }\n \n-    pub(crate) fn from_def(\n-        db: &RootDatabase,\n-        module_def: hir::ModuleDef,\n-    ) -> Option<NavigationTarget> {\n-        let nav = match module_def {\n-            hir::ModuleDef::Module(module) => module.to_nav(db),\n-            hir::ModuleDef::Function(it) => it.to_nav(db),\n-            hir::ModuleDef::Adt(it) => it.to_nav(db),\n-            hir::ModuleDef::Const(it) => it.to_nav(db),\n-            hir::ModuleDef::Static(it) => it.to_nav(db),\n-            hir::ModuleDef::EnumVariant(it) => it.to_nav(db),\n-            hir::ModuleDef::Trait(it) => it.to_nav(db),\n-            hir::ModuleDef::TypeAlias(it) => it.to_nav(db),\n-            hir::ModuleDef::BuiltinType(..) => {\n-                return None;\n-            }\n-        };\n-        Some(nav)\n-    }\n-\n     #[cfg(test)]\n     pub(crate) fn assert_match(&self, expected: &str) {\n         let actual = self.debug_render();\n@@ -201,6 +185,36 @@ impl ToNav for FileSymbol {\n     }\n }\n \n+impl TryToNav for NameDefinition {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        match self {\n+            NameDefinition::Macro(it) => Some(it.to_nav(db)),\n+            NameDefinition::StructField(it) => Some(it.to_nav(db)),\n+            NameDefinition::ModuleDef(it) => it.try_to_nav(db),\n+            NameDefinition::SelfType(it) => Some(it.to_nav(db)),\n+            NameDefinition::Local(it) => Some(it.to_nav(db)),\n+            NameDefinition::TypeParam(it) => Some(it.to_nav(db)),\n+        }\n+    }\n+}\n+\n+impl TryToNav for hir::ModuleDef {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let res = match self {\n+            hir::ModuleDef::Module(it) => it.to_nav(db),\n+            hir::ModuleDef::Function(it) => it.to_nav(db),\n+            hir::ModuleDef::Adt(it) => it.to_nav(db),\n+            hir::ModuleDef::EnumVariant(it) => it.to_nav(db),\n+            hir::ModuleDef::Const(it) => it.to_nav(db),\n+            hir::ModuleDef::Static(it) => it.to_nav(db),\n+            hir::ModuleDef::Trait(it) => it.to_nav(db),\n+            hir::ModuleDef::TypeAlias(it) => it.to_nav(db),\n+            hir::ModuleDef::BuiltinType(_) => return None,\n+        };\n+        Some(res)\n+    }\n+}\n+\n pub(crate) trait ToNavFromAst {}\n impl ToNavFromAst for hir::Function {}\n impl ToNavFromAst for hir::Const {}\n@@ -232,15 +246,17 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        let syntax = match &src.value {\n-            ModuleSource::SourceFile(node) => node.syntax(),\n-            ModuleSource::Module(node) => node.syntax(),\n+        let (syntax, focus) = match &src.value {\n+            ModuleSource::SourceFile(node) => (node.syntax(), None),\n+            ModuleSource::Module(node) => {\n+                (node.syntax(), node.name().map(|it| it.syntax().text_range()))\n+            }\n         };\n         let frange = original_range(db, src.with_value(syntax));\n         NavigationTarget::from_syntax(\n             frange.file_id,\n             name,\n-            None,\n+            focus,\n             frange.range,\n             syntax.kind(),\n             None,"}, {"sha": "feff1ec3f694c4ef5294a8e941c3d19db582e0de", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 14, "deletions": 135, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=e91375c763a74ebf3784f2d1df542095eb8a159d", "patch": "@@ -1,18 +1,18 @@\n //! FIXME: write short doc here\n \n use hir::{db::AstDatabase, InFile, SourceBinder};\n-use ra_ide_db::{defs::NameDefinition, symbol_index, RootDatabase};\n+use ra_ide_db::{symbol_index, RootDatabase};\n use ra_syntax::{\n-    ast::{self, DocCommentsOwner},\n+    ast::{self},\n     match_ast, AstNode,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TokenAtOffset,\n+    SyntaxToken, TokenAtOffset,\n };\n \n use crate::{\n-    display::{ShortLabel, ToNav},\n+    display::{ToNav, TryToNav},\n     expand::descend_into_macros,\n-    references::classify_name_ref,\n+    references::{classify_name, classify_name_ref},\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n@@ -74,23 +74,12 @@ pub(crate) fn reference_definition(\n     use self::ReferenceResult::*;\n \n     let name_kind = classify_name_ref(sb, name_ref);\n-    match name_kind {\n-        Some(NameDefinition::Macro(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(NameDefinition::StructField(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(NameDefinition::TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(NameDefinition::Local(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(NameDefinition::ModuleDef(def)) => match NavigationTarget::from_def(sb.db, def) {\n-            Some(nav) => return Exact(nav),\n-            None => return Approximate(vec![]),\n-        },\n-        Some(NameDefinition::SelfType(imp)) => {\n-            // FIXME: ideally, this should point to the type in the impl, and\n-            // not at the whole impl. And goto **type** definition should bring\n-            // us to the actual type\n-            return Exact(imp.to_nav(sb.db));\n-        }\n-        None => {}\n-    };\n+    if let Some(def) = name_kind {\n+        return match def.try_to_nav(sb.db) {\n+            Some(nav) => ReferenceResult::Exact(nav),\n+            None => ReferenceResult::Approximate(Vec::new()),\n+        };\n+    }\n \n     // Fallback index based approach:\n     let navs = symbol_index::index_resolve(sb.db, name_ref.value)\n@@ -104,119 +93,9 @@ fn name_definition(\n     sb: &mut SourceBinder<RootDatabase>,\n     name: InFile<&ast::Name>,\n ) -> Option<Vec<NavigationTarget>> {\n-    let parent = name.value.syntax().parent()?;\n-\n-    if let Some(module) = ast::Module::cast(parent.clone()) {\n-        if module.has_semi() {\n-            let src = name.with_value(module);\n-            if let Some(child_module) = sb.to_def(src) {\n-                let nav = child_module.to_nav(sb.db);\n-                return Some(vec![nav]);\n-            }\n-        }\n-    }\n-\n-    if let Some(nav) = named_target(sb.db, name.with_value(&parent)) {\n-        return Some(vec![nav]);\n-    }\n-\n-    None\n-}\n-\n-fn named_target(db: &RootDatabase, node: InFile<&SyntaxNode>) -> Option<NavigationTarget> {\n-    match_ast! {\n-        match (node.value) {\n-            ast::StructDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::EnumDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::EnumVariant(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::FnDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::TypeAliasDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::ConstDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::StaticDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::TraitDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::RecordFieldDef(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::Module(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    it.short_label(),\n-                ))\n-            },\n-            ast::MacroCall(it) => {\n-                Some(NavigationTarget::from_named(\n-                    db,\n-                    node.with_value(&it),\n-                    it.doc_comment_text(),\n-                    None,\n-                ))\n-            },\n-            _ => None,\n-        }\n-    }\n+    let def = classify_name(sb, name)?;\n+    let nav = def.try_to_nav(sb.db)?;\n+    Some(vec![nav])\n }\n \n #[cfg(test)]"}, {"sha": "aadc2dbcb0e2c28f1dd7f8c85944da07cfcab95d", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91375c763a74ebf3784f2d1df542095eb8a159d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=e91375c763a74ebf3784f2d1df542095eb8a159d", "patch": "@@ -25,7 +25,7 @@ use ra_syntax::{\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TextUnit, TokenAtOffset,\n };\n \n-use crate::{display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n+use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n pub(crate) use self::{\n     classify::{classify_name, classify_name_ref},\n@@ -125,15 +125,7 @@ pub(crate) fn find_all_refs(\n         };\n \n     let RangeInfo { range, info: (name, def) } = find_name(db, &syntax, position, opt_name)?;\n-\n-    let declaration = match def {\n-        NameDefinition::Macro(mac) => mac.to_nav(db),\n-        NameDefinition::StructField(field) => field.to_nav(db),\n-        NameDefinition::ModuleDef(def) => NavigationTarget::from_def(db, def)?,\n-        NameDefinition::SelfType(imp) => imp.to_nav(db),\n-        NameDefinition::Local(local) => local.to_nav(db),\n-        NameDefinition::TypeParam(_) => return None,\n-    };\n+    let declaration = def.try_to_nav(db)?;\n \n     let search_scope = {\n         let base = SearchScope::for_def(&def, db);"}]}