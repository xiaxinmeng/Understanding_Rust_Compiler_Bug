{"sha": "908636f510c03b549a218d9a7b246348e21a4587", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODYzNmY1MTBjMDNiNTQ5YTIxOGQ5YTdiMjQ2MzQ4ZTIxYTQ1ODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-19T16:31:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-19T16:31:40Z"}, "message": "Rollup merge of #64601 - grovesNL:two-backticks, r=jonas-schievink\n\nFix backticks in documentation\n\nFix a few typos in comments/documentation where backticks were doubled-up on one side.", "tree": {"sha": "5d20b03f23a62dc6011adf893967ee9149c2e7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d20b03f23a62dc6011adf893967ee9149c2e7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908636f510c03b549a218d9a7b246348e21a4587", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdg61sCRBK7hj4Ov3rIwAAdHIIABJrDYsB1UYlTxc40WpH6uKt\nA93M6eT8R2RdzhneFe9guQt8hf4v+56D4C97zwu+SpeK5oV0EEPUuxPeTupoypY3\nFud+eJ64mbTmoskE7j5AmQ4sL9GyefuvpnK8IunoUxMWtWryrJGgvi1oqX2SzgJv\n10KFf3syRXtuTJBS/Cx62SEo8nWVn4pt+tIAVJJXPUJMr68u1rPEiDRZd/oFQlkd\nBO6DX1tZP5WJpZtin63jfAqxJLww6xyQ+u8e1ZaOnZhgheEJOoMqaboMwvHTf7E5\n41gCq/VXGU8J7P1QnZ2XWCq2g9/iLndg1EiufL4/OThwZXgbaqEGgwyvWZv8qsA=\n=0kXN\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d20b03f23a62dc6011adf893967ee9149c2e7a2\nparent 3c286826aab33469e18b43d84ade32e35cdf65c1\nparent 37bafeafe73cff935bb444b6736a958a9a752669\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568910700 +0200\ncommitter GitHub <noreply@github.com> 1568910700 +0200\n\nRollup merge of #64601 - grovesNL:two-backticks, r=jonas-schievink\n\nFix backticks in documentation\n\nFix a few typos in comments/documentation where backticks were doubled-up on one side.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908636f510c03b549a218d9a7b246348e21a4587", "html_url": "https://github.com/rust-lang/rust/commit/908636f510c03b549a218d9a7b246348e21a4587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908636f510c03b549a218d9a7b246348e21a4587/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c286826aab33469e18b43d84ade32e35cdf65c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c286826aab33469e18b43d84ade32e35cdf65c1", "html_url": "https://github.com/rust-lang/rust/commit/3c286826aab33469e18b43d84ade32e35cdf65c1"}, {"sha": "37bafeafe73cff935bb444b6736a958a9a752669", "url": "https://api.github.com/repos/rust-lang/rust/commits/37bafeafe73cff935bb444b6736a958a9a752669", "html_url": "https://github.com/rust-lang/rust/commit/37bafeafe73cff935bb444b6736a958a9a752669"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "87470140e3148dd19dc04e409ee4f2bdbae6d013", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=908636f510c03b549a218d9a7b246348e21a4587", "patch": "@@ -1136,7 +1136,7 @@ fn resolve_local<'tcx>(\n     // Rule A. `let (ref x, ref y) = (foo().x, 44)`. The rvalue `(22, 44)`\n     // would have an extended lifetime, but not `foo()`.\n     //\n-    // Rule B. `let x = &foo().x`. The rvalue ``foo()` would have extended\n+    // Rule B. `let x = &foo().x`. The rvalue `foo()` would have extended\n     // lifetime.\n     //\n     // In some cases, multiple rules may apply (though not to the same"}, {"sha": "c20e75868895991ac0871d418955a43f5c2204e6", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=908636f510c03b549a218d9a7b246348e21a4587", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for CacheDecoder<'a, 'tcx> {\n \n // Both the `CrateNum` and the `DefIndex` of a `DefId` can change in between two\n // compilation sessions. We use the `DefPathHash`, which is stable across\n-// sessions, to map the old DefId`` to the new one.\n+// sessions, to map the old `DefId` to the new one.\n impl<'a, 'tcx> SpecializedDecoder<DefId> for CacheDecoder<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefId, Self::Error> {"}, {"sha": "7d0d2392945e5e6700e91e7141c9acd1bdcffa01", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908636f510c03b549a218d9a7b246348e21a4587/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=908636f510c03b549a218d9a7b246348e21a4587", "patch": "@@ -3,7 +3,7 @@\n //! of source parsed during crate parsing (typically files, in-memory strings,\n //! or various bits of macro expansion) cover a continuous range of bytes in the\n //! `SourceMap` and are represented by `SourceFile`s. Byte positions are stored in\n-//! `Span`` and used pervasively in the compiler. They are absolute positions\n+//! `Span` and used pervasively in the compiler. They are absolute positions\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n@@ -645,7 +645,7 @@ impl SourceMap {\n     }\n \n     /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`\n-    /// ``c`.\n+    /// `c`.\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n         match self.span_to_snippet(sp) {\n             Ok(snippet) => {"}, {"sha": "6d37d1ded640077c3c57dcca83455908ab895b03", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/908636f510c03b549a218d9a7b246348e21a4587/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908636f510c03b549a218d9a7b246348e21a4587/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs?ref=908636f510c03b549a218d9a7b246348e21a4587", "patch": "@@ -31,7 +31,7 @@ impl <'a> SpanlessHash<'a> {\n                 //\n                 // Not okay without two-phase borrows: the implicit\n                 // `&mut self` of the receiver is evaluated first, and\n-                // that conflicts with the `self.cx`` access during\n+                // that conflicts with the `self.cx` access during\n                 // argument evaluation, as demonstrated in `fn demo`\n                 // above.\n                 //"}]}