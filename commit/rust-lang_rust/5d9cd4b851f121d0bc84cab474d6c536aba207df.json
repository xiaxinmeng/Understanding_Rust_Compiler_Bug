{"sha": "5d9cd4b851f121d0bc84cab474d6c536aba207df", "node_id": "C_kwDOAAsO6NoAKDVkOWNkNGI4NTFmMTIxZDBiYzg0Y2FiNDc0ZDZjNTM2YWJhMjA3ZGY", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-26T04:04:03Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Suggest `i += 1` when we see `i++` or `++i`", "tree": {"sha": "b9accf1f415cbdfafb461adfe4d982e9fd354768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9accf1f415cbdfafb461adfe4d982e9fd354768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9cd4b851f121d0bc84cab474d6c536aba207df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9cd4b851f121d0bc84cab474d6c536aba207df", "html_url": "https://github.com/rust-lang/rust/commit/5d9cd4b851f121d0bc84cab474d6c536aba207df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9cd4b851f121d0bc84cab474d6c536aba207df/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6970f88db3ac2a9cefa9c585228291ae1f18fb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/6970f88db3ac2a9cefa9c585228291ae1f18fb04", "html_url": "https://github.com/rust-lang/rust/commit/6970f88db3ac2a9cefa9c585228291ae1f18fb04"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "0361f7063fcedecf476fbb7de8ee866073fb30b8", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5d9cd4b851f121d0bc84cab474d6c536aba207df/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9cd4b851f121d0bc84cab474d6c536aba207df/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=5d9cd4b851f121d0bc84cab474d6c536aba207df", "patch": "@@ -1882,6 +1882,49 @@ impl<'a> Parser<'a> {\n             self.sess.expr_parentheses_needed(&mut err, *sp);\n         }\n         err.span_label(span, \"expected expression\");\n+        if self.prev_token.kind == TokenKind::BinOp(token::Plus)\n+            && self.token.kind == TokenKind::BinOp(token::Plus)\n+            && self.look_ahead(1, |t| !t.is_lit())\n+        {\n+            let span = self.prev_token.span.to(self.token.span);\n+            err.note(\"Rust has no dedicated increment operator\");\n+            err.span_suggestion_verbose(\n+                span,\n+                \"try using `+= 1` instead\",\n+                \" += 1\".into(),\n+                Applicability::Unspecified,\n+            );\n+        } else if self.token.kind == TokenKind::BinOp(token::Plus)\n+            && self.look_ahead(1, |t| t.kind == TokenKind::BinOp(token::Plus))\n+            && self.look_ahead(2, |t| !t.is_lit())\n+        {\n+            let target_span = self.look_ahead(2, |t| t.span);\n+            let left_brace_span = target_span.shrink_to_lo();\n+            let pre_span = self.token.span.to(self.look_ahead(1, |t| t.span));\n+            let post_span = target_span.shrink_to_hi();\n+\n+            err.note(\"Rust has no dedicated increment operator\");\n+\n+            if self.prev_token.kind == TokenKind::Semi {\n+                err.multipart_suggestion(\n+                    \"try using `+= 1` instead\",\n+                    vec![(pre_span, String::new()), (post_span, \" += 1\".into())],\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if let Ok(target_snippet) = self.span_to_snippet(target_span) {\n+                err.multipart_suggestion(\n+                    \"try using `+= 1` instead\",\n+                    vec![\n+                        (left_brace_span, \"{ \".to_string()),\n+                        (pre_span, String::new()),\n+                        (post_span, format!(\" += 1; {} }}\", target_snippet)),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                err.span_help(pre_span.to(target_span), \"try using `+= 1` instead\");\n+            }\n+        }\n         err\n     }\n "}, {"sha": "77a94b65f1f0e54b291d7be44009614c483aeee6", "filename": "src/test/ui/parser/increment.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5d9cd4b851f121d0bc84cab474d6c536aba207df/src%2Ftest%2Fui%2Fparser%2Fincrement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9cd4b851f121d0bc84cab474d6c536aba207df/src%2Ftest%2Fui%2Fparser%2Fincrement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement.rs?ref=5d9cd4b851f121d0bc84cab474d6c536aba207df", "patch": "@@ -0,0 +1,27 @@\n+fn post_regular() {\n+    let i = 0;\n+    i++; //~ ERROR\n+}\n+\n+fn post_while() {\n+    let i = 0;\n+    while i++ < 5 {\n+        //~^ ERROR\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+fn pre_regular() {\n+    let i = 0;\n+    ++i; //~ ERROR\n+}\n+\n+fn pre_while() {\n+    let i = 0;\n+    while ++i < 5 {\n+        //~^ ERROR\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "667956cdd7d4015711a983439bbc1203d7f01639", "filename": "src/test/ui/parser/increment.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5d9cd4b851f121d0bc84cab474d6c536aba207df/src%2Ftest%2Fui%2Fparser%2Fincrement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d9cd4b851f121d0bc84cab474d6c536aba207df/src%2Ftest%2Fui%2Fparser%2Fincrement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement.stderr?ref=5d9cd4b851f121d0bc84cab474d6c536aba207df", "patch": "@@ -0,0 +1,52 @@\n+error: expected expression, found `+`\n+  --> $DIR/increment.rs:3:7\n+   |\n+LL |     i++;\n+   |       ^ expected expression\n+   |\n+   = note: Rust has no dedicated increment operator\n+help: try using `+= 1` instead\n+   |\n+LL |     i += 1;\n+   |       ~~~~\n+\n+error: expected expression, found `+`\n+  --> $DIR/increment.rs:8:13\n+   |\n+LL |     while i++ < 5 {\n+   |             ^ expected expression\n+   |\n+   = note: Rust has no dedicated increment operator\n+help: try using `+= 1` instead\n+   |\n+LL |     while i += 1 < 5 {\n+   |             ~~~~\n+\n+error: expected expression, found `+`\n+  --> $DIR/increment.rs:16:5\n+   |\n+LL |     ++i;\n+   |     ^ expected expression\n+   |\n+   = note: Rust has no dedicated increment operator\n+help: try using `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   | \n+\n+error: expected expression, found `+`\n+  --> $DIR/increment.rs:21:11\n+   |\n+LL |     while ++i < 5 {\n+   |           ^ expected expression\n+   |\n+   = note: Rust has no dedicated increment operator\n+help: try using `+= 1` instead\n+   |\n+LL -     while ++i < 5 {\n+LL +     while { i += 1; i } < 5 {\n+   | \n+\n+error: aborting due to 4 previous errors\n+"}]}