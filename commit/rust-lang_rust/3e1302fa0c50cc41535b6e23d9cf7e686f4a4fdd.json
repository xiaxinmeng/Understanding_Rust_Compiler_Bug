{"sha": "3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "node_id": "C_kwDOAAsO6NoAKDNlMTMwMmZhMGM1MGNjNDE1MzViNmUyM2Q5Y2Y3ZTY4NmY0YTRmZGQ", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-22T12:04:13Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-22T12:04:13Z"}, "message": "[`match_wild_err_arm`]: do not lint in const contexts", "tree": {"sha": "f02fd411cc507f8321a114be9cf07d4b4881f0a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02fd411cc507f8321a114be9cf07d4b4881f0a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "html_url": "https://github.com/rust-lang/rust/commit/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "html_url": "https://github.com/rust-lang/rust/commit/435a8ad86c7a33bd7ffb91c59039943408d3b6aa"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "6424ac31d9f68d69e38fbe20d57af4861c00ed38", "filename": "clippy_lints/src/matches/match_wild_err_arm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs?ref=3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "patch": "@@ -2,14 +2,19 @@ use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::macros::{is_panic, root_macro_call};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::is_local_used;\n-use clippy_utils::{is_wild, peel_blocks_with_stmt};\n+use clippy_utils::{in_constant, is_wild, peel_blocks_with_stmt};\n use rustc_hir::{Arm, Expr, PatKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::{kw, sym};\n \n use super::MATCH_WILD_ERR_ARM;\n \n pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'tcx>]) {\n+    // `unwrap`/`expect` is not (yet) const, so we want to allow this in const contexts for now\n+    if in_constant(cx, ex.hir_id) {\n+        return;\n+    }\n+\n     let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     if is_type_diagnostic_item(cx, ex_ty, sym::Result) {\n         for arm in arms {"}, {"sha": "5a552e4ae51a5419904f9ee76fbd9621278bb548", "filename": "tests/ui/match_wild_err_arm.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/tests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/tests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.rs?ref=3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "patch": "@@ -1,7 +1,20 @@\n #![feature(exclusive_range_pattern)]\n-#![allow(clippy::match_same_arms)]\n+#![allow(clippy::match_same_arms, dead_code)]\n #![warn(clippy::match_wild_err_arm)]\n \n+fn issue_10635() {\n+    enum Error {\n+        A,\n+        B,\n+    }\n+\n+    // Don't trigger in const contexts. Const unwrap is not yet stable\n+    const X: () = match Ok::<_, Error>(()) {\n+        Ok(x) => x,\n+        Err(_) => panic!(),\n+    };\n+}\n+\n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n "}, {"sha": "a9f54feacdb5872bc8a2b396b401facbc95b207d", "filename": "tests/ui/match_wild_err_arm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/tests%2Fui%2Fmatch_wild_err_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd/tests%2Fui%2Fmatch_wild_err_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.stderr?ref=3e1302fa0c50cc41535b6e23d9cf7e686f4a4fdd", "patch": "@@ -1,5 +1,5 @@\n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:11:9\n+  --> $DIR/match_wild_err_arm.rs:24:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -8,23 +8,23 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:17:9\n+  --> $DIR/match_wild_err_arm.rs:30:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:23:9\n+  --> $DIR/match_wild_err_arm.rs:36:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:31:9\n+  --> $DIR/match_wild_err_arm.rs:44:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^"}]}