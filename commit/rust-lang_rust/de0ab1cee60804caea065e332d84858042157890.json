{"sha": "de0ab1cee60804caea065e332d84858042157890", "node_id": "C_kwDOAAsO6NoAKGRlMGFiMWNlZTYwODA0Y2FlYTA2NWUzMzJkODQ4NTgwNDIxNTc4OTA", "commit": {"author": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-10-23T21:41:36Z"}, "committer": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-11-05T22:56:21Z"}, "message": "Merge apple_base and apple_sdk_base into one module", "tree": {"sha": "6cacb14224830a47bc0d5a0e6dfdf2dea46dfc9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cacb14224830a47bc0d5a0e6dfdf2dea46dfc9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0ab1cee60804caea065e332d84858042157890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0ab1cee60804caea065e332d84858042157890", "html_url": "https://github.com/rust-lang/rust/commit/de0ab1cee60804caea065e332d84858042157890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0ab1cee60804caea065e332d84858042157890/comments", "author": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160b19429523ea44c4c3b7cad4233b2a35f58b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "html_url": "https://github.com/rust-lang/rust/commit/160b19429523ea44c4c3b7cad4233b2a35f58b8f"}], "stats": {"total": 270, "additions": 134, "deletions": 136}, "files": [{"sha": "13a13f2f073c88de135aa8f63c19aa35a8075e65", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,20 +1,21 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"arm64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n+    let arch = Arch::Arm64;\n+    let mut base = opts(\"macos\", arch);\n     base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(arch);\n+    let llvm_target = macos_llvm_target(arch.target_name());\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "1f9ac7ce59b06de9c8951a167a5cd15321066417", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,13 +1,13 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     // Clang automatically chooses a more specific target based on\n     // IPHONEOS_DEPLOYMENT_TARGET.\n     // This is required for the target to pick the right\n     // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_llvm_target(arch);\n+    let arch = Arch::Arm64;\n+    let llvm_target = ios_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),\n@@ -30,7 +30,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", Arch::Arm64)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "c2106b456becf4fe354eb34cfcdfe718c4f5cfc5", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "097b92f2e8fdba564b398f43986e8477b42bf91f", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,15 +1,15 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Arm64_sim);\n+    let arch = Arch::Arm64_sim;\n+    let base = opts(\"ios\", arch);\n \n     // Clang automatically chooses a more specific target based on\n     // IPHONEOS_DEPLOYMENT_TARGET.\n     // This is required for the simulator target to pick the right\n     // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n+    let llvm_target = ios_sim_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "8cf24e4bf1f6ca555fb0de2f0c22842cacfc794e", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "b6c8cd46c050cf35d6753bd55c5e93917f78e627", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,15 +1,15 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Arm64_sim);\n+    let arch = Arch::Arm64_sim;\n+    let base = opts(\"watchos\", arch);\n \n     // Clang automatically chooses a more specific target based on\n     // WATCHOS_DEPLOYMENT_TARGET.\n     // This is required for the simulator target to pick the right\n     // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n+    let llvm_target = watchos_sim_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "eb7f457d60bc2a69ec3a48415d17fd72b9ef6434", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 86, "deletions": 12, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -3,6 +3,75 @@ use std::{borrow::Cow, env};\n use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n \n+#[cfg(test)]\n+#[path = \"apple/tests.rs\"]\n+mod tests;\n+\n+use Arch::*;\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum Arch {\n+    Armv7,\n+    Armv7k,\n+    Armv7s,\n+    Arm64,\n+    Arm64_32,\n+    I386,\n+    X86_64,\n+    X86_64_sim,\n+    X86_64_macabi,\n+    Arm64_macabi,\n+    Arm64_sim,\n+}\n+\n+impl Arch {\n+    pub fn target_name(self) -> &'static str {\n+        match self {\n+            Armv7 => \"armv7\",\n+            Armv7k => \"armv7k\",\n+            Armv7s => \"armv7s\",\n+            Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n+            Arm64_32 => \"arm64_32\",\n+            I386 => \"i386\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        }\n+    }\n+\n+    fn target_abi(self) -> &'static str {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n+            X86_64_macabi | Arm64_macabi => \"macabi\",\n+            // x86_64-apple-ios is a simulator target, even though it isn't\n+            // declared that way in the target like the other ones...\n+            Arm64_sim | X86_64_sim => \"sim\",\n+        }\n+    }\n+\n+    fn target_cpu(self) -> &'static str {\n+        match self {\n+            Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n+            Armv7k => \"cortex-a8\",\n+            Armv7s => \"cortex-a9\",\n+            Arm64 => \"apple-a7\",\n+            Arm64_32 => \"apple-s4\",\n+            I386 => \"yonah\",\n+            X86_64 | X86_64_sim => \"core2\",\n+            X86_64_macabi => \"core2\",\n+            Arm64_macabi => \"apple-a12\",\n+            Arm64_sim => \"apple-a12\",\n+        }\n+    }\n+\n+    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | X86_64_sim | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n+        }\n+    }\n+}\n+\n fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n         \"sim\" => format!(\"{}-simulator\", os).into(),\n@@ -35,30 +104,35 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     args\n }\n \n-pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOptions {\n-    // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n+pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n+    // Static TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n     // 10.7+, but there is a standard environment variable,\n     // MACOSX_DEPLOYMENT_TARGET, which is used to signal targeting older\n     // versions of macOS. For example compiling on 10.10 with\n     // MACOSX_DEPLOYMENT_TARGET set to 10.6 will cause the linker to generate\n-    // warnings about the usage of ELF TLS.\n+    // warnings about the usage of static TLS.\n     //\n-    // Here we detect what version is being requested, defaulting to 10.7. ELF\n+    // Here we detect what version is being requested, defaulting to 10.7. Static\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = os == \"macos\" && macos_deployment_target(\"x86_64\") >= (10, 7);\n+\n+    let abi = arch.target_abi();\n \n     TargetOptions {\n+        abi: abi.into(),\n         os: os.into(),\n+        cpu: arch.target_cpu().into(),\n+        link_env_remove: arch.link_env_remove(),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n-        pre_link_args: pre_link_args(os, arch, abi),\n+        pre_link_args: pre_link_args(os, arch.target_name(), abi),\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n         default_dwarf_version: 2,\n@@ -142,25 +216,25 @@ fn ios_deployment_target() -> (u32, u32) {\n     deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n-pub fn ios_llvm_target(arch: &str) -> String {\n+pub fn ios_llvm_target(arch: Arch) -> String {\n     // Modern iOS tooling extracts information about deployment target\n     // from LC_BUILD_VERSION. This load command will only be emitted when\n     // we build with a version specific `llvm_target`, with the version\n     // set high enough. Luckily one LC_BUILD_VERSION is enough, for Xcode\n     // to pick it up (since std and core are still built with the fallback\n     // of version 7.0 and hence emit the old LC_IPHONE_MIN_VERSION).\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0\", arch.target_name(), major, minor)\n }\n \n fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn ios_sim_llvm_target(arch: &str) -> String {\n+pub fn ios_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0-simulator\", arch.target_name(), major, minor)\n }\n \n fn tvos_deployment_target() -> (u32, u32) {\n@@ -181,7 +255,7 @@ fn watchos_lld_platform_version() -> String {\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn watchos_sim_llvm_target(arch: &str) -> String {\n+pub fn watchos_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = watchos_deployment_target();\n-    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch.target_name(), major, minor)\n }"}, {"sha": "148031b1569768eca63e872d67ae5f0ff00906da", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,81 +0,0 @@\n-use crate::spec::{cvs, TargetOptions};\n-use std::borrow::Cow;\n-\n-#[cfg(test)]\n-#[path = \"apple/tests.rs\"]\n-mod tests;\n-\n-use Arch::*;\n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum Arch {\n-    Armv7,\n-    Armv7k,\n-    Armv7s,\n-    Arm64,\n-    Arm64_32,\n-    I386,\n-    #[allow(dead_code)] // Some targets don't use this enum...\n-    X86_64,\n-    X86_64_sim,\n-    X86_64_macabi,\n-    Arm64_macabi,\n-    Arm64_sim,\n-}\n-\n-fn target_arch_name(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"armv7\",\n-        Armv7k => \"armv7k\",\n-        Armv7s => \"armv7s\",\n-        Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n-        Arm64_32 => \"arm64_32\",\n-        I386 => \"i386\",\n-        X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n-    }\n-}\n-\n-fn target_abi(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n-        X86_64_macabi | Arm64_macabi => \"macabi\",\n-        // x86_64-apple-ios is a simulator target, even though it isn't\n-        // declared that way in the target like the other ones...\n-        Arm64_sim | X86_64_sim => \"sim\",\n-    }\n-}\n-\n-fn target_cpu(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n-        Armv7k => \"cortex-a8\",\n-        Armv7s => \"cortex-a9\",\n-        Arm64 => \"apple-a7\",\n-        Arm64_32 => \"apple-s4\",\n-        I386 => \"yonah\",\n-        X86_64 | X86_64_sim => \"core2\",\n-        X86_64_macabi => \"core2\",\n-        Arm64_macabi => \"apple-a12\",\n-        Arm64_sim => \"apple-a12\",\n-    }\n-}\n-\n-fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | X86_64_sim | Arm64_sim => {\n-            cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-        }\n-        X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-    }\n-}\n-\n-pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n-    let abi = target_abi(arch);\n-    TargetOptions {\n-        abi: abi.into(),\n-        cpu: target_cpu(arch).into(),\n-        link_env_remove: link_env_remove(arch),\n-        has_thread_local: false,\n-        ..super::apple_base::opts(os, target_arch_name(arch), abi)\n-    }\n-}"}, {"sha": "2cf2cbc7510009dec797f7137eabca3bb741bf4e", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "5167af3e7f22c43311969f61cfb957a7caf509ba", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,8 +1,9 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let llvm_target = super::apple_base::ios_llvm_target(\"armv7\");\n+    let arch = Arch::Armv7;\n+    let llvm_target = super::apple_base::ios_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),\n@@ -12,7 +13,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "7e9c9b5c26878a55cdf2ec6632f0989e4ae63fb9", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "30851564523bc8967471e14f2151bce0bd8029ac", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "21635642c18a33d542edeabd4e2c0ebd1290190a", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,9 +1,10 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::I386);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"i386\");\n+    let arch = Arch::I386;\n+    let base = opts(\"ios\", arch);\n+    let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "84dae68877dfdb7129effb8207c5ed614d847dd0", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,20 +1,21 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     // ld64 only understand i386 and not i686\n-    let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n+    let mut base = opts(\"macos\", Arch::I386);\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n     let arch = \"i686\";\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n+    let llvm_target = macos_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "9baf7655595bfd5c68621f52220fc83ec5c2b27d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -59,7 +59,6 @@ pub mod crt_objects;\n \n mod android_base;\n mod apple_base;\n-mod apple_sdk_base;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;"}, {"sha": "6112ef7ec1f93a1c4c23f48c97a74af6ed37660f", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,29 +1,30 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"x86_64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n+    let arch = Arch::X86_64;\n+    let mut base = opts(\"macos\", arch);\n     base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n+    let llvm_target = macos_llvm_target(arch.target_name());\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: arch.into(),\n+        arch: \"x86_84\".into(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "032ba0763b4c54cbbc9c76bc8a447ff28c338e92", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,9 +1,10 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::X86_64_sim);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"x86_64\");\n+    let arch = Arch::X86_64_sim;\n+    let base = opts(\"ios\", arch);\n+    let llvm_target = ios_sim_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "6647c1d29217e650ede2b2cc110d86c946bab00e", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "cb70717b3c42fe150bebd327b50065cd52ccaa62", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "03ea66499db1d3ed3e9728e5ad0fe2ef78d84d75", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0ab1cee60804caea065e332d84858042157890/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=de0ab1cee60804caea065e332d84858042157890", "patch": "@@ -1,10 +1,10 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::X86_64_sim;\n     let base = opts(\"watchos\", Arch::X86_64_sim);\n \n-    let arch = \"x86_64\";\n     let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n \n     Target {"}]}