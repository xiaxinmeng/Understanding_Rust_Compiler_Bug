{"sha": "a6cd7a2e085eeaf7d928a463a76126cd6542b314", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2Q3YTJlMDg1ZWVhZjdkOTI4YTQ2M2E3NjEyNmNkNjU0MmIzMTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T13:07:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T13:07:40Z"}, "message": "Also move some compile-fail tests to fullmir-only", "tree": {"sha": "4d301c5ca6e3ee20a9ce3fc89931cdc8803b969a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d301c5ca6e3ee20a9ce3fc89931cdc8803b969a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6cd7a2e085eeaf7d928a463a76126cd6542b314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cd7a2e085eeaf7d928a463a76126cd6542b314", "html_url": "https://github.com/rust-lang/rust/commit/a6cd7a2e085eeaf7d928a463a76126cd6542b314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6cd7a2e085eeaf7d928a463a76126cd6542b314/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b001b5531b46056fe36af053420c922d3d763e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b001b5531b46056fe36af053420c922d3d763e71", "html_url": "https://github.com/rust-lang/rust/commit/b001b5531b46056fe36af053420c922d3d763e71"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "f8b6f7f4aec13331b47a245ee6b7cba2d73c9083", "filename": "tests/compile-fail-fullmir/undefined_byte_read.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a6cd7a2e085eeaf7d928a463a76126cd6542b314/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cd7a2e085eeaf7d928a463a76126cd6542b314/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs?ref=a6cd7a2e085eeaf7d928a463a76126cd6542b314", "previous_filename": "tests/compile-fail/undefined_byte_read.rs"}, {"sha": "56435bbc4ac36461087309cb90dc465fc31ceba0", "filename": "tests/compiletest.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a6cd7a2e085eeaf7d928a463a76126cd6542b314/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cd7a2e085eeaf7d928a463a76126cd6542b314/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=a6cd7a2e085eeaf7d928a463a76126cd6542b314", "patch": "@@ -3,19 +3,24 @@ extern crate compiletest_rs as compiletest;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n-fn compile_fail(sysroot: &Path) {\n-    let flags = format!(\"--sysroot {} -Dwarnings\", sysroot.to_str().expect(\"non utf8 path\"));\n-    for_all_targets(sysroot, |target| {\n-        let mut config = compiletest::default_config();\n-        config.host_rustcflags = Some(flags.clone());\n-        config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n-        config.run_lib_path = Path::new(sysroot).join(\"lib\").join(\"rustlib\").join(&target).join(\"lib\");\n-        config.rustc_path = \"target/debug/miri\".into();\n-        config.src_base = PathBuf::from(\"tests/compile-fail\".to_string());\n-        config.target = target.to_owned();\n-        config.target_rustcflags = Some(flags.clone());\n-        compiletest::run_tests(&config);\n-    });\n+fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n+    let mut config = compiletest::default_config();\n+    config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n+    config.rustc_path = \"target/debug/miri\".into();\n+    if fullmir {\n+        if host != target {\n+            // skip fullmir on nonhost\n+            return;\n+        }\n+        let sysroot = Path::new(&std::env::var(\"HOME\").unwrap()).join(\".xargo\").join(\"HOST\");\n+        config.target_rustcflags = Some(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n+        config.src_base = PathBuf::from(path.to_string());\n+    } else {\n+        config.target_rustcflags = Some(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n+        config.src_base = PathBuf::from(path.to_string());\n+    }\n+    config.target = target.to_owned();\n+    compiletest::run_tests(&config);\n }\n \n fn run_pass() {\n@@ -35,6 +40,10 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool) {\n     config.host = host.to_owned();\n     config.rustc_path = PathBuf::from(\"target/debug/miri\");\n     if fullmir {\n+        if host != target {\n+            // skip fullmir on nonhost\n+            return;\n+        }\n         let sysroot = Path::new(&std::env::var(\"HOME\").unwrap()).join(\".xargo\").join(\"HOST\");\n         config.target_rustcflags = Some(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n     }\n@@ -203,9 +212,10 @@ fn compile_test() {\n         run_pass();\n         for_all_targets(sysroot, |target| {\n             miri_pass(\"tests/run-pass\", &target, host, false);\n+            compile_fail(sysroot, \"tests/compile-fail\", &target, host, false);\n         });\n         miri_pass(\"tests/run-pass-fullmir\", host, host, true);\n-        compile_fail(sysroot);\n+        compile_fail(sysroot, \"tests/compile-fail-fullmir\", host, host, true);\n     }\n }\n "}]}