{"sha": "224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "node_id": "C_kwDOAAsO6NoAKDIyNGYxYzkzOGZiNjA2YzA2M2U1YjliNzgxN2M1MWJiZGViNmRiY2E", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-06-23T01:57:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T01:57:46Z"}, "message": "Merge pull request #5405 from calebcartwright/subtree-sync-2022-06-22\n\nSubtree sync 2022 06 22", "tree": {"sha": "9459e49c6e0c790e03798e54885e1dff1533b3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9459e49c6e0c790e03798e54885e1dff1533b3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJis8iaCRBK7hj4Ov3rIwAAhQkIAI3vtVvVyBLaFKLpYsJ1xH26\nkyHU17KySIAX+emV+piE6NZlTOY06OhDFlBSi9xK+L39T7lDF1eLstXuOeusWAwT\nX7R8rA0phhnC0XAFlSiSpGyVXGWvbQKzQnG820oUDX40p4S39Ld5YqD5Nenn7s19\nACghee2IOneyRRRyRs5te+NOy2bwnbQUBVf9uy7rNtm7KKKoGluGcAjjsvBexs14\nSWrfrJAvO4YYunluaG/4wsVqwPYOrnKLkuLaOdWhgWj2qeuN3E/Q3VhC0U8spyEV\nnuKlYiQB46nTHrcgINY+mZv3yL0yjMahsnr3ra1D6JtRlV3cuhjlpdgGrLt8RZk=\n=exKS\n-----END PGP SIGNATURE-----\n", "payload": "tree 9459e49c6e0c790e03798e54885e1dff1533b3d8\nparent 08105e80b7c48782cfd7acbf3695c7f14c839cfd\nparent dc2d86dec3c55b63ab80d193fb6139a6762b2012\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1655949466 -0500\ncommitter GitHub <noreply@github.com> 1655949466 -0500\n\nMerge pull request #5405 from calebcartwright/subtree-sync-2022-06-22\n\nSubtree sync 2022 06 22"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "html_url": "https://github.com/rust-lang/rust/commit/224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/224f1c938fb606c063e5b9b7817c51bbdeb6dbca/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08105e80b7c48782cfd7acbf3695c7f14c839cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/08105e80b7c48782cfd7acbf3695c7f14c839cfd", "html_url": "https://github.com/rust-lang/rust/commit/08105e80b7c48782cfd7acbf3695c7f14c839cfd"}, {"sha": "dc2d86dec3c55b63ab80d193fb6139a6762b2012", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2d86dec3c55b63ab80d193fb6139a6762b2012", "html_url": "https://github.com/rust-lang/rust/commit/dc2d86dec3c55b63ab80d193fb6139a6762b2012"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2640a9e0ecc286cd9c0e6e020e1207ffe17bf8e1", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/224f1c938fb606c063e5b9b7817c51bbdeb6dbca/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/224f1c938fb606c063e5b9b7817c51bbdeb6dbca/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-06\"\n+channel = \"nightly-2022-06-21\"\n components = [\"rustc-dev\"]"}, {"sha": "23db5421910365de9693434cc0eccb1926578954", "filename": "src/parse/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/224f1c938fb606c063e5b9b7817c51bbdeb6dbca/src%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224f1c938fb606c063e5b9b7817c51bbdeb6dbca/src%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fsession.rs?ref=224f1c938fb606c063e5b9b7817c51bbdeb6dbca", "patch": "@@ -433,7 +433,7 @@ mod tests {\n                 Some(ignore_list),\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n-            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n+            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n             assert_eq!(num_emitted_errors.load(Ordering::Acquire), 0);\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), true);\n@@ -457,7 +457,7 @@ mod tests {\n                 None,\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n-            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n+            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n             assert_eq!(num_emitted_errors.load(Ordering::Acquire), 1);\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n@@ -494,8 +494,8 @@ mod tests {\n             );\n             let bar_span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n             let foo_span = MultiSpan::from_span(mk_sp(BytePos(21), BytePos(22)));\n-            let bar_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(bar_span));\n-            let foo_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(foo_span));\n+            let bar_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(bar_span));\n+            let foo_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(foo_span));\n             let fatal_diagnostic = build_diagnostic(DiagnosticLevel::Fatal, None);\n             emitter.emit_diagnostic(&bar_diagnostic);\n             emitter.emit_diagnostic(&foo_diagnostic);"}]}