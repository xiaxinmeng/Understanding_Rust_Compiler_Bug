{"sha": "bb2e5308b77e5d115df17411aaa2dd26be171b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMmU1MzA4Yjc3ZTVkMTE1ZGYxNzQxMWFhYTJkZDI2YmUxNzFiMGE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-12T04:20:52Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-12T04:20:52Z"}, "message": "missing match arm add test cases to demonstrate enum tuple struct with ellipsis behavior", "tree": {"sha": "dad40a23c15f1009cfdd5fb2190ee7e7f14a038d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad40a23c15f1009cfdd5fb2190ee7e7f14a038d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2e5308b77e5d115df17411aaa2dd26be171b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2e5308b77e5d115df17411aaa2dd26be171b0a", "html_url": "https://github.com/rust-lang/rust/commit/bb2e5308b77e5d115df17411aaa2dd26be171b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2e5308b77e5d115df17411aaa2dd26be171b0a/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59179ac2d0894dc45d614242816665b9bd6ef8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59179ac2d0894dc45d614242816665b9bd6ef8a", "html_url": "https://github.com/rust-lang/rust/commit/a59179ac2d0894dc45d614242816665b9bd6ef8a"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "c482cf6190ad130e03a97648a4c942e9cb27a9f6", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bb2e5308b77e5d115df17411aaa2dd26be171b0a/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2e5308b77e5d115df17411aaa2dd26be171b0a/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=bb2e5308b77e5d115df17411aaa2dd26be171b0a", "patch": "@@ -1484,6 +1484,45 @@ mod tests {\n \n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn enum_tuple_partial_ellipsis_no_diagnostic() {\n+        let content = r\"\n+            enum Either {\n+                A(bool, bool, bool, bool),\n+                B,\n+            }\n+            fn test_fn() {\n+                match Either::B {\n+                    Either::A(true, .., true) => {},\n+                    Either::A(true, .., false) => {},\n+                    Either::A(false, .., true) => {},\n+                    Either::A(false, .., false) => {},\n+                    Either::B => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn enum_tuple_ellipsis_no_diagnostic() {\n+        let content = r\"\n+            enum Either {\n+                A(bool, bool, bool, bool),\n+                B,\n+            }\n+            fn test_fn() {\n+                match Either::B {\n+                    Either::A(..) => {},\n+                    Either::B => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n }\n \n #[cfg(test)]\n@@ -1628,4 +1667,29 @@ mod false_negatives {\n         // See comments on `tuple_of_bools_with_ellipsis_at_end_missing_arm`.\n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn enum_tuple_partial_ellipsis_missing_arm() {\n+        let content = r\"\n+            enum Either {\n+                A(bool, bool, bool, bool),\n+                B,\n+            }\n+            fn test_fn() {\n+                match Either::B {\n+                    Either::A(true, .., true) => {},\n+                    Either::A(true, .., false) => {},\n+                    Either::A(false, .., false) => {},\n+                    Either::B => {},\n+                }\n+            }\n+        \";\n+\n+        // This is a false negative.\n+        // The `..` pattern is currently lowered to a single `Pat::Wild`\n+        // no matter how many fields the `..` pattern is covering. This\n+        // causes us to return a `MatchCheckErr::MalformedMatchArm` in\n+        // `Pat::specialize_constructor`.\n+        check_no_diagnostic(content);\n+    }\n }"}]}