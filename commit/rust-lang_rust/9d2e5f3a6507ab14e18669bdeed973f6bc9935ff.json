{"sha": "9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMmU1ZjNhNjUwN2FiMTRlMTg2NjliZGVlZDk3M2Y2YmM5OTM1ZmY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-12T17:28:43Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-12T22:03:54Z"}, "message": "Merge branch 'rt-changes' into incoming", "tree": {"sha": "8a94698d06f6305550c7fe164b3a148f8a3ca940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a94698d06f6305550c7fe164b3a148f8a3ca940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "html_url": "https://github.com/rust-lang/rust/commit/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9aa9def858cfc66d411972b10ce3d98479acd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9aa9def858cfc66d411972b10ce3d98479acd78", "html_url": "https://github.com/rust-lang/rust/commit/b9aa9def858cfc66d411972b10ce3d98479acd78"}, {"sha": "a8db1bd4ef3d2464b3a13c049491f25e6a4aaa32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8db1bd4ef3d2464b3a13c049491f25e6a4aaa32", "html_url": "https://github.com/rust-lang/rust/commit/a8db1bd4ef3d2464b3a13c049491f25e6a4aaa32"}], "stats": {"total": 320, "additions": 116, "deletions": 204}, "files": [{"sha": "7f3e49de5510160e3e64aa6e9edd5eaf5e963de5", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -10,9 +10,8 @@ export log_str;\n export lock_and_signal, condition, methods;\n \n enum type_desc = {\n-    first_param: **libc::c_int,\n-    size: libc::size_t,\n-    align: libc::size_t\n+    size: uint,\n+    align: uint\n     // Remaining fields not listed\n };\n "}, {"sha": "65fcd0a59ca03d97682a72826d8f8bbcb106f92f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -31,11 +31,11 @@ impl arena for arena {\n         head = chunk(uint::next_power_of_two(new_min_chunk_size + 1u));\n         self.chunks = @cons(head, self.chunks);\n \n-        ret self.alloc(n_bytes, align);\n+        ret self.alloc_inner(n_bytes, align);\n     }\n \n     #[inline(always)]\n-    fn alloc(n_bytes: uint, align: uint) -> *() {\n+    fn alloc_inner(n_bytes: uint, align: uint) -> *() {\n         let alignm1 = align - 1u;\n         let mut head = list::head(self.chunks);\n \n@@ -52,5 +52,13 @@ impl arena for arena {\n             ret unsafe::reinterpret_cast(p);\n         }\n     }\n+\n+    #[inline(always)]\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n "}, {"sha": "0de49367b17800271cb101f2eb929c140300f483", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -459,7 +459,6 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n         ~[]\n       }\n \n-      ast::ty_vstore(@{node: ast::ty_vec(mt),_}, ast::vstore_uniq) |\n       ast::ty_vec(mt) {\n         let ser_e =\n             cx.expr(\n@@ -477,6 +476,11 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n         }]\n       }\n \n+      // For unique vstores, just pass through to the underlying vec or str\n+      ast::ty_vstore(ty, ast::vstore_uniq) {\n+        ser_ty(cx, tps, ty, s, v)\n+      }\n+\n       ast::ty_vstore(_, _) {\n         cx.span_unimpl(ty.span, \"serialization for vstore types\");\n       }\n@@ -685,12 +689,16 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n         #ast{ fail }\n       }\n \n-      ast::ty_vstore(@{node: ast::ty_vec(mt),_}, ast::vstore_uniq) |\n       ast::ty_vec(mt) {\n         let l = deser_lambda(cx, tps, mt.ty, cx.clone(d));\n         #ast{ std::serialization::read_to_vec($(d), $(l)) }\n       }\n \n+      // For unique vstores, just pass through to the underlying vec or str\n+      ast::ty_vstore(ty, ast::vstore_uniq) {\n+        deser_ty(cx, tps, ty, d)\n+      }\n+\n       ast::ty_vstore(_, _) {\n         cx.span_unimpl(ty.span, \"deserialization for vstore types\");\n       }"}, {"sha": "cb4afa904c9068a6dec99f92071a9db50a52dee5", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -484,8 +484,7 @@ log::walk_res2(const rust_fn *dtor, const uint8_t *end_sp) {\n \n extern \"C\" void\n shape_cmp_type(int8_t *result, const type_desc *tydesc,\n-               const type_desc **subtydescs, uint8_t *data_0,\n-               uint8_t *data_1, uint8_t cmp_type) {\n+               uint8_t *data_0, uint8_t *data_1, uint8_t cmp_type) {\n     rust_task *task = rust_get_current_task();\n     shape::arena arena;\n "}, {"sha": "b0f021287c06a851fea2535352d47f18513b242f", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -407,10 +407,6 @@ ctxt<T>::walk_tag0() {\n     // Determine the size and alignment.\n     tinfo.tag_sa = get_size_align(tinfo.info_ptr);\n \n-    // Read in a dummy value; this used to be the number of parameters\n-    uint16_t number_of_params = get_u16_bump(sp);\n-    assert(number_of_params == 0 && \"tag has type parameters on it\");\n-\n     // Call to the implementation.\n     static_cast<T *>(this)->walk_tag1(tinfo);\n }\n@@ -489,10 +485,6 @@ ctxt<T>::walk_res0() {\n         reinterpret_cast<const rust_fn **>(tables->resources);\n     const rust_fn *dtor = resources[dtor_offset];\n \n-    // Read in a dummy value; this used to be the number of parameters\n-    uint16_t number_of_params = get_u16_bump(sp);\n-    assert(number_of_params == 0 && \"resource has type parameters on it\");\n-\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n "}, {"sha": "036485825f1de73bdbcaf656d345315dd24e4191", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -45,24 +45,15 @@ static inline void *box_body(rust_opaque_box *box) {\n     return (void*)(box + 1);\n }\n \n-// N.B. If you want to add a field to tydesc, please use one of the\n-// unused fields!\n struct type_desc {\n-    uintptr_t UNUSED_1;\n     size_t size;\n     size_t align;\n     glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n     glue_fn *visit_glue;\n-    uintptr_t UNUSED_2;\n-    uintptr_t UNUSED_3;\n-    uintptr_t UNUSED_4;\n-    uintptr_t UNUSED_5;\n     const uint8_t *shape;\n     const rust_shape_tables *shape_tables;\n-    uintptr_t UNUSED_6;\n-    uintptr_t UNUSED_7;\n };\n \n extern \"C\" type_desc *rust_clone_type_desc(type_desc*);"}, {"sha": "cae5ce45b54974a3c8174aaff7246f196894d1b5", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -335,59 +335,6 @@ upcall_str_new_shared(const char *cstr, size_t len) {\n }\n \n \n-struct s_vec_grow_args {\n-    rust_task *task;\n-    rust_vec_box** vp;\n-    size_t new_sz;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_vec_grow(s_vec_grow_args *args) {\n-    rust_task *task = args->task;\n-    LOG_UPCALL_ENTRY(task);\n-    reserve_vec(task, args->vp, args->new_sz);\n-    (*args->vp)->body.fill = args->new_sz;\n-}\n-\n-extern \"C\" CDECL void\n-upcall_vec_grow(rust_vec_box** vp, size_t new_sz) {\n-    rust_task *task = rust_get_current_task();\n-    s_vec_grow_args args = {task, vp, new_sz};\n-    UPCALL_SWITCH_STACK(task, &args, upcall_s_vec_grow);\n-}\n-\n-struct s_str_concat_args {\n-    rust_task *task;\n-    rust_vec_box* lhs;\n-    rust_vec_box* rhs;\n-    rust_vec_box* retval;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_str_concat(s_str_concat_args *args) {\n-    rust_vec *lhs = &args->lhs->body;\n-    rust_vec *rhs = &args->rhs->body;\n-    rust_task *task = args->task;\n-    size_t fill = lhs->fill + rhs->fill - 1;\n-    rust_vec_box* v = (rust_vec_box*)\n-        task->kernel->malloc(fill + sizeof(rust_vec_box),\n-                             \"str_concat\");\n-    v->header.td = args->lhs->header.td;\n-    v->body.fill = v->body.alloc = fill;\n-    memmove(&v->body.data[0], &lhs->data[0], lhs->fill - 1);\n-    memmove(&v->body.data[lhs->fill - 1], &rhs->data[0], rhs->fill);\n-    args->retval = v;\n-}\n-\n-extern \"C\" CDECL rust_vec_box*\n-upcall_str_concat(rust_vec_box* lhs, rust_vec_box* rhs) {\n-    rust_task *task = rust_get_current_task();\n-    s_str_concat_args args = {task, lhs, rhs, 0};\n-    UPCALL_SWITCH_STACK(task, &args, upcall_s_str_concat);\n-    return args.retval;\n-}\n-\n-\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,\n@@ -444,30 +391,27 @@ upcall_rust_personality(int version,\n \n extern \"C\" void\n shape_cmp_type(int8_t *result, const type_desc *tydesc,\n-               const type_desc **subtydescs, uint8_t *data_0,\n-               uint8_t *data_1, uint8_t cmp_type);\n+               uint8_t *data_0, uint8_t *data_1, uint8_t cmp_type);\n \n struct s_cmp_type_args {\n     int8_t *result;\n     const type_desc *tydesc;\n-    const type_desc **subtydescs;\n     uint8_t *data_0;\n     uint8_t *data_1;\n     uint8_t cmp_type;\n };\n \n extern \"C\" void\n upcall_s_cmp_type(s_cmp_type_args *args) {\n-    shape_cmp_type(args->result, args->tydesc, args->subtydescs,\n+    shape_cmp_type(args->result, args->tydesc,\n                    args->data_0, args->data_1, args->cmp_type);\n }\n \n extern \"C\" void\n upcall_cmp_type(int8_t *result, const type_desc *tydesc,\n-                const type_desc **subtydescs, uint8_t *data_0,\n-                uint8_t *data_1, uint8_t cmp_type) {\n+                uint8_t *data_0, uint8_t *data_1, uint8_t cmp_type) {\n     rust_task *task = rust_get_current_task();\n-    s_cmp_type_args args = {result, tydesc, subtydescs,\n+    s_cmp_type_args args = {result, tydesc,\n                             data_0, data_1, cmp_type};\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_cmp_type);\n }"}, {"sha": "cd765184c1eb4616c7420f405ba3e27aeb3e0d38", "filename": "src/rt/rust_util.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frust_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.cpp?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -15,21 +15,14 @@ uint8_t str_body_shape[] = {\n };\n \n struct type_desc str_body_tydesc = {\n-    0, // unused\n     1, // size\n     1, // align\n     NULL, // take_glue\n     NULL, // drop_glue\n     NULL, // free_glue\n     NULL, // visit_glue\n-    0, // unused\n-    0, // unused\n-    0, // unused\n-    0, // unused\n     str_body_shape, // shape\n     &empty_shape_tables, // shape_tables\n-    0, // unused\n-    0, // unused\n };\n \n //"}, {"sha": "300d6bc79e8deb23a6c046e411978bd75c149c7a", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -76,11 +76,8 @@ upcall_validate_box\n upcall_log_type\n upcall_malloc\n upcall_rust_personality\n-upcall_vec_grow\n-upcall_str_new\n upcall_str_new_uniq\n upcall_str_new_shared\n-upcall_str_concat\n upcall_call_shim_on_c_stack\n upcall_call_shim_on_rust_stack\n upcall_new_stack"}, {"sha": "d6c0c5fa2dd716af386b0d320c5077b5030db271", "filename": "src/rustc/back/abi.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fabi.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -33,22 +33,15 @@ const box_field_body: uint = 4u;\n \n const general_code_alignment: uint = 16u;\n \n-const tydesc_field_first_param: uint = 0u;\n-const tydesc_field_size: uint = 1u;\n-const tydesc_field_align: uint = 2u;\n-const tydesc_field_take_glue: uint = 3u;\n-const tydesc_field_drop_glue: uint = 4u;\n-const tydesc_field_free_glue: uint = 5u;\n-const tydesc_field_visit_glue: uint = 6u;\n-const tydesc_field_sever_glue: uint = 7u;\n-const tydesc_field_mark_glue: uint = 8u;\n-const tydesc_field_unused2: uint = 9u;\n-const tydesc_field_unused_2: uint = 10u;\n-const tydesc_field_shape: uint = 11u;\n-const tydesc_field_shape_tables: uint = 12u;\n-const tydesc_field_n_params: uint = 13u;\n-const tydesc_field_obj_params: uint = 14u; // FIXME unused (#2351)\n-const n_tydesc_fields: uint = 15u;\n+const tydesc_field_size: uint = 0u;\n+const tydesc_field_align: uint = 1u;\n+const tydesc_field_take_glue: uint = 2u;\n+const tydesc_field_drop_glue: uint = 3u;\n+const tydesc_field_free_glue: uint = 4u;\n+const tydesc_field_visit_glue: uint = 5u;\n+const tydesc_field_shape: uint = 6u;\n+const tydesc_field_shape_tables: uint = 7u;\n+const n_tydesc_fields: uint = 8u;\n \n const cmp_glue_op_eq: uint = 0u;\n "}, {"sha": "e95f7e39af46a1d905998dab93e29e27c65c60a7", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -16,10 +16,8 @@ type upcalls =\n      exchange_free: ValueRef,\n      validate_box: ValueRef,\n      mark: ValueRef,\n-     vec_grow: ValueRef,\n      str_new_uniq: ValueRef,\n      str_new_shared: ValueRef,\n-     str_concat: ValueRef,\n      cmp_type: ValueRef,\n      log_type: ValueRef,\n      alloc_c_stack: ValueRef,\n@@ -71,22 +69,16 @@ fn declare_upcalls(targ_cfg: @session::config,\n               nothrow(dv(\"validate_box\", ~[T_ptr(T_i8())])),\n           mark:\n               d(\"mark\", ~[T_ptr(T_i8())], int_t),\n-          vec_grow:\n-              nothrow(dv(\"vec_grow\", ~[T_ptr(T_ptr(T_i8())), int_t])),\n           str_new_uniq:\n               nothrow(d(\"str_new_uniq\", ~[T_ptr(T_i8()), int_t],\n                         T_ptr(T_i8()))),\n           str_new_shared:\n               nothrow(d(\"str_new_shared\", ~[T_ptr(T_i8()), int_t],\n                         T_ptr(T_i8()))),\n-          str_concat:\n-              nothrow(d(\"str_concat\", ~[T_ptr(T_i8()),\n-                                       T_ptr(T_i8())],\n-                        T_ptr(T_i8()))),\n           cmp_type:\n               dv(\"cmp_type\",\n                  ~[T_ptr(T_i1()), T_ptr(tydesc_type),\n-                  T_ptr(T_ptr(tydesc_type)), T_ptr(T_i8()),\n+                  T_ptr(T_i8()),\n                   T_ptr(T_i8()),\n                   T_i8()]),\n           log_type:"}, {"sha": "ab127cd6a26565204742d902c95b10f443a9778c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -596,21 +596,14 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n \n         let tydesc =\n             C_named_struct(ccx.tydesc_type,\n-                           ~[C_null(T_ptr(T_ptr(ccx.tydesc_type))),\n-                            ti.size, // size\n-                            ti.align, // align\n-                            take_glue, // take_glue\n-                            drop_glue, // drop_glue\n-                            free_glue, // free_glue\n-                            visit_glue, // visit_glue\n-                            C_int(ccx, 0), // unused\n-                            C_int(ccx, 0), // unused\n-                            C_int(ccx, 0), // unused\n-                            C_int(ccx, 0), // unused\n-                            C_shape(ccx, shape), // shape\n-                            shape_tables, // shape_tables\n-                            C_int(ccx, 0), // unused\n-                             C_int(ccx, 0)]); // unused\n+                           ~[ti.size, // size\n+                             ti.align, // align\n+                             take_glue, // take_glue\n+                             drop_glue, // drop_glue\n+                             free_glue, // free_glue\n+                             visit_glue, // visit_glue\n+                             C_shape(ccx, shape), // shape\n+                             shape_tables]); // shape_tables\n \n         let gvar = ti.tydesc;\n         llvm::LLVMSetInitializer(gvar, tydesc);\n@@ -1213,14 +1206,12 @@ fn call_cmp_glue(bcx: block, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n     let llrawlhsptr = BitCast(bcx, lllhs, T_ptr(T_i8()));\n     let llrawrhsptr = BitCast(bcx, llrhs, T_ptr(T_i8()));\n     let lltydesc = get_tydesc_simple(bcx.ccx(), t);\n-    let lltydescs =\n-        Load(bcx, GEPi(bcx, lltydesc, ~[0u, abi::tydesc_field_first_param]));\n \n     let llfn = bcx.ccx().upcalls.cmp_type;\n \n     let llcmpresultptr = alloca(bcx, T_i1());\n-    Call(bcx, llfn, ~[llcmpresultptr, lltydesc, lltydescs,\n-                     llrawlhsptr, llrawrhsptr, llop]);\n+    Call(bcx, llfn, ~[llcmpresultptr, lltydesc,\n+                      llrawlhsptr, llrawrhsptr, llop]);\n     ret Load(bcx, llcmpresultptr);\n }\n \n@@ -3702,9 +3693,9 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             ret trans_assign_op(bcx, e, op, dst, src);\n           }\n           ast::expr_new(pool, alloc_id, val) {\n-            // First, call pool->alloc(sz, align) to get back a void*.  Then,\n-            // cast this memory to the required type and evaluate value into\n-            // it.\n+            // First, call pool->alloc(tydesc) to get back a void*.\n+            // Then, cast this memory to the required type and evaluate value\n+            // into it.\n             let ccx = bcx.ccx();\n \n             // Allocate space for the ptr that will be returned from\n@@ -3715,24 +3706,21 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             #debug[\"ptr_ty = %s\", ppaux::ty_to_str(tcx, ptr_ty)];\n             #debug[\"ptr_ptr_val = %s\", val_str(ccx.tn, ptr_ptr_val)];\n \n-            let void_ty = ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx),\n-                                           mutbl: ast::m_imm});\n-            let voidval = {\n-                let llvoid_ty = type_of(ccx, void_ty);\n-                PointerCast(bcx, ptr_ptr_val, T_ptr(llvoid_ty))\n-            };\n-\n+            let void_ty = ty::mk_nil_ptr(tcx);\n+            let llvoid_ty = type_of(ccx, void_ty);\n+            let voidval = PointerCast(bcx, ptr_ptr_val, T_ptr(llvoid_ty));\n             #debug[\"voidval = %s\", val_str(ccx.tn, voidval)];\n \n-            let llval_ty = type_of(ccx, expr_ty(bcx, val));\n-            let args =\n-                ~[llsize_of(ccx, llval_ty), llalign_of(ccx, llval_ty)];\n+            let static_ti = get_tydesc(ccx, expr_ty(bcx, val));\n+            lazily_emit_all_tydesc_glue(ccx, static_ti);\n+            let lltydesc = PointerCast(bcx, static_ti.tydesc, llvoid_ty);\n+\n             let origin = bcx.ccx().maps.method_map.get(alloc_id);\n             let bcx = trans_call_inner(\n                 bcx, e.info(), node_id_type(bcx, alloc_id), void_ty,\n                 |bcx| impl::trans_method_callee(bcx, alloc_id,\n                                                  pool, origin),\n-                arg_vals(args),\n+                arg_vals(~[lltydesc]),\n                 save_in(voidval));\n \n             #debug[\"dest = %s\", dest_str(ccx, dest)];"}, {"sha": "b72d219e8248d38552550b1a6f60ce1490ce6206", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -660,10 +660,9 @@ fn T_tydesc(targ_cfg: @session::config) -> TypeRef {\n \n     let int_type = T_int(targ_cfg);\n     let elems =\n-        ~[tydescpp, int_type, int_type,\n-         glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         int_type, int_type, int_type, int_type,\n-         T_ptr(T_i8()), T_ptr(T_i8()), int_type, int_type];\n+        ~[int_type, int_type,\n+          glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty,\n+          T_ptr(T_i8()), T_ptr(T_i8())];\n     set_struct_body(tydesc, elems);\n     ret tydesc;\n }"}, {"sha": "f6be67b1512b4d6daceca5ef3b0462a2abf40015", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -250,10 +250,6 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n             }\n             add_u16(s, id as u16);\n \n-            // Hack: always encode 0 tps, since the shape glue format\n-            // hasn't changed since we started monomorphizing.\n-            add_u16(s, 0_u16);\n-\n             s\n           }\n         }\n@@ -342,10 +338,6 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n           let ri = @{did: dtor_did, parent_id: some(did), tps: tps};\n           let id = interner::intern(ccx.shape_cx.resources, ri);\n           add_u16(s, id as u16);\n-\n-          // Hack: always encode 0 tps, since the shape glue format\n-          // hasn't changed since we started monomorphizing.\n-          add_u16(s, 0_u16);\n         };\n         for ty::class_items_as_mutable_fields(ccx.tcx, did, substs).each |f| {\n            sub += shape_of(ccx, f.mt.ty);"}, {"sha": "da8919c96fdb25adcfa146bdb17c0bb8be5d45c0", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -658,7 +658,7 @@ fn mk_mach_float(cx: ctxt, tm: ast::float_ty) -> t { mk_t(cx, ty_float(tm)) }\n \n fn mk_char(cx: ctxt) -> t { mk_t(cx, ty_int(ast::ty_char)) }\n \n-fn mk_str(cx: ctxt) -> t { mk_t(cx, ty_str) }\n+fn mk_str(cx: ctxt) -> t { mk_estr(cx, vstore_uniq) }\n \n fn mk_estr(cx: ctxt, t: vstore) -> t {\n     mk_t(cx, ty_estr(t))"}, {"sha": "3b10bb3bae37c3bf03df70f9d76972cda6e26111", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -223,7 +223,7 @@ fn arg_is_argv_ty(_tcx: ty::ctxt, a: ty::arg) -> bool {\n       ty::ty_evec(mt, vstore_uniq) {\n         if mt.mutbl != ast::m_imm { ret false; }\n         alt ty::get(mt.ty).struct {\n-          ty::ty_str { ret true; }\n+          ty::ty_estr(vstore_uniq) { ret true; }\n           _ { ret false; }\n         }\n       }"}, {"sha": "d1ae74cffc03b4527ec1b336e684311343f16894", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -164,31 +164,30 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n         self: AC, rscope: RS, a_seq_ty: @ast::ty, vst: ty::vstore) -> ty::t {\n \n         let tcx = self.tcx();\n-        let seq_ty = ast_ty_to_ty(self, rscope, a_seq_ty);\n-\n-        alt ty::get(seq_ty).struct {\n-          ty::ty_vec(mt) {\n-            ret ty::mk_evec(tcx, mt, vst);\n-          }\n \n-          // HACK: if we get a ~[], we assume that it was actually a\n-          // [] that got written down, and we throw away the /~...\n-          ty::ty_evec(mt, vstore_uniq) {\n-            ret ty::mk_evec(tcx, mt, vst);\n+        alt a_seq_ty.node {\n+          ast::ty_vec(mt) {\n+            ret ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, mt), vst);\n           }\n-\n-          ty::ty_str {\n-            ret ty::mk_estr(tcx, vst);\n-          }\n-\n-          _ {\n-            tcx.sess.span_err(\n-                a_seq_ty.span,\n-                #fmt[\"bound not allowed on a %s\",\n-                     ty::ty_sort_str(tcx, seq_ty)]);\n-            ret seq_ty;\n+          ast::ty_path(path, id) {\n+            alt tcx.def_map.find(id) {\n+              some(ast::def_prim_ty(ast::ty_str)) {\n+                check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                ret ty::mk_estr(tcx, vst);\n+              }\n+              _ {}\n+            }\n           }\n+          _ {}\n         }\n+\n+        // Get the type, just for the error message\n+        let seq_ty = ast_ty_to_ty(self, rscope, a_seq_ty);\n+        tcx.sess.span_err(\n+            a_seq_ty.span,\n+            #fmt[\"bound not allowed on a %s\",\n+                 ty::ty_sort_str(tcx, seq_ty)]);\n+        ret seq_ty;\n     }\n \n     fn check_path_args(tcx: ty::ctxt,"}, {"sha": "063c17141928d614f848d49574aa4a4362b5e677", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1631,17 +1631,15 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           some(entry) {\n             fcx.ccx.method_map.insert(alloc_id, entry);\n \n-            // Check that the alloc() method has the expected type, which\n-            // should be fn(sz: uint, align: uint) -> *().\n+            // Check that the alloc() method has the expected\n+            // type, which should be fn(tydesc: *()) -> *().\n             let expected_ty = {\n-                let ty_uint = ty::mk_uint(tcx);\n                 let ty_nilp = ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx),\n                                               mutbl: ast::m_imm});\n-                let m = ast::expl(ty::default_arg_mode_for_ty(ty_uint));\n+                let m = ast::expl(ty::default_arg_mode_for_ty(ty_nilp));\n                 ty::mk_fn(tcx, {purity: ast::impure_fn,\n                                 proto: ast::proto_any,\n-                                inputs: ~[{mode: m, ty: ty_uint},\n-                                         {mode: m, ty: ty_uint}],\n+                                inputs: ~[{mode: m, ty: ty_nilp}],\n                                 output: ty_nilp,\n                                 ret_style: ast::return_val,\n                                 constraints: ~[]})"}, {"sha": "a99a9f39a81454550896a9f8cb2f3c7dd8382a85", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1,3 +1,11 @@\n+S 2012-07-12 8ad4e92\n+  macos-i386 b31efba34f0af7ce527adc49cd345548da528ccf\n+  macos-x86_64 ef82309eb8ba269091fbe5f41a1e28fa3c6da90e\n+  freebsd-x86_64 2a6471cf27a9d03637b96aa12f39736f663312e3\n+  linux-i386 94f77c50d753816df8c42608054a8cc3112ef34c\n+  linux-x86_64 6d95183ceace8ae009b0d43a8df3a9cf13ad85a2\n+  winnt-i386 90edcaf74134a12d656898605c67551931830fcd\n+\n S 2012-07-06 b5f5676\n   macos-i386 c0f36f05f84696b98243046d0ebcb0fcc84995e7\n   macos-x86_64 b2bc7ba068de0ca426dfe7ae018ae3c6442fc0a5"}, {"sha": "8b86db098e513ccffb9b305f90500dfa958f63b4", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected `str` but found `int`\n+// error-pattern:expected `str/~` but found `int`\n \n const i: str = 10i;\n fn main() { log(debug, i); }"}, {"sha": "53bb7d8f53d98c4d86345d1517c0a0d9fe4fd721", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:^ cannot be applied to type `str`\n+// error-pattern:^ cannot be applied to type `str/~`\n \n fn main() { let x = \"a\" ^ \"b\"; }"}, {"sha": "3f9bda61c80eb932a769fc5641613c0fdeeea1d9", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected `str` but found `~[int]`\n+// error-pattern:expected `str/~` but found `~[int]`\n fn main() { fail ~[0i]; }"}, {"sha": "9386c15264846e43f4af113414dc0e3f0758801f", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -8,5 +8,5 @@ import std::map::map;\n fn main() {\n     let x: map<str,str> = map::str_hash::<str>() as map::<str,str>;\n     let y: map<uint,str> = x;\n-    //~^ ERROR mismatched types: expected `std::map::map<uint,str>`\n+    //~^ ERROR mismatched types: expected `std::map::map<uint,str/~>`\n }"}, {"sha": "043d46f121b5c63947ae4a99b0c79b597169bd03", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:cannot apply unary operator `-` to type `str`\n+// error-pattern:cannot apply unary operator `-` to type `str/~`\n \n fn main() { -\"foo\"; }"}, {"sha": "31595875058e16c796a0299bad0b10e619346fdd", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -3,7 +3,7 @@\n fn foo(f: fn()) { f() }\n \n fn main() {\n-    \"\" || 42; //~ ERROR binary operation || cannot be applied to type `str`\n+    \"\" || 42; //~ ERROR binary operation || cannot be applied to type `str/~`\n     foo || {}; //~ ERROR binary operation || cannot be applied to type `extern fn(fn())`\n     //~^ NOTE did you forget the 'do' keyword for the call?\n }"}, {"sha": "2126a6bddc6b201d020d7b49a0b9fcbbcf3c175e", "filename": "src/test/compile-fail/placement-new-bad-method-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -11,5 +11,5 @@ impl methods for malloc_pool {\n fn main() {\n     let p = &malloc_pool(());\n     let x = new(*p) 4u;\n-    //~^ ERROR mismatched types: expected `fn(uint, uint) -> *()`\n+    //~^ ERROR mismatched types: expected `fn(*()) -> *()`\n }"}, {"sha": "85363c432e0d995acc1b50b857c571cdc9c1e8e2", "filename": "src/test/run-pass/placement-new-leaky.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -3,11 +3,17 @@ import libc, unsafe;\n enum malloc_pool = ();\n \n impl methods for malloc_pool {\n-    fn alloc(sz: uint, align: uint) -> *() {\n+    fn alloc_inner(sz: uint, align: uint) -> *() {\n         unsafe {\n             unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t))\n         }\n     }\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n \n fn main() {"}, {"sha": "de7f0c2739f6a19d2ae8c62a9bcffbdeb3ef2b1f", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e5f3a6507ab14e18669bdeed973f6bc9935ff/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=9d2e5f3a6507ab14e18669bdeed973f6bc9935ff", "patch": "@@ -16,9 +16,15 @@ type ccx = {\n };\n \n impl arena for arena {\n-    fn alloc(sz: uint, _align: uint) -> *() unsafe {\n+    fn alloc_inner(sz: uint, _align: uint) -> *() unsafe {\n         ret unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t));\n     }\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n \n fn h(bcx : &bcx) -> &bcx {"}]}