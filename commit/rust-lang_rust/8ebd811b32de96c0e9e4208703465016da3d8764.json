{"sha": "8ebd811b32de96c0e9e4208703465016da3d8764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmQ4MTFiMzJkZTk2YzBlOWU0MjA4NzAzNDY1MDE2ZGEzZDg3NjQ=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-17T23:15:15Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-24T19:37:42Z"}, "message": "review", "tree": {"sha": "96c0339e63ff7fd9a76f7511e79169b92ba920c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c0339e63ff7fd9a76f7511e79169b92ba920c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebd811b32de96c0e9e4208703465016da3d8764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd811b32de96c0e9e4208703465016da3d8764", "html_url": "https://github.com/rust-lang/rust/commit/8ebd811b32de96c0e9e4208703465016da3d8764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd811b32de96c0e9e4208703465016da3d8764/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2d52282fb3c226c370a86c9111892384bbcb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2d52282fb3c226c370a86c9111892384bbcb21", "html_url": "https://github.com/rust-lang/rust/commit/cb2d52282fb3c226c370a86c9111892384bbcb21"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "e262d95bb70f251bc4caf76bbaf7f823d9b5c084", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ebd811b32de96c0e9e4208703465016da3d8764/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebd811b32de96c0e9e4208703465016da3d8764/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=8ebd811b32de96c0e9e4208703465016da3d8764", "patch": "@@ -7,21 +7,17 @@ pub struct StyledBuffer {\n     lines: Vec<Vec<StyledChar>>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n struct StyledChar {\n     chr: char,\n     style: Style,\n }\n \n impl StyledChar {\n-    fn new(chr: char, style: Style) -> Self {\n-        StyledChar { chr, style }\n-    }\n-}\n+    const SPACE: Self = StyledChar::new(' ', Style::NoStyle);\n \n-impl Default for StyledChar {\n-    fn default() -> Self {\n-        StyledChar::new(' ', Style::NoStyle)\n+    const fn new(chr: char, style: Style) -> Self {\n+        StyledChar { chr, style }\n     }\n }\n \n@@ -66,31 +62,25 @@ impl StyledBuffer {\n     }\n \n     fn ensure_lines(&mut self, line: usize) {\n-        while line >= self.lines.len() {\n-            self.lines.push(vec![]);\n+        if line >= self.lines.len() {\n+            self.lines.resize(line + 1, Vec::new());\n         }\n     }\n \n     /// Sets `chr` with `style` for given `line`, `col`.\n-    /// If line not exist in `StyledBuffer`, adds lines up to given\n-    /// and fills last line with spaces and `Style::NoStyle` style\n+    /// If `line` does not exist in our buffer, adds empty lines up to the given\n+    /// and fills the last line with unstyled whitespace.\n     pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) {\n         self.ensure_lines(line);\n-        if col < self.lines[line].len() {\n-            self.lines[line][col] = StyledChar::new(chr, style);\n-        } else {\n-            let mut i = self.lines[line].len();\n-            while i < col {\n-                self.lines[line].push(StyledChar::default());\n-                i += 1;\n-            }\n-            self.lines[line].push(StyledChar::new(chr, style));\n+        if col >= self.lines[line].len() {\n+            self.lines[line].resize(col + 1, StyledChar::SPACE);\n         }\n+        self.lines[line][col] = StyledChar::new(chr, style);\n     }\n \n     /// Sets `string` with `style` for given `line`, starting from `col`.\n-    /// If line not exist in `StyledBuffer`, adds lines up to given\n-    /// and fills last line with spaces and `Style::NoStyle` style\n+    /// If `line` does not exist in our buffer, adds empty lines up to the given\n+    /// and fills the last line with unstyled whitespace.\n     pub fn puts(&mut self, line: usize, col: usize, string: &str, style: Style) {\n         let mut n = col;\n         for c in string.chars() {\n@@ -108,7 +98,7 @@ impl StyledBuffer {\n         if !self.lines[line].is_empty() {\n             // Push the old content over to make room for new content\n             for _ in 0..string_len {\n-                self.lines[line].insert(0, StyledChar::default());\n+                self.lines[line].insert(0, StyledChar::SPACE);\n             }\n         }\n "}]}