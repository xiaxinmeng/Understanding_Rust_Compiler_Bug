{"sha": "3870c15749cd4766627225f89f8e8cec7f5b817f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzBjMTU3NDljZDQ3NjY2MjcyMjVmODlmOGU4Y2VjN2Y1YjgxN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-11T02:26:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-11T02:26:49Z"}, "message": "auto merge of #12173 : alexcrichton/rust/fix-snap, r=brson\n\nThe commit accidentally modified the snapshot script which changed its behavior\r\nand is currently blocking a snapshot.", "tree": {"sha": "d1c4f2398731068698e56533fca6b0d0577ea8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c4f2398731068698e56533fca6b0d0577ea8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3870c15749cd4766627225f89f8e8cec7f5b817f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3870c15749cd4766627225f89f8e8cec7f5b817f", "html_url": "https://github.com/rust-lang/rust/commit/3870c15749cd4766627225f89f8e8cec7f5b817f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3870c15749cd4766627225f89f8e8cec7f5b817f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ab5d2d42aaf9e04afe6cc5aa84446e523d83ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ab5d2d42aaf9e04afe6cc5aa84446e523d83ff", "html_url": "https://github.com/rust-lang/rust/commit/47ab5d2d42aaf9e04afe6cc5aa84446e523d83ff"}, {"sha": "c2ae62faee508041db495e5fd7a685eb545f7d67", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ae62faee508041db495e5fd7a685eb545f7d67", "html_url": "https://github.com/rust-lang/rust/commit/c2ae62faee508041db495e5fd7a685eb545f7d67"}], "stats": {"total": 228, "additions": 115, "deletions": 113}, "files": [{"sha": "b44adc040b7437ae0c68f50b9f57c56c02cb7448", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 115, "deletions": 113, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/3870c15749cd4766627225f89f8e8cec7f5b817f/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/3870c15749cd4766627225f89f8e8cec7f5b817f/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=3870c15749cd4766627225f89f8e8cec7f5b817f", "patch": "@@ -11,21 +11,21 @@\n import re, os, sys, glob, tarfile, shutil, subprocess, tempfile, distutils.spawn\n \n try:\n-    import hashlib\n-    sha_func = hashlib.sha1\n+  import hashlib\n+  sha_func = hashlib.sha1\n except ImportError:\n-    import sha\n-    sha_func = sha.new\n+  import sha\n+  sha_func = sha.new\n \n def scrub(b):\n-    if sys.version_info >= (3,) and type(b) == bytes:\n-        return b.decode('ascii')\n-    else:\n-        return b\n+  if sys.version_info >= (3,) and type(b) == bytes:\n+    return b.decode('ascii')\n+  else:\n+    return b\n \n src_dir = scrub(os.getenv(\"CFG_SRC_DIR\"))\n if not src_dir:\n-    raise Exception(\"missing env var CFG_SRC_DIR\")\n+  raise Exception(\"missing env var CFG_SRC_DIR\")\n \n snapshotfile = os.path.join(src_dir, \"src\", \"snapshots.txt\")\n download_url_base = \"http://static.rust-lang.org/stage0-snapshots\"\n@@ -39,36 +39,37 @@ def scrub(b):\n     \"freebsd\": [\"bin/rustc\"],\n     }\n \n-winnt_runtime_deps = [\"libgcc_s_dw2-1.dll\", \"libstdc++-6.dll\"]\n+winnt_runtime_deps = [\"libgcc_s_dw2-1.dll\",\n+                      \"libstdc++-6.dll\"]\n \n def parse_line(n, line):\n-    global snapshotfile\n+  global snapshotfile\n \n-    if re.match(r\"\\s*$\", line): return None\n+  if re.match(r\"\\s*$\", line): return None\n \n-    if re.match(r\"^T\\s*$\", line): return None\n+  if re.match(r\"^T\\s*$\", line): return None\n \n-    match = re.match(r\"\\s+([\\w_-]+) ([a-fA-F\\d]{40})\\s*$\", line)\n-    if match:\n-        return { \"type\": \"file\",\n-                 \"platform\": match.group(1),\n-                 \"hash\": match.group(2).lower() }\n+  match = re.match(r\"\\s+([\\w_-]+) ([a-fA-F\\d]{40})\\s*$\", line)\n+  if match:\n+    return { \"type\": \"file\",\n+             \"platform\": match.group(1),\n+             \"hash\": match.group(2).lower() }\n \n-    match = re.match(r\"([ST]) (\\d{4}-\\d{2}-\\d{2}) ([a-fA-F\\d]+)\\s*$\", line);\n-    if not match:\n-        raise Exception(\"%s:%d:E syntax error: \" % (snapshotfile, n))\n-    return { \"type\": \"snapshot\",\n-             \"date\": match.group(2),\n-             \"rev\": match.group(3) }\n+  match = re.match(r\"([ST]) (\\d{4}-\\d{2}-\\d{2}) ([a-fA-F\\d]+)\\s*$\", line);\n+  if (not match):\n+    raise Exception(\"%s:%d:E syntax error: \" % (snapshotfile, n))\n+  return {\"type\": \"snapshot\",\n+          \"date\": match.group(2),\n+          \"rev\": match.group(3)}\n \n \n def partial_snapshot_name(date, rev, platform):\n-    return (\"rust-stage0-%s-%s-%s.tar.bz2\"\n-                    % (date, rev, platform))\n+  return (\"rust-stage0-%s-%s-%s.tar.bz2\"\n+          % (date, rev, platform))\n \n def full_snapshot_name(date, rev, platform, hsh):\n-    return (\"rust-stage0-%s-%s-%s-%s.tar.bz2\"\n-                    % (date, rev, platform, hsh))\n+  return (\"rust-stage0-%s-%s-%s-%s.tar.bz2\"\n+          % (date, rev, platform, hsh))\n \n \n def get_kernel(triple):\n@@ -85,22 +86,23 @@ def get_kernel(triple):\n def get_cpu(triple):\n     arch = triple.split('-')[0]\n     if arch == \"i686\":\n-        return \"i386\"\n+      return \"i386\"\n     return arch\n \n def get_platform(triple):\n-    return \"%s-%s\" % (get_kernel(triple), get_cpu(triple))\n+  return \"%s-%s\" % (get_kernel(triple), get_cpu(triple))\n \n \n def cmd_out(cmdline):\n-    p = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n+    p = subprocess.Popen(cmdline,\n+                         stdout=subprocess.PIPE)\n     return scrub(p.communicate()[0].strip())\n \n \n def local_rev_info(field):\n     return cmd_out([\"git\", \"--git-dir=\" + os.path.join(src_dir, \".git\"),\n-                            \"log\", \"-n\", \"1\",\n-                            \"--format=%%%s\" % field, \"HEAD\"])\n+                    \"log\", \"-n\", \"1\",\n+                    \"--format=%%%s\" % field, \"HEAD\"])\n \n \n def local_rev_full_sha():\n@@ -133,10 +135,10 @@ def get_url_to_file(u,f):\n     os.rename(tmpf, f)\n \n def snap_filename_hash_part(snap):\n-    match = re.match(r\".*([a-fA-F\\d]{40}).tar.bz2$\", snap)\n-    if not match:\n-        raise Exception(\"unable to find hash in filename: \" + snap)\n-    return match.group(1)\n+  match = re.match(r\".*([a-fA-F\\d]{40}).tar.bz2$\", snap)\n+  if not match:\n+    raise Exception(\"unable to find hash in filename: \" + snap)\n+  return match.group(1)\n \n def hash_file(x):\n     h = sha_func()\n@@ -148,13 +150,13 @@ def get_winnt_runtime_deps():\n     runtime_deps = []\n     path_dirs = os.environ[\"PATH\"].split(';')\n     for name in winnt_runtime_deps:\n-        for dir in path_dirs:\n-            matches = glob.glob(os.path.join(dir, name))\n-            if matches:\n-                runtime_deps.append(matches[0])\n-                break\n-            else:\n-                raise Exception(\"Could not find runtime dependency: %s\" % name)\n+      for dir in path_dirs:\n+        matches = glob.glob(os.path.join(dir, name))\n+        if matches:\n+          runtime_deps.append(matches[0])\n+          break\n+      else:\n+        raise Exception(\"Could not find runtime dependency: %s\" % name)\n     return runtime_deps\n \n def make_snapshot(stage, triple):\n@@ -166,31 +168,31 @@ def make_snapshot(stage, triple):\n     file0 = partial_snapshot_name(date, rev, platform)\n \n     def in_tar_name(fn):\n-        cs = re.split(r\"[\\\\/]\", fn)\n-        if len(cs) >= 2:\n-            return os.sep.join(cs[-2:])\n+      cs = re.split(r\"[\\\\/]\", fn)\n+      if len(cs) >= 2:\n+        return os.sep.join(cs[-2:])\n \n     tar = tarfile.open(file0, \"w:bz2\")\n \n     for name in snapshot_files[kernel]:\n-        dir = stage\n-        if stage == \"stage1\" and re.match(r\"^lib/(lib)?std.*\", name):\n-            dir = \"stage0\"\n-        fn_glob = os.path.join(triple, dir, name)\n-        matches = glob.glob(fn_glob)\n-        if not matches:\n-            raise Exception(\"Not found file with name like \" + fn_glob)\n-        if len(matches) == 1:\n-            tar.add(matches[0], \"rust-stage0/\" + in_tar_name(matches[0]))\n-        else:\n-            raise Exception(\"Found stale files: \\n  %s\\n\"\n-                    \"Please make a clean build.\" % \"\\n  \".join(matches))\n+      dir = stage\n+      if stage == \"stage1\" and re.match(r\"^lib/(lib)?std.*\", name):\n+        dir = \"stage0\"\n+      fn_glob = os.path.join(triple, dir, name)\n+      matches = glob.glob(fn_glob)\n+      if not matches:\n+        raise Exception(\"Not found file with name like \" + fn_glob)\n+      if len(matches) == 1:\n+        tar.add(matches[0], \"rust-stage0/\" + in_tar_name(matches[0]))\n+      else:\n+        raise Exception(\"Found stale files: \\n  %s\\n\"\n+                        \"Please make a clean build.\" % \"\\n  \".join(matches))\n \n     if kernel==\"winnt\":\n-        for path in get_winnt_runtime_deps():\n-            tar.add(path, \"rust-stage0/bin/\" + os.path.basename(path))\n-        tar.add(os.path.join(os.path.dirname(__file__), \"third-party\"),\n-                        \"rust-stage0/bin/third-party\")\n+      for path in get_winnt_runtime_deps():\n+        tar.add(path, \"rust-stage0/bin/\" + os.path.basename(path))\n+      tar.add(os.path.join(os.path.dirname(__file__), \"third-party\"),\n+              \"rust-stage0/bin/third-party\")\n \n     tar.close()\n \n@@ -202,59 +204,59 @@ def in_tar_name(fn):\n     return file1\n \n def curr_snapshot_rev():\n-    i = 0\n-    found_snap = False\n-    date = None\n-    rev = None\n+  i = 0\n+  found_snap = False\n+  date = None\n+  rev = None\n \n-    f = open(snapshotfile)\n-    for line in f.readlines():\n-        i += 1\n-        parsed = parse_line(i, line)\n-        if (not parsed): continue\n+  f = open(snapshotfile)\n+  for line in f.readlines():\n+    i += 1\n+    parsed = parse_line(i, line)\n+    if (not parsed): continue\n \n-        if parsed[\"type\"] == \"snapshot\":\n-            date = parsed[\"date\"]\n-            rev = parsed[\"rev\"]\n-            found_snap = True\n-            break\n+    if parsed[\"type\"] == \"snapshot\":\n+      date = parsed[\"date\"]\n+      rev = parsed[\"rev\"]\n+      found_snap = True\n+      break\n \n-    if not found_snap:\n-        raise Exception(\"no snapshot entries in file\")\n+  if not found_snap:\n+    raise Exception(\"no snapshot entries in file\")\n \n-    return (date, rev)\n+  return (date, rev)\n \n def determine_curr_snapshot(triple):\n-    i = 0\n-    platform = get_platform(triple)\n-\n-    found_file = False\n-    found_snap = False\n-    hsh = None\n-    date = None\n-    rev = None\n-\n-    f = open(snapshotfile)\n-    for line in f.readlines():\n-        i += 1\n-        parsed = parse_line(i, line)\n-        if (not parsed): continue\n-\n-        if found_snap and parsed[\"type\"] == \"file\":\n-            if parsed[\"platform\"] == platform:\n-                hsh = parsed[\"hash\"]\n-                found_file = True\n-                break;\n-        elif parsed[\"type\"] == \"snapshot\":\n-            date = parsed[\"date\"]\n-            rev = parsed[\"rev\"]\n-            found_snap = True\n-\n-    if not found_snap:\n-        raise Exception(\"no snapshot entries in file\")\n-\n-    if not found_file:\n-        raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n-                                        (platform, rev))\n-\n-    return full_snapshot_name(date, rev, platform, hsh)\n+  i = 0\n+  platform = get_platform(triple)\n+\n+  found_file = False\n+  found_snap = False\n+  hsh = None\n+  date = None\n+  rev = None\n+\n+  f = open(snapshotfile)\n+  for line in f.readlines():\n+    i += 1\n+    parsed = parse_line(i, line)\n+    if (not parsed): continue\n+\n+    if found_snap and parsed[\"type\"] == \"file\":\n+      if parsed[\"platform\"] == platform:\n+        hsh = parsed[\"hash\"]\n+        found_file = True\n+        break;\n+    elif parsed[\"type\"] == \"snapshot\":\n+      date = parsed[\"date\"]\n+      rev = parsed[\"rev\"]\n+      found_snap = True\n+\n+  if not found_snap:\n+    raise Exception(\"no snapshot entries in file\")\n+\n+  if not found_file:\n+    raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n+                    (platform, rev))\n+\n+  return full_snapshot_name(date, rev, platform, hsh)"}]}