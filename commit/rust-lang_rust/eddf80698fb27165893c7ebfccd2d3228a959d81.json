{"sha": "eddf80698fb27165893c7ebfccd2d3228a959d81", "node_id": "C_kwDOAAsO6NoAKGVkZGY4MDY5OGZiMjcxNjU4OTNjN2ViZmNjZDJkMzIyOGE5NTlkODE", "commit": {"author": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-12-29T01:38:23Z"}, "committer": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-12-29T01:43:30Z"}, "message": "Suggest `return`ing tail expressions in async fn's", "tree": {"sha": "3651789b4bff6f9db75195dd72d6141adf88fe6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3651789b4bff6f9db75195dd72d6141adf88fe6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eddf80698fb27165893c7ebfccd2d3228a959d81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEcJXCCpIkPbZRdwewlozZ1xyfu2wFAmHLvUUACgkQlozZ1xyf\nu2yHbAwAnQ6oj7/Lza75B7y/6C57GQKH9y8pWYxVbV1izOzJKegnvZwVoobHo7mO\nWiBj3eXkPqlL6vYxJIS0zJGdNvIEW9Jlwbw7TJxJTrIxvX83e1f1C+lXEiHwAX1X\nLargIJoG9v5DZxba7AjrMdHIHg8Oii3oyMm3c1UU8Z2hUlj4vIeZMjGQ9E4y0GfV\n5Z1XTPCk72Yf4GAz3z46u+Rs17KsN1nO9zAhlFXhUbgdZJWbOb1icQKwpyDXAvN0\n1z+BNxSS7iLWR8CHKZgckMqLB1+FMXwR2N5RpnLNCn3lTsLX2wIpvi1XEQFz8XJH\ntOpf6XMOPdnW5ybmUu6mdvzxH/E+Byqfl2rAL3OWRa/16+dZTAh+guOPs3n9PA4Q\nTV+HfnVtkhbeDc4KM9nbaJHOEpkIrrwzlfBmhoM5rCf9f47edyMED1K2gNrtaWdt\nH86G2xRB+WEoWx6TUvoSPbw/ssQP9S+tK0xNdg7lNFAnmERbUcm+gR7P/avPKs9X\nN4dleQDz\n=6+wL\n-----END PGP SIGNATURE-----", "payload": "tree 3651789b4bff6f9db75195dd72d6141adf88fe6f\nparent 83b15bfe1c15f325bc186ebfe3691b729ed59f2b\nauthor ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1640741903 -0600\ncommitter ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1640742210 -0600\n\nSuggest `return`ing tail expressions in async fn's\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eddf80698fb27165893c7ebfccd2d3228a959d81", "html_url": "https://github.com/rust-lang/rust/commit/eddf80698fb27165893c7ebfccd2d3228a959d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eddf80698fb27165893c7ebfccd2d3228a959d81/comments", "author": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b15bfe1c15f325bc186ebfe3691b729ed59f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b15bfe1c15f325bc186ebfe3691b729ed59f2b", "html_url": "https://github.com/rust-lang/rust/commit/83b15bfe1c15f325bc186ebfe3691b729ed59f2b"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "e8a0cc946b5e118d1ceba3bb1cd20f3c44953a7f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eddf80698fb27165893c7ebfccd2d3228a959d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddf80698fb27165893c7ebfccd2d3228a959d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=eddf80698fb27165893c7ebfccd2d3228a959d81", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Expr, ExprKind, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind};\n-use rustc_infer::infer;\n+use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n use rustc_span::symbol::{kw, sym};\n@@ -608,6 +608,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n+            let ty = match self.tcx.asyncness(fn_id.owner) {\n+                hir::IsAsync::Async => self.tcx.infer_ctxt().enter(|infcx| {\n+                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                        span_bug!(\n+                            fn_decl.output.span(),\n+                            \"failed to get output type of async function\"\n+                        )\n+                    })\n+                }),\n+                hir::IsAsync::NotAsync => ty,\n+            };\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion(\n                     \"you might have meant to return this value\","}]}