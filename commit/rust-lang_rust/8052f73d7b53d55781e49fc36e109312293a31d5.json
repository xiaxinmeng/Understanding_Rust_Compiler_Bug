{"sha": "8052f73d7b53d55781e49fc36e109312293a31d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNTJmNzNkN2I1M2Q1NTc4MWU0OWZjMzZlMTA5MzEyMjkzYTMxZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-19T01:09:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T01:09:25Z"}, "message": "Auto merge of #34879 - petrochenkov:fnptr, r=alexcrichton\n\nImplement traits for variadic function pointers\n\nCloses https://github.com/rust-lang/rust/issues/34874\ncc https://github.com/rust-lang/rust/pull/28268\n\nr? @alexcrichton", "tree": {"sha": "7bbbee90887b76f48d683362081e511a8be11363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbbee90887b76f48d683362081e511a8be11363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8052f73d7b53d55781e49fc36e109312293a31d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8052f73d7b53d55781e49fc36e109312293a31d5", "html_url": "https://github.com/rust-lang/rust/commit/8052f73d7b53d55781e49fc36e109312293a31d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8052f73d7b53d55781e49fc36e109312293a31d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbfcb471db0799a7d92d62e66cf44bbd68051675", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfcb471db0799a7d92d62e66cf44bbd68051675", "html_url": "https://github.com/rust-lang/rust/commit/bbfcb471db0799a7d92d62e66cf44bbd68051675"}, {"sha": "9c5039a128ba2fa69eb979c314f158aa680ff6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5039a128ba2fa69eb979c314f158aa680ff6a2", "html_url": "https://github.com/rust-lang/rust/commit/9c5039a128ba2fa69eb979c314f158aa680ff6a2"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "925cdfec900dbd6da769a2f4a24eeee6be972ee0", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8052f73d7b53d55781e49fc36e109312293a31d5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8052f73d7b53d55781e49fc36e109312293a31d5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8052f73d7b53d55781e49fc36e109312293a31d5", "patch": "@@ -571,12 +571,21 @@ macro_rules! fnptr_impls_safety_abi {\n }\n \n macro_rules! fnptr_impls_args {\n-    ($($Arg: ident),*) => {\n+    ($($Arg: ident),+) => {\n         fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n-    }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n+    };\n+    () => {\n+        // No variadic functions with 0 parameters\n+        fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n+    };\n }\n \n fnptr_impls_args! { }"}, {"sha": "e0a9f4e5d422c19f2c617b65132f645e5301c97f", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8052f73d7b53d55781e49fc36e109312293a31d5/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8052f73d7b53d55781e49fc36e109312293a31d5/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=8052f73d7b53d55781e49fc36e109312293a31d5", "patch": "@@ -171,3 +171,17 @@ fn test_unsized_unique() {\n     let zs: &mut [i32] = &mut [1, 2, 3];\n     assert!(ys == zs);\n }\n+\n+#[test]\n+fn test_variadic_fnptr() {\n+    use core::hash::{Hash, SipHasher};\n+    extern \"C\" {\n+        fn printf(_: *const u8, ...);\n+    }\n+    let p: unsafe extern \"C\" fn(*const u8, ...) = printf;\n+    let q = p.clone();\n+    assert_eq!(p, q);\n+    assert!(!(p < q));\n+    let mut s = SipHasher::new();\n+    assert_eq!(p.hash(&mut s), q.hash(&mut s));\n+}"}]}