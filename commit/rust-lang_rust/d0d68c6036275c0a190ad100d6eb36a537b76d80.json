{"sha": "d0d68c6036275c0a190ad100d6eb36a537b76d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZDY4YzYwMzYyNzVjMGExOTBhZDEwMGQ2ZWIzNmE1MzdiNzZkODA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-14T16:40:28Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-18T19:56:57Z"}, "message": "libcore: make a copyless io::BytesWriter", "tree": {"sha": "4af2555cec270032723f7a8cf0c563f87d2f59b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af2555cec270032723f7a8cf0c563f87d2f59b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d68c6036275c0a190ad100d6eb36a537b76d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d68c6036275c0a190ad100d6eb36a537b76d80", "html_url": "https://github.com/rust-lang/rust/commit/d0d68c6036275c0a190ad100d6eb36a537b76d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d68c6036275c0a190ad100d6eb36a537b76d80/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb35039fe83d6d13b5c7c08fe761ab85374c96d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb35039fe83d6d13b5c7c08fe761ab85374c96d0", "html_url": "https://github.com/rust-lang/rust/commit/eb35039fe83d6d13b5c7c08fe761ab85374c96d0"}], "stats": {"total": 265, "additions": 129, "deletions": 136}, "files": [{"sha": "11003129e82989e6176949d034b21e6a414e7f60", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -219,12 +219,8 @@ fn under(n: uint, it: fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-fn devnull() -> io::Writer { io::mem_buffer_writer(io::mem_buffer()) }\n-\n fn as_str(f: fn@(io::Writer)) -> ~str {\n-    let buf = io::mem_buffer();\n-    f(io::mem_buffer_writer(buf));\n-    io::mem_buffer_str(buf)\n+    io::with_str_writer(f)\n }\n \n fn check_variants_of_ast(crate: ast::crate, codemap: codemap::codemap,"}, {"sha": "ed87816a01bd1a63b711bf43ad79429727c10d50", "filename": "src/libcore/io.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -670,9 +670,12 @@ fn stderr() -> Writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n fn print(s: &str) { stdout().write_str(s); }\n fn println(s: &str) { stdout().write_line(s); }\n \n-type MemBuffer = @{buf: DVec<u8>, mut pos: uint};\n+struct BytesWriter {\n+    buf: DVec<u8>,\n+    mut pos: uint,\n+}\n \n-impl MemBuffer: Writer {\n+impl @BytesWriter: Writer {\n     fn write(v: &[const u8]) {\n         do self.buf.swap |buf| {\n             let mut buf <- buf;\n@@ -701,27 +704,24 @@ impl MemBuffer: Writer {\n     fn get_type() -> WriterType { File }\n }\n \n-fn mem_buffer() -> MemBuffer {\n-    @{buf: DVec(), mut pos: 0u}\n+fn BytesWriter() -> @BytesWriter {\n+    @BytesWriter { buf: DVec(), mut pos: 0u }\n }\n-fn mem_buffer_writer(b: MemBuffer) -> Writer { b as Writer }\n-fn mem_buffer_buf(b: MemBuffer) -> ~[u8] { b.buf.get() }\n-fn mem_buffer_str(b: MemBuffer) -> ~str {\n-    str::from_bytes(b.buf.get())\n+\n+fn with_bytes_writer(f: fn(Writer)) -> ~[u8] {\n+    let wr = BytesWriter();\n+    f(wr as Writer);\n+    wr.buf.check_out(|buf| buf)\n }\n \n fn with_str_writer(f: fn(Writer)) -> ~str {\n-    let buf = mem_buffer();\n-    let wr = mem_buffer_writer(buf);\n-    f(wr);\n-    io::mem_buffer_str(buf)\n-}\n+    let mut v = with_bytes_writer(f);\n+\n+    // Make sure the vector has a trailing null and is proper utf8.\n+    vec::push(v, 0);\n+    assert str::is_utf8(v);\n \n-fn with_buf_writer(f: fn(Writer)) -> ~[u8] {\n-    let buf = mem_buffer();\n-    let wr = mem_buffer_writer(buf);\n-    f(wr);\n-    io::mem_buffer_buf(buf)\n+    unsafe { move ::unsafe::transmute(v) }\n }\n \n // Utility functions\n@@ -946,18 +946,18 @@ mod tests {\n     }\n \n     #[test]\n-    fn mem_buffer_overwrite() {\n-        let mbuf = mem_buffer();\n-        mbuf.write(~[0u8, 1u8, 2u8, 3u8]);\n-        assert mem_buffer_buf(mbuf) == ~[0u8, 1u8, 2u8, 3u8];\n-        mbuf.seek(-2, SeekCur);\n-        mbuf.write(~[4u8, 5u8, 6u8, 7u8]);\n-        assert mem_buffer_buf(mbuf) == ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8];\n-        mbuf.seek(-2, SeekEnd);\n-        mbuf.write(~[8u8]);\n-        mbuf.seek(1, SeekSet);\n-        mbuf.write(~[9u8]);\n-        assert mem_buffer_buf(mbuf) == ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8];\n+    fn bytes_buffer_overwrite() {\n+        let wr = BytesWriter();\n+        wr.write(~[0u8, 1u8, 2u8, 3u8]);\n+        assert wr.buf.borrow(|buf| buf == ~[0u8, 1u8, 2u8, 3u8]);\n+        wr.seek(-2, SeekCur);\n+        wr.write(~[4u8, 5u8, 6u8, 7u8]);\n+        assert wr.buf.borrow(|buf| buf == ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8]);\n+        wr.seek(-2, SeekEnd);\n+        wr.write(~[8u8]);\n+        wr.seek(1, SeekSet);\n+        wr.write(~[9u8]);\n+        assert wr.buf.borrow(|buf| buf == ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8]);\n     }\n }\n "}, {"sha": "ca3eef419961f77ad69ef6313206762bc9ba8d86", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -99,10 +99,9 @@ pure fn refcount<T>(+t: @T) -> uint {\n \n pure fn log_str<T>(t: T) -> ~str {\n     unsafe {\n-        let buffer = io::mem_buffer();\n-        let writer = io::mem_buffer_writer(buffer);\n-        repr::write_repr(writer, &t);\n-        return io::mem_buffer_str(buffer);  // XXX: Extra malloc and copy.\n+        do io::with_str_writer |wr| {\n+            repr::write_repr(wr, &t)\n+        }\n     }\n }\n "}, {"sha": "680003246239a0c8329bac9daa7579f34cb608e4", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -373,10 +373,10 @@ trait ToBytes {\n \n impl<A: IterBytes> A: ToBytes {\n     fn to_bytes(lsb0: bool) -> ~[u8] {\n-        let buf = io::mem_buffer();\n-        for self.iter_bytes(lsb0) |bytes| {\n-            buf.write(bytes)\n+        do io::with_bytes_writer |wr| {\n+            for self.iter_bytes(lsb0) |bytes| {\n+                wr.write(bytes)\n+            }\n         }\n-        io::mem_buffer_buf(buf)\n     }\n }"}, {"sha": "db41c428cbe6253cf0b35788f98d29f7f9286505", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -631,10 +631,11 @@ fn test_option_int() {\n \n     fn test_v(v: Option<int>) {\n         debug!(\"v == %?\", v);\n-        let mbuf = io::mem_buffer();\n-        let ebml_w = ebml::Writer(io::mem_buffer_writer(mbuf));\n-        serialize_0(ebml_w, v);\n-        let ebml_doc = ebml::Doc(@io::mem_buffer_buf(mbuf));\n+        let bytes = do io::with_bytes_writer |wr| {\n+            let ebml_w = ebml::Writer(wr);\n+            serialize_0(ebml_w, v);\n+        };\n+        let ebml_doc = ebml::Doc(@bytes);\n         let deser = ebml_deserializer(ebml_doc);\n         let v1 = deserialize_0(deser);\n         debug!(\"v1 == %?\", v1);"}, {"sha": "76b6310c85321787d44b3a801cbb2b3a88aeb883", "filename": "src/libstd/test.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -233,36 +233,33 @@ fn print_failures(st: ConsoleTestState) {\n \n #[test]\n fn should_sort_failures_before_printing_them() {\n-    let buffer = io::mem_buffer();\n-    let writer = io::mem_buffer_writer(buffer);\n-\n-    let test_a = {\n-        name: ~\"a\",\n-        testfn: fn~() { },\n-        ignore: false,\n-        should_fail: false\n-    };\n-\n-    let test_b = {\n-        name: ~\"b\",\n-        testfn: fn~() { },\n-        ignore: false,\n-        should_fail: false\n-    };\n+    let s = do io::with_str_writer |wr| {\n+        let test_a = {\n+            name: ~\"a\",\n+            testfn: fn~() { },\n+            ignore: false,\n+            should_fail: false\n+        };\n \n-    let st =\n-        @{out: writer,\n-          log_out: option::None,\n-          use_color: false,\n-          mut total: 0u,\n-          mut passed: 0u,\n-          mut failed: 0u,\n-          mut ignored: 0u,\n-          mut failures: ~[test_b, test_a]};\n+        let test_b = {\n+            name: ~\"b\",\n+            testfn: fn~() { },\n+            ignore: false,\n+            should_fail: false\n+        };\n \n-    print_failures(st);\n+        let st =\n+            @{out: wr,\n+              log_out: option::None,\n+              use_color: false,\n+              mut total: 0u,\n+              mut passed: 0u,\n+              mut failed: 0u,\n+              mut ignored: 0u,\n+              mut failures: ~[test_b, test_a]};\n \n-    let s = io::mem_buffer_str(buffer);\n+        print_failures(st);\n+    };\n \n     let apos = option::get(str::find_str(s, ~\"a\"));\n     let bpos = option::get(str::find_str(s, ~\"b\"));"}, {"sha": "4998dc7af6c59999e873e8de6e8df42fcbb45b1f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -125,13 +125,13 @@ fn path_to_str(&&p: @ast::path, intr: ident_interner) -> ~str {\n \n fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n               params: ~[ast::ty_param], intr: ident_interner) -> ~str {\n-    let buffer = io::mem_buffer();\n-    let s = rust_printer(io::mem_buffer_writer(buffer), intr);\n-    print_fn(s, decl, None, name, params, None);\n-    end(s); // Close the head box\n-    end(s); // Close the outer box\n-    eof(s.s);\n-    io::mem_buffer_str(buffer)\n+    do io::with_str_writer |wr| {\n+        let s = rust_printer(wr, intr);\n+        print_fn(s, decl, None, name, params, None);\n+        end(s); // Close the head box\n+        end(s); // Close the outer box\n+        eof(s.s);\n+    }\n }\n \n #[test]\n@@ -148,15 +148,15 @@ fn test_fun_to_str() {\n }\n \n fn block_to_str(blk: ast::blk, intr: ident_interner) -> ~str {\n-    let buffer = io::mem_buffer();\n-    let s = rust_printer(io::mem_buffer_writer(buffer), intr);\n-    // containing cbox, will be closed by print-block at }\n-    cbox(s, indent_unit);\n-    // head-ibox, will be closed by print-block after {\n-    ibox(s, 0u);\n-    print_block(s, blk);\n-    eof(s.s);\n-    io::mem_buffer_str(buffer)\n+    do io::with_str_writer |wr| {\n+        let s = rust_printer(wr, intr);\n+        // containing cbox, will be closed by print-block at }\n+        cbox(s, indent_unit);\n+        // head-ibox, will be closed by print-block after {\n+        ibox(s, 0u);\n+        print_block(s, blk);\n+        eof(s.s);\n+    }\n }\n \n fn meta_item_to_str(mi: @ast::meta_item, intr: ident_interner) -> ~str {\n@@ -2026,11 +2026,11 @@ fn print_string(s: ps, st: ~str) {\n }\n \n fn to_str<T>(t: T, f: fn@(ps, T), intr: ident_interner) -> ~str {\n-    let buffer = io::mem_buffer();\n-    let s = rust_printer(io::mem_buffer_writer(buffer), intr);\n-    f(s, t);\n-    eof(s.s);\n-    io::mem_buffer_str(buffer)\n+    do io::with_str_writer |wr| {\n+        let s = rust_printer(wr, intr);\n+        f(s, t);\n+        eof(s.s);\n+    }\n }\n \n fn next_comment(s: ps) -> Option<comments::cmnt> {"}, {"sha": "6b8a28235de431a87d5ace81124dbb68c439a250", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -68,7 +68,6 @@ type stats = {\n enum encode_ctxt = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n-    buf: io::MemBuffer,\n     stats: stats,\n     reachable: HashMap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n@@ -1089,7 +1088,7 @@ const metadata_encoding_version : &[u8] = &[0x72, //'r' as u8,\n                                             0, 0, 0, 1 ];\n \n fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n-    let buf = io::mem_buffer();\n+    let wr = io::BytesWriter();\n     let stats =\n         {mut inline_bytes: 0,\n          mut attr_bytes: 0,\n@@ -1102,7 +1101,6 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n     let ecx: @encode_ctxt = @encode_ctxt({\n         diag: parms.diag,\n         tcx: parms.tcx,\n-        buf: buf,\n         stats: move stats,\n         reachable: parms.reachable,\n         reexports: parms.reexports,\n@@ -1115,37 +1113,36 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n         type_abbrevs: ty::new_ty_hash()\n      });\n \n-    let buf_w = io::mem_buffer_writer(buf);\n-    let ebml_w = ebml::Writer(buf_w);\n+    let ebml_w = ebml::Writer(wr as io::Writer);\n \n     encode_hash(ebml_w, ecx.link_meta.extras_hash);\n \n-    let mut i = buf.pos;\n+    let mut i = wr.pos;\n     let crate_attrs = synthesize_crate_attrs(ecx, crate);\n     encode_attributes(ebml_w, crate_attrs);\n-    ecx.stats.attr_bytes = buf.pos - i;\n+    ecx.stats.attr_bytes = wr.pos - i;\n \n-    i = buf.pos;\n+    i = wr.pos;\n     encode_crate_deps(ecx, ebml_w, ecx.cstore);\n-    ecx.stats.dep_bytes = buf.pos - i;\n+    ecx.stats.dep_bytes = wr.pos - i;\n \n     // Encode and index the items.\n     ebml_w.start_tag(tag_items);\n-    i = buf.pos;\n+    i = wr.pos;\n     let items_index = encode_info_for_items(ecx, ebml_w, crate);\n-    ecx.stats.item_bytes = buf.pos - i;\n+    ecx.stats.item_bytes = wr.pos - i;\n \n-    i = buf.pos;\n+    i = wr.pos;\n     let items_buckets = create_index(items_index, hash_node_id);\n     encode_index(ebml_w, items_buckets, write_int);\n-    ecx.stats.index_bytes = buf.pos - i;\n+    ecx.stats.index_bytes = wr.pos - i;\n     ebml_w.end_tag();\n \n-    ecx.stats.total_bytes = buf.pos;\n+    ecx.stats.total_bytes = wr.pos;\n \n     if (parms.tcx.sess.meta_stats()) {\n \n-        do buf.buf.borrow |v| {\n+        do wr.buf.borrow |v| {\n             do v.each |e| {\n                 if e == 0 {\n                     ecx.stats.zero_bytes += 1;\n@@ -1166,7 +1163,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n \n     // Pad this, since something (LLVM, presumably) is cutting off the\n     // remaining % 4 bytes.\n-    buf_w.write(&[0u8, 0u8, 0u8, 0u8]);\n+    wr.write(&[0u8, 0u8, 0u8, 0u8]);\n \n     // FIXME #3396: weird bug here, for reasons unclear this emits random\n     // looking bytes (mostly 0x1) if we use the version byte-array constant\n@@ -1178,7 +1175,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n \n     (do str::as_bytes(~\"rust\\x00\\x00\\x00\\x01\") |bytes| {\n         vec::slice(bytes, 0, 8)\n-    }) + flate::deflate_bytes(io::mem_buffer_buf(buf))\n+    }) + flate::deflate_bytes(wr.buf.check_out(|buf| buf))\n }\n \n // Get the encoded string for a type\n@@ -1188,9 +1185,9 @@ fn encoded_ty(tcx: ty::ctxt, t: ty::t) -> ~str {\n                tcx: tcx,\n                reachable: |_id| false,\n                abbrevs: tyencode::ac_no_abbrevs};\n-    let buf = io::mem_buffer();\n-    tyencode::enc_ty(io::mem_buffer_writer(buf), cx, t);\n-    return io::mem_buffer_str(buf);\n+    do io::with_str_writer |wr| {\n+        tyencode::enc_ty(wr, cx, t);\n+    }\n }\n \n "}, {"sha": "6dc9810e296c676902b8a6cc069210f386cf8574", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -45,12 +45,13 @@ fn enc_ty(w: io::Writer, cx: @ctxt, t: ty::t) {\n     match cx.abbrevs {\n       ac_no_abbrevs => {\n         let result_str = match cx.tcx.short_names_cache.find(t) {\n-          Some(s) => *s,\n-          None => {\n-            let buf = io::mem_buffer();\n-            enc_sty(io::mem_buffer_writer(buf), cx, ty::get(t).sty);\n-            cx.tcx.short_names_cache.insert(t, @io::mem_buffer_str(buf));\n-            io::mem_buffer_str(buf)\n+            Some(s) => *s,\n+            None => {\n+                let s = do io::with_str_writer |wr| {\n+                    enc_sty(wr, cx, ty::get(t).sty);\n+                };\n+                cx.tcx.short_names_cache.insert(t, @s);\n+                s\n           }\n         };\n         w.write_str(result_str);"}, {"sha": "4678b1cb90a73fc3069c70ec14bed9f3d9396217", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -1012,10 +1012,11 @@ fn mk_ctxt() -> fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: @ast::item) {\n-    let mbuf = io::mem_buffer();\n-    let ebml_w = ebml::Writer(io::mem_buffer_writer(mbuf));\n-    encode_item_ast(ebml_w, in_item);\n-    let ebml_doc = ebml::Doc(@io::mem_buffer_buf(mbuf));\n+    let bytes = do io::with_bytes_writer |wr| {\n+        let ebml_w = ebml::Writer(wr);\n+        encode_item_ast(ebml_w, in_item);\n+    };\n+    let ebml_doc = ebml::Doc(@bytes);\n     let out_item = decode_item_ast(ebml_doc);\n \n     let exp_str ="}, {"sha": "66299089df93a9a3c5daaf5f954e3d894c7b579a", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -85,14 +85,14 @@ fn main() {\n \n fn check_pp<T>(cx: fake_ext_ctxt,\n                expr: T, f: fn(pprust::ps, T), expect: ~str) {\n-    let buf = mem_buffer();\n-    let pp = pprust::rust_printer(buf as io::Writer,cx.parse_sess().interner);\n-    f(pp, expr);\n-    pp::eof(pp.s);\n-    let str = mem_buffer_str(buf);\n-    stdout().write_line(str);\n+    let s = do io::with_str_writer |wr| {\n+        let pp = pprust::rust_printer(wr, cx.parse_sess().interner);\n+        f(pp, expr);\n+        pp::eof(pp.s);\n+    };\n+    stdout().write_line(s);\n     if expect != ~\"\" {\n-        error!(\"expect: '%s', got: '%s'\", expect, str);\n+        error!(\"expect: '%s', got: '%s'\", expect, s);\n         assert str == expect;\n     }\n }"}, {"sha": "034d906741f7e7abc43d13da3994dfe5fe53822b", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d68c6036275c0a190ad100d6eb36a537b76d80/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=d0d68c6036275c0a190ad100d6eb36a537b76d80", "patch": "@@ -21,10 +21,11 @@ fn test_ser_and_deser<A:Eq>(a1: A,\n     assert s == expected;\n \n     // check the EBML serializer:\n-    let buf = io::mem_buffer();\n-    let w = ebml::Writer(buf as io::Writer);\n-    ebml_ser_fn(w, a1);\n-    let d = ebml::Doc(@io::mem_buffer_buf(buf));\n+    let bytes = do io::with_bytes_writer |wr| {\n+        let w = ebml::Writer(wr);\n+        ebml_ser_fn(w, a1);\n+    };\n+    let d = ebml::Doc(@bytes);\n     let a2 = ebml_deser_fn(ebml::ebml_deserializer(d));\n     io::print(~\"\\na1 = \");\n     io_ser_fn(io::stdout(), a1);"}]}