{"sha": "37338b8d996b05864d74d0a71b2c173bc41f890d", "node_id": "C_kwDOAAsO6NoAKDM3MzM4YjhkOTk2YjA1ODY0ZDc0ZDBhNzFiMmMxNzNiYzQxZjg5MGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T05:11:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T05:11:54Z"}, "message": "Rollup merge of #108500 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nr? ``@ghost``", "tree": {"sha": "66a1325a964659532db9a68740c851dec205bf63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a1325a964659532db9a68740c851dec205bf63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37338b8d996b05864d74d0a71b2c173bc41f890d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/DuaCRBK7hj4Ov3rIwAA8kgIAEDcdShLjprd+yhQ3hIz46k3\ns+WCmItzHl/1PBh/vzNtkChBzqEOq/J3+gheF+Z98aDpfBfe/3gUdgR69sLGbU+p\ng52iNO+cGlVRkP+vsteB62lP+8/LDyN22k3g62RCooS3mmrVjJFyCDvEGpUT5NaC\n+20PsN5MhN465lLQIT9O1htWVLqDtjlBPcsPUTn78wGkNrqs2xPQNfOSTsUYEQ6F\n3wram3gTXKAtX+o/uw2+3gXLDrwwQOtiZvLg9VsdY6fCUmByfEObuPRL055O4OCx\n8X7DKoNPNyAjWDk8GUxoeGFWK18nxSmVUJBd26FQWu0khVpWrSHVwBsbsjqFVew=\n=gZFD\n-----END PGP SIGNATURE-----\n", "payload": "tree 66a1325a964659532db9a68740c851dec205bf63\nparent c813994f7af00772e9aa891467de5a675c1de4d1\nparent 3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677474714 +0100\ncommitter GitHub <noreply@github.com> 1677474714 +0100\n\nRollup merge of #108500 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nr? ``@ghost``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37338b8d996b05864d74d0a71b2c173bc41f890d", "html_url": "https://github.com/rust-lang/rust/commit/37338b8d996b05864d74d0a71b2c173bc41f890d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37338b8d996b05864d74d0a71b2c173bc41f890d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c813994f7af00772e9aa891467de5a675c1de4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c813994f7af00772e9aa891467de5a675c1de4d1", "html_url": "https://github.com/rust-lang/rust/commit/c813994f7af00772e9aa891467de5a675c1de4d1"}, {"sha": "3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "html_url": "https://github.com/rust-lang/rust/commit/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827"}], "stats": {"total": 329, "additions": 274, "deletions": 55}, "files": [{"sha": "c4704fb0dd593a1f5bcc7da60d20a8e7ef0412fa", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -444,7 +444,7 @@ dependencies = [\n  \"directories\",\n  \"rustc-build-sysroot\",\n  \"rustc-workspace-hack\",\n- \"rustc_tools_util 0.2.1\",\n+ \"rustc_tools_util\",\n  \"rustc_version\",\n  \"serde\",\n  \"serde_json\",\n@@ -738,7 +738,7 @@ dependencies = [\n  \"regex\",\n  \"rustc-semver\",\n  \"rustc-workspace-hack\",\n- \"rustc_tools_util 0.3.0\",\n+ \"rustc_tools_util\",\n  \"semver\",\n  \"serde\",\n  \"syn\",\n@@ -4725,12 +4725,6 @@ dependencies = [\n  \"tracing\",\n ]\n \n-[[package]]\n-name = \"rustc_tools_util\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n-\n [[package]]\n name = \"rustc_tools_util\"\n version = \"0.3.0\""}, {"sha": "476075e9c914d3fc115d052296453399ce05df37", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -242,6 +242,13 @@ josh-proxy --local=$HOME/.cache/josh --remote=https://github.com --no-background\n \n This uses a directory `$HOME/.cache/josh` as a cache, to speed up repeated pulling/pushing.\n \n+To make josh push via ssh instead of https, you can add the following to your `.gitconfig`:\n+\n+```toml\n+[url \"git@github.com:\"]\n+    pushInsteadOf = https://github.com/\n+```\n+\n ### Importing changes from the rustc repo\n \n Josh needs to be running, as described above."}, {"sha": "1086d0481c83556ef8a0af77171fbd19ded2da2d", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -213,7 +213,9 @@ degree documented below):\n - The best-supported target is `x86_64-unknown-linux-gnu`. Miri releases are\n   blocked on things working with this target. Most other Linux targets should\n   also work well; we do run the test suite on `i686-unknown-linux-gnu` as a\n-  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target.\n+  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target, as\n+  well as the ARM targets `aarch64-unknown-linux-gnu` and\n+  `arm-unknown-linux-gnueabi`.\n - `x86_64-apple-darwin` should work basically as well as Linux. We also test\n   `aarch64-apple-darwin`. However, we might ship Miri with a nightly even when\n   some features on these targets regress.\n@@ -590,7 +592,7 @@ extern \"Rust\" {\n     /// `out` must point to at least `out_size` many bytes, and the result will be stored there\n     /// with a null terminator.\n     /// Returns 0 if the `out` buffer was large enough, and the required size otherwise.\n-    fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+    fn miri_host_to_target_path(path: *const std::ffi::c_char, out: *mut std::ffi::c_char, out_size: usize) -> usize;\n }\n ```\n "}, {"sha": "76badcf94afb3f5ca400467308848a42630a0cf2", "filename": "src/tools/miri/cargo-miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -193,9 +193,9 @@ checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n [[package]]\n name = \"rustc_tools_util\"\n-version = \"0.2.1\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n+checksum = \"8ba09476327c4b70ccefb6180f046ef588c26a24cf5d269a9feba316eb4f029f\"\n \n [[package]]\n name = \"rustc_version\""}, {"sha": "09079dbb818be305105bb53447eece5817857802", "filename": "src/tools/miri/cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -30,4 +30,4 @@ rustc-workspace-hack = \"1.0.0\"\n serde = { version = \"*\", features = [\"derive\"] }\n \n [build-dependencies]\n-rustc_tools_util = \"0.2\"\n+rustc_tools_util = \"0.3\""}, {"sha": "52e2a083512c4ddb8a6cafecf7ceb47d7f6ebdb0", "filename": "src/tools/miri/cargo-miri/build.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -2,12 +2,5 @@ fn main() {\n     // Don't rebuild miri when nothing changed.\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     // gather version info\n-    println!(\n-        \"cargo:rustc-env=GIT_HASH={}\",\n-        rustc_tools_util::get_commit_hash().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=COMMIT_DATE={}\",\n-        rustc_tools_util::get_commit_date().unwrap_or_default()\n-    );\n+    rustc_tools_util::setup_version_info!();\n }"}, {"sha": "60450d0981545ce731864c6b7455239fe2d452d1", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -104,6 +104,7 @@ run_tests\n case $HOST_TARGET in\n   x86_64-unknown-linux-gnu)\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n+    MIRI_TEST_TARGET=aarch64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n@@ -118,6 +119,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n     ;;\n   i686-pc-windows-msvc)\n+    MIRI_TEST_TARGET=arm-unknown-linux-gnueabi run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=x86_64-pc-windows-gnu run_tests\n     ;;"}, {"sha": "53ec1ba0821b02a7c0d07bee09a2d4e256048e86", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -1 +1 @@\n-c54c8cbac882e149e04a9e1f2d146fd548ae30ae\n+c4e0cd966062ca67daed20775f4e8a60c28e57df"}, {"sha": "b766916402e4f5689c7dbb75eb1ad40fb52f2b6e", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -148,8 +148,7 @@ impl NewPermission {\n             NewPermission::Uniform {\n                 perm: Permission::Unique,\n                 access: Some(AccessKind::Write),\n-                protector: (kind == RetagKind::FnEntry)\n-                    .then_some(ProtectorKind::WeakProtector),\n+                protector: (kind == RetagKind::FnEntry).then_some(ProtectorKind::WeakProtector),\n             }\n         } else {\n             // `!Unpin` boxes do not get `noalias` nor `dereferenceable`."}, {"sha": "f64f216520f00244ad8f8a9e0887e9355bc0c5b2", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -13,6 +13,7 @@\n #![allow(\n     clippy::collapsible_else_if,\n     clippy::collapsible_if,\n+    clippy::if_same_then_else,\n     clippy::comparison_chain,\n     clippy::enum_variant_names,\n     clippy::field_reassign_with_default,\n@@ -21,7 +22,7 @@\n     clippy::single_match,\n     clippy::useless_format,\n     clippy::derive_partial_eq_without_eq,\n-    clippy::derive_hash_xor_eq,\n+    clippy::derived_hash_with_manual_eq,\n     clippy::too_many_arguments,\n     clippy::type_complexity,\n     clippy::single_element_loop,"}, {"sha": "8bbf9f87b43e51652f8ef17349e0f659a42da9ad", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -477,7 +477,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n-        let local_crates = helpers::get_local_crates(layout_cx.tcx);\n+        let tcx = layout_cx.tcx;\n+        let local_crates = helpers::get_local_crates(tcx);\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n         let profiler = config.measureme_out.as_ref().map(|out| {\n@@ -486,10 +487,13 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instanciate_global_state(config));\n         let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n+        // Determinine page size, stack address, and stack size.\n+        // These values are mostly meaningless, but the stack address is also where we start\n+        // allocating physical integer addresses for all allocations.\n         let page_size = if let Some(page_size) = config.page_size {\n             page_size\n         } else {\n-            let target = &layout_cx.tcx.sess.target;\n+            let target = &tcx.sess.target;\n             match target.arch.as_ref() {\n                 \"wasm32\" | \"wasm64\" => 64 * 1024, // https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\n                 \"aarch64\" =>\n@@ -504,10 +508,12 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 _ => 4 * 1024,\n             }\n         };\n-        let stack_addr = page_size * 32;\n-        let stack_size = page_size * 16;\n+        // On 16bit targets, 32 pages is more than the entire address space!\n+        let stack_addr = if tcx.pointer_size().bits() < 32 { page_size } else { page_size * 32 };\n+        let stack_size =\n+            if tcx.pointer_size().bits() < 32 { page_size * 4 } else { page_size * 16 };\n         MiriMachine {\n-            tcx: layout_cx.tcx,\n+            tcx,\n             borrow_tracker,\n             data_race,\n             intptrcast: RefCell::new(intptrcast::GlobalStateInner::new(config, stack_addr)),\n@@ -902,8 +908,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n             };\n             let (shim_size, shim_align, _kind) = ecx.get_alloc_info(alloc_id);\n             let def_ty = ecx.tcx.type_of(def_id).subst_identity();\n-            let extern_decl_layout =\n-                ecx.tcx.layout_of(ty::ParamEnv::empty().and(def_ty)).unwrap();\n+            let extern_decl_layout = ecx.tcx.layout_of(ty::ParamEnv::empty().and(def_ty)).unwrap();\n             if extern_decl_layout.size != shim_size || extern_decl_layout.align.abi != shim_align {\n                 throw_unsup_format!(\n                     \"`extern` static `{name}` from crate `{krate}` has been declared \\"}, {"sha": "03275ed4ed163cbeb7f9837716a50a0071d6aba1", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -885,6 +885,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     }\n                 }\n             }\n+            \"llvm.arm.hint\" if this.tcx.sess.target.arch == \"arm\" => {\n+                let [arg] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n+                let arg = this.read_scalar(arg)?.to_i32()?;\n+                match arg {\n+                    // YIELD\n+                    1 => {\n+                        this.yield_active_thread();\n+                    }\n+                    _ => {\n+                        throw_unsup_format!(\"unsupported llvm.arm.hint argument {}\", arg);\n+                    }\n+                }\n+            }\n \n             // Platform-specific shims\n             _ =>"}, {"sha": "fd4927fa10ce39b876f8e4966def8d25e5e476eb", "filename": "src/tools/miri/src/shims/unix/linux/fd.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -7,6 +7,8 @@ use socketpair::SocketPair;\n \n use shims::unix::fs::EvalContextExt as _;\n \n+use std::cell::Cell;\n+\n pub mod epoll;\n pub mod event;\n pub mod socketpair;\n@@ -101,6 +103,60 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n     }\n \n+    /// The `epoll_wait()` system call waits for events on the `Epoll`\n+    /// instance referred to by the file descriptor `epfd`. The buffer\n+    /// pointed to by `events` is used to return information from the ready\n+    /// list about file descriptors in the interest list that have some\n+    /// events available. Up to `maxevents` are returned by `epoll_wait()`.\n+    /// The `maxevents` argument must be greater than zero.\n+\n+    /// The `timeout` argument specifies the number of milliseconds that\n+    /// `epoll_wait()` will block. Time is measured against the\n+    /// CLOCK_MONOTONIC clock.\n+\n+    /// A call to `epoll_wait()` will block until either:\n+    /// \u2022 a file descriptor delivers an event;\n+    /// \u2022 the call is interrupted by a signal handler; or\n+    /// \u2022 the timeout expires.\n+\n+    /// Note that the timeout interval will be rounded up to the system\n+    /// clock granularity, and kernel scheduling delays mean that the\n+    /// blocking interval may overrun by a small amount. Specifying a\n+    /// timeout of -1 causes `epoll_wait()` to block indefinitely, while\n+    /// specifying a timeout equal to zero cause `epoll_wait()` to return\n+    /// immediately, even if no events are available.\n+    ///\n+    /// On success, `epoll_wait()` returns the number of file descriptors\n+    /// ready for the requested I/O, or zero if no file descriptor became\n+    /// ready during the requested timeout milliseconds. On failure,\n+    /// `epoll_wait()` returns -1 and errno is set to indicate the error.\n+    ///\n+    /// <https://man7.org/linux/man-pages/man2/epoll_wait.2.html>\n+    fn epoll_wait(\n+        &mut self,\n+        epfd: &OpTy<'tcx, Provenance>,\n+        events: &OpTy<'tcx, Provenance>,\n+        maxevents: &OpTy<'tcx, Provenance>,\n+        timeout: &OpTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n+        let this = self.eval_context_mut();\n+\n+        let epfd = this.read_scalar(epfd)?.to_i32()?;\n+        let _events = this.read_scalar(events)?.to_pointer(this)?;\n+        let _maxevents = this.read_scalar(maxevents)?.to_i32()?;\n+        let _timeout = this.read_scalar(timeout)?.to_i32()?;\n+\n+        let numevents = 0;\n+        if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n+            let _epfd = epfd.as_epoll_handle()?;\n+\n+            // FIXME return number of events ready when scheme for marking events ready exists\n+            Ok(Scalar::from_i32(numevents))\n+        } else {\n+            Ok(Scalar::from_i32(this.handle_not_found()?))\n+        }\n+    }\n+\n     /// This function creates an `Event` that is used as an event wait/notify mechanism by\n     /// user-space applications, and by the kernel to notify user-space applications of events.\n     /// The `Event` contains an `u64` counter maintained by the kernel. The counter is initialized\n@@ -142,7 +198,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let fh = &mut this.machine.file_handler;\n-        let fd = fh.insert_fd(Box::new(Event { val }));\n+        let fd = fh.insert_fd(Box::new(Event { val: Cell::new(val.into()) }));\n         Ok(Scalar::from_i32(fd))\n     }\n "}, {"sha": "b28a6e0c56eca8e27eba5e48fde7b3157d472dfe", "filename": "src/tools/miri/src/shims/unix/linux/fd/event.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -2,6 +2,7 @@ use crate::shims::unix::fs::FileDescriptor;\n \n use rustc_const_eval::interpret::InterpResult;\n \n+use std::cell::Cell;\n use std::io;\n \n /// A kind of file descriptor created by `eventfd`.\n@@ -13,7 +14,9 @@ use std::io;\n /// <https://man.netbsd.org/eventfd.2>\n #[derive(Debug)]\n pub struct Event {\n-    pub val: u32,\n+    /// The object contains an unsigned 64-bit integer (uint64_t) counter that is maintained by the\n+    /// kernel. This counter is initialized with the value specified in the argument initval.\n+    pub val: Cell<u64>,\n }\n \n impl FileDescriptor for Event {\n@@ -22,7 +25,7 @@ impl FileDescriptor for Event {\n     }\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n-        Ok(Box::new(Event { val: self.val }))\n+        Ok(Box::new(Event { val: self.val.clone() }))\n     }\n \n     fn is_tty(&self) -> bool {\n@@ -35,4 +38,32 @@ impl FileDescriptor for Event {\n     ) -> InterpResult<'tcx, io::Result<i32>> {\n         Ok(Ok(0))\n     }\n+\n+    /// A write call adds the 8-byte integer value supplied in\n+    /// its buffer to the counter.  The maximum value that may be\n+    /// stored in the counter is the largest unsigned 64-bit value\n+    /// minus 1 (i.e., 0xfffffffffffffffe).  If the addition would\n+    /// cause the counter's value to exceed the maximum, then the\n+    /// write either blocks until a read is performed on the\n+    /// file descriptor, or fails with the error EAGAIN if the\n+    /// file descriptor has been made nonblocking.\n+\n+    /// A write fails with the error EINVAL if the size of the\n+    /// supplied buffer is less than 8 bytes, or if an attempt is\n+    /// made to write the value 0xffffffffffffffff.\n+    ///\n+    /// FIXME: use endianness\n+    fn write<'tcx>(\n+        &self,\n+        _communicate_allowed: bool,\n+        bytes: &[u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        let v1 = self.val.get();\n+        // FIXME handle blocking when addition results in exceeding the max u64 value\n+        // or fail with EAGAIN if the file descriptor is nonblocking.\n+        let v2 = v1.checked_add(u64::from_be_bytes(bytes.try_into().unwrap())).unwrap();\n+        self.val.set(v2);\n+        assert_eq!(8, bytes.len());\n+        Ok(Ok(8))\n+    }\n }"}, {"sha": "f4e7824d91df47583e64493b7763677c3d2b573c", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -55,6 +55,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let result = this.epoll_ctl(epfd, op, fd, event)?;\n                 this.write_scalar(result, dest)?;\n             }\n+            \"epoll_wait\" => {\n+                let [epfd, events, maxevents, timeout] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.epoll_wait(epfd, events, maxevents, timeout)?;\n+                this.write_scalar(result, dest)?;\n+            }\n             \"eventfd\" => {\n                 let [val, flag] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "048577ef15a611f55fac354d7876fa1c81c94d16", "filename": "src/tools/miri/test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -23,16 +23,16 @@ fn main() {\n     // (We rely on the test runner to always disable isolation when passing no arguments.)\n     if std::env::args().len() <= 1 {\n         fn host_to_target_path(path: String) -> PathBuf {\n-            use std::ffi::{CStr, CString};\n+            use std::ffi::{c_char, CStr, CString};\n \n             let path = CString::new(path).unwrap();\n             let mut out = Vec::with_capacity(1024);\n \n             unsafe {\n                 extern \"Rust\" {\n                     fn miri_host_to_target_path(\n-                        path: *const i8,\n-                        out: *mut i8,\n+                        path: *const c_char,\n+                        out: *mut c_char,\n                         out_size: usize,\n                     ) -> usize;\n                 }"}, {"sha": "52161098788b50b4b41dac12edb9678e820e8e54", "filename": "src/tools/miri/test-cargo-miri/subcrate/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -5,16 +5,16 @@ fn main() {\n     println!(\"subcrate running\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "1681c721dc2e22ae912bb97d860eb288a937b71d", "filename": "src/tools/miri/test-cargo-miri/subcrate/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -8,16 +8,16 @@ fn main() {\n     println!(\"subcrate testing\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "8be1ee54672d863ca8bb0ea547aef9d22b0fece3", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -292,9 +292,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.23.1\"\n+version = \"1.24.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38a54aca0c15d014013256222ba0ebed095673f89345dd79119d912eb561b7a8\"\n+checksum = \"597a12a59981d9e3c38d216785b0c37399f6e415e8d0712047620f189371b0bb\"\n dependencies = [\n  \"autocfg\",\n  \"bytes\","}, {"sha": "d1ff33379e40accc566359323d309cc7dd38825c", "filename": "src/tools/miri/test_dependencies/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -18,6 +18,6 @@ rand = { version = \"0.8\", features = [\"small_rng\"] }\n \n [target.'cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))'.dependencies]\n page_size = \"0.5\"\n-tokio = { version = \"1.23\", features = [\"full\"] }\n+tokio = { version = \"1.24\", features = [\"full\"] }\n \n [workspace]"}, {"sha": "4a43db0aac50ae3ad4ae6a37291aea0e0182d31b", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -3,7 +3,7 @@\n \n #![allow(dead_code, unused_variables)]\n \n-use std::{ptr, mem};\n+use std::{mem, ptr};\n \n #[repr(packed)]\n struct Foo {"}, {"sha": "cd071a7f32ac1f0a913437f172bd0caf9c4f4fcf", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -5,7 +5,7 @@\n #![feature(io_error_uncategorized)]\n \n use std::convert::TryInto;\n-use std::ffi::{CStr, CString};\n+use std::ffi::{c_char, CStr, CString};\n use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n@@ -31,7 +31,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "98e1c3a0adb2ecef8e009918c4b5845661632bd9", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -7,7 +7,7 @@ use std::os::unix::io::AsRawFd;\n use std::path::PathBuf;\n \n fn tmp() -> PathBuf {\n-    use std::ffi::{CStr, CString};\n+    use std::ffi::{c_char, CStr, CString};\n \n     let path = std::env::var(\"MIRI_TEMP\")\n         .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n@@ -17,7 +17,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "1341484dda4753e1c4beb13b09f10969f29baae5", "filename": "src/tools/miri/tests/pass-dep/tokio/sleep.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -0,0 +1,14 @@\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-backtrace=full\n+//@only-target-x86_64-unknown-linux: support for tokio only on linux and x86\n+\n+use tokio::time::{sleep, Duration, Instant};\n+\n+#[tokio::main]\n+async fn main() {\n+    let start = Instant::now();\n+    sleep(Duration::from_secs(1)).await;\n+    // It takes 96 millisecond to sleep for 1 millisecond\n+    // It takes 1025 millisecond to sleep for 1 second\n+    let time_elapsed = &start.elapsed().as_millis();\n+    assert!(time_elapsed > &1000, \"{}\", time_elapsed);\n+}"}, {"sha": "0bca7cc069a78310f7e2b94516a03d679846b92f", "filename": "src/tools/miri/tests/pass-dep/tokio/tokio_mvp.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -1,5 +1,5 @@\n // Need to disable preemption to stay on the supported MVP codepath in mio.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance\n //@only-target-x86_64-unknown-linux: support for tokio exists only on linux and x86\n \n #[tokio::main]", "previous_filename": "src/tools/miri/tests/pass-dep/tokio_mvp.rs"}, {"sha": "1fac16352a448f9a9cfe388dc3c15f826ec442f6", "filename": "src/tools/miri/tests/pass/dyn-star.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -1,5 +1,8 @@\n #![feature(dyn_star)]\n #![allow(incomplete_features)]\n+#![feature(custom_inner_attributes)]\n+// rustfmt destroys `dyn* Trait` syntax\n+#![rustfmt::skip]\n \n use std::fmt::{Debug, Display};\n "}, {"sha": "489fae66ffb2b4c53c6ba92bafc3350399f5a6a0", "filename": "src/tools/miri/tests/pass/move-data-across-await-point.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -0,0 +1,81 @@\n+use std::future::Future;\n+use std::ptr;\n+\n+// This test:\n+// - Compares addresses of non-Copy data before and after moving it\n+// - Writes to the pointer after it has moved across the await point\n+//\n+// This is only meant to assert current behavior, not guarantee that this is\n+// how it should work in the future. In fact, upcoming changes to rustc\n+// *should* break these tests.\n+// See: https://github.com/rust-lang/rust/issues/62958\n+async fn data_moved_async() {\n+    async fn helper(mut data: Vec<u8>, raw_pointer: *mut Vec<u8>) {\n+        let raw_pointer2 = ptr::addr_of_mut!(data);\n+        // `raw_pointer` points to the original location where the Vec was stored in the caller.\n+        // `data` is where that Vec (to be precise, its ptr+capacity+len on-stack data)\n+        // got moved to. Those will usually not be the same since the Vec got moved twice\n+        // (into the function call, and then into the generator upvar).\n+        assert_ne!(raw_pointer, raw_pointer2);\n+        unsafe {\n+            // This writes into the `x` in `data_moved_async`, re-initializing it.\n+            std::ptr::write(raw_pointer, vec![3]);\n+        }\n+    }\n+    // Vec<T> is not Copy\n+    let mut x: Vec<u8> = vec![2];\n+    let raw_pointer = ptr::addr_of_mut!(x);\n+    helper(x, raw_pointer).await;\n+    unsafe {\n+        assert_eq!(*raw_pointer, vec![3]);\n+        // Drop to prevent leak.\n+        std::ptr::drop_in_place(raw_pointer);\n+    }\n+}\n+\n+// Same thing as above, but non-async.\n+fn data_moved() {\n+    fn helper(mut data: Vec<u8>, raw_pointer: *mut Vec<u8>) {\n+        let raw_pointer2 = ptr::addr_of_mut!(data);\n+        assert_ne!(raw_pointer, raw_pointer2);\n+        unsafe {\n+            std::ptr::write(raw_pointer, vec![3]);\n+        }\n+    }\n+\n+    let mut x: Vec<u8> = vec![2];\n+    let raw_pointer = ptr::addr_of_mut!(x);\n+    helper(x, raw_pointer);\n+    unsafe {\n+        assert_eq!(*raw_pointer, vec![3]);\n+        std::ptr::drop_in_place(raw_pointer);\n+    }\n+}\n+\n+fn run_fut<T>(fut: impl Future<Output = T>) -> T {\n+    use std::sync::Arc;\n+    use std::task::{Context, Poll, Wake, Waker};\n+\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    let waker = Waker::from(Arc::new(MyWaker));\n+    let mut context = Context::from_waker(&waker);\n+\n+    let mut pinned = Box::pin(fut);\n+    loop {\n+        match pinned.as_mut().poll(&mut context) {\n+            Poll::Pending => continue,\n+            Poll::Ready(v) => return v,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    run_fut(data_moved_async());\n+    data_moved();\n+}"}, {"sha": "7a9974f393895e44ddcbebbcd79db21014a4ce4f", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37338b8d996b05864d74d0a71b2c173bc41f890d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=37338b8d996b05864d74d0a71b2c173bc41f890d", "patch": "@@ -6,7 +6,7 @@\n #![feature(is_terminal)]\n \n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{c_char, OsString};\n use std::fs::{\n     canonicalize, create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename,\n     File, OpenOptions,\n@@ -39,7 +39,11 @@ fn host_to_target_path(path: String) -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}]}