{"sha": "aea1f95a665b56da5953907a122475db0c9a9c44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTFmOTVhNjY1YjU2ZGE1OTUzOTA3YTEyMjQ3NWRiMGM5YTljNDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T16:04:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T16:04:02Z"}, "message": "adapt ide_api to the new API", "tree": {"sha": "3275d375e9ce9307ac4d9a54678b0ee541207d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3275d375e9ce9307ac4d9a54678b0ee541207d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea1f95a665b56da5953907a122475db0c9a9c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea1f95a665b56da5953907a122475db0c9a9c44", "html_url": "https://github.com/rust-lang/rust/commit/aea1f95a665b56da5953907a122475db0c9a9c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea1f95a665b56da5953907a122475db0c9a9c44/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce2041252aba52662945e36a4afad454d19388ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2041252aba52662945e36a4afad454d19388ae", "html_url": "https://github.com/rust-lang/rust/commit/ce2041252aba52662945e36a4afad454d19388ae"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "d0fa8146c46275296e468f68fbc9da78c26da38a", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=aea1f95a665b56da5953907a122475db0c9a9c44", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Ty, Def, AdtDef};\n+use hir::{Ty, AdtDef};\n \n use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionItemKind};\n use crate::completion::completion_item::CompletionKind;\n@@ -29,23 +29,21 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                 def_id, ref substs, ..\n             } => {\n                 match def_id {\n-                    AdtDef::Struct() => {}\n-                    AdtDef::Def(def_id) => match def_id.resolve(ctx.db) {\n-                        Def::Struct(s) => {\n-                            for field in s.fields(ctx.db) {\n-                                CompletionItem::new(\n-                                    CompletionKind::Reference,\n-                                    ctx.source_range(),\n-                                    field.name().to_string(),\n-                                )\n-                                .kind(CompletionItemKind::Field)\n-                                .set_detail(field.ty(ctx.db).map(|ty| ty.subst(substs).to_string()))\n-                                .add_to(acc);\n-                            }\n+                    AdtDef::Struct(s) => {\n+                        for field in s.fields(ctx.db) {\n+                            CompletionItem::new(\n+                                CompletionKind::Reference,\n+                                ctx.source_range(),\n+                                field.name().to_string(),\n+                            )\n+                            .kind(CompletionItemKind::Field)\n+                            .set_detail(field.ty(ctx.db).map(|ty| ty.subst(substs).to_string()))\n+                            .add_to(acc);\n                         }\n-                        // TODO unions\n-                        _ => {}\n-                    },\n+                    }\n+\n+                    // TODO unions\n+                    AdtDef::Enum(_) => (),\n                 }\n             }\n             Ty::Tuple(fields) => {"}, {"sha": "e039a333c98109c4e0149bfa3d4c9e044c36e1e6", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=aea1f95a665b56da5953907a122475db0c9a9c44", "patch": "@@ -26,26 +26,21 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 .add_to(acc);\n             }\n         }\n-\n-        hir::ModuleDef::Def(def_id) => match def_id.resolve(ctx.db) {\n-            hir::Def::Enum(e) => {\n-                e.variants(ctx.db)\n-                    .into_iter()\n-                    .for_each(|(variant_name, variant)| {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            variant_name.to_string(),\n-                        )\n-                        .kind(CompletionItemKind::EnumVariant)\n-                        .set_documentation(variant.docs(ctx.db))\n-                        .add_to(acc)\n-                    });\n-            }\n-            _ => return,\n-        },\n-\n-        hir::ModuleDef::Function(_) => return,\n+        hir::ModuleDef::Enum(e) => {\n+            e.variants(ctx.db)\n+                .into_iter()\n+                .for_each(|(variant_name, variant)| {\n+                    CompletionItem::new(\n+                        CompletionKind::Reference,\n+                        ctx.source_range(),\n+                        variant_name.to_string(),\n+                    )\n+                    .kind(CompletionItemKind::EnumVariant)\n+                    .set_documentation(variant.docs(ctx.db))\n+                    .add_to(acc)\n+                });\n+        }\n+        hir::ModuleDef::Function(_) | hir::ModuleDef::Struct(_) | hir::ModuleDef::Def(_) => return,\n     };\n }\n "}, {"sha": "f2301653a5d015706cbe7b0e53153001f86368b8", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=aea1f95a665b56da5953907a122475db0c9a9c44", "patch": "@@ -220,9 +220,9 @@ impl Builder {\n         let (kind, docs) = match def {\n             hir::ModuleDef::Module(_) => (CompletionItemKind::Module, None),\n             hir::ModuleDef::Function(func) => return self.from_function(ctx, func),\n+            hir::ModuleDef::Struct(it) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            hir::ModuleDef::Enum(it) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n             hir::ModuleDef::Def(def_id) => match def_id.resolve(ctx.db) {\n-                hir::Def::Struct(it) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-                hir::Def::Enum(it) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n                 hir::Def::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n                 hir::Def::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n                 hir::Def::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),"}, {"sha": "b92670f36b2080ac46ac22a9f4933eb11e0dfc4d", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1f95a665b56da5953907a122475db0c9a9c44/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=aea1f95a665b56da5953907a122475db0c9a9c44", "patch": "@@ -114,17 +114,23 @@ impl NavigationTarget {\n             hir::ModuleDef::Function(func) => {\n                 return Some(NavigationTarget::from_function(db, func));\n             }\n-        };\n-\n-        let res = match def {\n-            Def::Struct(s) => {\n+            hir::ModuleDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                return Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ));\n             }\n-            Def::Enum(e) => {\n+            hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                return Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ));\n             }\n+        };\n+\n+        let res = match def {\n             Def::EnumVariant(ev) => {\n                 let (file_id, node) = ev.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)"}]}