{"sha": "db84fc140301fcc4317616f302c2812b06263632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODRmYzE0MDMwMWZjYzQzMTc2MTZmMzAyYzI4MTJiMDYyNjM2MzI=", "commit": {"author": {"name": "M Farkas-Dyck", "email": "mfdyck@google.com", "date": "2016-05-27T01:44:13Z"}, "committer": {"name": "M Farkas-Dyck", "email": "mfdyck@google.com", "date": "2016-05-27T16:54:52Z"}, "message": "make core::str::next_code_point work on arbitrary iterator", "tree": {"sha": "3627bb9a6d102ba95394ee25aa2c35dfb63df82c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3627bb9a6d102ba95394ee25aa2c35dfb63df82c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db84fc140301fcc4317616f302c2812b06263632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db84fc140301fcc4317616f302c2812b06263632", "html_url": "https://github.com/rust-lang/rust/commit/db84fc140301fcc4317616f302c2812b06263632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db84fc140301fcc4317616f302c2812b06263632/comments", "author": null, "committer": null, "parents": [{"sha": "8393d99c356e51128e0125aa23a7824d6ff513b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8393d99c356e51128e0125aa23a7824d6ff513b2", "html_url": "https://github.com/rust-lang/rust/commit/8393d99c356e51128e0125aa23a7824d6ff513b2"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "32b81ab7f53a8ab19b69487bf98167ad0dd964a7", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db84fc140301fcc4317616f302c2812b06263632/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db84fc140301fcc4317616f302c2812b06263632/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=db84fc140301fcc4317616f302c2812b06263632", "patch": "@@ -354,7 +354,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n /// UTF-8-like encoding).\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n-pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n+pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n     let x = match bytes.next() {\n         None => return None,\n@@ -388,7 +388,8 @@ pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n /// Reads the last code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n #[inline]\n-fn next_code_point_reverse(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n+fn next_code_point_reverse<'a,\n+                           I: DoubleEndedIterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n     let w = match bytes.next_back() {\n         None => return None,"}]}