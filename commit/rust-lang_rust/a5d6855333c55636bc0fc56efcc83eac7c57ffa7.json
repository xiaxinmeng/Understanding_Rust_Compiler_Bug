{"sha": "a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDY4NTUzMzNjNTU2MzZiYzBmYzU2ZWZjYzgzZWFjN2M1N2ZmYTc=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-29T02:41:29Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-29T21:34:11Z"}, "message": "Use LocalUsedVisitor in more places", "tree": {"sha": "a12f5aa8810ba59005ce3f8c01372b23c7d72eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12f5aa8810ba59005ce3f8c01372b23c7d72eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "html_url": "https://github.com/rust-lang/rust/commit/a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d6855333c55636bc0fc56efcc83eac7c57ffa7/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff5fa65816f482357989f25a58e98688cb7363d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff5fa65816f482357989f25a58e98688cb7363d", "html_url": "https://github.com/rust-lang/rust/commit/fff5fa65816f482357989f25a58e98688cb7363d"}], "stats": {"total": 82, "additions": 8, "deletions": 74}, "files": [{"sha": "0d2d95324c4f7556f400230f5b33e852f9b2099c", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a5d6855333c55636bc0fc56efcc83eac7c57ffa7/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d6855333c55636bc0fc56efcc83eac7c57ffa7/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "patch": "@@ -1,12 +1,11 @@\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit;\n use rustc_hir::BindingAnnotation;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,10 +65,10 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n                 if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n-                if !used_in_expr(cx, canonical_id, cond);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);\n-                if !used_in_expr(cx, canonical_id, value);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n@@ -136,32 +135,6 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n     }\n }\n \n-struct UsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    id: hir::HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::Path(ref qpath) = expr.kind;\n-            if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id);\n-            if self.id == local_id;\n-            then {\n-                self.used = true;\n-                return;\n-            }\n-        }\n-        intravisit::walk_expr(self, expr);\n-    }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n-}\n-\n fn check_assign<'tcx>(\n     cx: &LateContext<'tcx>,\n     decl: hir::HirId,\n@@ -176,18 +149,10 @@ fn check_assign<'tcx>(\n         if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n         if decl == local_id;\n         then {\n-            let mut v = UsedVisitor {\n-                cx,\n-                id: decl,\n-                used: false,\n-            };\n-\n-            for s in block.stmts.iter().take(block.stmts.len()-1) {\n-                intravisit::walk_stmt(&mut v, s);\n+            let mut v = LocalUsedVisitor::new(decl);\n \n-                if v.used {\n-                    return None;\n-                }\n+            if block.stmts.iter().take(block.stmts.len()-1).any(|stmt| v.check_stmt(stmt)) {\n+                return None;\n             }\n \n             return Some(value);\n@@ -196,9 +161,3 @@ fn check_assign<'tcx>(\n \n     None\n }\n-\n-fn used_in_expr<'tcx>(cx: &LateContext<'tcx>, id: hir::HirId, expr: &'tcx hir::Expr<'_>) -> bool {\n-    let mut v = UsedVisitor { cx, id, used: false };\n-    intravisit::walk_expr(&mut v, expr);\n-    v.used\n-}"}, {"sha": "400148ab81dd997d20050228c4e6d2a39ebf0d69", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a5d6855333c55636bc0fc56efcc83eac7c57ffa7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d6855333c55636bc0fc56efcc83eac7c57ffa7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "patch": "@@ -2,6 +2,7 @@ use crate::consts::constant;\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n@@ -2069,28 +2070,6 @@ fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     }\n }\n \n-struct LocalUsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    local: HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if same_var(self.cx, expr, self.local) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n struct VarVisitor<'a, 'tcx> {\n     /// context reference\n     cx: &'a LateContext<'tcx>,\n@@ -2124,11 +2103,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor {\n-                        cx: self.cx,\n-                        local: self.var,\n-                        used: false,\n-                    };\n+                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };"}]}