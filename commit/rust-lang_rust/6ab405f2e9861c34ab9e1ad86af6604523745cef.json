{"sha": "6ab405f2e9861c34ab9e1ad86af6604523745cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYjQwNWYyZTk4NjFjMzRhYjllMWFkODZhZjY2MDQ1MjM3NDVjZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-13T16:58:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-13T16:58:04Z"}, "message": "Merge #7998\n\n7998: Use more Chalk IDs r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "a9c674c83723e2ed145793f72450c873da62a6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c674c83723e2ed145793f72450c873da62a6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ab405f2e9861c34ab9e1ad86af6604523745cef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTO8cCRBK7hj4Ov3rIwAAdHIIAHm6biJ62b9MfQH44b2cGsvF\nTyxEJ3H3ZS+AJX9rwpD9S6QWtc6mr72+EQQ457G6vQQ+gzW2WPoIE0vahxiaan3I\nBxHZd44rm7lleS+oMwg+6DOWcm6aX0hHX/800MMCrn2cSUSUvdEJZFQCOLpxLqAV\nFWX+EzgJZnofBrKi4gyQRUCZOgV+I1MSsAObcDifbDEEsxTnXMlS50OGMZAn/79E\nWpb9jpuopRusfm0TY1EX7fIGPD8uM/KAoC6REO74oiayLezwOyvttPY87sTF9o4O\npINWbELWoD+w0QlCFLnAj1j2nu7fx8toJlQ/JhNj+Dfr/A1aoXWkCk5954Vh6Ro=\n=FTof\n-----END PGP SIGNATURE-----\n", "payload": "tree a9c674c83723e2ed145793f72450c873da62a6fc\nparent d4533785698d439417bc5474fecd62a7f1707368\nparent 9719ce9fc731a400c9744ba1a6569e978c1a97e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615654684 +0000\ncommitter GitHub <noreply@github.com> 1615654684 +0000\n\nMerge #7998\n\n7998: Use more Chalk IDs r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab405f2e9861c34ab9e1ad86af6604523745cef", "html_url": "https://github.com/rust-lang/rust/commit/6ab405f2e9861c34ab9e1ad86af6604523745cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ab405f2e9861c34ab9e1ad86af6604523745cef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4533785698d439417bc5474fecd62a7f1707368", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4533785698d439417bc5474fecd62a7f1707368", "html_url": "https://github.com/rust-lang/rust/commit/d4533785698d439417bc5474fecd62a7f1707368"}, {"sha": "9719ce9fc731a400c9744ba1a6569e978c1a97e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9719ce9fc731a400c9744ba1a6569e978c1a97e7", "html_url": "https://github.com/rust-lang/rust/commit/9719ce9fc731a400c9744ba1a6569e978c1a97e7"}], "stats": {"total": 293, "additions": 158, "deletions": 135}, "files": [{"sha": "7f8f936d3bc7d6d3b40bf53797f83c8cb4e1ef5b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -51,7 +51,7 @@ use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n     autoderef,\n     display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n-    method_resolution,\n+    method_resolution, to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n     InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs,\n@@ -1683,7 +1683,10 @@ impl Type {\n             .fill(args.iter().map(|t| t.ty.value.clone()))\n             .build();\n         let predicate = ProjectionPredicate {\n-            projection_ty: ProjectionTy { associated_ty: alias.id, parameters: subst },\n+            projection_ty: ProjectionTy {\n+                associated_ty: to_assoc_type_id(alias.id),\n+                parameters: subst,\n+            },\n             ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner),\n         };\n         let goal = Canonical {\n@@ -1712,10 +1715,7 @@ impl Type {\n     }\n \n     pub fn as_callable(&self, db: &dyn HirDatabase) -> Option<Callable> {\n-        let def = match self.ty.value.interned(&Interner) {\n-            &TyKind::FnDef(def, _) => Some(def),\n-            _ => None,\n-        };\n+        let def = self.ty.value.callable_def(db);\n \n         let sig = self.ty.value.callable_sig(db)?;\n         Some(Callable { ty: self.clone(), sig, def, is_bound_method: false })"}, {"sha": "d739d5d60f4dd8813620031c892c7cbde4798586", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -12,6 +12,7 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase,\n+    to_assoc_type_id,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n     BoundVar, Canonical, DebruijnIndex, Interner, Obligation, Substs, TraitRef, Ty, TyKind,\n@@ -83,7 +84,7 @@ fn deref_by_trait(\n     let projection = super::traits::ProjectionPredicate {\n         ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n             .intern(&Interner),\n-        projection_ty: super::ProjectionTy { associated_ty: target, parameters },\n+        projection_ty: super::ProjectionTy { associated_ty: to_assoc_type_id(target), parameters },\n     };\n \n     let obligation = super::Obligation::Projection(projection);"}, {"sha": "a038674cf6a11ffc5afcaa989cbde4f16c308678", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -12,7 +12,7 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n+    Binders, CallableDefId, FnDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n     ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -100,10 +100,10 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n-    fn fn_def_datum(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> Arc<chalk::FnDefDatum>;\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk::FnDefDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::fn_def_variance_query)]\n-    fn fn_def_variance(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> chalk::Variances;\n+    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk::Variances;\n \n     #[salsa::invoke(crate::traits::chalk::adt_variance_query)]\n     fn adt_variance(&self, krate: CrateId, adt_id: chalk::AdtId) -> chalk::Variances;"}, {"sha": "20bb6482796b1b76b07a48c1bd4669e8bca61843", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -85,7 +85,7 @@ fn walk_unsafe(\n     let expr = &body.exprs[current];\n     match expr {\n         &Expr::Call { callee, .. } => {\n-            if let Some(func) = infer[callee].as_fn_def() {\n+            if let Some(func) = infer[callee].as_fn_def(db) {\n                 if db.function_data(func).is_unsafe {\n                     unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }"}, {"sha": "b7e85e024db41d7f6563dc97fcd531932445620b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -11,7 +11,8 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, primitive, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n+    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, primitive, to_assoc_type_id,\n+    traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n     GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar,\n     Substs, TraitRef, Ty, TyKind,\n };\n@@ -256,7 +257,7 @@ impl HirDisplay for ProjectionTy {\n             f.write_joined(&self.parameters[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n-        write!(f, \">::{}\", f.db.type_alias_data(self.associated_ty).name)?;\n+        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty)).name)?;\n         Ok(())\n     }\n }\n@@ -363,7 +364,7 @@ impl HirDisplay for Ty {\n                 sig.hir_fmt(f)?;\n             }\n             TyKind::FnDef(def, parameters) => {\n-                let def = *def;\n+                let def = from_chalk(f.db, *def);\n                 let sig = f.db.callable_item_signature(def).subst(parameters);\n                 match def {\n                     CallableDefId::FunctionId(ff) => {\n@@ -431,7 +432,7 @@ impl HirDisplay for Ty {\n                         || f.omit_verbose_types()\n                     {\n                         match self\n-                            .as_generic_def()\n+                            .as_generic_def(f.db)\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {\n@@ -467,13 +468,14 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            TyKind::AssociatedType(type_alias, parameters) => {\n+            TyKind::AssociatedType(assoc_type_id, parameters) => {\n+                let type_alias = from_assoc_type_id(*assoc_type_id);\n                 let trait_ = match type_alias.lookup(f.db.upcast()).container {\n                     AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_ = f.db.trait_data(trait_);\n-                let type_alias_data = f.db.type_alias_data(*type_alias);\n+                let type_alias_data = f.db.type_alias_data(type_alias);\n \n                 // Use placeholder associated types when the target is test (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n                 if f.display_target.is_test() {\n@@ -484,14 +486,16 @@ impl HirDisplay for Ty {\n                         write!(f, \">\")?;\n                     }\n                 } else {\n-                    let projection_ty =\n-                        ProjectionTy { associated_ty: *type_alias, parameters: parameters.clone() };\n+                    let projection_ty = ProjectionTy {\n+                        associated_ty: to_assoc_type_id(type_alias),\n+                        parameters: parameters.clone(),\n+                    };\n \n                     projection_ty.hir_fmt(f)?;\n                 }\n             }\n             TyKind::ForeignType(type_alias) => {\n-                let type_alias = f.db.type_alias_data(*type_alias);\n+                let type_alias = f.db.type_alias_data(from_foreign_def_id(*type_alias));\n                 write!(f, \"{}\", type_alias.name)?;\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {\n@@ -697,7 +701,9 @@ fn write_bounds_like_dyn_trait(\n                     write!(f, \"<\")?;\n                     angle_open = true;\n                 }\n-                let type_alias = f.db.type_alias_data(projection_pred.projection_ty.associated_ty);\n+                let type_alias = f.db.type_alias_data(from_assoc_type_id(\n+                    projection_pred.projection_ty.associated_ty,\n+                ));\n                 write!(f, \"{} = \", type_alias.name)?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }\n@@ -768,7 +774,10 @@ impl HirDisplay for GenericPredicate {\n                 write!(\n                     f,\n                     \">::{} = \",\n-                    f.db.type_alias_data(projection_pred.projection_ty.associated_ty).name,\n+                    f.db.type_alias_data(from_assoc_type_id(\n+                        projection_pred.projection_ty.associated_ty\n+                    ))\n+                    .name,\n                 )?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }"}, {"sha": "9d9bf549c7208157697a76cc773ed4f90b15eccc", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -42,7 +42,7 @@ use super::{\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    AliasTy, Interner, TyKind,\n+    to_assoc_type_id, AliasTy, Interner, TyKind,\n };\n \n pub(crate) use unify::unify;\n@@ -382,7 +382,10 @@ impl<'a> InferenceContext<'a> {\n                 let trait_ref = TraitRef { trait_, substs: substs.clone() };\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n-                    projection_ty: ProjectionTy { associated_ty: res_assoc_ty, parameters: substs },\n+                    projection_ty: ProjectionTy {\n+                        associated_ty: to_assoc_type_id(res_assoc_ty),\n+                        parameters: substs,\n+                    },\n                 };\n                 self.obligations.push(Obligation::Trait(trait_ref));\n                 self.obligations.push(Obligation::Projection(projection));"}, {"sha": "153f22f25f8c580223264dbf2c7f57b8b6b903d8", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -18,7 +18,8 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n-    traits::{FnTrait, InEnvironment},\n+    to_assoc_type_id,\n+    traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, OpaqueTyId, Rawness,\n     Scalar, Substs, TraitRef, Ty, TyKind,\n@@ -97,8 +98,10 @@ impl<'a> InferenceContext<'a> {\n         });\n         if self.db.trait_solve(krate, goal.value).is_some() {\n             self.obligations.push(implements_fn_trait);\n-            let output_proj_ty =\n-                crate::ProjectionTy { associated_ty: output_assoc_type, parameters: substs };\n+            let output_proj_ty = crate::ProjectionTy {\n+                associated_ty: to_assoc_type_id(output_assoc_type),\n+                parameters: substs,\n+            };\n             let return_ty = self.normalize_projection_ty(output_proj_ty);\n             Some((arg_tys, return_ty))\n         } else {\n@@ -929,8 +932,9 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n-        if let TyKind::FnDef(def, parameters) = callable_ty.interned(&Interner) {\n-            let generic_predicates = self.db.generic_predicates((*def).into());\n+        if let TyKind::FnDef(fn_def, parameters) = callable_ty.interned(&Interner) {\n+            let def: CallableDefId = from_chalk(self.db, *fn_def);\n+            let generic_predicates = self.db.generic_predicates(def.into());\n             for predicate in generic_predicates.iter() {\n                 let predicate = predicate.clone().subst(parameters);\n                 if let Some(obligation) = Obligation::from_predicate(predicate) {"}, {"sha": "6b34852645da0204d2c3c77272cf3b7d721e63aa", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -51,6 +51,10 @@ pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Scalar, TyVariabl\n \n pub use crate::traits::chalk::Interner;\n \n+pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n+pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n     Parameter(LifetimeParamId),\n@@ -68,7 +72,7 @@ pub struct OpaqueTy {\n /// trait and all its parameters are fully known.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ProjectionTy {\n-    pub associated_ty: TypeAliasId,\n+    pub associated_ty: AssocTypeId,\n     pub parameters: Substs,\n }\n \n@@ -78,7 +82,7 @@ impl ProjectionTy {\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n-        match self.associated_ty.lookup(db.upcast()).container {\n+        match from_assoc_type_id(self.associated_ty).lookup(db.upcast()).container {\n             AssocContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n@@ -139,7 +143,7 @@ pub enum TyKind {\n     /// when we have tried to normalize a projection like `T::Item` but\n     /// couldn't find a better representation.  In that case, we generate\n     /// an **application type** like `(Iterator::Item)<T>`.\n-    AssociatedType(TypeAliasId, Substs),\n+    AssociatedType(AssocTypeId, Substs),\n \n     /// a scalar type like `bool` or `u32`\n     Scalar(Scalar),\n@@ -179,7 +183,7 @@ pub enum TyKind {\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n     /// ```\n-    FnDef(CallableDefId, Substs),\n+    FnDef(FnDefId, Substs),\n \n     /// The pointee of a string slice. Written as `str`.\n     Str,\n@@ -194,7 +198,7 @@ pub enum TyKind {\n     Closure(DefWithBodyId, ExprId, Substs),\n \n     /// Represents a foreign type declared in external blocks.\n-    ForeignType(TypeAliasId),\n+    ForeignType(ForeignDefId),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n@@ -700,12 +704,14 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_generic_def(&self) -> Option<GenericDefId> {\n+    pub fn as_generic_def(&self, db: &dyn HirDatabase) -> Option<GenericDefId> {\n         match *self.interned(&Interner) {\n             TyKind::Adt(AdtId(adt), ..) => Some(adt.into()),\n-            TyKind::FnDef(callable, ..) => Some(callable.into()),\n-            TyKind::AssociatedType(type_alias, ..) => Some(type_alias.into()),\n-            TyKind::ForeignType(type_alias, ..) => Some(type_alias.into()),\n+            TyKind::FnDef(callable, ..) => {\n+                Some(db.lookup_intern_callable_def(callable.into()).into())\n+            }\n+            TyKind::AssociatedType(type_alias, ..) => Some(from_assoc_type_id(type_alias).into()),\n+            TyKind::ForeignType(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n             _ => None,\n         }\n     }\n@@ -724,8 +730,10 @@ impl Ty {\n             (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_), TyKind::Array(_)) => true,\n             (TyKind::FnDef(def_id, ..), TyKind::FnDef(def_id2, ..)) => def_id == def_id2,\n             (TyKind::OpaqueType(ty_id, ..), TyKind::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n-            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..))\n-            | (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n+            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n+                ty_id == ty_id2\n+            }\n+            (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n             (TyKind::Closure(def, expr, _), TyKind::Closure(def2, expr2, _)) => {\n                 expr == expr2 && def == def2\n             }\n@@ -770,18 +778,27 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_fn_def(&self) -> Option<FunctionId> {\n+    pub fn callable_def(&self, db: &dyn HirDatabase) -> Option<CallableDefId> {\n         match self.interned(&Interner) {\n-            &TyKind::FnDef(CallableDefId::FunctionId(func), ..) => Some(func),\n+            &TyKind::FnDef(def, ..) => Some(db.lookup_intern_callable_def(def.into())),\n             _ => None,\n         }\n     }\n \n+    pub fn as_fn_def(&self, db: &dyn HirDatabase) -> Option<FunctionId> {\n+        if let Some(CallableDefId::FunctionId(func)) = self.callable_def(db) {\n+            Some(func)\n+        } else {\n+            None\n+        }\n+    }\n+\n     pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<CallableSig> {\n         match self.interned(&Interner) {\n             TyKind::Function(fn_ptr) => Some(CallableSig::from_fn_ptr(fn_ptr)),\n             TyKind::FnDef(def, parameters) => {\n-                let sig = db.callable_item_signature(*def);\n+                let callable_def = db.lookup_intern_callable_def((*def).into());\n+                let sig = db.callable_item_signature(callable_def);\n                 Some(sig.subst(&parameters))\n             }\n             TyKind::Closure(.., substs) => {\n@@ -916,14 +933,15 @@ impl Ty {\n \n     pub fn associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<TraitId> {\n         match self.interned(&Interner) {\n-            TyKind::AssociatedType(type_alias_id, ..) => {\n-                match type_alias_id.lookup(db.upcast()).container {\n+            TyKind::AssociatedType(id, ..) => {\n+                match from_assoc_type_id(*id).lookup(db.upcast()).container {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n             }\n             TyKind::Alias(AliasTy::Projection(projection_ty)) => {\n-                match projection_ty.associated_ty.lookup(db.upcast()).container {\n+                match from_assoc_type_id(projection_ty.associated_ty).lookup(db.upcast()).container\n+                {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n@@ -1116,3 +1134,19 @@ pub struct ReturnTypeImplTraits {\n pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n }\n+\n+pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n+    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n+    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}"}, {"sha": "b8b1400ebc5665bc2b1311d1d5e2b394605ca9c2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -27,6 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n+    to_assoc_type_id,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -358,7 +359,7 @@ impl Ty {\n                         Some((super_trait_ref, associated_ty)) => {\n                             // FIXME handle type parameters on the segment\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty,\n+                                associated_ty: to_assoc_type_id(associated_ty),\n                                 parameters: super_trait_ref.substs,\n                             }))\n                             .intern(&Interner)\n@@ -487,7 +488,7 @@ impl Ty {\n                         // FIXME handle type parameters on the segment\n                         return Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty,\n+                                associated_ty: to_assoc_type_id(associated_ty),\n                                 parameters: substs,\n                             }))\n                             .intern(&Interner),\n@@ -753,7 +754,10 @@ fn assoc_type_bindings_from_type_bound<'a>(\n                 None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n-            let projection_ty = ProjectionTy { associated_ty, parameters: super_trait_ref.substs };\n+            let projection_ty = ProjectionTy {\n+                associated_ty: to_assoc_type_id(associated_ty),\n+                parameters: super_trait_ref.substs,\n+            };\n             let mut preds = SmallVec::with_capacity(\n                 binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n             );\n@@ -1060,7 +1064,10 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n fn type_for_fn(db: &dyn HirDatabase, def: FunctionId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), def.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::FunctionId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n /// Build the declared type of a const.\n@@ -1103,7 +1110,10 @@ fn type_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> Binders<T\n     }\n     let generics = generics(db.upcast(), def.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::StructId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n fn fn_sig_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -> PolyFnSig {\n@@ -1128,7 +1138,10 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n     }\n     let generics = generics(db.upcast(), def.parent.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::EnumVariantId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n fn type_for_adt(db: &dyn HirDatabase, adt: AdtId) -> Binders<Ty> {\n@@ -1143,7 +1156,7 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     if db.type_alias_data(t).is_extern {\n-        Binders::new(0, TyKind::ForeignType(t).intern(&Interner))\n+        Binders::new(0, TyKind::ForeignType(crate::to_foreign_def_id(t)).intern(&Interner))\n     } else {\n         let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n         let type_ref = &db.type_alias_data(t).type_ref;"}, {"sha": "c7055bee50f53ded867af64ffdf020f195f44107", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -9,18 +9,19 @@ use base_db::CrateId;\n use chalk_ir::Mutability;\n use hir_def::{\n     lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n-    ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n+    ImplId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     autoderef,\n     db::HirDatabase,\n+    from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n-    AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, InEnvironment, Interner, Scalar, Substs,\n-    TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n+    AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, ForeignDefId, InEnvironment, Interner,\n+    Scalar, Substs, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -35,7 +36,7 @@ pub enum TyFingerprint {\n     Adt(hir_def::AdtId),\n     Dyn(TraitId),\n     Tuple(usize),\n-    ForeignType(TypeAliasId),\n+    ForeignType(ForeignDefId),\n     FnPtr(usize, FnSig),\n }\n \n@@ -236,8 +237,10 @@ impl Ty {\n             TyKind::Adt(AdtId(def_id), _) => {\n                 return mod_to_crate_ids(def_id.module(db.upcast()));\n             }\n-            TyKind::ForeignType(type_alias_id) => {\n-                return mod_to_crate_ids(type_alias_id.lookup(db.upcast()).module(db.upcast()));\n+            TyKind::ForeignType(id) => {\n+                return mod_to_crate_ids(\n+                    from_foreign_def_id(*id).lookup(db.upcast()).module(db.upcast()),\n+                );\n             }\n             TyKind::Scalar(Scalar::Bool) => lang_item_crate!(\"bool\"),\n             TyKind::Scalar(Scalar::Char) => lang_item_crate!(\"char\"),"}, {"sha": "bb92d8e2a77966d04ae85ea9e7e809bb12e5f3ba", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -17,14 +17,15 @@ use super::ChalkContext;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n+    from_assoc_type_id,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n+    to_assoc_type_id,\n     utils::generics,\n-    BoundVar, CallableDefId, CallableSig, DebruijnIndex, GenericPredicate, ProjectionPredicate,\n-    ProjectionTy, Substs, TraitRef, Ty, TyKind,\n+    BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, GenericPredicate,\n+    ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TyKind,\n };\n use mapping::{\n-    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsAssocType,\n-    TypeAliasAsValue,\n+    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n };\n \n pub use self::interner::Interner;\n@@ -234,7 +235,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         ty: TyKind::BoundVar(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 })\n                             .intern(&Interner),\n                         projection_ty: ProjectionTy {\n-                            associated_ty: future_output,\n+                            associated_ty: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n                             parameters: Substs::single(\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n@@ -383,7 +384,7 @@ pub(crate) fn associated_ty_data_query(\n     id: AssocTypeId,\n ) -> Arc<AssociatedTyDatum> {\n     debug!(\"associated_ty_data {:?}\", id);\n-    let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(db, id).0;\n+    let type_alias: TypeAliasId = from_assoc_type_id(id);\n     let trait_ = match type_alias.lookup(db.upcast()).container {\n         AssocContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n@@ -438,10 +439,8 @@ pub(crate) fn trait_datum_query(\n         fundamental: false,\n     };\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n-    let associated_ty_ids = trait_data\n-        .associated_types()\n-        .map(|type_alias| TypeAliasAsAssocType(type_alias).to_chalk(db))\n-        .collect();\n+    let associated_ty_ids =\n+        trait_data.associated_types().map(|type_alias| to_assoc_type_id(type_alias)).collect();\n     let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n@@ -623,7 +622,7 @@ fn type_alias_associated_ty_value(\n     let value_bound = rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = rust_ir::AssociatedTyValue {\n         impl_id: impl_id.to_chalk(db),\n-        associated_ty_id: TypeAliasAsAssocType(assoc_ty).to_chalk(db),\n+        associated_ty_id: to_assoc_type_id(assoc_ty),\n         value: make_binders(value_bound, ty.num_binders),\n     };\n     Arc::new(value)"}, {"sha": "1dc3f497d484eadfc14bc6e1b26b3c8bcbfb6bb6", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -12,7 +12,6 @@ pub struct Interner;\n \n pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n-pub(crate) type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n@@ -21,7 +20,6 @@ pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n-pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;"}, {"sha": "23ef07d779a8527ffea7a124e49d2376b6febfa6", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 18, "deletions": 58, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -14,6 +14,7 @@ use hir_def::{AssocContainerId, GenericDefId, Lookup, TypeAliasId};\n \n use crate::{\n     db::HirDatabase,\n+    from_assoc_type_id,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n     AliasTy, CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy,\n@@ -38,9 +39,7 @@ impl ToChalk for Ty {\n                 })\n                 .intern(&Interner)\n             }\n-            TyKind::AssociatedType(type_alias, substs) => {\n-                let assoc_type = TypeAliasAsAssocType(type_alias);\n-                let assoc_type_id = assoc_type.to_chalk(db);\n+            TyKind::AssociatedType(assoc_type_id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::AssociatedType(assoc_type_id, substitution).intern(&Interner)\n             }\n@@ -51,11 +50,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n \n-            TyKind::ForeignType(type_alias) => {\n-                let foreign_type = TypeAliasAsForeignType(type_alias);\n-                let foreign_type_id = foreign_type.to_chalk(db);\n-                chalk_ir::TyKind::Foreign(foreign_type_id).intern(&Interner)\n-            }\n+            TyKind::ForeignType(id) => chalk_ir::TyKind::Foreign(id).intern(&Interner),\n \n             TyKind::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n \n@@ -71,8 +66,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Slice(substs[0].clone().to_chalk(db)).intern(&Interner)\n             }\n             TyKind::Str => chalk_ir::TyKind::Str.intern(&Interner),\n-            TyKind::FnDef(callable_def, substs) => {\n-                let id = callable_def.to_chalk(db);\n+            TyKind::FnDef(id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::FnDef(id, substitution).intern(&Interner)\n             }\n@@ -89,7 +83,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Adt(adt_id, substitution).intern(&Interner)\n             }\n             TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n-                let associated_ty_id = TypeAliasAsAssocType(proj_ty.associated_ty).to_chalk(db);\n+                let associated_ty_id = proj_ty.associated_ty;\n                 let substitution = proj_ty.parameters.to_chalk(db);\n                 chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n                     associated_ty_id,\n@@ -143,8 +137,7 @@ impl ToChalk for Ty {\n                 TyKind::Placeholder(db.lookup_intern_type_param_id(interned_id))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n-                let associated_ty =\n-                    from_chalk::<TypeAliasAsAssocType, _>(db, proj.associated_ty_id).0;\n+                let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);\n                 TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty, parameters }))\n             }\n@@ -184,10 +177,9 @@ impl ToChalk for Ty {\n             }\n \n             chalk_ir::TyKind::Adt(adt_id, subst) => TyKind::Adt(adt_id, from_chalk(db, subst)),\n-            chalk_ir::TyKind::AssociatedType(type_id, subst) => TyKind::AssociatedType(\n-                from_chalk::<TypeAliasAsAssocType, _>(db, type_id).0,\n-                from_chalk(db, subst),\n-            ),\n+            chalk_ir::TyKind::AssociatedType(type_id, subst) => {\n+                TyKind::AssociatedType(type_id, from_chalk(db, subst))\n+            }\n \n             chalk_ir::TyKind::OpaqueType(opaque_type_id, subst) => {\n                 TyKind::OpaqueType(from_chalk(db, opaque_type_id), from_chalk(db, subst))\n@@ -208,7 +200,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Never => TyKind::Never,\n \n             chalk_ir::TyKind::FnDef(fn_def_id, subst) => {\n-                TyKind::FnDef(from_chalk(db, fn_def_id), from_chalk(db, subst))\n+                TyKind::FnDef(fn_def_id, from_chalk(db, subst))\n             }\n \n             chalk_ir::TyKind::Closure(id, subst) => {\n@@ -217,9 +209,7 @@ impl ToChalk for Ty {\n                 TyKind::Closure(def, expr, from_chalk(db, subst))\n             }\n \n-            chalk_ir::TyKind::Foreign(foreign_def_id) => {\n-                TyKind::ForeignType(from_chalk::<TypeAliasAsForeignType, _>(db, foreign_def_id).0)\n-            }\n+            chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::ForeignType(foreign_def_id),\n             chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n             chalk_ir::TyKind::GeneratorWitness(_, _) => unimplemented!(), // FIXME\n         }\n@@ -338,34 +328,6 @@ impl ToChalk for CallableDefId {\n     }\n }\n \n-pub(crate) struct TypeAliasAsAssocType(pub(crate) TypeAliasId);\n-\n-impl ToChalk for TypeAliasAsAssocType {\n-    type Chalk = AssocTypeId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> AssocTypeId {\n-        chalk_ir::AssocTypeId(self.0.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, assoc_type_id: AssocTypeId) -> TypeAliasAsAssocType {\n-        TypeAliasAsAssocType(InternKey::from_intern_id(assoc_type_id.0))\n-    }\n-}\n-\n-pub(crate) struct TypeAliasAsForeignType(pub(crate) TypeAliasId);\n-\n-impl ToChalk for TypeAliasAsForeignType {\n-    type Chalk = ForeignDefId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> ForeignDefId {\n-        chalk_ir::ForeignDefId(self.0.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, foreign_def_id: ForeignDefId) -> TypeAliasAsForeignType {\n-        TypeAliasAsForeignType(InternKey::from_intern_id(foreign_def_id.0))\n-    }\n-}\n-\n pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsValue {\n@@ -447,7 +409,7 @@ impl ToChalk for ProjectionTy {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n         chalk_ir::ProjectionTy {\n-            associated_ty_id: TypeAliasAsAssocType(self.associated_ty).to_chalk(db),\n+            associated_ty_id: self.associated_ty,\n             substitution: self.parameters.to_chalk(db),\n         }\n     }\n@@ -457,11 +419,7 @@ impl ToChalk for ProjectionTy {\n         projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n-            associated_ty: from_chalk::<TypeAliasAsAssocType, _>(\n-                db,\n-                projection_ty.associated_ty_id,\n-            )\n-            .0,\n+            associated_ty: projection_ty.associated_ty_id,\n             parameters: from_chalk(db, projection_ty.substitution),\n         }\n     }\n@@ -615,7 +573,10 @@ pub(super) fn generic_predicate_to_inline_bound(\n             if &proj.projection_ty.parameters[0] != self_ty {\n                 return None;\n             }\n-            let trait_ = match proj.projection_ty.associated_ty.lookup(db.upcast()).container {\n+            let trait_ = match from_assoc_type_id(proj.projection_ty.associated_ty)\n+                .lookup(db.upcast())\n+                .container\n+            {\n                 AssocContainerId::TraitId(t) => t,\n                 _ => panic!(\"associated type not in trait\"),\n             };\n@@ -626,8 +587,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: proj.ty.clone().to_chalk(db),\n                 trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: TypeAliasAsAssocType(proj.projection_ty.associated_ty)\n-                    .to_chalk(db),\n+                associated_ty_id: proj.projection_ty.associated_ty,\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n             Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))"}, {"sha": "8892a63a9a6911b2c9356e4a3f60e0df3b7e13bc", "filename": "crates/hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab405f2e9861c34ab9e1ad86af6604523745cef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=6ab405f2e9861c34ab9e1ad86af6604523745cef", "patch": "@@ -4,8 +4,8 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n use itertools::Itertools;\n \n-use super::{from_chalk, Interner, TypeAliasAsAssocType};\n-use crate::{db::HirDatabase, CallableDefId};\n+use super::{from_chalk, Interner};\n+use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n@@ -41,7 +41,7 @@ impl DebugContext<'_> {\n         id: super::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(self.0, id).0;\n+        let type_alias: TypeAliasId = from_assoc_type_id(id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,\n@@ -75,8 +75,7 @@ impl DebugContext<'_> {\n         projection_ty: &chalk_ir::ProjectionTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId =\n-            from_chalk::<TypeAliasAsAssocType, _>(self.0, projection_ty.associated_ty_id).0;\n+        let type_alias = from_assoc_type_id(projection_ty.associated_ty_id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,"}]}