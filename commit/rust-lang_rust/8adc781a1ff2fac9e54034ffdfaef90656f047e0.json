{"sha": "8adc781a1ff2fac9e54034ffdfaef90656f047e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGM3ODFhMWZmMmZhYzllNTQwMzRmZmRmYWVmOTA2NTZmMDQ3ZTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:24Z"}, "message": "Rollup merge of #72771 - jyn514:rustdoc, r=Manishearth\n\nWarn if linking to a private item\n\nCloses https://github.com/rust-lang/rust/issues/72769\n\nr? @GuillaumeGomez", "tree": {"sha": "7ffe828f98873a5348a2c34a379b0d4878512f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ffe828f98873a5348a2c34a379b0d4878512f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adc781a1ff2fac9e54034ffdfaef90656f047e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mE1CRBK7hj4Ov3rIwAAdHIIADPbteoO/4Wv6EeiwQeYiGtR\n0UIHjmGIjn1YpJZrYf97hM5DkIi/Vs1Sf8+byq78Wcf5LfZHH3fZRXQCzDK6Xu6K\nPPZ7U2P9Cma7qWQA0B3MD3pY0lo9GhhC3Cz156Py5zl6h9foMb3rRSGuvfClbffO\n8LXlZu53gswhD31qEPkyLoJKN3u55MfcrMSXv5U/O3Vxi98WpcndpTB1xIJ1le14\nc/8d+Ylgr8rMeaTRFCaeq88UA8j2NaEnzm0cHEoE6B+SfUqKEqvWtV/VfdpKRPh8\nX+cG6BjQV7C6LN0YQkD6frP5uhortQF0hwDc3hGI4jd3duE9e7zuikwhYZSwhJg=\n=fDUT\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ffe828f98873a5348a2c34a379b0d4878512f64\nparent 7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772\nparent 67423821aa0dd705720c9e183d04d4b7a55b723f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205044 -0700\ncommitter GitHub <noreply@github.com> 1593205044 -0700\n\nRollup merge of #72771 - jyn514:rustdoc, r=Manishearth\n\nWarn if linking to a private item\n\nCloses https://github.com/rust-lang/rust/issues/72769\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adc781a1ff2fac9e54034ffdfaef90656f047e0", "html_url": "https://github.com/rust-lang/rust/commit/8adc781a1ff2fac9e54034ffdfaef90656f047e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adc781a1ff2fac9e54034ffdfaef90656f047e0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "url": "https://api.github.com/repos/rust-lang/rust/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "html_url": "https://github.com/rust-lang/rust/commit/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772"}, {"sha": "67423821aa0dd705720c9e183d04d4b7a55b723f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67423821aa0dd705720c9e183d04d4b7a55b723f", "html_url": "https://github.com/rust-lang/rust/commit/67423821aa0dd705720c9e183d04d4b7a55b723f"}], "stats": {"total": 121, "additions": 98, "deletions": 23}, "files": [{"sha": "35b15cf717cee1270b687315e450e8dacf8717c7", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -123,10 +123,6 @@ pub struct Options {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     pub default_passes: DefaultPassOption,\n-    /// Document items that have lower than `pub` visibility.\n-    pub document_private: bool,\n-    /// Document items that have `doc(hidden)`.\n-    pub document_hidden: bool,\n     /// Any passes manually selected by the user.\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n@@ -177,8 +173,6 @@ impl fmt::Debug for Options {\n             .field(\"test_args\", &self.test_args)\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n-            .field(\"document_private\", &self.document_private)\n-            .field(\"document_hidden\", &self.document_hidden)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n@@ -250,6 +244,10 @@ pub struct RenderOptions {\n     pub generate_search_filter: bool,\n     /// Option (disabled by default) to generate files used by RLS and some other tools.\n     pub generate_redirect_pages: bool,\n+    /// Document items that have lower than `pub` visibility.\n+    pub document_private: bool,\n+    /// Document items that have `doc(hidden)`.\n+    pub document_hidden: bool,\n }\n \n impl Options {\n@@ -567,8 +565,6 @@ impl Options {\n             should_test,\n             test_args,\n             default_passes,\n-            document_private,\n-            document_hidden,\n             manual_passes,\n             display_warnings,\n             show_coverage,\n@@ -597,6 +593,8 @@ impl Options {\n                 markdown_playground_url,\n                 generate_search_filter,\n                 generate_redirect_pages,\n+                document_private,\n+                document_hidden,\n             },\n             output_format,\n         })"}, {"sha": "8ab6c74289d1798d1f7ada7bb0e73d8a15bf5e2e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -62,6 +62,8 @@ pub struct DocContext<'tcx> {\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     pub generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n     pub auto_traits: Vec<DefId>,\n+    /// The options given to rustdoc that could be relevant to a pass.\n+    pub render_options: RenderOptions,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -281,8 +283,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         describe_lints,\n         lint_cap,\n         mut default_passes,\n-        mut document_private,\n-        document_hidden,\n         mut manual_passes,\n         display_warnings,\n         render_options,\n@@ -448,6 +448,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         .cloned()\n                         .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n                         .collect(),\n+                    render_options,\n                 };\n                 debug!(\"crate: {:?}\", tcx.hir().krate());\n \n@@ -524,7 +525,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n \n                     if attr.is_word() && name == sym::document_private_items {\n-                        document_private = true;\n+                        ctxt.render_options.document_private = true;\n                     }\n                 }\n \n@@ -544,9 +545,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 for p in passes {\n                     let run = match p.condition {\n                         Always => true,\n-                        WhenDocumentPrivate => document_private,\n-                        WhenNotDocumentPrivate => !document_private,\n-                        WhenNotDocumentHidden => !document_hidden,\n+                        WhenDocumentPrivate => ctxt.render_options.document_private,\n+                        WhenNotDocumentPrivate => !ctxt.render_options.document_private,\n+                        WhenNotDocumentHidden => !ctxt.render_options.document_hidden,\n                     };\n                     if run {\n                         debug!(\"running pass {}\", p.pass.name);\n@@ -556,7 +557,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 ctxt.sess().abort_if_errors();\n \n-                (krate, ctxt.renderinfo.into_inner(), render_options)\n+                (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n             })\n         })\n     })"}, {"sha": "a453a8b3dcb2ae23cec835fe71c990c960740a9d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -468,7 +468,7 @@ impl clean::Path {\n \n pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let cache = cache();\n-    if !did.is_local() && !cache.access_levels.is_public(did) {\n+    if !did.is_local() && !cache.access_levels.is_public(did) && !cache.document_private {\n         return None;\n     }\n "}, {"sha": "04c4685213b2e7df6ad05df902306e7c7156afef", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -469,6 +469,7 @@ pub fn run(\n         static_root_path,\n         generate_search_filter,\n         generate_redirect_pages,\n+        document_private,\n         ..\n     } = options;\n \n@@ -546,7 +547,7 @@ pub fn run(\n     scx.ensure_dir(&dst)?;\n     krate = sources::render(&dst, &mut scx, krate)?;\n     let (new_crate, index, cache) =\n-        Cache::from_krate(renderinfo, &extern_html_root_urls, &dst, krate);\n+        Cache::from_krate(renderinfo, document_private, &extern_html_root_urls, &dst, krate);\n     krate = new_crate;\n     let cache = Arc::new(cache);\n     let mut cx = Context {"}, {"sha": "1b5c8a9378e41efbd55ce77343bd0817b63e86e7", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -91,6 +91,10 @@ crate struct Cache {\n     /// The version of the crate being documented, if given from the `--crate-version` flag.\n     pub crate_version: Option<String>,\n \n+    /// Whether to document private items.\n+    /// This is stored in `Cache` so it doesn't need to be passed through all rustdoc functions.\n+    pub document_private: bool,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n     stack: Vec<String>,\n     parent_stack: Vec<DefId>,\n@@ -126,6 +130,7 @@ crate struct Cache {\n impl Cache {\n     pub fn from_krate(\n         renderinfo: RenderInfo,\n+        document_private: bool,\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n         mut krate: clean::Crate,\n@@ -160,6 +165,7 @@ impl Cache {\n             stripped_mod: false,\n             access_levels,\n             crate_version: krate.version.take(),\n+            document_private,\n             orphan_impl_items: Vec::new(),\n             orphan_trait_impls: Vec::new(),\n             traits: krate.external_traits.replace(Default::default()),"}, {"sha": "8da74f375d9ceb1916e17c5da9e584e545a84268", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -178,6 +178,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });\n+            debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, result, ns);\n             let result = match result {\n                 Ok((_, Res::Err)) => Err(ErrorKind::ResolutionFailure),\n                 _ => result.map_err(|_| ErrorKind::ResolutionFailure),\n@@ -202,7 +203,13 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n-                    _ => return Ok((res, extra_fragment.clone())),\n+                    other => {\n+                        debug!(\n+                            \"failed to resolve {} in namespace {:?} (got {:?})\",\n+                            path_str, ns, other\n+                        );\n+                        return Ok((res, extra_fragment.clone()));\n+                    }\n                 };\n \n                 if value != (ns == ValueNS) {\n@@ -555,12 +562,13 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             } else {\n                 (parts[0].to_owned(), None)\n             };\n+            let resolved_self;\n+            let mut path_str;\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let mut path_str = if let Some(prefix) =\n-                    [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n-                        .iter()\n-                        .find(|p| link.starts_with(**p))\n+                path_str = if let Some(prefix) = [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n+                    .iter()\n+                    .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(TypeNS);\n                     link.trim_start_matches(prefix)\n@@ -614,7 +622,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 let base_node =\n                     if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n \n-                let resolved_self;\n                 // replace `Self` with suitable item's parent name\n                 if path_str.starts_with(\"Self::\") {\n                     if let Some(ref name) = parent_name {\n@@ -760,6 +767,32 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             if let Res::PrimTy(_) = res {\n                 item.attrs.links.push((ori_link, None, fragment));\n             } else {\n+                debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n+                if let Some(local) = res.opt_def_id().and_then(|def_id| def_id.as_local()) {\n+                    use rustc_hir::def_id::LOCAL_CRATE;\n+\n+                    let hir_id = self.cx.tcx.hir().as_local_hir_id(local);\n+                    if !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_id)\n+                        && !self.cx.render_options.document_private\n+                    {\n+                        let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+                        let err_msg = format!(\n+                            \"public documentation for `{}` links to a private item\",\n+                            item_name\n+                        );\n+                        build_diagnostic(\n+                            cx,\n+                            &item,\n+                            path_str,\n+                            &dox,\n+                            link_range,\n+                            &err_msg,\n+                            \"this item is private\",\n+                            None,\n+                        );\n+                        continue;\n+                    }\n+                }\n                 let id = register_res(cx, res);\n                 item.attrs.links.push((ori_link, Some(id), fragment));\n             }"}, {"sha": "0a8dafdaf94667ef591fcc5f9ad5f8fd00c28cb3", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -0,0 +1,10 @@\n+warning: `[DontDocMe]` public documentation for `DocMe` links to a private item\n+  --> $DIR/intra-links-private.rs:6:11\n+   |\n+LL | /// docs [DontDocMe]\n+   |           ^^^^^^^^^ this item is private\n+   |\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7906aba5b1a9c27265a2b17ae1ae8a6045c3885", "filename": "src/test/rustdoc-ui/intra-links-private.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// revisions: public private\n+// [private]compile-flags: --document-private-items\n+#![cfg_attr(private, deny(intra_doc_resolution_failure))]\n+\n+/// docs [DontDocMe]\n+//[public]~^ WARNING `[DontDocMe]` public documentation for `DocMe` links to a private item\n+// FIXME: for [private] we should also make sure the link was actually generated\n+pub struct DocMe;\n+struct DontDocMe;"}, {"sha": "21cb7eb9040bdecead088b4b46b3defe7705056c", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -0,0 +1,6 @@\n+// ignore-test\n+// check-pass\n+\n+/// docs [label][with#anchor#error]\n+//~^ WARNING has an issue with the link anchor\n+pub struct S;"}, {"sha": "5bbc62b76dd044fc85f91a8ea7143c855e70bc7d", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8adc781a1ff2fac9e54034ffdfaef90656f047e0/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr?ref=8adc781a1ff2fac9e54034ffdfaef90656f047e0", "patch": "@@ -0,0 +1,10 @@\n+warning: `[with#anchor#error]` has an issue with the link anchor.\n+  --> $DIR/reference-link-has-one-warning.rs:3:18\n+   |\n+LL | /// docs [label][with#anchor#error]\n+   |                  ^^^^^^^^^^^^^^^^^ only one `#` is allowed in a link\n+   |\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}