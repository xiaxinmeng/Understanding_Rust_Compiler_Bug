{"sha": "fa6b70658e76ca47e1627308c736edab63a17dc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmI3MDY1OGU3NmNhNDdlMTYyNzMwOGM3MzZlZGFiNjNhMTdkYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-14T00:20:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-14T00:20:54Z"}, "message": "Auto merge of #62560 - pietroalbini:tools-builders-on-prs, r=alexcrichton\n\nci: add a pr builder to test tools when submodules are updated\n\nThis PR adds the x86_64-gnu-tools builders to PRs where submodules are updated.\n\nSince it's not possible to *start* the builder only when submodule changes are detected, I opted into adding a \"decider\" task at the start of the job which sets the `SKIP_JOB` environment variable when submodules are not updated, and I gated the most time-consuming tasks (the actual build and artifacts upload) on the variable not being there. All of this is conditionally included in the `steps/run.yml` only when a template parameter is present, so it should only affect that builder on PRs.\n\nThe cost for this should be a dummy builder running for 2/3 minutes for each PR, and we should be able to handle it.\n\nFixes https://github.com/rust-lang/rust/issues/61837\nr? @alexcrichton", "tree": {"sha": "8dc9ef9186513194db655f550b33b3120556a666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc9ef9186513194db655f550b33b3120556a666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6b70658e76ca47e1627308c736edab63a17dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6b70658e76ca47e1627308c736edab63a17dc8", "html_url": "https://github.com/rust-lang/rust/commit/fa6b70658e76ca47e1627308c736edab63a17dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6b70658e76ca47e1627308c736edab63a17dc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "html_url": "https://github.com/rust-lang/rust/commit/d32a7250dbf797c9a89f56de0842d7ad43bfe85f"}, {"sha": "2d2dcb0dc75d04b3dbce08637546e8eea89ec608", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2dcb0dc75d04b3dbce08637546e8eea89ec608", "html_url": "https://github.com/rust-lang/rust/commit/2d2dcb0dc75d04b3dbce08637546e8eea89ec608"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "e77d047fa2d99cfd672894b0f14995f611a04925", "filename": ".azure-pipelines/pr.yml", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa6b70658e76ca47e1627308c736edab63a17dc8/.azure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fa6b70658e76ca47e1627308c736edab63a17dc8/.azure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fpr.yml?ref=fa6b70658e76ca47e1627308c736edab63a17dc8", "patch": "@@ -20,14 +20,12 @@ jobs:\n       mingw-check:\n         IMAGE: mingw-check\n \n-# TODO: enable this job if the commit message matches this regex, need tools\n-# figure out how to get the current commit message on azure and stick it in a\n-# condition somewhere\n-#     if: commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/\n-# - job: Linux-x86_64-gnu-tools\n-#   pool:\n-#     vmImage: ubuntu-16.04\n-#   steps:\n-#     - template: steps/run.yml\n-#   variables:\n-#     IMAGE: x86_64-gnu-tools\n+- job: LinuxTools\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+    - template: steps/run.yml\n+      parameters:\n+        only_on_updated_submodules: 'yes'\n+  variables:\n+    IMAGE: x86_64-gnu-tools"}, {"sha": "28a958eb1453faf4e30233c562ba4257ab127fff", "filename": ".azure-pipelines/steps/run.yml", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fa6b70658e76ca47e1627308c736edab63a17dc8/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fa6b70658e76ca47e1627308c736edab63a17dc8/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=fa6b70658e76ca47e1627308c736edab63a17dc8", "patch": "@@ -6,6 +6,11 @@\n #\n # Check travis config for `gdb --batch` command to print all crash logs\n \n+parameters:\n+  # When this parameter is set to anything other than an empty string the tests\n+  # will only be executed when the commit updates submodules\n+  only_on_updated_submodules: ''\n+\n steps:\n \n # Disable automatic line ending conversion, which is enabled by default on\n@@ -21,6 +26,22 @@ steps:\n - checkout: self\n   fetchDepth: 2\n \n+# Set the SKIP_JOB environment variable if this job is supposed to only run\n+# when submodules are updated and they were not. The following time consuming\n+# tasks will be skipped when the environment variable is present.\n+- ${{ if parameters.only_on_updated_submodules }}:\n+  - bash: |\n+      set -e\n+      # Submodules pseudo-files inside git have the 160000 permissions, so when\n+      # those files are present in the diff a submodule was updated.\n+      if git diff HEAD^ | grep \"^index .* 160000\" >/dev/null 2>&1; then\n+          echo \"Executing the job since submodules are updated\"\n+      else\n+          echo \"Not executing this job since no submodules were updated\"\n+          echo \"##vso[task.setvariable variable=SKIP_JOB;]1\"\n+      fi\n+    displayName: Decide whether to run this job\n+\n # Spawn a background process to collect CPU usage statistics which we'll upload\n # at the end of the build. See the comments in the script here for more\n # information.\n@@ -71,7 +92,7 @@ steps:\n     echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json\n     sudo service docker restart\n   displayName: Enable IPv6\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Linux'))\n \n # Disable automatic line ending conversion (again). On Windows, when we're\n # installing dependencies, something switches the git configuration directory or\n@@ -87,12 +108,12 @@ steps:\n     set -e\n     mkdir -p $HOME/rustsrc\n     $BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc\n-  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), ne(variables['Agent.OS'], 'Windows_NT'))\n   displayName: Check out submodules (Unix)\n - script: |\n     if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n     sh src/ci/init_repo.sh . /d/cache/rustsrc\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Windows_NT'))\n   displayName: Check out submodules (Windows)\n \n # See also the disable for autocrlf above, this just checks that it worked\n@@ -124,10 +145,10 @@ steps:\n     retry pip3 install awscli --upgrade --user\n     echo \"##vso[task.prependpath]$HOME/.local/bin\"\n   displayName: Install awscli (Linux)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Linux'))\n - script: pip install awscli\n   displayName: Install awscli (non-Linux)\n-  condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), ne(variables['Agent.OS'], 'Linux'))\n \n # Configure our CI_JOB_NAME variable which log analyzers can use for the main\n # step to see what's going on.\n@@ -145,7 +166,7 @@ steps:\n     python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n     cd ..\n     rm -rf rust-toolstate\n-  condition: and(succeeded(), eq(variables['IMAGE'], 'mingw-check'))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['IMAGE'], 'mingw-check'))\n   displayName: Verify the publish_toolstate script works\n \n - bash: |\n@@ -166,6 +187,7 @@ steps:\n     SRC: .\n     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n     TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Run build\n \n # If we're a deploy builder, use the `aws` command to publish everything to our\n@@ -188,7 +210,7 @@ steps:\n     retry aws s3 cp --no-progress --recursive --acl public-read ./$upload_dir s3://$DEPLOY_BUCKET/$deploy_dir/$BUILD_SOURCEVERSION\n   env:\n     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n-  condition: and(succeeded(), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n+  condition: and(succeeded(), not(variables.SKIP_JOB), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n   displayName: Upload artifacts\n \n # Upload CPU usage statistics that we've been gathering this whole time. Always"}]}