{"sha": "f851dfacfe92284124e0c5419ebd054d39ff5dc3", "node_id": "C_kwDOAAsO6NoAKGY4NTFkZmFjZmU5MjI4NDEyNGUwYzU0MTllYmQwNTRkMzlmZjVkYzM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:34:07Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:34:07Z"}, "message": "Rustfmt", "tree": {"sha": "ac96f55287173d198f6523729ed6f9954e572ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac96f55287173d198f6523729ed6f9954e572ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f851dfacfe92284124e0c5419ebd054d39ff5dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f851dfacfe92284124e0c5419ebd054d39ff5dc3", "html_url": "https://github.com/rust-lang/rust/commit/f851dfacfe92284124e0c5419ebd054d39ff5dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f851dfacfe92284124e0c5419ebd054d39ff5dc3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75838d9e8be67b0f707bdb372abe71063a79100a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75838d9e8be67b0f707bdb372abe71063a79100a", "html_url": "https://github.com/rust-lang/rust/commit/75838d9e8be67b0f707bdb372abe71063a79100a"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "7959176ac85df470037730690e555f178e322b2a", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f851dfacfe92284124e0c5419ebd054d39ff5dc3/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851dfacfe92284124e0c5419ebd054d39ff5dc3/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=f851dfacfe92284124e0c5419ebd054d39ff5dc3", "patch": "@@ -59,19 +59,31 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.smax.v\") => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n-                let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, x_lane, y_lane);\n-                fx.bcx.ins().select(gt, x_lane, y_lane)\n-            });\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n         }\n \n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.umax.v\") => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n-                let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, x_lane, y_lane);\n-                fx.bcx.ins().select(gt, x_lane, y_lane)\n-            });\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n         }\n \n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.smaxv.i\") => {\n@@ -95,19 +107,31 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.smin.v\") => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n-                let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane);\n-                fx.bcx.ins().select(gt, x_lane, y_lane)\n-            });\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n         }\n \n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.umin.v\") => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n-                let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane);\n-                fx.bcx.ins().select(gt, x_lane, y_lane)\n-            });\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n         }\n \n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.sminv.i\") => {\n@@ -178,7 +202,6 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n             });\n         }\n         */\n-\n         _ => {\n             fx.tcx.sess.warn(&format!(\n                 \"unsupported AArch64 llvm intrinsic {}; replacing with trap\","}]}