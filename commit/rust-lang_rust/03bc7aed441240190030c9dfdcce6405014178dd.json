{"sha": "03bc7aed441240190030c9dfdcce6405014178dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYmM3YWVkNDQxMjQwMTkwMDMwYzlkZmRjY2U2NDA1MDE0MTc4ZGQ=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-08-21T06:18:05Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-08-22T06:14:42Z"}, "message": "Add async test case for `wrong_self_convention` lint", "tree": {"sha": "fe6e0a0d7e15ecd3356afd6c743d862f4254ec65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe6e0a0d7e15ecd3356afd6c743d862f4254ec65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bc7aed441240190030c9dfdcce6405014178dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bc7aed441240190030c9dfdcce6405014178dd", "html_url": "https://github.com/rust-lang/rust/commit/03bc7aed441240190030c9dfdcce6405014178dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bc7aed441240190030c9dfdcce6405014178dd/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b57ef14290a91bceebe925bb30a844e89d1de05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57ef14290a91bceebe925bb30a844e89d1de05b", "html_url": "https://github.com/rust-lang/rust/commit/b57ef14290a91bceebe925bb30a844e89d1de05b"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "f44305d7e483855614d8ce52a5ea3cb15bea0492", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03bc7aed441240190030c9dfdcce6405014178dd/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bc7aed441240190030c9dfdcce6405014178dd/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=03bc7aed441240190030c9dfdcce6405014178dd", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code)]\n@@ -75,3 +76,15 @@ mod issue4293 {\n         fn into_t3(self: Arc<T>) {}\n     }\n }\n+\n+// False positive for async (see #4037)\n+mod issue4037 {\n+    pub struct Foo;\n+    pub struct Bar;\n+\n+    impl Foo {\n+        pub async fn into_bar(self) -> Bar {\n+            Bar\n+        }\n+    }\n+}"}, {"sha": "ef3ad73ebc7c18cada8aaf7825cb843318343af3", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03bc7aed441240190030c9dfdcce6405014178dd/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bc7aed441240190030c9dfdcce6405014178dd/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=03bc7aed441240190030c9dfdcce6405014178dd", "patch": "@@ -1,73 +1,73 @@\n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:17:17\n+  --> $DIR/wrong_self_convention.rs:18:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:23:21\n+  --> $DIR/wrong_self_convention.rs:24:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n \n error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:35:15\n+  --> $DIR/wrong_self_convention.rs:36:15\n    |\n LL |     fn as_i32(self) {}\n    |               ^^^^\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:37:17\n+  --> $DIR/wrong_self_convention.rs:38:17\n    |\n LL |     fn into_i32(&self) {}\n    |                 ^^^^^\n \n error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:39:15\n+  --> $DIR/wrong_self_convention.rs:40:15\n    |\n LL |     fn is_i32(self) {}\n    |               ^^^^\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:41:15\n+  --> $DIR/wrong_self_convention.rs:42:15\n    |\n LL |     fn to_i32(self) {}\n    |               ^^^^\n \n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:43:17\n+  --> $DIR/wrong_self_convention.rs:44:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n \n error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:45:19\n+  --> $DIR/wrong_self_convention.rs:46:19\n    |\n LL |     pub fn as_i64(self) {}\n    |                   ^^^^\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:46:21\n+  --> $DIR/wrong_self_convention.rs:47:21\n    |\n LL |     pub fn into_i64(&self) {}\n    |                     ^^^^^\n \n error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:47:19\n+  --> $DIR/wrong_self_convention.rs:48:19\n    |\n LL |     pub fn is_i64(self) {}\n    |                   ^^^^\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:48:19\n+  --> $DIR/wrong_self_convention.rs:49:19\n    |\n LL |     pub fn to_i64(self) {}\n    |                   ^^^^\n \n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:49:21\n+  --> $DIR/wrong_self_convention.rs:50:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^"}]}