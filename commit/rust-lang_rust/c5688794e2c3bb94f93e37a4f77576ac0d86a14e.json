{"sha": "c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "node_id": "C_kwDOAAsO6NoAKGM1Njg4Nzk0ZTJjM2JiOTRmOTNlMzdhNGY3NzU3NmFjMGQ4NmExNGU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-28T21:16:50Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-28T21:57:35Z"}, "message": "Migrate some range parsing diagnostics", "tree": {"sha": "faa2e9aa0ab1e378cc6ee7be8b782515f802ad91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa2e9aa0ab1e378cc6ee7be8b782515f802ad91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "html_url": "https://github.com/rust-lang/rust/commit/c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e", "html_url": "https://github.com/rust-lang/rust/commit/4bfab39f9b466fa89f85c57a42c1e71a99c6aa4e"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "1728ef70cba0a7bd817b4db0a917b9060587c9db", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "patch": "@@ -199,6 +199,17 @@ parse_match_arm_body_without_braces = `match` arm body without braces\n         } with a body\n     .suggestion_use_comma_not_semicolon = use a comma to end a `match` arm expression\n \n+parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n+    .suggestion_remove_eq = use `..=` instead\n+    .note = inclusive ranges end with a single equals sign (`..=`)\n+\n+parse_inclusive_range_match_arrow = unexpected `=>` after open range\n+    .suggestion_add_space = add a space between the pattern and `=>`\n+\n+parse_inclusive_range_no_end = inclusive range with no end\n+    .suggestion_open_range = use `..` instead\n+    .note = inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n parse_struct_literal_not_allowed_here = struct literals are not allowed here\n     .suggestion = surround the struct literal with parentheses\n "}, {"sha": "054b41b478d60516d53c729faa2f1ecdcd1bb5d9", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "patch": "@@ -649,6 +649,48 @@ pub(crate) struct MatchArmBodyWithoutBraces {\n     pub sub: MatchArmBodyWithoutBracesSugg,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_extra_equals)]\n+#[note]\n+pub(crate) struct InclusiveRangeExtraEquals {\n+    #[primary_span]\n+    #[suggestion(\n+        suggestion_remove_eq,\n+        style = \"short\",\n+        code = \"..=\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_match_arrow)]\n+pub(crate) struct InclusiveRangeMatchArrow {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(\n+        suggestion_add_space,\n+        style = \"verbose\",\n+        code = \" \",\n+        applicability = \"machine-applicable\"\n+    )]\n+    pub after_pat: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_no_end, code = \"E0586\")]\n+#[note]\n+pub(crate) struct InclusiveRangeNoEnd {\n+    #[primary_span]\n+    #[suggestion(\n+        suggestion_open_range,\n+        code = \"..\",\n+        applicability = \"machine-applicable\",\n+        style = \"short\"\n+    )]\n+    pub span: Span,\n+}\n+\n #[derive(Subdiagnostic)]\n pub(crate) enum MatchArmBodyWithoutBracesSugg {\n     #[multipart_suggestion(suggestion_add_braces, applicability = \"machine-applicable\")]"}, {"sha": "912f7cc14f6cc238589469007013becf9d6239c2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5688794e2c3bb94f93e37a4f77576ac0d86a14e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "patch": "@@ -1,5 +1,7 @@\n use super::{ForceCollect, Parser, PathStyle, TrailingToken};\n-use crate::errors::RemoveLet;\n+use crate::errors::{\n+    InclusiveRangeExtraEquals, InclusiveRangeMatchArrow, InclusiveRangeNoEnd, RemoveLet,\n+};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -9,7 +11,7 @@ use rustc_ast::{\n     PatField, PatKind, Path, QSelf, RangeEnd, RangeSyntax,\n };\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -782,29 +784,16 @@ impl<'a> Parser<'a> {\n     }\n \n     fn error_inclusive_range_with_extra_equals(&self, span: Span) {\n-        self.struct_span_err(span, \"unexpected `=` after inclusive range\")\n-            .span_suggestion_short(span, \"use `..=` instead\", \"..=\", Applicability::MaybeIncorrect)\n-            .note(\"inclusive ranges end with a single equals sign (`..=`)\")\n-            .emit();\n+        self.sess.emit_err(InclusiveRangeExtraEquals { span });\n     }\n \n     fn error_inclusive_range_match_arrow(&self, span: Span) {\n-        let without_eq = span.with_hi(span.hi() - rustc_span::BytePos(1));\n-        self.struct_span_err(span, \"unexpected `=>` after open range\")\n-            .span_suggestion_verbose(\n-                without_eq.shrink_to_hi(),\n-                \"add a space between the pattern and `=>`\",\n-                \" \",\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let after_pat = span.with_hi(span.hi() - rustc_span::BytePos(1)).shrink_to_hi();\n+        self.sess.emit_err(InclusiveRangeMatchArrow { span, after_pat });\n     }\n \n     fn error_inclusive_range_with_no_end(&self, span: Span) {\n-        struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n-            .span_suggestion_short(span, \"use `..` instead\", \"..\", Applicability::MachineApplicable)\n-            .note(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n-            .emit();\n+        self.sess.emit_err(InclusiveRangeNoEnd { span });\n     }\n \n     /// Parse a range-to pattern, `..X` or `..=X` where `X` remains to be parsed."}]}