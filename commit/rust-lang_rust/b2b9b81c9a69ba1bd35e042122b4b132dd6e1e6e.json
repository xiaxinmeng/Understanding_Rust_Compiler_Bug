{"sha": "b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjliODFjOWE2OWJhMWJkMzVlMDQyMTIyYjRiMTMyZGQ2ZTFlNmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-27T00:46:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-27T00:46:14Z"}, "message": "Account for doc comments coming from proc macros without spans", "tree": {"sha": "dc4e9bba2ad259cfdb9046e8484e3bf7f7e6fe8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc4e9bba2ad259cfdb9046e8484e3bf7f7e6fe8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "html_url": "https://github.com/rust-lang/rust/commit/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "67aa014a788f224f3e89681e386498ba4d62632f", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n "}, {"sha": "2951b2ccb2af91c062b96099e64ff15e99dc9a2b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "patch": "@@ -465,7 +465,7 @@ fn resolution_failure(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n@@ -517,7 +517,7 @@ fn ambiguity_error(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut msg = format!(\"`{}` is \", path_str);\n "}, {"sha": "49a34c7e46281a1bd12048917a0b4a902fd5098b", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=b2b9b81c9a69ba1bd35e042122b4b132dd6e1e6e", "patch": "@@ -339,7 +339,7 @@ pub fn look_for_tests<'tcx>(\n     find_testable_code(&dox, &mut tests, ErrorCodes::No);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n-        let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());\n+        let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n@@ -352,20 +352,23 @@ pub fn look_for_tests<'tcx>(\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs),\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             \"Documentation test in private item\");\n         diag.emit();\n     }\n }\n \n /// Returns a span encompassing all the given attributes.\n-crate fn span_of_attrs(attrs: &clean::Attributes) -> Span {\n+crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {\n-        return DUMMY_SP;\n+        return None;\n     }\n     let start = attrs.doc_strings[0].span();\n+    if start == DUMMY_SP {\n+        return None;\n+    }\n     let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n-    start.to(end)\n+    Some(start.to(end))\n }\n \n /// Attempts to match a range of bytes from parsed markdown to a `Span` in the source code.\n@@ -391,7 +394,7 @@ crate fn source_span_for_markdown_range(\n     let snippet = cx\n         .sess()\n         .source_map()\n-        .span_to_snippet(span_of_attrs(attrs))\n+        .span_to_snippet(span_of_attrs(attrs)?)\n         .ok()?;\n \n     let starting_line = markdown[..md_range.start].matches('\\n').count();\n@@ -441,10 +444,8 @@ crate fn source_span_for_markdown_range(\n         }\n     }\n \n-    let sp = span_of_attrs(attrs).from_inner(InnerSpan::new(\n+    Some(span_of_attrs(attrs)?.from_inner(InnerSpan::new(\n         md_range.start + start_bytes,\n         md_range.end + start_bytes + end_bytes,\n-    ));\n-\n-    Some(sp)\n+    )))\n }"}]}