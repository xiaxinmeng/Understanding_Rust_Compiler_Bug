{"sha": "5f64adc44b1245ba644f66c29d6bbc5c940422c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNjRhZGM0NGIxMjQ1YmE2NDRmNjZjMjlkNmJiYzVjOTQwNDIyYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-09T03:06:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-09T03:06:48Z"}, "message": "auto merge of #12706 : pongad/rust/issue_12698, r=brson\n\nFixes #12698", "tree": {"sha": "4fb44076b9fa33ce5e4f711d1cfc5c25717713a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb44076b9fa33ce5e4f711d1cfc5c25717713a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f64adc44b1245ba644f66c29d6bbc5c940422c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f64adc44b1245ba644f66c29d6bbc5c940422c9", "html_url": "https://github.com/rust-lang/rust/commit/5f64adc44b1245ba644f66c29d6bbc5c940422c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f64adc44b1245ba644f66c29d6bbc5c940422c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1681df89221a0460ef2e30a69e5df9809e2a8e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1681df89221a0460ef2e30a69e5df9809e2a8e1", "html_url": "https://github.com/rust-lang/rust/commit/e1681df89221a0460ef2e30a69e5df9809e2a8e1"}, {"sha": "438893b36fe241b37eb76250f7c38ac8832f5706", "url": "https://api.github.com/repos/rust-lang/rust/commits/438893b36fe241b37eb76250f7c38ac8832f5706", "html_url": "https://github.com/rust-lang/rust/commit/438893b36fe241b37eb76250f7c38ac8832f5706"}], "stats": {"total": 403, "additions": 36, "deletions": 367}, "files": [{"sha": "398091b60cae3a235358ac559eafb7eca6fd6884", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -11,7 +11,7 @@\n //! Types dealing with dynamic mutability\n \n use cast;\n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use cmp::Eq;\n use fmt;\n use kinds::{marker, Pod};\n@@ -222,13 +222,6 @@ impl<T: Clone> Clone for RefCell<T> {\n     }\n }\n \n-impl<T: DeepClone> DeepClone for RefCell<T> {\n-    fn deep_clone(&self) -> RefCell<T> {\n-        let x = self.borrow();\n-        RefCell::new(x.get().deep_clone())\n-    }\n-}\n-\n impl<T: Eq> Eq for RefCell<T> {\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         let a = self.borrow();"}, {"sha": "ce5f056622f369c7798d6cd284c27fd26bb1894d", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -21,8 +21,6 @@ the `clone` method.\n \n */\n \n-use std::kinds::Freeze;\n-\n /// A common trait for cloning an object.\n pub trait Clone {\n     /// Returns a copy of the value. The contents of owned pointers\n@@ -125,92 +123,6 @@ extern_fn_clone!(A, B, C, D, E, F)\n extern_fn_clone!(A, B, C, D, E, F, G)\n extern_fn_clone!(A, B, C, D, E, F, G, H)\n \n-/// A trait distinct from `Clone` which represents \"deep copies\" of things like\n-/// managed boxes which would otherwise not be copied.\n-pub trait DeepClone: Clone {\n-    /// Return a deep copy of the value. Unlike `Clone`, the contents of shared pointer types\n-    /// *are* copied.\n-    fn deep_clone(&self) -> Self;\n-\n-    /// Perform deep copy-assignment from `source`.\n-    ///\n-    /// `a.deep_clone_from(&b)` is equivalent to `a = b.deep_clone()` in\n-    /// functionality, but can be overridden to reuse the resources of `a` to\n-    /// avoid unnecessary allocations.\n-    #[inline(always)]\n-    fn deep_clone_from(&mut self, source: &Self) {\n-        *self = source.deep_clone()\n-    }\n-}\n-\n-impl<T: DeepClone> DeepClone for ~T {\n-    /// Return a deep copy of the owned box.\n-    #[inline]\n-    fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n-\n-    /// Perform deep copy-assignment from `source` by reusing the existing allocation.\n-    fn deep_clone_from(&mut self, source: &~T) {\n-        **self = (**source).deep_clone()\n-    }\n-}\n-\n-// FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n-impl<T: Freeze + DeepClone + 'static> DeepClone for @T {\n-    /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n-    /// a deep clone of a potentially cyclical type.\n-    #[inline]\n-    fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n-}\n-\n-macro_rules! deep_clone_impl(\n-    ($t:ty) => {\n-        impl DeepClone for $t {\n-            /// Return a deep copy of the value.\n-            #[inline]\n-            fn deep_clone(&self) -> $t { *self }\n-        }\n-    }\n-)\n-\n-deep_clone_impl!(int)\n-deep_clone_impl!(i8)\n-deep_clone_impl!(i16)\n-deep_clone_impl!(i32)\n-deep_clone_impl!(i64)\n-\n-deep_clone_impl!(uint)\n-deep_clone_impl!(u8)\n-deep_clone_impl!(u16)\n-deep_clone_impl!(u32)\n-deep_clone_impl!(u64)\n-\n-deep_clone_impl!(f32)\n-deep_clone_impl!(f64)\n-\n-deep_clone_impl!(())\n-deep_clone_impl!(bool)\n-deep_clone_impl!(char)\n-\n-macro_rules! extern_fn_deep_clone(\n-    ($($A:ident),*) => (\n-        impl<$($A,)* ReturnType> DeepClone for extern \"Rust\" fn($($A),*) -> ReturnType {\n-            /// Return a copy of a function pointer\n-            #[inline]\n-            fn deep_clone(&self) -> extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n-        }\n-    )\n-)\n-\n-extern_fn_deep_clone!()\n-extern_fn_deep_clone!(A)\n-extern_fn_deep_clone!(A, B)\n-extern_fn_deep_clone!(A, B, C)\n-extern_fn_deep_clone!(A, B, C, D)\n-extern_fn_deep_clone!(A, B, C, D, E)\n-extern_fn_deep_clone!(A, B, C, D, E, F)\n-extern_fn_deep_clone!(A, B, C, D, E, F, G)\n-extern_fn_deep_clone!(A, B, C, D, E, F, G, H)\n-\n #[test]\n fn test_owned_clone() {\n     let a = ~5i;\n@@ -241,14 +153,6 @@ fn test_clone_from() {\n     assert_eq!(*b, 5);\n }\n \n-#[test]\n-fn test_deep_clone_from() {\n-    let a = ~5;\n-    let mut b = ~10;\n-    b.deep_clone_from(&a);\n-    assert_eq!(*b, 5);\n-}\n-\n #[test]\n fn test_extern_fn_clone() {\n     trait Empty {}\n@@ -261,8 +165,4 @@ fn test_extern_fn_clone() {\n     let _ = test_fn_a.clone();\n     let _ = test_fn_b::<int>.clone();\n     let _ = test_fn_c.clone();\n-\n-    let _ = test_fn_a.deep_clone();\n-    let _ = test_fn_b::<int>.deep_clone();\n-    let _ = test_fn_c.deep_clone();\n }"}, {"sha": "907a2d21b695d0e431687984991a8e3875be2455", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -19,8 +19,7 @@ collector is task-local so `Gc<T>` is not sendable.\n #[allow(experimental)];\n \n use kinds::marker;\n-use kinds::Send;\n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use managed;\n \n /// Immutable garbage-collected pointer type\n@@ -78,16 +77,6 @@ pub static GC: () = ();\n #[cfg(test)]\n pub static GC: () = ();\n \n-/// The `Send` bound restricts this to acyclic graphs where it is well-defined.\n-///\n-/// A `Freeze` bound would also work, but `Send` *or* `Freeze` cannot be expressed.\n-impl<T: DeepClone + Send + 'static> DeepClone for Gc<T> {\n-    #[inline]\n-    fn deep_clone(&self) -> Gc<T> {\n-        Gc::new(self.borrow().deep_clone())\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n@@ -104,16 +93,6 @@ mod tests {\n         assert_eq!(y.borrow().with(|x| *x), 20);\n     }\n \n-    #[test]\n-    fn test_deep_clone() {\n-        let x = Gc::new(RefCell::new(5));\n-        let y = x.deep_clone();\n-        x.borrow().with_mut(|inner| {\n-            *inner = 20;\n-        });\n-        assert_eq!(y.borrow().with(|x| *x), 5);\n-    }\n-\n     #[test]\n     fn test_simple() {\n         let x = Gc::new(5);"}, {"sha": "11d7bc6c1bf8973cf79e4b3186abbd91c42a766c", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -1757,7 +1757,7 @@ impl<'a,\n \n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Fuse<T> {\n     priv iter: T,\n     priv done: bool\n@@ -1946,7 +1946,7 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n }\n \n /// An iterator over the range [start, stop)\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Range<A> {\n     priv state: A,\n     priv stop: A,\n@@ -2020,7 +2020,7 @@ impl<A: Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A> for Range<A> {\n }\n \n /// An iterator over the range [start, stop]\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct RangeInclusive<A> {\n     priv range: Range<A>,\n     priv done: bool\n@@ -2083,7 +2083,7 @@ impl<A: Sub<A, A> + Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A>\n }\n \n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct RangeStep<A> {\n     priv state: A,\n     priv stop: A,\n@@ -2115,7 +2115,7 @@ impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n }\n \n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct RangeStepInclusive<A> {\n     priv state: A,\n     priv stop: A,\n@@ -2150,7 +2150,7 @@ impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n }\n \n /// An iterator that repeats an element endlessly\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Repeat<A> {\n     priv element: A\n }"}, {"sha": "f53c95de414a249672a1083aa4fb839e284862b2", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -15,7 +15,7 @@\n \n #[allow(missing_doc)];\n \n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use cmp::{Eq, Ord};\n use kinds::Pod;\n use mem::size_of;\n@@ -247,7 +247,6 @@ pub trait Bitwise: Bounded\n /// may be useful for systems programming.\n pub trait Primitive: Pod\n                    + Clone\n-                   + DeepClone\n                    + Num\n                    + NumCast\n                    + Ord"}, {"sha": "86f8c143a9e996b61aeee88c1ea91815f5cb0c9d", "filename": "src/libstd/option.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -39,16 +39,15 @@\n \n use any::Any;\n use clone::Clone;\n-use clone::DeepClone;\n-use cmp::{Eq, TotalOrd};\n+use cmp::{Eq, TotalEq, TotalOrd};\n use default::Default;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use kinds::Send;\n use mem;\n use vec;\n \n /// The option type\n-#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, Show)]\n+#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Show)]\n pub enum Option<T> {\n     /// No value\n     None,\n@@ -387,7 +386,7 @@ impl<T> Default for Option<T> {\n /////////////////////////////////////////////////////////////////////////////\n \n /// An iterator that yields either one or zero elements\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Item<A> {\n     priv opt: Option<A>\n }"}, {"sha": "a3380b5db1d2bf7542238810a28b1c7fa6da97f1", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -38,7 +38,7 @@ pub type RevStrComponents<'a> = Map<'a, &'a [u8], Option<&'a str>,\n                                           RevComponents<'a>>;\n \n /// Represents a POSIX file path\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Path {\n     priv repr: ~[u8], // assumed to never be empty or contain NULs\n     priv sepidx: Option<uint> // index of the final separator in repr"}, {"sha": "5b358819e4168f57f3486fabe0972355f64bbc90", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -79,7 +79,7 @@ pub type RevComponents<'a> = Map<'a, Option<&'a str>, &'a [u8],\n //\n // The only error condition imposed here is valid utf-8. All other invalid paths are simply\n // preserved by the data structure; let the Windows API error out on them.\n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n pub struct Path {\n     priv repr: ~str, // assumed to never be empty\n     priv prefix: Option<PathPrefix>,\n@@ -942,7 +942,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[deriving(Eq, Clone, DeepClone)]\n+#[deriving(Eq, Clone)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),"}, {"sha": "b30c78e7962b99fb0bdfd3d2a5c7d45c8d46730f", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -38,7 +38,7 @@ pub use mem::drop;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, IntoBytes};\n pub use c_str::ToCStr;\n pub use char::Char;\n-pub use clone::{Clone, DeepClone};\n+pub use clone::Clone;\n pub use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n pub use iter::{FromIterator, Extendable};"}, {"sha": "8a7edc728c0120452de390e3f331ce86a04cf7c9", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -24,7 +24,7 @@ pointers, and then storing the parent pointers as `Weak` pointers.\n */\n \n use cast::transmute;\n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use cmp::{Eq, Ord};\n use kinds::marker;\n use ops::{Deref, Drop};\n@@ -118,13 +118,6 @@ impl<T> Clone for Rc<T> {\n     }\n }\n \n-impl<T: DeepClone> DeepClone for Rc<T> {\n-    #[inline]\n-    fn deep_clone(&self) -> Rc<T> {\n-        Rc::new(self.borrow().deep_clone())\n-    }\n-}\n-\n impl<T: Eq> Eq for Rc<T> {\n     #[inline(always)]\n     fn eq(&self, other: &Rc<T>) -> bool { *self.borrow() == *other.borrow() }\n@@ -210,16 +203,6 @@ mod tests {\n         assert_eq!(y.borrow().with(|v| *v), 20);\n     }\n \n-    #[test]\n-    fn test_deep_clone() {\n-        let x = Rc::new(RefCell::new(5));\n-        let y = x.deep_clone();\n-        x.borrow().with_mut(|inner| {\n-            *inner = 20;\n-        });\n-        assert_eq!(y.borrow().with(|v| *v), 5);\n-    }\n-\n     #[test]\n     fn test_simple() {\n         let x = Rc::new(5);"}, {"sha": "5c3a587d9895046a5a3a332365e2ae379502bb84", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -16,7 +16,7 @@ use iter::{Iterator, FromIterator};\n use option::{None, Option, Some};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n-#[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, Show)]\n+#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Show)]\n #[must_use]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "3464c4a1128e319f2c93c31ddbeecd7ff0bbc5bf", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -85,7 +85,7 @@ use cast;\n use cast::transmute;\n use char;\n use char::Char;\n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use cmp::{Eq, TotalEq, Ord, TotalOrd, Equiv, Ordering};\n use container::{Container, Mutable};\n use fmt;\n@@ -1326,16 +1326,6 @@ impl<'a> Clone for MaybeOwned<'a> {\n     }\n }\n \n-impl<'a> DeepClone for MaybeOwned<'a> {\n-    #[inline]\n-    fn deep_clone(&self) -> MaybeOwned<'a> {\n-        match *self {\n-            Slice(s) => Slice(s),\n-            Owned(ref s) => Owned(s.to_owned())\n-        }\n-    }\n-}\n-\n impl<'a> Default for MaybeOwned<'a> {\n     #[inline]\n     fn default() -> MaybeOwned<'a> { Slice(\"\") }\n@@ -3031,13 +3021,6 @@ impl Clone for ~str {\n     }\n }\n \n-impl DeepClone for ~str {\n-    #[inline]\n-    fn deep_clone(&self) -> ~str {\n-        self.to_owned()\n-    }\n-}\n-\n impl FromIterator<char> for ~str {\n     #[inline]\n     fn from_iterator<T: Iterator<char>>(iterator: &mut T) -> ~str {\n@@ -4465,16 +4448,9 @@ mod tests {\n     #[test]\n     fn test_maybe_owned_clone() {\n         assert_eq!(Owned(~\"abcde\"), Slice(\"abcde\").clone());\n-        assert_eq!(Owned(~\"abcde\"), Slice(\"abcde\").deep_clone());\n-\n         assert_eq!(Owned(~\"abcde\"), Owned(~\"abcde\").clone());\n-        assert_eq!(Owned(~\"abcde\"), Owned(~\"abcde\").deep_clone());\n-\n         assert_eq!(Slice(\"abcde\"), Slice(\"abcde\").clone());\n-        assert_eq!(Slice(\"abcde\"), Slice(\"abcde\").deep_clone());\n-\n         assert_eq!(Slice(\"abcde\"), Owned(~\"abcde\").clone());\n-        assert_eq!(Slice(\"abcde\"), Owned(~\"abcde\").deep_clone());\n     }\n \n     #[test]"}, {"sha": "8080f57550b3dea863fea57fc9b61aa9236a75f9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -104,7 +104,7 @@ There are a number of free functions that create or take vectors, for example:\n use cast;\n use cast::transmute;\n use ops::Drop;\n-use clone::{Clone, DeepClone};\n+use clone::Clone;\n use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n@@ -2635,24 +2635,6 @@ impl<A: Clone> Clone for ~[A] {\n     }\n }\n \n-impl<A: DeepClone> DeepClone for ~[A] {\n-    #[inline]\n-    fn deep_clone(&self) -> ~[A] {\n-        self.iter().map(|item| item.deep_clone()).collect()\n-    }\n-\n-    fn deep_clone_from(&mut self, source: &~[A]) {\n-        if self.len() < source.len() {\n-            *self = source.deep_clone()\n-        } else {\n-            self.truncate(source.len());\n-            for (x, y) in self.mut_iter().zip(source.iter()) {\n-                x.deep_clone_from(y);\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f.buf, \"[\"));"}, {"sha": "e63363c608beeced5d04003ee0049afd46efab2e", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -44,36 +44,6 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-pub fn expand_deriving_deep_clone(cx: &mut ExtCtxt,\n-                                  span: Span,\n-                                  mitem: @MetaItem,\n-                                  item: @Item,\n-                                  push: |@Item|) {\n-    let trait_def = TraitDef {\n-        span: span,\n-        attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"clone\", \"DeepClone\")),\n-        additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n-        methods: vec!(\n-            MethodDef {\n-                name: \"deep_clone\",\n-                generics: LifetimeBounds::empty(),\n-                explicit_self: borrowed_explicit_self(),\n-                args: Vec::new(),\n-                ret_ty: Self,\n-                inline: true,\n-                const_nonmatching: false,\n-                // cs_clone uses the ident passed to it, i.e. it will\n-                // call deep_clone (not clone) here.\n-                combine_substructure: |c, s, sub| cs_clone(\"DeepClone\", c, s, sub)\n-            }\n-        )\n-    };\n-\n-    trait_def.expand(cx, mitem, item, push)\n-}\n-\n fn cs_clone(\n     name: &str,\n     cx: &mut ExtCtxt, trait_span: Span,"}, {"sha": "890cc75bb9508accba3120c8757e57287fea3d44", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -70,7 +70,6 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                                                                    |i| push(i))));\n                         match tname.get() {\n                             \"Clone\" => expand!(clone::expand_deriving_clone),\n-                            \"DeepClone\" => expand!(clone::expand_deriving_deep_clone),\n \n                             \"Hash\" => expand!(hash::expand_deriving_hash),\n "}, {"sha": "7ac338a92a4c08f63812f42c26a18fe114f66622", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -64,7 +64,7 @@ mod imp {\n /// A record specifying a time value in seconds and nanoseconds.\n \n \n-#[deriving(Clone, DeepClone, Eq, Encodable, Decodable, Show)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Show)]\n pub struct Timespec { sec: i64, nsec: i32 }\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n@@ -191,7 +191,7 @@ pub fn tzset() {\n     }\n }\n \n-#[deriving(Clone, DeepClone, Eq, Encodable, Decodable, Show)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Show)]\n pub struct Tm {\n     tm_sec: i32, // seconds after the minute ~[0-60]\n     tm_min: i32, // minutes after the hour ~[0-59]"}, {"sha": "7cee7b8ee0d0a326ef421140262183f7e594183b", "filename": "src/test/compile-fail/deriving-span-DeepClone-enum-struct-variant.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs?ref=e1681df89221a0460ef2e30a69e5df9809e2a8e1", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n-\n-#[feature(struct_variant)];\n-extern crate extra;\n-\n-#[deriving(Clone)]\n-struct Error;\n-\n-#[deriving(DeepClone,Clone)]\n-enum Enum {\n-   A {\n-     x: Error //~ ERROR\n-   }\n-}\n-\n-fn main() {}"}, {"sha": "c18ebe1758d3ea72d190bb713a00581f8081227a", "filename": "src/test/compile-fail/deriving-span-DeepClone-enum.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs?ref=e1681df89221a0460ef2e30a69e5df9809e2a8e1", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n-\n-#[feature(struct_variant)];\n-extern crate extra;\n-\n-#[deriving(Clone)]\n-struct Error;\n-\n-#[deriving(DeepClone,Clone)]\n-enum Enum {\n-   A(\n-     Error //~ ERROR\n-     )\n-}\n-\n-fn main() {}"}, {"sha": "7d33cd1a28df1ef398857dc92f8e8c532928205b", "filename": "src/test/compile-fail/deriving-span-DeepClone-struct.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs?ref=e1681df89221a0460ef2e30a69e5df9809e2a8e1", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n-\n-#[feature(struct_variant)];\n-extern crate extra;\n-\n-#[deriving(Clone)]\n-struct Error;\n-\n-#[deriving(DeepClone,Clone)]\n-struct Struct {\n-    x: Error //~ ERROR\n-}\n-\n-fn main() {}"}, {"sha": "42dd608f61781780202ebb4db97b44c8dc784720", "filename": "src/test/compile-fail/deriving-span-DeepClone-tuple-struct.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs?ref=e1681df89221a0460ef2e30a69e5df9809e2a8e1", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n-\n-#[feature(struct_variant)];\n-extern crate extra;\n-\n-#[deriving(Clone)]\n-struct Error;\n-\n-#[deriving(DeepClone,Clone)]\n-struct Struct(\n-    Error //~ ERROR\n-);\n-\n-fn main() {}"}, {"sha": "1cc20f4e3da0b817194d7700ea0d44ba95698ef4", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n enum E {\n     A,\n     B(()),\n@@ -17,5 +17,4 @@ enum E {\n \n pub fn main() {\n     let _ = A.clone();\n-    let _ = B(()).deep_clone();\n }"}, {"sha": "1f2e7711eb0eefce83deb2bc8006630fbebf529f", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n enum E<T,U> {\n     A(T),\n     B(T,U),\n@@ -17,5 +17,4 @@ enum E<T,U> {\n \n pub fn main() {\n     let _ = A::<int, int>(1i).clone();\n-    let _ = B(1i, 1.234).deep_clone();\n }"}, {"sha": "8b5da617e28197774ba2eff854cc5d5d77f1dc73", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n struct S<T> {\n     foo: (),\n     bar: (),\n     baz: T,\n }\n \n pub fn main() {\n-    let _ = S { foo: (), bar: (), baz: 1i }.clone().deep_clone();\n+    let _ = S { foo: (), bar: (), baz: 1i }.clone();\n }"}, {"sha": "3fbef5d5a7676e3b2096f6e4ccd0cdacc241654c", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n struct S<T>(T, ());\n \n pub fn main() {\n-    let _ = S(1i, ()).clone().deep_clone();\n+    let _ = S(1i, ()).clone();\n }"}, {"sha": "8e0afad218936e5d965c7f3c6d523dc855a954bf", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, DeepClone)]\n+#[deriving(Clone)]\n struct S {\n     _int: int,\n     _i8: i8,"}, {"sha": "174081786a77689e2a59e4c07a2fd32ded94c8df", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -28,21 +28,21 @@ mod submod {\n     // cause errors about unrecognised module `std` (or `extra`)\n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Hash,\n-               Clone, DeepClone,\n+               Clone,\n                Show, Rand,\n                Encodable, Decodable)]\n     enum A { A1(uint), A2(int) }\n \n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Hash,\n-               Clone, DeepClone,\n+               Clone,\n                Show, Rand,\n                Encodable, Decodable)]\n     struct B { x: uint, y: int }\n \n     #[deriving(Eq, Ord, TotalEq, TotalOrd,\n                Hash,\n-               Clone, DeepClone,\n+               Clone,\n                Show, Rand,\n                Encodable, Decodable)]\n     struct C(uint, int);"}, {"sha": "34a4c798882b47e27fbc64ad45aec08269403d50", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -10,13 +10,8 @@\n \n extern crate collections;\n \n-use std::clone::{Clone, DeepClone};\n-use std::cmp::{TotalEq, Ord, TotalOrd, Equiv};\n-use std::cmp::Equal;\n-use std::container::{Container, Map, MutableMap};\n-use std::default::Default;\n-use std::str::{Str, SendStr, Owned, Slice};\n-use std::to_str::ToStr;\n+use std::container::{Map, MutableMap};\n+use std::str::{SendStr, Owned, Slice};\n use collections::HashMap;\n use std::option::Some;\n "}, {"sha": "5583d584f46237394a54a242bec7455d549a6241", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f64adc44b1245ba644f66c29d6bbc5c940422c9/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=5f64adc44b1245ba644f66c29d6bbc5c940422c9", "patch": "@@ -10,12 +10,8 @@\n \n extern crate collections;\n \n-use std::clone::{Clone, DeepClone};\n-use std::cmp::{TotalEq, Ord, TotalOrd, Equiv};\n-use std::cmp::Equal;\n-use std::container::{Container, Map, MutableMap};\n-use std::default::Default;\n-use std::str::{Str, SendStr, Owned, Slice};\n+use std::container::{ Map, MutableMap};\n+use std::str::{SendStr, Owned, Slice};\n use std::to_str::ToStr;\n use self::collections::TreeMap;\n use std::option::Some;"}]}