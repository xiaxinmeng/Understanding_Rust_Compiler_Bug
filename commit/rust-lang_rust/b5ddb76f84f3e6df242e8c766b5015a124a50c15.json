{"sha": "b5ddb76f84f3e6df242e8c766b5015a124a50c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGRiNzZmODRmM2U2ZGYyNDJlOGM3NjZiNTAxNWExMjRhNTBjMTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T11:11:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T11:11:40Z"}, "message": "Force stack slot size to be a multiple of 16\n\nThis ensures that all stack slots are aligned to 16 bytes. Without this\nlinking against crates compiled with cg_llvm may cause a crash due to\nsimd instructions requiring a 16 byte alignment.", "tree": {"sha": "b330033665a16e95aaf43eff4ae34d8f0d052172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b330033665a16e95aaf43eff4ae34d8f0d052172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ddb76f84f3e6df242e8c766b5015a124a50c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ddb76f84f3e6df242e8c766b5015a124a50c15", "html_url": "https://github.com/rust-lang/rust/commit/b5ddb76f84f3e6df242e8c766b5015a124a50c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ddb76f84f3e6df242e8c766b5015a124a50c15/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139a6d12de65f81a69e345731f0547c824730a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/139a6d12de65f81a69e345731f0547c824730a19", "html_url": "https://github.com/rust-lang/rust/commit/139a6d12de65f81a69e345731f0547c824730a19"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "b3231e94a33b99fb13d0a3e0d935c2f4ca0e5ac4", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5ddb76f84f3e6df242e8c766b5015a124a50c15/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ddb76f84f3e6df242e8c766b5015a124a50c15/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=b5ddb76f84f3e6df242e8c766b5015a124a50c15", "patch": "@@ -144,7 +144,6 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                     None,\n                     vec![AbiParam::new(scalar_to_clif_type(tcx, scalar.clone()))],\n                 ),\n-                // FIXME implement Vector Abi in a cg_llvm compatible way\n                 Abi::Vector { .. } => {\n                     let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n                     (None, vec![AbiParam::new(vector_ty)])\n@@ -210,15 +209,17 @@ pub(super) fn from_casted_value<'tcx>(\n     cast: CastTarget,\n ) -> CValue<'tcx> {\n     let abi_params = cast_target_to_abi_params(cast);\n-    let size = abi_params\n+    let size: u32 = abi_params\n         .iter()\n         .map(|param| param.value_type.bytes())\n         .sum();\n     // Stack slot size may be bigger for for example `[u8; 3]` which is packed into an `i32`.\n     assert!(u64::from(size) >= layout.size.bytes());\n     let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n         kind: StackSlotKind::ExplicitSlot,\n-        size,\n+        // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n+        // specify stack slot alignment.\n+        size: (size + 15) / 16 * 16,\n         offset: None,\n     });\n     let ptr = Pointer::new(fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0));\n@@ -306,9 +307,7 @@ pub(super) fn cvalue_for_param<'tcx>(\n                 arg_abi.layout,\n             ))\n         }\n-        PassMode::Cast(cast) => {\n-            Some(from_casted_value(fx, &block_params, arg_abi.layout, cast))\n-        }\n+        PassMode::Cast(cast) => Some(from_casted_value(fx, &block_params, arg_abi.layout, cast)),\n         PassMode::Indirect {\n             attrs: _,\n             extra_attrs: None,"}, {"sha": "765604e0f984ec343bba1fd8398a3b6b6008fc83", "filename": "src/value_and_place.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ddb76f84f3e6df242e8c766b5015a124a50c15/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ddb76f84f3e6df242e8c766b5015a124a50c15/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=b5ddb76f84f3e6df242e8c766b5015a124a50c15", "patch": "@@ -334,7 +334,9 @@ impl<'tcx> CPlace<'tcx> {\n \n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n-            size: u32::try_from(layout.size.bytes()).unwrap(),\n+            // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n+            // specify stack slot alignment.\n+            size: (u32::try_from(layout.size.bytes()).unwrap() + 15) / 16 * 16,\n             offset: None,\n         });\n         CPlace {\n@@ -498,7 +500,9 @@ impl<'tcx> CPlace<'tcx> {\n                     // FIXME do something more efficient for transmutes between vectors and integers.\n                     let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n                         kind: StackSlotKind::ExplicitSlot,\n-                        size: src_ty.bytes(),\n+                        // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n+                        // specify stack slot alignment.\n+                        size: (src_ty.bytes() + 15) / 16 * 16,\n                         offset: None,\n                     });\n                     let ptr = Pointer::stack_slot(stack_slot);"}]}