{"sha": "b4a3753cfb9472da78539ecbd97913118f132f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTM3NTNjZmI5NDcyZGE3ODUzOWVjYmQ5NzkxMzExOGYxMzJmOGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-24T19:06:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:22Z"}, "message": "various centril nits", "tree": {"sha": "b1fc8a21eb689588bbcb8b35304cd4dc90715d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1fc8a21eb689588bbcb8b35304cd4dc90715d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a3753cfb9472da78539ecbd97913118f132f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3753cfb9472da78539ecbd97913118f132f8b", "html_url": "https://github.com/rust-lang/rust/commit/b4a3753cfb9472da78539ecbd97913118f132f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3753cfb9472da78539ecbd97913118f132f8b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2772e89899071bfb830d949ab53022b758cdf06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2772e89899071bfb830d949ab53022b758cdf06", "html_url": "https://github.com/rust-lang/rust/commit/d2772e89899071bfb830d949ab53022b758cdf06"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7517f9c6de9d2c58420b3ca0e7dca088074d739d", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4a3753cfb9472da78539ecbd97913118f132f8b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a3753cfb9472da78539ecbd97913118f132f8b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=b4a3753cfb9472da78539ecbd97913118f132f8b", "patch": "@@ -218,10 +218,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// Enforce a constraint like\n     ///\n     /// ```\n-    /// pick 'r from ['o...]\n+    /// 'r member of ['c...]\n     /// ```\n     ///\n-    /// We look for all option regions from the list `'o...` that:\n+    /// We look for all choice regions from the list `'c...` that:\n     ///\n     /// (a) are greater than the current value of `'r` (which is a lower bound)\n     ///\n@@ -230,8 +230,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// (b) are compatible with the upper bounds of `'r` that we can\n     /// find by traversing the graph.\n     ///\n-    /// From that list, we look for a *minimal* option `'o_min`. If we\n-    /// find one, then we can enforce that `'r: 'o_min`.\n+    /// From that list, we look for a *minimal* option `'c_min`. If we\n+    /// find one, then we can enforce that `'r: 'c_min`.\n     fn enforce_member_constraint(\n         &self,\n         graph: &RegionGraph<'tcx>,\n@@ -241,7 +241,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         debug!(\"enforce_member_constraint(member_constraint={:#?})\", member_constraint);\n \n         // The constraint is some inference variable (`vid`) which\n-        // must be equal to one of the options\n+        // must be equal to one of the options.\n         let member_vid = match member_constraint.member_region {\n             ty::ReVar(vid) => *vid,\n             _ => return false,\n@@ -254,7 +254,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             VarValue::Value(r) => r,\n         };\n \n-        // find all the \"upper bounds\" -- that is, each region `b` such that\n+        // Find all the \"upper bounds\" -- that is, each region `b` such that\n         // `r0 <= b` must hold.\n         let (member_upper_bounds, _) = self.collect_concrete_regions(\n             graph,\n@@ -263,7 +263,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             None,\n         );\n \n-        // get an iterator over the *available choice* -- that is,\n+        // Get an iterator over the *available choice* -- that is,\n         // each choice region `c` where `lb <= c` and `c <= ub` for all the\n         // upper bounds `ub`.\n         debug!(\"enforce_member_constraint: upper_bounds={:#?}\", member_upper_bounds);\n@@ -274,9 +274,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     .all(|upper_bound| self.sub_concrete_regions(option, upper_bound.region))\n         });\n \n-        // if there >1 option, we only make a choice if there is a\n-        // single *least* choice -- i.e., some available region that\n-        // is `<=` all the others.\n+        // If there is more than one option, we only make a choice if\n+        // there is a single *least* choice -- i.e., some available\n+        // region that is `<=` all the others.\n         let mut least_choice: ty::Region<'tcx> = match options.next() {\n             Some(&r) => r,\n             None => return false,\n@@ -554,6 +554,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n         }\n \n+        // Check that all member constraints are satisfied.\n         for member_constraint in &self.data.member_constraints {\n             let member_region = var_data.normalize(self.tcx(), member_constraint.member_region);\n             let choice_regions = member_constraint"}]}