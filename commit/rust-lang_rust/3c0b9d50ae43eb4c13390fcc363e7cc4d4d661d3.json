{"sha": "3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "node_id": "C_kwDOAAsO6NoAKDNjMGI5ZDUwYWU0M2ViNGMxMzM5MGZjYzM2M2U3Y2M0ZDRkNjYxZDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-30T22:57:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T22:57:27Z"}, "message": "Rollup merge of #89685 - DeveloperC286:iter_fields_to_private, r=oli-obk\n\nrefactor: VecDeques Iter fields to private\n\nMade the fields of VecDeque's Iter private by creating a Iter::new(...) function to create a new instance of Iter and migrating usage to use Iter::new(...).", "tree": {"sha": "de5f0e96c5df617b55b0cb1b0c4104d1075ee906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de5f0e96c5df617b55b0cb1b0c4104d1075ee906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilUvXCRBK7hj4Ov3rIwAAsjYIAJvUkcbJqgNu3LZjK46E8yQK\nL62gZgR7HuKJeUKWeYOw7SG8ZTmQqsHFpYDx7TF4mfODOsfYib+nkFFoUMxqOH7M\nJRbAFjAE14nOLOEORR96rhVL7HRqgUrVE13/ErqbYBQujyhW2M4rg9E9L9NjkvNh\ngY16FAL5Ud+lCW4N2Rdsdv973gz74mPCRsW7YFWOkfUZmrIphaCkx4qmm/2OzrOR\ngCYc6LctcNRtpBVEfQjuDZ3tTZ9SYdkSnRaauXPged0e/zVl/kbRGvieNSHkYxhr\ndUm1jA6qbYztMggbalrbjd9ecpkPGK0at1cnvHNbjMLdJMPc9FDzmhXwOjY9r2U=\n=TkzZ\n-----END PGP SIGNATURE-----\n", "payload": "tree de5f0e96c5df617b55b0cb1b0c4104d1075ee906\nparent c35035cefc709abddabfb28ecc6a326458d46ce2\nparent cf30ac847decca2caaaaf8a2591552bce380c14d\nauthor Michael Goulet <michael@errs.io> 1653951447 -0700\ncommitter GitHub <noreply@github.com> 1653951447 -0700\n\nRollup merge of #89685 - DeveloperC286:iter_fields_to_private, r=oli-obk\n\nrefactor: VecDeques Iter fields to private\n\nMade the fields of VecDeque's Iter private by creating a Iter::new(...) function to create a new instance of Iter and migrating usage to use Iter::new(...).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "html_url": "https://github.com/rust-lang/rust/commit/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35035cefc709abddabfb28ecc6a326458d46ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35035cefc709abddabfb28ecc6a326458d46ce2", "html_url": "https://github.com/rust-lang/rust/commit/c35035cefc709abddabfb28ecc6a326458d46ce2"}, {"sha": "cf30ac847decca2caaaaf8a2591552bce380c14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf30ac847decca2caaaaf8a2591552bce380c14d", "html_url": "https://github.com/rust-lang/rust/commit/cf30ac847decca2caaaaf8a2591552bce380c14d"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "e696d7ed636b5ceb89fb1db60d4545b450ab91cf", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "patch": "@@ -13,9 +13,15 @@ use super::{count, wrap_index, RingSlices};\n /// [`iter`]: super::VecDeque::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n-    pub(crate) ring: &'a [MaybeUninit<T>],\n-    pub(crate) tail: usize,\n-    pub(crate) head: usize,\n+    ring: &'a [MaybeUninit<T>],\n+    tail: usize,\n+    head: usize,\n+}\n+\n+impl<'a, T> Iter<'a, T> {\n+    pub(super) fn new(ring: &'a [MaybeUninit<T>], tail: usize, head: usize) -> Self {\n+        Iter { ring, tail, head }\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "e28a94386c7cd4d81ce656dbb07d6ab7b28ca75e", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "patch": "@@ -1013,7 +1013,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n-        Iter { tail: self.tail, head: self.head, ring: unsafe { self.buffer_as_slice() } }\n+        Iter::new(unsafe { self.buffer_as_slice() }, self.tail, self.head)\n     }\n \n     /// Returns a front-to-back iterator that returns mutable references.\n@@ -1192,12 +1192,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         R: RangeBounds<usize>,\n     {\n         let (tail, head) = self.range_tail_head(range);\n-        Iter {\n-            tail,\n-            head,\n-            // The shared reference we have in &self is maintained in the '_ of Iter.\n-            ring: unsafe { self.buffer_as_slice() },\n-        }\n+        // The shared reference we have in &self is maintained in the '_ of Iter.\n+        Iter::new(unsafe { self.buffer_as_slice() }, tail, head)\n     }\n \n     /// Creates an iterator that covers the specified mutable range in the deque.\n@@ -1313,16 +1309,15 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.head = drain_tail;\n \n         let deque = NonNull::from(&mut *self);\n-        let iter = Iter {\n-            tail: drain_tail,\n-            head: drain_head,\n+        unsafe {\n             // Crucially, we only create shared references from `self` here and read from\n             // it.  We do not write to `self` nor reborrow to a mutable reference.\n             // Hence the raw pointer we created above, for `deque`, remains valid.\n-            ring: unsafe { self.buffer_as_slice() },\n-        };\n+            let ring = self.buffer_as_slice();\n+            let iter = Iter::new(ring, drain_tail, drain_head);\n \n-        unsafe { Drain::new(drain_head, head, iter, deque) }\n+            Drain::new(drain_head, head, iter, deque)\n+        }\n     }\n \n     /// Clears the deque, removing all values."}]}