{"sha": "2ee34a0923643f277775c874beb8990be4b1385c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZTM0YTA5MjM2NDNmMjc3Nzc1Yzg3NGJlYjg5OTBiZTRiMTM4NWM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-07T02:52:36Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-07T02:52:36Z"}, "message": "Use `summary_opts()` in another spot\n\nI added `summary_opts()` before I cut the branch for #77686 (2 months\nago!), so this \"slipped through the cracks\".", "tree": {"sha": "17a3ade49274e5880a7607ef8b0d3e09228e26bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a3ade49274e5880a7607ef8b0d3e09228e26bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee34a0923643f277775c874beb8990be4b1385c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee34a0923643f277775c874beb8990be4b1385c", "html_url": "https://github.com/rust-lang/rust/commit/2ee34a0923643f277775c874beb8990be4b1385c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee34a0923643f277775c874beb8990be4b1385c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb68c31f8cef24174a7d3499de6b4ebea069900", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb68c31f8cef24174a7d3499de6b4ebea069900", "html_url": "https://github.com/rust-lang/rust/commit/5bb68c31f8cef24174a7d3499de6b4ebea069900"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "fb17eb462e14556b90d01db8aaa659a0801485d5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee34a0923643f277775c874beb8990be4b1385c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee34a0923643f277775c874beb8990be4b1385c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2ee34a0923643f277775c874beb8990be4b1385c", "patch": "@@ -1057,7 +1057,7 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n         *text_length += text.len();\n     };\n \n-    'outer: for event in Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH) {\n+    'outer: for event in Parser::new_ext(md, summary_opts()) {\n         match &event {\n             Event::Text(text) => {\n                 for word in text.split_inclusive(char::is_whitespace) {"}]}