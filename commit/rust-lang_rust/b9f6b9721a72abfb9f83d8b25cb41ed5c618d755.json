{"sha": "b9f6b9721a72abfb9f83d8b25cb41ed5c618d755", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZjZiOTcyMWE3MmFiZmI5ZjgzZDhiMjVjYjQxZWQ1YzYxOGQ3NTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-23T23:07:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T11:37:25Z"}, "message": "Split error reporting from main eval function", "tree": {"sha": "25b49a76471bbed278102c076b75bb6ff9b7a423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b49a76471bbed278102c076b75bb6ff9b7a423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755", "html_url": "https://github.com/rust-lang/rust/commit/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a7b9bd2640a9473bf6e8217b7f20da0ce587a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a7b9bd2640a9473bf6e8217b7f20da0ce587a0", "html_url": "https://github.com/rust-lang/rust/commit/71a7b9bd2640a9473bf6e8217b7f20da0ce587a0"}], "stats": {"total": 110, "additions": 56, "deletions": 54}, "files": [{"sha": "b2f290414ceea75274515fad84520ad84a7b495d", "filename": "src/eval.rs", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f6b9721a72abfb9f83d8b25cb41ed5c618d755/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b9f6b9721a72abfb9f83d8b25cb41ed5c618d755", "patch": "@@ -8,6 +8,7 @@ use rand::SeedableRng;\n use rustc_hir::def_id::DefId;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::{self, TyCtxt};\n+use rustc_mir::interpret::InterpErrorInfo;\n \n use crate::*;\n \n@@ -205,64 +206,65 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n             }\n             return Some(return_code);\n         }\n-        Err(mut e) => {\n-            // Special treatment for some error kinds\n-            let msg = match e.kind {\n-                InterpError::MachineStop(ref info) => {\n-                    let info = info\n-                        .downcast_ref::<TerminationInfo>()\n-                        .expect(\"invalid MachineStop payload\");\n-                    match info {\n-                        TerminationInfo::Exit(code) => return Some(*code),\n-                        TerminationInfo::PoppedTrackedPointerTag(item) =>\n-                            format!(\"popped tracked tag for item {:?}\", item),\n-                        TerminationInfo::Abort =>\n-                            format!(\"the evaluated program aborted execution\"),\n-                    }\n-                }\n-                err_unsup!(NoMirFor(..)) => format!(\n-                    \"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\",\n-                    e\n-                ),\n-                InterpError::InvalidProgram(_) =>\n-                    bug!(\"This error should be impossible in Miri: {}\", e),\n-                _ => e.to_string(),\n-            };\n-            e.print_backtrace();\n-            if let Some(frame) = ecx.stack().last() {\n-                let span = frame.current_source_info().unwrap().span;\n+        Err(e) => report_err(&ecx, e),\n+    }\n+}\n \n-                let msg = format!(\"Miri evaluation error: {}\", msg);\n-                let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());\n-                let frames = ecx.generate_stacktrace(None);\n-                err.span_label(span, msg);\n-                // We iterate with indices because we need to look at the next frame (the caller).\n-                for idx in 0..frames.len() {\n-                    let frame_info = &frames[idx];\n-                    let call_site_is_local = frames\n-                        .get(idx + 1)\n-                        .map_or(false, |caller_info| caller_info.instance.def_id().is_local());\n-                    if call_site_is_local {\n-                        err.span_note(frame_info.call_site, &frame_info.to_string());\n-                    } else {\n-                        err.note(&frame_info.to_string());\n-                    }\n-                }\n-                err.emit();\n-            } else {\n-                ecx.tcx.sess.err(&msg);\n+fn report_err<'tcx, 'mir>(\n+    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    mut e: InterpErrorInfo<'tcx>,\n+) -> Option<i64> {\n+    // Special treatment for some error kinds\n+    let msg = match e.kind {\n+        InterpError::MachineStop(ref info) => {\n+            let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n+            match info {\n+                TerminationInfo::Exit(code) => return Some(*code),\n+                TerminationInfo::PoppedTrackedPointerTag(item) =>\n+                    format!(\"popped tracked tag for item {:?}\", item),\n+                TerminationInfo::Abort => format!(\"the evaluated program aborted execution\"),\n             }\n+        }\n+        err_unsup!(NoMirFor(..)) => format!(\n+            \"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\",\n+            e\n+        ),\n+        InterpError::InvalidProgram(_) => bug!(\"This error should be impossible in Miri: {}\", e),\n+        _ => e.to_string(),\n+    };\n+    e.print_backtrace();\n+    if let Some(frame) = ecx.stack().last() {\n+        let span = frame.current_source_info().unwrap().span;\n \n-            for (i, frame) in ecx.stack().iter().enumerate() {\n-                trace!(\"-------------------\");\n-                trace!(\"Frame {}\", i);\n-                trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n-                for (i, local) in frame.locals.iter().enumerate() {\n-                    trace!(\"    local {}: {:?}\", i, local.value);\n-                }\n+        let msg = format!(\"Miri evaluation error: {}\", msg);\n+        let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());\n+        let frames = ecx.generate_stacktrace(None);\n+        err.span_label(span, msg);\n+        // We iterate with indices because we need to look at the next frame (the caller).\n+        for idx in 0..frames.len() {\n+            let frame_info = &frames[idx];\n+            let call_site_is_local = frames\n+                .get(idx + 1)\n+                .map_or(false, |caller_info| caller_info.instance.def_id().is_local());\n+            if call_site_is_local {\n+                err.span_note(frame_info.call_site, &frame_info.to_string());\n+            } else {\n+                err.note(&frame_info.to_string());\n             }\n-            // Let the reported error determine the return code.\n-            return None;\n+        }\n+        err.emit();\n+    } else {\n+        ecx.tcx.sess.err(&msg);\n+    }\n+\n+    for (i, frame) in ecx.stack().iter().enumerate() {\n+        trace!(\"-------------------\");\n+        trace!(\"Frame {}\", i);\n+        trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n+        for (i, local) in frame.locals.iter().enumerate() {\n+            trace!(\"    local {}: {:?}\", i, local.value);\n         }\n     }\n+    // Let the reported error determine the return code.\n+    return None;\n }"}]}