{"sha": "9035264a8febac258d1def1d27978ab8cd1ff121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzUyNjRhOGZlYmFjMjU4ZDFkZWYxZDI3OTc4YWI4Y2QxZmYxMjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T23:34:13Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T01:06:08Z"}, "message": "Add suggestion in `if_let_some_result`", "tree": {"sha": "f4cb1d1e80c3452a9a60978beeb4d69bb50c8929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cb1d1e80c3452a9a60978beeb4d69bb50c8929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9035264a8febac258d1def1d27978ab8cd1ff121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9035264a8febac258d1def1d27978ab8cd1ff121", "html_url": "https://github.com/rust-lang/rust/commit/9035264a8febac258d1def1d27978ab8cd1ff121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9035264a8febac258d1def1d27978ab8cd1ff121/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a7003ecf0e80b3237068df0210767120aca4d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7003ecf0e80b3237068df0210767120aca4d25", "html_url": "https://github.com/rust-lang/rust/commit/0a7003ecf0e80b3237068df0210767120aca4d25"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "9696951ac0c807e33c7c8386b083221f5cde53b9", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9035264a8febac258d1def1d27978ab8cd1ff121/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9035264a8febac258d1def1d27978ab8cd1ff121/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=9035264a8febac258d1def1d27978ab8cd1ff121", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n+use crate::utils::{match_type, method_chain_args, paths, snippet, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -40,18 +41,36 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n             if let ExprKind::Match(ref op, ref body, ref source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { .. } = *source; //test if it is an If Let\n-            if let ExprKind::MethodCall(_, _, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n+            if let MatchSource::IfLetDesugar { contains_else_clause } = *source; //test if it is an If Let\n+            if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n \n             then {\n                 let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n-                let some_expr_string = snippet(cx, y[0].span, \"\");\n+                let mut applicability = Applicability::MachineApplicable;\n+                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, op.span.until(ok_span), \"\", &mut applicability);\n+                let mut sugg = format!(\n+                    \"if let Ok({}) = {} {}\",\n+                    some_expr_string,\n+                    // FIXME(JohnTitor): this trimming is hacky, probably can improve it\n+                    trimmed_ok.trim_matches('.'),\n+                    snippet(cx, body[0].span, \"..\"),\n+                );\n+                if contains_else_clause {\n+                    sugg = format!(\"{} else {}\", sugg, snippet(cx, body[1].span, \"..\"));\n+                }\n                 if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type {\n-                    span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n-                    \"Matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string));\n+                    span_lint_and_sugg(\n+                        cx,\n+                        IF_LET_SOME_RESULT,\n+                        expr.span,\n+                        \"Matching on `Some` with `ok()` is redundant\",\n+                        &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                        sugg,\n+                        applicability,\n+                    );\n                 }\n             }\n         }"}, {"sha": "e7fdc972a199f289c790cfce65c2c7d5af186c65", "filename": "tests/ui/ok_if_let.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.fixed?ref=9035264a8febac258d1def1d27978ab8cd1ff121", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::if_let_some_result)]\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn nested_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Ok(y) = x.parse() {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let x = str_to_int(\"1\");\n+    let y = str_to_int_ok(\"2\");\n+    let z = nested_some_no_else(\"3\");\n+    println!(\"{}{}{}\", x, y, z);\n+}"}, {"sha": "becadf3644f952c4472512a9ebb67f4d0692b485", "filename": "tests/ui/ok_if_let.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=9035264a8febac258d1def1d27978ab8cd1ff121", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::if_let_some_result)]\n \n fn str_to_int(x: &str) -> i32 {\n@@ -16,8 +18,18 @@ fn str_to_int_ok(x: &str) -> i32 {\n     }\n }\n \n+fn nested_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Some(y) = x.parse().ok() {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n fn main() {\n-    let y = str_to_int(\"1\");\n-    let z = str_to_int_ok(\"2\");\n-    println!(\"{}{}\", y, z);\n+    let x = str_to_int(\"1\");\n+    let y = str_to_int_ok(\"2\");\n+    let z = nested_some_no_else(\"3\");\n+    println!(\"{}{}{}\", x, y, z);\n }"}, {"sha": "4aa6057ba47635b1f7ed15dd1efe4e9c8d6ea796", "filename": "tests/ui/ok_if_let.stderr", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9035264a8febac258d1def1d27978ab8cd1ff121/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=9035264a8febac258d1def1d27978ab8cd1ff121", "patch": "@@ -1,5 +1,5 @@\n error: Matching on `Some` with `ok()` is redundant\n-  --> $DIR/ok_if_let.rs:4:5\n+  --> $DIR/ok_if_let.rs:6:5\n    |\n LL | /     if let Some(y) = x.parse().ok() {\n LL | |         y\n@@ -9,7 +9,29 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n-   = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+   |\n+LL |     if let Ok(y) = x.parse() {\n+LL |         y\n+LL |     } else {\n+LL |         0\n+LL |     }\n+   |\n+\n+error: Matching on `Some` with `ok()` is redundant\n+  --> $DIR/ok_if_let.rs:23:9\n+   |\n+LL | /         if let Some(y) = x.parse().ok() {\n+LL | |             return y;\n+LL | |         };\n+   | |_________^\n+   |\n+help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+   |\n+LL |         if let Ok(y) = x.parse() {\n+LL |             return y;\n+LL |         };\n+   |\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}