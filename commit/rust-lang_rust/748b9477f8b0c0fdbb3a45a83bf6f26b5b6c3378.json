{"sha": "748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGI5NDc3ZjhiMGMwZmRiYjNhNDVhODNiZjZmMjZiNWI2YzMzNzg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-30T16:17:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-03T17:55:10Z"}, "message": "Guide: if", "tree": {"sha": "ad8f16d3273188f2798506ae46d0ac9687e1fe70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8f16d3273188f2798506ae46d0ac9687e1fe70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378", "html_url": "https://github.com/rust-lang/rust/commit/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524f4699434bca99a577bd15ddea41f96b864726", "url": "https://api.github.com/repos/rust-lang/rust/commits/524f4699434bca99a577bd15ddea41f96b864726", "html_url": "https://github.com/rust-lang/rust/commit/524f4699434bca99a577bd15ddea41f96b864726"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "024bb8ce89bf8b4f043bf74834cc9633db83c6fe", "filename": "src/doc/guide.md", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=748b9477f8b0c0fdbb3a45a83bf6f26b5b6c3378", "patch": "@@ -611,6 +611,153 @@ concept: `if`.\n \n ## If\n \n+Rust's take on `if` is not particularly complex, but it's much more like the\n+`if` you'll find in a dynamically typed language than in a more traditional\n+systems language. So let's talk about it, to make sure you grasp the nuances.\n+\n+`if` is a specific form of a more general concept, the 'branch.' The name comes\n+from a branch in a tree: a decision point, where depending on a choice,\n+multiple paths can be taken.\n+\n+In the case of `if`, there is one choice that leads down two paths:\n+\n+```rust\n+let x = 5i;\n+\n+if x == 5i {\n+    println!(\"x is five!\");\n+}\n+```\n+\n+If we changed the value of `x` to something else, this line would not print.\n+More specifically, if the expression after the `if` evaluates to `true`, then\n+the block is executed. If it's `false`, then it is not.\n+\n+If you want something to happen in the `false` case, use an `else`:\n+\n+```\n+let x = 5i;\n+\n+if x == 5i {\n+    println!(\"x is five!\");\n+} else {\n+    println!(\"x is not five :(\");\n+}\n+```\n+\n+This is all pretty standard. However, you can also do this:\n+\n+\n+```\n+let x = 5i;\n+\n+let y = if x == 5i {\n+    10i\n+} else {\n+    15i\n+};\n+```\n+\n+Which we can (and probably should) write like this:\n+\n+```\n+let x = 5i;\n+\n+let y = if x == 5i { 10i } else { 15i };\n+```\n+\n+This reveals two interesting things about Rust: it is an expression-based\n+language, and semicolons are different than in other 'curly brace and\n+semicolon'-based languages. These two things are related.\n+\n+### Expressions vs. Statements\n+\n+Rust is primarily an expression based language. There are only two kinds of\n+statements, and everything else is an expression.\n+\n+So what's the difference? Expressions return a value, and statements do not.\n+In many languages, `if` is a statement, and therefore, `let x = if ...` would\n+make no sense. But in Rust, `if` is an expression, which means that it returns\n+a value. We can then use this value to initialize the binding.\n+\n+Speaking of which, bindings are a kind of the first of Rust's two statements.\n+The proper name is a **declaration statement**. So far, `let` is the only kind\n+of declaration statement we've seen. Let's talk about that some more.\n+\n+In some languages, variable bindings can be written as expressions, not just\n+statements. Like Ruby:\n+\n+```{ruby}\n+x = y = 5\n+```\n+\n+In Rust, however, using `let` to introduce a binding is _not_ an expression. The\n+following will produce a compile-time error:\n+\n+```{ignore}\n+let x = (let y = 5i); // found `let` in ident position\n+```\n+\n+The compiler is telling us here that it was expecting to see the beginning of\n+an expression, and a `let` can only begin a statement, not an expression.\n+\n+However, re-assigning to a mutable binding is an expression:\n+\n+```{rust}\n+let mut x = 0i;\n+let y = x = 5i;\n+```\n+\n+In this case, we have an assignment expression (`x = 5`) whose value is\n+being used as part of a `let` declaration statement (`let y = ...`).\n+\n+The second kind of statement in Rust is the **expression statement**. Its\n+purpose is to turn any expression into a statement. In practical terms, Rust's\n+grammar expects statements to follow other statements. This means that you use\n+semicolons to separate expressions from each other. This means that Rust\n+looks a lot like most other languages that require you to use semicolons\n+at the end of every line, and you will see semicolons at the end of almost\n+every line of Rust code you see.\n+\n+What is this exception that makes us say 'almost?' You saw it already, in this\n+code:\n+\n+```\n+let x = 5i;\n+\n+let y: int = if x == 5i { 10i } else { 15i };\n+```\n+\n+Note that I've added the type annotation to `y`, to specify explicitly that I\n+want `y` to be an integer.\n+\n+This is not the same as this, which won't compile:\n+\n+```{ignore}\n+let x = 5i;\n+\n+let y: int = if x == 5 { 10i; } else { 15i; };\n+```\n+\n+Note the semicolons after the 10 and 15. Rust will give us the following error:\n+\n+```{ignore,notrust}\n+error: mismatched types: expected `int` but found `()` (expected int but found ())\n+```\n+\n+We expected an integer, but we got `()`. `()` is pronounced 'unit', and is a\n+special type in Rust's type system. `()` is different than `null` in other\n+languages, because `()` is distinct from other types. For example, in C, `null`\n+is a valid value for a variable of type `int`. In Rust, `()` is _not_ a valid\n+value for a variable of type `int`. It's only a valid value for variables of\n+the type `()`, which aren't very useful. Remember how we said statements don't\n+return a value? Well, that's the purpose of unit in this case. The semicolon\n+turns any expression into a statement by throwing away its value and returning\n+unit instead.\n+\n+There's one more time in which you won't see a semicolon at the end of a line\n+of Rust code. For that, we'll need our next concept: functions.\n+\n ## Functions\n \n return"}]}