{"sha": "3f8cc1683bc08d15986c617bced79a1f3eb197d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOGNjMTY4M2JjMDhkMTU5ODZjNjE3YmNlZDc5YTFmM2ViMTk3ZDI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-19T04:43:18Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-23T05:24:54Z"}, "message": "rustc: middle: lint: use more doc comments", "tree": {"sha": "bf4898007796b7eccb69c1fef1e00284bc12e615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4898007796b7eccb69c1fef1e00284bc12e615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8cc1683bc08d15986c617bced79a1f3eb197d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8cc1683bc08d15986c617bced79a1f3eb197d2", "html_url": "https://github.com/rust-lang/rust/commit/3f8cc1683bc08d15986c617bced79a1f3eb197d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8cc1683bc08d15986c617bced79a1f3eb197d2/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0258a381b88b5574e3f8ce72ae553ac3a574b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0258a381b88b5574e3f8ce72ae553ac3a574b7", "html_url": "https://github.com/rust-lang/rust/commit/ec0258a381b88b5574e3f8ce72ae553ac3a574b7"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "88ded969ad5d141e430b6eaa10f9bf4450eb5d37", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f8cc1683bc08d15986c617bced79a1f3eb197d2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8cc1683bc08d15986c617bced79a1f3eb197d2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3f8cc1683bc08d15986c617bced79a1f3eb197d2", "patch": "@@ -437,29 +437,29 @@ pub fn get_lint_dict() -> LintDict {\n }\n \n struct Context<'a> {\n-    // All known lint modes (string versions)\n+    /// All known lint modes (string versions)\n     dict: LintDict,\n-    // Current levels of each lint warning\n+    /// Current levels of each lint warning\n     cur: SmallIntMap<(Level, LintSource)>,\n-    // context we're checking in (used to access fields like sess)\n+    /// Context we're checking in (used to access fields like sess)\n     tcx: &'a ty::ctxt,\n-    // Items exported by the crate; used by the missing_doc lint.\n+    /// Items exported by the crate; used by the missing_doc lint.\n     exported_items: &'a privacy::ExportedItems,\n-    // The id of the current `ast::StructDef` being walked.\n+    /// The id of the current `ast::StructDef` being walked.\n     cur_struct_def_id: ast::NodeId,\n-    // Whether some ancestor of the current node was marked\n-    // #[doc(hidden)].\n+    /// Whether some ancestor of the current node was marked\n+    /// #[doc(hidden)].\n     is_doc_hidden: bool,\n \n-    // When recursing into an attributed node of the ast which modifies lint\n-    // levels, this stack keeps track of the previous lint levels of whatever\n-    // was modified.\n+    /// When recursing into an attributed node of the ast which modifies lint\n+    /// levels, this stack keeps track of the previous lint levels of whatever\n+    /// was modified.\n     lint_stack: Vec<(Lint, Level, LintSource)>,\n \n-    // id of the last visited negated expression\n+    /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n \n-    // ids of structs/enums which have been checked for raw_pointer_deriving\n+    /// Ids of structs/enums which have been checked for raw_pointer_deriving\n     checked_raw_pointers: NodeSet,\n }\n \n@@ -610,8 +610,8 @@ impl<'a> Context<'a> {\n     }\n }\n \n-// Check that every lint from the list of attributes satisfies `f`.\n-// Return true if that's the case. Otherwise return false.\n+/// Check that every lint from the list of attributes satisfies `f`.\n+/// Return true if that's the case. Otherwise return false.\n pub fn each_lint(sess: &session::Session,\n                  attrs: &[ast::Attribute],\n                  f: |@ast::MetaItem, Level, InternedString| -> bool)\n@@ -645,8 +645,8 @@ pub fn each_lint(sess: &session::Session,\n     true\n }\n \n-// Check from a list of attributes if it contains the appropriate\n-// `#[level(lintname)]` attribute (e.g. `#[allow(dead_code)]).\n+/// Check from a list of attributes if it contains the appropriate\n+/// `#[level(lintname)]` attribute (e.g. `#[allow(dead_code)]).\n pub fn contains_lint(attrs: &[ast::Attribute],\n                      level: Level,\n                      lintname: &'static str)"}]}