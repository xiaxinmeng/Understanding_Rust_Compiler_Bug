{"sha": "2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTNiM2I0ODZiM2I1ZTFlYzFlNmFkMjU5ZDg4NDBiODhiN2M3N2E=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2018-12-10T23:40:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-01-29T20:07:35Z"}, "message": "Implement Weak::{strong_count, weak_count}", "tree": {"sha": "a76eb8020a512e355281b1932ac36557cfc0ff62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76eb8020a512e355281b1932ac36557cfc0ff62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "html_url": "https://github.com/rust-lang/rust/commit/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74256630117fedf479edbd1145cac47c88036aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/74256630117fedf479edbd1145cac47c88036aec", "html_url": "https://github.com/rust-lang/rust/commit/74256630117fedf479edbd1145cac47c88036aec"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "7ee05eaff91a01e5bc26d07d8a6ee0d2aabb44f9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "patch": "@@ -1284,6 +1284,40 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n+    /// Gets the number of strong (`Rc`) pointers pointing to this value.\n+    ///\n+    /// If `self` was created using [`Weak::new`], this will return 0.\n+    ///\n+    /// [`Weak::new`]: #method.new\n+    #[unstable(feature = \"weak_counts\", issue = \"0\")]\n+    pub fn strong_count(&self) -> usize {\n+        if let Some(inner) = self.inner() {\n+            inner.strong()\n+        } else {\n+            0\n+        }\n+    }\n+\n+    /// Gets the number of `Weak` pointers pointing to this value.\n+    ///\n+    /// If `self` was created using [`Weak::new`], this will return 0. If not,\n+    /// the returned value is at least 1, since `self` still points to the\n+    /// value.\n+    ///\n+    /// [`Weak::new`]: #method.new\n+    #[unstable(feature = \"weak_counts\", issue = \"0\")]\n+    pub fn weak_count(&self) -> usize {\n+        if let Some(inner) = self.inner() {\n+            if inner.strong() > 0 {\n+                inner.weak() - 1  // subtract the implicit weak ptr\n+            } else {\n+                inner.weak()\n+            }\n+        } else {\n+            0\n+        }\n+    }\n+\n     /// Return `None` when the pointer is dangling and there is no allocated `RcBox`,\n     /// i.e., this `Weak` was created by `Weak::new`\n     #[inline]\n@@ -1622,6 +1656,33 @@ mod tests {\n         drop(c);\n     }\n \n+    #[test]\n+    fn weak_counts() {\n+        assert_eq!(Weak::weak_count(&Weak::<u64>::new()), 0);\n+        assert_eq!(Weak::strong_count(&Weak::<u64>::new()), 0);\n+\n+        let a = Rc::new(0);\n+        let w = Rc::downgrade(&a);\n+        assert_eq!(Weak::strong_count(&w), 1);\n+        assert_eq!(Weak::weak_count(&w), 1);\n+        let w2 = w.clone();\n+        assert_eq!(Weak::strong_count(&w), 1);\n+        assert_eq!(Weak::weak_count(&w), 2);\n+        assert_eq!(Weak::strong_count(&w2), 1);\n+        assert_eq!(Weak::weak_count(&w2), 2);\n+        drop(w);\n+        assert_eq!(Weak::strong_count(&w2), 1);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        let a2 = a.clone();\n+        assert_eq!(Weak::strong_count(&w2), 2);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        drop(a2);\n+        drop(a);\n+        assert_eq!(Weak::strong_count(&w2), 0);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        drop(w2);\n+    }\n+\n     #[test]\n     fn try_unwrap() {\n         let x = Rc::new(3);"}, {"sha": "fd3519dee18cfbe036d7b4d704e2489491471c13", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "patch": "@@ -1117,6 +1117,25 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n+    /// Gets the number of strong (`Arc`) pointers pointing to this value.\n+    ///\n+    /// If `self` was created using [`Weak::new`], this will return 0.\n+    ///\n+    /// [`Weak::new`]: #method.new\n+    #[unstable(feature = \"weak_counts\", issue = \"0\")]\n+    pub fn strong_count(&self) -> usize {\n+        if let Some(inner) = self.inner() {\n+            inner.strong.load(SeqCst)\n+        } else {\n+            0\n+        }\n+    }\n+\n+    // Due to the implicit weak pointer added when any strong pointers are\n+    // around, we cannot implement `weak_count` correctly since it necessarily\n+    // requires accessing the strong count and weak count in an unsynchronized\n+    // fashion.\n+\n     /// Return `None` when the pointer is dangling and there is no allocated `ArcInner`,\n     /// i.e., this `Weak` was created by `Weak::new`\n     #[inline]"}]}