{"sha": "1fce415649784ecaf3bcb3a6916e10284c0affec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmY2U0MTU2NDk3ODRlY2FmM2JjYjNhNjkxNmUxMDI4NGMwYWZmZWM=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-29T19:50:16Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-29T20:57:40Z"}, "message": "Correctly generalize inference variables in `nll_relate`", "tree": {"sha": "32f373ca6ef386fce75a36acfbfc827b9dae4226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f373ca6ef386fce75a36acfbfc827b9dae4226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fce415649784ecaf3bcb3a6916e10284c0affec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fce415649784ecaf3bcb3a6916e10284c0affec", "html_url": "https://github.com/rust-lang/rust/commit/1fce415649784ecaf3bcb3a6916e10284c0affec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fce415649784ecaf3bcb3a6916e10284c0affec/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c805e817a93a641ef92e58900bc5b0876bbf51f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c805e817a93a641ef92e58900bc5b0876bbf51f1", "html_url": "https://github.com/rust-lang/rust/commit/c805e817a93a641ef92e58900bc5b0876bbf51f1"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "972ba16f7e2c7e156d5ceb344a32ba1a059bd920", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1fce415649784ecaf3bcb3a6916e10284c0affec/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fce415649784ecaf3bcb3a6916e10284c0affec/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=1fce415649784ecaf3bcb3a6916e10284c0affec", "patch": "@@ -762,23 +762,18 @@ where\n                             drop(variables);\n                             self.relate(&u, &u)\n                         }\n-                        TypeVariableValue::Unknown { universe } => {\n-                            if self.universe.cannot_name(universe) {\n-                                debug!(\n-                                    \"TypeGeneralizer::tys: root universe {:?} cannot name\\\n-                                    variable in universe {:?}\",\n-                                    self.universe,\n-                                    universe\n-                                );\n-                                return Err(TypeError::Mismatch);\n-                            }\n-\n+                        TypeVariableValue::Unknown { universe: _universe } => {\n                             if self.ambient_variance == ty::Bivariant {\n                                 // FIXME: we may need a WF predicate (related to #54105).\n                             }\n \n                             let origin = *variables.var_origin(vid);\n+\n+                            // Replacing with a new variable in the universe `self.universe`,\n+                            // it will be unified later with the original type variable in\n+                            // the universe `_universe`.\n                             let new_var_id = variables.new_var(self.universe, false, origin);\n+\n                             let u = self.tcx().mk_var(new_var_id);\n                             debug!(\n                                 \"generalize: replacing original vid={:?} with new={:?}\","}]}