{"sha": "25ddc659d08061f588589c9f271c25250aa55f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZGRjNjU5ZDA4MDYxZjU4ODU4OWM5ZjI3MWMyNTI1MGFhNTVmMGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-24T15:25:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-24T15:25:29Z"}, "message": "move validate field from memory to machine", "tree": {"sha": "f9d03fa7eae8c36f6147285a6f45cec1b4e54da1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d03fa7eae8c36f6147285a6f45cec1b4e54da1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ddc659d08061f588589c9f271c25250aa55f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ddc659d08061f588589c9f271c25250aa55f0d", "html_url": "https://github.com/rust-lang/rust/commit/25ddc659d08061f588589c9f271c25250aa55f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ddc659d08061f588589c9f271c25250aa55f0d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274ae0438fb4e942ad29fd60f0adf277cc6777d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/274ae0438fb4e942ad29fd60f0adf277cc6777d9", "html_url": "https://github.com/rust-lang/rust/commit/274ae0438fb4e942ad29fd60f0adf277cc6777d9"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "eca634d02098c8f26607eec03485ca2f9684ef7e", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25ddc659d08061f588589c9f271c25250aa55f0d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ddc659d08061f588589c9f271c25250aa55f0d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=25ddc659d08061f588589c9f271c25250aa55f0d", "patch": "@@ -50,10 +50,12 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut ecx = InterpCx::new(\n         tcx.at(rustc_span::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(config.communicate),\n+        Evaluator::new(\n+            config.communicate,\n+            config.validate,\n+        ),\n         MemoryExtra::new(\n             StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n-            config.validate,\n             config.stacked_borrows,\n             config.tracked_pointer_tag,\n         ),"}, {"sha": "8fa5268c19004fdfc210c22c896ff3ec0bc23454", "filename": "src/machine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25ddc659d08061f588589c9f271c25250aa55f0d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ddc659d08061f588589c9f271c25250aa55f0d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=25ddc659d08061f588589c9f271c25250aa55f0d", "patch": "@@ -76,13 +76,10 @@ pub struct MemoryExtra {\n \n     /// The random number generator used for resolving non-determinism.\n     pub(crate) rng: RefCell<StdRng>,\n-\n-    /// Whether to enforce the validity invariant.\n-    pub(crate) validate: bool,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, validate: bool, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n+    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n         } else {\n@@ -92,7 +89,6 @@ impl MemoryExtra {\n             stacked_borrows,\n             intptrcast: Default::default(),\n             rng: RefCell::new(rng),\n-            validate,\n         }\n     }\n }\n@@ -120,6 +116,9 @@ pub struct Evaluator<'tcx> {\n     /// and random number generation is delegated to the host.\n     pub(crate) communicate: bool,\n \n+    /// Whether to enforce the validity invariant.\n+    pub(crate) validate: bool,\n+\n     pub(crate) file_handler: FileHandler,\n \n     /// The temporary used for storing the argument of\n@@ -128,7 +127,7 @@ pub struct Evaluator<'tcx> {\n }\n \n impl<'tcx> Evaluator<'tcx> {\n-    pub(crate) fn new(communicate: bool) -> Self {\n+    pub(crate) fn new(communicate: bool, validate: bool) -> Self {\n         Evaluator {\n             // `env_vars` could be initialized properly here if `Memory` were available before\n             // calling this method.\n@@ -139,6 +138,7 @@ impl<'tcx> Evaluator<'tcx> {\n             last_error: None,\n             tls: TlsData::default(),\n             communicate,\n+            validate,\n             file_handler: Default::default(),\n             panic_payload: None,\n         }\n@@ -183,7 +183,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        ecx.memory.extra.validate\n+        ecx.machine.validate\n     }\n \n     #[inline(always)]"}]}