{"sha": "edd3768a4411ab858332f36d634249534c65a0c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDM3NjhhNDQxMWFiODU4MzMyZjM2ZDYzNDI0OTUzNGM2NWEwYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-02T09:19:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-02T09:19:22Z"}, "message": "Add `derive` after doc comments", "tree": {"sha": "58f52ba190fb98fa25cd56d09db7c98c4fbfde91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f52ba190fb98fa25cd56d09db7c98c4fbfde91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd3768a4411ab858332f36d634249534c65a0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd3768a4411ab858332f36d634249534c65a0c5", "html_url": "https://github.com/rust-lang/rust/commit/edd3768a4411ab858332f36d634249534c65a0c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd3768a4411ab858332f36d634249534c65a0c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "714f6afb3256516657a4be54e8b0f1add6efc801", "url": "https://api.github.com/repos/rust-lang/rust/commits/714f6afb3256516657a4be54e8b0f1add6efc801", "html_url": "https://github.com/rust-lang/rust/commit/714f6afb3256516657a4be54e8b0f1add6efc801"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "37e963bbd045251f1d57e1399bd036429c061c64", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/edd3768a4411ab858332f36d634249534c65a0c5/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd3768a4411ab858332f36d634249534c65a0c5/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=edd3768a4411ab858332f36d634249534c65a0c5", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset},\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     Direction, SourceFileNode,\n-    SyntaxKind::{COMMA, WHITESPACE},\n+    SyntaxKind::{COMMA, WHITESPACE, COMMENT},\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n \n@@ -41,7 +41,8 @@ pub fn add_derive<'a>(\n     offset: TextUnit,\n ) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let nominal = find_node_at_offset::<ast::NominalDef>(file.syntax(), offset)?;\n-    Some(move || {\n+    let node_start = derive_insertion_offset(nominal)?;\n+    return Some(move || {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_call())\n@@ -51,7 +52,6 @@ pub fn add_derive<'a>(\n         let mut edit = EditBuilder::new();\n         let offset = match derive_attr {\n             None => {\n-                let node_start = nominal.syntax().range().start();\n                 edit.insert(node_start, \"#[derive()]\\n\".to_string());\n                 node_start + TextUnit::of_str(\"#[derive(\")\n             }\n@@ -61,7 +61,16 @@ pub fn add_derive<'a>(\n             edit: edit.finish(),\n             cursor_position: Some(offset),\n         }\n-    })\n+    });\n+\n+    // Insert `derive` after doc comments.\n+    fn derive_insertion_offset(nominal: ast::NominalDef) -> Option<TextUnit> {\n+        let non_ws_child = nominal\n+            .syntax()\n+            .children()\n+            .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n+        Some(non_ws_child.range().start())\n+    }\n }\n \n pub fn add_impl<'a>(\n@@ -181,7 +190,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_add_derive() {\n+    fn add_derive_new() {\n         check_action(\n             \"struct Foo { a: i32, <|>}\",\n             \"#[derive(<|>)]\\nstruct Foo { a: i32, }\",\n@@ -192,13 +201,35 @@ mod tests {\n             \"#[derive(<|>)]\\nstruct Foo {  a: i32, }\",\n             |file, off| add_derive(file, off).map(|f| f()),\n         );\n+    }\n+\n+    #[test]\n+    fn add_derive_existing() {\n         check_action(\n             \"#[derive(Clone)]\\nstruct Foo { a: i32<|>, }\",\n             \"#[derive(Clone<|>)]\\nstruct Foo { a: i32, }\",\n             |file, off| add_derive(file, off).map(|f| f()),\n         );\n     }\n \n+    #[test]\n+    fn add_derive_new_with_doc_comment() {\n+        check_action(\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32<|>, }\n+            \",\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+#[derive(<|>)]\n+struct Foo { a: i32, }\n+            \",\n+            |file, off| add_derive(file, off).map(|f| f()),\n+        );\n+    }\n+\n     #[test]\n     fn test_add_impl() {\n         check_action("}]}