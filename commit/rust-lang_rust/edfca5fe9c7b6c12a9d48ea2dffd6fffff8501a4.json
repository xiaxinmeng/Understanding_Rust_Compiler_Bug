{"sha": "edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZmNhNWZlOWM3YjZjMTJhOWQ0OGVhMmRmZmQ2ZmZmZmY4NTAxYTQ=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-26T17:41:38Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-29T05:06:02Z"}, "message": "Move branch point upwards to avoid unnecessary mk_ptr()", "tree": {"sha": "61c77a49679512ac8ae01bb26af6828db7601d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c77a49679512ac8ae01bb26af6828db7601d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4", "html_url": "https://github.com/rust-lang/rust/commit/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825cf51ad7d2578fcd60a0b7b107d7b0ab3017ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/825cf51ad7d2578fcd60a0b7b107d7b0ab3017ff", "html_url": "https://github.com/rust-lang/rust/commit/825cf51ad7d2578fcd60a0b7b107d7b0ab3017ff"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c1a3ff518b3382a3d90b0231da22ef7af4661d85", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=edfca5fe9c7b6c12a9d48ea2dffd6fffff8501a4", "patch": "@@ -771,10 +771,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::RawPtr(mt) => (false, mt),\n             _ => return self.unify_and(a, b, identity),\n         };\n+        coerce_mutbls(mt_a.mutbl, mutbl_b)?;\n \n         // Check that the types which they point at are compatible.\n         let a_unsafe = self.tcx.mk_ptr(ty::TypeAndMut { mutbl: mutbl_b, ty: mt_a.ty });\n-        coerce_mutbls(mt_a.mutbl, mutbl_b)?;\n         // Although references and unsafe ptrs have the same\n         // representation, we still register an Adjust::DerefRef so that\n         // regionck knows that the region for `a` must be valid here."}]}