{"sha": "19ecce332e56941ea0dd2a805270faa102acdb14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWNjZTMzMmU1Njk0MWVhMGRkMmE4MDUyNzBmYWExMDJhY2RiMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T23:55:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T23:55:12Z"}, "message": "Auto merge of #74948 - lzutao:stalize-result-as-deref, r=dtolnay\n\nStabilize `Result::as_deref` and `as_deref_mut`\n\nFCP completed in https://github.com/rust-lang/rust/issues/50264#issuecomment-645681400.\n\nThis PR stabilizes two new APIs for `std::result::Result`:\n```rust\nfn as_deref(&self) -> Result<&T::Target, &E> where T: Deref;\nfn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E> where T: DerefMut;\n```\n\nThis PR also removes two rarely used unstable APIs from `Result`:\n```rust\nfn as_deref_err(&self) -> Result<&T, &E::Target> where E: Deref;\nfn as_deref_mut_err(&mut self) -> Result<&mut T, &mut E::Target> where E: DerefMut;\n```\n\nCloses #50264", "tree": {"sha": "8b73f9e433d646360167a81d4fbfb12c166e97fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b73f9e433d646360167a81d4fbfb12c166e97fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ecce332e56941ea0dd2a805270faa102acdb14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ecce332e56941ea0dd2a805270faa102acdb14", "html_url": "https://github.com/rust-lang/rust/commit/19ecce332e56941ea0dd2a805270faa102acdb14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ecce332e56941ea0dd2a805270faa102acdb14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e754c359c471f91263813c46c67955071716a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e754c359c471f91263813c46c67955071716a7", "html_url": "https://github.com/rust-lang/rust/commit/81e754c359c471f91263813c46c67955071716a7"}, {"sha": "6d293ede9f0790e1a450113bfbda0998fec9e48c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d293ede9f0790e1a450113bfbda0998fec9e48c", "html_url": "https://github.com/rust-lang/rust/commit/6d293ede9f0790e1a450113bfbda0998fec9e48c"}], "stats": {"total": 206, "additions": 14, "deletions": 192}, "files": [{"sha": "e68dbf5215f6d06b9f6924464a86a1325fc2da4f", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -1145,7 +1145,6 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///\n@@ -1155,7 +1154,6 @@ impl<T: Deref, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inner_deref)]\n     /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n     /// let y: Result<&str, &u32> = Ok(\"hello\");\n     /// assert_eq!(x.as_deref(), y);\n@@ -1164,23 +1162,12 @@ impl<T: Deref, E> Result<T, E> {\n     /// let y: Result<&str, &u32> = Err(&42);\n     /// assert_eq!(x.as_deref(), y);\n     /// ```\n+    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n     pub fn as_deref(&self) -> Result<&T::Target, &E> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n-impl<T, E: Deref> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &<E as Deref>::Target>`.\n-    ///\n-    /// Coerces the [`Err`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n-    /// and returns the new [`Result`].\n-    pub fn as_deref_err(&self) -> Result<&T, &E::Target> {\n-        self.as_ref().map_err(|e| e.deref())\n-    }\n-}\n-\n-#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: DerefMut, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.\n     ///\n@@ -1190,7 +1177,6 @@ impl<T: DerefMut, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inner_deref)]\n     /// let mut s = \"HELLO\".to_string();\n     /// let mut x: Result<String, u32> = Ok(\"hello\".to_string());\n     /// let y: Result<&mut str, &mut u32> = Ok(&mut s);\n@@ -1201,22 +1187,12 @@ impl<T: DerefMut, E> Result<T, E> {\n     /// let y: Result<&mut str, &mut u32> = Err(&mut i);\n     /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n     /// ```\n+    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n     pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n-impl<T, E: DerefMut> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut <E as DerefMut>::Target>`.\n-    ///\n-    /// Coerces the [`Err`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n-    /// and returns the new [`Result`].\n-    pub fn as_deref_mut_err(&mut self) -> Result<&mut T, &mut E::Target> {\n-        self.as_mut().map_err(|e| e.deref_mut())\n-    }\n-}\n-\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///"}, {"sha": "b4c299d390586d05665923f442e2043135078f8f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -27,7 +27,6 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_trait)]\n-#![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]"}, {"sha": "caa2d916cd7a8c542e80f6b99c092aeafa9da545", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 9, "deletions": 118, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -250,24 +250,11 @@ fn test_result_as_deref() {\n     let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n     assert_eq!(ref_ok.as_deref(), expected_result);\n \n-    // &Result<T, E: Deref>::Err(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Err(&*E)\n-    let ref_err = &Result::Err::<u8, &i32>(&41);\n-    let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    let ref_err = &Result::Err::<u32, String>(String::from(\"an error\"));\n-    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    let ref_err = &Result::Err::<u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32]>([5, 4, 3, 2, 1].as_slice());\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    // &Result<T: Deref, E: Deref>::Err(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Err(&*E)\n-    let ref_err = &Result::Err::<&u8, &i32>(&41);\n-    let expected_result = Result::Err::<&u8, &&i32>(&&41);\n+    // &Result<T: Deref, E>::Err(T).as_deref() ->\n+    //      Result<&T::Deref::Target, &E>::Err(&*E)\n+    let val = 41;\n+    let ref_err = &Result::Err::<&u8, i32>(val);\n+    let expected_result = Result::Err::<&u8, &i32>(&val);\n     assert_eq!(ref_err.as_deref(), expected_result);\n \n     let s = String::from(\"an error\");\n@@ -279,46 +266,12 @@ fn test_result_as_deref() {\n     let ref_err = &Result::Err::<&u32, Vec<i32>>(v.clone());\n     let expected_result = Result::Err::<&u32, &Vec<i32>>(&v);\n     assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    // The following cases test calling `as_deref_*` with the wrong variant (i.e.\n-    // `as_deref()` with a `Result::Err()`, or `as_deref_err()` with a `Result::Ok()`.\n-    // While uncommon, these cases are supported to ensure that an `as_deref_*`\n-    // call can still be made even when one of the Result types does not implement\n-    // `Deref` (for example, std::io::Error).\n-\n-    // &Result<T, E: Deref>::Ok(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Ok(&T)\n-    let ref_ok = &Result::Ok::<i32, &u8>(42);\n-    let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<&str, &u32>(\"a result\");\n-    let expected_result = Result::Ok::<&&str, &u32>(&\"a result\");\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<[i32; 5], &u32>([1, 2, 3, 4, 5]);\n-    let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    // &Result<T: Deref, E>::Err(E).as_deref() ->\n-    //      Result<&T::Deref::Target, &E>::Err(&E)\n-    let ref_err = &Result::Err::<&u8, i32>(41);\n-    let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n-    let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n-    assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n-    assert_eq!(ref_err.as_deref(), expected_result);\n }\n \n #[test]\n fn test_result_as_deref_mut() {\n-    // &mut Result<T: Deref, E>::Ok(T).as_deref_mut() ->\n-    //      Result<&mut T::Deref::Target, &mut E>::Ok(&mut *T)\n+    // &mut Result<T: DerefMut, E>::Ok(T).as_deref_mut() ->\n+    //      Result<&mut T::DerefMut::Target, &mut E>::Ok(&mut *T)\n     let mut val = 42;\n     let mut expected_val = 42;\n     let mut_ok = &mut Result::Ok::<&mut i32, u8>(&mut val);\n@@ -335,26 +288,8 @@ fn test_result_as_deref_mut() {\n     let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n     assert_eq!(mut_ok.as_deref_mut(), expected_result);\n \n-    // &mut Result<T, E: Deref>::Err(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n-    let mut val = 41;\n-    let mut expected_val = 41;\n-    let mut_err = &mut Result::Err::<u8, &mut i32>(&mut val);\n-    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_string = String::from(\"an error\");\n-    let mut_err = &mut Result::Err::<u32, String>(expected_string.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut str>(expected_string.deref_mut());\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_vec = vec![5, 4, 3, 2, 1];\n-    let mut_err = &mut Result::Err::<u32, Vec<i32>>(expected_vec.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut [i32]>(expected_vec.as_mut_slice());\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    // &mut Result<T: Deref, E: Deref>::Err(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n+    // &mut Result<T: DerefMut, E>::Err(T).as_deref_mut() ->\n+    //      Result<&mut T, &mut E>::Err(&mut *E)\n     let mut val = 41;\n     let mut_err = &mut Result::Err::<&mut u8, i32>(val);\n     let expected_result = Result::Err::<&mut u8, &mut i32>(&mut val);\n@@ -369,48 +304,4 @@ fn test_result_as_deref_mut() {\n     let mut_err = &mut Result::Err::<&mut u32, Vec<i32>>(expected_vec.clone());\n     let expected_result = Result::Err::<&mut u32, &mut Vec<i32>>(&mut expected_vec);\n     assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    // The following cases test calling `as_deref_mut_*` with the wrong variant (i.e.\n-    // `as_deref_mut()` with a `Result::Err()`, or `as_deref_mut_err()` with a `Result::Ok()`.\n-    // While uncommon, these cases are supported to ensure that an `as_deref_mut_*`\n-    // call can still be made even when one of the Result types does not implement\n-    // `Deref` (for example, std::io::Error).\n-\n-    // &mut Result<T, E: Deref>::Ok(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Ok(&mut T)\n-    let mut expected_val = 42;\n-    let mut_ok = &mut Result::Ok::<i32, &mut u8>(expected_val.clone());\n-    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    let string = String::from(\"a result\");\n-    let expected_string = string.clone();\n-    let mut ref_str = expected_string.as_ref();\n-    let mut_ok = &mut Result::Ok::<&str, &mut u32>(string.as_str());\n-    let expected_result = Result::Ok::<&mut &str, &mut u32>(&mut ref_str);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_arr = [1, 2, 3, 4, 5];\n-    let mut_ok = &mut Result::Ok::<[i32; 5], &mut u32>(expected_arr.clone());\n-    let expected_result = Result::Ok::<&mut [i32; 5], &mut u32>(&mut expected_arr);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    // &mut Result<T: Deref, E>::Err(E).as_deref_mut() ->\n-    //      Result<&mut T::Deref::Target, &mut E>::Err(&mut E)\n-    let mut expected_val = 41;\n-    let mut_err = &mut Result::Err::<&mut u8, i32>(expected_val.clone());\n-    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    let string = String::from(\"an error\");\n-    let expected_string = string.clone();\n-    let mut ref_str = expected_string.as_ref();\n-    let mut_err = &mut Result::Err::<&mut u32, &str>(string.as_str());\n-    let expected_result = Result::Err::<&mut u32, &mut &str>(&mut ref_str);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    let mut expected_arr = [5, 4, 3, 2, 1];\n-    let mut_err = &mut Result::Err::<&mut u32, [i32; 5]>(expected_arr.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut [i32; 5]>(&mut expected_arr);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n }"}, {"sha": "42ba7f5c0259164e74cf75edfa6e6f66d951a358", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -24,7 +24,6 @@\n #![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n-#![feature(inner_deref)]\n #![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n #![feature(restricted_std)]"}, {"sha": "87be6d1743a2a4a736f7888d77929eae7ffa1c18", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -5,7 +5,6 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n-#![feature(inner_deref)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]"}, {"sha": "f713dee507f5b0adec5ec33d019b46eb9c9a17f6", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -1,5 +1,3 @@\n-#![feature(inner_deref)]\n-\n fn main() {\n     let _result = &Ok(42).as_deref();\n //~^ ERROR no method named `as_deref` found"}, {"sha": "96524c3095999b2758e948194e74d99e75b519e1", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `as_deref` found for enum `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-as_deref.rs:4:27\n+  --> $DIR/result-as_deref.rs:2:27\n    |\n LL |     let _result = &Ok(42).as_deref();\n    |                           ^^^^^^^^ help: there is an associated function with a similar name: `as_ref`"}, {"sha": "104aa3bcadff2e5ea2678333119d5b3a54b98bd7", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Err(41).as_deref_err();\n-//~^ ERROR no method named `as_deref_err` found\n-}"}, {"sha": "68ebfab95c47e79fddfd6632558ff62aad0e225e", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `as_deref_err` found for enum `std::result::Result<_, {integer}>` in the current scope\n-  --> $DIR/result-as_deref_err.rs:4:28\n-   |\n-LL |     let _result = &Err(41).as_deref_err();\n-   |                            ^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_mut`\n-   |\n-   = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n-           `{integer}: std::ops::Deref`\n-           `<{integer} as std::ops::Deref>::Target = _`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "3af7033dd5dd36e2ca8351b1f276b7e81fa7062e", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -1,5 +1,3 @@\n-#![feature(inner_deref)]\n-\n fn main() {\n     let _result = &mut Ok(42).as_deref_mut();\n //~^ ERROR no method named `as_deref_mut` found"}, {"sha": "73266bc7f687bc399045b44076eff3990d32f538", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ecce332e56941ea0dd2a805270faa102acdb14/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=19ecce332e56941ea0dd2a805270faa102acdb14", "patch": "@@ -1,8 +1,8 @@\n error[E0599]: no method named `as_deref_mut` found for enum `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-as_deref_mut.rs:4:31\n+  --> $DIR/result-as_deref_mut.rs:2:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();\n-   |                               ^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_err`\n+   |                               ^^^^^^^^^^^^ method not found in `std::result::Result<{integer}, _>`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::DerefMut`"}, {"sha": "b7849ecb6d2422e3355784baca290883c612252d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &mut Err(41).as_deref_mut_err();\n-//~^ ERROR no method named `as_deref_mut_err` found\n-}"}, {"sha": "d724ae5c74bdefbc7ea94435c381d0db709e8f35", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `as_deref_mut_err` found for enum `std::result::Result<_, {integer}>` in the current scope\n-  --> $DIR/result-as_deref_mut_err.rs:4:32\n-   |\n-LL |     let _result = &mut Err(41).as_deref_mut_err();\n-   |                                ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_mut`\n-   |\n-   = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n-           `{integer}: std::ops::DerefMut`\n-           `<{integer} as std::ops::Deref>::Target = _`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}]}