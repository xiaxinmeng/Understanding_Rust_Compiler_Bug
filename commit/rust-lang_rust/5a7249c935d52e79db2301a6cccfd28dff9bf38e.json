{"sha": "5a7249c935d52e79db2301a6cccfd28dff9bf38e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNzI0OWM5MzVkNTJlNzlkYjIzMDFhNmNjY2ZkMjhkZmY5YmYzOGU=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-10T16:41:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T03:19:40Z"}, "message": "Cleanup unused imports", "tree": {"sha": "843bb8cadfecccf970a3af56ea87259cc83de4a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843bb8cadfecccf970a3af56ea87259cc83de4a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7249c935d52e79db2301a6cccfd28dff9bf38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7249c935d52e79db2301a6cccfd28dff9bf38e", "html_url": "https://github.com/rust-lang/rust/commit/5a7249c935d52e79db2301a6cccfd28dff9bf38e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7249c935d52e79db2301a6cccfd28dff9bf38e/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc2f1800dcf97aff968478569c52204ec6d3998", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc2f1800dcf97aff968478569c52204ec6d3998", "html_url": "https://github.com/rust-lang/rust/commit/9bc2f1800dcf97aff968478569c52204ec6d3998"}], "stats": {"total": 308, "additions": 104, "deletions": 204}, "files": [{"sha": "b7e697686f5133c7ef05ba4bbd702584d7602643", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -7,23 +7,18 @@ import metadata::{encoder, cstore};\n import middle::trans_common::crate_ctxt;\n import std::str;\n import std::fs;\n-import std::os;\n import std::vec;\n import std::option;\n import std::run;\n import option::some;\n import option::none;\n import std::sha1::sha1;\n-import std::sort;\n import syntax::ast;\n import syntax::print::pprust;\n import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::llvm::ValueRef;\n import lib::llvm::mk_pass_manager;\n import lib::llvm::mk_target_data;\n-import lib::llvm::mk_type_names;\n import lib::llvm::False;\n-import lib::llvm::True;\n import util::filesearch;\n \n tag output_type {"}, {"sha": "50ae70c872b6d1e06a984d99eb8cacadeaecf466", "filename": "src/comp/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Ftarget_strs.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,9 +1,7 @@\n-import std::str;\n-\n type t = {\n     module_asm: str,\n     meta_sect_name: str,\n     data_layout: str,\n     target_triple: str,\n     gcc_args: [str]\n-};\n\\ No newline at end of file\n+};"}, {"sha": "ca0b0ca1bff80e22b58a64e619a8d874c10a4b17", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,11 +1,9 @@\n \n-import std::str;\n import driver::session;\n import middle::trans;\n-import trans::decl_cdecl_fn;\n-import middle::trans_common::{T_f32, T_f64, T_fn, T_bool, T_i1, T_i8, T_i32,\n-                              T_i64, T_int, T_vec, T_nil, T_opaque_chan_ptr,\n-                              T_opaque_vec, T_opaque_port_ptr, T_ptr,\n+import middle::trans_common::{T_fn, T_i1, T_i8, T_i32,\n+                              T_i64, T_int, T_nil,\n+                              T_opaque_vec, T_ptr,\n                               T_size_t, T_void, T_float};\n import lib::llvm::type_names;\n import lib::llvm::llvm::ModuleRef;"}, {"sha": "1674604828bf2909b3c49cf5edd347094df0323d", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,3 @@\n-import lib::llvm::llvm;\n-import lib::llvm::llvm::ModuleRef;\n-import std::str;\n import driver::session;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {"}, {"sha": "14b423224c08e013d0e79707e7e1bd237d9d5a67", "filename": "src/comp/back/x86_64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86_64.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,3 @@\n-import lib::llvm::llvm;\n-import lib::llvm::llvm::ModuleRef;\n-import std::str;\n import driver::session;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {"}, {"sha": "f86e2f44682e0971a0c6e75243ab08083a896ceb", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -2,20 +2,16 @@\n \n // -*- rust -*-\n import metadata::{creader, cstore};\n-import syntax::parse::{parser, token};\n+import syntax::parse::{parser};\n import syntax::{ast, codemap};\n import front::attr;\n import middle::{trans, resolve, freevars, kind, ty, typeck, fn_usage};\n-import middle::tstate::ck;\n import syntax::print::{pp, pprust};\n-import util::{ppaux, common, filesearch};\n+import util::{ppaux, filesearch};\n import back::link;\n-import lib::llvm;\n-import std::{fs, option, str, vec, int, io, run, getopts, result};\n-import std::map::mk_hashmap;\n+import std::{option, str, vec, int, io, getopts, result};\n import std::option::{some, none};\n import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n-import back::link::output_type;\n import back::{x86, x86_64};\n \n tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }"}, {"sha": "b8282c970d22376ea4c23d8a8325062838961fde", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,7 +3,7 @@ import syntax::{ast, codemap};\n import syntax::ast::node_id;\n import codemap::span;\n import syntax::ast::ty_mach;\n-import std::{uint, map, option, str};\n+import std::{option};\n import std::option::{some, none};\n import syntax::parse::parser::parse_sess;\n import util::filesearch;"}, {"sha": "34b1e5c430b43bfbce8c00d6142f0373b7f45320", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,8 +1,7 @@\n // Functions dealing with attributes and meta_items\n \n-import std::{vec, str, map, option};\n+import std::{vec, map, option};\n import syntax::{ast, ast_util};\n-import util::common;\n import driver::session;\n \n export attr_meta;"}, {"sha": "517b2169002763786aaa86a0c2c66b7c4eced385", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,6 @@\n // Code that generates a test runner to run all the tests in a crate\n \n-import std::{option, vec, str};\n+import std::{option, vec};\n import syntax::{ast, ast_util};\n import syntax::ast_util::*;\n //import syntax::ast_util::dummy_sp;"}, {"sha": "f5b0fbeec8d8d55802272d0ade599df350ea08c0", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,10 +1,8 @@\n import std::{vec, str, option};\n import std::str::sbuf;\n \n-import llvm::{ModuleRef, ContextRef, TypeRef, TypeHandleRef, ValueRef,\n-              BasicBlockRef, BuilderRef, ModuleProviderRef, MemoryBufferRef,\n-              PassManagerRef, UseRef, TargetDataRef, Linkage, Attribute,\n-              Visibility, CallConv, IntPredicate, RealPredicate, Opcode,\n+import llvm::{TypeRef, MemoryBufferRef,\n+              PassManagerRef, TargetDataRef,\n               ObjectFileRef, SectionIteratorRef};\n \n type ULongLong = u64;"}, {"sha": "95929b3449c88ef935baee83bb5a8e9eddcea73d", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,11 +4,9 @@ import driver::session;\n import syntax::{ast, ast_util};\n import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n import front::attr;\n-import middle::resolve;\n import syntax::visit;\n import syntax::codemap::span;\n-import back::x86;\n-import util::{common, filesearch};\n+import util::{filesearch};\n import std::{vec, str, fs, io, option};\n import std::option::{none, some};\n import std::map::{hashmap, new_int_hash};"}, {"sha": "5c98bda66ed3ee8ec0c2a4dea505292bca2601a1", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,13 +1,11 @@\n // Decoding metadata from a single crate's metadata\n \n import std::{ebml, vec, option, str, io};\n-import std::map::hashmap;\n import syntax::{ast, ast_util};\n import front::attr;\n import middle::ty;\n import common::*;\n import tydecode::{parse_def_id, parse_ty_data};\n-import driver::session;\n import syntax::print::pprust;\n import cstore;\n "}, {"sha": "ec4e57ae56b51b2eae90860a48fa48b519b9fc8b", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,7 +1,6 @@\n // Metadata encoding\n \n-import std::{vec, str, uint, io, option, ebml, map};\n-import std::option::{some, none};\n+import std::{vec, str, uint, io, ebml, map};\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::local_def;"}, {"sha": "75e65607329cb6613138022011448579720ca49f", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,6 @@\n // Type decoding\n \n-import std::{vec, str, uint, option};\n+import std::{vec, str, uint};\n import std::option::{none, some};\n import syntax::ast;\n import syntax::ast::*;"}, {"sha": "92cf4d1b2fc0e906828f6cf66988f872a0d9d50e", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,12 +1,11 @@\n // Type encoding\n \n-import std::{str, io, int, uint};\n+import std::{io, int, uint};\n import std::map::hashmap;\n import std::option::{some, none};\n import syntax::ast::*;\n import middle::ty;\n import syntax::print::pprust::*;\n-import util::common;\n \n export ctxt;\n export ty_abbrev;"}, {"sha": "b02e6c8f6c22e147e4e2269d3ba8d65ec3acdd4c", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,10 +1,10 @@\n \n import syntax::{ast, ast_util};\n-import ast::{ident, fn_ident, node_id, def_id};\n+import ast::{ident, fn_ident, node_id};\n import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n-import std::{vec, str, option};\n+import std::{vec, option};\n import std::option::{some, none, is_none};\n \n // This is not an alias-analyser (though it would merit from becoming one, or"}, {"sha": "1ed720322f35315ee334efbb68cbfa90062f8c30", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -2,7 +2,6 @@ import std::{smallintmap, option};\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::{visit, codemap};\n-import visit::vt;\n \n tag ast_node {\n     node_item(@item);"}, {"sha": "a3174204a6077d0d89826ec8d032539e56333466", "filename": "src/comp/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_const.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,5 +1,4 @@\n import syntax::ast::*;\n-import syntax::ast_util::{variant_def_ids, dummy_sp};\n import syntax::visit;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {"}, {"sha": "0b022ad35ad0526cb2a4418ac7811f4a2e51e165", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,7 +1,7 @@\n import syntax::ast;\n import syntax::visit;\n import std::option::some;\n-import syntax::print::pprust::{expr_to_str, path_to_str};\n+import syntax::print::pprust::expr_to_str;\n \n export check_crate_fn_usage;\n "}, {"sha": "6bf2dd4555f04b0b23ab7433b4a6decf02bedbb6", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,11 +1,10 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-import std::{map, option, int, str};\n+import std::{int};\n import std::map::*;\n import std::option::*;\n import syntax::{ast, ast_util, visit};\n-import driver::session;\n import middle::resolve;\n import syntax::codemap::span;\n "}, {"sha": "8f77011b562d62b773f7ba4aa2773e2b2b2fb621", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,13 +1,13 @@\n // Routines useful for garbage collection.\n \n-import lib::llvm::{True, False};\n+import lib::llvm::True;\n import lib::llvm::llvm::ValueRef;\n import middle::trans;\n import middle::trans::{get_tydesc, tps_normal};\n import middle::trans_common::*;\n import middle::ty;\n-import std::option::{some, none};\n-import std::{ptr, str, unsafe, vec};\n+import std::option::none;\n+import std::str;\n \n import lll = lib::llvm::llvm;\n import bld = trans_build;"}, {"sha": "b71fdc024309e9bc95131c5d14c3e469c1dde9b2", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -85,7 +85,7 @@\n */\n \n import syntax::{ast, ast_util, visit, codemap};\n-import std::{vec, option, str};\n+import std::{vec, option};\n import ast::{kind, kind_unique, kind_shared, kind_pinned};\n \n fn kind_lteq(a: kind, b: kind) -> bool {"}, {"sha": "aa5d5ebaaa44f97db116f56a882b6dba626a30d2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -2,17 +2,16 @@\n import syntax::{ast, ast_util, codemap};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n-import syntax::ast_util::{local_def, respan};\n+import syntax::ast_util::local_def;\n \n import metadata::{csearch, cstore};\n import driver::session::session;\n import util::common::*;\n import std::map::{new_int_hash, new_str_hash};\n import syntax::codemap::span;\n-import middle::ty::constr_table;\n import syntax::visit;\n import visit::vt;\n-import std::{vec, int, list, option, str};\n+import std::{vec, list, option, str};\n import std::map::hashmap;\n import std::list::{list, nil, cons};\n import std::option::{some, none, is_none};"}, {"sha": "42435d808f43dd8f3c33a320384dfb118dbc310b", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,14 +4,12 @@\n import lib::llvm::True;\n import lib::llvm::llvm::{ModuleRef, TypeRef, ValueRef};\n import middle::{trans, trans_common};\n-import middle::trans::llsize_of;\n-import middle::trans_common::{crate_ctxt, val_ty, C_bytes, C_int,\n-                              C_named_struct, C_struct, C_uint, T_i8, T_ptr};\n+import middle::trans_common::{crate_ctxt, val_ty, C_bytes,\n+                              C_named_struct, C_struct};\n import middle::ty;\n-import middle::ty::{field, mt};\n+import middle::ty::field;\n import syntax::ast;\n import syntax::ast_util::dummy_sp;\n-import syntax::codemap::span;\n import syntax::util::interner;\n import util::common;\n "}, {"sha": "8478061bc887dbfacd0d32444fdda777d0444995", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -12,32 +12,29 @@\n //     pcwalton).  You can, instead, find out its TypeRef by calling val_ty,\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n-import std::{int, str, uint, map, option, fs, time, vec};\n+import std::{str, uint, map, option, time, vec};\n import std::map::hashmap;\n import std::map::{new_int_hash, new_str_hash};\n import std::option::{some, none};\n import driver::session;\n import middle::{ty, gc};\n import middle::freevars::*;\n-import back::{link, x86, abi, upcall};\n+import back::{link, abi, upcall};\n import syntax::{ast, ast_util};\n import syntax::visit;\n import syntax::codemap::span;\n-import syntax::print::pprust::{expr_to_str, path_to_str};\n+import syntax::print::pprust::{expr_to_str};\n import visit::vt;\n-import util::common;\n import util::common::*;\n-import lib::llvm::{llvm, target_data, type_names,\n-                   mk_target_data, mk_type_names};\n-import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, TypeHandleRef,\n-                         BuilderRef, BasicBlockRef};\n-import lib::llvm::{Bool, True, False};\n+import lib::llvm::{llvm, mk_target_data, mk_type_names};\n+import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n+import lib::llvm::{True, False};\n import link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_seq,\n               mangle_internal_name_by_path,\n               mangle_internal_name_by_path_and_seq,\n               mangle_exported_name};\n-import metadata::{creader, csearch, cstore};\n+import metadata::{csearch, cstore};\n import util::ppaux::{ty_to_str, ty_to_short_str};\n \n import trans_common::*;"}, {"sha": "319d6d00d83229b02e440174eb389755e70c3ea1", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,12 +1,10 @@\n-import std::{str, vec, option, int};\n+import std::{str, vec, option};\n import option::{some, none};\n-import std::map::hashmap;\n \n import lib::llvm::llvm;\n-import lib::llvm::llvm::{ValueRef, TypeRef, BasicBlockRef};\n+import lib::llvm::llvm::{ValueRef, BasicBlockRef};\n import trans_build::*;\n import trans::{new_sub_block_ctxt, new_scope_block_ctxt, load_if_immediate};\n-import ty::pat_ty;\n import syntax::ast;\n import syntax::ast_util;\n import syntax::ast_util::dummy_sp;"}, {"sha": "e888b00fa3a714a0b479b17f3ae89b3e8b2b4237", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,8 +3,8 @@ import std::str::sbuf;\n import lib::llvm::llvm;\n import llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, Opcode,\n               ModuleRef};\n-import trans_common::{block_ctxt, T_ptr, T_nil, T_int, T_i8, T_i1,\n-                      val_ty, val_str, bcx_ccx, C_i32};\n+import trans_common::{block_ctxt, T_ptr, T_nil, T_i8, T_i1,\n+                      val_ty, C_i32};\n \n fn B(cx: @block_ctxt) -> BuilderRef {\n     let b = *cx.fcx.lcx.ccx.builder;"}, {"sha": "f89d1dd930d407f274e247502b624f091cc988e6", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,34 +3,20 @@\n \n */\n \n-import std::{int, vec, str, uint, map, option, fs, unsafe};\n+import std::{int, vec, str, uint, option, unsafe};\n import std::vec::to_ptr;\n import std::map::hashmap;\n-import std::option::{some, none};\n+import std::option::some;\n import syntax::ast;\n import driver::session;\n import middle::ty;\n-import back::{link, x86, abi, upcall};\n-import syntax::visit;\n-import visit::vt;\n-import util::common;\n+import back::{link, abi, upcall};\n import util::common::*;\n-import std::map::{new_int_hash, new_str_hash};\n import syntax::codemap::span;\n-import lib::llvm::{llvm, target_data, type_names,\n-                   mk_target_data, mk_type_names};\n-import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, TypeHandleRef,\n-                         BuilderRef, BasicBlockRef};\n+import lib::llvm::{llvm, target_data, type_names};\n+import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n import lib::llvm::{True, False, Bool};\n-import link::{mangle_internal_name_by_type_only,\n-              mangle_internal_name_by_seq,\n-              mangle_internal_name_by_path,\n-              mangle_internal_name_by_path_and_seq,\n-              mangle_exported_name};\n-import metadata::{creader, csearch, cstore};\n-import util::ppaux::{ty_to_str, ty_to_short_str};\n-import syntax::print::pprust::{expr_to_str, path_to_str};\n-import bld = trans_build;\n+import metadata::{csearch};\n \n // FIXME: These should probably be pulled in here too.\n import trans::{type_of_fn, drop_ty};"}, {"sha": "399af0a61da8e7a2642ed86c53d6abbeb068dc05", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,7 +3,7 @@\n import std::{str, option, vec};\n import option::{none, some};\n \n-import lib::llvm::{llvm, Bool, True};\n+import lib::llvm::{llvm, True};\n import lib::llvm::llvm::{TypeRef, ValueRef};\n \n import back::abi;"}, {"sha": "607e0567f4054a12d048a8415e3c4b67bc1baec6", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,11 +4,10 @@ import syntax::ast;\n import lib::llvm::llvm::{ValueRef, TypeRef};\n import back::abi;\n import trans::{call_memmove, trans_shared_malloc, llsize_of, type_of_or_i8,\n-               INIT, copy_val, load_if_immediate, alloca, size_of,\n-               llderivedtydescs_block_ctxt, lazily_emit_tydesc_glue,\n-               get_tydesc, load_inbounds,\n+               INIT, copy_val, load_if_immediate, size_of,\n+               get_tydesc,\n                node_id_type, new_sub_block_ctxt, tps_normal, do_spill_noroot,\n-               alloc_ty, dest};\n+               dest};\n import trans_build::*;\n import trans_common::*;\n "}, {"sha": "7eb317fdde14dab552c9a408363d0ce9c96e9705", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,15 +1,11 @@\n \n-import std::{int, uint, str, option};\n-import std::option::{some, none};\n+import std::{int, uint};\n import syntax::ast::*;\n import syntax::ast_util::pat_binding_ids;\n import syntax::visit;\n import syntax::codemap::span;\n-import std::map::new_str_hash;\n-import util::common::{log_expr_err, log_block_err, log_item_err,\n-                      log_stmt_err, log_expr, log_block, log_stmt};\n-import aux::{fn_info, fn_info_map, num_constraints, get_fn_info,\n-             crate_ctxt, add_node};\n+import util::common::{log_stmt};\n+import aux::{num_constraints, get_fn_info, crate_ctxt, add_node};\n import middle::tstate::ann::empty_ann;\n \n fn collect_ids_expr(e: @expr, rs: @mutable [node_id]) { *rs += [e.id]; }"}, {"sha": "b4d22fcb1188ad0748d86f74cad0b492f3a4bd9d", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,26 +1,23 @@\n-import std::{vec, int, uint, str, option};\n+import std::{vec, int, uint, option};\n import std::option::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::codemap::span;\n import syntax::visit;\n-import util::common;\n-import util::common::log_block;\n-import std::map::{new_int_hash, new_uint_hash};\n-import util::common::{log_expr_err, lit_eq};\n+import std::map::{new_int_hash};\n+import util::common::{lit_eq};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n-                     poststate, precond, postcond, empty_states, pps_len,\n+                     poststate, precond, postcond,\n                      set_prestate, set_poststate, set_in_poststate_,\n                      extend_prestate, extend_poststate, set_precondition,\n-                     set_postcondition, set_in_postcond_, ts_ann,\n+                     set_postcondition, ts_ann,\n                      clear_in_postcond,\n-                     clear_in_poststate, clear_in_poststate_};\n+                     clear_in_poststate_};\n import tritv::*;\n import bitvectors::promises_;\n \n-import syntax::print::pprust::{constr_args_to_str, constr_arg_to_str,\n-                               lit_to_str};\n+import syntax::print::pprust::{constr_args_to_str, lit_to_str};\n \n // Used to communicate which operands should be invalidated\n // to helper functions"}, {"sha": "c97f336fab965e6e828f8ca3cc8f42840d8682d4", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -5,8 +5,8 @@ import std::option::*;\n import aux::*;\n import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n                      relax_prestate, relax_precond, relax_poststate,\n-                     pps_len, true_precond, empty_prestate,\n-                     difference, union, intersect, clone,\n+                     pps_len, true_precond,\n+                     difference, union, clone,\n                      set_in_postcond, set_in_poststate, set_in_poststate_,\n                      clear_in_poststate, clear_in_prestate,\n                      clear_in_poststate_};"}, {"sha": "22bec5c7d8fb32bccd26bdcfb913570796be04a0", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,20 +1,17 @@\n \n import syntax::ast;\n-import ast::{method, item, item_fn, _fn, obj_field, _obj, stmt, ident,\n-             fn_ident, node_id, def_id, ty_param, crate, return_val, noreturn,\n+import ast::{_fn, stmt,\n+             fn_ident, node_id, crate, return_val, noreturn,\n              expr};\n-import syntax::ast_util::local_def;\n import syntax::visit;\n import syntax::codemap::span;\n import middle::ty::{type_is_nil, ret_ty_of_fn};\n-import tstate::ann::{ts_ann, empty_poststate, true_precond, true_postcond,\n-                     false_postcond, precond, postcond, poststate, prestate,\n+import tstate::ann::{\n+                     precond, prestate,\n                      implies, ann_precond, ann_prestate};\n-import std::{str, option};\n-import std::option::{t, some, none};\n+import std::{option};\n import aux::*;\n import syntax::print::pprust::ty_to_str;\n-import util::common::log_stmt_err;\n import bitvectors::*;\n import annotate::annotate_crate;\n import collect_locals::mk_f_to_fn_info;"}, {"sha": "ad25e7c59c88c24889e084bff682dfdf03d028b6", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,11 +1,9 @@\n-import std::{str, uint, int, vec};\n import syntax::ast::*;\n import syntax::ast_util::*;\n import util::ppaux::fn_ident_to_string;\n import std::option::*;\n import syntax::visit;\n import aux::*;\n-import std::map::new_int_hash;\n import util::common::new_def_hash;\n import syntax::codemap::span;\n import syntax::ast_util::respan;"}, {"sha": "70fb32e5f1198e766e964400c1a9544f18397fd5", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,20 +1,18 @@\n \n-import std::{vec, str, option};\n+import std::{vec, option};\n import std::option::{none, some};\n \n import tstate::ann::*;\n import aux::*;\n-import bitvectors::{bit_num, promises, seq_preconds, seq_postconds,\n-                    intersect_states, declare_var, gen_poststate,\n+import bitvectors::{bit_num, seq_preconds, seq_postconds,\n+                    intersect_states,\n                     relax_precond_block, gen};\n import tritv::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::visit;\n-import std::map::new_int_hash;\n-import util::common::{new_def_hash, log_expr, log_fn, field_exprs,\n-                      has_nonlocal_exits, log_stmt, log_stmt_err,\n-                      log_expr_err, log_block_err, log_block};\n+import util::common::{new_def_hash, log_expr, field_exprs,\n+                      has_nonlocal_exits, log_stmt};\n import syntax::codemap::span;\n import util::ppaux::fn_ident_to_string;\n "}, {"sha": "786df5facdcd0fa39f4f6ca803e79250dd5299b2", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,7 +1,5 @@\n-import syntax::print::pprust::path_to_str;\n-import util::ppaux::ty_to_str;\n-import std::{vec, str, option};\n-import std::option::{get, is_none, none, some, maybe};\n+import std::{vec, option};\n+import std::option::{none, some};\n import ann::*;\n import aux::*;\n import tritv::{tritv_clone, tritv_set, ttrue};\n@@ -10,10 +8,8 @@ import bitvectors::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::codemap::span;\n-import middle::ty::{expr_ty, type_is_nil, type_is_bot};\n-import util::common::{new_def_hash, log_expr, log_block, log_block_err,\n-                      log_fn, field_exprs, has_nonlocal_exits, log_stmt,\n-                      log_stmt_err, log_expr_err};\n+import middle::ty::{expr_ty, type_is_bot};\n+import util::common::{field_exprs, has_nonlocal_exits};\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     alt t {"}, {"sha": "d20544e48e87af2c7a0cf68ef53919d228568e35", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,8 +1,6 @@\n-import std::int;\n import std::vec;\n import std::str;\n import std::uint;\n-import std::box;\n import std::ufind;\n import std::map;\n import std::map::hashmap;"}, {"sha": "fabd2b069bdaad4f084273dde28e656e2cf32497", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,23 +1,20 @@\n import syntax::{ast, ast_util};\n-import ast::{mutability, spanned};\n+import ast::spanned;\n import syntax::ast_util::{local_def, respan, ty_param_kind};\n import syntax::visit;\n import metadata::csearch;\n import driver::session;\n-import util::common;\n import util::common::*;\n import syntax::codemap::span;\n import middle::ty;\n import middle::ty::{node_id_to_type, arg, bind_params_in_type, block_ty,\n-                    expr_ty, field, method, node_type_table, pat_ty,\n-                    ty_param_substs_opt_and_ty, ty_param_kinds_and_ty,\n-                    ty_nil};\n+                    expr_ty, field, node_type_table,\n+                    ty_param_substs_opt_and_ty, ty_param_kinds_and_ty};\n import util::ppaux::ty_to_str;\n-import middle::ty::unify::{ures_ok, ures_err, fixup_result, fix_ok, fix_err};\n-import std::{int, vec, str, uint, map, option, smallintmap};\n-import std::map::{hashmap, new_int_hash, new_str_hash};\n-import std::option::{none, some, from_maybe};\n-import middle::tstate::ann::ts_ann;\n+import middle::ty::unify::{ures_ok, ures_err, fix_ok, fix_err};\n+import std::{int, vec, str, option, smallintmap};\n+import std::map::{hashmap, new_int_hash};\n+import std::option::{none, some};\n import syntax::print::pprust::*;\n \n export check_crate;"}, {"sha": "0fc352ac8be1916bd3fc2cba47e4434f0a0b2faf", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,4 +1,4 @@\n-import std::{str, vec, option};\n+import std::{vec, option};\n import std::map::hashmap;\n import driver::session::session;\n import codemap::span;"}, {"sha": "f017f7e657455d96167feac275511f49d3bb12fd", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,7 +4,7 @@\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n-import std::{vec, str, option, generic_os};\n+import std::{vec, option, generic_os};\n import base::*;\n export expand_syntax_ext;\n "}, {"sha": "a602ab49309ba33b77fdbe49307c9134cc79a729", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,7 +3,7 @@ import driver::session;\n import std::option::{none, some};\n \n import std::map::hashmap;\n-import std::{vec, str};\n+import std::{vec};\n \n import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;"}, {"sha": "b49f958a4d6d34f4bc8ad5bb5a25c81694d17d51", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -6,7 +6,7 @@\n  * compiler syntax extension plugin interface.\n  */\n import std::{vec, str, option};\n-import std::option::{none, some};\n+import std::option::{some};\n import std::extfmt::ct::*;\n import base::*;\n import codemap::span;"}, {"sha": "5a08399da4978e2437005e32486f44377fa500c0", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,4 +1,4 @@\n-import std::{vec, str, option};\n+import std::{vec, option};\n import base::*;\n import syntax::ast;\n "}, {"sha": "67b9291360281fd7c6cb4d1638692a2b87f057bb", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,4 +1,4 @@\n-import std::{str, option};\n+import std::{option};\n import base::*;\n import syntax::ast;\n "}, {"sha": "6a2a87de52c4a4e03d95dcbbdb89583560ee42d0", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,16 +1,15 @@\n use std;\n \n import codemap::span;\n-import std::{vec, str, option};\n+import std::{vec, option};\n import std::map::{hashmap, new_str_hash};\n import option::{some, none};\n \n-import base::{syntax_extension, ext_ctxt, normal,\n-              expr_to_str, expr_to_ident};\n+import base::{ext_ctxt, normal};\n \n import fold::*;\n import ast_util::respan;\n-import ast::{ident, path, ty, blk, blk_, expr, expr_, path_, expr_path,\n+import ast::{ident, path, ty, blk_, expr, path_, expr_path,\n              expr_vec, expr_mac, mac_invoc, node_id};\n \n export add_new_extension;"}, {"sha": "03c65d79e75af0534739ac4329746e3c863bdea6", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,5 +1,5 @@\n \n-import std::{str, option, result, io, fs};\n+import std::{option, result, io, fs};\n import std::option::{some, none};\n import syntax::ast;\n import syntax::parse::token;"}, {"sha": "df9683f6a93ac1c8eff561d00607ef93e18b2886", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,5 @@\n \n-import std::{io, int, vec, str, map, option};\n-import std::map::hashmap;\n+import std::{io, vec, str, option};\n import std::option::{some, none};\n import util::interner;\n import util::interner::intern;"}, {"sha": "4fa5baa7af4ca986f100e2b3a79f2cb56bebae8f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,7 +4,6 @@ import std::option::{some, none};\n import std::either::{left, right};\n import std::map::{hashmap, new_str_hash};\n import token::can_begin_expr;\n-import ex = ext::base;\n import codemap::span;\n import util::interner;\n import ast::{node_id, spanned};"}, {"sha": "ee02e24c7a8f4fc7be877625ea74071ebb225f35", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,10 +1,8 @@\n \n import ast::ty_mach;\n import ast_util::ty_mach_to_str;\n-import std::map::new_str_hash;\n import util::interner;\n-import std::{int, uint, str, option};\n-import option::{some, none};\n+import std::{int, uint, str};\n \n type str_num = uint;\n "}, {"sha": "d45c8a8a43a93223f979af9079ed77133bac7974", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -2,11 +2,10 @@\n import std::{vec, int, io, str, uint, option};\n import parse::lexer;\n import syntax::codemap::codemap;\n-import syntax::visit;\n import ast;\n import ast_util;\n import option::{some, none};\n-import pp::{printer, break_offset, word, huge_word, zero_word,\n+import pp::{break_offset, word,\n             space, zerobreak, hardbreak, breaks, consistent,\n             inconsistent, eof};\n "}, {"sha": "c814f168a4abc4e1038e54648c40adef4cc32997", "filename": "src/comp/syntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,7 +1,7 @@\n // An \"interner\" is a data structure that associates values with uint tags and\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n-import std::{vec, map, option};\n+import std::{vec, map};\n import std::map::{hashmap, hashfn, eqfn};\n import std::option::{none, some};\n "}, {"sha": "99275d336d005440283efb5962a37b7609bc714b", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,16 +1,12 @@\n-import std::{str, map, uint, int, option};\n+import std::{str, option};\n import std::math::{max, min};\n import std::map::hashmap;\n-import std::option::{none, some};\n+import std::option::{some};\n import syntax::ast;\n-import ast::{ty, pat, lit, path};\n-import syntax::codemap::{codemap, span};\n+import ast::{ty, pat};\n+import syntax::codemap::{span};\n import syntax::visit;\n-import std::io::{stdout, str_writer, string_writer};\n import syntax::print;\n-import print::pprust::{print_block, print_item, print_expr, print_path,\n-                       print_decl, print_fn, print_type, print_literal};\n-import print::pp::mk_printer;\n \n type flag = hashmap<str, ()>;\n "}, {"sha": "5e51f6c684042c3124c60d5a032c8fd87cd286d2", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -5,9 +5,7 @@\n import std::option;\n import std::fs;\n import std::vec;\n-import std::str;\n import std::os;\n-import back::link;\n \n export filesearch;\n export mk_filesearch;\n@@ -100,4 +98,4 @@ fn get_sysroot(maybe_sysroot: option::t<fs::path>) -> fs::path {\n       option::some(sr) { sr }\n       option::none. { get_default_sysroot() }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b148b99cde877366a0e27abab0003846d3223715", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,13 +3,11 @@ import std::option::{none, some};\n import middle::ty;\n import middle::ty::*;\n import metadata::encoder;\n-import syntax::print::{pp, pprust};\n+import syntax::print::pprust;\n import syntax::print::pprust::{path_to_str, constr_args_to_str, proto_to_str};\n-import pp::{word, eof, zerobreak, hardbreak};\n import syntax::ast_util::ty_mach_to_str;\n import syntax::ast;\n import middle::ast_map;\n-import metadata::csearch;\n \n fn mode_str(m: ty::mode) -> str {\n     alt m {"}, {"sha": "387036b76a3fd5eec489eade1e4b4de79532906e", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,6 +1,4 @@\n-import std::{fs, io, getopts, math, vec, str, int, uint, option, result};\n-import std::getopts::{optopt, opt_present, opt_str};\n-import std::io::stdout;\n+import std::{fs, io, math, vec, str, int, uint, option, result};\n \n import rustc::syntax::{ast, ast_util, fold, visit, codemap};\n import rustc::syntax::parse::parser;"}, {"sha": "841afaa9797ada824a70d8925e75f03523f0882a", "filename": "src/lib/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -27,8 +27,6 @@ Example:\n */\n \n import sys;\n-import ptr;\n-import unsafe;\n import task;\n \n export send;"}, {"sha": "c65373a8813dd4e3f49a412de88cd05ef015d90c", "filename": "src/lib/either.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Feither.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -4,8 +4,6 @@ Module: either\n A type that represents one of two alternatives\n */\n \n-import option;\n-import option::{some, none};\n \n /*\n Tag: t"}, {"sha": "09b23694e2fcb33b13a4b4d8ed7afccdac5efcc9", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -6,7 +6,6 @@ Some miscellaneous platform functions.\n These should be rolled into another module.\n */\n \n-import str::sbuf;\n \n // Wow, this is an ugly way to write doc comments\n "}, {"sha": "016c6381a7d2c5539d152df3b3a1e394c424229c", "filename": "src/lib/io.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -1,4 +1,3 @@\n-import os::libc;\n \n native \"cdecl\" mod rustrt {\n     fn rust_get_stdin() -> os::libc::FILE;"}, {"sha": "daa86bb8b40c78595c92dd1f9cd922196ae4dece", "filename": "src/lib/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7249c935d52e79db2301a6cccfd28dff9bf38e/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=5a7249c935d52e79db2301a6cccfd28dff9bf38e", "patch": "@@ -3,7 +3,6 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n-import generic_os::getenv;\n import task::task;\n \n export test_name;"}]}