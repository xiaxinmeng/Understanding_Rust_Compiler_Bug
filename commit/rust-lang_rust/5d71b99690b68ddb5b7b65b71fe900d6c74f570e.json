{"sha": "5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzFiOTk2OTBiNjhkZGI1YjdiNjViNzFmZTkwMGQ2Yzc0ZjU3MGU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-11T08:34:13Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:54Z"}, "message": "Make QueryEngine opaque to TyCtxt.", "tree": {"sha": "a79840031f396ef96b313aa283827c5295fd34f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79840031f396ef96b313aa283827c5295fd34f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "html_url": "https://github.com/rust-lang/rust/commit/5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f868b1791587e6af77e3b42a3b941f7fef03bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f868b1791587e6af77e3b42a3b941f7fef03bcc", "html_url": "https://github.com/rust-lang/rust/commit/3f868b1791587e6af77e3b42a3b941f7fef03bcc"}], "stats": {"total": 162, "additions": 99, "deletions": 63}, "files": [{"sha": "ba76b310b2ba387f31c929b96d074396fe6aaa55", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -3890,6 +3890,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_hir\",\n  \"rustc_incremental\",\n+ \"rustc_index\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_middle\","}, {"sha": "210ba32bc1dd751fa27445494feeffaa06b52a11", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -30,6 +30,7 @@ rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }\n rustc_codegen_llvm = { path = \"../rustc_codegen_llvm\", optional = true }\n rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n rustc_mir = { path = \"../rustc_mir\" }\n rustc_mir_build = { path = \"../rustc_mir_build\" }"}, {"sha": "76d988815ffe475433a8d79adc6171835f998f91", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -15,11 +15,13 @@ use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n+use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n+use rustc_middle::ty::query;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n@@ -738,20 +740,18 @@ pub static DEFAULT_EXTERN_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|\n     extern_providers\n });\n \n-pub struct QueryContext<'tcx>(&'tcx GlobalCtxt<'tcx>);\n+pub struct QueryContext<'tcx> {\n+    gcx: &'tcx GlobalCtxt<'tcx>,\n+}\n \n impl<'tcx> QueryContext<'tcx> {\n     pub fn enter<F, R>(&mut self, f: F) -> R\n     where\n         F: FnOnce(TyCtxt<'tcx>) -> R,\n     {\n-        let icx = ty::tls::ImplicitCtxt::new(self.0);\n+        let icx = ty::tls::ImplicitCtxt::new(self.gcx);\n         ty::tls::enter_context(&icx, |_| f(icx.tcx))\n     }\n-\n-    pub fn print_stats(&mut self) {\n-        self.enter(ty::query::print_stats)\n-    }\n }\n \n pub fn create_global_ctxt<'tcx>(\n@@ -762,6 +762,7 @@ pub fn create_global_ctxt<'tcx>(\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n+    queries: &'tcx OnceCell<query::Queries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n@@ -785,26 +786,33 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n+    let queries = {\n+        let crates = resolver_outputs.cstore.crates_untracked();\n+        let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n+        let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n+        providers[LOCAL_CRATE] = local_providers;\n+        queries.get_or_init(|| query::Queries::new(providers, extern_providers))\n+    };\n+\n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(|| {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n-                local_providers,\n-                extern_providers,\n                 arena,\n                 resolver_outputs,\n                 krate,\n                 defs,\n                 dep_graph,\n                 query_result_on_disk_cache,\n+                queries,\n                 &crate_name,\n                 &outputs,\n             )\n         })\n     });\n \n-    QueryContext(gcx)\n+    QueryContext { gcx }\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "86d78d7e9ca3a77004d19a3d880a0df1fd13a626", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -13,6 +13,7 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n+use rustc_middle::ty::query;\n use rustc_middle::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_serialize::json;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n@@ -71,6 +72,7 @@ impl<T> Default for Query<T> {\n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n     gcx: OnceCell<GlobalCtxt<'tcx>>,\n+    queries: OnceCell<query::Queries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n     hir_arena: WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n@@ -92,6 +94,7 @@ impl<'tcx> Queries<'tcx> {\n         Queries {\n             compiler,\n             gcx: OnceCell::new(),\n+            queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_ast_lowering::Arena::default()),\n             dep_graph_future: Default::default(),\n@@ -265,6 +268,7 @@ impl<'tcx> Queries<'tcx> {\n                 resolver_outputs.steal(),\n                 outputs,\n                 &crate_name,\n+                &self.queries,\n                 &self.gcx,\n                 &self.arena,\n             ))\n@@ -429,7 +433,7 @@ impl Compiler {\n             }\n \n             if self.session().opts.debugging_opts.query_stats {\n-                gcx.print_stats();\n+                gcx.enter(query::print_stats);\n             }\n         }\n "}, {"sha": "e387020d82839bd39862d0fa22645adc2bc07f3c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -354,10 +354,9 @@ fn add_query_description_impl(\n             quote! {\n                 #[inline]\n                 fn try_load_from_disk(\n-                    tcx: QueryCtxt<'tcx>,\n-                    id: SerializedDepNodeIndex\n+                    #tcx: QueryCtxt<'tcx>,\n+                    #id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n-                    let (#tcx, #id) = (*tcx, id);\n                     #block\n                 }\n             }\n@@ -394,11 +393,10 @@ fn add_query_description_impl(\n             #[inline]\n             #[allow(unused_variables, unused_braces)]\n             fn cache_on_disk(\n-                tcx: QueryCtxt<'tcx>,\n-                key: &Self::Key,\n-                value: Option<&Self::Value>\n+                #tcx: QueryCtxt<'tcx>,\n+                #key: &Self::Key,\n+                #value: Option<&Self::Value>\n             ) -> bool {\n-                let (#tcx, #key, #value) = (*tcx, key, value);\n                 #expr\n             }\n "}, {"sha": "94a17f4645ac3b30993e159930c3ebcd70465075", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -262,7 +262,7 @@ pub mod dep_kind {\n \n                     if let Some(key) = recover(tcx, dep_node) {\n                         force_query::<queries::$variant<'_>, _>(\n-                            QueryCtxt(tcx),\n+                            QueryCtxt { tcx, queries: tcx.queries },\n                             key,\n                             DUMMY_SP,\n                             *dep_node\n@@ -288,7 +288,8 @@ pub mod dep_kind {\n                                      .unwrap_or(false));\n \n                     let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    if queries::$variant::cache_on_disk(QueryCtxt(tcx), &key, None) {\n+                    let qcx = QueryCtxt { tcx, queries: tcx.queries };\n+                    if queries::$variant::cache_on_disk(qcx, &key, None) {\n                         let _ = tcx.$variant(key);\n                     }\n                 }"}, {"sha": "343ae66c07a23c31fea0a456e9832ded6bf5f727", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -699,7 +699,7 @@ rustc_queries! {\n         load_cached(tcx, id) {\n             let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n                 .on_disk_cache.as_ref()\n-                .and_then(|c| c.try_load_query_result(tcx, id));\n+                .and_then(|c| c.try_load_query_result(*tcx, id));\n \n             typeck_results.map(|x| &*tcx.arena.alloc(x))\n         }"}, {"sha": "ec680eeb30f0676721b93872bfe2c6cc1fd227cf", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -14,7 +14,7 @@ use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::traits;\n-use crate::ty::query::{self, OnDiskCache, TyCtxtAt};\n+use crate::ty::query::{self, OnDiskCache, Queries, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n use crate::ty::{\n@@ -968,7 +968,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// This is `None` if we are not incremental compilation mode\n     pub(crate) on_disk_cache: Option<OnDiskCache<'tcx>>,\n \n-    pub queries: query::Queries<'tcx>,\n+    pub queries: &'tcx query::Queries<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,\n \n     maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n@@ -1109,14 +1109,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n-        local_providers: ty::query::Providers,\n-        extern_providers: ty::query::Providers,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         krate: &'tcx hir::Crate<'tcx>,\n         definitions: &'tcx Definitions,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<query::OnDiskCache<'tcx>>,\n+        queries: &'tcx Queries<'tcx>,\n         crate_name: &str,\n         output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n@@ -1128,10 +1127,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n         let cstore = resolutions.cstore;\n-        let crates = cstore.crates_untracked();\n-        let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n-        let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n-        providers[LOCAL_CRATE] = local_providers;\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (hir_id, v) in krate.trait_map.iter() {\n@@ -1161,7 +1156,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             untracked_crate: krate,\n             definitions,\n             on_disk_cache,\n-            queries: query::Queries::new(providers, extern_providers),\n+            queries,\n             query_caches: query::QueryCaches::default(),\n             ty_rcache: Default::default(),\n             pred_rcache: Default::default(),"}, {"sha": "668109693a8b4fd10c342804df5145eb7d3cceae", "filename": "compiler/rustc_middle/src/ty/query/job.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -1,7 +1,4 @@\n-use crate::ty::query::QueryCtxt;\n use crate::ty::tls;\n-\n-use rustc_query_system::query::deadlock;\n use rustc_rayon_core as rayon_core;\n use std::thread;\n \n@@ -21,7 +18,7 @@ pub unsafe fn handle_deadlock() {\n     thread::spawn(move || {\n         tls::enter_context(icx, |_| {\n             rustc_span::SESSION_GLOBALS\n-                .set(session_globals, || tls::with(|tcx| deadlock(QueryCtxt(tcx), &registry)))\n+                .set(session_globals, || tls::with(|tcx| tcx.queries.deadlock(tcx, &registry)))\n         });\n     });\n }"}, {"sha": "4c0b5846741d7019669f8f33c36641e841e1bd4c", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -44,6 +44,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n+use rustc_serialize::opaque;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::CrateDisambiguator;"}, {"sha": "db3449ed2e2aff81c62ec12f123b7d39b925ed8f", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -133,15 +133,15 @@ struct Footer {\n     foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n }\n \n-type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n+pub type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n type EncodedDiagnosticsIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n type EncodedDiagnostics = Vec<Diagnostic>;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Encodable, Decodable)]\n struct SourceFileIndex(u32);\n \n #[derive(Copy, Clone, Debug, Hash, Eq, PartialEq, Encodable, Decodable)]\n-struct AbsoluteBytePos(u32);\n+pub struct AbsoluteBytePos(u32);\n \n impl AbsoluteBytePos {\n     fn new(pos: usize) -> AbsoluteBytePos {\n@@ -308,22 +308,7 @@ impl<'sess> OnDiskCache<'sess> {\n             tcx.sess.time(\"encode_query_results\", || -> FileEncodeResult {\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n-\n-                macro_rules! encode_queries {\n-                    ($($query:ident,)*) => {\n-                        $(\n-                            encode_query_results::<ty::query::queries::$query<'_>>(\n-                                QueryCtxt(tcx),\n-                                enc,\n-                                qri\n-                            )?;\n-                        )*\n-                    }\n-                }\n-\n-                rustc_cached_queries!(encode_queries!);\n-\n-                Ok(())\n+                tcx.queries.encode_query_results(tcx, enc, qri)\n             })?;\n \n             // Encode diagnostics.\n@@ -973,7 +958,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [Span] {\n \n //- ENCODING -------------------------------------------------------------------\n \n-trait OpaqueEncoder: Encoder {\n+pub trait OpaqueEncoder: Encoder {\n     fn position(&self) -> usize;\n }\n \n@@ -985,7 +970,7 @@ impl OpaqueEncoder for FileEncoder {\n }\n \n /// An encoder that can write to the incremental compilation cache.\n-struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n+pub struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     tcx: TyCtxt<'tcx>,\n     encoder: &'a mut E,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -1230,7 +1215,7 @@ impl<'a> Decodable<opaque::Decoder<'a>> for IntEncodedWithFixedSize {\n     }\n }\n \n-fn encode_query_results<'a, 'tcx, Q>(\n+pub fn encode_query_results<'a, 'tcx, Q>(\n     tcx: QueryCtxt<'tcx>,\n     encoder: &mut CacheEncoder<'a, 'tcx, FileEncoder>,\n     query_result_index: &mut EncodedQueryResultIndex,"}, {"sha": "1d4be7700059f2e3ad17569c69c0cca801daf023", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d71b99690b68ddb5b7b65b71fe900d6c74f570e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "patch": "@@ -2,7 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::ty::query::Query;\n+use crate::ty::query::{on_disk_cache, Query};\n use crate::ty::tls::{self, ImplicitCtxt};\n use crate::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n@@ -13,17 +13,21 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n+use rustc_serialize::opaque;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n #[derive(Copy, Clone)]\n-pub struct QueryCtxt<'tcx>(pub TyCtxt<'tcx>);\n+pub struct QueryCtxt<'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+    pub queries: &'tcx super::Queries<'tcx>,\n+}\n \n impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n     type Target = TyCtxt<'tcx>;\n \n     fn deref(&self) -> &Self::Target {\n-        &self.0\n+        &self.tcx\n     }\n }\n \n@@ -34,7 +38,7 @@ impl HasDepContext for QueryCtxt<'tcx> {\n \n     #[inline]\n     fn dep_context(&self) -> &Self::DepContext {\n-        &self.0\n+        &self.tcx\n     }\n }\n \n@@ -49,7 +53,7 @@ impl QueryContext for QueryCtxt<'tcx> {\n     }\n \n     fn def_path_str(&self, def_id: DefId) -> String {\n-        self.0.def_path_str(def_id)\n+        self.tcx.def_path_str(def_id)\n     }\n \n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>> {\n@@ -142,6 +146,28 @@ impl<'tcx> QueryCtxt<'tcx> {\n             err\n         })\n     }\n+\n+    pub(super) fn encode_query_results(\n+        self,\n+        encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n+        query_result_index: &mut on_disk_cache::EncodedQueryResultIndex,\n+    ) -> opaque::FileEncodeResult {\n+        macro_rules! encode_queries {\n+            ($($query:ident,)*) => {\n+                $(\n+                    on_disk_cache::encode_query_results::<ty::query::queries::$query<'_>>(\n+                        self,\n+                        encoder,\n+                        query_result_index\n+                    )?;\n+                )*\n+            }\n+        }\n+\n+        rustc_cached_queries!(encode_queries!);\n+\n+        Ok(())\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -174,7 +200,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                             \"#{} [{}] {}\",\n                             i,\n                             query_info.info.query.name(),\n-                            query_info.info.query.describe(QueryCtxt(icx.tcx))\n+                            query_info\n+                                .info\n+                                .query\n+                                .describe(QueryCtxt { tcx: icx.tcx, queries: icx.tcx.queries })\n                         ),\n                     );\n                     diag.span =\n@@ -570,7 +599,7 @@ macro_rules! define_queries_struct {\n         }\n \n         impl<$tcx> Queries<$tcx> {\n-            pub(crate) fn new(\n+            pub fn new(\n                 providers: IndexVec<CrateNum, Providers>,\n                 fallback_extern_providers: Providers,\n             ) -> Self {\n@@ -597,17 +626,33 @@ macro_rules! define_queries_struct {\n                 Some(jobs)\n             }\n \n+            #[cfg(parallel_compiler)]\n+            unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry) {\n+                let tcx = QueryCtxt { tcx, queries: self };\n+                rustc_query_system::query::deadlock(tcx, registry)\n+            }\n+\n+            pub(crate) fn encode_query_results(\n+                &'tcx self,\n+                tcx: TyCtxt<'tcx>,\n+                encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n+                query_result_index: &mut on_disk_cache::EncodedQueryResultIndex,\n+            ) -> opaque::FileEncodeResult {\n+                let tcx = QueryCtxt { tcx, queries: self };\n+                tcx.encode_query_results(encoder, query_result_index)\n+            }\n+\n             $($(#[$attr])*\n             #[inline(always)]\n             fn $name(\n-                &self,\n+                &'tcx self,\n                 tcx: TyCtxt<$tcx>,\n                 span: Span,\n                 key: query_keys::$name<$tcx>,\n                 lookup: QueryLookup,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<$tcx>> {\n-                let qcx = QueryCtxt(tcx);\n+                let qcx = QueryCtxt { tcx, queries: self };\n                 get_query::<queries::$name<$tcx>, _>(qcx, span, key, lookup, mode)\n             })*\n         }"}]}