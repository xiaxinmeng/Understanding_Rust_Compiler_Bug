{"sha": "d9f237caa6a90fd6581124a3627af55e9c2a0f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZjIzN2NhYTZhOTBmZDY1ODExMjRhMzYyN2FmNTVlOWMyYTBmMjI=", "commit": {"author": {"name": "Gus Caplan", "email": "me@gus.host", "date": "2020-11-02T20:59:45Z"}, "committer": {"name": "Gus Caplan", "email": "me@gus.host", "date": "2020-12-01T18:18:21Z"}, "message": "Add wasm32 support to inline asm", "tree": {"sha": "6e30789de9d739fb7387b88ebc093a6c764253e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e30789de9d739fb7387b88ebc093a6c764253e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9f237caa6a90fd6581124a3627af55e9c2a0f22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEXSkNpnBNseeWrjXy8AvRGIDoLw4FAl/GiO0ACgkQ8AvRGIDo\nLw6z4ggAmt8vbV+eUgH8yJ/tGe9sJ3PzWS+T5I9VxUS4gaka7uHKLPyVRe9Hpx6u\nJBiY7IVyNwerWOSN0QGxRTGVQvShBjjlzD9cadt9u5eG+dvRFCtgXy5u9LKN4ul+\ndRGK5CSSD6+mCCFniYUOPuttPKlbtVvh5TydSpLXWTvLTVGvtSXs+j10KzRQNG3v\npdyPqP+Mt+KKqZjJCkGKEqVP6CE0//uVnjo4uY3CosI/ats5rG0qXrIkI2V+Z0Xv\nqJzaHBDnQ+3npHCNHJbdfhB3yaW5D4vWR76ppBpnUL/MBq95GQuZpepGY2FM2mDb\nScDn/3KwuWTyTNCZwxfjU3NsMGNy1A==\n=67AX\n-----END PGP SIGNATURE-----", "payload": "tree 6e30789de9d739fb7387b88ebc093a6c764253e0\nparent 8a929386588be941659f4b6f454d200253b2eadc\nauthor Gus Caplan <me@gus.host> 1604350785 -0600\ncommitter Gus Caplan <me@gus.host> 1606846701 -0600\n\nAdd wasm32 support to inline asm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f237caa6a90fd6581124a3627af55e9c2a0f22", "html_url": "https://github.com/rust-lang/rust/commit/d9f237caa6a90fd6581124a3627af55e9c2a0f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9f237caa6a90fd6581124a3627af55e9c2a0f22/comments", "author": {"login": "devsnek", "id": 5952481, "node_id": "MDQ6VXNlcjU5NTI0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5952481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsnek", "html_url": "https://github.com/devsnek", "followers_url": "https://api.github.com/users/devsnek/followers", "following_url": "https://api.github.com/users/devsnek/following{/other_user}", "gists_url": "https://api.github.com/users/devsnek/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsnek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsnek/subscriptions", "organizations_url": "https://api.github.com/users/devsnek/orgs", "repos_url": "https://api.github.com/users/devsnek/repos", "events_url": "https://api.github.com/users/devsnek/events{/privacy}", "received_events_url": "https://api.github.com/users/devsnek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devsnek", "id": 5952481, "node_id": "MDQ6VXNlcjU5NTI0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5952481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsnek", "html_url": "https://github.com/devsnek", "followers_url": "https://api.github.com/users/devsnek/followers", "following_url": "https://api.github.com/users/devsnek/following{/other_user}", "gists_url": "https://api.github.com/users/devsnek/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsnek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsnek/subscriptions", "organizations_url": "https://api.github.com/users/devsnek/orgs", "repos_url": "https://api.github.com/users/devsnek/repos", "events_url": "https://api.github.com/users/devsnek/events{/privacy}", "received_events_url": "https://api.github.com/users/devsnek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a929386588be941659f4b6f454d200253b2eadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a929386588be941659f4b6f454d200253b2eadc", "html_url": "https://github.com/rust-lang/rust/commit/8a929386588be941659f4b6f454d200253b2eadc"}], "stats": {"total": 233, "additions": 230, "deletions": 3}, "files": [{"sha": "8801211d51bc35614e1df1505613fc10ad37c5ba", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -261,6 +261,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::SpirV => {}\n+                InlineAsmArch::Wasm32 => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -519,6 +520,7 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n+            InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n@@ -584,6 +586,7 @@ fn modifier_to_llvm(\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n+        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n@@ -626,6 +629,7 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n+        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }"}, {"sha": "b2ffa271f62e2e335386daecde2d3dc1a27489b8", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -167,6 +167,7 @@ pub fn initialize_available_targets() {\n         LLVMInitializeWebAssemblyTargetInfo,\n         LLVMInitializeWebAssemblyTarget,\n         LLVMInitializeWebAssemblyTargetMC,\n-        LLVMInitializeWebAssemblyAsmPrinter\n+        LLVMInitializeWebAssemblyAsmPrinter,\n+        LLVMInitializeWebAssemblyAsmParser\n     );\n }"}, {"sha": "aff1ff92d31b23acf5403812c7b6d6f1e80f5d9a", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -156,6 +156,7 @@ mod mips;\n mod nvptx;\n mod riscv;\n mod spirv;\n+mod wasm;\n mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n@@ -165,6 +166,7 @@ pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n pub use spirv::{SpirVInlineAsmReg, SpirVInlineAsmRegClass};\n+pub use wasm::{WasmInlineAsmReg, WasmInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n \n #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash)]\n@@ -180,6 +182,7 @@ pub enum InlineAsmArch {\n     Mips,\n     Mips64,\n     SpirV,\n+    Wasm32,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -198,6 +201,7 @@ impl FromStr for InlineAsmArch {\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n             \"spirv\" => Ok(Self::SpirV),\n+            \"wasm32\" => Ok(Self::Wasm32),\n             _ => Err(()),\n         }\n     }\n@@ -213,6 +217,7 @@ pub enum InlineAsmReg {\n     Hexagon(HexagonInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n+    Wasm(WasmInlineAsmReg),\n }\n \n impl InlineAsmReg {\n@@ -272,6 +277,9 @@ impl InlineAsmReg {\n             InlineAsmArch::SpirV => {\n                 Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::Wasm32 => {\n+                Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n         })\n     }\n \n@@ -315,6 +323,7 @@ pub enum InlineAsmRegClass {\n     Hexagon(HexagonInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n+    Wasm(WasmInlineAsmRegClass),\n }\n \n impl InlineAsmRegClass {\n@@ -328,6 +337,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n+            Self::Wasm(r) => r.name(),\n         }\n     }\n \n@@ -344,6 +354,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n+            Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n         }\n     }\n \n@@ -367,6 +378,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n+            Self::Wasm(r) => r.suggest_modifier(arch, ty),\n         }\n     }\n \n@@ -386,6 +398,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n+            Self::Wasm(r) => r.default_modifier(arch),\n         }\n     }\n \n@@ -404,6 +417,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n+            Self::Wasm(r) => r.supported_types(arch),\n         }\n     }\n \n@@ -429,6 +443,7 @@ impl InlineAsmRegClass {\n                     Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n                 }\n                 InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n+                InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n             })\n         })\n     }\n@@ -445,6 +460,7 @@ impl InlineAsmRegClass {\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n+            Self::Wasm(r) => r.valid_modifiers(arch),\n         }\n     }\n }\n@@ -592,5 +608,10 @@ pub fn allocatable_registers(\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::Wasm32 => {\n+            let mut map = wasm::regclass_map();\n+            wasm::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "1b33f8f96326deedadf320aaee0dd6222c2ce17e", "filename": "compiler/rustc_target/src/asm/wasm.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -0,0 +1,46 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+\n+def_reg_class! {\n+    Wasm WasmInlineAsmRegClass {\n+        local,\n+    }\n+}\n+\n+impl WasmInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::local => {\n+                types! { _: I8, I16, I32, I64, F32, F64; }\n+            }\n+        }\n+    }\n+}\n+\n+def_regs! {\n+    // WebAssembly doesn't have registers.\n+    Wasm WasmInlineAsmReg WasmInlineAsmRegClass {}\n+}"}, {"sha": "ccdd86286996101e32484bcd878ff9f4e6929aff", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -28,6 +28,7 @@ Inline assembly is currently supported on the following architectures:\n - NVPTX\n - Hexagon\n - MIPS32r2 and MIPS64r2\n+- wasm32\n \n ## Basic usage\n \n@@ -521,6 +522,7 @@ Here is the list of currently supported register classes:\n | RISC-V | `reg` | `x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E) | `r` |\n | RISC-V | `freg` | `f[0-31]` | `f` |\n | Hexagon | `reg` | `r[0-28]` | `r` |\n+| wasm32 | `local` | None\\* | `r` |\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n@@ -529,6 +531,8 @@ Here is the list of currently supported register classes:\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >\n > Note #4: On ARM the frame pointer is either `r7` or `r11` depending on the platform.\n+>\n+> Note #5: WebAssembly doesn't have registers, so named registers are not supported.\n \n Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n \n@@ -562,6 +566,7 @@ Each register class has constraints on which value types they can be used with.\n | RISC-V | `freg` | `f` | `f32` |\n | RISC-V | `freg` | `d` | `f64` |\n | Hexagon | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n \n > **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n "}, {"sha": "94ca526222ae3d70de81b87d671f7e7cc4af2ba5", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -0,0 +1,150 @@\n+// no-system-llvm\n+// assembly-output: emit-asm\n+// compile-flags: --target wasm32-unknown-unknown\n+// compile-flags: --crate-type cdylib\n+// needs-llvm-components: webassembly\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: call extern_func\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static\n+// CHECK: #APP\n+// CHECK: i32.const 42\n+// CHECK: i32.store extern_static\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"\n+        i32.const 42\n+        i32.store {}\n+    \", sym extern_static);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $instr:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            let y;\n+            asm!(concat!(\"local.get {}\\n\", $instr, \"\\nlocal.set {}\"), in(local) x, out(local) y);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: i8_i32:\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i32.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i8_i32 i8 \"i32.clz\");\n+\n+// CHECK-LABEL: i16_i32:\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i32.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i16_i32 i16 \"i32.clz\");\n+\n+// CHECK-LABEL: i32_i32:\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i32.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i32_i32 i32 \"i32.clz\");\n+\n+// CHECK-LABEL: i8_i64\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i64.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i8_i64 i8 \"i64.clz\");\n+\n+// CHECK-LABEL: i16_i64\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i64.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i16_i64 i16 \"i64.clz\");\n+\n+// CHECK-LABEL: i32_i64\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i64.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i32_i64 i32 \"i64.clz\");\n+\n+// CHECK-LABEL: i64_i64\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i64.clz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i64_i64 i64 \"i64.clz\");\n+\n+// CHECK-LABEL: f32_f32\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: f32.abs\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(f32_f32 f32 \"f32.abs\");\n+\n+// CHECK-LABEL: f64_f64\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: f64.abs\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(f64_f64 f64 \"f64.abs\");\n+\n+// CHECK-LABEL: i32_ptr\n+// CHECK: #APP\n+// CHECK: local.get {{[0-9]}}\n+// CHECK: i32.eqz\n+// CHECK: local.set {{[0-9]}}\n+// CHECK: #NO_APP\n+check!(i32_ptr ptr \"i32.eqz\");"}, {"sha": "763b5fe5cca8b0a6e3d6c19414b2698e8741075f", "filename": "src/test/ui/asm/bad-arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f237caa6a90fd6581124a3627af55e9c2a0f22/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs?ref=d9f237caa6a90fd6581124a3627af55e9c2a0f22", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: --target wasm32-unknown-unknown\n-// needs-llvm-components: webassembly\n+// compile-flags: --target sparc-unknown-linux-gnu\n+// needs-llvm-components: sparc\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![no_core]"}]}