{"sha": "83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTJhYjQzNGNmMjAzMTNjOTI0OGZiYmU3ZTkwZjY1ZjI3ZDMxY2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T20:36:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T20:36:23Z"}, "message": "store file id inside symbol", "tree": {"sha": "21f03bf2c9aa69ae5e98544ac3ad58a6642e29ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f03bf2c9aa69ae5e98544ac3ad58a6642e29ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "html_url": "https://github.com/rust-lang/rust/commit/83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e2ab434cf20313c9248fbbe7e90f65f27d31ce/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e319ec7ed72d14486631934ff652d9fe4e5319", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e319ec7ed72d14486631934ff652d9fe4e5319", "html_url": "https://github.com/rust-lang/rust/commit/a5e319ec7ed72d14486631934ff652d9fe4e5319"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "01de3e1284bb9530de89f56bf967ba7dc0b39a8a", "filename": "crates/libanalysis/src/roots.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83e2ab434cf20313c9248fbbe7e90f65f27d31ce/crates%2Flibanalysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e2ab434cf20313c9248fbbe7e90f65f27d31ce/crates%2Flibanalysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Froots.rs?ref=83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "patch": "@@ -59,18 +59,18 @@ impl SourceRoot {\n             }\n         }\n     }\n-    pub(crate) fn symbols(&self) -> Vec<(FileId, &FileSymbols)> {\n+    pub(crate) fn symbols(&self) -> Vec<&FileSymbols> {\n         self.file_map\n             .iter()\n-            .map(|(&file_id, data)| (file_id, symbols(data)))\n+            .map(|(&file_id, data)| symbols(file_id, data))\n             .collect()\n     }\n     pub fn reindex(&self) {\n         let now = Instant::now();\n         self.file_map\n             .par_iter()\n-            .for_each(|(_, data)| {\n-                symbols(data);\n+            .for_each(|(&file_id, data)| {\n+                symbols(file_id, data);\n             });\n         info!(\"parallel indexing took {:?}\", now.elapsed());\n \n@@ -83,9 +83,9 @@ impl SourceRoot {\n     }\n }\n \n-fn symbols((data, symbols): &(FileData, OnceCell<FileSymbols>)) -> &FileSymbols {\n+fn symbols(file_id: FileId, (data, symbols): &(FileData, OnceCell<FileSymbols>)) -> &FileSymbols {\n     let syntax = data.syntax_transient();\n-    symbols.get_or_init(|| FileSymbols::new(&syntax))\n+    symbols.get_or_init(|| FileSymbols::new(file_id, &syntax))\n }\n \n #[derive(Debug)]\n@@ -108,3 +108,14 @@ impl FileData {\n             .unwrap_or_else(|| File::parse(&self.text))\n     }\n }\n+\n+// #[derive(Clone, Default, Debug)]\n+// pub(crate) struct ReadonlySourceRoot {\n+//     data: Arc<ReadonlySourceRoot>\n+// }\n+\n+// #[derive(Clone, Default, Debug)]\n+// pub(crate) struct ReadonlySourceRootInner {\n+//     file_map: HashMap<FileId, FileData>,\n+//     module_map: ModuleMap,\n+// }"}, {"sha": "54952cb9435c4c22a607f7e11f605d939c95466b", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83e2ab434cf20313c9248fbbe7e90f65f27d31ce/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e2ab434cf20313c9248fbbe7e90f65f27d31ce/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=83e2ab434cf20313c9248fbbe7e90f65f27d31ce", "patch": "@@ -8,21 +8,23 @@ use {Query, FileId, JobToken};\n \n #[derive(Debug)]\n pub(crate) struct FileSymbols {\n-    symbols: Vec<FileSymbol>,\n+    symbols: Vec<(FileId, FileSymbol)>,\n     map: fst::Map,\n }\n \n impl FileSymbols {\n-    pub(crate) fn new(file: &File) -> FileSymbols {\n+    pub(crate) fn new(file_id: FileId, file: &File) -> FileSymbols {\n         let mut symbols = file_symbols(file)\n             .into_iter()\n             .map(|s| (s.name.as_str().to_lowercase(), s))\n             .collect::<Vec<_>>();\n \n         symbols.sort_by(|s1, s2| s1.0.cmp(&s2.0));\n         symbols.dedup_by(|s1, s2| s1.0 == s2.0);\n-        let (names, symbols): (Vec<String>, Vec<FileSymbol>) =\n-            symbols.into_iter().unzip();\n+        let (names, symbols): (Vec<String>, Vec<(FileId, FileSymbol)>) =\n+            symbols.into_iter()\n+                .map(|(name, symbol)| (name, (file_id, symbol)))\n+                .unzip();\n \n         let map = fst::Map::from_iter(\n             names.into_iter().zip(0u64..)\n@@ -34,12 +36,12 @@ impl FileSymbols {\n impl Query {\n     pub(crate) fn search(\n         mut self,\n-        indices: &[(FileId, &FileSymbols)],\n+        indices: &[&FileSymbols],\n         token: &JobToken,\n     ) -> Vec<(FileId, FileSymbol)> {\n \n         let mut op = fst::map::OpBuilder::new();\n-        for (_, file_symbols) in indices.iter() {\n+        for file_symbols in indices.iter() {\n             let automaton = fst::automaton::Subsequence::new(&self.lowercased);\n             op = op.add(file_symbols.map.search(automaton))\n         }\n@@ -50,10 +52,10 @@ impl Query {\n                 break;\n             }\n             for indexed_value in indexed_values {\n-                let (file_id, file_symbols) = &indices[indexed_value.index];\n+                let file_symbols = &indices[indexed_value.index];\n                 let idx = indexed_value.value as usize;\n \n-                let symbol = &file_symbols.symbols[idx];\n+                let (file_id, symbol) = &file_symbols.symbols[idx];\n                 if self.only_types && !is_type(symbol.kind) {\n                     continue;\n                 }"}]}