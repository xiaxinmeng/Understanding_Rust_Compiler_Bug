{"sha": "788181d4055747b5307f186a873ab5d2acd29994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODE4MWQ0MDU1NzQ3YjUzMDdmMTg2YTg3M2FiNWQyYWNkMjk5OTQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-28T13:34:18Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-29T12:49:02Z"}, "message": "s/Show/Debug/g", "tree": {"sha": "9b96bbdba0acfccaa447f312c07381425776ca80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b96bbdba0acfccaa447f312c07381425776ca80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788181d4055747b5307f186a873ab5d2acd29994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788181d4055747b5307f186a873ab5d2acd29994", "html_url": "https://github.com/rust-lang/rust/commit/788181d4055747b5307f186a873ab5d2acd29994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788181d4055747b5307f186a873ab5d2acd29994/comments", "author": null, "committer": null, "parents": [{"sha": "09ba9f5c87a24f82d9a332fdb913511eedf5a4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ba9f5c87a24f82d9a332fdb913511eedf5a4ec", "html_url": "https://github.com/rust-lang/rust/commit/09ba9f5c87a24f82d9a332fdb913511eedf5a4ec"}], "stats": {"total": 1154, "additions": 577, "deletions": 577}, "files": [{"sha": "40d4397916d3f2d38f53142ec778ff895ce6e704", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -17,7 +17,7 @@ pub struct ExpectedError {\n     pub msg: String,\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum WhichLine { ThisLine, FollowPrevious(uint), AdjustBackward(uint) }\n \n /// Looks for either \"//~| KIND MESSAGE\" or \"//~^^... KIND MESSAGE\""}, {"sha": "68b36e7a4b7ca225573b1accd19cf31c2534cc91", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -147,10 +147,10 @@ for all but the most trivial of situations.\n Here's an example of using `Result`:\n \n ```rust\n-#[derive(Show)]\n+#[derive(Debug)]\n enum Version { Version1, Version2 }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum ParseError { InvalidHeaderLength, InvalidVersion }\n \n fn parse_version(header: &[u8]) -> Result<Version, ParseError> {"}, {"sha": "9c649cd2273f8025117dd58f9f9eedf6f2b8e75d", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -605,7 +605,7 @@ Sometimes, you need a recursive data structure. The simplest is known as a\n \n \n ```{rust}\n-#[derive(Show)]\n+#[derive(Debug)]\n enum List<T> {\n     Cons(T, Box<List<T>>),\n     Nil,"}, {"sha": "f9f6de2df58768c45b83d50db4dd0fc8e06b3ccc", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -814,6 +814,6 @@ mod tests {\n     }\n \n     // Make sure deriving works with Arc<T>\n-    #[derive(Eq, Ord, PartialEq, PartialOrd, Clone, Show, Default)]\n+    #[derive(Eq, Ord, PartialEq, PartialOrd, Clone, Debug, Default)]\n     struct Foo { inner: Arc<int> }\n }"}, {"sha": "91577e30d9a01313a7f47cc971a44f96aa7c96bb", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -29,7 +29,7 @@\n //! Creating a recursive data structure:\n //!\n //! ```\n-//! #[derive(Show)]\n+//! #[derive(Debug)]\n //! enum List<T> {\n //!     Cons(T, Box<List<T>>),\n //!     Nil,"}, {"sha": "b542259eba0dddd7efe1cb1e1da51a69cee34f13", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -272,7 +272,7 @@ mod test {\n \n     use super::{EnumSet, CLike};\n \n-    #[derive(Copy, PartialEq, Show)]\n+    #[derive(Copy, PartialEq, Debug)]\n     #[repr(uint)]\n     enum Foo {\n         A, B, C"}, {"sha": "34910f59fe03677231db083b1bb74d314e8d022b", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1852,21 +1852,21 @@ mod tests {\n         })\n     }\n \n-    #[derive(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Debug)]\n     enum Taggy {\n         One(int),\n         Two(int, int),\n         Three(int, int, int),\n     }\n \n-    #[derive(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Debug)]\n     enum Taggypar<T> {\n         Onepar(int),\n         Twopar(int, int),\n         Threepar(int, int, int),\n     }\n \n-    #[derive(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Debug)]\n     struct RecCy {\n         x: int,\n         y: int,"}, {"sha": "8f7920fe1c44bcd2207400678d7c44c5371499cc", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -41,7 +41,7 @@ pub struct String {\n \n /// A possible error value from the `String::from_utf8` function.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct FromUtf8Error {\n     bytes: Vec<u8>,\n     error: Utf8Error,\n@@ -50,7 +50,7 @@ pub struct FromUtf8Error {\n /// A possible error value from the `String::from_utf16` function.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(missing_copy_implementations)]\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct FromUtf16Error(());\n \n impl String {"}, {"sha": "336a3d7521a195eea6e3fd4a8bf6854bf8949206", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -811,7 +811,7 @@ impl<T> Vec<T> {\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(w.as_slice(), [3, 4, 5].as_slice());\n     ///\n-    /// #[derive(PartialEq, Show)]\n+    /// #[derive(PartialEq, Debug)]\n     /// struct Newtype(u8);\n     /// let bytes = vec![0x11, 0x22];\n     /// let newtyped_bytes = bytes.map_in_place(|x| Newtype(x));\n@@ -2279,7 +2279,7 @@ mod tests {\n     #[test]\n     fn test_map_in_place_zero_sized() {\n         let v = vec![(), ()];\n-        #[derive(PartialEq, Show)]\n+        #[derive(PartialEq, Debug)]\n         struct ZeroSized;\n         assert_eq!(v.map_in_place(|_| ZeroSized), [ZeroSized, ZeroSized]);\n     }\n@@ -2288,11 +2288,11 @@ mod tests {\n     fn test_map_in_place_zero_drop_count() {\n         use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n \n-        #[derive(Clone, PartialEq, Show)]\n+        #[derive(Clone, PartialEq, Debug)]\n         struct Nothing;\n         impl Drop for Nothing { fn drop(&mut self) { } }\n \n-        #[derive(Clone, PartialEq, Show)]\n+        #[derive(Clone, PartialEq, Debug)]\n         struct ZeroSized;\n         impl Drop for ZeroSized {\n             fn drop(&mut self) {"}, {"sha": "40c2d82bf4b3f78f61027df746908917a03e464f", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -166,7 +166,7 @@ impl Any {\n ///\n /// A `TypeId` is currently only available for types which ascribe to `'static`,\n /// but this limitation may be removed in the future.\n-#[derive(Clone, Copy, PartialEq, Eq, Show, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {\n     t: u64,"}, {"sha": "1ebd2df5814d16ca0f660d4365125df6a28fab84", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -105,7 +105,7 @@ pub trait Eq: PartialEq<Self> {\n }\n \n /// An ordering is, e.g, a result of a comparison between two values.\n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Ordering {\n     /// An ordering where a compared value is less [than another]."}, {"sha": "8b7a4c677ac753426189ea66ea1790ed0d6e662c", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -48,7 +48,7 @@ pub type Result = result::Result<(), Error>;\n /// some other means.\n #[unstable(feature = \"core\",\n            reason = \"core and I/O reconciliation may alter this definition\")]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream."}, {"sha": "b6b2f9c57fe7b77a26dd071e2c4c8c8a2ae1138a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1224,7 +1224,7 @@ impl_multiplicative! { f32,  1.0 }\n impl_multiplicative! { f64,  1.0 }\n \n /// `MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail.\n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n #[unstable(feature = \"core\",\n            reason = \"unclear whether such a fine-grained result is widely useful\")]\n pub enum MinMaxResult<T> {"}, {"sha": "299cdbda3cc7481a3087d625cb807fb0eef4e212", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -50,7 +50,7 @@ pub trait Sized {\n /// words:\n ///\n /// ```\n-/// #[derive(Show)]\n+/// #[derive(Debug)]\n /// struct Foo;\n ///\n /// let x = Foo;\n@@ -66,7 +66,7 @@ pub trait Sized {\n ///\n /// ```\n /// // we can just derive a `Copy` implementation\n-/// #[derive(Show, Copy)]\n+/// #[derive(Debug, Copy)]\n /// struct Foo;\n ///\n /// let x = Foo;"}, {"sha": "9ccea3b0739389b42a5d9c5e5fa17eec91a7f5b9", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -31,7 +31,7 @@ unsafe impl Zeroable for u64 {}\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang=\"non_zero\"]\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show, Hash)]\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n #[unstable(feature = \"core\")]\n pub struct NonZero<T: Zeroable>(T);\n "}, {"sha": "dd9cc553c7c8f34b6a80aff46537fbf2956d89a2", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1241,7 +1241,7 @@ impl_num_cast! { f32,   to_f32 }\n impl_num_cast! { f64,   to_f64 }\n \n /// Used for representing the classification of floating point numbers\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n #[unstable(feature = \"core\", reason = \"may be renamed\")]\n pub enum FpCategory {\n     /// \"Not a Number\", often obtained by dividing by zero"}, {"sha": "55ff3eb4d062d8bc7be2967c379931343591c5ff", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -35,7 +35,7 @@\n //! ```rust\n //! use std::ops::{Add, Sub};\n //!\n-//! #[derive(Show)]\n+//! #[derive(Debug)]\n //! struct Point {\n //!     x: int,\n //!     y: int"}, {"sha": "5cb8e5e556523cfa82d50375aa0edac1d94122ab", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -163,7 +163,7 @@ use slice;\n // which basically means it must be `Option`.\n \n /// The `Option` type.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value"}, {"sha": "92a7465038bb105387ee43921eb85e0676f3a06d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -30,7 +30,7 @@\n //! defined and used like so:\n //!\n //! ```\n-//! #[derive(Show)]\n+//! #[derive(Debug)]\n //! enum Version { Version1, Version2 }\n //!\n //! fn parse_version(header: &[u8]) -> Result<Version, &'static str> {\n@@ -239,7 +239,7 @@ use slice;\n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {"}, {"sha": "0058971faf0796d45727470afdac4e56a734947a", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -38,7 +38,7 @@\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n@@ -47,26 +47,26 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n@@ -75,31 +75,31 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);"}, {"sha": "228519656446c5917ffa6c65c26b3905bac338d0", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -144,7 +144,7 @@ Section: Creating a string\n */\n \n /// Errors which can occur when attempting to interpret a byte slice as a `str`.\n-#[derive(Copy, Eq, PartialEq, Clone, Show)]\n+#[derive(Copy, Eq, PartialEq, Clone, Debug)]\n #[unstable(feature = \"core\",\n            reason = \"error enumeration recently added and definitions may be refined\")]\n pub enum Utf8Error {"}, {"sha": "7c71c733662e8e0bedcb8a1650deb509c7d3572e", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@ use core::any::*;\n use test::Bencher;\n use test;\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Test;\n \n static TEST: &'static str = \"Test\";"}, {"sha": "7b86dab8a7cfd808a21f1b7205c5678b917bad9d", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -111,7 +111,7 @@ use std::iter::repeat;\n use std::result;\n \n /// Name of an option. Either a string or a single char.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Name {\n     /// A string representing the long name of an option.\n     /// For example: \"help\"\n@@ -122,7 +122,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[derive(Clone, Copy, PartialEq, Eq, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -133,7 +133,7 @@ pub enum HasArg {\n }\n \n /// Describes how often an option may occur.\n-#[derive(Clone, Copy, PartialEq, Eq, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -144,7 +144,7 @@ pub enum Occur {\n }\n \n /// A description of a possible option.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Opt {\n     /// Name of the option\n     pub name: Name,\n@@ -158,7 +158,7 @@ pub struct Opt {\n \n /// One group of options, e.g., both `-h` and `--help`, along with\n /// their shared description and properties.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct OptGroup {\n     /// Short name of the option, e.g. `h` for a `-h` option\n     pub short_name: String,\n@@ -175,15 +175,15 @@ pub struct OptGroup {\n }\n \n /// Describes whether an option is given at all or has a value.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n enum Optval {\n     Val(String),\n     Given,\n }\n \n /// The result of checking command line arguments. Contains a vector\n /// of matches and a vector of free strings.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Matches {\n     /// Options that matched\n     opts: Vec<Opt>,\n@@ -196,7 +196,7 @@ pub struct Matches {\n /// The type returned when the command line does not conform to the\n /// expected format. Use the `Show` implementation to output detailed\n /// information.\n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Fail {\n     /// The option requires an argument but none was passed.\n     ArgumentMissing(String),\n@@ -211,7 +211,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[derive(Copy, PartialEq, Eq, Show)]\n+#[derive(Copy, PartialEq, Eq, Debug)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,"}, {"sha": "21d5cd3d516ab11fae9e6e30075e16d012ed4011", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -523,7 +523,7 @@ pub trait GraphWalk<'a, N, E> {\n     fn target(&'a self, edge: &E) -> N;\n }\n \n-#[derive(Copy, PartialEq, Eq, Show)]\n+#[derive(Copy, PartialEq, Eq, Debug)]\n pub enum RenderOption {\n     NoEdgeLabels,\n     NoNodeLabels,"}, {"sha": "edd93358bfa4d35d176edb3f8ae1e3ee1ce328ea", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n use std::ascii::AsciiExt;\n use std::cmp;\n \n-#[derive(Show, Clone)]\n+#[derive(Debug, Clone)]\n pub struct LogDirective {\n     pub name: Option<String>,\n     pub level: u32,"}, {"sha": "0e2ab008e1344e7d36aa870cddbd0d2755929a79", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -243,7 +243,7 @@ struct DefaultLogger {\n }\n \n /// Wraps the log level with fmt implementations.\n-#[derive(Copy, PartialEq, PartialOrd, Show)]\n+#[derive(Copy, PartialEq, PartialOrd, Debug)]\n pub struct LogLevel(pub u32);\n \n impl fmt::Display for LogLevel {\n@@ -330,7 +330,7 @@ pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> {\n \n /// A LogRecord is created by the logging macros, and passed as the only\n /// argument to Loggers.\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct LogRecord<'a> {\n \n     /// The module path of where the LogRecord originated."}, {"sha": "8d87a8e5f0ec0e3fe4bbabc5d99aadfa15fb6fd0", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -263,7 +263,7 @@ mod tests {\n     use {Rng, Rand};\n     use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n \n-    #[derive(PartialEq, Show)]\n+    #[derive(PartialEq, Debug)]\n     struct ConstRand(uint);\n     impl Rand for ConstRand {\n         fn rand<R: Rng>(_: &mut R) -> ConstRand {"}, {"sha": "f7fd8889fae59028227982a135aae70985211c1a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -77,7 +77,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum EbmlEncoderTag {\n     EsUint,     // 0\n     EsU64,      // 1\n@@ -111,7 +111,7 @@ pub enum EbmlEncoderTag {\n     EsLabel, // Used only when debugging\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),"}, {"sha": "5dc23d27ee11bb94d6488dc527b4e4f561b771ac", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -40,7 +40,7 @@ use syntax::ast;\n pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_attrs};\n \n /// Specification of a single lint.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///\n@@ -207,7 +207,7 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid\n }"}, {"sha": "aa2be7153ad456cf2b86468792c7077bb7bd88cd", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -219,7 +219,7 @@ pub const tag_items_data_item_stability: uint = 0x92;\n \n pub const tag_items_data_item_repr: uint = 0x93;\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct LinkMeta {\n     pub crate_name: String,\n     pub crate_hash: Svh,"}, {"sha": "40242f5249347df93a6c62f359412da5930d6806", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -49,7 +49,7 @@ pub struct crate_metadata {\n     pub span: Span,\n }\n \n-#[derive(Copy, Show, PartialEq, Clone)]\n+#[derive(Copy, Debug, PartialEq, Clone)]\n pub enum LinkagePreference {\n     RequireDynamic,\n     RequireStatic,"}, {"sha": "b70c3ab0b8ce12bdef578f368ce30bb68f0d7477", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -493,7 +493,7 @@ pub fn get_symbol(data: &[u8], id: ast::NodeId) -> String {\n }\n \n // Something that a name can resolve to.\n-#[derive(Copy, Clone, Show)]\n+#[derive(Copy, Clone, Debug)]\n pub enum DefLike {\n     DlDef(def::Def),\n     DlImpl(ast::DefId),"}, {"sha": "943479ff35efa0001610eb85176795f023739159", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -43,7 +43,7 @@ use syntax::parse::token;\n // def-id will depend on where it originated from.  Therefore, the conversion\n // function is given an indicator of the source of the def-id.  See\n // astencode.rs for more information.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum DefIdSource {\n     // Identifies a struct, trait, enum, etc.\n     NominalType,"}, {"sha": "01d42523f3556d6be755185075bf50a61bd75fc9", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -28,7 +28,7 @@ use syntax::visit;\n use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum EntryOrExit {\n     Entry,\n     Exit,"}, {"sha": "7857bcad8135d8dc6628c80aaf7e792221a07d84", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -20,7 +20,7 @@ use syntax::ast_util::local_def;\n \n use std::cell::RefCell;\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance),\n@@ -72,13 +72,13 @@ pub struct Export {\n     pub def_id: ast::DefId, // The definition of the target.\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n     FromImpl(ast::DefId),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyParamProvenance {\n     FromSelf(ast::DefId),\n     FromParam(ast::DefId),"}, {"sha": "0d543ca7beb0cad0b75f40f343ba7768476cf8f5", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -95,7 +95,7 @@ pub trait Delegate<'tcx> {\n               mode: MutateMode);\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n@@ -107,28 +107,28 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum MatchMode {\n     NonBindingMatch,\n     BorrowingMatch,\n     CopyingMatch,\n     MovingMatch,\n }\n \n-#[derive(PartialEq,Show)]\n+#[derive(PartialEq,Debug)]\n enum TrackMatchMode<T> {\n     Unknown,\n     Definite(MatchMode),\n@@ -197,7 +197,7 @@ impl<T> TrackMatchMode<T> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum MutateMode {\n     Init,\n     JustWrite,    // x = y"}, {"sha": "aca4b3df453676f7794fff3222cbf8ed707f7d92", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -61,18 +61,18 @@ impl<E: Debug> Debug for Edge<E> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub struct NodeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub struct EdgeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct Direction { repr: uint }\n #[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };"}, {"sha": "cfcead51f7844a705dfcf304cfb879556644d700", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -95,7 +95,7 @@ pub type SkolemizationMap = FnvHashMap<ty::BoundRegion,ty::Region>;\n /// Why did we require that the two types be related?\n ///\n /// See `error_reporting.rs` for more details\n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum TypeOrigin {\n     // Not yet categorized in a better way\n     Misc(Span),\n@@ -133,7 +133,7 @@ pub enum TypeOrigin {\n }\n \n /// See `error_reporting.rs` for more details\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum ValuePairs<'tcx> {\n     Types(ty::expected_found<Ty<'tcx>>),\n     TraitRefs(ty::expected_found<Rc<ty::TraitRef<'tcx>>>),\n@@ -144,7 +144,7 @@ pub enum ValuePairs<'tcx> {\n /// encounter an error or subtyping constraint.\n ///\n /// See `error_reporting.rs` for more details.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct TypeTrace<'tcx> {\n     origin: TypeOrigin,\n     values: ValuePairs<'tcx>,\n@@ -153,7 +153,7 @@ pub struct TypeTrace<'tcx> {\n /// The origin of a `r1 <= r2` constraint.\n ///\n /// See `error_reporting.rs` for more details\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum SubregionOrigin<'tcx> {\n     // Arose from a subtyping relation\n     Subtype(TypeTrace<'tcx>),\n@@ -222,7 +222,7 @@ pub enum SubregionOrigin<'tcx> {\n }\n \n /// Times when we replace late-bound regions with variables:\n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum LateBoundRegionConversionTime {\n     /// when a fn is called\n     FnCall,\n@@ -237,7 +237,7 @@ pub enum LateBoundRegionConversionTime {\n /// Reasons to create a region inference variable\n ///\n /// See `error_reporting.rs` for more details\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum RegionVariableOrigin<'tcx> {\n     // Region variables created for ill-categorized reasons,\n     // mostly indicates places in need of refactoring\n@@ -270,7 +270,7 @@ pub enum RegionVariableOrigin<'tcx> {\n     BoundRegionInCoherence(ast::Name),\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),"}, {"sha": "215c4945ea92097a153666dc9155c983430ef81f", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -120,7 +120,7 @@ struct ConstraintGraph<'a, 'tcx: 'a> {\n     node_ids: FnvHashMap<Node, uint>,\n }\n \n-#[derive(Clone, Hash, PartialEq, Eq, Show)]\n+#[derive(Clone, Hash, PartialEq, Eq, Debug)]\n enum Node {\n     RegionVid(ty::RegionVid),\n     Region(ty::Region),"}, {"sha": "052e7dbb3a4a7b293a9027aa9964cf0722431936", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -42,7 +42,7 @@ mod doc;\n mod graphviz;\n \n // A constraint that influences the inference process.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum Constraint {\n     // One region variable is subregion of another\n     ConstrainVarSubVar(RegionVid, RegionVid),\n@@ -69,7 +69,7 @@ pub enum Verify<'tcx> {\n     VerifyGenericBound(GenericKind<'tcx>, SubregionOrigin<'tcx>, Region, Vec<Region>),\n }\n \n-#[derive(Clone, Show, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),\n@@ -97,7 +97,7 @@ pub enum CombineMapType {\n     Lub, Glb\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum RegionResolutionError<'tcx> {\n     /// `ConcreteFailure(o, a, b)`:\n     ///\n@@ -149,7 +149,7 @@ pub enum RegionResolutionError<'tcx> {\n /// ```\n /// would report an error because we expect 'a and 'b to match, and so we group\n /// 'a and 'b together inside a SameRegions struct\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct SameRegions {\n     pub scope_id: ast::NodeId,\n     pub regions: Vec<BoundRegion>\n@@ -223,7 +223,7 @@ pub struct RegionVarBindings<'a, 'tcx: 'a> {\n     values: RefCell<Option<Vec<VarValue>>>,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n #[allow(missing_copy_implementations)]\n pub struct RegionSnapshot {\n     length: uint,\n@@ -943,7 +943,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n // ______________________________________________________________________\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n enum Classification { Expanding, Contracting }\n \n #[derive(Copy)]"}, {"sha": "65061a29b78dd92786e74aa45a37132f6043b44d", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -46,7 +46,7 @@ struct Delegate<'tcx>;\n \n type Relation = (RelationDir, ty::TyVid);\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo\n }"}, {"sha": "923f7d2d4ef358074568545e9eead858b478b6f9", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -63,7 +63,7 @@ pub trait UnifyValue : Clone + PartialEq + Debug {\n /// to keep the DAG relatively balanced, which helps keep the running\n /// time of the algorithm under control. For more information, see\n /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.\n-#[derive(PartialEq,Clone,Show)]\n+#[derive(PartialEq,Clone,Debug)]\n pub enum VarValue<K:UnifyKey> {\n     Redirect(K),\n     Root(K::Value, uint),"}, {"sha": "f6a51004eb680574e20e48a9cb9c91d1269fe244", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -159,7 +159,7 @@ impl Clone for LiveNode {\n     }\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n@@ -245,13 +245,13 @@ struct CaptureInfo {\n     var_nid: NodeId\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n struct LocalInfo {\n     id: NodeId,\n     ident: ast::Ident\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n     Local(LocalInfo),"}, {"sha": "1be1bfa6730cdffa2eee0244d6081f13b79c403f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -87,7 +87,7 @@ use syntax::parse::token;\n use std::cell::RefCell;\n use std::rc::Rc;\n \n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum categorization<'tcx> {\n     cat_rvalue(ty::Region),                    // temporary val, argument is its scope\n     cat_static_item,\n@@ -101,14 +101,14 @@ pub enum categorization<'tcx> {\n }\n \n // Represents any kind of upvar\n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub struct Upvar {\n     pub id: ty::UpvarId,\n     pub kind: ty::ClosureKind\n }\n \n // different kinds of pointers:\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum PointerKind {\n     /// `Box<T>`\n     Unique,\n@@ -125,25 +125,25 @@ pub enum PointerKind {\n \n // We use the term \"interior\" to mean \"something reachable from the\n // base without a pointer dereference\", e.g. a field\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum InteriorKind {\n     InteriorField(FieldName),\n     InteriorElement(ElementKind),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum FieldName {\n     NamedField(ast::Name),\n     PositionalField(uint)\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum ElementKind {\n     VecElement,\n     OtherElement,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable.\n@@ -155,7 +155,7 @@ pub enum MutabilityCategory {\n // Upvar categorization can generate a variable number of nested\n // derefs.  The note allows detecting them without deep pattern\n // matching on the categorization.\n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Note {\n     NoteClosureEnv(ty::UpvarId), // Deref through closure env\n     NoteUpvarRef(ty::UpvarId),   // Deref through by-ref upvar\n@@ -176,7 +176,7 @@ pub enum Note {\n // dereference, but its type is the type *before* the dereference\n // (`@T`). So use `cmt.ty` to find the type of the value in a consistent\n // fashion. For more details, see the method `cat_pattern`\n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub struct cmt_<'tcx> {\n     pub id: ast::NodeId,           // id of expr/pat producing this value\n     pub span: Span,                // span of same expr/pat"}, {"sha": "dd1e32d13a2be07d512d3d506f159b8387d13f51", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -35,7 +35,7 @@ pub type PublicItems = NodeSet;\n // FIXME: dox\n pub type LastPrivateMap = NodeMap<LastPrivate>;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum LastPrivate {\n     LastMod(PrivateDep),\n     // `use` directives (imports) can refer to two separate definitions in the\n@@ -49,14 +49,14 @@ pub enum LastPrivate {\n                type_used: ImportUse},\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum PrivateDep {\n     AllPublic,\n     DependsOn(ast::DefId),\n }\n \n // How an import is used.\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum ImportUse {\n     Unused,       // The import is not used.\n     Used,         // The import is used."}, {"sha": "4e29e9b75e860bd073a2dd841403f553bb363b1c", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -37,7 +37,7 @@ use syntax::visit::{Visitor, FnKind};\n /// actually attach a more meaningful ordering to scopes than the one\n /// generated via deriving here.\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n-           RustcDecodable, Show, Copy)]\n+           RustcDecodable, Debug, Copy)]\n pub enum CodeExtent {\n     Misc(ast::NodeId),\n     Remainder(BlockRemainder),\n@@ -61,7 +61,7 @@ pub enum CodeExtent {\n /// * the subscope with `first_statement_index == 1` is scope of `c`,\n ///   and thus does not include EXPR_2, but covers the `...`.\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n-         RustcDecodable, Show, Copy)]\n+         RustcDecodable, Debug, Copy)]\n pub struct BlockRemainder {\n     pub block: ast::NodeId,\n     pub first_statement_index: uint,\n@@ -179,7 +179,7 @@ pub struct RegionMaps {\n /// Carries the node id for the innermost block or match expression,\n /// for building up the `var_map` which maps ids to the blocks in\n /// which they were declared.\n-#[derive(PartialEq, Eq, Show, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy)]\n enum InnermostDeclaringBlock {\n     None,\n     Block(ast::NodeId),\n@@ -204,7 +204,7 @@ impl InnermostDeclaringBlock {\n /// Contextual information for declarations introduced by a statement\n /// (i.e. `let`). It carries node-id's for statement and enclosing\n /// block both, as well as the statement's index within the block.\n-#[derive(PartialEq, Eq, Show, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy)]\n struct DeclaringStatementContext {\n     stmt_id: ast::NodeId,\n     block_id: ast::NodeId,\n@@ -220,7 +220,7 @@ impl DeclaringStatementContext {\n     }\n }\n \n-#[derive(PartialEq, Eq, Show, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy)]\n enum InnermostEnclosingExpr {\n     None,\n     Some(ast::NodeId),\n@@ -242,7 +242,7 @@ impl InnermostEnclosingExpr {\n     }\n }\n \n-#[derive(Show, Copy)]\n+#[derive(Debug, Copy)]\n pub struct Context {\n     var_parent: InnermostDeclaringBlock,\n "}, {"sha": "9433f7b0a70f608283f249cba26fc24345bf211c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -33,7 +33,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use util::nodemap::NodeMap;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum DefRegion {\n     DefStaticRegion,\n     DefEarlyBoundRegion(/* space */ subst::ParamSpace,"}, {"sha": "cbf65080a86c146c8e585f99750eb81745ae6d36", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -28,7 +28,7 @@ use syntax::codemap::{Span, DUMMY_SP};\n /// identify each in-scope parameter by an *index* and a *parameter\n /// space* (which indices where the parameter is defined; see\n /// `ParamSpace`).\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Substs<'tcx> {\n     pub types: VecPerParamSpace<Ty<'tcx>>,\n     pub regions: RegionSubsts,\n@@ -37,7 +37,7 @@ pub struct Substs<'tcx> {\n /// Represents the values to use when substituting lifetime parameters.\n /// If the value is `ErasedRegions`, then this subst is occurring during\n /// trans, and all region parameters will be replaced with `ty::ReStatic`.\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum RegionSubsts {\n     ErasedRegions,\n     NonerasedRegions(VecPerParamSpace<ty::Region>)\n@@ -180,7 +180,7 @@ impl RegionSubsts {\n // ParamSpace\n \n #[derive(PartialOrd, Ord, PartialEq, Eq, Copy,\n-           Clone, Hash, RustcEncodable, RustcDecodable, Show)]\n+           Clone, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum ParamSpace {\n     TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n     SelfSpace,  // Self parameter on a trait"}, {"sha": "94da688181e1b5c9de17eeda26009f3794da8d93", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -147,7 +147,7 @@ pub type TraitObligations<'tcx> = subst::VecPerParamSpace<TraitObligation<'tcx>>\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;\n \n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n pub enum SelectionError<'tcx> {\n     Unimplemented,\n     Overflow,\n@@ -215,7 +215,7 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `VtableImplData`.\n-#[derive(Show,Clone)]\n+#[derive(Debug,Clone)]\n pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n@@ -258,7 +258,7 @@ pub struct VtableImplData<'tcx, N> {\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n-#[derive(Show,Clone)]\n+#[derive(Debug,Clone)]\n pub struct VtableBuiltinData<N> {\n     pub nested: subst::VecPerParamSpace<N>\n }"}, {"sha": "530190ddfc164780ff815ff2b70142b3a624666a", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -36,7 +36,7 @@ pub enum ObjectSafetyViolation<'tcx> {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy,Clone,Show)]\n+#[derive(Copy,Clone,Debug)]\n pub enum MethodViolationCode {\n     /// e.g., `fn(self)`\n     ByValueSelf,"}, {"sha": "5780b5b70f4a2d3f8ea79e30212cd11baa1224bb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -96,7 +96,7 @@ pub enum MethodMatchResult {\n     MethodDidNotMatch,\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum MethodMatchedData {\n     // In the case of a precise match, we don't really need to store\n     // how the match was found. So don't.\n@@ -131,7 +131,7 @@ pub enum MethodMatchedData {\n /// matching where clause. Part of the reason for this is that where\n /// clauses can give additional information (like, the types of output\n /// parameters) that would have to be inferred from the impl.\n-#[derive(PartialEq,Eq,Show,Clone)]\n+#[derive(PartialEq,Eq,Debug,Clone)]\n enum SelectionCandidate<'tcx> {\n     BuiltinCandidate(ty::BuiltinBound),\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n@@ -172,7 +172,7 @@ enum BuiltinBoundConditions<'tcx> {\n     AmbiguousBuiltin\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum EvaluationResult<'tcx> {\n     EvaluatedToOk,\n     EvaluatedToAmbig,"}, {"sha": "88d6fd9d45d2f7380d35c9c0d843e0f341f7a0bf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -112,7 +112,7 @@ pub struct field<'tcx> {\n     pub mt: mt<'tcx>\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum ImplOrTraitItemContainer {\n     TraitContainer(ast::DefId),\n     ImplContainer(ast::DefId),\n@@ -127,7 +127,7 @@ impl ImplOrTraitItemContainer {\n     }\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum ImplOrTraitItem<'tcx> {\n     MethodTraitItem(Rc<Method<'tcx>>),\n     TypeTraitItem(Rc<AssociatedType>),\n@@ -172,7 +172,7 @@ impl<'tcx> ImplOrTraitItem<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum ImplOrTraitItemId {\n     MethodTraitItemId(ast::DefId),\n     TypeTraitItemId(ast::DefId),\n@@ -187,7 +187,7 @@ impl ImplOrTraitItemId {\n     }\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct Method<'tcx> {\n     pub name: ast::Name,\n     pub generics: ty::Generics<'tcx>,\n@@ -231,21 +231,21 @@ impl<'tcx> Method<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub struct AssociatedType {\n     pub name: ast::Name,\n     pub vis: ast::Visibility,\n     pub def_id: ast::DefId,\n     pub container: ImplOrTraitItemContainer,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct mt<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: ast::Mutability,\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub struct field_ty {\n     pub name: Name,\n     pub id: DefId,\n@@ -274,21 +274,21 @@ pub struct ItemVariances {\n     pub regions: VecPerParamSpace<Variance>,\n }\n \n-#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Show, Copy)]\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Debug, Copy)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n     Contravariant,  // T<A> <: T<B> iff B <: A -- e.g., function param type\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum AutoAdjustment<'tcx> {\n     AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n \n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum UnsizeKind<'tcx> {\n     // [T, ..n] -> [T], the uint field is n.\n     UnsizeLength(uint),\n@@ -298,13 +298,13 @@ pub enum UnsizeKind<'tcx> {\n     UnsizeVtable(TyTrait<'tcx>, /* the self type of the trait */ Ty<'tcx>)\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct AutoDerefRef<'tcx> {\n     pub autoderefs: uint,\n     pub autoref: Option<AutoRef<'tcx>>\n }\n \n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum AutoRef<'tcx> {\n     /// Convert from T to &T\n     /// The third field allows us to wrap other AutoRef adjustments.\n@@ -421,13 +421,13 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Show)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Debug)]\n pub struct param_index {\n     pub space: subst::ParamSpace,\n     pub index: uint\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n     MethodStatic(ast::DefId),\n@@ -445,7 +445,7 @@ pub enum MethodOrigin<'tcx> {\n \n // details for a method invoked with a receiver whose type is a type parameter\n // with a bounded trait.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct MethodParam<'tcx> {\n     // the precise trait reference that occurs as a bound -- this may\n     // be a supertrait of what the user actually typed. Note that it\n@@ -466,7 +466,7 @@ pub struct MethodParam<'tcx> {\n }\n \n // details for a method invoked with a receiver whose type is an object\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct MethodObject<'tcx> {\n     // the (super)trait containing the method to be invoked\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n@@ -503,13 +503,13 @@ pub struct MethodCallee<'tcx> {\n /// needed to add to the side tables. Thus to disambiguate\n /// we also keep track of whether there's an adjustment in\n /// our key.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct MethodCall {\n     pub expr_id: ast::NodeId,\n     pub adjustment: ExprAdjustment\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, Copy)]\n pub enum ExprAdjustment {\n     NoAdjustment,\n     AutoDeref(uint),\n@@ -923,7 +923,7 @@ impl<'tcx> ctxt<'tcx> {\n     }\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct TyS<'tcx> {\n     pub sty: sty<'tcx>,\n     pub flags: TypeFlags,\n@@ -1029,21 +1029,21 @@ pub fn type_escapes_depth(ty: Ty, depth: u32) -> bool {\n     ty.region_depth > depth\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct BareFnTy<'tcx> {\n     pub unsafety: ast::Unsafety,\n     pub abi: abi::Abi,\n     pub sig: PolyFnSig<'tcx>,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct ClosureTy<'tcx> {\n     pub unsafety: ast::Unsafety,\n     pub abi: abi::Abi,\n     pub sig: PolyFnSig<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum FnOutput<'tcx> {\n     FnConverging(Ty<'tcx>),\n     FnDiverging\n@@ -1100,7 +1100,7 @@ impl<'tcx> PolyFnSig<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n     pub idx: u32,\n@@ -1146,15 +1146,15 @@ pub struct ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct DebruijnIndex {\n     // We maintain the invariant that this is never 0. So 1 indicates\n     // the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n     pub depth: u32,\n }\n \n /// Representation of regions:\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -1195,13 +1195,13 @@ pub enum Region {\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct UpvarId {\n     pub var_id: ast::NodeId,\n     pub closure_expr_id: ast::NodeId,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, Copy)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,\n@@ -1294,7 +1294,7 @@ pub enum BorrowKind {\n /// - Through mutation, the borrowed upvars can actually escape\n ///   the closure, so sometimes it is necessary for them to be larger\n ///   than the closure lifetime itself.\n-#[derive(PartialEq, Clone, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(PartialEq, Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct UpvarBorrow {\n     pub kind: BorrowKind,\n     pub region: ty::Region,\n@@ -1320,7 +1320,7 @@ impl Region {\n }\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n-           RustcEncodable, RustcDecodable, Show, Copy)]\n+           RustcEncodable, RustcDecodable, Debug, Copy)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n@@ -1329,7 +1329,7 @@ pub struct FreeRegion {\n }\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n-           RustcEncodable, RustcDecodable, Show, Copy)]\n+           RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(u32),\n@@ -1350,7 +1350,7 @@ pub enum BoundRegion {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in libsyntax/ast.rs as well.\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum sty<'tcx> {\n     ty_bool,\n     ty_char,\n@@ -1397,7 +1397,7 @@ pub enum sty<'tcx> {\n             // on non-useful type error messages)\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct TyTrait<'tcx> {\n     pub principal: ty::PolyTraitRef<'tcx>,\n     pub bounds: ExistentialBounds<'tcx>,\n@@ -1469,7 +1469,7 @@ impl<'tcx> TyTrait<'tcx> {\n /// Note that a `TraitRef` introduces a level of region binding, to\n /// account for higher-ranked trait bounds like `T : for<'a> Foo<&'a\n /// U>` or higher-ranked object types.\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n@@ -1509,7 +1509,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound reons, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Binder<T>(pub T);\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -1518,22 +1518,22 @@ pub enum IntVarValue {\n     UintType(ast::UintTy),\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum terr_vstore_kind {\n     terr_vec,\n     terr_str,\n     terr_fn,\n     terr_trait\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub struct expected_found<T> {\n     pub expected: T,\n     pub found: T\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub enum type_err<'tcx> {\n     terr_mismatch,\n     terr_unsafety_mismatch(expected_found<ast::Unsafety>),\n@@ -1567,7 +1567,7 @@ pub enum type_err<'tcx> {\n \n /// Bounds suitable for a named type parameter like `A` in `fn foo<A>`\n /// as well as the existential type parameter in an object type.\n-#[derive(PartialEq, Eq, Hash, Clone, Show)]\n+#[derive(PartialEq, Eq, Hash, Clone, Debug)]\n pub struct ParamBounds<'tcx> {\n     pub region_bounds: Vec<ty::Region>,\n     pub builtin_bounds: BuiltinBounds,\n@@ -1580,7 +1580,7 @@ pub struct ParamBounds<'tcx> {\n /// major difference between this case and `ParamBounds` is that\n /// general purpose trait bounds are omitted and there must be\n /// *exactly one* region.\n-#[derive(PartialEq, Eq, Hash, Clone, Show)]\n+#[derive(PartialEq, Eq, Hash, Clone, Debug)]\n pub struct ExistentialBounds<'tcx> {\n     pub region_bound: ty::Region,\n     pub builtin_bounds: BuiltinBounds,\n@@ -1590,7 +1590,7 @@ pub struct ExistentialBounds<'tcx> {\n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n #[derive(Clone, RustcEncodable, PartialEq, Eq, RustcDecodable, Hash,\n-           Show, Copy)]\n+           Debug, Copy)]\n #[repr(uint)]\n pub enum BuiltinBound {\n     BoundSend,\n@@ -1664,15 +1664,15 @@ pub enum InferTy {\n     FreshIntTy(u32),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum UnconstrainedNumeric {\n     UnconstrainedFloat,\n     UnconstrainedInt,\n     Neither,\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Debug, Copy)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(u32, BoundRegion)\n@@ -1746,7 +1746,7 @@ impl fmt::Debug for IntVarValue {\n     }\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct TypeParameterDef<'tcx> {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -1756,7 +1756,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub default: Option<Ty<'tcx>>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Clone, Show)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug)]\n pub struct RegionParameterDef {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -1773,7 +1773,7 @@ impl RegionParameterDef {\n \n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to ast::Generics.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct Generics<'tcx> {\n     pub types: VecPerParamSpace<TypeParameterDef<'tcx>>,\n     pub regions: VecPerParamSpace<RegionParameterDef>,\n@@ -1809,7 +1809,7 @@ impl<'tcx> Generics<'tcx> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Predicate<'tcx> {\n     /// Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -1830,7 +1830,7 @@ pub enum Predicate<'tcx> {\n     Projection(PolyProjectionPredicate<'tcx>),\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: Rc<TraitRef<'tcx>>\n }\n@@ -1856,11 +1856,11 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); // `0 == 1`\n pub type PolyEquatePredicate<'tcx> = ty::Binder<EquatePredicate<'tcx>>;\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct OutlivesPredicate<A,B>(pub A, pub B); // `A : B`\n pub type PolyOutlivesPredicate<A,B> = ty::Binder<OutlivesPredicate<A,B>>;\n pub type PolyRegionOutlivesPredicate = PolyOutlivesPredicate<ty::Region, ty::Region>;\n@@ -1878,7 +1878,7 @@ pub type PolyTypeOutlivesPredicate<'tcx> = PolyOutlivesPredicate<Ty<'tcx>, ty::R\n /// equality between arbitrary types. Processing an instance of Form\n /// #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,\n@@ -1898,7 +1898,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct ProjectionTy<'tcx> {\n     /// The trait reference `T as Trait<..>`.\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n@@ -2034,7 +2034,7 @@ impl<'tcx> Predicate<'tcx> {\n /// `[[], [U:Bar<T>]]`.  Now if there were some particular reference\n /// like `Foo<int,uint>`, then the `GenericBounds` would be `[[],\n /// [uint:Bar<int>]]`.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct GenericBounds<'tcx> {\n     pub predicates: VecPerParamSpace<Predicate<'tcx>>,\n }\n@@ -2243,7 +2243,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n /// stray references in a comment or something). We try to reserve the\n /// \"poly\" prefix to refer to higher-ranked things, as in\n /// `PolyTraitRef`.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct TypeScheme<'tcx> {\n     pub generics: Generics<'tcx>,\n     pub ty: Ty<'tcx>\n@@ -2286,7 +2286,7 @@ pub struct Closure<'tcx> {\n     pub kind: ClosureKind,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum ClosureKind {\n     FnClosureKind,\n     FnMutClosureKind,\n@@ -3745,7 +3745,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n ///\n /// The ordering of the cases is significant. They are sorted so that cmp::max\n /// will keep the \"more erroneous\" of two values.\n-#[derive(Copy, PartialOrd, Ord, Eq, PartialEq, Show)]\n+#[derive(Copy, PartialOrd, Ord, Eq, PartialEq, Debug)]\n pub enum Representability {\n     Representable,\n     ContainsRecursive,\n@@ -6536,7 +6536,7 @@ impl<'a,'tcx> ClosureTyper<'tcx> for ty::ParameterEnvironment<'a,'tcx> {\n \n \n /// The category of explicit self.\n-#[derive(Clone, Copy, Eq, PartialEq, Show)]\n+#[derive(Clone, Copy, Eq, PartialEq, Debug)]\n pub enum ExplicitSelfCategory {\n     StaticExplicitSelfCategory,\n     ByValueExplicitSelfCategory,"}, {"sha": "2fc68e6244a3314c45816d050dd81411771d3a16", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -249,7 +249,7 @@ pub enum EntryFnType {\n     EntryNone,\n }\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     CrateTypeExecutable,\n     CrateTypeDylib,\n@@ -672,7 +672,7 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         .collect()\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum OptionStability { Stable, Unstable }\n \n #[derive(Clone, PartialEq, Eq)]"}, {"sha": "c6436d47c73c86421747e29deb855d1f74b648df", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n use std::slice;\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct SearchPaths {\n     paths: Vec<(PathKind, Path)>,\n }\n@@ -20,7 +20,7 @@ pub struct Iter<'a> {\n     iter: slice::Iter<'a, (PathKind, Path)>,\n }\n \n-#[derive(Eq, PartialEq, Clone, Copy, Show)]\n+#[derive(Eq, PartialEq, Clone, Copy, Debug)]\n pub enum PathKind {\n     Native,\n     Crate,"}, {"sha": "cdaca497b904ca8d9450df95c6489eb8968d6400", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -27,7 +27,7 @@ pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub struct ErrorReported;\n \n pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where"}, {"sha": "aef4f7a896ba2c85fe92b7c060703b250357e45c", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -52,7 +52,7 @@ use std::iter::range_step;\n use syntax::ast;\n use syntax::visit;\n \n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub struct Svh {\n     hash: String,\n }"}, {"sha": "16adccfba575e97013dd91bcce1689077a25e829", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -84,7 +84,7 @@ mod x86_64_unknown_linux_gnu;\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct Target {\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n@@ -107,7 +107,7 @@ pub struct Target {\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct TargetOptions {\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,"}, {"sha": "487de3a6bb5746a8e6c57564a4f1b884d9ebad1b", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -73,7 +73,7 @@\n ///     }\n /// }\n ///\n-/// impl fmt::Show for Flags {\n+/// impl fmt::Debug for Flags {\n ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n ///         write!(f, \"hi!\")\n ///     }"}, {"sha": "311229717da1ca23f51a281a71c1e879ec1bc459", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -21,7 +21,7 @@ use syntax::codemap::Span;\n \n use std::rc::Rc;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub enum RestrictionResult<'tcx> {\n     Safe,\n     SafeIf(Rc<LoanPath<'tcx>>, Vec<Rc<LoanPath<'tcx>>>)"}, {"sha": "d90907888e314c60f4b18b8297395cb121b3dbef", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -278,7 +278,7 @@ impl<'tcx> Loan<'tcx> {\n     }\n }\n \n-#[derive(Eq, Hash, Show)]\n+#[derive(Eq, Hash, Debug)]\n pub struct LoanPath<'tcx> {\n     kind: LoanPathKind<'tcx>,\n     ty: ty::Ty<'tcx>,\n@@ -293,7 +293,7 @@ impl<'tcx> PartialEq for LoanPath<'tcx> {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash, Show)]\n+#[derive(PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathKind<'tcx> {\n     LpVar(ast::NodeId),                         // `x` in doc.rs\n     LpUpvar(ty::UpvarId),                       // `x` captured by-value into closure\n@@ -314,7 +314,7 @@ impl<'tcx> LoanPath<'tcx> {\n //     b2b39e8700e37ad32b486b9a8409b50a8a53aa51#commitcomment-7892003\n static DOWNCAST_PRINTED_OPERATOR : &'static str = \" as \";\n \n-#[derive(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n     LpInterior(mc::InteriorKind) // `LV.f` in doc.rs\n@@ -487,7 +487,7 @@ pub enum AliasableViolationKind {\n     BorrowViolation(euv::LoanCause)\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,"}, {"sha": "ece9d61d7f204df9d615bf22d0d2b955dcb04a49", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -76,7 +76,7 @@ pub struct FlowedMoveData<'a, 'tcx: 'a> {\n }\n \n /// Index into `MoveData.paths`, used like a pointer\n-#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Show)]\n+#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub struct MovePathIndex(uint);\n \n impl MovePathIndex {\n@@ -128,7 +128,7 @@ pub struct MovePath<'tcx> {\n     pub next_sibling: MovePathIndex,\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum MoveKind {\n     Declared,   // When declared, variables start out \"moved\".\n     MoveExpr,   // Expression or binding that moves a variable"}, {"sha": "150e616b36c6f137b1a53e1b6bab37dab7bba53c", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::dataflow;\n use std::rc::Rc;\n use std::borrow::IntoCow;\n \n-#[derive(Show, Copy)]\n+#[derive(Debug, Copy)]\n pub enum Variant {\n     Loans,\n     Moves,"}, {"sha": "4ee13f5a5428f67fc1dc096db8b6cd6a4e9d1f66", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -42,7 +42,7 @@ use std::old_io::{self, MemReader};\n use std::option;\n use std::str::FromStr;\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum PpSourceMode {\n     PpmNormal,\n     PpmEveryBodyLoops,\n@@ -54,7 +54,7 @@ pub enum PpSourceMode {\n }\n \n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum PpFlowGraphMode {\n     Default,\n     /// Drops the labels from the edges in the flowgraph output. This\n@@ -63,7 +63,7 @@ pub enum PpFlowGraphMode {\n     /// have become a pain to maintain.\n     UnlabelledEdges,\n }\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph(PpFlowGraphMode),\n@@ -338,7 +338,7 @@ fn gather_flowgraph_variants(sess: &Session) -> Vec<borrowck_dot::Variant> {\n     variants\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub enum UserIdentifiedItem {\n     ItemViaNode(ast::NodeId),\n     ItemViaPath(Vec<String>),"}, {"sha": "5ce916f536047366449db9706d266948e9e54e50", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -115,7 +115,7 @@ pub enum Linkage {\n }\n \n #[repr(C)]\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n@@ -312,7 +312,7 @@ pub enum RealPredicate {\n \n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,"}, {"sha": "000426771a81af14a6b78c2336d78d1d0697fe56", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -127,7 +127,7 @@ enum PatternBindingMode {\n     ArgumentIrrefutableMode,\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n@@ -193,7 +193,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n }\n \n /// Contains data for specific types of import directives.\n-#[derive(Copy,Show)]\n+#[derive(Copy,Debug)]\n enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport\n@@ -242,7 +242,7 @@ enum TypeParameters<'a> {\n \n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n@@ -266,7 +266,7 @@ enum RibKind {\n }\n \n // Methods can be required or provided. RequiredMethod methods only occur in traits.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum MethodSort {\n     RequiredMethod,\n     ProvidedMethod(NodeId)\n@@ -301,7 +301,7 @@ enum BareIdentifierPatternResolution {\n }\n \n /// One local scope.\n-#[derive(Show)]\n+#[derive(Debug)]\n struct Rib {\n     bindings: HashMap<Name, DefLike>,\n     kind: RibKind,\n@@ -317,14 +317,14 @@ impl Rib {\n }\n \n /// Whether an import can be shadowed by another import.\n-#[derive(Show,PartialEq,Clone,Copy)]\n+#[derive(Debug,PartialEq,Clone,Copy)]\n enum Shadowable {\n     Always,\n     Never\n }\n \n /// One import directive.\n-#[derive(Show)]\n+#[derive(Debug)]\n struct ImportDirective {\n     module_path: Vec<Name>,\n     subclass: ImportDirectiveSubclass,\n@@ -354,7 +354,7 @@ impl ImportDirective {\n }\n \n /// The item that an import resolves to.\n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n struct Target {\n     target_module: Rc<Module>,\n     bindings: Rc<NameBindings>,\n@@ -375,7 +375,7 @@ impl Target {\n }\n \n /// An ImportResolution represents a particular `use` directive.\n-#[derive(Show)]\n+#[derive(Debug)]\n struct ImportResolution {\n     /// Whether this resolution came from a `use` or a `pub use`. Note that this\n     /// should *not* be used whenever resolution is being performed, this is\n@@ -455,15 +455,15 @@ impl ImportResolution {\n }\n \n /// The link from a module up to its nearest parent node.\n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n enum ParentLink {\n     NoParentLink,\n     ModuleParentLink(Weak<Module>, Name),\n     BlockParentLink(Weak<Module>, NodeId)\n }\n \n /// The type of module this is.\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -556,15 +556,15 @@ impl fmt::Debug for Module {\n }\n \n bitflags! {\n-    #[derive(Show)]\n+    #[derive(Debug)]\n     flags DefModifiers: u8 {\n         const PUBLIC            = 0b0000_0001,\n         const IMPORTABLE        = 0b0000_0010,\n     }\n }\n \n // Records a possibly-private type definition.\n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n struct TypeNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     module_def: Option<Rc<Module>>,\n@@ -573,7 +573,7 @@ struct TypeNsDef {\n }\n \n // Records a possibly-private value definition.\n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n struct ValueNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     def: Def,\n@@ -582,7 +582,7 @@ struct ValueNsDef {\n \n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n-#[derive(Show)]\n+#[derive(Debug)]\n struct NameBindings {\n     type_def: RefCell<Option<TypeNsDef>>,   //< Meaning in type namespace.\n     value_def: RefCell<Option<ValueNsDef>>, //< Meaning in value namespace."}, {"sha": "ef1eb3cb8048860b9748e2d366b32c12c011c731", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -63,7 +63,7 @@ macro_rules! svec {\n     })\n }\n \n-#[derive(Copy,Show)]\n+#[derive(Copy,Debug)]\n pub enum Row {\n     Variable,\n     Enum,"}, {"sha": "8d7eb5816c2b10cd5622f5d221b9e65512b6d9c6", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -227,7 +227,7 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n impl<'a> ConstantExpr<'a> {\n@@ -242,7 +242,7 @@ impl<'a> ConstantExpr<'a> {\n }\n \n // An option identifying a branch (either a literal, an enum variant or a range)\n-#[derive(Show)]\n+#[derive(Debug)]\n enum Opt<'a, 'tcx> {\n     ConstantValue(ConstantExpr<'a>),\n     ConstantRange(ConstantExpr<'a>, ConstantExpr<'a>),"}, {"sha": "1deb07e1ba09a487f88eaffb9efa07a9468b1116", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -72,7 +72,7 @@ use util::ppaux::ty_to_string;\n type Hint = attr::ReprAttr;\n \n /// Representations.\n-#[derive(Eq, PartialEq, Show)]\n+#[derive(Eq, PartialEq, Debug)]\n pub enum Repr<'tcx> {\n     /// C-like enums; basically an int.\n     CEnum(IntType, Disr, Disr), // discriminant range (signedness based on the IntType)\n@@ -117,7 +117,7 @@ pub enum Repr<'tcx> {\n }\n \n /// For structs, and struct-like parts of anything fancier.\n-#[derive(Eq, PartialEq, Show)]\n+#[derive(Eq, PartialEq, Debug)]\n pub struct Struct<'tcx> {\n     // If the struct is DST, then the size and alignment do not take into\n     // account the unsized fields of the struct.\n@@ -465,7 +465,7 @@ fn mk_struct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct IntBounds {\n     slo: i64,\n     shi: i64,"}, {"sha": "61a6f4cfe10a949d7542b5333a895bf3de795649", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -50,7 +50,7 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct CustomScopeIndex {\n     index: uint\n }\n@@ -81,7 +81,7 @@ impl<'blk, 'tcx: 'blk> fmt::Debug for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n@@ -106,7 +106,7 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n@@ -911,7 +911,7 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum Heap {\n     HeapExchange\n }"}, {"sha": "7d4e6aed876a547d6cfb760c39c03d51036907b6", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1137,7 +1137,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(span: Span,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),"}, {"sha": "dd4ef97b88da69ba3ae2979967160b3482920852", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -52,7 +52,7 @@ pub struct DatumBlock<'blk, 'tcx: 'blk, K> {\n     pub datum: Datum<'tcx, K>,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub enum Expr {\n     /// a fresh value that was produced and which has no cleanup yet\n     /// because it has not yet \"landed\" into its permanent home\n@@ -64,10 +64,10 @@ pub enum Expr {\n     LvalueExpr,\n }\n \n-#[derive(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Debug)]\n pub struct Lvalue;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct Rvalue {\n     pub mode: RvalueMode\n }\n@@ -83,7 +83,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,"}, {"sha": "ce9af3162a08927c88ec68c33a36508135e1bbe4", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -249,7 +249,7 @@ const FLAGS_NONE: c_uint = 0;\n //  Public Interface of debuginfo module\n //=-----------------------------------------------------------------------------\n \n-#[derive(Copy, Show, Hash, Eq, PartialEq, Clone)]\n+#[derive(Copy, Debug, Hash, Eq, PartialEq, Clone)]\n struct UniqueTypeId(ast::Name);\n \n // The TypeMap is where the CrateDebugContext holds the type metadata nodes"}, {"sha": "a6c9a988b4d46e486639a50248219c439296a281", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1924,7 +1924,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,"}, {"sha": "cc0d76efcf0a683767a3d684b3396c0a2e4b55df", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -286,7 +286,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     (lldecl, mono_ty, true)\n }\n \n-#[derive(PartialEq, Eq, Hash, Show)]\n+#[derive(PartialEq, Eq, Hash, Debug)]\n pub struct MonoId<'tcx> {\n     pub def: ast::DefId,\n     pub params: subst::VecPerParamSpace<Ty<'tcx>>"}, {"sha": "e3e4ca62c262f0f4931fd4691a4062f9ed3f2f41", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -27,7 +27,7 @@ use std::iter::repeat;\n \n use libc::c_uint;\n \n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n #[repr(C)]\n pub struct Type {\n     rf: TypeRef"}, {"sha": "4980630a03593d9d866ca3fcb094cdb385285248", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -73,7 +73,7 @@ pub struct Pick<'tcx> {\n     pub kind: PickKind<'tcx>,\n }\n \n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n pub enum PickKind<'tcx> {\n     InherentImplPick(/* Impl */ ast::DefId),\n     ObjectPick(/* Trait */ ast::DefId, /* method_num */ uint, /* real_index */ uint),\n@@ -88,7 +88,7 @@ pub type PickResult<'tcx> = Result<Pick<'tcx>, MethodError>;\n // difference is that it doesn't embed any regions or other\n // specifics. The \"confirmation\" step recreates those details as\n // needed.\n-#[derive(Clone,Show)]\n+#[derive(Clone,Debug)]\n pub enum PickAdjustment {\n     // Indicates that the source expression should be autoderef'd N times\n     //"}, {"sha": "6dabec31e2c6ff855b06bc2cb81f42b4c7db3fe9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1877,7 +1877,7 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Show, PartialEq, Eq)]\n+#[derive(Copy, Debug, PartialEq, Eq)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference"}, {"sha": "dd42c667956511dbe1555ed65b4b1a439e8fdd33", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -230,7 +230,7 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n struct InferredIndex(uint);\n \n #[derive(Copy)]\n@@ -266,7 +266,7 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[derive(Copy, Show, PartialEq)]\n+#[derive(Copy, Debug, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam"}, {"sha": "9cb29cb14b807025c8cc9f9969967388c90d0338", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -115,7 +115,7 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub name: String,\n     pub src: FsPath,\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub attrs: Vec<Attribute>,\n@@ -237,7 +237,7 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -313,7 +313,7 @@ impl Item {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ItemEnum {\n     ExternCrateItem(String, Option<String>),\n     ImportItem(Import),\n@@ -342,7 +342,7 @@ pub enum ItemEnum {\n     AssociatedTypeItem(TyParam),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -401,7 +401,7 @@ impl Clean<Item> for doctree::Module {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Attribute {\n     Word(String),\n     List(String, Vec<Attribute> ),\n@@ -456,7 +456,7 @@ impl<'a> attr::AttrMetaMethods for &'a Attribute {\n     fn span(&self) -> codemap::Span { unimplemented!() }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct TyParam {\n     pub name: String,\n     pub did: ast::DefId,\n@@ -489,7 +489,7 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n     TraitBound(PolyTrait, ast::TraitBoundModifier)\n@@ -684,7 +684,7 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -734,7 +734,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<TyParamBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<Lifetime>},\n@@ -843,7 +843,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n }\n \n // maybe use a Generic enum and use ~[Generic]?\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n@@ -940,7 +940,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -979,7 +979,7 @@ impl Clean<Item> for ast::Method {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TyMethod {\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n@@ -1017,7 +1017,7 @@ impl Clean<Item> for ast::TypeMethod {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n@@ -1038,7 +1038,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -1063,14 +1063,14 @@ impl Clean<Item> for doctree::Function {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n     pub attrs: Vec<Attribute>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (ast::DefId, &'a ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct Argument {\n     pub type_: Type,\n     pub name: String,\n@@ -1140,7 +1140,7 @@ impl Clean<Argument> for ast::Arg {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum FunctionRetTy {\n     Return(Type),\n     DefaultReturn,\n@@ -1157,7 +1157,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Trait {\n     pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n@@ -1201,7 +1201,7 @@ impl Clean<PolyTrait> for ast::PolyTraitRef {\n \n /// An item belonging to a trait, whether a method or associated. Could be named\n /// TraitItem except that's already taken by an exported enum variant.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitMethod {\n     RequiredMethod(Item),\n     ProvidedMethod(Item),\n@@ -1246,7 +1246,7 @@ impl Clean<TraitMethod> for ast::TraitItem {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplMethod {\n     MethodImplItem(Item),\n     TypeImplItem(Item),\n@@ -1317,7 +1317,7 @@ impl<'tcx> Clean<Item> for ty::ImplOrTraitItem<'tcx> {\n }\n \n /// A trait reference, which may have higher ranked lifetimes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct PolyTrait {\n     pub trait_: Type,\n     pub lifetimes: Vec<Lifetime>\n@@ -1326,7 +1326,7 @@ pub struct PolyTrait {\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n@@ -1370,7 +1370,7 @@ pub enum Type {\n     PolyTraitRef(Vec<TyParamBound>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n pub enum PrimitiveType {\n     Isize, I8, I16, I32, I64,\n     Usize, U8, U16, U32, U64,\n@@ -1382,7 +1382,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Copy, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1625,7 +1625,7 @@ impl Clean<Type> for ast::QPath {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum StructField {\n     HiddenStructField, // inserted later by strip passes\n     TypedStructField(Type),\n@@ -1684,7 +1684,7 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -1714,7 +1714,7 @@ impl Clean<Item> for doctree::Struct {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -1731,7 +1731,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Enum {\n     pub variants: Vec<Item>,\n     pub generics: Generics,\n@@ -1756,7 +1756,7 @@ impl Clean<Item> for doctree::Enum {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -1824,7 +1824,7 @@ impl<'tcx> Clean<Item> for ty::VariantInfo<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantKind {\n     CLikeVariant,\n     TupleVariant(Vec<Type>),\n@@ -1846,7 +1846,7 @@ impl Clean<VariantKind> for ast::VariantKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Span {\n     pub filename: String,\n     pub loline: uint,\n@@ -1881,7 +1881,7 @@ impl Clean<Span> for syntax::codemap::Span {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct Path {\n     pub global: bool,\n     pub segments: Vec<PathSegment>,\n@@ -1896,7 +1896,7 @@ impl Clean<Path> for ast::Path {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum PathParameters {\n     AngleBracketed {\n         lifetimes: Vec<Lifetime>,\n@@ -1930,7 +1930,7 @@ impl Clean<PathParameters> for ast::PathParameters {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct PathSegment {\n     pub name: String,\n     pub params: PathParameters\n@@ -1971,7 +1971,7 @@ impl Clean<String> for ast::Name {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -1994,7 +1994,7 @@ impl Clean<Item> for doctree::Typedef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct BareFunctionDecl {\n     pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n@@ -2017,7 +2017,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -2046,7 +2046,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -2069,7 +2069,7 @@ impl Clean<Item> for doctree::Constant {\n     }\n }\n \n-#[derive(Show, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n+#[derive(Debug, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -2084,7 +2084,7 @@ impl Clean<Mutability> for ast::Mutability {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Copy, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Copy, Debug)]\n pub enum ImplPolarity {\n     Positive,\n     Negative,\n@@ -2099,7 +2099,7 @@ impl Clean<ImplPolarity> for ast::ImplPolarity {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Impl {\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n@@ -2219,7 +2219,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Import {\n     // use source as str;\n     SimpleImport(String, ImportSource),\n@@ -2229,13 +2229,13 @@ pub enum Import {\n     ImportList(ImportSource, Vec<ViewListIdent>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<ast::DefId>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ViewListIdent {\n     pub name: String,\n     pub source: Option<ast::DefId>,\n@@ -2454,7 +2454,7 @@ fn resolve_def(cx: &DocContext, id: ast::NodeId) -> Option<ast::DefId> {\n     })\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Macro {\n     pub source: String,\n }\n@@ -2475,7 +2475,7 @@ impl Clean<Item> for doctree::Macro {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Stability {\n     pub level: attr::StabilityLevel,\n     pub feature: String,\n@@ -2595,7 +2595,7 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n }\n \n /// An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`\n-#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Show)]\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Debug)]\n pub struct TypeBinding {\n     pub name: String,\n     pub ty: Type"}, {"sha": "ba5df56f4fb5655d44762548fe8f53eaf83db88c", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -72,7 +72,7 @@ impl Module {\n     }\n }\n \n-#[derive(Show, Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Debug, Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum StructType {\n     /// A normal struct\n     Plain,\n@@ -145,7 +145,7 @@ pub struct Typedef {\n     pub stab: Option<attr::Stability>,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct Static {\n     pub type_: P<ast::Ty>,\n     pub mutability: ast::Mutability,"}, {"sha": "1c916ad817cc7d9fff9172f841c08f3ed38e9f24", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -395,7 +395,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n-#[derive(Eq, PartialEq, Clone, Show)]\n+#[derive(Eq, PartialEq, Clone, Debug)]\n struct LangString {\n     should_fail: bool,\n     no_run: bool,"}, {"sha": "d3c2ffa95441f3d4066358b56476e992457e1e06", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -61,7 +61,7 @@ pub trait FromHex {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),"}, {"sha": "c13f9213b1e4ac8cb5fc5bd043d734cd12f51301", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -214,7 +214,7 @@ use unicode::str::Utf16Item;\n use Encodable;\n \n /// Represents a json value\n-#[derive(Clone, PartialEq, PartialOrd, Show)]\n+#[derive(Clone, PartialEq, PartialOrd, Debug)]\n pub enum Json {\n     I64(i64),\n     U64(u64),\n@@ -235,7 +235,7 @@ pub struct AsJson<'a, T: 'a> { inner: &'a T }\n pub struct AsPrettyJson<'a, T: 'a> { inner: &'a T, indent: Option<uint> }\n \n /// The errors that can arise while parsing a JSON stream.\n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum ErrorCode {\n     InvalidSyntax,\n     InvalidNumber,\n@@ -256,7 +256,7 @@ pub enum ErrorCode {\n     NotUtf8,\n }\n \n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n@@ -266,7 +266,7 @@ pub enum ParserError {\n // Builder and Parser have the same errors.\n pub type BuilderError = ParserError;\n \n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum DecoderError {\n     ParseError(ParserError),\n     ExpectedError(string::String, string::String),\n@@ -275,7 +275,7 @@ pub enum DecoderError {\n     ApplicationError(string::String)\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum EncoderError {\n     FmtError(fmt::Error),\n     BadHashmapKey,\n@@ -1239,7 +1239,7 @@ impl Index<uint> for Json {\n }\n \n /// The output of the streaming parser.\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Debug)]\n pub enum JsonEvent {\n     ObjectStart,\n     ObjectEnd,\n@@ -1254,7 +1254,7 @@ pub enum JsonEvent {\n     Error(ParserError),\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum ParserState {\n     // Parse a value in an array, true means first element.\n     ParseArray(bool),\n@@ -1284,15 +1284,15 @@ pub struct Stack {\n /// For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"),\n /// StackElement::Index(3) and StackElement::Key(\"x\") are the\n /// StackElements compositing the stack that represents foo.bar[3].x\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Debug)]\n pub enum StackElement<'l> {\n     Index(u32),\n     Key(&'l str),\n }\n \n // Internally, Key elements are stored as indices in a buffer to avoid\n // allocating a string for every member of an object.\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Debug)]\n enum InternalStackElement {\n     InternalIndex(u32),\n     InternalKey(u16, u16), // start, size\n@@ -2623,7 +2623,7 @@ mod tests {\n     use std::num::Float;\n     use std::string;\n \n-    #[derive(RustcDecodable, Eq, PartialEq, Show)]\n+    #[derive(RustcDecodable, Eq, PartialEq, Debug)]\n     struct OptionData {\n         opt: Option<uint>,\n     }\n@@ -2650,20 +2650,20 @@ mod tests {\n                                 ExpectedError(\"Number\".to_string(), \"false\".to_string()));\n     }\n \n-    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n     enum Animal {\n         Dog,\n         Frog(string::String, int)\n     }\n \n-    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n     struct Inner {\n         a: (),\n         b: uint,\n         c: Vec<string::String>,\n     }\n \n-    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n     struct Outer {\n         inner: Vec<Inner>,\n     }"}, {"sha": "d010a5de622d44dc98b8801a19eba7d0bb00ba0a", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -951,7 +951,7 @@ mod tests {\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_u64, u64 }\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_uint, uint }\n \n-    #[derive(PartialEq, Show)]\n+    #[derive(PartialEq, Debug)]\n     struct Value { x: int }\n \n     impl ToPrimitive for Value {"}, {"sha": "c9cabe648b994880dd5c6f125767fb91cea41d35", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -320,7 +320,7 @@ pub type IoResult<T> = Result<T, IoError>;\n /// # FIXME\n ///\n /// Is something like this sufficient? It's kind of archaic\n-#[derive(PartialEq, Eq, Clone, Show)]\n+#[derive(PartialEq, Eq, Clone, Debug)]\n pub struct IoError {\n     /// An enumeration which can be matched against for determining the flavor\n     /// of error.\n@@ -376,7 +376,7 @@ impl Error for IoError {\n }\n \n /// A list specifying general categories of I/O error.\n-#[derive(Copy, PartialEq, Eq, Clone, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Debug)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -1662,7 +1662,7 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n /// A mode specifies how a file should be opened or created. These modes are\n /// passed to `File::open_mode` and are used to control where the file is\n /// positioned when it is initially opened.\n-#[derive(Copy, Clone, PartialEq, Eq, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum FileMode {\n     /// Opens a file positioned at the beginning.\n     Open,\n@@ -1674,7 +1674,7 @@ pub enum FileMode {\n \n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n-#[derive(Copy, Clone, PartialEq, Eq, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum FileAccess {\n     /// Read-only access, requests to write will result in an error\n     Read,\n@@ -1685,7 +1685,7 @@ pub enum FileAccess {\n }\n \n /// Different kinds of files which can be identified by a call to stat\n-#[derive(Copy, PartialEq, Show, Hash, Clone)]\n+#[derive(Copy, PartialEq, Debug, Hash, Clone)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     RegularFile,\n@@ -1789,7 +1789,7 @@ pub struct UnstableFileStat {\n bitflags! {\n     /// A set of permissions for a file or directory is represented by a set of\n     /// flags which are or'd together.\n-    #[derive(Show)]\n+    #[derive(Debug)]\n     flags FilePermission: u32 {\n         const USER_READ     = 0o400,\n         const USER_WRITE    = 0o200,\n@@ -1845,7 +1845,7 @@ mod tests {\n     use prelude::v1::{Ok, Vec, Buffer, SliceExt};\n     use uint;\n \n-    #[derive(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Debug)]\n     enum BadReaderBehavior {\n         GoodBehavior(uint),\n         BadBehavior(uint)"}, {"sha": "e37744f3aa3ec8c1f8873daeacde128ff5ee3794", "filename": "src/libstd/old_io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -29,7 +29,7 @@ use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n@@ -38,7 +38,7 @@ pub enum SocketType {\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -51,7 +51,7 @@ pub enum Flag {\n \n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum Protocol {\n     TCP, UDP\n }\n@@ -61,15 +61,15 @@ pub enum Protocol {\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct Hint {\n     pub family: uint,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: uint,\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: uint,"}, {"sha": "f0b73bd37f2b19e28b4e40d51e9ab36ff407edd3", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -32,7 +32,7 @@ use vec::Vec;\n \n pub type Port = u16;\n \n-#[derive(Copy, PartialEq, Eq, Clone, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]\n pub enum IpAddr {\n     Ipv4Addr(u8, u8, u8, u8),\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n@@ -64,7 +64,7 @@ impl fmt::Display for IpAddr {\n     }\n }\n \n-#[derive(Copy, PartialEq, Eq, Clone, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]\n pub struct SocketAddr {\n     pub ip: IpAddr,\n     pub port: Port,"}, {"sha": "d3e60de2780e9398e755de89c8610fa6159eaad0", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -96,12 +96,12 @@ pub struct Process {\n /// A representation of environment variable name\n /// It compares case-insensitive on Windows and case-sensitive everywhere else.\n #[cfg(not(windows))]\n-#[derive(Hash, PartialEq, Eq, Clone, Show)]\n+#[derive(Hash, PartialEq, Eq, Clone, Debug)]\n struct EnvKey(CString);\n \n #[doc(hidden)]\n #[cfg(windows)]\n-#[derive(Eq, Clone, Show)]\n+#[derive(Eq, Clone, Debug)]\n struct EnvKey(CString);\n \n #[cfg(windows)]\n@@ -492,7 +492,7 @@ pub enum StdioContainer {\n \n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n-#[derive(PartialEq, Eq, Clone, Copy, Show)]\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub enum ProcessExit {\n     /// Normal termination with an exit status.\n     ExitStatus(int),"}, {"sha": "9a55f32c372983919fbdad8d4aaab1787c5f6961", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -16,7 +16,7 @@ use old_io;\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct LimitReader<R> {\n     limit: uint,\n     inner: R\n@@ -78,7 +78,7 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct NullWriter;\n \n impl Writer for NullWriter {\n@@ -87,7 +87,7 @@ impl Writer for NullWriter {\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct ZeroReader;\n \n impl Reader for ZeroReader {\n@@ -108,7 +108,7 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub struct NullReader;\n \n impl Reader for NullReader {\n@@ -129,7 +129,7 @@ impl Buffer for NullReader {\n ///\n /// The `Writer`s are delegated to in order. If any `Writer` returns an error,\n /// that error is returned immediately and remaining `Writer`s are not called.\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct MultiWriter<W> {\n     writers: Vec<W>\n }\n@@ -161,7 +161,7 @@ impl<W> Writer for MultiWriter<W> where W: Writer {\n \n /// A `Reader` which chains input from multiple `Reader`s, reading each to\n /// completion before moving onto the next.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct ChainedReader<I, R> {\n     readers: I,\n     cur_reader: Option<R>,\n@@ -200,7 +200,7 @@ impl<R: Reader, I: Iterator<Item=R>> Reader for ChainedReader<I, R> {\n \n /// A `Reader` which forwards input from another `Reader`, passing it along to\n /// a `Writer` as well. Similar to the `tee(1)` command.\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct TeeReader<R, W> {\n     reader: R,\n     writer: W,\n@@ -242,7 +242,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> old_io::IoResult<()>\n }\n \n /// An adaptor converting an `Iterator<u8>` to a `Reader`.\n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct IterReader<T> {\n     iter: T,\n }"}, {"sha": "38c0a7b8f9b90e6b9b7e593d11df014f90fdb08a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -857,7 +857,7 @@ pub enum MapOption {\n }\n \n /// Possible errors when creating a map.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum MapError {\n     /// # The following are POSIX-specific\n     ///"}, {"sha": "2e6b9d50553fa7c064081d8fc8b1d67fc9a029ef", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -959,7 +959,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[derive(Copy, PartialEq, Clone, Show)]\n+#[derive(Copy, PartialEq, Clone, Debug)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),"}, {"sha": "6a43eccbaba4e935945a19caec6a4aecb021d567", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -390,13 +390,13 @@ pub struct SendError<T>(pub T);\n ///\n /// The `recv` operation can only fail if the sending half of a channel is\n /// disconnected, implying that no further messages will ever be received.\n-#[derive(PartialEq, Eq, Clone, Copy, Show)]\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RecvError;\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n /// return data when called.\n-#[derive(PartialEq, Clone, Copy, Show)]\n+#[derive(PartialEq, Clone, Copy, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryRecvError {\n     /// This channel is currently empty, but the sender(s) have not yet"}, {"sha": "da3ce51a652f792823cac87646197331d9ebfb60", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -105,7 +105,7 @@ struct Buffer<T> {\n     size: uint,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub enum Failure {\n     Empty,\n     Disconnected,"}, {"sha": "51b6e0a1c1e12de0e9f011620d4430fe8b78cc58", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -32,7 +32,7 @@ use old_io;\n \n // FIXME: move uses of Arc and deadline tracking to std::io\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub enum SocketStatus {\n     Readable,\n     Writable,"}, {"sha": "483e5995298959368f263763ab9abe1bd56ecb03", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -45,7 +45,7 @@ macro_rules! try_opt {\n \n /// ISO 8601 time duration with nanosecond precision.\n /// This also allows for the negative duration; see individual methods for details.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub struct Duration {\n     secs: i64,\n     nanos: i32, // Always 0 <= nanos < NANOS_PER_SEC"}, {"sha": "2325b3778c757713531e8142505b0cdca8734d24", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[derive(Copy, PartialEq, Eq, Show)]\n+#[derive(Copy, PartialEq, Eq, Debug)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -26,7 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Show)]\n+#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n@@ -47,7 +47,7 @@ pub enum Abi {\n }\n \n #[allow(non_camel_case_types)]\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub enum Architecture {\n     X86,\n     X86_64,"}, {"sha": "11068880b0e261b23edaebf9297a960f9c12800f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 96, "deletions": 96, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -208,14 +208,14 @@ impl Decodable for Ident {\n pub type FnIdent = Option<Ident>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,\n-           Show, Copy)]\n+           Debug, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n@@ -224,7 +224,7 @@ pub struct LifetimeDef {\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Path {\n     pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n@@ -236,7 +236,7 @@ pub struct Path {\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub identifier: Ident,\n@@ -249,7 +249,7 @@ pub struct PathSegment {\n     pub parameters: PathParameters,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PathParameters {\n     AngleBracketedParameters(AngleBracketedParameterData),\n     ParenthesizedParameters(ParenthesizedParameterData),\n@@ -327,7 +327,7 @@ impl PathParameters {\n }\n \n /// A path like `Foo<'a, T>`\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n@@ -345,7 +345,7 @@ impl AngleBracketedParameterData {\n }\n \n /// A path like `Foo(A,B) -> C`\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ParenthesizedParameterData {\n     /// Overall span\n     pub span: Span,\n@@ -362,7 +362,7 @@ pub type CrateNum = u32;\n pub type NodeId = u32;\n \n #[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n-           RustcDecodable, Hash, Show, Copy)]\n+           RustcDecodable, Hash, Debug, Copy)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub node: NodeId,\n@@ -382,23 +382,23 @@ pub const DUMMY_NODE_ID: NodeId = -1;\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyParamBound {\n     TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n     RegionTyParamBound(Lifetime)\n }\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n }\n \n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n@@ -409,7 +409,7 @@ pub struct TyParam {\n \n /// Represents lifetimes and type parameters attached to a declaration\n /// of a function, enum, trait, etc.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub ty_params: OwnedSlice<TyParam>,\n@@ -428,34 +428,34 @@ impl Generics {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum WherePredicate {\n     BoundPredicate(WhereBoundPredicate),\n     RegionPredicate(WhereRegionPredicate),\n     EqPredicate(WhereEqPredicate)\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     pub bounded_ty: P<Ty>,\n     pub bounds: OwnedSlice<TyParamBound>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n     pub span: Span,\n@@ -467,7 +467,7 @@ pub struct WhereEqPredicate {\n /// used to drive conditional compilation\n pub type CrateConfig = Vec<P<MetaItem>> ;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Crate {\n     pub module: Mod,\n     pub attrs: Vec<Attribute>,\n@@ -478,7 +478,7 @@ pub struct Crate {\n \n pub type MetaItem = Spanned<MetaItem_>;\n \n-#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MetaItem_ {\n     MetaWord(InternedString),\n     MetaList(InternedString, Vec<P<MetaItem>>),\n@@ -510,7 +510,7 @@ impl PartialEq for MetaItem_ {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Block {\n     pub stmts: Vec<P<Stmt>>,\n     pub expr: Option<P<Expr>>,\n@@ -519,27 +519,27 @@ pub struct Block {\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Pat {\n     pub id: NodeId,\n     pub node: Pat_,\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FieldPat {\n     pub ident: Ident,\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BindingMode {\n     BindByRef(Mutability),\n     BindByValue(Mutability),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n     PatWildSingle,\n@@ -548,7 +548,7 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n     PatWild(PatWildKind),\n@@ -577,13 +577,13 @@ pub enum Pat_ {\n     PatMac(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BinOp_ {\n     BiAdd,\n     BiSub,\n@@ -607,7 +607,7 @@ pub enum BinOp_ {\n \n pub type BinOp = Spanned<BinOp_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnOp {\n     UnUniq,\n     UnDeref,\n@@ -617,7 +617,7 @@ pub enum UnOp {\n \n pub type Stmt = Spanned<Stmt_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Stmt_ {\n     /// Could be an item or a local (let) binding:\n     StmtDecl(P<Decl>, NodeId),\n@@ -631,7 +631,7 @@ pub enum Stmt_ {\n     StmtMac(P<Mac>, MacStmtStyle),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n     /// `foo!(...);`, `foo![...];`\n@@ -646,7 +646,7 @@ pub enum MacStmtStyle {\n \n /// Where a local declaration came from: either a true `let ... =\n /// ...;`, or one desugared from the pattern of a for loop.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum LocalSource {\n     LocalLet,\n     LocalFor,\n@@ -655,7 +655,7 @@ pub enum LocalSource {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Local {\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n@@ -667,7 +667,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Decl_ {\n     /// A local (let) binding:\n     DeclLocal(P<Local>),\n@@ -676,15 +676,15 @@ pub enum Decl_ {\n }\n \n /// represents one arm of a 'match'\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Field {\n     pub ident: SpannedIdent,\n     pub expr: P<Expr>,\n@@ -693,26 +693,26 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Expr {\n     pub id: NodeId,\n     pub node: Expr_,\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n     ExprBox(Option<P<Expr>>, P<Expr>),\n@@ -776,28 +776,28 @@ pub enum Expr_ {\n ///     <Vec<T> as SomeTrait>::SomeAssociatedItem\n ///      ^~~~~     ^~~~~~~~~   ^~~~~~~~~~~~~~~~~~\n ///      self_type  trait_name  item_path\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct QPath {\n     pub self_type: P<Ty>,\n     pub trait_ref: P<TraitRef>,\n     pub item_path: PathSegment,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum MatchSource {\n     Normal,\n     IfLetDesugar { contains_else_clause: bool },\n     WhileLetDesugar,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n /// A delimited sequence of token trees\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Delimited {\n     /// The type of delimiter\n     pub delim: token::DelimToken,\n@@ -832,7 +832,7 @@ impl Delimited {\n }\n \n /// A sequence of token treesee\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct SequenceRepetition {\n     /// The sequence of token trees\n     pub tts: Vec<TokenTree>,\n@@ -846,7 +846,7 @@ pub struct SequenceRepetition {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum KleeneOp {\n     ZeroOrMore,\n     OneOrMore,\n@@ -864,7 +864,7 @@ pub enum KleeneOp {\n ///\n /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum TokenTree {\n     /// A single token\n@@ -955,22 +955,22 @@ pub type Mac = Spanned<Mac_>;\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n /// There's only one flavor, now, so this could presumably be simplified.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Mac_ {\n     // NB: the additional ident for a macro_rules-style macro is actually\n     // stored in the enclosing item. Oog.\n     MacInvocTT(Path, Vec<TokenTree>, SyntaxContext),   // new macro-invocation\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StrStyle {\n     CookedStr,\n     RawStr(usize)\n }\n \n pub type Lit = Spanned<Lit_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Sign {\n     Minus,\n     Plus\n@@ -986,7 +986,7 @@ impl Sign {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum LitIntType {\n     SignedIntLit(IntTy, Sign),\n     UnsignedIntLit(UintTy),\n@@ -1003,7 +1003,7 @@ impl LitIntType {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8>>),\n@@ -1017,13 +1017,13 @@ pub enum Lit_ {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MutTy {\n     pub ty: P<Ty>,\n     pub mutbl: Mutability,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeField {\n     pub ident: Ident,\n     pub mt: MutTy,\n@@ -1032,7 +1032,7 @@ pub struct TypeField {\n \n /// Represents a required method in a trait declaration,\n /// one without a default implementation\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1050,26 +1050,26 @@ pub struct TypeMethod {\n /// a default implementation A trait method is either required (meaning it\n /// doesn't have an implementation, just a signature) or provided (meaning it\n /// has a default implementation).\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TraitItem {\n     RequiredMethod(TypeMethod),\n     ProvidedMethod(P<Method>),\n     TypeTraitItem(P<AssociatedType>),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ImplItem {\n     MethodImplItem(P<Method>),\n     TypeImplItem(P<Typedef>),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct AssociatedType {\n     pub attrs: Vec<Attribute>,\n     pub ty_param: TyParam,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Typedef {\n     pub id: NodeId,\n     pub span: Span,\n@@ -1196,7 +1196,7 @@ impl FloatTy {\n }\n \n // Bind a type to an associated type: `A=Foo`.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1206,15 +1206,15 @@ pub struct TypeBinding {\n \n \n // NB PartialEq method appears below.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n     pub span: Span,\n }\n \n /// Not represented directly in the AST, referred to by name through a ty_path.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PrimTy {\n     TyInt(IntTy),\n     TyUint(UintTy),\n@@ -1224,15 +1224,15 @@ pub enum PrimTy {\n     TyChar\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n     TyVec(P<Ty>),\n@@ -1265,13 +1265,13 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum AsmDialect {\n     AsmAtt,\n     AsmIntel\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n@@ -1285,7 +1285,7 @@ pub struct InlineAsm {\n }\n \n /// represents an argument in a function header\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n@@ -1313,14 +1313,14 @@ impl Arg {\n }\n \n /// represents the header (not the body) of a function declaration\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n     pub output: FunctionRetTy,\n     pub variadic: bool\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -1353,7 +1353,7 @@ impl fmt::Debug for ImplPolarity {\n }\n \n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum FunctionRetTy {\n     /// Functions with return type ! that always\n     /// raise an error or exit (i.e. never return to the caller)\n@@ -1377,7 +1377,7 @@ impl FunctionRetTy {\n }\n \n /// Represents the kind of 'self' associated with a method\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ExplicitSelf_ {\n     /// No self\n     SelfStatic,\n@@ -1391,15 +1391,15 @@ pub enum ExplicitSelf_ {\n \n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Method {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub node: Method_,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Method_ {\n     /// Represents a method declaration\n     MethDecl(Ident,\n@@ -1414,7 +1414,7 @@ pub enum Method_ {\n     MethMac(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1423,30 +1423,30 @@ pub struct Mod {\n     pub items: Vec<P<Item>>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ForeignMod {\n     pub abi: Abi,\n     pub items: Vec<P<ForeignItem>>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct VariantArg {\n     pub ty: P<Ty>,\n     pub id: NodeId,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum VariantKind {\n     TupleVariantKind(Vec<VariantArg>),\n     StructVariantKind(P<StructDef>),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1458,7 +1458,7 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PathListItem_ {\n     PathListIdent { name: Ident, id: NodeId },\n     PathListMod { id: NodeId }\n@@ -1476,7 +1476,7 @@ pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ViewPath_ {\n \n     /// `foo::bar::baz as quux`\n@@ -1499,17 +1499,17 @@ pub type Attribute = Spanned<Attribute_>;\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub struct AttrId(pub usize);\n \n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Attribute_ {\n     pub id: AttrId,\n     pub style: AttrStyle,\n@@ -1522,13 +1522,13 @@ pub struct Attribute_ {\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n /// same as the impl's node id).\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n     pub bound_lifetimes: Vec<LifetimeDef>,\n@@ -1537,7 +1537,7 @@ pub struct PolyTraitRef {\n     pub trait_ref: TraitRef,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -1552,7 +1552,7 @@ impl Visibility {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField_ {\n     pub kind: StructFieldKind,\n     pub id: NodeId,\n@@ -1571,7 +1571,7 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n@@ -1587,7 +1587,7 @@ impl StructFieldKind {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n@@ -1600,7 +1600,7 @@ pub struct StructDef {\n   FIXME (#3300): Should allow items to be anonymous. Right now\n   we just use dummy names for anon items.\n  */\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Item {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1610,7 +1610,7 @@ pub struct Item {\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n     // Optional location (containing arbitrary characters) from which\n     // to fetch the crate sources.\n@@ -1661,7 +1661,7 @@ impl Item_ {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1671,7 +1671,7 @@ pub struct ForeignItem {\n     pub vis: Visibility,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ForeignItem_ {\n     ForeignItemFn(P<FnDecl>, Generics),\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n@@ -1686,7 +1686,7 @@ impl ForeignItem_ {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum ClosureKind {\n     FnClosureKind,\n     FnMutClosureKind,\n@@ -1696,7 +1696,7 @@ pub enum ClosureKind {\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum InlinedItem {\n     IIItem(P<Item>),\n     IITraitItem(DefId /* impl id */, TraitItem),\n@@ -1707,7 +1707,7 @@ pub enum InlinedItem {\n /// A macro definition, in this crate or imported from another.\n ///\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MacroDef {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,"}, {"sha": "81c03fdfb9bb6cb63941611af5485207f791183a", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -32,7 +32,7 @@ use std::slice;\n \n pub mod blocks;\n \n-#[derive(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum PathElem {\n     PathMod(Name),\n     PathName(Name)\n@@ -104,7 +104,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     }).to_string()\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),\n@@ -126,7 +126,7 @@ pub enum Node<'ast> {\n \n /// Represents an entry and its parent Node ID\n /// The odd layout is to bring down the total size.\n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum MapEntry<'ast> {\n     /// Placeholder for holes in the map.\n     NotPresent,\n@@ -157,7 +157,7 @@ impl<'ast> Clone for MapEntry<'ast> {\n     }\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct InlinedParent {\n     path: Vec<PathElem>,\n     ii: InlinedItem"}, {"sha": "a1281a1f689ff6e5f82e1bad701e127cd1aba4fb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -352,7 +352,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[derive(RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "4427a7aaf021b34e6578f7dcc09be61a99e3f686", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -346,7 +346,7 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n }\n \n /// Represents the #[deprecated] and friends attributes.\n-#[derive(RustcEncodable,RustcDecodable,Clone,Show)]\n+#[derive(RustcEncodable,RustcDecodable,Clone,Debug)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: InternedString,\n@@ -358,7 +358,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Show,Copy)]\n+#[derive(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Debug,Copy)]\n pub enum StabilityLevel {\n     Unstable,\n     Stable,\n@@ -570,7 +570,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[derive(PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -589,7 +589,7 @@ impl ReprAttr {\n     }\n }\n \n-#[derive(Eq, Hash, PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "8adb9b24222392a030f2358494e99316d4b6f3aa", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -36,13 +36,13 @@ pub trait Pos {\n \n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n /// a lot of them.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Debug)]\n pub struct BytePos(pub u32);\n \n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[derive(Copy, PartialEq, Hash, PartialOrd, Show)]\n+#[derive(Copy, PartialEq, Hash, PartialOrd, Debug)]\n pub struct CharPos(pub usize);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -94,7 +94,7 @@ impl Sub for CharPos {\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n /// to the original source.\n-#[derive(Clone, Copy, Show, Hash)]\n+#[derive(Clone, Copy, Debug, Hash)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -110,7 +110,7 @@ pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n                                          hi: BytePos(0),\n                                          expn_id: COMMAND_LINE_EXPN };\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,\n@@ -193,15 +193,15 @@ pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }\n pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n-#[derive(Clone, Copy, Hash, Show)]\n+#[derive(Clone, Copy, Hash, Debug)]\n pub enum MacroFormat {\n     /// e.g. #[derive(...)] <item>\n     MacroAttribute,\n     /// e.g. `format!()`\n     MacroBang\n }\n \n-#[derive(Clone, Hash, Show)]\n+#[derive(Clone, Hash, Debug)]\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n     /// with this Span.\n@@ -215,7 +215,7 @@ pub struct NameAndSpan {\n }\n \n /// Extra information for tracking macro expansion of spans\n-#[derive(Hash, Show)]\n+#[derive(Hash, Debug)]\n pub struct ExpnInfo {\n     /// The location of the actual macro invocation, e.g. `let x =\n     /// foo!();`\n@@ -236,7 +236,7 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[derive(PartialEq, Eq, Clone, Show, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub struct ExpnId(u32);\n \n pub const NO_EXPANSION: ExpnId = ExpnId(-1);"}, {"sha": "821ac8e2f89bc1c0db6f5488c36f96e840beef8d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -234,7 +234,7 @@ pub fn mk_handler(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n     }\n }\n \n-#[derive(Copy, PartialEq, Clone, Show)]\n+#[derive(Copy, PartialEq, Clone, Debug)]\n pub enum Level {\n     Bug,\n     Fatal,"}, {"sha": "a184cc5c2b296820c3c0fe50772cf6e0bb105cb4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -73,7 +73,7 @@ impl<F> ItemModifier for F\n     }\n }\n \n-#[derive(Show,Clone)]\n+#[derive(Debug,Clone)]\n pub enum Annotatable {\n     Item(P<ast::Item>),\n     TraitItem(ast::TraitItem),"}, {"sha": "1b84d93738d5e6c2bec3e1edb712fcf67e05fc1f", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -1154,7 +1154,7 @@ impl<'a> MethodDef<'a> {\n             // to an uninhabited type (e.g. a zero-variant enum or a\n             // type holding such an enum), but do not feature-gate\n             // zero-variant enums themselves, then attempting to\n-            // derive Show on such a type could here generate code\n+            // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n             return cx.expr_unreachable(sp);"}, {"sha": "b6563d77b8864e7df854dd6be4dbee1af75fecae", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -38,7 +38,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -309,7 +309,7 @@ mod tests {\n \n     // because of the SCTable, I now need a tidy way of\n     // creating syntax objects. Sigh.\n-    #[derive(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Debug)]\n     enum TestSC {\n         M(Mrk),\n         R(Ident,Name)"}, {"sha": "493a97c24cff492421e7f3cc4fe4a077048a79b5", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -52,7 +52,7 @@ pub trait Reader {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Show)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct TokenAndSpan {\n     pub tok: token::Token,\n     pub sp: Span,"}, {"sha": "1ef33a2401e1b0fe57856acae435a455706f1d95", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -29,7 +29,7 @@ use std::path::BytesContainer;\n use std::rc::Rc;\n \n #[allow(non_camel_case_types)]\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum BinOpToken {\n     Plus,\n     Minus,\n@@ -44,7 +44,7 @@ pub enum BinOpToken {\n }\n \n /// A delimiter token\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum DelimToken {\n     /// A round parenthesis: `(` or `)`\n     Paren,\n@@ -54,14 +54,14 @@ pub enum DelimToken {\n     Brace,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n     ModName,\n     Plain,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum SpecialMacroVar {\n     /// `$crate` will be filled in with the name of the crate a macro was\n     /// imported from, if any.\n@@ -76,7 +76,7 @@ impl SpecialMacroVar {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum Lit {\n     Byte(ast::Name),\n     Char(ast::Name),\n@@ -102,7 +102,7 @@ impl Lit {\n }\n \n #[allow(non_camel_case_types)]\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug)]\n pub enum Token {\n     /* Expression-operator symbols. */\n     Eq,"}, {"sha": "d126717ce6817bce3520c57ed5b0847f78d890a0", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -24,7 +24,7 @@ use self::parm::{expand, Number, Variables};\n \n \n /// A parsed terminfo database entry.\n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct TermInfo {\n     /// Names for the terminal\n     pub names: Vec<String> ,"}, {"sha": "88a84b4c9da56415966a8ea888d51af3aebe9493", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -97,7 +97,7 @@ pub mod stats;\n // colons. This way if some test runner wants to arrange the tests\n // hierarchically it may.\n \n-#[derive(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum TestName {\n     StaticTestName(&'static str),\n     DynTestName(String)\n@@ -198,15 +198,15 @@ pub struct Bencher {\n     pub bytes: u64,\n }\n \n-#[derive(Copy, Clone, Show, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ShouldFail {\n     No,\n     Yes(Option<&'static str>)\n }\n \n // The definition of a single test. A test runner will run a list of\n // these.\n-#[derive(Clone, Show, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n@@ -215,13 +215,13 @@ pub struct TestDesc {\n \n unsafe impl Send for TestDesc {}\n \n-#[derive(Show)]\n+#[derive(Debug)]\n pub struct TestDescAndFn {\n     pub desc: TestDesc,\n     pub testfn: TestFn,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug, Copy)]\n pub struct Metric {\n     value: f64,\n     noise: f64"}, {"sha": "370f59a5b2679300829e56b97f95f5e2efd72ead", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -410,7 +410,7 @@ pub struct Utf16Items<'a> {\n     iter: slice::Iter<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n-#[derive(Copy, PartialEq, Eq, Clone, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Debug)]\n pub enum Utf16Item {\n     /// A valid codepoint.\n     ScalarValue(char),"}, {"sha": "1c10a270acc6c9ff1d2e708967ca0a8e5ca4a4f4", "filename": "src/rustbook/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ferror.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n //! Error handling utilities. WIP.\n \n use std::fmt;\n-use std::fmt::{Show, Formatter};\n+use std::fmt::{Debug, Formatter};\n \n use std::old_io::IoError;\n \n@@ -32,7 +32,7 @@ pub trait FromError<E> {\n     fn from_err(err: E) -> Self;\n }\n \n-impl Show for Box<Error + 'static> {\n+impl Debug for Box<Error + 'static> {\n     fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.description())\n     }"}, {"sha": "36442ed6c193114ae722f1eb05db77845f0029e8", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -14,7 +14,7 @@ use std::ops::{Add, Sub, Mul};\n pub trait MyNum : Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + PartialEq + Clone {\n }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n pub struct MyInt {\n     pub val: int\n }"}, {"sha": "7fad2c9b4be994231cd3eba77b94e6f21558fa61", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -61,7 +61,7 @@ enum Color {\n     Blue,\n }\n \n-impl fmt::Show for Color {\n+impl fmt::Debug for Color {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {\n             Red => \"red\",\n@@ -104,7 +104,7 @@ fn show_digit(nn: uint) -> &'static str {\n }\n \n struct Number(uint);\n-impl fmt::Show for Number {\n+impl fmt::Debug for Number {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut out = vec![];\n         let Number(mut num) = *self;"}, {"sha": "e34756229bdfab9e31361ccc87e603ca4402edc1", "filename": "src/test/compile-fail/attr-before-eof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)] //~ERROR expected item after attributes\n+#[derive(Debug)] //~ERROR expected item after attributes"}, {"sha": "4e7d81a1cb0cc5f4f526149f8813c1bad72e2bb3", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n struct Foo {\n     string: String\n }"}, {"sha": "98402591e728aedf83ec8e26955d63dfc81e4012", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct foo {\n   i: isize,\n }"}, {"sha": "1d9099e8ed69bce92240590299eae92274cd6de4", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "ab31ca95bdb38c98ba3c4e8efd220136d61206cc", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "eb8ac4649f29af8e496280493566ee0158f8e785", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "b93db4ab535060990917a4cefe7152480358dbd3", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "bb44a6a8abb32de93f73fb0ab4671450ae015885", "filename": "src/test/compile-fail/doc-before-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n /// hi\n-#[derive(Show)] //~ERROR expected item after attributes\n+#[derive(Debug)] //~ERROR expected item after attributes"}, {"sha": "6d827fb86e2e8bcb099a5d05673142777666006c", "filename": "src/test/compile-fail/issue-17728.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -30,7 +30,7 @@ trait TraversesWorld {\n }\n \n \n-#[derive(Show, Eq, PartialEq, Hash)]\n+#[derive(Debug, Eq, PartialEq, Hash)]\n enum RoomDirection {\n     West,\n     East,\n@@ -97,7 +97,7 @@ impl Player {\n impl TraversesWorld for Player {\n }\n \n-impl Show for Player {\n+impl Debug for Player {\n     fn fmt(&self, formatter: &mut Formatter) -> Result<(), Error> {\n         formatter.write_str(\"Player{ name:\");\n         formatter.write_str(self.name.as_slice());"}, {"sha": "d5973abc462ed71cc65a254c97a374559dc39523", "filename": "src/test/compile-fail/issue-17905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Pair<T, V> (T, V);\n \n impl Pair<"}, {"sha": "c49959c16a62180c7c1b7276173585687d22c694", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let foo = 100;\n \n-    #[derive(Show)]\n+    #[derive(Debug)]\n     enum Stuff {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }"}, {"sha": "ae2847aab0963fe0dc652f98f438d7913a480b4f", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -13,11 +13,11 @@\n use std::thread::Thread;\n use std::rc::Rc;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Port<T>(Rc<T>);\n \n fn main() {\n-    #[derive(Show)]\n+    #[derive(Debug)]\n     struct foo {\n       _x: Port<()>,\n     }"}, {"sha": "df135c3a8e309cc9acd1f6f07d15376517613c66", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n // Test that a class with a non-copyable field can't be\n // copied\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct bar {\n   x: isize,\n }\n@@ -26,7 +26,7 @@ fn bar(x:isize) -> bar {\n     }\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct foo {\n   i: isize,\n   j: bar,"}, {"sha": "d6f274da967d11e4d227794bb7fb3929123e6bfe", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:non-scalar cast\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct foo {\n     x: isize\n }"}, {"sha": "1b164709ac73c4f7303144ae7c239840a06d62d1", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -23,7 +23,7 @@ struct Foo {\n     baz: usize\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Oof {\n     rab: u8,\n     zab: usize"}, {"sha": "88535ee04fb5b847fd23c21f4433d4d0331cdcf7", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct r {\n   b: bool,\n }"}, {"sha": "b9ddc3f4de98be154db9582d114361c5bd0f85c9", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -14,7 +14,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct r<'a> {\n   i: &'a Cell<isize>,\n }"}, {"sha": "cf64486c9c7bf4fa8ef06cc2cc92dd04d8cccdbd", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct r {\n   i:isize\n }"}, {"sha": "838ef338846a8dbb05ddf90cb1cf1bb43df039e7", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n struct Foo {\n     a: i8,\n     b: i16,"}, {"sha": "a9e93aa8df5cfe2f3f6133295867a6a95a2d335f", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -17,11 +17,11 @@\n extern crate macro_crate_test;\n \n #[into_foo]\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Debug)]\n fn foo() -> AFakeTypeThatHadBetterGoAway {}\n \n #[into_multi_foo]\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Debug)]\n fn foo() -> AnotherFakeTypeThatHadBetterGoAway {}\n \n trait Qux {"}, {"sha": "8771ed7a7424416fe8ef6d736bea83cc1660a51d", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Point { x : int }\n \n pub fn main() {"}, {"sha": "0e2f6ef056e6e5950c27d547c7029f681d973bf7", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Pair<T, U> { a: T, b: U }\n struct Triple { x: int, y: int, z: int }\n "}, {"sha": "30f10d23563b06c9caeea0c92294c2969c6f365c", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -59,7 +59,7 @@ fn test_ptr() {\n     }\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct p {\n   x: int,\n   y: int,"}, {"sha": "747aca5332465cfabbdb33630e88d0fcdcc8137b", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -13,7 +13,7 @@\n \n use std::mem::swap;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Ints {sum: Box<int>, values: Vec<int> }\n \n fn add_int(x: &mut Ints, v: int) {"}, {"sha": "83e7df1c711c6ca22a1e7e147266b2dd771001a2", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n \n use std::cmp;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n impl cmp::PartialEq for cat_type {"}, {"sha": "27c514160c069be271285c34875094ef5e751617", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct foo { a: int, b: int, c: int }\n \n impl cmp::PartialEq for foo {"}, {"sha": "6777cbdab960486a3b1e306301e5f7f7408597e6", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -20,21 +20,21 @@ mod submod {\n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Show, Rand,\n+               Debug, Rand,\n                Encodable, Decodable)]\n     enum A { A1(uint), A2(int) }\n \n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Show, Rand,\n+               Debug, Rand,\n                Encodable, Decodable)]\n     struct B { x: uint, y: int }\n \n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Show, Rand,\n+               Debug, Rand,\n                Encodable, Decodable)]\n     struct C(uint, int);\n "}, {"sha": "bf2c2b01e6a51a0512e0cc084841eb17fd89e516", "filename": "src/test/run-pass/deriving-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    #[derive(Show)]\n+    #[derive(Debug)]\n     struct Foo {\n         foo: int,\n     }"}, {"sha": "eb3cb30594ea808880b998a5c1513c054f038cb8", "filename": "src/test/run-pass/deriving-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n use std::num::FromPrimitive;\n use std::int;\n \n-#[derive(PartialEq, FromPrimitive, Show)]\n+#[derive(PartialEq, FromPrimitive, Debug)]\n enum A {\n     Foo = int::MAX,\n     Bar = 1,"}, {"sha": "92ffd82d90288275294d10a0dd795b68c727def4", "filename": "src/test/run-pass/deriving-via-extension-c-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum Foo {\n     Bar,\n     Baz,"}, {"sha": "9761a87d4aa992ab51a901cb2ccc9fe37612e5c7", "filename": "src/test/run-pass/deriving-via-extension-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum Foo {\n     Bar(int, int),\n     Baz(f64, f64)"}, {"sha": "9c929940eba28d420a423b4553d80c476c423a79", "filename": "src/test/run-pass/deriving-via-extension-struct-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo;\n \n pub fn main() {"}, {"sha": "ed92a3baab9aa6986846122c837b23f4bb8a6672", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum S {\n     X { x: int, y: int },\n     Y"}, {"sha": "9319a4f752dc62fa188850e469301d96537292c8", "filename": "src/test/run-pass/deriving-via-extension-struct-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo(int, int, String);\n \n pub fn main() {"}, {"sha": "e32e080cacb0a99f9ed12aaf765dda4e41b09254", "filename": "src/test/run-pass/deriving-via-extension-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "890b4e69783098ca6aa7da903a3a74cbc0c3ca6a", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Hash, Show)]\n+#[derive(PartialEq, Hash, Debug)]\n struct Foo<T> {\n     x: int,\n     y: T,"}, {"sha": "2474bb8a4f36c12ab0321ab8763164b6afe58168", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -14,7 +14,7 @@\n use std::thread::Thread;\n use std::sync::mpsc::{channel, Sender};\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum Message {\n     Dropped,\n     DestructorRan"}, {"sha": "6557594594565f33639b764f41644346338e8a69", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum chan { chan_t, }\n \n impl PartialEq for chan {"}, {"sha": "0242e53aa8c4ff761ec5d0cb0b8a23ad0bcc4f94", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -12,7 +12,7 @@ macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n-            #[derive(Copy, Show)]\n+            #[derive(Copy, Debug)]\n             enum E {\n                 V = $v,\n                 A = 0"}, {"sha": "ee2c07150435e9cb9a51e7fec7d3da6ef285a0c9", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -22,7 +22,7 @@ fn test_rec() {\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "e4ce71200b5f315f3425e8e00485305f72972e71", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -21,7 +21,7 @@ fn test_rec() {\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "1f48dc3bcf1d7dbba1bf20a1ab25342dded4b0cd", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub struct TwoU16s {\n     one: u16, two: u16\n }"}, {"sha": "171e2a647cc6386e9624b0f21908d0e9a04d17f9", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub struct TwoU32s {\n     one: u32, two: u32\n }"}, {"sha": "83555f6bb1d51dd2a7ac5af64fd1fa60ad76ff42", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "d2b13445e6a22d99d4b06dea9ca66992ec087080", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n pub struct TwoU8s {\n     one: u8, two: u8\n }"}, {"sha": "8c686aba5f358d37df243008f0c4f0d828fc0305", "filename": "src/test/run-pass/functional-struct-upd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Foo {\n     x: int,\n     y: int"}, {"sha": "e7ef1d42f5fc14486d2c97c77e7df61eeaa3930d", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -47,10 +47,10 @@ fn default_foo(x: Foo) {\n     assert_eq!(x.baz(), (1, 'a'));\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct BazHelper<T>(T);\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n // Ensure that we can use previous type parameters in defaults.\n struct Baz<T, U = BazHelper<T>, V = Option<U>>(T, U, V);\n "}, {"sha": "7095812ce4b6eaa7ead8102e599a2d3fd6126895", "filename": "src/test/run-pass/issue-10396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-10396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-10396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10396.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Foo<'s> {\n     V(&'s str)\n }"}, {"sha": "953701441256abde027776311a340dad9d102d16", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct MyStruct;\n \n trait Repro {"}, {"sha": "8f76e9fb4c1f35777eee233d13b11c4dff945d93", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ extern crate serialize;\n use serialize::{Encodable, Decodable};\n use serialize::json;\n \n-#[derive(Encodable, Decodable, PartialEq, Show)]\n+#[derive(Encodable, Decodable, PartialEq, Debug)]\n struct UnitLikeStruct;\n \n pub fn main() {"}, {"sha": "f30991a19635251797a88dc08e06e72980789f41", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Bar {\n     x: int\n }\n@@ -21,7 +21,7 @@ impl Drop for Bar {\n     }\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo {\n     x: Bar,\n     a: int"}, {"sha": "9557d7e4fa816d5f8afa37fd16551f05f447d8e1", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct LifetimeStruct<'a>;\n \n fn main() {"}, {"sha": "37d054539146d6eb2bcf6b630baa09ceb650538b", "filename": "src/test/run-pass/issue-19358.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19358.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,12 +10,12 @@\n \n trait Trait {}\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Foo<T: Trait> {\n     foo: T,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Bar<T> where T: Trait {\n     bar: T,\n }"}, {"sha": "b8a541a0fc4de70876fe5240ec7efebbbc8e6192", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -33,7 +33,7 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    #[derive(PartialEq, Show)]\n+    #[derive(PartialEq, Debug)]\n     #[repr(int)]\n     pub enum state {\n         empty,"}, {"sha": "8a67d84cb640c31e32ec0808e4257ee192448355", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -27,7 +27,7 @@ enum square {\n     empty\n }\n \n-impl fmt::Show for square {\n+impl fmt::Debug for square {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", match *self {\n           bot => { \"R\".to_string() }"}, {"sha": "2bd270f9b0fc6facc32b99ef3c86bbd8c80fd628", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Token {\n     Text(String),\n     ETag(Vec<String>, String),"}, {"sha": "6ac252c07ef793eb918e0dda836166dce90919b3", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ trait T {\n     fn print(&self);\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct S {\n     s: int,\n }"}, {"sha": "eda2057f6d6afbc70cb4266d4f6a5e2ef727828c", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -12,9 +12,9 @@ trait IDummy {\n     fn do_nothing(&self);\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct A { a: int }\n-#[derive(Show)]\n+#[derive(Debug)]\n struct B<'a> { b: int, pa: &'a A }\n \n     impl IDummy for A {"}, {"sha": "ce598c5d38279d3258ea67d16399ff5da9b4c072", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Numbers {\n     Three\n }"}, {"sha": "644efe20ded1c0a6895f724b4610527b21bae850", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -17,7 +17,7 @@ use std::thread::Thread;\n \n struct Foo(Cell<int>);\n \n-impl fmt::Show for Foo {\n+impl fmt::Debug for Foo {\n     fn fmt(&self, _fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Foo(ref f) = *self;\n         assert!(f.get() == 0);"}, {"sha": "726f205f5c4201f295a5d6a5517426ef09f571db", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -27,10 +27,10 @@ impl<T> S<T> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n struct A((u32, u32));\n \n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n struct B(u64);\n \n pub fn main() {"}, {"sha": "bd0a53b620c0a9252d512a82fdda5be261944cd8", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ struct Thingy {\n     y: int\n }\n \n-impl fmt::Show for Thingy {\n+impl fmt::Debug for Thingy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{{ x: {:?}, y: {:?} }}\", self.x, self.y)\n     }\n@@ -25,7 +25,7 @@ struct PolymorphicThingy<T> {\n     x: T\n }\n \n-impl<T:fmt::Show> fmt::Show for PolymorphicThingy<T> {\n+impl<T:fmt::Debug> fmt::Debug for PolymorphicThingy<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}\", self.x)\n     }"}, {"sha": "5952258e46c32f61ae1a6a155a4d46da7ca6788e", "filename": "src/test/run-pass/newtype-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo(uint);\n \n fn foo() -> Foo {"}, {"sha": "4ce6fcee8c78e06dfaf0efc7fcebe45f99cbea25", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -13,7 +13,7 @@\n \n use std::ops;\n \n-#[derive(Show,PartialEq,Eq)]\n+#[derive(Debug,PartialEq,Eq)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "3ddc666cd384c0ce2c551b5df122201a48992a4a", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n use std::ops;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "cc36b625c35d50f728902e1ee8c2c80e3c77e119", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -48,7 +48,7 @@ impl<T> DerefMut for DerefCounter<T> {\n     }\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "59e3a807d5a3663cb52eccf4da88088b9d38e25c", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::num::ToPrimitive;\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "d02951e981ea5a21cdef42781f95b6ef4ac3e440", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -15,7 +15,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "847688ce0457c96b22639b7bb12008ad782dede1", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -13,7 +13,7 @@\n use std::mem;\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Debug)]\n struct Foo {\n     bar: u8,\n     baz: u64"}, {"sha": "34ff7acfca47780a2690a7ef4fac665389fb2357", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -27,7 +27,7 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),"}, {"sha": "ff38b02ae7635563310253c8364aaca837be82a7", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -12,7 +12,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct r<'a> {\n     i: &'a Cell<int>,\n }"}, {"sha": "ebf2fbbe53c2d286a92128a2d181b4de54352fc4", "filename": "src/test/run-pass/struct-lit-functional-no-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show,PartialEq,Clone)]\n+#[derive(Debug,PartialEq,Clone)]\n struct Foo<T> {\n     bar: T,\n     baz: T"}, {"sha": "8f75b763d9635641b3d1a4b56637f8762878e298", "filename": "src/test/run-pass/struct-partial-move-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n pub struct Partial<T> { x: T, y: T }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }"}, {"sha": "377e9e6b89afcb0b402dd8662ea1b4e3f94ff0cb", "filename": "src/test/run-pass/struct-partial-move-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n pub struct Partial<T> { x: T, y: T }\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }"}, {"sha": "d87ff64ebd9122b9b1e74888394667af0a8e2ba1", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-#[derive(Copy, Show)]\n+#[derive(Copy, Debug)]\n enum foo { large, small, }\n \n impl PartialEq for foo {"}, {"sha": "fba3f9fb0d028f411b5d55d1016fd02d914c3429", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,"}, {"sha": "1d297c04c825764f6925acfc7574f1093cfc0784", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -46,7 +46,7 @@ fn test_str() {\n     assert_eq!(s1.as_bytes()[3], 't' as u8);\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum t {\n     tag1,\n     tag2(int),"}, {"sha": "4cd9fbeba9c1d59d5713480eefa5ff6ed2fb5c40", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -12,7 +12,7 @@ use std::cmp::PartialEq;\n \n trait MyNum : PartialEq { }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct MyInt { val: int }\n \n impl PartialEq for MyInt {"}, {"sha": "893f782cba4369dc16e5f2987c24bdc74acfb211", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -13,7 +13,7 @@ use std::ops::{Add, Sub, Mul};\n \n trait MyNum : Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + PartialEq + Clone { }\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n struct MyInt { val: int }\n \n impl Add for MyInt {"}, {"sha": "7773bf647f9988acd389129e038dd889a9dd8c07", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Foo(int, int);\n \n pub fn main() {"}, {"sha": "bcd62e92b4619d1edfe8972ab279a4ce13ca4b4a", "filename": "src/test/run-pass/tuple-struct-constructor-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Foo(int);\n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n struct Bar(int, int);\n \n pub fn main() {"}, {"sha": "29064f4805339aaa17b7575c75a1840364a68cec", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788181d4055747b5307f186a873ab5d2acd29994/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=788181d4055747b5307f186a873ab5d2acd29994", "patch": "@@ -30,7 +30,7 @@ fn main(){\n     let mut f = bar(&x);\n     assert_eq!(f.call_mut(()), &x);\n \n-    #[derive(Clone, Copy, Show, PartialEq)]\n+    #[derive(Clone, Copy, Debug, PartialEq)]\n     struct Foo(uint, &'static str);\n \n     let x = Foo(42, \"forty-two\");"}]}