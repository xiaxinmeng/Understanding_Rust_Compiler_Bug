{"sha": "f4b07e0713b2d82417968db08cd0575734cdac0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjA3ZTA3MTNiMmQ4MjQxNzk2OGRiMDhjZDA1NzU3MzRjZGFjMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T09:10:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T09:10:35Z"}, "message": "Auto merge of #56490 - faern:add-checked-add-to-instant, r=alexcrichton\n\nAdd checked_add method to Instant time type\n\nAppending functionality to the already opened topic of `checked_add` on time types over at #55940.\n\nDoing checked addition between an `Instant` and a `Duration` is important to reliably determine a future instant. We could use this in the `parking_lot` crate to compute an instant when in the future to wake a thread up without risking a panic.", "tree": {"sha": "3d0e3c2bafe69d07c7cd3d1d85ef679da42d2797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d0e3c2bafe69d07c7cd3d1d85ef679da42d2797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b07e0713b2d82417968db08cd0575734cdac0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b07e0713b2d82417968db08cd0575734cdac0d", "html_url": "https://github.com/rust-lang/rust/commit/f4b07e0713b2d82417968db08cd0575734cdac0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b07e0713b2d82417968db08cd0575734cdac0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664ede88faf57b8fc09715fc66cd9e46490ce64d", "url": "https://api.github.com/repos/rust-lang/rust/commits/664ede88faf57b8fc09715fc66cd9e46490ce64d", "html_url": "https://github.com/rust-lang/rust/commit/664ede88faf57b8fc09715fc66cd9e46490ce64d"}, {"sha": "9e5e89a0d37b06e4f6915809b6a21409727acdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5e89a0d37b06e4f6915809b6a21409727acdc1", "html_url": "https://github.com/rust-lang/rust/commit/9e5e89a0d37b06e4f6915809b6a21409727acdc1"}], "stats": {"total": 316, "additions": 150, "deletions": 166}, "files": [{"sha": "3229d98624e17930c35c66be4c64922395bcb1ce", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -13,7 +13,7 @@ use mem;\n use sync::atomic::{AtomicU32, Ordering};\n use sys::cloudabi::abi;\n use sys::mutex::{self, Mutex};\n-use sys::time::dur2intervals;\n+use sys::time::checked_dur2intervals;\n use time::Duration;\n \n extern \"C\" {\n@@ -114,6 +114,8 @@ impl Condvar {\n \n         // Call into the kernel to wait on the condition variable.\n         let condvar = self.condvar.get();\n+        let timeout = checked_dur2intervals(&dur)\n+            .expect(\"overflow converting duration to nanoseconds\");\n         let subscriptions = [\n             abi::subscription {\n                 type_: abi::eventtype::CONDVAR,\n@@ -132,7 +134,7 @@ impl Condvar {\n                 union: abi::subscription_union {\n                     clock: abi::subscription_clock {\n                         clock_id: abi::clockid::MONOTONIC,\n-                        timeout: dur2intervals(&dur),\n+                        timeout,\n                         ..mem::zeroed()\n                     },\n                 },"}, {"sha": "177321439d83cec4940e0c41dd22083a028db4b2", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -16,7 +16,7 @@ use libc;\n use mem;\n use ptr;\n use sys::cloudabi::abi;\n-use sys::time::dur2intervals;\n+use sys::time::checked_dur2intervals;\n use sys_common::thread::*;\n use time::Duration;\n \n@@ -70,13 +70,15 @@ impl Thread {\n     }\n \n     pub fn sleep(dur: Duration) {\n+        let timeout = checked_dur2intervals(&dur)\n+            .expect(\"overflow converting duration to nanoseconds\");\n         unsafe {\n             let subscription = abi::subscription {\n                 type_: abi::eventtype::CLOCK,\n                 union: abi::subscription_union {\n                     clock: abi::subscription_clock {\n                         clock_id: abi::clockid::MONOTONIC,\n-                        timeout: dur2intervals(&dur),\n+                        timeout,\n                         ..mem::zeroed()\n                     },\n                 },"}, {"sha": "c9fea18fda6ec011404d7137722232f8d7922f1f", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -19,15 +19,10 @@ pub struct Instant {\n     t: abi::timestamp,\n }\n \n-fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n+pub fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n     dur.as_secs()\n-        .checked_mul(NSEC_PER_SEC)\n-        .and_then(|nanos| nanos.checked_add(dur.subsec_nanos() as abi::timestamp))\n-}\n-\n-pub fn dur2intervals(dur: &Duration) -> abi::timestamp {\n-    checked_dur2intervals(dur)\n-        .expect(\"overflow converting duration to nanoseconds\")\n+        .checked_mul(NSEC_PER_SEC)?\n+        .checked_add(dur.subsec_nanos() as abi::timestamp)\n }\n \n impl Instant {\n@@ -47,20 +42,16 @@ impl Instant {\n         Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant {\n-            t: self.t\n-                .checked_add(dur2intervals(other))\n-                .expect(\"overflow when adding duration to instant\"),\n-        }\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant {\n+            t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+        })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant {\n-            t: self.t\n-                .checked_sub(dur2intervals(other))\n-                .expect(\"overflow when subtracting duration from instant\"),\n-        }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant {\n+            t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+        })\n     }\n }\n \n@@ -95,23 +86,16 @@ impl SystemTime {\n         }\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        self.checked_add_duration(other)\n-            .expect(\"overflow when adding duration to instant\")\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        checked_dur2intervals(other)\n-            .and_then(|d| self.t.checked_add(d))\n-            .map(|t| SystemTime {t})\n+        Some(SystemTime {\n+            t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+        })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime {\n-            t: self.t\n-                .checked_sub(dur2intervals(other))\n-                .expect(\"overflow when subtracting duration from instant\"),\n-        }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime {\n+            t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+        })\n     }\n }\n "}, {"sha": "cb2eab52211811cd839217d3d2419ee922be2a6a", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -41,10 +41,6 @@ impl Timespec {\n         }\n     }\n \n-    fn add_duration(&self, other: &Duration) -> Timespec {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n@@ -67,27 +63,25 @@ impl Timespec {\n         })\n     }\n \n-    fn sub_duration(&self, other: &Duration) -> Timespec {\n+    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `i64`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n-            .expect(\"overflow when subtracting duration from time\");\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n-            secs = secs.checked_sub(1).expect(\"overflow when subtracting \\\n-                                               duration from time\");\n+            secs = secs.checked_sub(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: syscall::TimeSpec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n-        }\n+        })\n     }\n }\n \n@@ -150,12 +144,12 @@ impl Instant {\n         })\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant { t: self.t.add_duration(other) }\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant { t: self.t.checked_add_duration(other)? })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant { t: self.t.sub_duration(other) }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant { t: self.t.checked_sub_duration(other)? })\n     }\n }\n \n@@ -178,16 +172,12 @@ impl SystemTime {\n         self.t.sub_timespec(&other.t)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime { t: self.t.add_duration(other) }\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+        Some(SystemTime { t: self.t.checked_add_duration(other)? })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime { t: self.t.sub_duration(other) }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n     }\n }\n "}, {"sha": "196e1a97fc44f72aa863a444ece2022b832903fc", "filename": "src/libstd/sys/sgx/time.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -28,12 +28,12 @@ impl Instant {\n         self.0 - other.0\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 + *other)\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_sub(*other)?))\n     }\n }\n \n@@ -47,15 +47,11 @@ impl SystemTime {\n         self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 + *other)\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        self.0.checked_add(*other).map(|d| SystemTime(d))\n+        Some(SystemTime(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime(self.0.checked_sub(*other)?))\n     }\n }"}, {"sha": "8f8aaa88b22653979f957dc134f25f660fd788a2", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 28, "deletions": 44, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -42,10 +42,6 @@ impl Timespec {\n         }\n     }\n \n-    fn add_duration(&self, other: &Duration) -> Timespec {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n@@ -68,27 +64,25 @@ impl Timespec {\n         })\n     }\n \n-    fn sub_duration(&self, other: &Duration) -> Timespec {\n+    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n-            .expect(\"overflow when subtracting duration from time\");\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n-            secs = secs.checked_sub(1).expect(\"overflow when subtracting \\\n-                                               duration from time\");\n+            secs = secs.checked_sub(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: libc::timespec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as _,\n             },\n-        }\n+        })\n     }\n }\n \n@@ -165,18 +159,16 @@ mod inner {\n             Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> Instant {\n-            Instant {\n-                t: self.t.checked_add(dur2intervals(other))\n-                       .expect(\"overflow when adding duration to instant\"),\n-            }\n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant {\n+                t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+            })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> Instant {\n-            Instant {\n-                t: self.t.checked_sub(dur2intervals(other))\n-                       .expect(\"overflow when subtracting duration from instant\"),\n-            }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant {\n+                t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+            })\n         }\n     }\n \n@@ -199,16 +191,12 @@ mod inner {\n             self.t.sub_timespec(&other.t)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.add_duration(other) }\n-        }\n-\n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n \n@@ -236,12 +224,12 @@ mod inner {\n         }\n     }\n \n-    fn dur2intervals(dur: &Duration) -> u64 {\n+    fn checked_dur2intervals(dur: &Duration) -> Option<u64> {\n+        let nanos = dur.as_secs()\n+            .checked_mul(NSEC_PER_SEC)?\n+            .checked_add(dur.subsec_nanos() as u64)?;\n         let info = info();\n-        let nanos = dur.as_secs().checked_mul(NSEC_PER_SEC).and_then(|nanos| {\n-            nanos.checked_add(dur.subsec_nanos() as u64)\n-        }).expect(\"overflow converting duration to nanoseconds\");\n-        mul_div_u64(nanos, info.denom as u64, info.numer as u64)\n+        Some(mul_div_u64(nanos, info.denom as u64, info.numer as u64))\n     }\n \n     fn info() -> &'static libc::mach_timebase_info {\n@@ -299,12 +287,12 @@ mod inner {\n             })\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> Instant {\n-            Instant { t: self.t.add_duration(other) }\n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> Instant {\n-            Instant { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n \n@@ -327,16 +315,12 @@ mod inner {\n             self.t.sub_timespec(&other.t)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.add_duration(other) }\n-        }\n-\n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n "}, {"sha": "cc56773e0ea8efc9d76b8ce36f708004ea7885cd", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -28,12 +28,12 @@ impl Instant {\n         self.0 - other.0\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 + *other)\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_sub(*other)?))\n     }\n }\n \n@@ -47,15 +47,11 @@ impl SystemTime {\n         self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 + *other)\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        self.0.checked_add(*other).map(|d| SystemTime(d))\n+        Some(SystemTime(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime(self.0.checked_sub(*other)?))\n     }\n }"}, {"sha": "bb2c97ea149d2a6ccbc05d7dbaed8c6e2d2e55ea", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -68,30 +68,27 @@ impl Instant {\n         Duration::new(nanos / NANOS_PER_SEC, (nanos % NANOS_PER_SEC) as u32)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n         let freq = frequency() as u64;\n-        let t = other.as_secs().checked_mul(freq).and_then(|i| {\n-            (self.t as u64).checked_add(i)\n-        }).and_then(|i| {\n-            i.checked_add(mul_div_u64(other.subsec_nanos() as u64, freq,\n-                                      NANOS_PER_SEC))\n-        }).expect(\"overflow when adding duration to time\");\n-        Instant {\n+        let t = other.as_secs()\n+            .checked_mul(freq)?\n+            .checked_add(mul_div_u64(other.subsec_nanos() as u64, freq, NANOS_PER_SEC))?\n+            .checked_add(self.t as u64)?;\n+        Some(Instant {\n             t: t as c::LARGE_INTEGER,\n-        }\n+        })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n         let freq = frequency() as u64;\n         let t = other.as_secs().checked_mul(freq).and_then(|i| {\n             (self.t as u64).checked_sub(i)\n         }).and_then(|i| {\n-            i.checked_sub(mul_div_u64(other.subsec_nanos() as u64, freq,\n-                                      NANOS_PER_SEC))\n-        }).expect(\"overflow when subtracting duration from time\");\n-        Instant {\n+            i.checked_sub(mul_div_u64(other.subsec_nanos() as u64, freq, NANOS_PER_SEC))\n+        })?;\n+        Some(Instant {\n             t: t as c::LARGE_INTEGER,\n-        }\n+        })\n     }\n }\n \n@@ -127,20 +124,14 @@ impl SystemTime {\n         }\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        checked_dur2intervals(other)\n-            .and_then(|d| self.intervals().checked_add(d))\n-            .map(|i| SystemTime::from_intervals(i))\n+        let intervals = self.intervals().checked_add(checked_dur2intervals(other)?)?;\n+        Some(SystemTime::from_intervals(intervals))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        let intervals = self.intervals().checked_sub(dur2intervals(other))\n-                            .expect(\"overflow when subtracting from time\");\n-        SystemTime::from_intervals(intervals)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        let intervals = self.intervals().checked_sub(checked_dur2intervals(other)?)?;\n+        Some(SystemTime::from_intervals(intervals))\n     }\n }\n \n@@ -184,16 +175,12 @@ impl Hash for SystemTime {\n     }\n }\n \n-fn checked_dur2intervals(d: &Duration) -> Option<i64> {\n-    d.as_secs()\n-        .checked_mul(INTERVALS_PER_SEC)\n-        .and_then(|i| i.checked_add(d.subsec_nanos() as u64 / 100))\n-        .and_then(|i| i.try_into().ok())\n-}\n-\n-fn dur2intervals(d: &Duration) -> i64 {\n-    checked_dur2intervals(d)\n-        .expect(\"overflow when converting duration to intervals\")\n+fn checked_dur2intervals(dur: &Duration) -> Option<i64> {\n+    dur.as_secs()\n+        .checked_mul(INTERVALS_PER_SEC)?\n+        .checked_add(dur.subsec_nanos() as u64 / 100)?\n+        .try_into()\n+        .ok()\n }\n \n fn intervals2dur(intervals: u64) -> Duration {"}, {"sha": "63cede79e4843503573cd6b96f3a15cddacd8a9b", "filename": "src/libstd/time.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b07e0713b2d82417968db08cd0575734cdac0d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=f4b07e0713b2d82417968db08cd0575734cdac0d", "patch": "@@ -208,14 +208,31 @@ impl Instant {\n     pub fn elapsed(&self) -> Duration {\n         Instant::now() - *self\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n+    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_add(&self, duration: Duration) -> Option<Instant> {\n+        self.0.checked_add_duration(&duration).map(|t| Instant(t))\n+    }\n+\n+    /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n+    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_sub(&self, duration: Duration) -> Option<Instant> {\n+        self.0.checked_sub_duration(&duration).map(|t| Instant(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Add<Duration> for Instant {\n     type Output = Instant;\n \n     fn add(self, other: Duration) -> Instant {\n-        Instant(self.0.add_duration(&other))\n+        self.checked_add(other)\n+            .expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -231,7 +248,8 @@ impl Sub<Duration> for Instant {\n     type Output = Instant;\n \n     fn sub(self, other: Duration) -> Instant {\n-        Instant(self.0.sub_duration(&other))\n+        self.checked_sub(other)\n+            .expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -365,14 +383,23 @@ impl SystemTime {\n     pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {\n         self.0.checked_add_duration(&duration).map(|t| SystemTime(t))\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n+    /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_sub(&self, duration: Duration) -> Option<SystemTime> {\n+        self.0.checked_sub_duration(&duration).map(|t| SystemTime(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Add<Duration> for SystemTime {\n     type Output = SystemTime;\n \n     fn add(self, dur: Duration) -> SystemTime {\n-        SystemTime(self.0.add_duration(&dur))\n+        self.checked_add(dur)\n+            .expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -388,7 +415,8 @@ impl Sub<Duration> for SystemTime {\n     type Output = SystemTime;\n \n     fn sub(self, dur: Duration) -> SystemTime {\n-        SystemTime(self.0.sub_duration(&dur))\n+        self.checked_sub(dur)\n+            .expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -521,6 +549,20 @@ mod tests {\n \n         let second = Duration::new(1, 0);\n         assert_almost_eq!(a - second + second, a);\n+        assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n+\n+        // checked_add_duration will not panic on overflow\n+        let mut maybe_t = Some(Instant::now());\n+        let max_duration = Duration::from_secs(u64::max_value());\n+        // in case `Instant` can store `>= now + max_duration`.\n+        for _ in 0..2 {\n+            maybe_t = maybe_t.and_then(|t| t.checked_add(max_duration));\n+        }\n+        assert_eq!(maybe_t, None);\n+\n+        // checked_add_duration calculates the right time and will work for another year\n+        let year = Duration::from_secs(60 * 60 * 24 * 365);\n+        assert_eq!(a + year, a.checked_add(year).unwrap());\n     }\n \n     #[test]\n@@ -557,6 +599,7 @@ mod tests {\n                            .duration(), second);\n \n         assert_almost_eq!(a - second + second, a);\n+        assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n         // A difference of 80 and 800 years cannot fit inside a 32-bit time_t\n         if !(cfg!(unix) && ::mem::size_of::<::libc::time_t>() <= 4) {"}]}