{"sha": "eb60346cc99bde574708fe2e419898044868c1f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjAzNDZjYzk5YmRlNTc0NzA4ZmUyZTQxOTg5ODA0NDg2OGMxZjg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T04:30:27Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T08:00:08Z"}, "message": "Add `MaybeConst` variant to `{ast,hir}::TraitBoundModifier`", "tree": {"sha": "49f87e9ea50aca2ffb0895a31b3818317d6af9bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f87e9ea50aca2ffb0895a31b3818317d6af9bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb60346cc99bde574708fe2e419898044868c1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb60346cc99bde574708fe2e419898044868c1f8", "html_url": "https://github.com/rust-lang/rust/commit/eb60346cc99bde574708fe2e419898044868c1f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb60346cc99bde574708fe2e419898044868c1f8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958b0bc8d22633927796502b13a7ce944100dec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/958b0bc8d22633927796502b13a7ce944100dec5", "html_url": "https://github.com/rust-lang/rust/commit/958b0bc8d22633927796502b13a7ce944100dec5"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "90560c371e29221569f789f3f98feedc8e543ba3", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -1250,7 +1250,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let bounds =\n                         this.arena.alloc_from_iter(bounds.iter().filter_map(\n                             |bound| match *bound {\n-                                GenericBound::Trait(ref ty, TraitBoundModifier::None) => {\n+                                GenericBound::Trait(ref ty, TraitBoundModifier::None)\n+                                | GenericBound::Trait(ref ty, TraitBoundModifier::MaybeConst) => {\n                                     Some(this.lower_poly_trait_ref(ty, itctx.reborrow()))\n                                 }\n                                 GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n@@ -2158,10 +2159,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::PolyTraitRef<'hir> {\n-        if p.trait_ref.constness.is_some() {\n-            self.diagnostic().span_err(p.span, \"`?const` on trait bounds is not yet implemented\");\n-        }\n-\n         let bound_generic_params = self.lower_generic_params(\n             &p.bound_generic_params,\n             &NodeMap::default(),\n@@ -2301,6 +2298,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match f {\n             TraitBoundModifier::None => hir::TraitBoundModifier::None,\n             TraitBoundModifier::Maybe => hir::TraitBoundModifier::Maybe,\n+            TraitBoundModifier::MaybeConst => hir::TraitBoundModifier::MaybeConst,\n         }\n     }\n "}, {"sha": "23cb97348339d6af8d08406828e5f595343afc95", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -917,22 +917,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_param_bound(&mut self, bound: &'a GenericBound) {\n-        if let GenericBound::Trait(poly, maybe_bound) = bound {\n-            match poly.trait_ref.constness {\n-                Some(Constness::NotConst) => {\n-                    if *maybe_bound == TraitBoundModifier::Maybe {\n-                        self.err_handler()\n-                            .span_err(bound.span(), \"`?const` and `?` are mutually exclusive\");\n-                    }\n-\n-                    if let Some(ctx) = self.bound_context {\n-                        let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n-                        self.err_handler().span_err(bound.span(), &msg);\n-                    }\n-                }\n-\n-                Some(Constness::Const) => panic!(\"Parser should reject bare `const` on bounds\"),\n-                None => {}\n+        if let GenericBound::Trait(_, TraitBoundModifier::MaybeConst) = bound {\n+            if let Some(ctx) = self.bound_context {\n+                let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n+                self.err_handler().span_err(bound.span(), &msg);\n             }\n         }\n "}, {"sha": "b62a7e413e3031b30b58ccd8aa04065fdfac7373", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -364,6 +364,7 @@ impl GenericArgs<'_> {\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n+    MaybeConst,\n }\n \n /// The AST represents all type param bounds as types."}, {"sha": "9c9180778e52293d0c463ce56bfb8911dd4dffa5", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -27,11 +27,17 @@ struct BoundModifiers {\n }\n \n impl BoundModifiers {\n-    fn trait_bound_modifier(&self) -> TraitBoundModifier {\n-        match self.maybe {\n-            Some(_) => TraitBoundModifier::Maybe,\n-            None => TraitBoundModifier::None,\n-        }\n+    fn to_trait_bound_modifier(&self) -> Result<TraitBoundModifier, &'static str> {\n+        let modifier = match (self.maybe, self.maybe_const) {\n+            (None, None) => TraitBoundModifier::None,\n+            (Some(_), None) => TraitBoundModifier::Maybe,\n+            (None, Some(_)) => TraitBoundModifier::MaybeConst,\n+            (Some(_), Some(_)) => {\n+                return Err(\"`?const` and `?` are mutually exclusive\");\n+            }\n+        };\n+\n+        Ok(modifier)\n     }\n }\n \n@@ -215,7 +221,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, TyKind> {\n         assert_ne!(self.token, token::Question);\n \n-        let poly_trait_ref = PolyTraitRef::new(generic_params, path, None, lo.to(self.prev_span));\n+        let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n@@ -557,9 +563,18 @@ impl<'a> Parser<'a> {\n             self.expect(&token::CloseDelim(token::Paren))?;\n         }\n \n-        let constness = modifiers.maybe_const.map(|_| ast::Constness::NotConst);\n-        let poly_trait = PolyTraitRef::new(lifetime_defs, path, constness, lo.to(self.prev_span));\n-        Ok(GenericBound::Trait(poly_trait, modifiers.trait_bound_modifier()))\n+        let modifier = match modifiers.to_trait_bound_modifier() {\n+            Ok(m) => m,\n+            Err(msg) => {\n+                self.struct_span_err(lo.to(self.prev_span), msg).emit();\n+\n+                // Continue compilation as if the user had written `?Trait`.\n+                TraitBoundModifier::Maybe\n+            }\n+        };\n+\n+        let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n+        Ok(GenericBound::Trait(poly_trait, modifier))\n     }\n \n     /// Optionally parses `for<$generic_params>`."}, {"sha": "79923fc3d3689fc218af171ed59f004e58918570", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -361,6 +361,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n+                    hir::TraitBoundModifier::MaybeConst => \"?const\",\n                 };\n                 if f.alternate() {\n                     write!(f, \"{}{:#}\", modifier_str, ty.print())"}, {"sha": "ce4d9cca81eb38856c7cd391027f5c48c268ade9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb60346cc99bde574708fe2e419898044868c1f8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eb60346cc99bde574708fe2e419898044868c1f8", "patch": "@@ -266,12 +266,19 @@ pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n /// small, positive ids.\n pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n \n-/// A modifier on a bound, currently this is only used for `?Sized`, where the\n-/// modifier is `Maybe`. Negative bounds should also be handled here.\n+/// A modifier on a bound, e.g., `?Sized` or `?const Trait`.\n+///\n+/// Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitBoundModifier {\n+    /// No modifiers\n     None,\n+\n+    /// `?Trait`\n     Maybe,\n+\n+    /// `?const Trait`\n+    MaybeConst,\n }\n \n /// The AST represents all type param bounds as types."}]}