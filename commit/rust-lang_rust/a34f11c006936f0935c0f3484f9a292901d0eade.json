{"sha": "a34f11c006936f0935c0f3484f9a292901d0eade", "node_id": "C_kwDOAAsO6NoAKGEzNGYxMWMwMDY5MzZmMDkzNWMwZjM0ODRmOWEyOTI5MDFkMGVhZGU", "commit": {"author": {"name": "Neil Roberts", "email": "bpeeluk@yahoo.co.uk", "date": "2023-01-28T13:52:31Z"}, "committer": {"name": "Neil Roberts", "email": "bpeeluk@yahoo.co.uk", "date": "2023-01-28T19:37:01Z"}, "message": "vec: Use SpecCloneIntoVec::clone_into to implement Vec::clone_from\n\nIn the past, Vec::clone_from was implemented using slice::clone_into.\nThe code from clone_into was later duplicated into clone_from in\n8725e4c337, which is the commit that adds custom allocator support to\nVec. Presumably this was done because the slice::clone_into only works\nfor vecs with the default allocator so it would have the wrong type to\nclone into Vec<T, A>.\n\nNow that the clone_into implementation is moved out into a specializable\ntrait anyway we might as well use that to share the code between the two\nmethods.", "tree": {"sha": "05f4f78b355e27cbec00b0fdb00a33ec36ba7c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f4f78b355e27cbec00b0fdb00a33ec36ba7c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34f11c006936f0935c0f3484f9a292901d0eade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34f11c006936f0935c0f3484f9a292901d0eade", "html_url": "https://github.com/rust-lang/rust/commit/a34f11c006936f0935c0f3484f9a292901d0eade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34f11c006936f0935c0f3484f9a292901d0eade/comments", "author": {"login": "bpeel", "id": 12873, "node_id": "MDQ6VXNlcjEyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/12873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeel", "html_url": "https://github.com/bpeel", "followers_url": "https://api.github.com/users/bpeel/followers", "following_url": "https://api.github.com/users/bpeel/following{/other_user}", "gists_url": "https://api.github.com/users/bpeel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeel/subscriptions", "organizations_url": "https://api.github.com/users/bpeel/orgs", "repos_url": "https://api.github.com/users/bpeel/repos", "events_url": "https://api.github.com/users/bpeel/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpeel", "id": 12873, "node_id": "MDQ6VXNlcjEyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/12873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeel", "html_url": "https://github.com/bpeel", "followers_url": "https://api.github.com/users/bpeel/followers", "following_url": "https://api.github.com/users/bpeel/following{/other_user}", "gists_url": "https://api.github.com/users/bpeel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeel/subscriptions", "organizations_url": "https://api.github.com/users/bpeel/orgs", "repos_url": "https://api.github.com/users/bpeel/repos", "events_url": "https://api.github.com/users/bpeel/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba80c662f448c69cbd184d18630b8824f0169b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba80c662f448c69cbd184d18630b8824f0169b2e", "html_url": "https://github.com/rust-lang/rust/commit/ba80c662f448c69cbd184d18630b8824f0169b2e"}], "stats": {"total": 31, "additions": 1, "deletions": 30}, "files": [{"sha": "a07f3da78d33e58c4ec92954130d6816c1e6a8ee", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a34f11c006936f0935c0f3484f9a292901d0eade/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34f11c006936f0935c0f3484f9a292901d0eade/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a34f11c006936f0935c0f3484f9a292901d0eade", "patch": "@@ -2646,35 +2646,6 @@ impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {\n     }\n }\n \n-#[cfg(not(no_global_oom_handling))]\n-trait SpecCloneFrom {\n-    fn clone_from(this: &mut Self, other: &Self);\n-}\n-\n-#[cfg(not(no_global_oom_handling))]\n-impl<T: Clone, A: Allocator> SpecCloneFrom for Vec<T, A> {\n-    default fn clone_from(this: &mut Self, other: &Self) {\n-        // drop anything that will not be overwritten\n-        this.truncate(other.len());\n-\n-        // self.len <= other.len due to the truncate above, so the\n-        // slices here are always in-bounds.\n-        let (init, tail) = other.split_at(this.len());\n-\n-        // reuse the contained values' allocations/resources.\n-        this.clone_from_slice(init);\n-        this.extend_from_slice(tail);\n-    }\n-}\n-\n-#[cfg(not(no_global_oom_handling))]\n-impl<T: Copy, A: Allocator> SpecCloneFrom for Vec<T, A> {\n-    fn clone_from(this: &mut Self, other: &Self) {\n-        this.clear();\n-        this.extend_from_slice(other);\n-    }\n-}\n-\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n@@ -2695,7 +2666,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n     }\n \n     fn clone_from(&mut self, other: &Self) {\n-        SpecCloneFrom::clone_from(self, other)\n+        crate::slice::SpecCloneIntoVec::clone_into(other.as_slice(), self);\n     }\n }\n "}]}