{"sha": "0481d628b826104085c5df267cf6089a89fcd17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODFkNjI4YjgyNjEwNDA4NWM1ZGYyNjdjZjYwODlhODlmY2QxN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T22:56:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T22:56:54Z"}, "message": "auto merge of #14234 : alexcrichton/rust/rollup, r=alexcrichton\n\nLet's try this again!", "tree": {"sha": "5d488af95a17f26977bb0384d701bd560dbdcde8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d488af95a17f26977bb0384d701bd560dbdcde8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0481d628b826104085c5df267cf6089a89fcd17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0481d628b826104085c5df267cf6089a89fcd17b", "html_url": "https://github.com/rust-lang/rust/commit/0481d628b826104085c5df267cf6089a89fcd17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0481d628b826104085c5df267cf6089a89fcd17b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182c96c9212a2b7e830fe5f9a6662e72f73775ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/182c96c9212a2b7e830fe5f9a6662e72f73775ec", "html_url": "https://github.com/rust-lang/rust/commit/182c96c9212a2b7e830fe5f9a6662e72f73775ec"}, {"sha": "17df573a2e47d5815b5feb938626f9b6ec9ee4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/17df573a2e47d5815b5feb938626f9b6ec9ee4ee", "html_url": "https://github.com/rust-lang/rust/commit/17df573a2e47d5815b5feb938626f9b6ec9ee4ee"}], "stats": {"total": 2464, "additions": 2032, "deletions": 432}, "files": [{"sha": "5d37c1da8fb3cb51453324b5c76d9aca11b4f4da", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -68,7 +68,7 @@\n #\n #   * `TESTNAME=...` - Specify the name of tests to run\n #   * `CHECK_IGNORED=1` - Run normally-ignored tests\n-#   * `NO_BENCH=1` - Don't run crate benchmarks (disable `--bench` flag)\n+#   * `PLEASE_BENCH=1` - Run crate benchmarks (enable `--bench` flag)\n #\n #   * `CFG_ENABLE_VALGRIND=1` - Run tests under valgrind\n #   * `VALGRIND_COMPILE=1` - Run the compiler itself under valgrind"}, {"sha": "943cd528fcdc95b5527a2d039ff24aad40d65050", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -51,19 +51,21 @@\n \n TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n-\t\t workcache url log regex graphviz core\n+\t\t workcache url log regex graphviz core rlibc\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_core :=\n+DEPS_rlibc :=\n DEPS_std := core libc native:rustrt native:compiler-rt native:backtrace native:jemalloc\n+DEPS_graphviz := std\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections log fmt_macros\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections time log\n+              collections time log graphviz\n DEPS_rustdoc := rustc native:hoedown serialize sync getopts collections \\\n                 test time\n DEPS_flate := std native:miniz\n@@ -98,6 +100,7 @@ TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n \n ONLY_RLIB_core := 1\n+ONLY_RLIB_rlibc := 1\n \n ################################################################################\n # You should not need to edit below this line"}, {"sha": "4d00223fca88045e871e1f9493a8972324059db2", "filename": "mk/docs.mk", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -30,7 +30,7 @@ DOCS := index intro tutorial guide-ffi guide-macros guide-lifetimes \\\n \tguide-tasks guide-container guide-pointers guide-testing \\\n \tguide-runtime complement-bugreport complement-cheatsheet \\\n \tcomplement-lang-faq complement-project-faq rust rustdoc \\\n-\tguide-unsafe not_found\n+\tguide-unsafe\n \n PDF_DOCS := tutorial rust\n \n@@ -42,10 +42,11 @@ L10N_LANGS := ja\n # Generally no need to edit below here.\n \n # The options are passed to the documentation generators.\n-RUSTDOC_HTML_OPTS = --markdown-css rust.css \\\n-\t--markdown-before-content=doc/version_info.html \\\n+RUSTDOC_HTML_OPTS_NO_CSS = --markdown-before-content=doc/version_info.html \\\n \t--markdown-in-header=doc/favicon.inc --markdown-after-content=doc/footer.inc\n \n+RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css\n+\n PANDOC_BASE_OPTS := --standalone --toc --number-sections\n PANDOC_TEX_OPTS = $(PANDOC_BASE_OPTS) --include-before-body=doc/version.tex \\\n \t--from=markdown --include-before-body=doc/footer.tex --to=latex\n@@ -152,6 +153,11 @@ doc/footer.tex: $(D)/footer.inc | doc/\n \t@$(call E, pandoc: $@)\n \t$(CFG_PANDOC) --from=html --to=latex $< --output=$@\n \n+# HTML (rustdoc)\n+DOC_TARGETS += doc/not_found.html\n+doc/not_found.html: $(D)/not_found.md $(HTML_DEPS) | doc/\n+\t$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css http://static.rust-lang.org/doc/master/rust.css $<\n+\n define DEF_DOC\n \n # HTML (rustdoc)"}, {"sha": "8f20d55e3859cf997ee36e7dd75cd8f6042cd0eb", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -32,16 +32,16 @@ ifdef CHECK_IGNORED\n   TESTARGS += --ignored\n endif\n \n-TEST_BENCH = --bench\n+TEST_BENCH =\n \n # Arguments to the cfail/rfail/rpass/bench tests\n ifdef CFG_VALGRIND\n   CTEST_RUNTOOL = --runtool \"$(CFG_VALGRIND)\"\n   TEST_BENCH =\n endif\n \n-ifdef NO_BENCH\n-  TEST_BENCH =\n+ifdef PLEASE_BENCH\n+  TEST_BENCH = --bench\n endif\n \n # Arguments to the perf tests"}, {"sha": "838ddca042dfc661c2b5f70676bbdaec59659565", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1799,6 +1799,8 @@ type int8_t = i8;\n - `no_start` - disable linking to the `native` crate, which specifies the\n   \"start\" language item.\n - `no_std` - disable linking to the `std` crate.\n+- `no_builtins` - disable optimizing certain code patterns to invocations of\n+                  library functions that are assumed to exist\n \n ### Module-only attributes\n "}, {"sha": "8b3494f3127339cc83beaa7f592393a4364c5732", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -186,6 +186,25 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n     }\n }\n \n+/// Copy a `Ref`.\n+///\n+/// The `RefCell` is already immutably borrowed, so this cannot fail.\n+///\n+/// A `Clone` implementation would interfere with the widespread\n+/// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n+#[experimental]\n+pub fn clone_ref<'b, T>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n+    // Since this Ref exists, we know the borrow flag\n+    // is not set to WRITING.\n+    let borrow = orig.parent.borrow.get();\n+    debug_assert!(borrow != WRITING && borrow != UNUSED);\n+    orig.parent.borrow.set(borrow + 1);\n+\n+    Ref {\n+        parent: orig.parent,\n+    }\n+}\n+\n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n pub struct RefMut<'b, T> {\n     parent: &'b RefCell<T>\n@@ -307,4 +326,19 @@ mod test {\n         let _ = _b;\n         let _b = x.borrow_mut();\n     }\n+\n+    #[test]\n+    fn clone_ref_updates_flag() {\n+        let x = RefCell::new(0);\n+        {\n+            let b1 = x.borrow();\n+            assert!(x.try_borrow_mut().is_none());\n+            {\n+                let _b2 = clone_ref(&b1);\n+                assert!(x.try_borrow_mut().is_none());\n+            }\n+            assert!(x.try_borrow_mut().is_none());\n+        }\n+        assert!(x.try_borrow_mut().is_some());\n+    }\n }"}, {"sha": "bf02f053336bb9822b6189d4e565e6630a9a94f5", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -192,7 +192,23 @@ pub fn max<T: TotalOrd>(v1: T, v2: T) -> T {\n // Implementation of Eq/TotalEq for some primitive types\n #[cfg(not(test))]\n mod impls {\n-    use cmp::{Ord, TotalOrd, Eq, TotalEq, Ordering};\n+    use cmp::{Ord, TotalOrd, Eq, TotalEq, Ordering, Equal};\n+\n+    impl Eq for () {\n+        #[inline]\n+        fn eq(&self, _other: &()) -> bool { true }\n+        #[inline]\n+        fn ne(&self, _other: &()) -> bool { false }\n+    }\n+    impl TotalEq for () {}\n+    impl Ord for () {\n+        #[inline]\n+        fn lt(&self, _other: &()) -> bool { false }\n+    }\n+    impl TotalOrd for () {\n+        #[inline]\n+        fn cmp(&self, _other: &()) -> Ordering { Equal }\n+    }\n \n     // & pointers\n     impl<'a, T: Eq> Eq for &'a T {"}, {"sha": "50ddfcc52f7beed7c9c78ac3cc9f8a0a43416f23", "filename": "src/libcore/default.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -16,6 +16,11 @@ pub trait Default {\n     fn default() -> Self;\n }\n \n+impl Default for () {\n+    #[inline]\n+    fn default() -> () { () }\n+}\n+\n impl<T: Default + 'static> Default for @T {\n     fn default() -> @T { @Default::default() }\n }"}, {"sha": "22719dc9f2d71daaf44e185b4a38f661b0c217bb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -18,6 +18,9 @@\n //! * `memcpy`, `memcmp`, `memset` - These are core memory routines which are\n //!   often generated by LLVM. Additionally, this library can make explicit\n //!   calls to these funcitons. Their signatures are the same as found in C.\n+//!   These functions are often provided by the system libc, but can also be\n+//!   provided by `librlibc` which is distributed with the standard rust\n+//!   distribution.\n //!\n //! * `rust_begin_unwind` - This function takes three arguments, a\n //!   `&fmt::Arguments`, a `&str`, and a `uint. These three arguments dictate\n@@ -100,7 +103,6 @@ pub mod container;\n /* Core types and methods on primitives */\n \n mod unicode;\n-mod unit;\n pub mod any;\n pub mod atomics;\n pub mod bool;\n@@ -116,9 +118,6 @@ pub mod slice;\n pub mod str;\n pub mod tuple;\n \n-#[cfg(stage0, not(test))]\n-pub mod owned;\n-\n // FIXME: this module should not exist. Once owned allocations are no longer a\n //        language type, this module can move outside to the owned allocation\n //        crate."}, {"sha": "3af12c5154c29d5f08847f5ca209ff53f477781d", "filename": "src/libcore/owned.rs", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -1,101 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Operations on unique pointer types\n-\n-use any::{Any, AnyRefExt};\n-use clone::Clone;\n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n-use default::Default;\n-use intrinsics;\n-use mem;\n-use raw::TraitObject;\n-use result::{Ok, Err, Result};\n-\n-/// A value that represents the global exchange heap. This is the default\n-/// place that the `box` keyword allocates into when no place is supplied.\n-///\n-/// The following two examples are equivalent:\n-///\n-///     let foo = box(HEAP) Bar::new(...);\n-///     let foo = box Bar::new(...);\n-#[lang=\"exchange_heap\"]\n-pub static HEAP: () = ();\n-\n-/// A type that represents a uniquely-owned value.\n-#[lang=\"owned_box\"]\n-pub struct Box<T>(*T);\n-\n-impl<T: Default> Default for Box<T> {\n-    fn default() -> Box<T> { box Default::default() }\n-}\n-\n-impl<T: Clone> Clone for Box<T> {\n-    /// Return a copy of the owned box.\n-    #[inline]\n-    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n-\n-    /// Perform copy-assignment from `source` by reusing the existing allocation.\n-    #[inline]\n-    fn clone_from(&mut self, source: &Box<T>) {\n-        (**self).clone_from(&(**source));\n-    }\n-}\n-\n-// box pointers\n-impl<T:Eq> Eq for Box<T> {\n-    #[inline]\n-    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n-}\n-impl<T:Ord> Ord for Box<T> {\n-    #[inline]\n-    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n-}\n-impl<T: TotalOrd> TotalOrd for Box<T> {\n-    #[inline]\n-    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n-}\n-impl<T: TotalEq> TotalEq for Box<T> {}\n-\n-/// Extension methods for an owning `Any` trait object\n-pub trait AnyOwnExt {\n-    /// Returns the boxed value if it is of type `T`, or\n-    /// `Err(Self)` if it isn't.\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n-}\n-\n-impl AnyOwnExt for Box<Any> {\n-    #[inline]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject =\n-                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n-\n-                // Prevent destructor on self being run\n-                intrinsics::forget(self);\n-\n-                // Extract the data pointer\n-                Ok(mem::transmute(to.data))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-}"}, {"sha": "f55cb2d22360df3b4589af4a43efa7dc72143e53", "filename": "src/libcore/unit.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibcore%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibcore%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funit.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Functions for the unit type.\n-\n-#[cfg(not(test))]\n-use default::Default;\n-#[cfg(not(test))]\n-use cmp::{Eq, Equal, Ord, Ordering, TotalEq, TotalOrd};\n-\n-#[cfg(not(test))]\n-impl Eq for () {\n-    #[inline]\n-    fn eq(&self, _other: &()) -> bool { true }\n-    #[inline]\n-    fn ne(&self, _other: &()) -> bool { false }\n-}\n-\n-#[cfg(not(test))]\n-impl Ord for () {\n-    #[inline]\n-    fn lt(&self, _other: &()) -> bool { false }\n-}\n-\n-#[cfg(not(test))]\n-impl TotalOrd for () {\n-    #[inline]\n-    fn cmp(&self, _other: &()) -> Ordering { Equal }\n-}\n-\n-#[cfg(not(test))]\n-impl TotalEq for () {}\n-\n-#[cfg(not(test))]\n-impl Default for () {\n-    #[inline]\n-    fn default() -> () { () }\n-}"}, {"sha": "812e998ad9d901978eba33b7c8bb1c3232077eb4", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1137,11 +1137,10 @@ mod test {\n     fn test_schedule_home_states() {\n         use sleeper_list::SleeperList;\n         use super::{Shutdown, Scheduler, SchedHandle};\n-        use std::unstable::run_in_bare_thread;\n         use std::rt::thread::Thread;\n         use std::sync::deque::BufferPool;\n \n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let sleepers = SleeperList::new();\n             let mut pool = BufferPool::new();\n             let (normal_worker, normal_stealer) = pool.deque();\n@@ -1260,7 +1259,7 @@ mod test {\n \n             normal_thread.join();\n             special_thread.join();\n-        });\n+        }).join();\n     }\n \n     //#[test]"}, {"sha": "046d2875d553101700a56b970ca2c6a72098e52c", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -493,9 +493,7 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n     io::FileStat {\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: unsafe {\n-            io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n-        },\n+        perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),\n         modified: mktime(stat.st_mtime as u64, stat.st_mtime_nsec as u64),\n         accessed: mktime(stat.st_atime as u64, stat.st_atime_nsec as u64),"}, {"sha": "3222c912dd0857fe6f3afea505dd7b47c6d7eef8", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -492,9 +492,7 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n     io::FileStat {\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: unsafe {\n-          io::FilePermission::from_bits(stat.st_mode as u32)  & io::AllPermissions\n-        },\n+        perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: stat.st_ctime as u64,\n         modified: stat.st_mtime as u64,\n         accessed: stat.st_atime as u64,"}, {"sha": "904fbe9be9b279e1fd558c58e317efa0b9821ec7", "filename": "src/librlibc/lib.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,99 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A bare-metal library supplying functions rustc may lower code to\n+//!\n+//! This library is not intended for general use, and is superseded by a system\n+//! libc if one is available. In a freestanding context, however, common\n+//! functions such as memset, memcpy, etc are not implemented. This library\n+//! provides an implementation of these functions which are either required by\n+//! libcore or called by rustc implicitly.\n+//!\n+//! This library is never included by default, and must be manually included if\n+//! necessary. It is an error to include this library when also linking with\n+//! the system libc library.\n+\n+#![crate_id = \"rlibc#0.11.0-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![no_std]\n+#![experimental]\n+\n+// This library is definining the builtin functions, so it would be a shame for\n+// LLVM to optimize these function calls to themselves!\n+#![no_builtins]\n+\n+#[cfg(test)] extern crate std;\n+#[cfg(test)] extern crate native;\n+\n+// Require the offset intrinsics for LLVM to properly optimize the\n+// implementations below. If pointer arithmetic is done through integers the\n+// optimizations start to break down.\n+extern \"rust-intrinsic\" {\n+    fn offset<T>(dst: *T, offset: int) -> *T;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn memcpy(dest: *mut u8, src: *u8, n: uint) -> *mut u8 {\n+    let mut i = 0;\n+    while i < n {\n+        *(offset(dest as *u8, i as int) as *mut u8) = *offset(src, i as int);\n+        i += 1;\n+    }\n+    return dest;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn memmove(dest: *mut u8, src: *u8, n: uint) -> *mut u8 {\n+    if src < dest as *u8 { // copy from end\n+        let mut i = n;\n+        while i != 0 {\n+            i -= 1;\n+            *(offset(dest as *u8, i as int) as *mut u8) = *offset(src, i as int);\n+        }\n+    } else { // copy from beginning\n+        let mut i = 0;\n+        while i < n {\n+            *(offset(dest as *u8, i as int) as *mut u8) = *offset(src, i as int);\n+            i += 1;\n+        }\n+    }\n+    return dest;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn memset(s: *mut u8, c: i32, n: uint) -> *mut u8 {\n+    let mut i = 0;\n+    while i < n {\n+        *(offset(s as *u8, i as int) as *mut u8) = c as u8;\n+        i += 1;\n+    }\n+    return s;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn memcmp(s1: *u8, s2: *u8, n: uint) -> i32 {\n+    let mut i = 0;\n+    while i < n {\n+        let a = *offset(s1, i as int);\n+        let b = *offset(s2, i as int);\n+        if a != b {\n+            return (a - b) as i32\n+        }\n+        i += 1;\n+    }\n+    return 0;\n+}\n+\n+#[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows"}, {"sha": "429a8f5be5eb5f54604b862465c7e1fe82e952d1", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -212,7 +212,8 @@ pub mod write {\n             if !sess.opts.cg.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n-                populate_llvm_passes(fpm, mpm, llmod, opt_level);\n+                populate_llvm_passes(fpm, mpm, llmod, opt_level,\n+                                     trans.no_builtins);\n             }\n \n             for pass in sess.opts.cg.passes.iter() {\n@@ -264,11 +265,11 @@ pub mod write {\n             // escape the closure itself, and the manager should only be\n             // used once.\n             fn with_codegen(tm: TargetMachineRef, llmod: ModuleRef,\n-                            f: |PassManagerRef|) {\n+                            no_builtins: bool, f: |PassManagerRef|) {\n                 unsafe {\n                     let cpm = llvm::LLVMCreatePassManager();\n                     llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n-                    llvm::LLVMRustAddLibraryInfo(cpm, llmod);\n+                    llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n                     f(cpm);\n                     llvm::LLVMDisposePassManager(cpm);\n                 }\n@@ -286,7 +287,7 @@ pub mod write {\n                     }\n                     OutputTypeLlvmAssembly => {\n                         path.with_c_str(|output| {\n-                            with_codegen(tm, llmod, |cpm| {\n+                            with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n                                 llvm::LLVMRustPrintModule(cpm, llmod, output);\n                             })\n                         })\n@@ -303,7 +304,7 @@ pub mod write {\n                             needs_metadata = true;\n                             output.temp_path(OutputTypeAssembly)\n                         };\n-                        with_codegen(tm, llmod, |cpm| {\n+                        with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n                             WriteOutputFile(sess, tm, cpm, llmod, &path,\n                                             lib::llvm::AssemblyFile);\n                         });\n@@ -321,15 +322,16 @@ pub mod write {\n             time(sess.time_passes(), \"codegen passes\", (), |()| {\n                 match object_file {\n                     Some(ref path) => {\n-                        with_codegen(tm, llmod, |cpm| {\n+                        with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n                             WriteOutputFile(sess, tm, cpm, llmod, path,\n                                             lib::llvm::ObjectFile);\n                         });\n                     }\n                     None => {}\n                 }\n                 if needs_metadata {\n-                    with_codegen(tm, trans.metadata_module, |cpm| {\n+                    with_codegen(tm, trans.metadata_module,\n+                                 trans.no_builtins, |cpm| {\n                         let out = output.temp_path(OutputTypeObject)\n                                         .with_extension(\"metadata.o\");\n                         WriteOutputFile(sess, tm, cpm,\n@@ -437,7 +439,8 @@ pub mod write {\n     unsafe fn populate_llvm_passes(fpm: lib::llvm::PassManagerRef,\n                                    mpm: lib::llvm::PassManagerRef,\n                                    llmod: ModuleRef,\n-                                   opt: lib::llvm::CodeGenOptLevel) {\n+                                   opt: lib::llvm::CodeGenOptLevel,\n+                                   no_builtins: bool) {\n         // Create the PassManagerBuilder for LLVM. We configure it with\n         // reasonable defaults and prepare it to actually populate the pass\n         // manager.\n@@ -461,7 +464,7 @@ pub mod write {\n             }\n         }\n         llvm::LLVMPassManagerBuilderSetOptLevel(builder, opt as c_uint);\n-        llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod);\n+        llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, no_builtins);\n \n         // Use the builder to populate the function/module pass managers.\n         llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(builder, fpm);"}, {"sha": "da573a014d000e827324350a5cb507bb0dc9fc3c", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -519,12 +519,13 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optopt( \"\",  \"out-dir\", \"Write output to compiler-chosen filename in <dir>\", \"DIR\"),\n         optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, or link\"),\n         optflagopt(\"\", \"pretty\",\n-                 \"Pretty-print the input instead of compiling;\n-                  valid types are: normal (un-annotated source),\n-                  expanded (crates expanded),\n-                  typed (crates expanded, with type annotations),\n-                  or identified (fully parenthesized,\n-                  AST nodes and blocks with IDs)\", \"TYPE\"),\n+                   \"Pretty-print the input instead of compiling;\n+                   valid types are: `normal` (un-annotated source),\n+                   `expanded` (crates expanded),\n+                   `typed` (crates expanded, with type annotations),\n+                   `expanded,identified` (fully parenthesized, AST nodes with IDs), or\n+                   `flowgraph=<nodeid>` (graphviz formatted flowgraph for node)\",\n+                 \"TYPE\"),\n         optflagopt(\"\", \"dep-info\",\n                  \"Output dependency info to <filename> after compiling, \\\n                   in a format suitable for use by Makefiles\", \"FILENAME\"),"}, {"sha": "5f9fd7124a9e92289804ed8e3da117b5c3fed88d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -11,19 +11,24 @@\n \n use back::link;\n use driver::session::Session;\n-use driver::config;\n+use driver::{config, PpMode};\n+use driver::PpmFlowGraph; // FIXME (#14221).\n use front;\n use lib::llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n use metadata::creader::Loader;\n+use middle::cfg;\n+use middle::cfg::graphviz::LabelledCFG;\n use middle::{trans, freevars, kind, ty, typeck, lint, reachable};\n use middle::dependency_format;\n use middle;\n use util::common::time;\n use util::ppaux;\n use util::nodemap::{NodeSet};\n \n+use dot = graphviz;\n+\n use serialize::{json, Encodable};\n \n use std::io;\n@@ -356,6 +361,7 @@ pub struct CrateTranslation {\n     pub metadata: Vec<u8>,\n     pub reachable: Vec<StrBuf>,\n     pub crate_formats: dependency_format::Dependencies,\n+    pub no_builtins: bool,\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n@@ -581,14 +587,14 @@ impl pprust::PpAnn for TypedAnnotation {\n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n-                          ppm: ::driver::PpMode,\n+                          ppm: PpMode,\n                           ofile: Option<Path>) {\n     let krate = phase_1_parse_input(&sess, cfg, input);\n     let id = link::find_crate_id(krate.attrs.as_slice(),\n                                  input.filestem().as_slice());\n \n     let (krate, ast_map, is_expanded) = match ppm {\n-        PpmExpanded | PpmExpandedIdentified | PpmTyped => {\n+        PpmExpanded | PpmExpandedIdentified | PpmTyped | PpmFlowGraph(_) => {\n             let loader = &mut Loader::new(&sess);\n             let (krate, ast_map) = phase_2_configure_and_expand(&sess,\n                                                                 loader,\n@@ -643,6 +649,18 @@ pub fn pretty_print_input(sess: Session,\n                                 &annotation,\n                                 is_expanded)\n         }\n+        PpmFlowGraph(nodeid) => {\n+            let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n+            let node = ast_map.find(nodeid).unwrap_or_else(|| {\n+                fail!(\"--pretty flowgraph=id couldn't find id: {}\", id)\n+            });\n+            let block = match node {\n+                syntax::ast_map::NodeBlock(block) => block,\n+                _ => fail!(\"--pretty=flowgraph needs block, got {:?}\", node)\n+            };\n+            let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n+            print_flowgraph(analysis, block, out)\n+        }\n         _ => {\n             pprust::print_crate(sess.codemap(),\n                                 sess.diagnostic(),\n@@ -657,6 +675,32 @@ pub fn pretty_print_input(sess: Session,\n \n }\n \n+fn print_flowgraph<W:io::Writer>(analysis: CrateAnalysis,\n+                                 block: ast::P<ast::Block>,\n+                                 mut out: W) -> io::IoResult<()> {\n+    let ty_cx = &analysis.ty_cx;\n+    let cfg = cfg::CFG::new(ty_cx, block);\n+    let lcfg = LabelledCFG { ast_map: &ty_cx.map,\n+                             cfg: &cfg,\n+                             name: format!(\"block{}\", block.id).to_strbuf(), };\n+    debug!(\"cfg: {:?}\", cfg);\n+    let r = dot::render(&lcfg, &mut out);\n+    return expand_err_details(r);\n+\n+    fn expand_err_details(r: io::IoResult<()>) -> io::IoResult<()> {\n+        r.map_err(|ioerr| {\n+            let orig_detail = ioerr.detail.clone();\n+            let m = \"graphviz::render failed\";\n+            io::IoError {\n+                detail: Some(match orig_detail {\n+                    None => m.into_owned(), Some(d) => format!(\"{}: {}\", m, d)\n+                }),\n+                ..ioerr\n+            }\n+        })\n+    }\n+}\n+\n pub fn collect_crate_types(session: &Session,\n                            attrs: &[ast::Attribute]) -> Vec<config::CrateType> {\n     // If we're generating a test executable, then ignore all other output"}, {"sha": "f32a8ec7cd735ca035fe8fbccc060d794b5c2164", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -285,20 +285,32 @@ pub enum PpMode {\n     PpmExpanded,\n     PpmTyped,\n     PpmIdentified,\n-    PpmExpandedIdentified\n+    PpmExpandedIdentified,\n+    PpmFlowGraph(ast::NodeId),\n }\n \n pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n-    match name {\n-        \"normal\" => PpmNormal,\n-        \"expanded\" => PpmExpanded,\n-        \"typed\" => PpmTyped,\n-        \"expanded,identified\" => PpmExpandedIdentified,\n-        \"identified\" => PpmIdentified,\n+    let mut split = name.splitn('=', 1);\n+    let first = split.next().unwrap();\n+    let opt_second = split.next();\n+    match (opt_second, first) {\n+        (None, \"normal\")       => PpmNormal,\n+        (None, \"expanded\")     => PpmExpanded,\n+        (None, \"typed\")        => PpmTyped,\n+        (None, \"expanded,identified\") => PpmExpandedIdentified,\n+        (None, \"identified\")   => PpmIdentified,\n+        (Some(s), \"flowgraph\") => {\n+             match from_str(s) {\n+                 Some(id) => PpmFlowGraph(id),\n+                 None => sess.fatal(format!(\"`pretty flowgraph=<nodeid>` needs \\\n+                                             an integer <nodeid>; got {}\", s))\n+             }\n+        }\n         _ => {\n-            sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n-                        `expanded`, `typed`, `identified`, \\\n-                        or `expanded,identified`\");\n+            sess.fatal(format!(\n+                \"argument to `pretty` must be one of `normal`, \\\n+                 `expanded`, `flowgraph=<nodeid>`, `typed`, `identified`, \\\n+                 or `expanded,identified`; got {}\", name));\n         }\n     }\n }"}, {"sha": "18c59a955b527a413d9e1ed4c54c0f436d106a20", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -33,6 +33,7 @@ This API is completely unstable and subject to change.\n \n extern crate flate;\n extern crate arena;\n+extern crate graphviz;\n extern crate syntax;\n extern crate serialize;\n extern crate sync;\n@@ -122,4 +123,3 @@ pub mod lib {\n pub fn main() {\n     std::os::set_exit_status(driver::main_args(std::os::args().as_slice()));\n }\n-"}, {"sha": "711081f46d6669703a276c2d8981881c4398b078", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1755,8 +1755,10 @@ pub mod llvm {\n                                          PM: PassManagerRef,\n                                          M: ModuleRef);\n         pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,\n-                                             M: ModuleRef);\n-        pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef, M: ModuleRef);\n+                                             M: ModuleRef,\n+                                             DisableSimplifyLibCalls: bool);\n+        pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef, M: ModuleRef,\n+                                      DisableSimplifyLibCalls: bool);\n         pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: ModuleRef);\n         pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,\n                                        PM: PassManagerRef,"}, {"sha": "c9c397d3d6121141a0cc6a7dc901dfe884ff3653", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -18,10 +18,10 @@ use util::nodemap::NodeMap;\n \n struct CFGBuilder<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n     exit_map: NodeMap<CFGIndex>,\n     graph: CFGGraph,\n-    loop_scopes: Vec<LoopScope> ,\n+    fn_exit: CFGIndex,\n+    loop_scopes: Vec<LoopScope>,\n }\n \n struct LoopScope {\n@@ -31,22 +31,35 @@ struct LoopScope {\n }\n \n pub fn construct(tcx: &ty::ctxt,\n-                 method_map: typeck::MethodMap,\n                  blk: &ast::Block) -> CFG {\n+    let mut graph = graph::Graph::new();\n+    let entry = add_initial_dummy_node(&mut graph);\n+\n+    // `fn_exit` is target of return exprs, which lies somewhere\n+    // outside input `blk`. (Distinguishing `fn_exit` and `block_exit`\n+    // also resolves chicken-and-egg problem that arises if you try to\n+    // have return exprs jump to `block_exit` during construction.)\n+    let fn_exit = add_initial_dummy_node(&mut graph);\n+    let block_exit;\n+\n     let mut cfg_builder = CFGBuilder {\n         exit_map: NodeMap::new(),\n-        graph: graph::Graph::new(),\n+        graph: graph,\n+        fn_exit: fn_exit,\n         tcx: tcx,\n-        method_map: method_map,\n         loop_scopes: Vec::new()\n     };\n-    let entry = cfg_builder.add_node(0, []);\n-    let exit = cfg_builder.block(blk, entry);\n+    block_exit = cfg_builder.block(blk, entry);\n+    cfg_builder.add_contained_edge(block_exit, fn_exit);\n     let CFGBuilder {exit_map, graph, ..} = cfg_builder;\n     CFG {exit_map: exit_map,\n          graph: graph,\n          entry: entry,\n-         exit: exit}\n+         exit: fn_exit}\n+}\n+\n+fn add_initial_dummy_node(g: &mut CFGGraph) -> CFGIndex {\n+    g.add_node(CFGNodeData { id: ast::DUMMY_NODE_ID })\n }\n \n impl<'a> CFGBuilder<'a> {\n@@ -327,24 +340,25 @@ impl<'a> CFGBuilder<'a> {\n \n             ast::ExprRet(v) => {\n                 let v_exit = self.opt_expr(v, pred);\n-                let loop_scope = *self.loop_scopes.get(0);\n-                self.add_exiting_edge(expr, v_exit,\n-                                      loop_scope, loop_scope.break_index);\n-                self.add_node(expr.id, [])\n+                let b = self.add_node(expr.id, [v_exit]);\n+                self.add_returning_edge(expr, b);\n+                self.add_node(ast::DUMMY_NODE_ID, [])\n             }\n \n             ast::ExprBreak(label) => {\n                 let loop_scope = self.find_scope(expr, label);\n-                self.add_exiting_edge(expr, pred,\n+                let b = self.add_node(expr.id, [pred]);\n+                self.add_exiting_edge(expr, b,\n                                       loop_scope, loop_scope.break_index);\n-                self.add_node(expr.id, [])\n+                self.add_node(ast::DUMMY_NODE_ID, [])\n             }\n \n             ast::ExprAgain(label) => {\n                 let loop_scope = self.find_scope(expr, label);\n-                self.add_exiting_edge(expr, pred,\n+                let a = self.add_node(expr.id, [pred]);\n+                self.add_exiting_edge(expr, a,\n                                       loop_scope, loop_scope.continue_index);\n-                self.add_node(expr.id, [])\n+                self.add_node(ast::DUMMY_NODE_ID, [])\n             }\n \n             ast::ExprVec(ref elems) => {\n@@ -453,13 +467,16 @@ impl<'a> CFGBuilder<'a> {\n     }\n \n     fn add_dummy_node(&mut self, preds: &[CFGIndex]) -> CFGIndex {\n-        self.add_node(0, preds)\n+        self.add_node(ast::DUMMY_NODE_ID, preds)\n     }\n \n     fn add_node(&mut self, id: ast::NodeId, preds: &[CFGIndex]) -> CFGIndex {\n         assert!(!self.exit_map.contains_key(&id));\n         let node = self.graph.add_node(CFGNodeData {id: id});\n-        self.exit_map.insert(id, node);\n+        if id != ast::DUMMY_NODE_ID {\n+            assert!(!self.exit_map.contains_key(&id));\n+            self.exit_map.insert(id, node);\n+        }\n         for &pred in preds.iter() {\n             self.add_contained_edge(pred, node);\n         }\n@@ -488,6 +505,16 @@ impl<'a> CFGBuilder<'a> {\n         self.graph.add_edge(from_index, to_index, data);\n     }\n \n+    fn add_returning_edge(&mut self,\n+                          _from_expr: @ast::Expr,\n+                          from_index: CFGIndex) {\n+        let mut data = CFGEdgeData {exiting_scopes: vec!() };\n+        for &LoopScope { loop_id: id, .. } in self.loop_scopes.iter().rev() {\n+            data.exiting_scopes.push(id);\n+        }\n+        self.graph.add_edge(from_index, self.fn_exit, data);\n+    }\n+\n     fn find_scope(&self,\n                   expr: @ast::Expr,\n                   label: Option<ast::Ident>) -> LoopScope {\n@@ -521,6 +548,6 @@ impl<'a> CFGBuilder<'a> {\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n         let method_call = typeck::MethodCall::expr(expr.id);\n-        self.method_map.borrow().contains_key(&method_call)\n+        self.tcx.method_map.borrow().contains_key(&method_call)\n     }\n }"}, {"sha": "b8baeefd3d02efdfa8b8e0b75883b6bd5d969866", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This module provides linkage between rustc::middle::graph and\n+/// libgraphviz traits.\n+\n+/// For clarity, rename the graphviz crate locally to dot.\n+use dot = graphviz;\n+\n+use syntax::ast;\n+use syntax::ast_map;\n+\n+use middle::cfg;\n+\n+pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n+pub type Edge<'a> = &'a cfg::CFGEdge;\n+\n+pub struct LabelledCFG<'a>{\n+    pub ast_map: &'a ast_map::Map,\n+    pub cfg: &'a cfg::CFG,\n+    pub name: StrBuf,\n+}\n+\n+fn replace_newline_with_backslash_l(s: StrBuf) -> StrBuf {\n+    // Replacing newlines with \\\\l causes each line to be left-aligned,\n+    // improving presentation of (long) pretty-printed expressions.\n+    if s.as_slice().contains(\"\\n\") {\n+        let mut s = s.replace(\"\\n\", \"\\\\l\");\n+        // Apparently left-alignment applies to the line that precedes\n+        // \\l, not the line that follows; so, add \\l at end of string\n+        // if not already present, ensuring last line gets left-aligned\n+        // as well.\n+        let mut last_two : Vec<_> = s.chars().rev().take(2).collect();\n+        last_two.reverse();\n+        if last_two.as_slice() != ['\\\\', 'l'] {\n+            s = s.append(\"\\\\l\");\n+        }\n+        s.to_strbuf()\n+    } else {\n+        s\n+    }\n+}\n+\n+impl<'a> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a> {\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(self.name.as_slice()) }\n+\n+    fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n+        dot::Id::new(format!(\"N{:u}\", i.node_id()))\n+    }\n+\n+    fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> {\n+        if i == self.cfg.entry {\n+            dot::LabelStr(\"entry\".into_maybe_owned())\n+        } else if i == self.cfg.exit {\n+            dot::LabelStr(\"exit\".into_maybe_owned())\n+        } else if n.data.id == ast::DUMMY_NODE_ID {\n+            dot::LabelStr(\"(dummy_node)\".into_maybe_owned())\n+        } else {\n+            let s = self.ast_map.node_to_str(n.data.id);\n+            // left-aligns the lines\n+            let s = replace_newline_with_backslash_l(s);\n+            dot::EscStr(s.into_maybe_owned())\n+        }\n+    }\n+\n+    fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> {\n+        let mut label = StrBuf::new();\n+        let mut put_one = false;\n+        for (i, &node_id) in e.data.exiting_scopes.iter().enumerate() {\n+            if put_one {\n+                label = label.append(\",\\\\l\");\n+            } else {\n+                put_one = true;\n+            }\n+            let s = self.ast_map.node_to_str(node_id);\n+            // left-aligns the lines\n+            let s = replace_newline_with_backslash_l(s);\n+            label = label.append(format!(\"exiting scope_{} {}\", i, s.as_slice()));\n+        }\n+        dot::EscStr(label.into_maybe_owned())\n+    }\n+}\n+\n+impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG {\n+    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> {\n+        let mut v = Vec::new();\n+        self.graph.each_node(|i, nd| { v.push((i, nd)); true });\n+        dot::maybe_owned_vec::Growable(v)\n+    }\n+    fn edges(&self) -> dot::Edges<'a, Edge<'a>> {\n+        self.graph.all_edges().iter().collect()\n+    }\n+    fn source(&self, edge: &Edge<'a>) -> Node<'a> {\n+        let i = edge.source();\n+        (i, self.graph.node(i))\n+    }\n+    fn target(&self, edge: &Edge<'a>) -> Node<'a> {\n+        let i = edge.target();\n+        (i, self.graph.node(i))\n+    }\n+}\n+\n+impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a>\n+{\n+    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }\n+    fn edges(&self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }\n+    fn source(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }\n+    fn target(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }\n+}"}, {"sha": "f0b912fb87bbff17b7f4aac7ebf31b8c90fd2efb", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -19,25 +19,25 @@ Uses `Graph` as the underlying representation.\n \n use middle::graph;\n use middle::ty;\n-use middle::typeck;\n use syntax::ast;\n use util::nodemap::NodeMap;\n \n mod construct;\n+pub mod graphviz;\n \n pub struct CFG {\n-    exit_map: NodeMap<CFGIndex>,\n-    graph: CFGGraph,\n-    entry: CFGIndex,\n-    exit: CFGIndex,\n+    pub exit_map: NodeMap<CFGIndex>,\n+    pub graph: CFGGraph,\n+    pub entry: CFGIndex,\n+    pub exit: CFGIndex,\n }\n \n pub struct CFGNodeData {\n-    id: ast::NodeId\n+    pub id: ast::NodeId\n }\n \n pub struct CFGEdgeData {\n-    exiting_scopes: Vec<ast::NodeId>\n+    pub exiting_scopes: Vec<ast::NodeId>\n }\n \n pub type CFGIndex = graph::NodeIndex;\n@@ -55,8 +55,7 @@ pub struct CFGIndices {\n \n impl CFG {\n     pub fn new(tcx: &ty::ctxt,\n-               method_map: typeck::MethodMap,\n                blk: &ast::Block) -> CFG {\n-        construct::construct(tcx, method_map, blk)\n+        construct::construct(tcx, blk)\n     }\n }"}, {"sha": "5773d0bafa1d1a9e9265b22323b9300c5cfeab8a", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -70,10 +70,14 @@ pub static Incoming: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     fn get(&self) -> uint { let NodeIndex(v) = *self; v }\n+    /// Returns unique id (unique with respect to the graph holding associated node).\n+    pub fn node_id(&self) -> uint { self.get() }\n }\n \n impl EdgeIndex {\n     fn get(&self) -> uint { let EdgeIndex(v) = *self; v }\n+    /// Returns unique id (unique with respect to the graph holding associated edge).\n+    pub fn edge_id(&self) -> uint { self.get() }\n }\n \n impl<N,E> Graph<N,E> {\n@@ -201,39 +205,39 @@ impl<N,E> Graph<N,E> {\n     ///////////////////////////////////////////////////////////////////////////\n     // Iterating over nodes, edges\n \n-    pub fn each_node(&self, f: |NodeIndex, &Node<N>| -> bool) -> bool {\n+    pub fn each_node<'a>(&'a self, f: |NodeIndex, &'a Node<N>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n         self.nodes.iter().enumerate().advance(|(i, node)| f(NodeIndex(i), node))\n     }\n \n-    pub fn each_edge(&self, f: |EdgeIndex, &Edge<E>| -> bool) -> bool {\n+    pub fn each_edge<'a>(&'a self, f: |EdgeIndex, &'a Edge<E>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph\n         self.edges.iter().enumerate().advance(|(i, edge)| f(EdgeIndex(i), edge))\n     }\n \n-    pub fn each_outgoing_edge(&self,\n-                              source: NodeIndex,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_outgoing_edge<'a>(&'a self,\n+                                  source: NodeIndex,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all outgoing edges from the node `from`\n \n         self.each_adjacent_edge(source, Outgoing, f)\n     }\n \n-    pub fn each_incoming_edge(&self,\n-                              target: NodeIndex,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_incoming_edge<'a>(&'a self,\n+                                  target: NodeIndex,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all incoming edges to the node `target`\n \n         self.each_adjacent_edge(target, Incoming, f)\n     }\n \n-    pub fn each_adjacent_edge(&self,\n-                              node: NodeIndex,\n-                              dir: Direction,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_adjacent_edge<'a>(&'a self,\n+                                  node: NodeIndex,\n+                                  dir: Direction,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all edges adjacent to the node `node`\n         //! in the direction `dir` (either `Outgoing` or `Incoming)\n \n@@ -257,11 +261,11 @@ impl<N,E> Graph<N,E> {\n     // variables or other bitsets. This method facilitates such a\n     // computation.\n \n-    pub fn iterate_until_fixed_point(&self,\n-                                     op: |iter_index: uint,\n-                                          edge_index: EdgeIndex,\n-                                          edge: &Edge<E>|\n-                                          -> bool) {\n+    pub fn iterate_until_fixed_point<'a>(&'a self,\n+                                         op: |iter_index: uint,\n+                                              edge_index: EdgeIndex,\n+                                              edge: &'a Edge<E>|\n+                                              -> bool) {\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {"}, {"sha": "1c24d609551ab992d7791537ff8af17a96e1f80b", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1050,6 +1050,7 @@ fn check_raw_ptr_deriving(cx: &mut Context, item: &ast::Item) {\n static crate_attrs: &'static [&'static str] = &[\n     \"crate_type\", \"feature\", \"no_start\", \"no_main\", \"no_std\", \"crate_id\",\n     \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n+    \"no_builtins\",\n ];\n \n "}, {"sha": "92e3b95abadc1d34eb94c867a55c04a7a22fe0f2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -2226,6 +2226,7 @@ pub fn trans_crate(krate: ast::Crate,\n \n     let metadata_module = ccx.metadata_llmod;\n     let formats = ccx.tcx.dependency_formats.borrow().clone();\n+    let no_builtins = attr::contains_name(krate.attrs.as_slice(), \"no_builtins\");\n \n     (ccx.tcx, CrateTranslation {\n         context: llcx,\n@@ -2235,5 +2236,6 @@ pub fn trans_crate(krate: ast::Crate,\n         metadata: metadata,\n         reachable: reachable,\n         crate_formats: formats,\n+        no_builtins: no_builtins,\n     })\n }"}, {"sha": "861caa62515b517b0dcbe6cac2cc6f23be6145eb", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -309,6 +309,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeStmt(..) |\n         ast_map::NodeArg(..) |\n         ast_map::NodeBlock(..) |\n+        ast_map::NodePat(..) |\n         ast_map::NodeLocal(..) => {\n             ccx.sess().bug(format!(\"can't monomorphize a {:?}\", map_node))\n         }"}, {"sha": "bd911f42db0fa046002ffeb8b212e123341a671f", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1204,7 +1204,7 @@ impl Clean<Item> for ast::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl: decl.clean(),\n                     generics: generics.clean(),\n-                    fn_style: ast::NormalFn,\n+                    fn_style: ast::UnsafeFn,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "12636a3c490ad0ca64daafe083f8ff9dea0eb5d7", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -285,9 +285,7 @@ impl FsRequest {\n         FileStat {\n             size: stat.st_size as u64,\n             kind: kind,\n-            perm: unsafe {\n-                io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n-            },\n+            perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n             created: to_msec(stat.st_birthtim),\n             modified: to_msec(stat.st_mtim),\n             accessed: to_msec(stat.st_atim),"}, {"sha": "53515ec58e580c53b0d5fc96c1a0fc436fc59607", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -472,7 +472,7 @@ fn local_loop() -> &'static mut uvio::UvIoFactory {\n #[cfg(test)]\n mod test {\n     use std::mem::transmute;\n-    use std::unstable::run_in_bare_thread;\n+    use std::rt::thread::Thread;\n \n     use super::{slice_to_uv_buf, Loop};\n \n@@ -496,10 +496,10 @@ mod test {\n \n     #[test]\n     fn loop_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let mut loop_ = Loop::new();\n             loop_.run();\n             loop_.close();\n-        });\n+        }).join();\n     }\n }"}, {"sha": "71589e00fc008e5f08f68877a0e750be5db757d7", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -27,7 +27,7 @@ use std::rt::rtio;\n use std::rt::rtio::{ProcessConfig, IoFactory, EventLoop};\n use ai = std::io::net::addrinfo;\n \n-#[cfg(test)] use std::unstable::run_in_bare_thread;\n+#[cfg(test)] use std::rt::thread::Thread;\n \n use super::{uv_error_to_io_error, Loop};\n \n@@ -116,7 +116,7 @@ impl EventLoop for UvEventLoop {\n \n #[test]\n fn test_callback_run_once() {\n-    run_in_bare_thread(proc() {\n+    Thread::start(proc() {\n         let mut event_loop = UvEventLoop::new();\n         let mut count = 0;\n         let count_ptr: *mut int = &mut count;\n@@ -125,7 +125,7 @@ fn test_callback_run_once() {\n         });\n         event_loop.run();\n         assert_eq!(count, 1);\n-    });\n+    }).join();\n }\n \n pub struct UvIoFactory {"}, {"sha": "163ccd22552d36fed65495580b6c4a5c1b7798a0", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -136,10 +136,20 @@ macro_rules! bitflags(\n                 self.bits\n             }\n \n-            /// Convert from underlying bit representation. Unsafe because the\n-            /// bits are not guaranteed to represent valid flags.\n-            pub unsafe fn from_bits(bits: $T) -> $BitFlags {\n-                $BitFlags { bits: bits }\n+            /// Convert from underlying bit representation, unless that\n+            /// representation contains bits that do not correspond to a flag.\n+            pub fn from_bits(bits: $T) -> ::std::option::Option<$BitFlags> {\n+                if (bits & !$BitFlags::all().bits()) != 0 {\n+                    ::std::option::None\n+                } else {\n+                    ::std::option::Some($BitFlags { bits: bits })\n+                }\n+            }\n+\n+            /// Convert from underlying bit representation, dropping any bits\n+            /// that do not correspond to flags.\n+            pub fn from_bits_truncate(bits: $T) -> $BitFlags {\n+                $BitFlags { bits: bits } & $BitFlags::all()\n             }\n \n             /// Returns `true` if no flags are currently stored.\n@@ -209,6 +219,7 @@ macro_rules! bitflags(\n \n #[cfg(test)]\n mod tests {\n+    use option::{Some, None};\n     use ops::{BitOr, BitAnd, Sub, Not};\n \n     bitflags!(\n@@ -231,9 +242,21 @@ mod tests {\n \n     #[test]\n     fn test_from_bits() {\n-        assert!(unsafe { Flags::from_bits(0x00000000) } == Flags::empty());\n-        assert!(unsafe { Flags::from_bits(0x00000001) } == FlagA);\n-        assert!(unsafe { Flags::from_bits(0x00000111) } == FlagABC);\n+        assert!(Flags::from_bits(0) == Some(Flags::empty()));\n+        assert!(Flags::from_bits(0x1) == Some(FlagA));\n+        assert!(Flags::from_bits(0x10) == Some(FlagB));\n+        assert!(Flags::from_bits(0x11) == Some(FlagA | FlagB));\n+        assert!(Flags::from_bits(0x1000) == None);\n+    }\n+\n+    #[test]\n+    fn test_from_bits_truncate() {\n+        assert!(Flags::from_bits_truncate(0) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0x1) == FlagA);\n+        assert!(Flags::from_bits_truncate(0x10) == FlagB);\n+        assert!(Flags::from_bits_truncate(0x11) == (FlagA | FlagB));\n+        assert!(Flags::from_bits_truncate(0x1000) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0x1001) == FlagA);\n     }\n \n     #[test]"}, {"sha": "68cbdd2e0aa4740c5c2bd457de0acba6d593075e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -209,7 +209,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n impl<W: Writer> Drop for BufferedWriter<W> {\n     fn drop(&mut self) {\n         if self.inner.is_some() {\n-            // FIXME(#12628): should this error be ignored?\n+            // dtors should not fail, so we ignore a failed flush\n             let _ = self.flush_buf();\n         }\n     }\n@@ -370,6 +370,7 @@ mod test {\n     use io;\n     use prelude::*;\n     use super::*;\n+    use super::super::{IoResult, EndOfFile};\n     use super::super::mem::{MemReader, MemWriter, BufReader};\n     use self::test::Bencher;\n     use str::StrSlice;\n@@ -584,6 +585,24 @@ mod test {\n         assert_eq!(it.next(), None);\n     }\n \n+    #[test]\n+    #[should_fail]\n+    fn dont_fail_in_drop_on_failed_flush() {\n+        struct FailFlushWriter;\n+\n+        impl Writer for FailFlushWriter {\n+            fn write(&mut self, _buf: &[u8]) -> IoResult<()> { Ok(()) }\n+            fn flush(&mut self) -> IoResult<()> { Err(io::standard_error(EndOfFile)) }\n+        }\n+\n+        let writer = FailFlushWriter;\n+        let _writer = BufferedWriter::new(writer);\n+\n+        // Trigger failure. If writer fails *again* due to the flush\n+        // error then the process will abort.\n+        fail!();\n+    }\n+\n     #[bench]\n     fn bench_buffered_reader(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "0cf00b2c1a9a7099c77bd3eca927d447d7321887", "filename": "src/libstd/io/flate.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibstd%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibstd%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fflate.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -1,52 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Some various other I/O types\n-\n-// FIXME(#3660): should move to libextra\n-\n-use prelude::*;\n-use super::*;\n-\n-/// A Writer decorator that compresses using the 'deflate' scheme\n-pub struct DeflateWriter<W> {\n-    priv inner_writer: W\n-}\n-\n-impl<W: Writer> DeflateWriter<W> {\n-    pub fn new(inner_writer: W) -> DeflateWriter<W> {\n-        DeflateWriter {\n-            inner_writer: inner_writer\n-        }\n-    }\n-}\n-\n-impl<W: Writer> Writer for DeflateWriter<W> {\n-    fn write(&mut self, _buf: &[u8]) { fail!() }\n-\n-    fn flush(&mut self) { fail!() }\n-}\n-\n-/// A Reader decorator that decompresses using the 'deflate' scheme\n-pub struct InflateReader<R> {\n-    priv inner_reader: R\n-}\n-\n-impl<R: Reader> InflateReader<R> {\n-    pub fn new(inner_reader: R) -> InflateReader<R> {\n-        InflateReader {\n-            inner_reader: inner_reader\n-        }\n-    }\n-}\n-\n-impl<R: Reader> Reader for InflateReader<R> {\n-    fn read(&mut self, _buf: &mut [u8]) -> Option<uint> { fail!() }\n-}"}, {"sha": "b4fb95c8af7702769858038a2a4180a99d561df4", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -10,21 +10,22 @@\n \n //! Temporary files and directories\n \n-use io::fs;\n+use io::{fs, IoResult};\n use io;\n use iter::{Iterator, range};\n use libc;\n use ops::Drop;\n use option::{Option, None, Some};\n use os;\n use path::{Path, GenericPath};\n-use result::{Ok, Err, ResultUnwrap};\n+use result::{Ok, Err};\n use sync::atomics;\n \n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n pub struct TempDir {\n-    path: Option<Path>\n+    path: Option<Path>,\n+    disarmed: bool\n }\n \n impl TempDir {\n@@ -48,7 +49,7 @@ impl TempDir {\n             let p = tmpdir.join(filename);\n             match fs::mkdir(&p, io::UserRWX) {\n                 Err(..) => {}\n-                Ok(()) => return Some(TempDir { path: Some(p) })\n+                Ok(()) => return Some(TempDir { path: Some(p), disarmed: false })\n             }\n         }\n         None\n@@ -75,15 +76,32 @@ impl TempDir {\n     pub fn path<'a>(&'a self) -> &'a Path {\n         self.path.get_ref()\n     }\n+\n+    /// Close and remove the temporary directory\n+    ///\n+    /// Although `TempDir` removes the directory on drop, in the destructor\n+    /// any errors are ignored. To detect errors cleaning up the temporary\n+    /// directory, call `close` instead.\n+    pub fn close(mut self) -> IoResult<()> {\n+        self.cleanup_dir()\n+    }\n+\n+    fn cleanup_dir(&mut self) -> IoResult<()> {\n+        assert!(!self.disarmed);\n+        self.disarmed = true;\n+        match self.path {\n+            Some(ref p) => {\n+                fs::rmdir_recursive(p)\n+            }\n+            None => Ok(())\n+        }\n+    }\n }\n \n impl Drop for TempDir {\n     fn drop(&mut self) {\n-        for path in self.path.iter() {\n-            if path.exists() {\n-                // FIXME: is failing the right thing to do?\n-                fs::rmdir_recursive(path).unwrap();\n-            }\n+        if !self.disarmed {\n+            let _ = self.cleanup_dir();\n         }\n     }\n }"}, {"sha": "87c4ef1046f1a490405395c7431bf4789b244ec6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -133,16 +133,13 @@ extern crate core;\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n #[cfg(test)] pub use ty = realstd::ty;\n-#[cfg(not(stage0), test)] pub use owned = realstd::owned;\n+#[cfg(test)] pub use owned = realstd::owned;\n \n #[cfg(not(test))] pub use cmp = core::cmp;\n #[cfg(not(test))] pub use kinds = core::kinds;\n #[cfg(not(test))] pub use ops = core::ops;\n #[cfg(not(test))] pub use ty = core::ty;\n \n-#[cfg(stage0, test)] pub use owned = realstd::owned;\n-#[cfg(stage0, not(test))] pub use owned = core::owned;\n-\n pub use core::any;\n pub use core::bool;\n pub use core::cell;\n@@ -209,7 +206,7 @@ pub mod ascii;\n \n pub mod rc;\n pub mod gc;\n-#[cfg(not(stage0), not(test))]\n+#[cfg(not(test))]\n pub mod owned;\n \n /* Common traits */"}, {"sha": "9f0ed8044800cbbfec32f75954eb5ba9ae779347", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -53,24 +53,24 @@ impl Local<local_ptr::Borrowed<Task>> for Task {\n #[cfg(test)]\n mod test {\n     use option::{None, Option};\n-    use unstable::run_in_bare_thread;\n+    use rt::thread::Thread;\n     use super::*;\n     use owned::Box;\n     use rt::task::Task;\n \n     #[test]\n     fn thread_local_task_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn thread_local_task_two_instances() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n@@ -79,12 +79,12 @@ mod test {\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn borrow_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -93,12 +93,12 @@ mod test {\n             }\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn borrow_with_return() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -108,12 +108,12 @@ mod test {\n \n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn try_take() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -122,7 +122,7 @@ mod test {\n             assert!(u.is_none());\n \n             cleanup_task(t);\n-        });\n+        }).join();\n     }\n \n     fn cleanup_task(mut t: Box<Task>) {"}, {"sha": "e25fa4734d5cb0e06161e8daae2a6e8607264503", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -273,13 +273,8 @@ mod imp {\n         assert_eq!(pthread_detach(native), 0);\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"android\")]\n     pub unsafe fn yield_now() { assert_eq!(sched_yield(), 0); }\n \n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"android\"))]\n-    pub unsafe fn yield_now() { assert_eq!(pthread_yield(), 0); }\n-\n     // glibc >= 2.15 has a __pthread_get_minstack() function that returns\n     // PTHREAD_STACK_MIN plus however many bytes are needed for thread-local\n     // storage.  We need that information to avoid blowing up when a small stack\n@@ -326,12 +321,7 @@ mod imp {\n         fn pthread_attr_setdetachstate(attr: *mut libc::pthread_attr_t,\n                                        state: libc::c_int) -> libc::c_int;\n         fn pthread_detach(thread: libc::pthread_t) -> libc::c_int;\n-\n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"android\")]\n         fn sched_yield() -> libc::c_int;\n-        #[cfg(not(target_os = \"macos\"), not(target_os = \"android\"))]\n-        fn pthread_yield() -> libc::c_int;\n     }\n }\n "}, {"sha": "aee5fe9ff968e837e6943c247cbdeabaeed20236", "filename": "src/libstd/str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -564,6 +564,11 @@ impl<'a> IntoMaybeOwned<'a> for ~str {\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { Owned(self) }\n }\n \n+impl<'a> IntoMaybeOwned<'a> for StrBuf {\n+    #[inline]\n+    fn into_maybe_owned(self) -> MaybeOwned<'a> { Owned(self.into_owned()) }\n+}\n+\n impl<'a> IntoMaybeOwned<'a> for &'a str {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { Slice(self) }"}, {"sha": "f464f70772d9412e6616f21c4f3b9bf70931f9d4", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -11,7 +11,6 @@\n #![doc(hidden)]\n \n use libc::uintptr_t;\n-use kinds::Send;\n \n pub use core::finally;\n \n@@ -21,36 +20,6 @@ pub mod simd;\n pub mod sync;\n pub mod mutex;\n \n-/**\n-\n-Start a new thread outside of the current runtime context and wait\n-for it to terminate.\n-\n-The executing thread has no access to a task pointer and will be using\n-a normal large stack.\n-*/\n-pub fn run_in_bare_thread(f: proc():Send) {\n-    use rt::thread::Thread;\n-    Thread::start(f).join()\n-}\n-\n-#[test]\n-fn test_run_in_bare_thread() {\n-    let i = 100;\n-    run_in_bare_thread(proc() {\n-        assert_eq!(i, 100);\n-    });\n-}\n-\n-#[test]\n-fn test_run_in_bare_thread_exchange() {\n-    // Does the exchange heap work without the runtime?\n-    let i = box 100;\n-    run_in_bare_thread(proc() {\n-        assert!(i == box 100);\n-    });\n-}\n-\n /// Dynamically inquire about whether we're running under V.\n /// You should usually not use this unless your test definitely\n /// can't run correctly un-altered. Valgrind is there to help"}, {"sha": "57f8d78948fa0ac5faab057f25693e42daf2c9c4", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -635,14 +635,14 @@ impl<T> Vec<T> {\n     /// ```\n     pub fn truncate(&mut self, len: uint) {\n         unsafe {\n-            let mut i = len;\n             // drop any extra elements\n-            while i < self.len {\n-                ptr::read(self.as_slice().unsafe_ref(i));\n-                i += 1;\n+            while len < self.len {\n+                // decrement len before the read(), so a failure on Drop doesn't\n+                // re-drop the just-failed value.\n+                self.len -= 1;\n+                ptr::read(self.as_slice().unsafe_ref(self.len));\n             }\n         }\n-        self.len = len;\n     }\n \n     /// Work with `self` as a mutable slice.\n@@ -1862,4 +1862,39 @@ mod tests {\n         assert_eq!(b[0].x, 42);\n         assert_eq!(b[1].x, 84);\n     }\n+\n+    #[test]\n+    fn test_vec_truncate_drop() {\n+        static mut drops: uint = 0;\n+        struct Elem(int);\n+        impl Drop for Elem {\n+            fn drop(&mut self) {\n+                unsafe { drops += 1; }\n+            }\n+        }\n+\n+        let mut v = vec![Elem(1), Elem(2), Elem(3), Elem(4), Elem(5)];\n+        assert_eq!(unsafe { drops }, 0);\n+        v.truncate(3);\n+        assert_eq!(unsafe { drops }, 2);\n+        v.truncate(0);\n+        assert_eq!(unsafe { drops }, 5);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_vec_truncate_fail() {\n+        struct BadElem(int);\n+        impl Drop for BadElem {\n+            fn drop(&mut self) {\n+                let BadElem(ref mut x) = *self;\n+                if *x == 0xbadbeef {\n+                    fail!(\"BadElem failure: 0xbadbeef\")\n+                }\n+            }\n+        }\n+\n+        let mut v = vec![BadElem(1), BadElem(2), BadElem(0xbadbeef), BadElem(4)];\n+        v.truncate(0);\n+    }\n }"}, {"sha": "6a7b913dce406222ffd0674888170f6520290051", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -103,6 +103,7 @@ pub enum Node {\n     NodeStmt(@Stmt),\n     NodeArg(@Pat),\n     NodeLocal(@Pat),\n+    NodePat(@Pat),\n     NodeBlock(P<Block>),\n \n     /// NodeStructCtor represents a tuple struct.\n@@ -127,6 +128,7 @@ enum MapEntry {\n     EntryStmt(NodeId, @Stmt),\n     EntryArg(NodeId, @Pat),\n     EntryLocal(NodeId, @Pat),\n+    EntryPat(NodeId, @Pat),\n     EntryBlock(NodeId, P<Block>),\n     EntryStructCtor(NodeId, @StructDef),\n     EntryLifetime(NodeId, @Lifetime),\n@@ -154,6 +156,7 @@ impl MapEntry {\n             EntryStmt(id, _) => id,\n             EntryArg(id, _) => id,\n             EntryLocal(id, _) => id,\n+            EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n             EntryStructCtor(id, _) => id,\n             EntryLifetime(id, _) => id,\n@@ -172,6 +175,7 @@ impl MapEntry {\n             EntryStmt(_, p) => NodeStmt(p),\n             EntryArg(_, p) => NodeArg(p),\n             EntryLocal(_, p) => NodeLocal(p),\n+            EntryPat(_, p) => NodePat(p),\n             EntryBlock(_, p) => NodeBlock(p),\n             EntryStructCtor(_, p) => NodeStructCtor(p),\n             EntryLifetime(_, p) => NodeLifetime(p),\n@@ -399,6 +403,7 @@ impl Map {\n             Some(NodeExpr(expr)) => expr.span,\n             Some(NodeStmt(stmt)) => stmt.span,\n             Some(NodeArg(pat)) | Some(NodeLocal(pat)) => pat.span,\n+            Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n             _ => fail!(\"node_span: could not find span for id {}\", id),\n@@ -513,7 +518,9 @@ impl<'a, F: FoldOps> Folder for Ctx<'a, F> {\n                 // Note: this is at least *potentially* a pattern...\n                 self.insert(pat.id, EntryLocal(self.parent, pat));\n             }\n-            _ => {}\n+            _ => {\n+                self.insert(pat.id, EntryPat(self.parent, pat));\n+            }\n         }\n \n         pat\n@@ -704,6 +711,9 @@ fn node_id_to_str(map: &Map, id: NodeId) -> StrBuf {\n             (format!(\"local {} (id={})\",\n                     pprust::pat_to_str(pat), id)).to_strbuf()\n         }\n+        Some(NodePat(pat)) => {\n+            (format!(\"pat {} (id={})\", pprust::pat_to_str(pat), id)).to_strbuf()\n+        }\n         Some(NodeBlock(block)) => {\n             (format!(\"block {} (id={})\",\n                     pprust::block_to_str(block), id)).to_strbuf()"}, {"sha": "64776421fa1451c122839a93926844d4b8b52087", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -128,17 +128,27 @@ LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`\n // field of a PassManagerBuilder, we expose our own method of doing so.\n extern \"C\" void\n-LLVMRustAddBuilderLibraryInfo(LLVMPassManagerBuilderRef PMB, LLVMModuleRef M) {\n+LLVMRustAddBuilderLibraryInfo(LLVMPassManagerBuilderRef PMB,\n+                              LLVMModuleRef M,\n+                              bool DisableSimplifyLibCalls) {\n     Triple TargetTriple(unwrap(M)->getTargetTriple());\n-    unwrap(PMB)->LibraryInfo = new TargetLibraryInfo(TargetTriple);\n+    TargetLibraryInfo *TLI = new TargetLibraryInfo(TargetTriple);\n+    if (DisableSimplifyLibCalls)\n+      TLI->disableAllFunctions();\n+    unwrap(PMB)->LibraryInfo = TLI;\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to create the\n // TargetLibraryInfo pass, so we use this method to do so.\n extern \"C\" void\n-LLVMRustAddLibraryInfo(LLVMPassManagerRef PMB, LLVMModuleRef M) {\n+LLVMRustAddLibraryInfo(LLVMPassManagerRef PMB,\n+                       LLVMModuleRef M,\n+                       bool DisableSimplifyLibCalls) {\n     Triple TargetTriple(unwrap(M)->getTargetTriple());\n-    unwrap(PMB)->add(new TargetLibraryInfo(TargetTriple));\n+    TargetLibraryInfo *TLI = new TargetLibraryInfo(TargetTriple);\n+    if (DisableSimplifyLibCalls)\n+      TLI->disableAllFunctions();\n+    unwrap(PMB)->add(TLI);\n }\n \n // Unfortunately, the LLVM C API doesn't provide an easy way of iterating over"}, {"sha": "4c62d519d78122c7d0ce83c1f9d79444e84a7387", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -1,3 +1,11 @@\n+S 2014-05-15 6a2b3d1\n+  freebsd-x86_64 afc98b59cb819025fecdb9d145ca4463f857a477\n+  linux-i386 d6f7a404412ea34db3d19814ca21fe6fa662b02f\n+  linux-x86_64 3dfb54406a7ea75565a7ea3071daad885cb91775\n+  macos-i386 bebb937551d601ad908c9e4eaa196cc7a977c503\n+  macos-x86_64 08346ed401ad2891c7d2ba0aac0960f6e77bb78b\n+  winnt-i386 ad8e5b8292a00f60f1f7dc2e35bd18abeb5b858d\n+\n S 2014-05-11 72fc4a5\n   freebsd-x86_64 82db6355b0b7c8023c8845a74e2f224da2831b50\n   linux-i386 91901299d5f86f5b67377d940073908a1f0e4e82"}, {"sha": "debd12874da1ee6e1c485096df7ef1ae3143e7b1", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 131, "deletions": 35, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -7,73 +7,169 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(macro_rules)]\n+#![feature(simd)]\n+#![allow(experimental)]\n \n // ignore-pretty very bad with line comments\n \n extern crate sync;\n \n use std::io;\n+use std::os;\n+use std::unstable::simd::f64x2;\n use sync::Future;\n+use sync::Arc;\n \n static ITER: int = 50;\n static LIMIT: f64 = 2.0;\n+static WORKERS: uint = 16;\n+\n+#[inline(always)]\n+fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n+    assert!(WORKERS % 2 == 0);\n+\n+    // Ensure w and h are multiples of 8.\n+    let w = (w + 7) / 8 * 8;\n+    let h = w;\n+\n+    let chunk_size = h / WORKERS;\n+\n+    // Account for remainders in workload division, e.g. 1000 / 16 = 62.5\n+    let first_chunk_size = if h % WORKERS != 0 {\n+        chunk_size + h % WORKERS\n+    } else {\n+        chunk_size\n+    };\n+\n+    // precalc values\n+    let inverse_w_doubled = 2.0 / w as f64;\n+    let inverse_h_doubled = 2.0 / h as f64;\n+    let v_inverses = f64x2(inverse_w_doubled, inverse_h_doubled);\n+    let v_consts = f64x2(1.5, 1.0);\n+\n+    // A lot of this code assumes this (so do other lang benchmarks)\n+    assert!(w == h);\n+    let mut precalc_r = Vec::with_capacity(w);\n+    let mut precalc_i = Vec::with_capacity(h);\n+\n+    let precalc_futures = Vec::from_fn(WORKERS, |i| {\n+        Future::spawn(proc () {\n+            let mut rs = Vec::with_capacity(w / WORKERS);\n+            let mut is = Vec::with_capacity(w / WORKERS);\n+\n+            let start = i * chunk_size;\n+            let end = if i == 0 {\n+                first_chunk_size\n+            } else {\n+                (i + 1) * chunk_size\n+            };\n+\n+            // This assumes w == h\n+            for x in range(start, end) {\n+                let xf = x as f64;\n+                let xy = f64x2(xf, xf);\n+\n+                let f64x2(r, i) = xy * v_inverses - v_consts;\n+                rs.push(r);\n+                is.push(i);\n+            }\n+\n+            (rs, is)\n+        })\n+    });\n+\n+    for res in precalc_futures.move_iter() {\n+        let (rs, is) = res.unwrap();\n+        precalc_r.push_all_move(rs);\n+        precalc_i.push_all_move(is);\n+    }\n+\n+    assert_eq!(precalc_r.len(), w);\n+    assert_eq!(precalc_i.len(), h);\n+\n+    let arc_init_r = Arc::new(precalc_r);\n+    let arc_init_i = Arc::new(precalc_i);\n+\n+    let data = Vec::from_fn(WORKERS, |i| {\n+        let vec_init_r = arc_init_r.clone();\n+        let vec_init_i = arc_init_i.clone();\n+\n+        Future::spawn(proc () {\n+            let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n+            let init_r_slice = vec_init_r.as_slice();\n+            for &init_i in vec_init_i.slice(i * chunk_size, (i + 1) * chunk_size).iter() {\n+                write_line(init_i, init_r_slice, &mut res);\n+            }\n+\n+            res\n+        })\n+    });\n+\n+    try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n+    for res in data.move_iter() {\n+        try!(out.write(res.unwrap().as_slice()));\n+    }\n+    out.flush()\n+}\n \n fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n+    let v_init_i : f64x2 = f64x2(init_i, init_i);\n+    let v_2 : f64x2 = f64x2(2.0, 2.0);\n+    static LIMIT_SQUARED: f64 = LIMIT * LIMIT;\n+\n     for chunk_init_r in vec_init_r.chunks(8) {\n         let mut cur_byte = 0xff;\n-        let mut cur_bitmask = 0x80;\n-        for &init_r in chunk_init_r.iter() {\n-            let mut cur_r = init_r;\n-            let mut cur_i = init_i;\n+        let mut i = 0;\n+\n+        while i < 8 {\n+            let v_init_r = f64x2(chunk_init_r[i], chunk_init_r[i + 1]);\n+            let mut cur_r = v_init_r;\n+            let mut cur_i = v_init_i;\n+            let mut r_sq = v_init_r * v_init_r;\n+            let mut i_sq = v_init_i * v_init_i;\n+\n+            let mut b = 0;\n             for _ in range(0, ITER) {\n                 let r = cur_r;\n                 let i = cur_i;\n-                cur_r = r * r - i * i + init_r;\n-                cur_i = 2.0 * r * i + init_i;\n \n-                if r * r + i * i > LIMIT * LIMIT {\n-                    cur_byte &= !cur_bitmask;\n-                    break;\n+                cur_i = v_2 * r * i + v_init_i;\n+                cur_r = r_sq - i_sq + v_init_r;\n+\n+                let f64x2(bit1, bit2) = r_sq + i_sq;\n+\n+                if bit1 > LIMIT_SQUARED {\n+                    b |= 2;\n+                    if b == 3 { break; }\n+                }\n+\n+                if bit2 > LIMIT_SQUARED {\n+                    b |= 1;\n+                    if b == 3 { break; }\n                 }\n+\n+                r_sq = cur_r * cur_r;\n+                i_sq = cur_i * cur_i;\n             }\n-            cur_bitmask >>= 1;\n-        }\n-        res.push(cur_byte);\n-    }\n-}\n \n-fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n-    // Ensure w and h are multiples of 8.\n-    let w = (w + 7) / 8 * 8;\n-    let h = w;\n-    let chunk_size = h / 8;\n-\n-    let data: Vec<Future<Vec<u8>>> = range(0u, 8).map(|i| Future::spawn(proc () {\n-        let vec_init_r = Vec::from_fn(w, |x| 2.0 * (x as f64) / (w as f64) - 1.5);\n-        let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n-        for y in range(i * chunk_size, (i + 1) * chunk_size) {\n-            let init_i = 2.0 * (y as f64) / (h as f64) - 1.0;\n-            write_line(init_i, vec_init_r.as_slice(), &mut res);\n+            cur_byte = (cur_byte << 2) + b;\n+            i += 2;\n         }\n-        res\n-    })).collect();\n \n-    try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n-    for res in data.move_iter() {\n-        try!(out.write(res.unwrap().as_slice()));\n+        res.push(cur_byte^-1);\n     }\n-    out.flush()\n }\n \n fn main() {\n-    let args = std::os::args();\n+    let args = os::args();\n     let args = args.as_slice();\n     let res = if args.len() < 2 {\n         println!(\"Test mode: do not dump the image because it's not utf8, \\\n                   which interferes with the test runner.\");\n-        mandelbrot(1000, std::io::util::NullWriter)\n+        mandelbrot(1000, io::util::NullWriter)\n     } else {\n-        mandelbrot(from_str(args[1]).unwrap(), std::io::stdout())\n+        mandelbrot(from_str(args[1]).unwrap(), io::stdout())\n     };\n     res.unwrap();\n }"}, {"sha": "fedcc89cd429fb3d8dfebf90bb3a9c1287995bc9", "filename": "src/test/run-make/graphviz-flowgraph/Makefile", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,37 @@\n+-include ../tools.mk\n+\n+FILES=f00.rs f01.rs f02.rs f03.rs f04.rs f05.rs f06.rs f07.rs \\\n+      f08.rs f09.rs f10.rs f11.rs f12.rs f13.rs f14.rs f15.rs \\\n+      f16.rs f17.rs f18.rs f19.rs f20.rs f21.rs f22.rs\n+\n+\n+# all: $(patsubst %.rs,$(TMPDIR)/%.dot,$(FILES)) $(patsubst %.rs,$(TMPDIR)/%.pp,$(FILES))\n+all: $(patsubst %.rs,$(TMPDIR)/%.check,$(FILES))\n+\n+\n+RUSTC_LIB=$(RUSTC) --crate-type=lib\n+\n+define FIND_LAST_BLOCK\n+LASTBLOCKNUM_$(1) := $(shell $(RUSTC_LIB) --pretty=expanded,identified $(1) \\\n+\t\t\t | grep block\n+\t\t\t | tail -1\n+\t\t\t | sed -e 's@.*/\\* block \\([0-9]*\\) \\*/.*@\\1@')\n+endef\n+\n+ifeq ($(findstring rustc,$(RUSTC)),)\n+$(error Must set RUSTC)\n+endif\n+\n+$(TMPDIR)/%.pp: %.rs\n+\t$(RUSTC_LIB) --pretty=expanded,identified $< -o $@\n+\n+$(TMPDIR)/%.dot: %.rs\n+\t$(eval $(call FIND_LAST_BLOCK,$<))\n+\t$(RUSTC_LIB) --pretty flowgraph=$(LASTBLOCKNUM_$<) $< -o $@.tmp\n+\tcat $@.tmp | sed -e 's@ (id=[0-9]*)@@g' \\\n+                         -e 's@\\[label=\"\"\\]@@' \\\n+                         -e 's@digraph [a-zA-Z0-9_]* @digraph block @' \\\n+                     > $@\n+\n+$(TMPDIR)/%.check: %.rs $(TMPDIR)/%.dot\n+\tdiff -u $(patsubst %.rs,$(TMPDIR)/%.dot,$<) $(patsubst %.rs,%.dot-expected.dot,$<)"}, {"sha": "f699771ef24c6da108174a5bc4e4a98fc00f4df3", "filename": "src/test/run-make/graphviz-flowgraph/f00.dot-expected.dot", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,7 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"block { }\"];\n+    N0 -> N2;\n+    N2 -> N1;\n+}"}, {"sha": "4e7fc7ea9b084cee1eb5bc4012572b97dc8429b6", "filename": "src/test/run-make/graphviz-flowgraph/f00.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff00.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn empty_0() {\n+\n+}"}, {"sha": "9d8411cfc58df447b93f9755e08cc1cecb9dd8b3", "filename": "src/test/run-make/graphviz-flowgraph/f01.dot-expected.dot", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,9 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 1\"];\n+    N3[label=\"block { 1; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N1;\n+}"}, {"sha": "231aab69e50d95cd17f843f9047e6aab15ffc0c8", "filename": "src/test/run-make/graphviz-flowgraph/f01.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn lit_1() {\n+    1;\n+}"}, {"sha": "ada3f091808b8d18d8c629a1c9eda6afab3a3b52", "filename": "src/test/run-make/graphviz-flowgraph/f02.dot-expected.dot", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,9 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"local _x\"];\n+    N3[label=\"block { let _x: int; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N1;\n+}"}, {"sha": "3cdd73a49e18e99514cedc16a726af2e1e29e34f", "filename": "src/test/run-make/graphviz-flowgraph/f02.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff02.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn decl_x_2() {\n+    let _x : int;\n+}"}, {"sha": "aff430459e87229e65f80db04ca1fbb536f5460a", "filename": "src/test/run-make/graphviz-flowgraph/f03.dot-expected.dot", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 3\"];\n+    N3[label=\"expr 33\"];\n+    N4[label=\"expr 3 + 33\"];\n+    N5[label=\"block { 3 + 33; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N1;\n+}"}, {"sha": "8b172c0a10512655dfa0b6dc97b038f718b038ce", "filename": "src/test/run-make/graphviz-flowgraph/f03.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_add_3() {\n+    3 + 33;\n+}"}, {"sha": "adcc582c73387c646d5ea4957934e16ba8391a45", "filename": "src/test/run-make/graphviz-flowgraph/f04.dot-expected.dot", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,11 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 4\"];\n+    N3[label=\"local _x\"];\n+    N4[label=\"block { let _x = 4; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N1;\n+}"}, {"sha": "2a0ac8ac9e57080224887d5891db71bc5a6b72c4", "filename": "src/test/run-make/graphviz-flowgraph/f04.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn pat_id_4() {\n+    let _x = 4;\n+}"}, {"sha": "2d52c14da6246aa5af033f20884922ec8bd3af34", "filename": "src/test/run-make/graphviz-flowgraph/f05.dot-expected.dot", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,19 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 5\"];\n+    N3[label=\"expr 55\"];\n+    N4[label=\"expr (5, 55)\"];\n+    N5[label=\"local _x\"];\n+    N6[label=\"local _y\"];\n+    N7[label=\"pat (_x, _y)\"];\n+    N8[label=\"block { let (_x, _y) = (5, 55); }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N1;\n+}"}, {"sha": "616d822bed07bf61283be397aff1ba42d61790c7", "filename": "src/test/run-make/graphviz-flowgraph/f05.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn pat_tup_5() {\n+    let (_x, _y) = (5, 55);\n+}"}, {"sha": "61b40d68dd1b56431ce2fbd2a9170cbf9dd35d7a", "filename": "src/test/run-make/graphviz-flowgraph/f06.dot-expected.dot", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,15 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 6\"];\n+    N3[label=\"expr S6{val: 6,}\"];\n+    N4[label=\"local _x\"];\n+    N5[label=\"pat S6{val: _x}\"];\n+    N6[label=\"block { let S6{val: _x} = S6{val: 6,}; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N1;\n+}"}, {"sha": "c914409629cb0af784c97ff52856fe89f59f73dc", "filename": "src/test/run-make/graphviz-flowgraph/f06.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S6 { val: int }\n+pub fn pat_struct_6() {\n+    let S6 { val: _x } = S6{ val: 6 };\n+}"}, {"sha": "c99af1791495ff7605fd23eff22f8070e5aabc3c", "filename": "src/test/run-make/graphviz-flowgraph/f07.dot-expected.dot", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,33 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 7\"];\n+    N3[label=\"expr 77\"];\n+    N4[label=\"expr 777\"];\n+    N5[label=\"expr 7777\"];\n+    N6[label=\"expr [7, 77, 777, 7777]\"];\n+    N7[label=\"expr match [7, 77, 777, 7777] { [x, y, ..] => x + y }\"];\n+    N8[label=\"local x\"];\n+    N9[label=\"local y\"];\n+    N10[label=\"pat ..\"];\n+    N11[label=\"pat [x, y, ..]\"];\n+    N12[label=\"expr x\"];\n+    N13[label=\"expr y\"];\n+    N14[label=\"expr x + y\"];\n+    N15[label=\"block { match [7, 77, 777, 7777] { [x, y, ..] => x + y }; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N8;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N14;\n+    N14 -> N7;\n+    N7 -> N15;\n+    N15 -> N1;\n+}"}, {"sha": "39f71d309fdf9363d55bba93be259e0c8a51878a", "filename": "src/test/run-make/graphviz-flowgraph/f07.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn pat_vec_7() {\n+    match [7, 77, 777, 7777] {\n+        [x, y, ..] => x + y\n+    };\n+}"}, {"sha": "61a708cd9ccd4c1b15276a3a1538d572e3fac4ad", "filename": "src/test/run-make/graphviz-flowgraph/f08.dot-expected.dot", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,30 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 8\"];\n+    N3[label=\"local x\"];\n+    N4[label=\"local _y\"];\n+    N5[label=\"expr x\"];\n+    N6[label=\"expr 88\"];\n+    N7[label=\"expr x > 88\"];\n+    N8[label=\"expr 888\"];\n+    N9[label=\"expr _y\"];\n+    N10[label=\"expr _y = 888\"];\n+    N11[label=\"block { _y = 888; }\"];\n+    N12[label=\"expr if x > 88 { _y = 888; }\"];\n+    N13[label=\"block { let x = 8; let _y; if x > 88 { _y = 888; } }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N7 -> N12;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N1;\n+}"}, {"sha": "6ba7b03d54da5f206a715299aee42935965c559b", "filename": "src/test/run-make/graphviz-flowgraph/f08.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_if_onearm_8() {\n+    let x = 8; let _y;\n+    if x > 88 {\n+        _y = 888;\n+    }\n+}"}, {"sha": "892b9fcd841f8b6849864472d3165e6ba2697634", "filename": "src/test/run-make/graphviz-flowgraph/f09.dot-expected.dot", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,44 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 91\"];\n+    N3[label=\"local x\"];\n+    N4[label=\"local _y\"];\n+    N5[label=\"expr x\"];\n+    N6[label=\"expr 92\"];\n+    N7[label=\"expr x > 92\"];\n+    N8[label=\"expr 93\"];\n+    N9[label=\"expr _y\"];\n+    N10[label=\"expr _y = 93\"];\n+    N11[label=\"block { _y = 93; }\"];\n+    N12[label=\"expr 94\"];\n+    N13[label=\"expr 95\"];\n+    N14[label=\"expr 94 + 95\"];\n+    N15[label=\"expr _y\"];\n+    N16[label=\"expr _y = 94 + 95\"];\n+    N17[label=\"block { _y = 94 + 95; }\"];\n+    N18[label=\"expr { _y = 94 + 95; }\"];\n+    N19[label=\"expr if x > 92 { _y = 93; } else { _y = 94 + 95; }\"];\n+    N20[label=\"block { let x = 91; let _y; if x > 92 { _y = 93; } else { _y = 94 + 95; } }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N7 -> N12;\n+    N12 -> N13;\n+    N13 -> N14;\n+    N14 -> N15;\n+    N15 -> N16;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N11 -> N19;\n+    N18 -> N19;\n+    N19 -> N20;\n+    N20 -> N1;\n+}"}, {"sha": "a78ccb8a93741a174368a5df7232510281d7d63a", "filename": "src/test/run-make/graphviz-flowgraph/f09.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_if_twoarm_9() {\n+    let x = 91; let _y;\n+    if x > 92 {\n+        _y = 93;\n+    } else {\n+        _y = 94+95;\n+    }\n+}"}, {"sha": "2cef122104edabadbb2969a6a80f87bb04db002f", "filename": "src/test/run-make/graphviz-flowgraph/f10.dot-expected.dot", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,30 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 10\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"(dummy_node)\"];\n+    N5[label=\"expr x\"];\n+    N6[label=\"expr 0\"];\n+    N7[label=\"expr x > 0\"];\n+    N8[label=\"expr while x > 0 { x -= 1; }\"];\n+    N9[label=\"expr 1\"];\n+    N10[label=\"expr x\"];\n+    N11[label=\"expr x -= 1\"];\n+    N12[label=\"block { x -= 1; }\"];\n+    N13[label=\"block { let mut x = 10; while x > 0 { x -= 1; } }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N7 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N4;\n+    N8 -> N13;\n+    N13 -> N1;\n+}"}, {"sha": "0ca7cc5ee86bd7f31ac6dda1a7c95140feba4e10", "filename": "src/test/run-make/graphviz-flowgraph/f10.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_while_10() {\n+    let mut x = 10;\n+    while x > 0 {\n+        x -= 1;\n+    }\n+}"}, {"sha": "59d65e5b8b7fc028e82f92d8e98fb2365394e576", "filename": "src/test/run-make/graphviz-flowgraph/f11.dot-expected.dot", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,25 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 11\"];\n+    N3[label=\"local mut _x\"];\n+    N4[label=\"(dummy_node)\"];\n+    N5[label=\"expr loop  { _x -= 1; }\"];\n+    N6[label=\"expr 1\"];\n+    N7[label=\"expr _x\"];\n+    N8[label=\"expr _x -= 1\"];\n+    N9[label=\"block { _x -= 1; }\"];\n+    N10[label=\"expr \\\"unreachable\\\"\"];\n+    N11[label=\"block { let mut _x = 11; loop  { _x -= 1; } \\\"unreachable\\\"; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N9;\n+    N9 -> N4;\n+    N5 -> N10;\n+    N10 -> N11;\n+    N11 -> N1;\n+}"}, {"sha": "d0f3452119e16b512712c5b22673aec811cd9122", "filename": "src/test/run-make/graphviz-flowgraph/f11.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_loop_11() {\n+    let mut _x = 11;\n+    loop {\n+        _x -= 1;\n+    }\n+    \"unreachable\";\n+}"}, {"sha": "9c0f25d5bece5eb8617ab57ddebf595bbfd8f2d7", "filename": "src/test/run-make/graphviz-flowgraph/f12.dot-expected.dot", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,40 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 12\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"(dummy_node)\"];\n+    N5[label=\"expr loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N6[label=\"expr 1\"];\n+    N7[label=\"expr x\"];\n+    N8[label=\"expr x -= 1\"];\n+    N9[label=\"expr x\"];\n+    N10[label=\"expr 2\"];\n+    N11[label=\"expr x == 2\"];\n+    N12[label=\"expr break\"];\n+    N13[label=\"(dummy_node)\"];\n+    N14[label=\"expr \\\"unreachable\\\"\"];\n+    N15[label=\"block { break ; \\\"unreachable\\\"; }\"];\n+    N16[label=\"expr if x == 2 { break ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"block { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N18[label=\"block { let mut x = 12; loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } } }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N5[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 2 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 block { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N13 -> N14;\n+    N14 -> N15;\n+    N11 -> N16;\n+    N15 -> N16;\n+    N16 -> N17;\n+    N17 -> N4;\n+    N5 -> N18;\n+    N18 -> N1;\n+}"}, {"sha": "90b146340b6f5ddf53f674e239c0a55ce9f169f4", "filename": "src/test/run-make/graphviz-flowgraph/f12.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_loop_12() {\n+    let mut x = 12;\n+    loop {\n+        x -= 1;\n+        if x == 2 { break; \"unreachable\"; }\n+    }\n+}"}, {"sha": "2be43dcaa7b66709a71c26802ce2282cbf8512fb", "filename": "src/test/run-make/graphviz-flowgraph/f13.dot-expected.dot", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,44 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr E13b\"];\n+    N3[label=\"expr 13\"];\n+    N4[label=\"expr E13b(13)\"];\n+    N5[label=\"local x\"];\n+    N6[label=\"local _y\"];\n+    N7[label=\"expr x\"];\n+    N8[label=\"expr match x { E13a => _y = 1, E13b(v) => _y = v + 1 }\"];\n+    N9[label=\"local E13a\"];\n+    N10[label=\"expr 1\"];\n+    N11[label=\"expr _y\"];\n+    N12[label=\"expr _y = 1\"];\n+    N13[label=\"local v\"];\n+    N14[label=\"pat E13b(v)\"];\n+    N15[label=\"expr v\"];\n+    N16[label=\"expr 1\"];\n+    N17[label=\"expr v + 1\"];\n+    N18[label=\"expr _y\"];\n+    N19[label=\"expr _y = v + 1\"];\n+    N20[label=\"block {\\l    let x = E13b(13);\\l    let _y;\\l    match x { E13a => _y = 1, E13b(v) => _y = v + 1 }\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N9;\n+    N9 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N8;\n+    N7 -> N13;\n+    N13 -> N14;\n+    N14 -> N15;\n+    N15 -> N16;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N18 -> N19;\n+    N19 -> N8;\n+    N8 -> N20;\n+    N20 -> N1;\n+}"}, {"sha": "0817a3210ce423b5d5bb8e834d7784ecd566fef0", "filename": "src/test/run-make/graphviz-flowgraph/f13.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E13 { E13a, E13b(int) }\n+pub fn expr_match_13() {\n+    let x = E13b(13); let _y;\n+    match x {\n+        E13a => _y = 1,\n+        E13b(v) => _y = v + 1,\n+    }\n+}"}, {"sha": "0fa4e9b44de348dfe3431dfd26655ed3e33d0390", "filename": "src/test/run-make/graphviz-flowgraph/f14.dot-expected.dot", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,28 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 14\"];\n+    N3[label=\"local x\"];\n+    N4[label=\"expr x\"];\n+    N5[label=\"expr 1\"];\n+    N6[label=\"expr x > 1\"];\n+    N7[label=\"expr return\"];\n+    N8[label=\"(dummy_node)\"];\n+    N9[label=\"expr \\\"unreachable\\\"\"];\n+    N10[label=\"block { return; \\\"unreachable\\\"; }\"];\n+    N11[label=\"expr if x > 1 { return; \\\"unreachable\\\"; }\"];\n+    N12[label=\"block { let x = 14; if x > 1 { return; \\\"unreachable\\\"; } }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N1;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N6 -> N11;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N1;\n+}"}, {"sha": "98ff095c8317cf1fc49004f18fb3209fd4bfe0d3", "filename": "src/test/run-make/graphviz-flowgraph/f14.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_ret_14() {\n+    let x = 14;\n+    if x > 1 {\n+        return;\n+        \"unreachable\";\n+    }\n+}"}, {"sha": "f0278fba311e6ac250de2dc458176f9d604a012c", "filename": "src/test/run-make/graphviz-flowgraph/f15.dot-expected.dot", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,79 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 15\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"expr 151\"];\n+    N5[label=\"local mut y\"];\n+    N6[label=\"(dummy_node)\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l                if y >= 2 { break ; \\\"unreachable\\\" }\\l                y -= 3;\\l            }\\l        y -= 4;\\l        x -= 5;\\l    }\\l\"];\n+    N8[label=\"(dummy_node)\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l\"];\n+    N10[label=\"expr x\"];\n+    N11[label=\"expr 1\"];\n+    N12[label=\"expr x == 1\"];\n+    N13[label=\"expr break \\'outer\"];\n+    N14[label=\"(dummy_node)\"];\n+    N15[label=\"expr \\\"unreachable\\\"\"];\n+    N16[label=\"block { break \\'outer ; \\\"unreachable\\\" }\"];\n+    N17[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\" }\"];\n+    N18[label=\"expr y\"];\n+    N19[label=\"expr 2\"];\n+    N20[label=\"expr y >= 2\"];\n+    N21[label=\"expr break\"];\n+    N22[label=\"(dummy_node)\"];\n+    N23[label=\"expr \\\"unreachable\\\"\"];\n+    N24[label=\"block { break ; \\\"unreachable\\\" }\"];\n+    N25[label=\"expr if y >= 2 { break ; \\\"unreachable\\\" }\"];\n+    N26[label=\"expr 3\"];\n+    N27[label=\"expr y\"];\n+    N28[label=\"expr y -= 3\"];\n+    N29[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l\"];\n+    N30[label=\"expr 4\"];\n+    N31[label=\"expr y\"];\n+    N32[label=\"expr y -= 4\"];\n+    N33[label=\"expr 5\"];\n+    N34[label=\"expr x\"];\n+    N35[label=\"expr x -= 5\"];\n+    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2 { break ; \\\"unreachable\\\" }\\l            y -= 3;\\l        }\\l    y -= 4;\\l    x -= 5;\\l}\\l\"];\n+    N37[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 2 { break ; \\\"unreachable\\\" }\\l                    y -= 3;\\l                }\\l            y -= 4;\\l            x -= 5;\\l        }\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N8;\n+    N8 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1 { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1 { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2 { break ; \\\"unreachable\\\" }\\l            y -= 3;\\l        }\\l    y -= 4;\\l    x -= 5;\\l}\\l\"];\n+    N14 -> N15;\n+    N15 -> N16;\n+    N12 -> N17;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N18 -> N19;\n+    N19 -> N20;\n+    N20 -> N21;\n+    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 2 { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 2 { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l\"];\n+    N22 -> N23;\n+    N23 -> N24;\n+    N20 -> N25;\n+    N24 -> N25;\n+    N25 -> N26;\n+    N26 -> N27;\n+    N27 -> N28;\n+    N28 -> N29;\n+    N29 -> N8;\n+    N9 -> N30;\n+    N30 -> N31;\n+    N31 -> N32;\n+    N32 -> N33;\n+    N33 -> N34;\n+    N34 -> N35;\n+    N35 -> N36;\n+    N36 -> N6;\n+    N7 -> N37;\n+    N37 -> N1;\n+}"}, {"sha": "44c038d643badebb108167e91a49926dff13edff", "filename": "src/test/run-make/graphviz-flowgraph/f15.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_break_label_15() {\n+    let mut x = 15;\n+    let mut y = 151;\n+    'outer: loop {\n+        'inner: loop {\n+            if x == 1 {\n+                break 'outer;\n+                \"unreachable\"\n+            }\n+            if y >= 2 {\n+                break;\n+                \"unreachable\"\n+            }\n+            y -= 3;\n+        }\n+        y -= 4;\n+        x -= 5;\n+    }\n+}"}, {"sha": "3f999ae3781426ab823ebc94129587310e307ca3", "filename": "src/test/run-make/graphviz-flowgraph/f16.dot-expected.dot", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,81 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 16\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"expr 16\"];\n+    N5[label=\"local mut y\"];\n+    N6[label=\"(dummy_node)\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l                if y >= 1 { break ; \\\"unreachable\\\" }\\l                y -= 1;\\l            }\\l        y -= 1;\\l        x -= 1;\\l    }\\l\"];\n+    N8[label=\"(dummy_node)\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l\"];\n+    N10[label=\"expr x\"];\n+    N11[label=\"expr 1\"];\n+    N12[label=\"expr x == 1\"];\n+    N13[label=\"expr continue \\'outer\"];\n+    N14[label=\"(dummy_node)\"];\n+    N15[label=\"expr \\\"unreachable\\\"\"];\n+    N16[label=\"block { continue \\'outer ; \\\"unreachable\\\" }\"];\n+    N17[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\"];\n+    N18[label=\"expr y\"];\n+    N19[label=\"expr 1\"];\n+    N20[label=\"expr y >= 1\"];\n+    N21[label=\"expr break\"];\n+    N22[label=\"(dummy_node)\"];\n+    N23[label=\"expr \\\"unreachable\\\"\"];\n+    N24[label=\"block { break ; \\\"unreachable\\\" }\"];\n+    N25[label=\"expr if y >= 1 { break ; \\\"unreachable\\\" }\"];\n+    N26[label=\"expr 1\"];\n+    N27[label=\"expr y\"];\n+    N28[label=\"expr y -= 1\"];\n+    N29[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l\"];\n+    N30[label=\"expr 1\"];\n+    N31[label=\"expr y\"];\n+    N32[label=\"expr y -= 1\"];\n+    N33[label=\"expr 1\"];\n+    N34[label=\"expr x\"];\n+    N35[label=\"expr x -= 1\"];\n+    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1 { break ; \\\"unreachable\\\" }\\l            y -= 1;\\l        }\\l    y -= 1;\\l    x -= 1;\\l}\\l\"];\n+    N37[label=\"expr \\\"unreachable\\\"\"];\n+    N38[label=\"block {\\l    let mut x = 16;\\l    let mut y = 16;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 1 { break ; \\\"unreachable\\\" }\\l                    y -= 1;\\l                }\\l            y -= 1;\\l            x -= 1;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N8;\n+    N8 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1 { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1 { break ; \\\"unreachable\\\" }\\l            y -= 1;\\l        }\\l    y -= 1;\\l    x -= 1;\\l}\\l\"];\n+    N14 -> N15;\n+    N15 -> N16;\n+    N12 -> N17;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N18 -> N19;\n+    N19 -> N20;\n+    N20 -> N21;\n+    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 1 { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 1 { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l\"];\n+    N22 -> N23;\n+    N23 -> N24;\n+    N20 -> N25;\n+    N24 -> N25;\n+    N25 -> N26;\n+    N26 -> N27;\n+    N27 -> N28;\n+    N28 -> N29;\n+    N29 -> N8;\n+    N9 -> N30;\n+    N30 -> N31;\n+    N31 -> N32;\n+    N32 -> N33;\n+    N33 -> N34;\n+    N34 -> N35;\n+    N35 -> N36;\n+    N36 -> N6;\n+    N7 -> N37;\n+    N37 -> N38;\n+    N38 -> N1;\n+}"}, {"sha": "f4f23a65c93509abfce3d5892d859ea92a7993ec", "filename": "src/test/run-make/graphviz-flowgraph/f16.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_continue_label_16() {\n+    let mut x = 16;\n+    let mut y = 16;\n+    'outer: loop {\n+        'inner: loop {\n+            if x == 1 {\n+                continue 'outer;\n+                \"unreachable\"\n+            }\n+            if y >= 1 {\n+                break;\n+                \"unreachable\"\n+            }\n+            y -= 1;\n+        }\n+        y -= 1;\n+        x -= 1;\n+    }\n+    \"unreachable\";\n+}"}, {"sha": "e9bccdab81be1f59dbaefde500cbf690ce461b28", "filename": "src/test/run-make/graphviz-flowgraph/f17.dot-expected.dot", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,17 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 1\"];\n+    N3[label=\"expr 7\"];\n+    N4[label=\"expr 17\"];\n+    N5[label=\"expr [1, 7, 17]\"];\n+    N6[label=\"local _v\"];\n+    N7[label=\"block { let _v = [1, 7, 17]; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N1;\n+}"}, {"sha": "23f5bb8a1eb17b993fe026cc2c11f63f85f52fd8", "filename": "src/test/run-make/graphviz-flowgraph/f17.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_vec_17() {\n+    let _v = [1, 7, 17];\n+}"}, {"sha": "6345b4effaf1edbbf44a67015727ed7717c0a791", "filename": "src/test/run-make/graphviz-flowgraph/f18.dot-expected.dot", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,17 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr inner\"];\n+    N3[label=\"expr inner\"];\n+    N4[label=\"expr 18\"];\n+    N5[label=\"expr inner(18)\"];\n+    N6[label=\"expr inner(inner(18))\"];\n+    N7[label=\"block {\\l    fn inner(x: int) -> int { x + x }\\l    inner(inner(18));\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N1;\n+}"}, {"sha": "0ace542b8f5db5bc6569db6802d4b72b3dae99de", "filename": "src/test/run-make/graphviz-flowgraph/f18.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff18.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_call_18() {\n+    fn inner(x:int) -> int { x + x }\n+    inner(inner(18));\n+}"}, {"sha": "5fad18536e5933b954a8696f29beb3f990ef2f42", "filename": "src/test/run-make/graphviz-flowgraph/f19.dot-expected.dot", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,19 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 19\"];\n+    N3[label=\"expr S19{x: 19,}\"];\n+    N4[label=\"local s\"];\n+    N5[label=\"expr s\"];\n+    N6[label=\"expr s.inner()\"];\n+    N7[label=\"expr s.inner().inner()\"];\n+    N8[label=\"block {\\l    struct S19 {\\l        x: int,\\l    }\\l    impl S19 {\\l        fn inner(self) -> S19 { S19{x: self.x + self.x,} }\\l    }\\l    let s = S19{x: 19,};\\l    s.inner().inner();\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N1;\n+}"}, {"sha": "092f6890a152ab714935c364b39864e7098a9a0c", "filename": "src/test/run-make/graphviz-flowgraph/f19.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff19.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_method_call_19() {\n+    struct S19 { x: int }\n+    impl S19 { fn inner(self) -> S19 { S19 { x: self.x + self.x } } }\n+    let s = S19 { x: 19 };\n+    s.inner().inner();\n+}"}, {"sha": "593ad6f91ea5ce02ea2ca4002b2c88ef2a8093b1", "filename": "src/test/run-make/graphviz-flowgraph/f20.dot-expected.dot", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,23 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 2\"];\n+    N3[label=\"expr 0\"];\n+    N4[label=\"expr 20\"];\n+    N5[label=\"expr [2, 0, 20]\"];\n+    N6[label=\"local v\"];\n+    N7[label=\"expr v\"];\n+    N8[label=\"expr 20\"];\n+    N9[label=\"expr v[20]\"];\n+    N10[label=\"block { let v = [2, 0, 20]; v[20]; }\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N7;\n+    N7 -> N8;\n+    N8 -> N9;\n+    N9 -> N10;\n+    N10 -> N1;\n+}"}, {"sha": "d7349932355b10c92a06c3a1d93af996a6b7e7cb", "filename": "src/test/run-make/graphviz-flowgraph/f20.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn expr_index_20() {\n+    let v = [2, 0, 20];\n+    v[20];\n+}"}, {"sha": "0798c4a01c05ae9f862453ed574ac5be3f9a2531", "filename": "src/test/run-make/graphviz-flowgraph/f21.dot-expected.dot", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,75 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 15\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"expr 151\"];\n+    N5[label=\"local mut y\"];\n+    N6[label=\"(dummy_node)\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                y -= 3;\\l                x -= 5;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N8[label=\"(dummy_node)\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l\"];\n+    N10[label=\"expr x\"];\n+    N11[label=\"expr 1\"];\n+    N12[label=\"expr x == 1\"];\n+    N13[label=\"expr break \\'outer\"];\n+    N14[label=\"(dummy_node)\"];\n+    N15[label=\"expr \\\"unreachable\\\"\"];\n+    N16[label=\"block { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N18[label=\"expr y\"];\n+    N19[label=\"expr 2\"];\n+    N20[label=\"expr y >= 2\"];\n+    N21[label=\"expr return\"];\n+    N22[label=\"(dummy_node)\"];\n+    N23[label=\"expr \\\"unreachable\\\"\"];\n+    N24[label=\"block { return; \\\"unreachable\\\"; }\"];\n+    N25[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N26[label=\"expr 3\"];\n+    N27[label=\"expr y\"];\n+    N28[label=\"expr y -= 3\"];\n+    N29[label=\"expr 5\"];\n+    N30[label=\"expr x\"];\n+    N31[label=\"expr x -= 5\"];\n+    N32[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    y -= 3;\\l    x -= 5;\\l}\\l\"];\n+    N33[label=\"expr \\\"unreachable\\\"\"];\n+    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            y -= 3;\\l            x -= 5;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N35[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    y -= 3;\\l                    x -= 5;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N8;\n+    N8 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1 { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    y -= 3;\\l    x -= 5;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            y -= 3;\\l            x -= 5;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N14 -> N15;\n+    N15 -> N16;\n+    N12 -> N17;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N18 -> N19;\n+    N19 -> N20;\n+    N20 -> N21;\n+    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                y -= 3;\\l                x -= 5;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N22 -> N23;\n+    N23 -> N24;\n+    N20 -> N25;\n+    N24 -> N25;\n+    N25 -> N26;\n+    N26 -> N27;\n+    N27 -> N28;\n+    N28 -> N29;\n+    N29 -> N30;\n+    N30 -> N31;\n+    N31 -> N32;\n+    N32 -> N8;\n+    N9 -> N33;\n+    N33 -> N34;\n+    N34 -> N6;\n+    N7 -> N35;\n+    N35 -> N1;\n+}"}, {"sha": "70083ed8312cbbb181e5d5652f8150646e496dc3", "filename": "src/test/run-make/graphviz-flowgraph/f21.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_break_label_21() {\n+    let mut x = 15;\n+    let mut y = 151;\n+    'outer: loop {\n+        'inner: loop {\n+            if x == 1 {\n+                break 'outer;\n+                \"unreachable\";\n+            }\n+            if y >= 2 {\n+                return;\n+                \"unreachable\";\n+            }\n+            y -= 3;\n+            x -= 5;\n+        }\n+        \"unreachable\";\n+    }\n+}"}, {"sha": "9ad731bc756bfe8c2dd91bc1c8589768033733bd", "filename": "src/test/run-make/graphviz-flowgraph/f22.dot-expected.dot", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,77 @@\n+digraph block {\n+    N0[label=\"entry\"];\n+    N1[label=\"exit\"];\n+    N2[label=\"expr 15\"];\n+    N3[label=\"local mut x\"];\n+    N4[label=\"expr 151\"];\n+    N5[label=\"local mut y\"];\n+    N6[label=\"(dummy_node)\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N8[label=\"(dummy_node)\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l\"];\n+    N10[label=\"expr x\"];\n+    N11[label=\"expr 1\"];\n+    N12[label=\"expr x == 1\"];\n+    N13[label=\"expr continue \\'outer\"];\n+    N14[label=\"(dummy_node)\"];\n+    N15[label=\"expr \\\"unreachable\\\"\"];\n+    N16[label=\"block { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N18[label=\"expr y\"];\n+    N19[label=\"expr 2\"];\n+    N20[label=\"expr y >= 2\"];\n+    N21[label=\"expr return\"];\n+    N22[label=\"(dummy_node)\"];\n+    N23[label=\"expr \\\"unreachable\\\"\"];\n+    N24[label=\"block { return; \\\"unreachable\\\"; }\"];\n+    N25[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N26[label=\"expr 1\"];\n+    N27[label=\"expr x\"];\n+    N28[label=\"expr x -= 1\"];\n+    N29[label=\"expr 3\"];\n+    N30[label=\"expr y\"];\n+    N31[label=\"expr y -= 3\"];\n+    N32[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    x -= 1;\\l    y -= 3;\\l}\\l\"];\n+    N33[label=\"expr \\\"unreachable\\\"\"];\n+    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            x -= 1;\\l            y -= 3;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N35[label=\"expr \\\"unreachable\\\"\"];\n+    N36[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    x -= 1;\\l                    y -= 3;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N0 -> N2;\n+    N2 -> N3;\n+    N3 -> N4;\n+    N4 -> N5;\n+    N5 -> N6;\n+    N6 -> N8;\n+    N8 -> N10;\n+    N10 -> N11;\n+    N11 -> N12;\n+    N12 -> N13;\n+    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    x -= 1;\\l    y -= 3;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            x -= 1;\\l            y -= 3;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N14 -> N15;\n+    N15 -> N16;\n+    N12 -> N17;\n+    N16 -> N17;\n+    N17 -> N18;\n+    N18 -> N19;\n+    N19 -> N20;\n+    N20 -> N21;\n+    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N22 -> N23;\n+    N23 -> N24;\n+    N20 -> N25;\n+    N24 -> N25;\n+    N25 -> N26;\n+    N26 -> N27;\n+    N27 -> N28;\n+    N28 -> N29;\n+    N29 -> N30;\n+    N30 -> N31;\n+    N31 -> N32;\n+    N32 -> N8;\n+    N9 -> N33;\n+    N33 -> N34;\n+    N34 -> N6;\n+    N7 -> N35;\n+    N35 -> N36;\n+    N36 -> N1;\n+}"}, {"sha": "b35aac9ec422e924e3f4d167ae0ba0ab080de24b", "filename": "src/test/run-make/graphviz-flowgraph/f22.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+pub fn expr_break_label_21() {\n+    let mut x = 15;\n+    let mut y = 151;\n+    'outer: loop {\n+        'inner: loop {\n+            if x == 1 {\n+                continue 'outer;\n+                \"unreachable\";\n+            }\n+            if y >= 2 {\n+                return;\n+                \"unreachable\";\n+            }\n+            x -= 1;\n+            y -= 3;\n+        }\n+        \"unreachable\";\n+    }\n+    \"unreachable\";\n+}"}, {"sha": "989c09146b7d5c54fae100ea06ae3c80d37413af", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -11,7 +11,7 @@\n extern crate libc;\n \n use std::mem;\n-use std::unstable::run_in_bare_thread;\n+use std::rt::thread::Thread;\n \n #[link(name = \"rustrt\")]\n extern {\n@@ -21,10 +21,10 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let i = &100;\n             rust_dbg_call(callback, mem::transmute(i));\n-        });\n+        }).join();\n     }\n }\n "}, {"sha": "387a454542adf3cb694dbcd6333b8dbf35f1184f", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0481d628b826104085c5df267cf6089a89fcd17b/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=0481d628b826104085c5df267cf6089a89fcd17b", "patch": "@@ -74,6 +74,50 @@ fn test_rm_tempdir() {\n     assert!(!path.exists());\n }\n \n+fn test_rm_tempdir_close() {\n+    let (tx, rx) = channel();\n+    let f: proc():Send = proc() {\n+        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n+        tx.send(tmp.path().clone());\n+        tmp.close();\n+        fail!(\"fail to unwind past `tmp`\");\n+    };\n+    task::try(f);\n+    let path = rx.recv();\n+    assert!(!path.exists());\n+\n+    let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n+    let path = tmp.path().clone();\n+    let f: proc():Send = proc() {\n+        let tmp = tmp;\n+        tmp.close();\n+        fail!(\"fail to unwind past `tmp`\");\n+    };\n+    task::try(f);\n+    assert!(!path.exists());\n+\n+    let path;\n+    {\n+        let f = proc() {\n+            TempDir::new(\"test_rm_tempdir\").unwrap()\n+        };\n+        let tmp = task::try(f).ok().expect(\"test_rm_tmdir\");\n+        path = tmp.path().clone();\n+        assert!(path.exists());\n+        tmp.close();\n+    }\n+    assert!(!path.exists());\n+\n+    let path;\n+    {\n+        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n+        path = tmp.unwrap();\n+    }\n+    assert!(path.exists());\n+    fs::rmdir_recursive(&path);\n+    assert!(!path.exists());\n+}\n+\n // Ideally these would be in std::os but then core would need\n // to depend on std\n fn recursive_mkdir_rel() {\n@@ -130,6 +174,19 @@ pub fn test_rmdir_recursive_ok() {\n     assert!(!root.join(\"bar\").join(\"blat\").exists());\n }\n \n+pub fn dont_double_fail() {\n+    let r: Result<(), _> = task::try(proc() {\n+        let tmpdir = TempDir::new(\"test\").unwrap();\n+        // Remove the temporary directory so that TempDir sees\n+        // an error on drop\n+        fs::rmdir(tmpdir.path());\n+        // Trigger failure. If TempDir fails *again* due to the rmdir\n+        // error then the process will abort.\n+        fail!();\n+    });\n+    assert!(r.is_err());\n+}\n+\n fn in_tmpdir(f: ||) {\n     let tmpdir = TempDir::new(\"test\").expect(\"can't make tmpdir\");\n     assert!(os::change_dir(tmpdir.path()));\n@@ -140,8 +197,10 @@ fn in_tmpdir(f: ||) {\n pub fn main() {\n     in_tmpdir(test_tempdir);\n     in_tmpdir(test_rm_tempdir);\n+    in_tmpdir(test_rm_tempdir_close);\n     in_tmpdir(recursive_mkdir_rel);\n     in_tmpdir(recursive_mkdir_dot);\n     in_tmpdir(recursive_mkdir_rel_2);\n     in_tmpdir(test_rmdir_recursive_ok);\n+    in_tmpdir(dont_double_fail);\n }"}]}