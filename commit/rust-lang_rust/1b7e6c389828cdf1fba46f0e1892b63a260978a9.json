{"sha": "1b7e6c389828cdf1fba46f0e1892b63a260978a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2U2YzM4OTgyOGNkZjFmYmE0NmYwZTE4OTJiNjNhMjYwOTc4YTk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-20T05:39:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-20T05:39:56Z"}, "message": "Rollup merge of #41378 - eddyb:byval-is-not-like-sret, r=arielb1\n\nrustc_trans: do not treat byval as using up registers.\n\nPerhaps not that well-documented, `byval` pointer arguments *are not* the same as pointer arguments used by pass-by-ref, but rather the pointer is only used by LLVM to pass the *contents* on the stack.\n\nFixes #41375.", "tree": {"sha": "5c872f22c4ad91777843b1aa75f78d2e43af1ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c872f22c4ad91777843b1aa75f78d2e43af1ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7e6c389828cdf1fba46f0e1892b63a260978a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7e6c389828cdf1fba46f0e1892b63a260978a9", "html_url": "https://github.com/rust-lang/rust/commit/1b7e6c389828cdf1fba46f0e1892b63a260978a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7e6c389828cdf1fba46f0e1892b63a260978a9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348d66c73f92041670a9ab675f144ad79503f834", "url": "https://api.github.com/repos/rust-lang/rust/commits/348d66c73f92041670a9ab675f144ad79503f834", "html_url": "https://github.com/rust-lang/rust/commit/348d66c73f92041670a9ab675f144ad79503f834"}, {"sha": "cba0c6ad6da735d00819d5a0df3953b3a8ebfe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba0c6ad6da735d00819d5a0df3953b3a8ebfe3e", "html_url": "https://github.com/rust-lang/rust/commit/cba0c6ad6da735d00819d5a0df3953b3a8ebfe3e"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "2cfab7df8b30bf93e6587e915acd2fea73964cd7", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=1b7e6c389828cdf1fba46f0e1892b63a260978a9", "patch": "@@ -229,12 +229,12 @@ pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType\n         };\n \n         if in_mem {\n-            // `sret` / `byval` parameter thus one less integer register available\n-            int_regs -= 1;\n-\n             arg.make_indirect(ccx);\n             if is_arg {\n                 arg.attrs.set(ArgAttribute::ByVal);\n+            } else {\n+                // `sret` parameter thus one less integer register available\n+                int_regs -= 1;\n             }\n         } else {\n             // split into sized chunks passed individually"}, {"sha": "44a940a17a98a40288a8281c39c945ae072d5451", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c?ref=1b7e6c389828cdf1fba46f0e1892b63a260978a9", "patch": "@@ -137,6 +137,21 @@ void byval_rect_with_float(int32_t a, int32_t b, float c, int32_t d,\n     assert(s.d == 556);\n }\n \n+// System V x86_64 ABI:\n+// a, b, d, e, f should be byval pointer (on the stack)\n+// g passed via register (fixes #41375)\n+//\n+// Win64 ABI:\n+// a, b, d, e, f, g should be byval pointer\n+void byval_rect_with_many_huge(struct Huge a, struct Huge b, struct Huge c,\n+                               struct Huge d, struct Huge e, struct Huge f,\n+                               struct Rect g) {\n+    assert(g.a == 123);\n+    assert(g.b == 456);\n+    assert(g.c == 789);\n+    assert(g.d == 420);\n+}\n+\n // System V x86_64 & Win64 ABI:\n // a, b should be in registers\n // s should be split across 2 integer registers"}, {"sha": "aaae7ae4fb49bb3d58933502c42169853bf24544", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e6c389828cdf1fba46f0e1892b63a260978a9/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=1b7e6c389828cdf1fba46f0e1892b63a260978a9", "patch": "@@ -64,6 +64,8 @@ extern {\n \n     fn byval_rect_with_float(a: i32, b: i32, c: f32, d: i32, e: i32, f: i32, s: Rect);\n \n+    fn byval_rect_with_many_huge(a: Huge, b: Huge, c: Huge, d: Huge, e: Huge, f: Huge, g: Rect);\n+\n     fn split_rect(a: i32, b: i32, s: Rect);\n \n     fn split_rect_floats(a: f32, b: f32, s: FloatRect);\n@@ -95,6 +97,12 @@ fn main() {\n         byval_many_rect(1, 2, 3, 4, 5, 6, s);\n         byval_rect_floats(1., 2., 3., 4., 5., 6., 7., s, u);\n         byval_rect_with_float(1, 2, 3.0, 4, 5, 6, s);\n+        byval_rect_with_many_huge(v, v, v, v, v, v, Rect {\n+            a: 123,\n+            b: 456,\n+            c: 789,\n+            d: 420\n+        });\n         split_rect(1, 2, s);\n         split_rect_floats(1., 2., u);\n         split_rect_with_floats(1, 2, 3.0, 4, 5.0, 6, s);"}]}