{"sha": "939cc3e445db1eaf8b3834984e274f8c2267d9c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWNjM2U0NDVkYjFlYWY4YjM4MzQ5ODRlMjc0ZjhjMjI2N2Q5YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T12:44:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T12:44:31Z"}, "message": "Auto merge of #77281 - tmiasko:liveness-everybody, r=oli-obk\n\nLiveness analysis for everybody\n\nPerform liveness analysis for every body instead of limiting it to fns.\n\nFixes #77169.", "tree": {"sha": "ee1792368a944eb82f5794f6ea5b7a54a4b3a9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1792368a944eb82f5794f6ea5b7a54a4b3a9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939cc3e445db1eaf8b3834984e274f8c2267d9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939cc3e445db1eaf8b3834984e274f8c2267d9c5", "html_url": "https://github.com/rust-lang/rust/commit/939cc3e445db1eaf8b3834984e274f8c2267d9c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939cc3e445db1eaf8b3834984e274f8c2267d9c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511ed9f2356af365ad8affe046b3dd33f7ac3c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/511ed9f2356af365ad8affe046b3dd33f7ac3c98", "html_url": "https://github.com/rust-lang/rust/commit/511ed9f2356af365ad8affe046b3dd33f7ac3c98"}, {"sha": "924e8aaaf21653ffb1775a0ed9be219ee377370b", "url": "https://api.github.com/repos/rust-lang/rust/commits/924e8aaaf21653ffb1775a0ed9be219ee377370b", "html_url": "https://github.com/rust-lang/rust/commit/924e8aaaf21653ffb1775a0ed9be219ee377370b"}], "stats": {"total": 216, "additions": 174, "deletions": 42}, "files": [{"sha": "3446ca11f02a0bf6e20673e1f53d4486d1f0cbd2", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -90,12 +90,12 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -318,49 +318,38 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n         NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n-    fn visit_fn(\n-        &mut self,\n-        fk: FnKind<'tcx>,\n-        decl: &'tcx hir::FnDecl<'tcx>,\n-        body_id: hir::BodyId,\n-        sp: Span,\n-        id: HirId,\n-    ) {\n-        debug!(\"visit_fn {:?}\", id);\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n+        debug!(\"visit_body {:?}\", body.id());\n \n-        // swap in a new set of IR maps for this function body:\n-        let def_id = self.tcx.hir().local_def_id(id);\n-        let mut fn_maps = IrMaps::new(self.tcx);\n+        // swap in a new set of IR maps for this body\n+        let mut maps = IrMaps::new(self.tcx);\n+        let hir_id = maps.tcx.hir().body_owner(body.id());\n+        let def_id = maps.tcx.hir().local_def_id(hir_id);\n \n         // Don't run unused pass for #[derive()]\n-        if let FnKind::Method(..) = fk {\n-            let parent = self.tcx.hir().get_parent_item(id);\n-            if let Some(Node::Item(i)) = self.tcx.hir().find(parent) {\n-                if i.attrs.iter().any(|a| self.tcx.sess.check_name(a, sym::automatically_derived)) {\n+        if let Some(parent) = self.tcx.parent(def_id.to_def_id()) {\n+            if let DefKind::Impl = self.tcx.def_kind(parent.expect_local()) {\n+                if self.tcx.has_attr(parent, sym::automatically_derived) {\n                     return;\n                 }\n             }\n         }\n \n-        debug!(\"creating fn_maps: {:p}\", &fn_maps);\n-\n-        let body = self.tcx.hir().body(body_id);\n-\n-        if let Some(upvars) = self.tcx.upvars_mentioned(def_id) {\n+        if let Some(upvars) = maps.tcx.upvars_mentioned(def_id) {\n             for (&var_hir_id, _upvar) in upvars {\n-                let var_name = self.tcx.hir().name(var_hir_id);\n-                fn_maps.add_variable(Upvar(var_hir_id, var_name));\n+                let var_name = maps.tcx.hir().name(var_hir_id);\n+                maps.add_variable(Upvar(var_hir_id, var_name));\n             }\n         }\n \n         // gather up the various local variables, significant expressions,\n         // and so forth:\n-        intravisit::walk_fn(&mut fn_maps, fk, decl, body_id, sp, id);\n+        intravisit::walk_body(&mut maps, body);\n \n         // compute liveness\n-        let mut lsets = Liveness::new(&mut fn_maps, def_id);\n-        let entry_ln = lsets.compute(&body, sp, id);\n-        lsets.log_liveness(entry_ln, id);\n+        let mut lsets = Liveness::new(&mut maps, def_id);\n+        let entry_ln = lsets.compute(&body, hir_id);\n+        lsets.log_liveness(entry_ln, body.id().hir_id);\n \n         // check for various error conditions\n         lsets.visit_body(body);\n@@ -845,8 +834,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         self.rwu_table.assign_unpacked(idx, rwu);\n     }\n \n-    fn compute(&mut self, body: &hir::Body<'_>, span: Span, id: hir::HirId) -> LiveNode {\n-        debug!(\"compute: using id for body, {:?}\", body.value);\n+    fn compute(&mut self, body: &hir::Body<'_>, hir_id: HirId) -> LiveNode {\n+        debug!(\"compute: for body {:?}\", body.id().hir_id);\n \n         // # Liveness of captured variables\n         //\n@@ -890,7 +879,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             return succ;\n         }\n \n-        let ty = self.typeck_results.node_type(id);\n+        let ty = self.typeck_results.node_type(hir_id);\n         match ty.kind() {\n             ty::Closure(_def_id, substs) => match substs.as_closure().kind() {\n                 ty::ClosureKind::Fn => {}\n@@ -899,7 +888,12 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             },\n             ty::Generator(..) => return succ,\n             _ => {\n-                span_bug!(span, \"{} has upvars so it should have a closure type: {:?}\", id, ty);\n+                span_bug!(\n+                    body.value.span,\n+                    \"{} has upvars so it should have a closure type: {:?}\",\n+                    hir_id,\n+                    ty\n+                );\n             }\n         };\n "}, {"sha": "c513946d1891758be5b2d3d4198bf296cdf13662", "filename": "src/test/ui/consts/const-block-non-item-statement-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, unused)]\n \n type Array = [u32; {  let x = 2; 5 }];\n "}, {"sha": "3e52eb50e75665c56d64188a31cb788522db7ec2", "filename": "src/test/ui/consts/const-block-non-item-statement-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-rpass.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, unused)]\n \n #[repr(u8)]\n enum Foo {"}, {"sha": "2a6d12768c333476afdaf38ed53c891d4ea52099", "filename": "src/test/ui/consts/control-flow/drop-pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // revisions: stock precise\n \n+#![allow(unused)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n // `x` is always moved into the final value and is not dropped inside the initializer."}, {"sha": "8fe2453ca2292f13ed6c1cc03b09ece4134414ee", "filename": "src/test/ui/liveness/liveness-consts.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -0,0 +1,63 @@\n+// check-pass\n+#![warn(unused)]\n+#![allow(unreachable_code)]\n+\n+pub static A: i32 = {\n+    let mut i = 0;\n+    let mut a = 0; //~ WARN variable `a` is assigned to, but never used\n+    while i < 10 {\n+        i += 1;\n+        a += 1;\n+    }\n+    i\n+};\n+\n+pub const B: u32 = {\n+    let mut b = 1;\n+    b += 1; //~ WARN value assigned to `b` is never read\n+    b = 42;\n+    b\n+};\n+\n+pub enum E {\n+    V1 = {\n+        let e = 1; //~ WARN unused variable: `e`\n+        1\n+    },\n+    V2 = {\n+        let _f = 10;\n+        2\n+    }\n+}\n+\n+pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n+    //~^ WARN unused variable: `s`\n+    //~| WARN unused variable: `z`\n+    x\n+}\n+\n+pub trait T {\n+    const T: usize = {\n+        let mut t = 10;\n+        t = t + t; //~ WARN value assigned to `t` is never read\n+        20\n+    };\n+}\n+\n+impl T for String {\n+    const T: usize = {\n+        let w = 10; //~ WARN unused variable: `w`\n+        loop {\n+            break;\n+            let _ = w;\n+        }\n+        44\n+    };\n+}\n+\n+fn main() {\n+    let _ = [(); {\n+        let z = 42; //~ WARN unused variable: `z`\n+        35\n+    }];\n+}"}, {"sha": "fa8a590a819d10a8a80635451c81767969a79c6f", "filename": "src/test/ui/liveness/liveness-consts.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -0,0 +1,68 @@\n+warning: variable `a` is assigned to, but never used\n+  --> $DIR/liveness-consts.rs:7:9\n+   |\n+LL |     let mut a = 0;\n+   |         ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/liveness-consts.rs:2:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n+   = note: consider using `_a` instead\n+\n+warning: value assigned to `b` is never read\n+  --> $DIR/liveness-consts.rs:17:5\n+   |\n+LL |     b += 1;\n+   |     ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/liveness-consts.rs:2:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n+   = help: maybe it is overwritten before being read?\n+\n+warning: unused variable: `e`\n+  --> $DIR/liveness-consts.rs:24:13\n+   |\n+LL |         let e = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_e`\n+\n+warning: unused variable: `s`\n+  --> $DIR/liveness-consts.rs:33:24\n+   |\n+LL | pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n+   |                        ^ help: if this is intentional, prefix it with an underscore: `_s`\n+\n+warning: unused variable: `z`\n+  --> $DIR/liveness-consts.rs:33:55\n+   |\n+LL | pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n+   |                                                       ^ help: if this is intentional, prefix it with an underscore: `_z`\n+\n+warning: unused variable: `z`\n+  --> $DIR/liveness-consts.rs:60:13\n+   |\n+LL |         let z = 42;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n+\n+warning: value assigned to `t` is never read\n+  --> $DIR/liveness-consts.rs:42:9\n+   |\n+LL |         t = t + t;\n+   |         ^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: unused variable: `w`\n+  --> $DIR/liveness-consts.rs:49:13\n+   |\n+LL |         let w = 10;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_w`\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "1921d0d72bc7bed3fcd0d012fa5409ef2cf95522", "filename": "src/test/ui/liveness/liveness-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.rs?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -12,7 +12,7 @@ pub trait T: Sized {\n \n impl T for u32 {\n     const N: usize = {\n-        let a = 0; // FIXME should warn about unused variable\n+        let a = 0; //~ WARN unused variable: `a`\n         4\n     };\n "}, {"sha": "c03d90991834c716d871bf5bea148a2b773d28a7", "filename": "src/test/ui/liveness/liveness-derive.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939cc3e445db1eaf8b3834984e274f8c2267d9c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-derive.stderr?ref=939cc3e445db1eaf8b3834984e274f8c2267d9c5", "patch": "@@ -1,8 +1,8 @@\n-warning: unused variable: `b`\n-  --> $DIR/liveness-derive.rs:20:13\n+warning: unused variable: `a`\n+  --> $DIR/liveness-derive.rs:15:13\n    |\n-LL |         let b = 16;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_b`\n+LL |         let a = 0;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-derive.rs:6:9\n@@ -11,5 +11,11 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n-warning: 1 warning emitted\n+warning: unused variable: `b`\n+  --> $DIR/liveness-derive.rs:20:13\n+   |\n+LL |         let b = 16;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+warning: 2 warnings emitted\n "}]}