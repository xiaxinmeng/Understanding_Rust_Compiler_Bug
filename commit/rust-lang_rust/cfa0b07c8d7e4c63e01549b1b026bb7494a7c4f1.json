{"sha": "cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYTBiMDdjOGQ3ZTRjNjNlMDE1NDliMWIwMjZiYjc0OTRhN2M0ZjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-27T12:15:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:16:53Z"}, "message": "clean up logic", "tree": {"sha": "8ef6ea8c980e3083e748d754bc9b93d664465796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef6ea8c980e3083e748d754bc9b93d664465796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "html_url": "https://github.com/rust-lang/rust/commit/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e843245716586222fe997b8ffe10ab8bf91fc399", "url": "https://api.github.com/repos/rust-lang/rust/commits/e843245716586222fe997b8ffe10ab8bf91fc399", "html_url": "https://github.com/rust-lang/rust/commit/e843245716586222fe997b8ffe10ab8bf91fc399"}], "stats": {"total": 292, "additions": 150, "deletions": 142}, "files": [{"sha": "364348e64386a75ff250aea371bff5f5d210236f", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -398,6 +398,16 @@ rustc_queries! {\n                 typeck_tables.map(|tables| &*tcx.arena.alloc(tables))\n             }\n         }\n+        query diagnostic_only_typeck_tables_of(key: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n+            cache_on_disk_if { key.is_local() }\n+            load_cached(tcx, id) {\n+                let typeck_tables: Option<ty::TypeckTables<'tcx>> = tcx\n+                    .queries.on_disk_cache\n+                    .try_load_query_result(tcx, id);\n+\n+                typeck_tables.map(|tables| &*tcx.arena.alloc(tables))\n+            }\n+        }\n     }\n \n     Other {"}, {"sha": "b7ab9e30b94ee172c4cd6ac7924d0141e0130646", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -2770,30 +2770,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n \n         // We proactively collect all the infered type params to emit a single error per fn def.\n-        let mut placeholder_types = vec![];\n-        let mut output_placeholder_types = vec![];\n-\n-        let input_tys = decl.inputs.iter().map(|a| {\n-            let mut visitor = PlaceholderHirTyCollector::new();\n-            visitor.visit_ty(&a);\n-            if visitor.0.is_empty() || self.allow_ty_infer() {\n-                self.ty_of_arg(a, None)\n-            } else {\n-                placeholder_types.extend(visitor.0);\n-                tcx.types.err\n-            }\n-        });\n+        let mut visitor = PlaceholderHirTyCollector::new();\n+        for ty in &decl.inputs {\n+            visitor.visit_ty(ty);\n+        }\n+        let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n         let output_ty = match decl.output {\n             hir::Return(ref output) => {\n-                let mut visitor = PlaceholderHirTyCollector::new();\n                 visitor.visit_ty(output);\n-                let is_infer = if let hir::TyKind::Infer = output.kind { true } else { false };\n-                if (is_infer || !visitor.0.is_empty()) && !self.allow_ty_infer() {\n-                    output_placeholder_types.extend(visitor.0);\n-                    tcx.types.err\n-                } else {\n-                    self.ast_ty_to_ty(output)\n-                }\n+                self.ast_ty_to_ty(output)\n             }\n             hir::DefaultReturn(..) => tcx.mk_unit(),\n         };\n@@ -2803,15 +2788,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bare_fn_ty =\n             ty::Binder::bind(tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi));\n \n-        placeholder_types.extend(output_placeholder_types);\n-\n-        crate::collect::placeholder_type_error(\n-            tcx,\n-            ident_span.unwrap_or(DUMMY_SP),\n-            generic_params,\n-            placeholder_types,\n-            ident_span.is_some(),\n-        );\n+        if !self.allow_ty_infer() {\n+            crate::collect::placeholder_type_error(\n+                tcx,\n+                ident_span.unwrap_or(DUMMY_SP),\n+                generic_params,\n+                visitor.0,\n+                ident_span.is_some(),\n+            );\n+        }\n \n         // Find any late-bound regions declared in return type that do\n         // not appear in the arguments. These are not well-formed."}, {"sha": "acdbd4832e96dbed61b665345bc0b106a2672a77", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -756,6 +756,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_tables_of,\n+        diagnostic_only_typeck_tables_of,\n         has_typeck_tables,\n         adt_destructor,\n         used_trait_imports,\n@@ -941,7 +942,26 @@ where\n     val.fold_with(&mut FixupFolder { tcx })\n }\n \n-fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n+fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &ty::TypeckTables<'tcx> {\n+    let fallback = move || tcx.type_of(def_id);\n+    typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+}\n+\n+/// Used only to get `TypeckTables` for type inference during error recovery.\n+/// Currently only used for type inference of `static`s and `const`s to avoid type cycle errors.\n+fn diagnostic_only_typeck_tables_of<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+) -> &ty::TypeckTables<'tcx> {\n+    let fallback = move || tcx.types.err;\n+    typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+}\n+\n+fn typeck_tables_of_with_fallback<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    fallback: impl Fn() -> Ty<'tcx> + 'tcx,\n+) -> &'tcx ty::TypeckTables<'tcx> {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -990,7 +1010,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n                     hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n                     _ => None,\n                 })\n-                .unwrap_or_else(|| tcx.type_of(def_id));\n+                .unwrap_or_else(fallback);\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n "}, {"sha": "53b63fe0b419ce15620e8538d93e8e93c014f86d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -160,15 +160,7 @@ crate fn placeholder_type_error(\n             format!(\", {}\", type_name),\n         ));\n     }\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        placeholder_types.clone(),\n-        E0121,\n-        \"the type placeholder `_` is not allowed within types on item signatures\",\n-    );\n-    for span in &placeholder_types {\n-        err.span_label(*span, \"not allowed in type signatures\");\n-    }\n+    let mut err = bad_placeholder_type(tcx, placeholder_types);\n     if suggest {\n         err.multipart_suggestion(\n             \"use type parameters instead\",\n@@ -184,14 +176,8 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n         hir::ItemKind::Union(_, generics)\n         | hir::ItemKind::Enum(_, generics)\n         | hir::ItemKind::Struct(_, generics) => (&generics.params[..], true),\n-        hir::ItemKind::Static(ty, ..) => {\n-            if let hir::TyKind::Infer = ty.kind {\n-                return; // We handle it elsewhere to attempt to suggest an appropriate type.\n-            } else {\n-                (&[][..], false)\n-            }\n-        }\n         hir::ItemKind::TyAlias(_, generics) => (&generics.params[..], false),\n+        // hir::ItemKind::Static(ty, ..) => {\n         // hir::ItemKind::Fn(..) |\n         // hir::ItemKind::Const(..) => {} // We handle these elsewhere to suggest appropriate type.\n         _ => return,\n@@ -255,15 +241,21 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n-fn bad_placeholder_type(tcx: TyCtxt<'tcx>, span: Span) -> errors::DiagnosticBuilder<'tcx> {\n-    let mut diag = struct_span_err!(\n+fn bad_placeholder_type(\n+    tcx: TyCtxt<'tcx>,\n+    mut spans: Vec<Span>,\n+) -> errors::DiagnosticBuilder<'tcx> {\n+    spans.sort();\n+    let mut err = struct_span_err!(\n         tcx.sess,\n-        span,\n+        spans.clone(),\n         E0121,\n         \"the type placeholder `_` is not allowed within types on item signatures\",\n     );\n-    diag.span_label(span, \"not allowed in type signatures\");\n-    diag\n+    for span in spans {\n+        err.span_label(span, \"not allowed in type signatures\");\n+    }\n+    err\n }\n \n impl ItemCtxt<'tcx> {\n@@ -298,7 +290,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().sess.delay_span_bug(span, \"bad placeholder type, but no error was emitted\");\n+        self.tcx().sess.delay_span_bug(span, \"bad placeholder type\");\n         self.tcx().types.err\n     }\n \n@@ -308,7 +300,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder_type(self.tcx(), span).emit();\n+        bad_placeholder_type(self.tcx(), vec![span]).emit();\n \n         self.tcx().consts.err\n     }\n@@ -1233,7 +1225,7 @@ fn infer_placeholder_type(\n     span: Span,\n     item_ident: Ident,\n ) -> Ty<'_> {\n-    let ty = tcx.typeck_tables_of(def_id).node_type(body_id.hir_id);\n+    let ty = tcx.diagnostic_only_typeck_tables_of(def_id).node_type(body_id.hir_id);\n \n     // If this came from a free `const` or `static mut?` item,\n     // then the user may have written e.g. `const A = 42;`.\n@@ -1253,7 +1245,7 @@ fn infer_placeholder_type(\n             .emit();\n         }\n         None => {\n-            let mut diag = bad_placeholder_type(tcx, span);\n+            let mut diag = bad_placeholder_type(tcx, vec![span]);\n             if ty != tcx.types.err {\n                 diag.span_suggestion(\n                     span,\n@@ -1284,12 +1276,8 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    if let hir::TyKind::Infer = ty.kind {\n+                    if is_infer_ty(ty) {\n                         Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n-                    } else if is_infer_ty(ty) {\n-                        // Infering this would cause a cycle error.\n-                        tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n-                        Some(tcx.types.err)\n                     } else {\n                         None\n                     }\n@@ -1307,12 +1295,8 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 tcx.mk_fn_def(def_id, substs)\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n-                if let hir::TyKind::Infer = ty.kind {\n+                if is_infer_ty(ty) {\n                     infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n-                } else if is_infer_ty(ty) {\n-                    // Infering this would cause a cycle error.\n-                    tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n-                    tcx.types.err\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -1336,12 +1320,8 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         Node::Item(item) => {\n             match item.kind {\n                 ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n-                    if let hir::TyKind::Infer = ty.kind {\n+                    if is_infer_ty(ty) {\n                         infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n-                    } else if is_infer_ty(ty) {\n-                        // Infering this would cause a cycle error.\n-                        tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n-                        tcx.types.err\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -1818,7 +1798,7 @@ crate fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n         hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_infer_ty(ty),\n         hir::TyKind::Tup(tys)\n             if !tys.is_empty()\n-                && tys.iter().all(|ty| match ty.kind {\n+                && tys.iter().any(|ty| match ty.kind {\n                     hir::TyKind::Infer => true,\n                     _ => false,\n                 }) =>\n@@ -1858,12 +1838,14 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             match get_infer_ret_ty(&sig.decl.output) {\n                 Some(ty) => {\n                     let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n-                    let mut diag = bad_placeholder_type(tcx, ty.span);\n+                    let mut visitor = PlaceholderHirTyCollector::new();\n+                    visitor.visit_ty(ty);\n+                    let mut diag = bad_placeholder_type(tcx, visitor.0);\n                     let ret_ty = fn_sig.output();\n                     if ret_ty != tcx.types.err {\n                         diag.span_suggestion(\n                             ty.span,\n-                            \"replace this with the correct return type\",\n+                            \"replace with the correct return type\",\n                             ret_ty.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "5a5c6b40c5afecbcc7303459e13ff528d3ed23ba", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> _ { 5 }\n    |             ^\n    |             |\n    |             not allowed in type signatures\n-   |             help: replace this with the correct return type: `i32`\n+   |             help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:3:13"}, {"sha": "5b0ca2f347ea821af5e3dee5ba0e3bb5ba9da736", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -30,6 +30,7 @@ fn test7(x: _) { let _x: usize = x; }\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n@@ -79,6 +80,7 @@ pub fn main() {\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n \n@@ -128,4 +130,4 @@ trait T {\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn assoc_fn_test3() -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9fe7af4c822c17eacecb04ccb46c472d56d9fc30", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 73, "deletions": 64, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -5,16 +5,17 @@ LL | fn test() -> _ { 5 }\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace this with the correct return type: `i32`\n+   |              help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:7:15\n+  --> $DIR/typeck_type_placeholder_item.rs:7:16\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n-   |               ^^^^^^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace this with the correct return type: `(i32, i32)`\n+   |               -^--^-\n+   |               ||  |\n+   |               ||  not allowed in type signatures\n+   |               |not allowed in type signatures\n+   |               help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:10:15\n@@ -35,12 +36,10 @@ LL | static TEST4: _ = 145;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:16:16\n+  --> $DIR/typeck_type_placeholder_item.rs:16:15\n    |\n LL | static TEST5: (_, _) = (1, 2);\n-   |                ^  ^ not allowed in type signatures\n-   |                |\n-   |                not allowed in type signatures\n+   |               ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:19:13\n@@ -86,6 +85,12 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:31:22\n+   |\n+LL | fn test8(_f: fn() -> _) { }\n+   |                      ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:31:22\n    |\n@@ -98,7 +103,7 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:53:8\n+  --> $DIR/typeck_type_placeholder_item.rs:54:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n@@ -117,25 +122,26 @@ LL |     b: (T, T),\n    |\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:59:21\n+  --> $DIR/typeck_type_placeholder_item.rs:60:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n    |                     |\n    |                     not allowed in type signatures\n-   |                     help: replace this with the correct return type: `i32`\n+   |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:62:22\n+  --> $DIR/typeck_type_placeholder_item.rs:63:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n-   |                      ^^^^^^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: replace this with the correct return type: `(i32, i32)`\n+   |                      -^--^-\n+   |                      ||  |\n+   |                      ||  not allowed in type signatures\n+   |                      |not allowed in type signatures\n+   |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:65:22\n+  --> $DIR/typeck_type_placeholder_item.rs:66:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -144,7 +150,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:68:22\n+  --> $DIR/typeck_type_placeholder_item.rs:69:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -153,15 +159,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:71:23\n+  --> $DIR/typeck_type_placeholder_item.rs:72:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n-   |                       ^  ^ not allowed in type signatures\n-   |                       |\n-   |                       not allowed in type signatures\n+   |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:74:20\n+  --> $DIR/typeck_type_placeholder_item.rs:75:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -172,7 +176,7 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:77:20\n+  --> $DIR/typeck_type_placeholder_item.rs:78:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -183,7 +187,13 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:80:29\n+  --> $DIR/typeck_type_placeholder_item.rs:81:29\n+   |\n+LL |     fn fn_test8(_f: fn() -> _) { }\n+   |                             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:81:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -194,7 +204,7 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:102:12\n+  --> $DIR/typeck_type_placeholder_item.rs:104:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -213,41 +223,40 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+  --> $DIR/typeck_type_placeholder_item.rs:109:27\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                           ^^^^^^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+  --> $DIR/typeck_type_placeholder_item.rs:109:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                           ^^^^^^ not allowed in type signatures\n+   |                            ^  ^ not allowed in type signatures\n+   |                            |\n+   |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:111:29\n+  --> $DIR/typeck_type_placeholder_item.rs:113:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n-   |                             ^^^^^^\n-   |                             |\n-   |                             not allowed in type signatures\n-   |                             help: replace this with the correct return type: `(i32, i32)`\n+   |                             -^--^-\n+   |                             ||  |\n+   |                             ||  not allowed in type signatures\n+   |                             |not allowed in type signatures\n+   |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:21\n+  --> $DIR/typeck_type_placeholder_item.rs:116:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-   |                     ^           ^ not allowed in type signatures\n-   |                     |\n-   |                     not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test13<T>(x: T) -> (i32, T) { (x, x) }\n-   |                 ^^^    ^           ^\n+   |                           ------^-\n+   |                           |     |\n+   |                           |     not allowed in type signatures\n+   |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:119:31\n+  --> $DIR/typeck_type_placeholder_item.rs:121:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -258,7 +267,7 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:121:31\n+  --> $DIR/typeck_type_placeholder_item.rs:123:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -271,7 +280,7 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:123:31\n+  --> $DIR/typeck_type_placeholder_item.rs:125:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -282,7 +291,7 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:125:26\n+  --> $DIR/typeck_type_placeholder_item.rs:127:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -293,7 +302,7 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:26\n+  --> $DIR/typeck_type_placeholder_item.rs:129:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -306,7 +315,7 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:129:28\n+  --> $DIR/typeck_type_placeholder_item.rs:131:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -317,16 +326,16 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:37:24\n+  --> $DIR/typeck_type_placeholder_item.rs:38:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n    |                        |\n    |                        not allowed in type signatures\n-   |                        help: replace this with the correct return type: `()`\n+   |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:40:27\n+  --> $DIR/typeck_type_placeholder_item.rs:41:27\n    |\n LL |     fn test10(&self, _x : _) { }\n    |                           ^ not allowed in type signatures\n@@ -337,16 +346,16 @@ LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:45:24\n+  --> $DIR/typeck_type_placeholder_item.rs:46:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n    |                        |\n    |                        not allowed in type signatures\n-   |                        help: replace this with the correct return type: `Test9`\n+   |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:48:37\n+  --> $DIR/typeck_type_placeholder_item.rs:49:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n@@ -357,16 +366,16 @@ LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:86:31\n+  --> $DIR/typeck_type_placeholder_item.rs:88:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n    |                               |\n    |                               not allowed in type signatures\n-   |                               help: replace this with the correct return type: `()`\n+   |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:89:34\n+  --> $DIR/typeck_type_placeholder_item.rs:91:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -377,16 +386,16 @@ LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:94:28\n+  --> $DIR/typeck_type_placeholder_item.rs:96:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n-   |                            help: replace this with the correct return type: `main::FnTest9`\n+   |                            help: replace with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:97:41\n+  --> $DIR/typeck_type_placeholder_item.rs:99:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -396,7 +405,7 @@ help: use type parameters instead\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 40 previous errors\n \n Some errors have detailed explanations: E0121, E0282.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "e3bc059d1f18187f18a8c6a0f078e98454924a0d", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "patch": "@@ -5,7 +5,7 @@ LL | fn test1() -> _ { Some(42) }\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace this with the correct return type: `std::option::Option<i32>`\n+   |               help: replace with the correct return type: `std::option::Option<i32>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:7:14"}]}