{"sha": "8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "node_id": "C_kwDOAAsO6NoAKDhlZDNhODBiOWEzN2VlMzFlNjlmMWRiZTJmNzIwMDQ2ZjhkNDQyMmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-26T05:59:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T05:59:53Z"}, "message": "Rollup merge of #103287 - saethlin:faster-len-check, r=thomcc\n\nUse a faster allocation size check in slice::from_raw_parts\n\nI've been perusing through the codegen changes that result from turning on the standard library debug assertions. The previous check in here uses saturating arithmetic, which in my experience sometimes makes LLVM just fail to optimize things around the saturating operation.\n\nHere is a demo of the codegen difference: https://godbolt.org/z/WMEqrjajW\nBefore:\n```asm\nexample::len_check_old:\n        mov     rax, rdi\n        mov     ecx, 3\n        mul     rcx\n        setno   cl\n        test    rax, rax\n        setns   al\n        and     al, cl\n        ret\n\nexample::len_check_old:\n        mov     rax, rdi\n        mov     ecx, 8\n        mul     rcx\n        setno   cl\n        test    rax, rax\n        setns   al\n        and     al, cl\n        ret\n```\nAfter:\n```asm\nexample::len_check_new:\n        movabs  rax, 3074457345618258603\n        cmp     rdi, rax\n        setb    al\n        ret\n\nexample::len_check_new:\n        shr     rdi, 60\n        sete    al\n        ret\n```\n\nRunning rustc-perf locally, this looks like up to a 4.5% improvement when `debug-assertions-std = true`.\n\nThanks ```@LegionMammal978``` (I think that's you?) for turning my idea into a much cleaner implementation.\n\nr? ```@thomcc```", "tree": {"sha": "0c6778546b2c3b2fa2a29fa25ba5e837b307213c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6778546b2c3b2fa2a29fa25ba5e837b307213c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWMzZCRBK7hj4Ov3rIwAAzigIADWG0ObdKpK+r+RYzTES0FS0\nvUmMcXwaaV0lD9SeX9RCIAaY0ayA7JOz4LHLECAVA4QXEIwuH1lNZskdhWxgaRrn\no9i0mB/9cPwXo6O7riPyrx8yrgeq9spAs2GiDlobY9MDjHqmGaced6Yb6mEMbBzu\nVtzAwb/p+onzSpERo+SI27N9vXgdoE5KLlhu2Sd7VHI7I4ENujuQhgS3Sy8F2cyC\n9IDSyMQXl5a3gRfvM3R8h21QO0xGtVhtPn74Qoft1RfcNnnbTKqfRlCXB0AX/pfn\nOFWNuzeGh0q/EO5oaeArizR6fIyFoSKsDu0FmgdniZ77DUlhK9oCc2WLgTWzlV8=\n=VdwW\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c6778546b2c3b2fa2a29fa25ba5e837b307213c\nparent f2c2e582bdb8ca9d1a09643d516e22b6d3406581\nparent cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666763993 +0530\ncommitter GitHub <noreply@github.com> 1666763993 +0530\n\nRollup merge of #103287 - saethlin:faster-len-check, r=thomcc\n\nUse a faster allocation size check in slice::from_raw_parts\n\nI've been perusing through the codegen changes that result from turning on the standard library debug assertions. The previous check in here uses saturating arithmetic, which in my experience sometimes makes LLVM just fail to optimize things around the saturating operation.\n\nHere is a demo of the codegen difference: https://godbolt.org/z/WMEqrjajW\nBefore:\n```asm\nexample::len_check_old:\n        mov     rax, rdi\n        mov     ecx, 3\n        mul     rcx\n        setno   cl\n        test    rax, rax\n        setns   al\n        and     al, cl\n        ret\n\nexample::len_check_old:\n        mov     rax, rdi\n        mov     ecx, 8\n        mul     rcx\n        setno   cl\n        test    rax, rax\n        setns   al\n        and     al, cl\n        ret\n```\nAfter:\n```asm\nexample::len_check_new:\n        movabs  rax, 3074457345618258603\n        cmp     rdi, rax\n        setb    al\n        ret\n\nexample::len_check_new:\n        shr     rdi, 60\n        sete    al\n        ret\n```\n\nRunning rustc-perf locally, this looks like up to a 4.5% improvement when `debug-assertions-std = true`.\n\nThanks ```@LegionMammal978``` (I think that's you?) for turning my idea into a much cleaner implementation.\n\nr? ```@thomcc```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "html_url": "https://github.com/rust-lang/rust/commit/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c2e582bdb8ca9d1a09643d516e22b6d3406581", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c2e582bdb8ca9d1a09643d516e22b6d3406581", "html_url": "https://github.com/rust-lang/rust/commit/f2c2e582bdb8ca9d1a09643d516e22b6d3406581"}, {"sha": "cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "html_url": "https://github.com/rust-lang/rust/commit/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "29f796fad6d5033bd70f3f885eefcd147b8433a6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "patch": "@@ -2229,6 +2229,16 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr.is_aligned()\n }\n \n+/// Checks whether an allocation of `len` instances of `T` exceeds\n+/// the maximum allowed allocation size.\n+pub(crate) fn is_valid_allocation_size<T>(len: usize) -> bool {\n+    let max_len = const {\n+        let size = crate::mem::size_of::<T>();\n+        if size == 0 { usize::MAX } else { isize::MAX as usize / size }\n+    };\n+    len <= max_len\n+}\n+\n /// Checks whether the regions of memory starting at `src` and `dst` of size\n /// `count * size_of::<T>()` do *not* overlap.\n pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {"}, {"sha": "659409557c9107213485fdb1acc1575d1b0ad9d8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "patch": "@@ -192,6 +192,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(if_let_guard)]\n+#![feature(inline_const)]\n #![feature(intra_doc_pointers)]\n #![feature(intrinsics)]\n #![feature(lang_items)]"}, {"sha": "dace748fed4559f56cdd50874583275b6d42d188", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "patch": "@@ -1,7 +1,9 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n-use crate::intrinsics::{assert_unsafe_precondition, is_aligned_and_not_null};\n+use crate::intrinsics::{\n+    assert_unsafe_precondition, is_aligned_and_not_null, is_valid_allocation_size,\n+};\n use crate::ops::Range;\n use crate::ptr;\n \n@@ -91,8 +93,7 @@ pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T]\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n     unsafe {\n         assert_unsafe_precondition!([T](data: *const T, len: usize) =>\n-            is_aligned_and_not_null(data)\n-                && crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize\n+            is_aligned_and_not_null(data) && is_valid_allocation_size::<T>(len)\n         );\n         &*ptr::slice_from_raw_parts(data, len)\n     }\n@@ -135,8 +136,7 @@ pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a m\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.\n     unsafe {\n         assert_unsafe_precondition!([T](data: *mut T, len: usize) =>\n-            is_aligned_and_not_null(data)\n-                && crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize\n+            is_aligned_and_not_null(data) && is_valid_allocation_size::<T>(len)\n         );\n         &mut *ptr::slice_from_raw_parts_mut(data, len)\n     }"}]}