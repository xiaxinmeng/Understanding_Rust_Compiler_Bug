{"sha": "bae4fafdfb756690ee31ac939299380cc559c697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTRmYWZkZmI3NTY2OTBlZTMxYWM5MzkyOTkzODBjYzU1OWM2OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T05:05:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T05:05:06Z"}, "message": "Auto merge of #43844 - arielb1:literally-nonstandard, r=eddyb\n\nast_validation: forbid \"nonstandard\" literal patterns\n\nSince #42886, macros can create \"nonstandard\" PatKind::Lit patterns,\nthat contain path expressions instead of the usual literal expr. These\ncan cause trouble, including ICEs.\n\nWe *could* map these nonstandard patterns to PatKind::Path patterns\nduring HIR lowering, but that would be much effort for little gain, and\nI think is too risky for beta. So let's just forbid them during AST\nvalidation.\n\nFixes #43250.\n\nbeta-nominating because regression.\nr? @eddyb", "tree": {"sha": "632fc358ce11beca22144a43a08fa54bd4994d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632fc358ce11beca22144a43a08fa54bd4994d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae4fafdfb756690ee31ac939299380cc559c697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae4fafdfb756690ee31ac939299380cc559c697", "html_url": "https://github.com/rust-lang/rust/commit/bae4fafdfb756690ee31ac939299380cc559c697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae4fafdfb756690ee31ac939299380cc559c697/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3245948445b77c25cd9f3b29cbad3187aee3eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3245948445b77c25cd9f3b29cbad3187aee3eb7", "html_url": "https://github.com/rust-lang/rust/commit/e3245948445b77c25cd9f3b29cbad3187aee3eb7"}, {"sha": "a2adb7db6861a7e3bab1d3f11b33a5935984d366", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2adb7db6861a7e3bab1d3f11b33a5935984d366", "html_url": "https://github.com/rust-lang/rust/commit/a2adb7db6861a7e3bab1d3f11b33a5935984d366"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "b22f8112d7a38e889a85b8f85c9fb7c8e6f788e5", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bae4fafdfb756690ee31ac939299380cc559c697/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4fafdfb756690ee31ac939299380cc559c697/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=bae4fafdfb756690ee31ac939299380cc559c697", "patch": "@@ -94,10 +94,25 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// matches '-' lit | lit (cf. parser::Parser::parse_pat_literal_maybe_minus)\n-    fn check_expr_within_pat(&self, expr: &Expr) {\n+    /// matches '-' lit | lit (cf. parser::Parser::parse_pat_literal_maybe_minus),\n+    /// or path for ranges.\n+    ///\n+    /// FIXME: do we want to allow expr -> pattern conversion to create path expressions?\n+    /// That means making this work:\n+    ///\n+    /// ```rust,ignore (FIXME)\n+    ///     struct S;\n+    ///     macro_rules! m {\n+    ///         ($a:expr) => {\n+    ///             let $a = S;\n+    ///         }\n+    ///     }\n+    ///     m!(S);\n+    /// ```\n+    fn check_expr_within_pat(&self, expr: &Expr, allow_paths: bool) {\n         match expr.node {\n-            ExprKind::Lit(..) | ExprKind::Path(..) => {}\n+            ExprKind::Lit(..) => {}\n+            ExprKind::Path(..) if allow_paths => {}\n             ExprKind::Unary(UnOp::Neg, ref inner)\n                 if match inner.node { ExprKind::Lit(_) => true, _ => false } => {}\n             _ => self.err_handler().span_err(expr.span, \"arbitrary expressions aren't allowed \\\n@@ -332,11 +347,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_pat(&mut self, pat: &'a Pat) {\n         match pat.node {\n             PatKind::Lit(ref expr) => {\n-                self.check_expr_within_pat(expr);\n+                self.check_expr_within_pat(expr, false);\n             }\n             PatKind::Range(ref start, ref end, _) => {\n-                self.check_expr_within_pat(start);\n-                self.check_expr_within_pat(end);\n+                self.check_expr_within_pat(start, true);\n+                self.check_expr_within_pat(end, true);\n             }\n             _ => {}\n         }"}, {"sha": "e1d34f339dc60e10a253802ce591e13724513f26", "filename": "src/test/compile-fail/issue-43250.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bae4fafdfb756690ee31ac939299380cc559c697/src%2Ftest%2Fcompile-fail%2Fissue-43250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae4fafdfb756690ee31ac939299380cc559c697/src%2Ftest%2Fcompile-fail%2Fissue-43250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43250.rs?ref=bae4fafdfb756690ee31ac939299380cc559c697", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut y;\n+    const C: u32 = 0;\n+    macro_rules! m {\n+        ($a:expr) => {\n+            let $a = 0;\n+        }\n+    }\n+    m!(y);\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    m!(C);\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+}"}]}