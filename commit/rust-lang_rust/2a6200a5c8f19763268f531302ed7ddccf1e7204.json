{"sha": "2a6200a5c8f19763268f531302ed7ddccf1e7204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjIwMGE1YzhmMTk3NjMyNjhmNTMxMzAyZWQ3ZGRjY2YxZTcyMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T10:44:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T10:44:22Z"}, "message": "Auto merge of #49911 - rcoh:master, r=nikomatsakis\n\nDon't allow #[should_panic] with non-() tests\n\nAdds (removes) support for `#[should_panic]` when the test is non-`()`", "tree": {"sha": "9db4de0f9b98d38f0598ca00c1a52cad7361740a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db4de0f9b98d38f0598ca00c1a52cad7361740a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a6200a5c8f19763268f531302ed7ddccf1e7204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6200a5c8f19763268f531302ed7ddccf1e7204", "html_url": "https://github.com/rust-lang/rust/commit/2a6200a5c8f19763268f531302ed7ddccf1e7204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a6200a5c8f19763268f531302ed7ddccf1e7204/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898c9f7d71f202e1e472427694347da4a91d8258", "url": "https://api.github.com/repos/rust-lang/rust/commits/898c9f7d71f202e1e472427694347da4a91d8258", "html_url": "https://github.com/rust-lang/rust/commit/898c9f7d71f202e1e472427694347da4a91d8258"}, {"sha": "14e5e0e9c9f01e29cd1e8d7da10e85b655288b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e5e0e9c9f01e29cd1e8d7da10e85b655288b2e", "html_url": "https://github.com/rust-lang/rust/commit/14e5e0e9c9f01e29cd1e8d7da10e85b655288b2e"}], "stats": {"total": 113, "additions": 79, "deletions": 34}, "files": [{"sha": "325927ed8323788bf0c6013fd3750574d8ccb40c", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=2a6200a5c8f19763268f531302ed7ddccf1e7204", "patch": "@@ -320,56 +320,69 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n #[derive(PartialEq)]\n enum HasTestSignature {\n     Yes,\n-    No,\n+    No(BadTestSignature),\n+}\n+\n+#[derive(PartialEq)]\n+enum BadTestSignature {\n     NotEvenAFunction,\n+    WrongTypeSignature,\n+    NoArgumentsAllowed,\n+    ShouldPanicOnlyWithNoArgs,\n }\n \n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(&i.attrs, \"test\");\n \n     fn has_test_signature(cx: &TestCtxt, i: &ast::Item) -> HasTestSignature {\n+        let has_should_panic_attr = attr::contains_name(&i.attrs, \"should_panic\");\n         match i.node {\n             ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n                 // If the termination trait is active, the compiler will check that the output\n                 // type implements the `Termination` trait as `libtest` enforces that.\n-                let output_matches = if cx.features.termination_trait_test {\n-                    true\n-                } else {\n-                    let no_output = match decl.output {\n-                        ast::FunctionRetTy::Default(..) => true,\n-                        ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n-                        _ => false\n-                    };\n-\n-                    no_output && !generics.is_parameterized()\n+                let has_output = match decl.output {\n+                    ast::FunctionRetTy::Default(..) => false,\n+                    ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => false,\n+                    _ => true\n                 };\n \n-                if decl.inputs.is_empty() && output_matches {\n-                    Yes\n-                } else {\n-                    No\n+                if !decl.inputs.is_empty() {\n+                    return No(BadTestSignature::NoArgumentsAllowed);\n+                }\n+\n+                match (has_output, cx.features.termination_trait_test, has_should_panic_attr) {\n+                    (true, true, true) => No(BadTestSignature::ShouldPanicOnlyWithNoArgs),\n+                    (true, true, false) => if generics.is_parameterized() {\n+                        No(BadTestSignature::WrongTypeSignature)\n+                    } else {\n+                        Yes\n+                    },\n+                    (true, false, _) => No(BadTestSignature::WrongTypeSignature),\n+                    (false, _, _) => Yes\n                 }\n             }\n-            _ => NotEvenAFunction,\n+            _ => No(BadTestSignature::NotEvenAFunction),\n         }\n     }\n \n     let has_test_signature = if has_test_attr {\n         let diag = cx.span_diagnostic;\n         match has_test_signature(cx, i) {\n             Yes => true,\n-            No => {\n-                if cx.features.termination_trait_test {\n-                    diag.span_err(i.span, \"functions used as tests can not have any arguments\");\n-                } else {\n-                    diag.span_err(i.span, \"functions used as tests must have signature fn() -> ()\");\n+            No(cause) => {\n+                match cause {\n+                    BadTestSignature::NotEvenAFunction =>\n+                        diag.span_err(i.span, \"only functions may be used as tests\"),\n+                    BadTestSignature::WrongTypeSignature =>\n+                        diag.span_err(i.span,\n+                                      \"functions used as tests must have signature fn() -> ()\"),\n+                    BadTestSignature::NoArgumentsAllowed =>\n+                        diag.span_err(i.span, \"functions used as tests can not have any arguments\"),\n+                    BadTestSignature::ShouldPanicOnlyWithNoArgs =>\n+                        diag.span_err(i.span, \"functions using `#[should_panic]` must return `()`\"),\n                 }\n                 false\n-            },\n-            NotEvenAFunction => {\n-                diag.span_err(i.span, \"only functions may be used as tests\");\n-                false\n-            },\n+            }\n         }\n     } else {\n         false\n@@ -407,7 +420,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n                 // well before resolve, can't get too deep.\n                 input_cnt == 1 && output_matches\n             }\n-          _ => false\n+            _ => false\n         }\n     }\n "}, {"sha": "73a0150c0bb3f0d7e441f7025a2b6abc7c91302c", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test-should-panic.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs?ref=2a6200a5c8f19763268f531302ed7ddccf1e7204", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(termination_trait_test)]\n+#![feature(test)]\n+\n+extern crate test;\n+use std::num::ParseIntError;\n+use test::Bencher;\n+\n+#[test]\n+#[should_panic]\n+fn not_a_num() -> Result<(), ParseIntError> {\n+    //~^ ERROR functions using `#[should_panic]` must return `()`\n+    let _: u32 = \"abc\".parse()?;\n+    Ok(())\n+}"}, {"sha": "e3dab82df41b9c584fd76ff6b98e4aa9b75899c0", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test-should-panic.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr?ref=2a6200a5c8f19763268f531302ed7ddccf1e7204", "patch": "@@ -0,0 +1,12 @@\n+error: functions using `#[should_panic]` must return `()`\n+  --> $DIR/termination-trait-in-test-should-panic.rs:22:1\n+   |\n+LL | / fn not_a_num() -> Result<(), ParseIntError> {\n+LL | |     //~^ ERROR functions using `#[should_panic]` must return `()`\n+LL | |     let _: u32 = \"abc\".parse()?;\n+LL | |     Ok(())\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2cb4552a4b29e1134ee77eb04361afb2c52b9ebf", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "renamed", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6200a5c8f19763268f531302ed7ddccf1e7204/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=2a6200a5c8f19763268f531302ed7ddccf1e7204", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: --test\n+// run-pass\n \n #![feature(termination_trait_test)]\n #![feature(test)]\n@@ -23,13 +24,6 @@ fn is_a_num() -> Result<(), ParseIntError> {\n     Ok(())\n }\n \n-#[test]\n-#[should_panic]\n-fn not_a_num() -> Result<(), ParseIntError> {\n-    let _: u32 = \"abc\".parse()?;\n-    Ok(())\n-}\n-\n #[bench]\n fn test_a_positive_bench(_: &mut Bencher) -> Result<(), ParseIntError> {\n     Ok(())", "previous_filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-in-test.rs"}]}