{"sha": "c1011165e63480dabf1913e308da8b344dfa8f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDExMTY1ZTYzNDgwZGFiZjE5MTNlMzA4ZGE4YjM0NGRmYThmOGE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-21T23:11:00Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:06Z"}, "message": "Attach `TokenStream` to `ast::Visibility`\n\nA `Visibility` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher", "tree": {"sha": "e5238382bcb2c25a18b84b289ac947521f74bb6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5238382bcb2c25a18b84b289ac947521f74bb6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1011165e63480dabf1913e308da8b344dfa8f8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5IACgkQtAh+UQ6Y\nsWTmdBAAsXWADhK/Y8iaOecj0O/WgKtQ4MAysG/0/2jaGDZXuujM59p24bBb2HJF\npPQcMxx8n/1dTRcif8JH25QJFhT4QcwfwZcfW+tXJE8lt99t4482qFevKCXR/dnM\nGOAf5q+K7Jsvq+JIXsEjgEH+PWhpBFoigmu6uoh8NSG2Xt3UdYTDrMtqrfcM56Wk\nWxo33cZ8pHr7EJubKTvdG6geedLP40ScSpKSgmxTR5PI5GEhTt7onK1o68j1QsuW\nGW7UrBjCEEjBhU5ZdcByIkSeCiz43HRn7u3HSvYts83Tgf4wEZneMBqvuzzT8Y9J\nLqalX+O7gB9a6FqrhmhzcshCg6mihfzRL2gHYAaYs7nafzOTv1E680hUrQYKOd4i\ncH74D1Ta2eWPutR0gzfGl2IUKyWogorkiBf/aEpdMqrGxXdhbRkLekw3n9gAAMg8\ngtMhPLXdgkJAq01jYYTNIOHScCNqju+m/7OAxTdBY8gGqOPhnKwJSmdbWxcU2h3r\nlui5cWwhYGv2bScjjVMicV8csEaWd5FPBhj5HvIdLQ3ipKQnEzQf/tZ9FZ/i/rb0\nhsSEOSsnBNjjzBp2W1wY1EXQuTnaZtY0nFfsE7+6vKrRW+g1ntxulxvq85tcxjGG\nv6wjOJoSNIQHVd/Az4rbiIqiD6kjR7egTSz40mD/dCf+8sV0i3Q=\n=/mzE\n-----END PGP SIGNATURE-----", "payload": "tree e5238382bcb2c25a18b84b289ac947521f74bb6d\nparent 55082ce41334d9685d619182e71b84b495a6aff8\nauthor Aaron Hill <aa1ronham@gmail.com> 1598051460 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773586 -0400\n\nAttach `TokenStream` to `ast::Visibility`\n\nA `Visibility` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1011165e63480dabf1913e308da8b344dfa8f8a", "html_url": "https://github.com/rust-lang/rust/commit/c1011165e63480dabf1913e308da8b344dfa8f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1011165e63480dabf1913e308da8b344dfa8f8a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55082ce41334d9685d619182e71b84b495a6aff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55082ce41334d9685d619182e71b84b495a6aff8", "html_url": "https://github.com/rust-lang/rust/commit/55082ce41334d9685d619182e71b84b495a6aff8"}], "stats": {"total": 170, "additions": 120, "deletions": 50}, "files": [{"sha": "e2703989646ffc0bdb6413210f3c75d58e9cf90e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -2490,7 +2490,12 @@ pub enum CrateSugar {\n     JustCrate,\n }\n \n-pub type Visibility = Spanned<VisibilityKind>;\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct Visibility {\n+    pub kind: VisibilityKind,\n+    pub span: Span,\n+    pub tokens: Option<TokenStream>,\n+}\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {"}, {"sha": "d37bba646ef6e62fce7acbbea0b0920ca456ec79", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -14,7 +14,7 @@ use crate::tokenstream::*;\n \n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n@@ -978,11 +978,13 @@ pub fn noop_visit_mod<T: MutVisitor>(module: &mut Mod, vis: &mut T) {\n \n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n     visit_clobber(krate, |Crate { module, attrs, span, proc_macros }| {\n+        let item_vis =\n+            Visibility { kind: VisibilityKind::Public, span: span.shrink_to_lo(), tokens: None };\n         let item = P(Item {\n             ident: Ident::invalid(),\n             attrs,\n             id: DUMMY_NODE_ID,\n-            vis: respan(span.shrink_to_lo(), VisibilityKind::Public),\n+            vis: item_vis,\n             span,\n             kind: ItemKind::Mod(module),\n             tokens: None,\n@@ -1314,13 +1316,13 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n     }\n }\n \n-pub fn noop_visit_vis<T: MutVisitor>(Spanned { node, span }: &mut Visibility, vis: &mut T) {\n-    match node {\n+pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n+    match &mut visibility.kind {\n         VisibilityKind::Public | VisibilityKind::Crate(_) | VisibilityKind::Inherited => {}\n         VisibilityKind::Restricted { path, id } => {\n             vis.visit_path(path);\n             vis.visit_id(id);\n         }\n     }\n-    vis.visit_span(span);\n+    vis.visit_span(&mut visibility.span);\n }"}, {"sha": "86fd87f6c42c5a88977f617cab70a14ae9327f26", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -879,7 +879,7 @@ pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n }\n \n pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n-    if let VisibilityKind::Restricted { ref path, id } = vis.node {\n+    if let VisibilityKind::Restricted { ref path, id } = vis.kind {\n         visitor.visit_path(path, id);\n     }\n }"}, {"sha": "6d41b7836b12114f7e1c4577fadb6fbdae24998b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -930,7 +930,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         v: &Visibility,\n         explicit_owner: Option<NodeId>,\n     ) -> hir::Visibility<'hir> {\n-        let node = match v.node {\n+        let node = match v.kind {\n             VisibilityKind::Public => hir::VisibilityKind::Public,\n             VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n             VisibilityKind::Restricted { ref path, id } => {"}, {"sha": "31c05325d1d258dcc32b4f78742b57ddd1246baf", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -198,13 +198,13 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn invalid_visibility(&self, vis: &Visibility, note: Option<&str>) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n \n         let mut err =\n             struct_span_err!(self.session, vis.span, E0449, \"unnecessary visibility qualifier\");\n-        if vis.node.is_pub() {\n+        if vis.kind.is_pub() {\n             err.span_label(vis.span, \"`pub` not permitted here because it's implied\");\n         }\n         if let Some(note) = note {"}, {"sha": "40643da2881a096e8d3f8c9b4cac5f8579b5d3f0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -594,7 +594,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n-        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n+        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.kind {\n             gate_feature_post!(\n                 &self,\n                 crate_visibility_modifier,"}, {"sha": "d16b541c6999e7b52671b94e7cba7bca4ca9dcef", "filename": "compiler/rustc_ast_pretty/src/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -1359,7 +1359,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_visibility(&mut self, vis: &ast::Visibility) {\n-        match vis.node {\n+        match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n             ast::VisibilityKind::Crate(sugar) => match sugar {\n                 ast::CrateSugar::PubCrate => self.word_nbsp(\"pub(crate)\"),"}, {"sha": "d235caec1031f580a2ec918ff7c6d7650e49a3f4", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -187,7 +187,6 @@ use rustc_ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_attr as attr;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -532,7 +531,11 @@ impl<'a> TraitDef<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n-                vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: self.span.shrink_to_lo(),\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 attrs: Vec::new(),\n                 kind: ast::AssocItemKind::TyAlias(\n                     ast::Defaultness::Final,\n@@ -933,7 +936,11 @@ impl<'a> MethodDef<'a> {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n-            vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: trait_lo_sp,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             ident: method_ident,\n             kind: ast::AssocItemKind::Fn(def, sig, fn_generics, Some(body_block)),\n             tokens: None,"}, {"sha": "3689e33be6f0f39b9bb7bea2a18bc42b9ed3665c", "filename": "compiler/rustc_builtin_macros/src/global_asm.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -14,7 +14,6 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use smallvec::smallvec;\n@@ -30,7 +29,11 @@ pub fn expand_global_asm<'cx>(\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::ItemKind::GlobalAsm(P(global_asm)),\n-            vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: sp.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span: cx.with_def_site_ctxt(sp),\n             tokens: None,\n         })]),"}, {"sha": "c6ab3faf568979806feaf69aef02555a0996fc2a", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -98,7 +98,7 @@ pub fn inject(\n \n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n-        if self.is_proc_macro_crate && self.in_root && vis.node.is_pub() {\n+        if self.is_proc_macro_crate && self.in_root && vis.kind.is_pub() {\n             self.handler.span_err(\n                 sp,\n                 \"`proc-macro` crate types currently cannot export any items other \\\n@@ -184,7 +184,7 @@ impl<'a> CollectProcMacros<'a> {\n             Vec::new()\n         };\n \n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n                 id: item.id,\n                 span: item.span,\n@@ -204,7 +204,7 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,\n@@ -223,7 +223,7 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,"}, {"sha": "1de0b32f5196b3b27b8a5632b171cbfaf42ca88e", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -7,7 +7,6 @@ use rustc_ast::attr;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_session::Session;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -35,7 +34,11 @@ pub fn expand_test_case(\n     let sp = ecx.with_def_site_ctxt(attr_sp);\n     let mut item = anno_item.expect_item();\n     item = item.map(|mut item| {\n-        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n+        item.vis = ast::Visibility {\n+            span: item.vis.span,\n+            kind: ast::VisibilityKind::Public,\n+            tokens: None,\n+        };\n         item.ident.span = item.ident.span.with_ctxt(sp.ctxt());\n         item.attrs.push(ecx.attribute(ecx.meta_word(sp, sym::rustc_test_marker)));\n         item\n@@ -292,7 +295,7 @@ pub fn expand_test_or_bench(\n         ),\n     );\n     test_const = test_const.map(|mut tc| {\n-        tc.vis.node = ast::VisibilityKind::Public;\n+        tc.vis.kind = ast::VisibilityKind::Public;\n         tc\n     });\n "}, {"sha": "0a60ca8faaa12db7ad2a90d34cb6f318d9cc11b4", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -10,7 +10,6 @@ use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n use rustc_session::Session;\n use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n@@ -333,7 +332,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         attrs: vec![main_attr],\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n-        vis: respan(sp, ast::VisibilityKind::Public),\n+        vis: ast::Visibility { span: sp, kind: ast::VisibilityKind::Public, tokens: None },\n         span: sp,\n         tokens: None,\n     });"}, {"sha": "70603622bedda711b26e688a220432b50b6d7aee", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -3,7 +3,7 @@ use crate::base::ExtCtxt;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, PatKind, UnOp};\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use rustc_span::Span;\n@@ -584,7 +584,11 @@ impl<'a> ExtCtxt<'a> {\n             attrs,\n             id: ast::DUMMY_NODE_ID,\n             kind,\n-            vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: span.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span,\n             tokens: None,\n         })\n@@ -598,7 +602,11 @@ impl<'a> ExtCtxt<'a> {\n                 span: ty.span,\n                 ty,\n                 ident: None,\n-                vis: respan(vis_span, ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: vis_span,\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n                 is_placeholder: false,\n@@ -617,7 +625,11 @@ impl<'a> ExtCtxt<'a> {\n             disr_expr: None,\n             id: ast::DUMMY_NODE_ID,\n             ident,\n-            vis: respan(vis_span, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: vis_span,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span,\n             is_placeholder: false,\n         }"}, {"sha": "47c070f16516a4a6b8e0a1d0b8da67b142469a61", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -26,7 +26,6 @@ use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Limit;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{ExpnId, FileName, Span, DUMMY_SP};\n \n@@ -358,7 +357,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             kind: ast::ItemKind::Mod(krate.module),\n             ident: Ident::invalid(),\n             id: ast::DUMMY_NODE_ID,\n-            vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n+            vis: ast::Visibility {\n+                span: krate.span.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Public,\n+                tokens: None,\n+            },\n             tokens: None,\n         })]);\n "}, {"sha": "036c00bb7537ff5dc795c09f57aec907e55d0fa3", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -4,7 +4,7 @@ use crate::expand::{AstFragment, AstFragmentKind};\n use rustc_ast as ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n-use rustc_span::source_map::{dummy_spanned, DUMMY_SP};\n+use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Ident;\n \n use smallvec::{smallvec, SmallVec};\n@@ -26,7 +26,11 @@ pub fn placeholder(\n \n     let ident = Ident::invalid();\n     let attrs = Vec::new();\n-    let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n+    let vis = vis.unwrap_or(ast::Visibility {\n+        span: DUMMY_SP,\n+        kind: ast::VisibilityKind::Inherited,\n+        tokens: None,\n+    });\n     let span = DUMMY_SP;\n     let expr_placeholder = || {\n         P(ast::Expr {"}, {"sha": "94abfac19c665cb426e4ccff96e3e8df40c95b98", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n-use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Symbol;\n \n use rustc_data_structures::sync::Lrc;\n@@ -421,7 +421,11 @@ impl CStore {\n                 span,\n                 attrs: attrs.to_vec(),\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n-                vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: span.shrink_to_lo(),\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "3807daa701598968d1a0cd36c214d3a3bdc8977a", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -279,14 +279,14 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         }\n         Nonterminal::NtMeta(ref attr) => attr.tokens.clone(),\n         Nonterminal::NtPath(ref path) => path.tokens.clone(),\n+        Nonterminal::NtVis(ref vis) => vis.tokens.clone(),\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n         Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             if expr.tokens.is_none() {\n                 debug!(\"missing tokens for expr {:?}\", expr);\n             }\n             prepend_attrs(sess, &expr.attrs, expr.tokens.as_ref(), span)\n         }\n-        _ => None,\n     };\n \n     // FIXME(#43081): Avoid this pretty-print + reparse hack"}, {"sha": "26ca99801277bb9081c54476a03b57f23f66f1fd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -187,7 +187,7 @@ impl<'a> Parser<'a> {\n \n     /// Error in-case a non-inherited visibility was parsed but no item followed.\n     fn error_on_unmatched_vis(&self, vis: &Visibility) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n         let vs = pprust::vis_to_string(&vis);\n@@ -296,7 +296,7 @@ impl<'a> Parser<'a> {\n         } else if self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis)?\n-        } else if vis.node.is_pub() && self.isnt_macro_invocation() {\n+        } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n@@ -1418,7 +1418,7 @@ impl<'a> Parser<'a> {\n     /// Item macro invocations or `macro_rules!` definitions need inherited visibility.\n     /// If that's not the case, emit an error.\n     fn complain_if_pub_macro(&self, vis: &Visibility, macro_rules: bool) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n "}, {"sha": "5eefae3af60e9b9d47819b713764f1d497589c22", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -22,7 +22,7 @@ use rustc_ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, Vi\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::{respan, Span, DUMMY_SP};\n+use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use tracing::debug;\n \n@@ -1022,14 +1022,22 @@ impl<'a> Parser<'a> {\n         if self.is_crate_vis() {\n             self.bump(); // `crate`\n             self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);\n-            return Ok(respan(self.prev_token.span, VisibilityKind::Crate(CrateSugar::JustCrate)));\n+            return Ok(Visibility {\n+                span: self.prev_token.span,\n+                kind: VisibilityKind::Crate(CrateSugar::JustCrate),\n+                tokens: None,\n+            });\n         }\n \n         if !self.eat_keyword(kw::Pub) {\n             // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no\n             // keyword to grab a span from for inherited visibility; an empty span at the\n             // beginning of the current token would seem to be the \"Schelling span\".\n-            return Ok(respan(self.token.span.shrink_to_lo(), VisibilityKind::Inherited));\n+            return Ok(Visibility {\n+                span: self.token.span.shrink_to_lo(),\n+                kind: VisibilityKind::Inherited,\n+                tokens: None,\n+            });\n         }\n         let lo = self.prev_token.span;\n \n@@ -1046,15 +1054,23 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `crate`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Crate(CrateSugar::PubCrate);\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if self.is_keyword_ahead(1, &[kw::In]) {\n                 // Parse `pub(in path)`.\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n                 let path = self.parse_path(PathStyle::Mod)?; // `path`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))\n                 && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n             {\n@@ -1063,7 +1079,11 @@ impl<'a> Parser<'a> {\n                 let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if let FollowedByType::No = fbt {\n                 // Provide this diagnostic if a type cannot follow;\n                 // in particular, if this is not a tuple struct.\n@@ -1072,7 +1092,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok(respan(lo, VisibilityKind::Public))\n+        Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })\n     }\n \n     /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`"}, {"sha": "f98f2a89dc629d83e62f00af8d0692bcd1c56abb", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -186,7 +186,15 @@ impl<'a> Parser<'a> {\n                 token::NtMeta(P(attr))\n             }\n             NonterminalKind::TT => token::NtTT(self.parse_token_tree()),\n-            NonterminalKind::Vis => token::NtVis(self.parse_visibility(FollowedByType::Yes)?),\n+            NonterminalKind::Vis => {\n+                let (mut vis, tokens) =\n+                    self.collect_tokens(|this| this.parse_visibility(FollowedByType::Yes))?;\n+                // We may have etan an `NtVis`, which could already have tokens\n+                if vis.tokens.is_none() {\n+                    vis.tokens = Some(tokens);\n+                }\n+                token::NtVis(vis)\n+            }\n             NonterminalKind::Lifetime => {\n                 if self.check_lifetime() {\n                     token::NtLifetime(self.expect_lifetime().ident)"}, {"sha": "03c2915f8486b233578af3e07909341748f6112f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         speculative: bool,\n     ) -> Result<ty::Visibility, VisResolutionError<'ast>> {\n         let parent_scope = &self.parent_scope;\n-        match vis.node {\n+        match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n             ast::VisibilityKind::Crate(..) => {\n                 Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))"}, {"sha": "89ce89b2e9a94277b3875d97341d9cd6c6fd8f7b", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1011165e63480dabf1913e308da8b344dfa8f8a/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=c1011165e63480dabf1913e308da8b344dfa8f8a", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         // because this means that they were generated in some fashion by the\n         // compiler and we don't need to consider them.\n         if let ast::ItemKind::Use(..) = item.kind {\n-            if item.vis.node.is_pub() || item.span.is_dummy() {\n+            if item.vis.kind.is_pub() || item.span.is_dummy() {\n                 return;\n             }\n         }"}]}