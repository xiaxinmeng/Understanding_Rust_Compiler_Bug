{"sha": "c209fc9349ff750dc983ecfe23d8e0bb74f002df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDlmYzkzNDlmZjc1MGRjOTgzZWNmZTIzZDhlMGJiNzRmMDAyZGY=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2018-10-05T16:06:05Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2018-10-26T16:12:01Z"}, "message": "Fix string_lit_as_bytes lint for macros\n\nPrior to this change, string_lit_as_bytes would trigger for constructs\nlike `include_str!(\"filename\").as_bytes()` and would recommend fixing it\nby rewriting as `binclude_str!(\"filename\")`.\n\nThis change updates the lint to act as an EarlyLintPass lint. It then\ndifferentiates between string literals and macros that have bytes\nyielding alternatives.\n\nCloses #3205", "tree": {"sha": "b43d0e01088ba930cd7252068dd20d43c5b9ee56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43d0e01088ba930cd7252068dd20d43c5b9ee56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c209fc9349ff750dc983ecfe23d8e0bb74f002df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c209fc9349ff750dc983ecfe23d8e0bb74f002df", "html_url": "https://github.com/rust-lang/rust/commit/c209fc9349ff750dc983ecfe23d8e0bb74f002df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c209fc9349ff750dc983ecfe23d8e0bb74f002df/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457e7f12e9fc028eae182f23b279194e5344b676", "url": "https://api.github.com/repos/rust-lang/rust/commits/457e7f12e9fc028eae182f23b279194e5344b676", "html_url": "https://github.com/rust-lang/rust/commit/457e7f12e9fc028eae182f23b279194e5344b676"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "9b6478fb9cd664776e8f6b42c65ab084ba513883", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c209fc9349ff750dc983ecfe23d8e0bb74f002df/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c209fc9349ff750dc983ecfe23d8e0bb74f002df/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=c209fc9349ff750dc983ecfe23d8e0bb74f002df", "patch": "@@ -92,7 +92,14 @@ impl LintPass for StringAdd {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) = e.node {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Add, ..\n+            },\n+            ref left,\n+            _,\n+        ) = e.node\n+        {\n             if is_string(cx, left) {\n                 if !is_allowed(cx, STRING_ADD_ASSIGN, e.id) {\n                     let parent = get_parent_expr(cx, e);\n@@ -132,13 +139,15 @@ fn is_string(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n \n fn is_add(cx: &LateContext<'_, '_>, src: &Expr, target: &Expr) -> bool {\n     match src.node {\n-        ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) => SpanlessEq::new(cx).eq_expr(target, left),\n+        ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Add, ..\n+            },\n+            ref left,\n+            _,\n+        ) => SpanlessEq::new(cx).eq_expr(target, left),\n         ExprKind::Block(ref block, _) => {\n-            block.stmts.is_empty()\n-                && block\n-                    .expr\n-                    .as_ref()\n-                    .map_or(false, |expr| is_add(cx, expr, target))\n+            block.stmts.is_empty() && block.expr.as_ref().map_or(false, |expr| is_add(cx, expr, target))\n         },\n         _ => false,\n     }\n@@ -162,7 +171,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n             if path.ident.name == \"as_bytes\" {\n                 if let ExprKind::Lit(ref lit) = args[0].node {\n                     if let LitKind::Str(ref lit_content, _) = lit.node {\n-                        if lit_content.as_str().chars().all(|c| c.is_ascii()) && !in_macro(args[0].span) {\n+                        let callsite = snippet(cx, args[0].span.source_callsite(), \"\");\n+                        let expanded = format!(\"\\\"{}\\\"\", lit_content.as_str());\n+                        if callsite.starts_with(\"include_str!\") {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                STRING_LIT_AS_BYTES,\n+                                e.span,\n+                                \"calling `as_bytes()` on `include_str!(..)`\",\n+                                \"consider using `include_bytes!(..)` instead\",\n+                                snippet(cx, args[0].span, r#\"\"foo\"\"#).replacen(\"include_str\", \"include_bytes\", 1),\n+                            );\n+                        } else if callsite == expanded\n+                            && lit_content.as_str().chars().all(|c| c.is_ascii())\n+                            && !in_macro(args[0].span)\n+                        {\n                             span_lint_and_sugg(\n                                 cx,\n                                 STRING_LIT_AS_BYTES,"}, {"sha": "6693776a961772ace9c659eafd2c243d1c766cb1", "filename": "tests/ui/strings.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c209fc9349ff750dc983ecfe23d8e0bb74f002df/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c209fc9349ff750dc983ecfe23d8e0bb74f002df/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=c209fc9349ff750dc983ecfe23d8e0bb74f002df", "patch": "@@ -10,10 +10,10 @@\n \n \n \n-\n #[warn(clippy::string_add)]\n #[allow(clippy::string_add_assign)]\n-fn add_only() { // ignores assignment distinction\n+fn add_only() {\n+    // ignores assignment distinction\n     let mut x = \"\".to_owned();\n \n     for _ in 1..3 {\n@@ -63,6 +63,8 @@ fn str_lit_as_bytes() {\n     let ubs = \"\u2603\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n+\n+    let includestr = include_str!(\"entry.rs\").as_bytes();\n }\n \n fn main() {\n@@ -72,6 +74,6 @@ fn main() {\n \n     // the add is only caught for `String`\n     let mut x = 1;\n-    ; x = x + 1;\n+;    x = x + 1;\n     assert_eq!(2, x);\n }"}, {"sha": "8a93733732eab06b9618a786e598f2962c62afc5", "filename": "tests/ui/strings.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c209fc9349ff750dc983ecfe23d8e0bb74f002df/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c209fc9349ff750dc983ecfe23d8e0bb74f002df/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=c209fc9349ff750dc983ecfe23d8e0bb74f002df", "patch": "@@ -60,17 +60,5 @@ error: calling `as_bytes()` on a string literal\n    |\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n-error: calling `as_bytes()` on a string literal\n-  --> $DIR/strings.rs:65:18\n-   |\n-65 |     let strify = stringify!(foobar).as_bytes();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `bstringify!(foobar)`\n-\n-error: manual implementation of an assign operation\n-  --> $DIR/strings.rs:75:7\n-   |\n-75 |     ; x = x + 1;\n-   |       ^^^^^^^^^ help: replace it with: `x += 1`\n-\n error: aborting due to 11 previous errors\n "}]}