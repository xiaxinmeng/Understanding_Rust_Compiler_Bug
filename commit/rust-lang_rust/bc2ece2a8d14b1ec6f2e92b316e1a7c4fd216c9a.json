{"sha": "bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMmVjZTJhOGQxNGIxZWM2ZjJlOTJiMzE2ZTFhN2M0ZmQyMTZjOWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-23T14:06:37Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-17T16:47:48Z"}, "message": "stop categorizing inference variables as diverging when created\n\nInstead, we now rely on the code that looks for a NeverToAny adjustment.", "tree": {"sha": "ce1a10cd43fa29688b3a2691fc0d800bb1f8989a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1a10cd43fa29688b3a2691fc0d800bb1f8989a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "html_url": "https://github.com/rust-lang/rust/commit/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "html_url": "https://github.com/rust-lang/rust/commit/1c004f2d438a33ddb6606a3c2c4d14e8340c8107"}], "stats": {"total": 80, "additions": 17, "deletions": 63}, "files": [{"sha": "8dd7e6af257fc53f1bf74d3ae4328f401af4d552", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "patch": "@@ -22,14 +22,14 @@\n // is also useful to track which value is the \"expected\" value in\n // terms of error reporting.\n \n+use super::equate::Equate;\n use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n use super::unify_key::replace_if_possible;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use super::{equate::Equate, type_variable::Diverging};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n \n use crate::traits::{Obligation, PredicateObligations};\n@@ -645,7 +645,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                                 .inner\n                                 .borrow_mut()\n                                 .type_variables()\n-                                .new_var(self.for_universe, Diverging::NotDiverging, origin);\n+                                .new_var(self.for_universe, origin);\n                             let u = self.tcx().mk_ty_var(new_var_id);\n \n                             // Record that we replaced `vid` with `new_var_id` as part of a generalization\n@@ -885,11 +885,12 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n                         let origin =\n                             *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n-                        let new_var_id = self.infcx.inner.borrow_mut().type_variables().new_var(\n-                            self.for_universe,\n-                            Diverging::NotDiverging,\n-                            origin,\n-                        );\n+                        let new_var_id = self\n+                            .infcx\n+                            .inner\n+                            .borrow_mut()\n+                            .type_variables()\n+                            .new_var(self.for_universe, origin);\n                         let u = self.tcx().mk_ty_var(new_var_id);\n                         debug!(\n                             \"ConstInferUnifier: replacing original vid={:?} with new={:?}\","}, {"sha": "73eb0d0c7826e03273b2efca8d7666f982cd02f8", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "patch": "@@ -46,7 +46,7 @@ use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, Veri\n use self::region_constraints::{\n     RegionConstraintCollector, RegionConstraintStorage, RegionSnapshot,\n };\n-use self::type_variable::{Diverging, TypeVariableOrigin, TypeVariableOriginKind};\n+use self::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n \n pub mod at;\n pub mod canonical;\n@@ -701,23 +701,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         t.fold_with(&mut self.freshener())\n     }\n \n-    /// Returns whether `ty` is a diverging type variable or not.\n-    /// (If `ty` is not a type variable at all, returns not diverging.)\n-    ///\n-    /// No attempt is made to resolve `ty`.\n-    pub fn type_var_diverges(&'a self, ty: Ty<'_>) -> Diverging {\n-        match *ty.kind() {\n-            ty::Infer(ty::TyVar(vid)) => self.ty_vid_diverges(vid),\n-            _ => Diverging::NotDiverging,\n-        }\n-    }\n-\n-    /// Returns true if the type inference variable `vid` was created\n-    /// as a diverging type variable. No attempt is made to resolve `vid`.\n-    pub fn ty_vid_diverges(&'a self, vid: ty::TyVid) -> Diverging {\n-        self.inner.borrow_mut().type_variables().var_diverges(vid)\n-    }\n-\n     /// Returns the origin of the type variable identified by `vid`, or `None`\n     /// if this is not a type variable.\n     ///\n@@ -1081,31 +1064,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.inner.borrow_mut().type_variables().num_vars()\n     }\n \n-    pub fn next_ty_var_id(&self, diverging: Diverging, origin: TypeVariableOrigin) -> TyVid {\n-        self.inner.borrow_mut().type_variables().new_var(self.universe(), diverging, origin)\n+    pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {\n+        self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)\n     }\n \n     pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n-        self.tcx.mk_ty_var(self.next_ty_var_id(Diverging::NotDiverging, origin))\n+        self.tcx.mk_ty_var(self.next_ty_var_id(origin))\n     }\n \n     pub fn next_ty_var_in_universe(\n         &self,\n         origin: TypeVariableOrigin,\n         universe: ty::UniverseIndex,\n     ) -> Ty<'tcx> {\n-        let vid = self.inner.borrow_mut().type_variables().new_var(\n-            universe,\n-            Diverging::NotDiverging,\n-            origin,\n-        );\n+        let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);\n         self.tcx.mk_ty_var(vid)\n     }\n \n-    pub fn next_diverging_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n-        self.tcx.mk_ty_var(self.next_ty_var_id(Diverging::Diverges, origin))\n-    }\n-\n     pub fn next_const_var(\n         &self,\n         ty: Ty<'tcx>,\n@@ -1217,7 +1192,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // as the substitutions for the default, `(T, U)`.\n                 let ty_var_id = self.inner.borrow_mut().type_variables().new_var(\n                     self.universe(),\n-                    Diverging::NotDiverging,\n                     TypeVariableOrigin {\n                         kind: TypeVariableOriginKind::TypeParameterDefinition(\n                             param.name,"}, {"sha": "73d74584a5e13db33c74ced5712e7d8b7427eed4", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "patch": "@@ -22,7 +22,6 @@\n //!   constituents)\n \n use crate::infer::combine::ConstEquateRelation;\n-use crate::infer::type_variable::Diverging;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use rustc_data_structures::fx::FxHashMap;\n@@ -927,8 +926,7 @@ where\n                             // Replacing with a new variable in the universe `self.universe`,\n                             // it will be unified later with the original type variable in\n                             // the universe `_universe`.\n-                            let new_var_id =\n-                                variables.new_var(self.universe, Diverging::NotDiverging, origin);\n+                            let new_var_id = variables.new_var(self.universe, origin);\n \n                             let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);"}, {"sha": "0e832685310d51b687d225f2fdb5139359f28383", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "patch": "@@ -139,13 +139,6 @@ pub enum TypeVariableOriginKind {\n \n pub(crate) struct TypeVariableData {\n     origin: TypeVariableOrigin,\n-    diverging: Diverging,\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub enum Diverging {\n-    NotDiverging,\n-    Diverges,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -195,14 +188,6 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n }\n \n impl<'tcx> TypeVariableTable<'_, 'tcx> {\n-    /// Returns the diverges flag given when `vid` was created.\n-    ///\n-    /// Note that this function does not return care whether\n-    /// `vid` has been unified with something else or not.\n-    pub fn var_diverges(&self, vid: ty::TyVid) -> Diverging {\n-        self.storage.values.get(vid.index()).diverging\n-    }\n-\n     /// Returns the origin that was given when `vid` was created.\n     ///\n     /// Note that this function does not return care whether\n@@ -264,21 +249,17 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     pub fn new_var(\n         &mut self,\n         universe: ty::UniverseIndex,\n-        diverging: Diverging,\n         origin: TypeVariableOrigin,\n     ) -> ty::TyVid {\n         let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });\n \n         let sub_key = self.sub_relations().new_key(());\n         assert_eq!(eq_key.vid, sub_key);\n \n-        let index = self.values().push(TypeVariableData { origin, diverging });\n+        let index = self.values().push(TypeVariableData { origin });\n         assert_eq!(eq_key.vid.as_u32(), index as u32);\n \n-        debug!(\n-            \"new_var(index={:?}, universe={:?}, diverging={:?}, origin={:?}\",\n-            eq_key.vid, universe, diverging, origin,\n-        );\n+        debug!(\"new_var(index={:?}, universe={:?}, origin={:?}\", eq_key.vid, universe, origin,);\n \n         eq_key.vid\n     }"}, {"sha": "88ce92c3ffec16f4e4fb3a6b3b1ccdc5084716aa", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=bc2ece2a8d14b1ec6f2e92b316e1a7c4fd216c9a", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 !self.typeck_results.borrow().adjustments().contains_key(expr.hir_id),\n                 \"expression with never type wound up being adjusted\"\n             );\n-            let adj_ty = self.next_diverging_ty_var(TypeVariableOrigin {\n+            let adj_ty = self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::AdjustmentType,\n                 span: expr.span,\n             });"}]}