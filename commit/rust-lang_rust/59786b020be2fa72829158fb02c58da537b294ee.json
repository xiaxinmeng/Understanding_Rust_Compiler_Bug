{"sha": "59786b020be2fa72829158fb02c58da537b294ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Nzg2YjAyMGJlMmZhNzI4MjkxNThmYjAyYzU4ZGE1MzdiMjk0ZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T22:37:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T21:52:18Z"}, "message": "use more inlining, and force some of it", "tree": {"sha": "39afdfc9cb496ef80f6cc784a4a748781662aa65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39afdfc9cb496ef80f6cc784a4a748781662aa65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59786b020be2fa72829158fb02c58da537b294ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59786b020be2fa72829158fb02c58da537b294ee", "html_url": "https://github.com/rust-lang/rust/commit/59786b020be2fa72829158fb02c58da537b294ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59786b020be2fa72829158fb02c58da537b294ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "html_url": "https://github.com/rust-lang/rust/commit/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "a5603ff6a62e7e28b0fd50c96749fd4c624bac70", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59786b020be2fa72829158fb02c58da537b294ee/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59786b020be2fa72829158fb02c58da537b294ee/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=59786b020be2fa72829158fb02c58da537b294ee", "patch": "@@ -950,7 +950,7 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n     }\n@@ -967,7 +967,7 @@ impl<T> ManuallyDrop<T> {\n     /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value\n     }\n@@ -1015,15 +1015,15 @@ impl<T: ?Sized> ManuallyDrop<T> {\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ?Sized> Deref for ManuallyDrop<T> {\n     type Target = T;\n-    #[inline]\n+    #[inline(always)]\n     fn deref(&self) -> &T {\n         &self.value\n     }\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n-    #[inline]\n+    #[inline(always)]\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.value\n     }\n@@ -1044,6 +1044,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n     }\n@@ -1053,6 +1054,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub const fn uninitialized() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n@@ -1066,6 +1068,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninitialized();\n         unsafe {\n@@ -1076,6 +1079,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn set(&mut self, val: T) {\n         unsafe {\n             self.value = ManuallyDrop::new(val);\n@@ -1091,6 +1095,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn into_inner(self) -> T {\n         ManuallyDrop::into_inner(self.value)\n     }\n@@ -1102,6 +1107,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n         &*self.value\n     }\n@@ -1113,20 +1119,23 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n         &mut *self.value\n     }\n \n     /// Get a pointer to the contained value. Reading from this pointer will be undefined\n     /// behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n         unsafe { &*self.value as *const T }\n     }\n \n     /// Get a mutable pointer to the contained value. Reading from this pointer will be undefined\n     /// behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         unsafe { &mut *self.value as *mut T }\n     }"}]}