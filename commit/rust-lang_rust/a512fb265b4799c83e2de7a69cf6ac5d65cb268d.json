{"sha": "a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MTJmYjI2NWI0Nzk5YzgzZTJkZTdhNjljZjZhYzVkNjVjYjI2OGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-26T20:31:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-26T20:31:29Z"}, "message": "oops", "tree": {"sha": "265a88e7f8defc69334b1676b3bb712c5276576f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265a88e7f8defc69334b1676b3bb712c5276576f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "html_url": "https://github.com/rust-lang/rust/commit/a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a512fb265b4799c83e2de7a69cf6ac5d65cb268d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b432f60afe6c7cbe765e04c5796e70ae012b7a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/b432f60afe6c7cbe765e04c5796e70ae012b7a36", "html_url": "https://github.com/rust-lang/rust/commit/b432f60afe6c7cbe765e04c5796e70ae012b7a36"}], "stats": {"total": 59, "additions": 0, "deletions": 59}, "files": [{"sha": "7f3b176b889c48be2be7ae323fe29dce1e6cc0e5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a512fb265b4799c83e2de7a69cf6ac5d65cb268d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512fb265b4799c83e2de7a69cf6ac5d65cb268d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "patch": "@@ -377,7 +377,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n     reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n     reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n-    reg.register_late_lint_pass(box misc::BareTraitLate);\n \n \n     reg.register_lint_group(\"clippy_restrictions\", vec!["}, {"sha": "04cc488d562bf5fbe7ffef2df55e76602b36940e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a512fb265b4799c83e2de7a69cf6ac5d65cb268d/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512fb265b4799c83e2de7a69cf6ac5d65cb268d/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a512fb265b4799c83e2de7a69cf6ac5d65cb268d", "patch": "@@ -636,61 +636,3 @@ fn check_cast(cx: &LateContext, span: Span, e: &Expr, ty: &Ty) {\n         }\n     }\n }\n-\n-declare_lint! {\n-    pub BARE_TRAIT_OBJECT,\n-    Warn,\n-    \"suggest using `dyn Trait` for trait objects\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct BareTraitLate;\n-\n-impl LintPass for BareTraitLate {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BARE_TRAIT_OBJECT)\n-    }\n-}\n-\n-use rustc::hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n-\n-struct TraitTyVisitor<'a, 'tcx: 'a> {\n-    cx: &'a LateContext<'a, 'tcx>\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for TraitTyVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &'tcx Ty) {\n-        println!(\"{:?}\", ty.node);\n-        if let TyPath(ref qpath) = ty.node {\n-            println!(\"{:?}\", qpath);\n-            let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n-            let def = self.cx.tables.qpath_def(qpath, hir_id);\n-            let t = self.cx.tcx.type_of(def.def_id());\n-            println!(\"{:?}\", t);\n-            if let ty::TyDynamic(..) = t.sty {\n-                let mut err = self.cx.struct_span_lint(BARE_TRAIT_OBJECT, ty.span,\n-                    \"Trait objects without an explicit `dyn` are deprecated\");\n-                let sugg = match self.cx.tcx.sess.codemap().span_to_snippet(ty.span) {\n-                    Ok(s) => format!(\"dyn {}\", s),\n-                    Err(_) => format!(\"dyn <type>\")\n-                };\n-                err.span_suggestion(ty.span, \"use `dyn`\", sugg);\n-                err.emit();\n-            }\n-        }\n-        walk_ty(self, ty)\n-    }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BareTraitLate {\n-    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty) {\n-        if !cx.sess().features.borrow().dyn_trait {\n-            return;\n-        }\n-        println!(\"toplevel {:?}\", ty);\n-        TraitTyVisitor { cx }.visit_ty(ty)\n-    }\n-}"}]}