{"sha": "3b82edd279e2055a65135a2469b3ad539c5665e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODJlZGQyNzllMjA1NWE2NTEzNWEyNDY5YjNhZDUzOWM1NjY1ZTM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-05T10:00:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Print braces only in print_ty mode", "tree": {"sha": "f954308dcd52be4b0ea06388c199a269bb548205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f954308dcd52be4b0ea06388c199a269bb548205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b82edd279e2055a65135a2469b3ad539c5665e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b82edd279e2055a65135a2469b3ad539c5665e3", "html_url": "https://github.com/rust-lang/rust/commit/3b82edd279e2055a65135a2469b3ad539c5665e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b82edd279e2055a65135a2469b3ad539c5665e3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "html_url": "https://github.com/rust-lang/rust/commit/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "b992e13daf0b9d7a0d3d2be1cf43d43cd97d0c5a", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3b82edd279e2055a65135a2469b3ad539c5665e3/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b82edd279e2055a65135a2469b3ad539c5665e3/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=3b82edd279e2055a65135a2469b3ad539c5665e3", "patch": "@@ -210,19 +210,16 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n-    /// Prints `{...}` around what `f` and optionally `t` print\n+    /// Prints `{...}` around what `f` (and optionally `t`) print\n     fn type_ascribed_value(\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        if print_ty {\n-            self.write_str(\": \")?;\n-            self = t(self)?;\n-        }\n+        self.write_str(\": \")?;\n+        self = t(self)?;\n         self.write_str(\"}\")?;\n         Ok(self)\n     }\n@@ -1003,14 +1000,15 @@ pub trait PrettyPrinter<'tcx>:\n             (Scalar::Raw { size: 0, .. }, _) => p!(print(ty)),\n             // Nontrivial types with scalar bit representation\n             (Scalar::Raw { data, size }, _) => {\n-                self = self.type_ascribed_value(\n-                    |mut this| {\n-                        write!(this, \"0x{:01$x}\", data, size as usize * 2)?;\n-                        Ok(this)\n-                    },\n-                    |this| this.print_type(ty),\n-                    print_ty,\n-                )?\n+                let print = |mut this: Self| {\n+                    write!(this, \"0x{:01$x}\", data, size as usize * 2)?;\n+                    Ok(this)\n+                };\n+                self = if print_ty {\n+                    self.type_ascribed_value(print, |this| this.print_type(ty))?\n+                } else {\n+                    print(self)?\n+                };\n             }\n             // Any pointer values not covered by a branch above\n             (Scalar::Ptr(p), _) => {\n@@ -1023,19 +1021,23 @@ pub trait PrettyPrinter<'tcx>:\n     /// This is overridden for MIR printing because we only want to hide alloc ids from users, not\n     /// from MIR where it is actually useful.\n     fn pretty_print_const_pointer(\n-        self,\n+        mut self,\n         _: Pointer,\n         ty: Ty<'tcx>,\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n-        self.type_ascribed_value(\n-            |mut this| {\n-                this.write_str(\"pointer\")?;\n-                Ok(this)\n-            },\n-            |this| this.print_type(ty),\n-            print_ty,\n-        )\n+        if print_ty {\n+            self.type_ascribed_value(\n+                |mut this| {\n+                    this.write_str(\"&_\")?;\n+                    Ok(this)\n+                },\n+                |this| this.print_type(ty),\n+            )\n+        } else {\n+            self.write_str(\"&_\")?;\n+            Ok(self)\n+        }\n     }\n \n     fn pretty_print_byte_str(mut self, byte_str: &'tcx [u8]) -> Result<Self::Const, Self::Error> {\n@@ -1430,16 +1432,13 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        if print_ty {\n-            self.write_str(\": \")?;\n-            let was_in_value = std::mem::replace(&mut self.in_value, false);\n-            self = t(self)?;\n-            self.in_value = was_in_value;\n-        }\n+        self.write_str(\": \")?;\n+        let was_in_value = std::mem::replace(&mut self.in_value, false);\n+        self = t(self)?;\n+        self.in_value = was_in_value;\n         self.write_str(\"}\")?;\n         Ok(self)\n     }\n@@ -1507,19 +1506,20 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         ty: Ty<'tcx>,\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n-        self.type_ascribed_value(\n-            |mut this| {\n-                define_scoped_cx!(this);\n-                if this.print_alloc_ids {\n-                    p!(write(\"{:?}\", p));\n-                } else {\n-                    p!(write(\"pointer\"));\n-                }\n-                Ok(this)\n-            },\n-            |this| this.print_type(ty),\n-            print_ty,\n-        )\n+        let print = |mut this: Self| {\n+            define_scoped_cx!(this);\n+            if this.print_alloc_ids {\n+                p!(write(\"{:?}\", p));\n+            } else {\n+                p!(write(\"&_\"));\n+            }\n+            Ok(this)\n+        };\n+        if print_ty {\n+            self.type_ascribed_value(print, |this| this.print_type(ty))\n+        } else {\n+            print(self)\n+        }\n     }\n }\n "}]}