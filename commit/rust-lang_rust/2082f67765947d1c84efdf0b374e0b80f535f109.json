{"sha": "2082f67765947d1c84efdf0b374e0b80f535f109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODJmNjc3NjU5NDdkMWM4NGVmZGYwYjM3NGUwYjgwZjUzNWYxMDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-23T18:15:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-23T22:15:30Z"}, "message": "Begin to support pattern matching on unique boxes\n\nIssue #409", "tree": {"sha": "42f5072c3741fd29e2c3d84a440a10f42a392ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f5072c3741fd29e2c3d84a440a10f42a392ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2082f67765947d1c84efdf0b374e0b80f535f109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2082f67765947d1c84efdf0b374e0b80f535f109", "html_url": "https://github.com/rust-lang/rust/commit/2082f67765947d1c84efdf0b374e0b80f535f109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2082f67765947d1c84efdf0b374e0b80f535f109/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87700adb2f42bd0751346c063390af33cb7e9e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87700adb2f42bd0751346c063390af33cb7e9e0f", "html_url": "https://github.com/rust-lang/rust/commit/87700adb2f42bd0751346c063390af33cb7e9e0f"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "105a7a85626b18549be7d1eda9d49fa6a6e319d1", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -665,6 +665,13 @@ fn pattern_roots(tcx: ty::ctxt, mut: option::t<unsafe_ty>, pat: @ast::pat)\n             };\n             walk(tcx, m ? some(contains(ty)) : mut, p, set);\n           }\n+          ast::pat_uniq(p) {\n+            let ty = ty::node_id_to_type(tcx, pat.id);\n+            let m = alt ty::struct(tcx, ty) {\n+              ty::ty_uniq(mt) { mt.mut != ast::imm }\n+            };\n+            walk(tcx, m ? some(contains(ty)) : mut, p, set);\n+          }\n         }\n     }\n     let set = [];"}, {"sha": "6d279b4f075d5a996235d1596919b75fde9d2e48", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -98,6 +98,12 @@ fn pattern_supersedes(tcx: ty::ctxt, a: @pat, b: @pat) -> bool {\n           _ { ret pattern_supersedes(tcx, suba, b); }\n         }\n       }\n+      pat_uniq(suba) {\n+        alt b.node {\n+          pat_uniq(subb) { ret pattern_supersedes(tcx, suba, subb); }\n+          _ { ret pattern_supersedes(tcx, suba, b); }\n+        }\n+      }\n     }\n }\n "}, {"sha": "6c1c2c92a0e388a524926b7da0f25c9b043ba841", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -176,6 +176,17 @@ fn enter_box(m: match, col: uint, val: ValueRef) -> match {\n     ret enter_match(m, col, val, bind e(dummy, _));\n }\n \n+fn enter_uniq(m: match, col: uint, val: ValueRef) -> match {\n+    let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n+    fn e(dummy: @ast::pat, p: @ast::pat) -> option::t<[@ast::pat]> {\n+        alt p.node {\n+          ast::pat_uniq(sub) { ret some([sub]); }\n+          _ { ret some([dummy]); }\n+        }\n+    }\n+    ret enter_match(m, col, val, bind e(dummy, _));\n+}\n+\n fn get_options(ccx: @crate_ctxt, m: match, col: uint) -> [opt] {\n     fn add_to_set(&set: [opt], val: opt) {\n         for l: opt in set { if opt_eq(l, val) { ret; } }\n@@ -249,6 +260,13 @@ fn any_box_pat(m: match, col: uint) -> bool {\n     ret false;\n }\n \n+fn any_uniq_pat(m: match, col: uint) -> bool {\n+    for br: match_branch in m {\n+        alt br.pats[col].node { ast::pat_uniq(_) { ret true; } _ { } }\n+    }\n+    ret false;\n+}\n+\n fn any_tup_pat(m: match, col: uint) -> bool {\n     for br: match_branch in m {\n         alt br.pats[col].node { ast::pat_tup(_) { ret true; } _ { } }\n@@ -386,6 +404,13 @@ fn compile_submatch(bcx: @block_ctxt, m: match, vals: [ValueRef], f: mk_fail,\n         ret;\n     }\n \n+    if any_uniq_pat(m, col) {\n+        let unboxed = Load(bcx, val);\n+        compile_submatch(bcx, enter_uniq(m, col, val),\n+                         [unboxed] + vals_left, f, exits);\n+        ret;\n+    }\n+\n     // Decide what kind of branch we need\n     let opts = get_options(ccx, m, col);\n     tag branch_kind { no_branch; single; switch; compare; }"}, {"sha": "3bc74662ca66f745fbabf78d12b20e5d9a5ffbab", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -1435,6 +1435,20 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           }\n         }\n       }\n+      ast::pat_uniq(inner) {\n+        alt structure_of(fcx, pat.span, expected) {\n+          ty::ty_uniq(e_inner) {\n+            check_pat(fcx, map, inner, e_inner.ty);\n+            write::ty_only_fixup(fcx, pat.id, expected);\n+          }\n+          _ {\n+            fcx.ccx.tcx.sess.span_fatal(pat.span,\n+                                        \"mismatched types: expected \" +\n+                                            ty_to_str(fcx.ccx.tcx, expected) +\n+                                            \" found uniq\");\n+          }\n+        }\n+      }\n     }\n }\n "}, {"sha": "b0793b76ca5b20b5321c747f1029fd1cfe352748", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -92,6 +92,7 @@ tag pat_ {\n     pat_rec([field_pat], bool);\n     pat_tup([@pat]);\n     pat_box(@pat);\n+    pat_uniq(@pat);\n }\n \n tag mutability { mut; imm; maybe_mut; }"}, {"sha": "4fd76c6a4c6b8fcaf9c98e768690afc213fa8c4c", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -69,6 +69,7 @@ iter pat_bindings(pat: @pat) -> @pat {\n         for elt in elts { for each b in pat_bindings(elt) { put b; } }\n       }\n       pat_box(sub) { for each b in pat_bindings(sub) { put b; } }\n+      pat_uniq(sub) { for each b in pat_bindings(sub) { put b; } }\n       pat_wild. | pat_lit(_) { }\n     }\n }"}, {"sha": "9745b774d8e414d8ff1d6caf260d4a8fe86f5509", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -291,6 +291,7 @@ fn noop_fold_pat(p: pat_, fld: ast_fold) -> pat_ {\n           }\n           pat_tup(elts) { pat_tup(vec::map(fld.fold_pat, elts)) }\n           pat_box(inner) { pat_box(fld.fold_pat(inner)) }\n+          pat_uniq(inner) { pat_uniq(fld.fold_pat(inner)) }\n         };\n }\n "}, {"sha": "a39189861753572f4e7d22f6cc237416ed57a5a7", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -1425,6 +1425,12 @@ fn parse_pat(p: parser) -> @ast::pat {\n         pat = ast::pat_box(sub);\n         hi = sub.span.hi;\n       }\n+      token::TILDE. {\n+        p.bump();\n+        let sub = parse_pat(p);\n+        pat = ast::pat_uniq(sub);\n+        hi = sub.span.hi;\n+      }\n       token::LBRACE. {\n         p.bump();\n         let fields = [];"}, {"sha": "8b1fa025cac0316fbf811258401207778b552b67", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -1113,6 +1113,7 @@ fn print_pat(s: ps, pat: @ast::pat) {\n         pclose(s);\n       }\n       ast::pat_box(inner) { word(s.s, \"@\"); print_pat(s, inner); }\n+      ast::pat_uniq(inner) { word(s.s, \"~\"); print_pat(s, inner); }\n     }\n     s.ann.post(ann_node);\n }"}, {"sha": "391c4c8405e46c9ea0c6016048ed094408cb5ba6", "filename": "src/test/run-pass/unique-pat.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Ftest%2Frun-pass%2Funique-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2082f67765947d1c84efdf0b374e0b80f535f109/src%2Ftest%2Frun-pass%2Funique-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat.rs?ref=2082f67765947d1c84efdf0b374e0b80f535f109", "patch": "@@ -0,0 +1,10 @@\n+fn simple() {\n+    alt ~true {\n+      ~true { }\n+      _ { fail; }\n+    }\n+}\n+\n+fn main() {\n+    simple();\n+}\n\\ No newline at end of file"}]}