{"sha": "325f46da06ccda82e465b0a1ba8449a04a89e601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNWY0NmRhMDZjY2RhODJlNDY1YjBhMWJhODQ0OWEwNGE4OWU2MDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T19:18:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T21:21:39Z"}, "message": "Move the calculation of the crate name, vers and cmh to a single function", "tree": {"sha": "c6e6a06115e15cb840ac7678b6ea7104fd5cc509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e6a06115e15cb840ac7678b6ea7104fd5cc509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/325f46da06ccda82e465b0a1ba8449a04a89e601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/325f46da06ccda82e465b0a1ba8449a04a89e601", "html_url": "https://github.com/rust-lang/rust/commit/325f46da06ccda82e465b0a1ba8449a04a89e601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/325f46da06ccda82e465b0a1ba8449a04a89e601/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c535d4aba65c75f5429ca030a59d9d60f797a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c535d4aba65c75f5429ca030a59d9d60f797a42", "html_url": "https://github.com/rust-lang/rust/commit/8c535d4aba65c75f5429ca030a59d9d60f797a42"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "e6ef2732660f2c5e2872f2671bb94a0b212829b6", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/325f46da06ccda82e465b0a1ba8449a04a89e601/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325f46da06ccda82e465b0a1ba8449a04a89e601/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=325f46da06ccda82e465b0a1ba8449a04a89e601", "patch": "@@ -275,6 +275,22 @@ mod write {\n  *    system linkers understand.\n  *\n  */\n+\n+type link_meta = rec(str name,\n+                     str vers,\n+                     str extras_hash);\n+\n+fn build_link_meta(&session::session sess, &ast::crate c,\n+                   &str output, sha1 sha) -> link_meta {\n+    auto meta_info = crate_link_metas(c);\n+\n+    auto name = crate_meta_name(sess, c, output);\n+    auto vers = crate_meta_vers(sess, c);\n+    auto extras_hash = crate_meta_extras_hash(sha, c);\n+\n+    ret rec(name = name, vers = vers, extras_hash = extras_hash);\n+}\n+\n type link_metas = rec(option::t[str] name,\n                       option::t[str] vers,\n                       vec[@ast::meta_item] cmh_items);\n@@ -385,8 +401,9 @@ fn get_symbol_hash(&@crate_ctxt ccx, &ty::t t) -> str {\n         case (some(?h)) { hash = h; }\n         case (none) {\n             hash =\n-                symbol_hash(ccx.tcx, ccx.sha, t, ccx.crate_meta_name,\n-                            ccx.crate_meta_extras_hash);\n+                symbol_hash(ccx.tcx, ccx.sha, t,\n+                            ccx.link_meta.name,\n+                            ccx.link_meta.extras_hash);\n             ccx.type_sha1s.insert(t, hash);\n         }\n     }\n@@ -413,7 +430,7 @@ fn exported_name(&vec[str] path, &str hash, &str vers) -> str {\n \n fn mangle_exported_name(&@crate_ctxt ccx, &vec[str] path, &ty::t t) -> str {\n     auto hash = get_symbol_hash(ccx, t);\n-    ret exported_name(path, hash, ccx.crate_meta_vers);\n+    ret exported_name(path, hash, ccx.link_meta.vers);\n }\n \n fn mangle_internal_name_by_type_only(&@crate_ctxt ccx, &ty::t t, &str name) ->"}, {"sha": "0f19d48da7c1b50570efcf1bdc5a784c4a2732a3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/325f46da06ccda82e465b0a1ba8449a04a89e601/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325f46da06ccda82e465b0a1ba8449a04a89e601/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=325f46da06ccda82e465b0a1ba8449a04a89e601", "patch": "@@ -62,9 +62,6 @@ import link::mangle_internal_name_by_seq;\n import link::mangle_internal_name_by_path;\n import link::mangle_internal_name_by_path_and_seq;\n import link::mangle_exported_name;\n-import link::crate_meta_name;\n-import link::crate_meta_vers;\n-import link::crate_meta_extras_hash;\n import metadata::tyencode;\n import metadata::creader;\n import metadata::decoder;\n@@ -132,9 +129,7 @@ type crate_ctxt =\n         ast_map::map ast_map,\n         hashmap[ast::node_id, str] item_symbols,\n         mutable option::t[ValueRef] main_fn,\n-        str crate_meta_name,\n-        str crate_meta_vers,\n-        str crate_meta_extras_hash,\n+        link::link_meta link_meta,\n \n         // TODO: hashmap[tup(tag_id,subtys), @tag_info]\n         hashmap[ty::t, uint] tag_sizes,\n@@ -7270,7 +7265,7 @@ fn new_local_ctxt(&@crate_ctxt ccx) -> @local_ctxt {\n     let vec[ast::ty_param] obj_typarams = [];\n     let vec[ast::obj_field] obj_fields = [];\n     ret @rec(path=pth,\n-             module_path=[ccx.crate_meta_name],\n+             module_path=[ccx.link_meta.name],\n              obj_typarams=obj_typarams,\n              obj_fields=obj_fields,\n              ccx=ccx);\n@@ -8522,7 +8517,7 @@ fn create_crate_map(&@crate_ctxt ccx) -> ValueRef {\n     vec::push[ValueRef](subcrates, C_int(0));\n     auto mapname;\n     if (ccx.sess.get_opts().shared) {\n-        mapname = ccx.crate_meta_name;\n+        mapname = ccx.link_meta.name;\n     } else { mapname = \"toplevel\"; }\n     auto sym_name = \"_rust_crate_map_\" + mapname;\n     auto arrtype = T_array(T_int(), vec::len[ValueRef](subcrates));\n@@ -8578,9 +8573,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n              ast_map=amap,\n              item_symbols=new_int_hash[str](),\n              mutable main_fn=none[ValueRef],\n-             crate_meta_name=crate_meta_name(sess, *crate, output),\n-             crate_meta_vers=crate_meta_vers(sess, *crate),\n-             crate_meta_extras_hash=crate_meta_extras_hash(sha, *crate),\n+             link_meta=link::build_link_meta(sess, *crate, output, sha),\n              tag_sizes=tag_sizes,\n              discrims=new_int_hash[ValueRef](),\n              discrim_symbols=new_int_hash[str](),"}]}