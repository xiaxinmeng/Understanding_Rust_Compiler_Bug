{"sha": "c08902b084081867ee437d621e605d231d2ba109", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODkwMmIwODQwODE4NjdlZTQzN2Q2MjFlNjA1ZDIzMWQyYmExMDk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-19T15:21:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-26T21:14:28Z"}, "message": "Prevent deprecation warning for items deprecated in the future", "tree": {"sha": "af9e0e95d1154f036954dae005f2dbe95d18b8a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9e0e95d1154f036954dae005f2dbe95d18b8a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08902b084081867ee437d621e605d231d2ba109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08902b084081867ee437d621e605d231d2ba109", "html_url": "https://github.com/rust-lang/rust/commit/c08902b084081867ee437d621e605d231d2ba109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08902b084081867ee437d621e605d231d2ba109/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "html_url": "https://github.com/rust-lang/rust/commit/ab8b961677ac5c74762dcea955aa0ff4d7fe4915"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "652920f95c3cb165ead7b96aeb03120a293b909c", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c08902b084081867ee437d621e605d231d2ba109/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08902b084081867ee437d621e605d231d2ba109/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c08902b084081867ee437d621e605d231d2ba109", "patch": "@@ -559,9 +559,41 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n+                fn deprecation_in_effect(since: Option<&str>, rustc: Option<&str>) -> bool {\n+                    fn parse_version(ver: &str) -> Vec<u32> {\n+                        // We ignore non-integer components of the version (e.g. \"nightly\").\n+                        ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n+                    }\n+\n+                    if since.is_none() || rustc.is_none() {\n+                        // By default, a deprecation warning applies to\n+                        // the current version of the compiler.\n+                        true\n+                    } else {\n+                        let since: Vec<u32> = parse_version(since.unwrap());\n+                        let rustc: Vec<u32> = parse_version(rustc.unwrap());\n+                        // We simply treat invalid `since` attributes as relating to a previous\n+                        // Rust version, thus always displaying the warning.\n+                        if since.len() != 3 {\n+                            return true;\n+                        }\n+                        since <= rustc\n+                    }\n+                }\n+\n+                // If the deprecation is scheduled for a future Rust\n+                // version, then we should display no warning message.\n+                let deprecated_in_future_version = if let Some(sym) = depr_entry.attr.since {\n+                    let since = sym.as_str();\n+                    !deprecation_in_effect(Some(since.as_ref()), option_env!(\"CFG_RELEASE\"))\n+                } else {\n+                    false\n+                };\n+\n                 let parent_def_id = self.hir.local_def_id(self.hir.get_parent(id));\n-                let skip = self.lookup_deprecation_entry(parent_def_id)\n-                    .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n+                let skip = deprecated_in_future_version ||\n+                           self.lookup_deprecation_entry(parent_def_id)\n+                               .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n                 if !skip {\n                     lint_deprecated(def_id, id, depr_entry.attr.note);\n                 }"}]}