{"sha": "561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MWQwODg0ZTU1NjM1NjllNmU1YzZiOWE3MmI3YjdkMGJkNDQzMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-24T06:58:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-24T06:58:25Z"}, "message": "Auto merge of #30000 - Manishearth:unreachable-call, r=nrc\n\nFixes #1889", "tree": {"sha": "5515e586a56ff7fa5fc694c62bf16156bbac2e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5515e586a56ff7fa5fc694c62bf16156bbac2e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "html_url": "https://github.com/rust-lang/rust/commit/561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f96b2445db675e343b8e795faecacdee0d29cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f96b2445db675e343b8e795faecacdee0d29cc", "html_url": "https://github.com/rust-lang/rust/commit/92f96b2445db675e343b8e795faecacdee0d29cc"}, {"sha": "7fbcb51589a9d10a2b3ec227611b31b7384b5370", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbcb51589a9d10a2b3ec227611b31b7384b5370", "html_url": "https://github.com/rust-lang/rust/commit/7fbcb51589a9d10a2b3ec227611b31b7384b5370"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "bac85e4b7001e13d8cf90e5d34efa766739635d3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "patch": "@@ -2490,6 +2490,8 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // of arguments when we typecheck the functions. This isn't really the\n     // right way to do this.\n     let xs = [false, true];\n+    let mut any_diverges = false; // has any of the arguments diverged?\n+    let mut warned = false; // have we already warned about unreachable code?\n     for check_blocks in &xs {\n         let check_blocks = *check_blocks;\n         debug!(\"check_blocks={}\", check_blocks);\n@@ -2512,6 +2514,16 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             supplied_arg_count\n         };\n         for (i, arg) in args.iter().take(t).enumerate() {\n+            if any_diverges && !warned {\n+                fcx.ccx\n+                    .tcx\n+                    .sess\n+                    .add_lint(lint::builtin::UNREACHABLE_CODE,\n+                              arg.id,\n+                              arg.span,\n+                              \"unreachable expression\".to_string());\n+                warned = true;\n+            }\n             let is_block = match arg.node {\n                 hir::ExprClosure(..) => true,\n                 _ => false\n@@ -2542,7 +2554,23 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     coerce_ty.map(|ty| demand::suptype(fcx, arg.span, formal_ty, ty));\n                 });\n             }\n+\n+            if let Some(&arg_ty) = fcx.inh.tables.borrow().node_types.get(&arg.id) {\n+                any_diverges = any_diverges || fcx.infcx().type_var_diverges(arg_ty);\n+            }\n+        }\n+        if any_diverges && !warned {\n+            let parent = fcx.ccx.tcx.map.get_parent_node(args[0].id);\n+            fcx.ccx\n+                .tcx\n+                .sess\n+                .add_lint(lint::builtin::UNREACHABLE_CODE,\n+                          parent,\n+                          sp,\n+                          \"unreachable call\".to_string());\n+            warned = true;\n         }\n+\n     }\n \n     // We also need to make sure we at least write the ty of the other"}, {"sha": "55f0fa5675ac84d10250bb82b27f5c2698c73d01", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "patch": "@@ -678,9 +678,9 @@ impl<'a> ExtCtxt<'a> {\n     pub fn bt_push(&mut self, ei: ExpnInfo) {\n         self.recursion_count += 1;\n         if self.recursion_count > self.ecfg.recursion_limit {\n-            panic!(self.span_fatal(ei.call_site,\n+            self.span_fatal(ei.call_site,\n                             &format!(\"recursion limit reached while expanding the macro `{}`\",\n-                                    ei.callee.name())));\n+                                    ei.callee.name()));\n         }\n \n         let mut call_site = ei.call_site;"}, {"sha": "23d6b794a72c5c99c4ed470d448bee14b52ffb8c", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "patch": "@@ -209,12 +209,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 best_fail_msg = (*msg).clone();\n             },\n             Error(err_sp, ref msg) => {\n-                panic!(cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..]))\n+                cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..])\n             }\n         }\n     }\n \n-    panic!(cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]));\n+     cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]);\n }\n \n // Note that macro-by-example's input is also matched against a token tree:"}, {"sha": "5a3257d54db21a37203e66801c2cf3195030bc11", "filename": "src/test/compile-fail/unreachable-in-call.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d0884e5563569e6e5c6b9a72b7b7d0bd44302/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs?ref=561d0884e5563569e6e5c6b9a72b7b7d0bd44302", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+#![deny(unreachable_code)]\n+\n+fn diverge() -> ! { panic!() }\n+\n+fn get_u8() -> u8 {\n+    1\n+}\n+fn call(_: u8, _: u8) {\n+\n+}\n+fn diverge_first() {\n+    call(diverge(),\n+         get_u8()); //~ ERROR unreachable expression\n+}\n+fn diverge_second() {\n+    call( //~ ERROR unreachable call\n+        get_u8(),\n+        diverge());\n+}\n+\n+fn main() {}"}]}