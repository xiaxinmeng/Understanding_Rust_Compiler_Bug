{"sha": "ade807c6dcf6dc4454732c5e914ca06ebb429773", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZTgwN2M2ZGNmNmRjNDQ1NDczMmM1ZTkxNGNhMDZlYmI0Mjk3NzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-12T02:33:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-14T17:45:37Z"}, "message": "rustc: Obsolete the `@` syntax entirely\n\nThis removes all remnants of `@` pointers from rustc. Additionally, this removes\nthe `GC` structure from the prelude as it seems odd exporting an experimental\ntype in the prelude by default.\n\nCloses #14193\n[breaking-change]", "tree": {"sha": "64606dac9c81ec4567e19f503d4d82e249dbf40a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64606dac9c81ec4567e19f503d4d82e249dbf40a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade807c6dcf6dc4454732c5e914ca06ebb429773", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade807c6dcf6dc4454732c5e914ca06ebb429773", "html_url": "https://github.com/rust-lang/rust/commit/ade807c6dcf6dc4454732c5e914ca06ebb429773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade807c6dcf6dc4454732c5e914ca06ebb429773/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f20b1293fcce4e120bd4a57226e0817271cd672c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f20b1293fcce4e120bd4a57226e0817271cd672c", "html_url": "https://github.com/rust-lang/rust/commit/f20b1293fcce4e120bd4a57226e0817271cd672c"}], "stats": {"total": 1477, "additions": 919, "deletions": 558}, "files": [{"sha": "d7b092b9c1c7b4e4ef783406ddc5422863fd0fdb", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -419,6 +419,7 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n mod tests {\n     use std::fmt::Show;\n     use std::prelude::*;\n+    use std::gc::{GC, Gc};\n     use test::Bencher;\n     use test;\n \n@@ -473,10 +474,10 @@ mod tests {\n \n     #[test]\n     fn test_boxes() {\n-        let a: @int = @5;\n-        let b: @int = @72;\n-        let c: @int = @64;\n-        let d: @int = @175;\n+        let a: Gc<int> = box(GC) 5;\n+        let b: Gc<int> = box(GC) 72;\n+        let c: Gc<int> = box(GC) 64;\n+        let d: Gc<int> = box(GC) 175;\n \n         let mut deq = RingBuf::new();\n         assert_eq!(deq.len(), 0);\n@@ -621,7 +622,8 @@ mod tests {\n \n     #[test]\n     fn test_param_at_int() {\n-        test_parameterized::<@int>(@5, @72, @64, @175);\n+        test_parameterized::<Gc<int>>(box(GC) 5, box(GC) 72,\n+                                      box(GC) 64, box(GC) 175);\n     }\n \n     #[test]"}, {"sha": "32c47d36bed9954175fa524a215c0898fb2f13df", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -2345,6 +2345,7 @@ mod tests {\n     use num;\n     use realstd::vec::Vec;\n     use realstd::slice::Vector;\n+    use realstd::gc::GC;\n \n     use cmp;\n     use realstd::owned::Box;\n@@ -2835,7 +2836,8 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_rposition_fail() {\n-        let v = [(box 0, @0), (box 0, @0), (box 0, @0), (box 0, @0)];\n+        let v = [(box 0, box(GC) 0), (box 0, box(GC) 0),\n+                 (box 0, box(GC) 0), (box 0, box(GC) 0)];\n         let mut i = 0;\n         v.iter().rposition(|_elt| {\n             if i == 2 {"}, {"sha": "cd94829f3540e1fb03d4b99b73ace0770f545694", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,6 +18,7 @@ Runtime type reflection\n \n use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n use std::mem;\n+use std::gc::Gc;\n \n /**\n  * Trait for visitor that wishes to reflect on data.\n@@ -219,9 +220,9 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n-        self.align_to::<@u8>();\n+        self.align_to::<Gc<u8>>();\n         if ! self.inner.visit_box(mtbl, inner) { return false; }\n-        self.bump_past::<@u8>();\n+        self.bump_past::<Gc<u8>>();\n         true\n     }\n "}, {"sha": "d6ae23c6d9acda3392df11180f78ffd21a71f7c1", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -288,7 +288,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n                         _align: uint) -> bool { fail!(); }\n \n     fn visit_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n-        try!(self, self.writer.write(['@' as u8]));\n+        try!(self, self.writer.write(\"box(GC) \".as_bytes()));\n         self.write_mut_qualifier(mtbl);\n         self.get::<&raw::Box<()>>(|this, b| {\n             let p = &b.data as *() as *u8;\n@@ -591,6 +591,7 @@ fn test_repr() {\n     use std::io::stdio::println;\n     use std::char::is_alphabetic;\n     use std::mem::swap;\n+    use std::gc::GC;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();\n@@ -605,7 +606,7 @@ fn test_repr() {\n     exact_test(&1.234, \"1.234f64\");\n     exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n \n-    exact_test(&(@10), \"@10\");\n+    exact_test(&(box(GC) 10), \"box(GC) 10\");\n     exact_test(&(box 10), \"box 10\");\n     exact_test(&(&10), \"&10\");\n     let mut x = 10;\n@@ -619,8 +620,8 @@ fn test_repr() {\n                \"&[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(P{a:10, b:1.234}),\n                \"repr::P{a: 10, b: 1.234f64}\");\n-    exact_test(&(@P{a:10, b:1.234}),\n-               \"@repr::P{a: 10, b: 1.234f64}\");\n+    exact_test(&(box(GC) P{a:10, b:1.234}),\n+               \"box(GC) repr::P{a: 10, b: 1.234f64}\");\n     exact_test(&(box P{a:10, b:1.234}),\n                \"box repr::P{a: 10, b: 1.234f64}\");\n "}, {"sha": "2d760bbad7728f2c45d94dc72253135cacd1cdfc", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -63,6 +63,8 @@ use syntax::parse::token;\n use syntax::parse::token::InternedString;\n use rustc::plugin::Registry;\n \n+use std::gc::Gc;\n+\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"fourcc\", expand_syntax_ext);\n@@ -130,7 +132,8 @@ struct Ident {\n     span: Span\n }\n \n-fn parse_tts(cx: &ExtCtxt, tts: &[ast::TokenTree]) -> (@ast::Expr, Option<Ident>) {\n+fn parse_tts(cx: &ExtCtxt,\n+             tts: &[ast::TokenTree]) -> (Gc<ast::Expr>, Option<Ident>) {\n     let p = &mut parse::new_parser_from_tts(cx.parse_sess(),\n                                             cx.cfg(),\n                                             tts.iter()"}, {"sha": "5451e4fc18cfef645fe75cca5db2b5c5c43a9a5f", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -57,6 +57,8 @@ use syntax::parse;\n use syntax::parse::token;\n use rustc::plugin::Registry;\n \n+use std::gc::Gc;\n+\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"hexfloat\", expand_syntax_ext);\n@@ -163,7 +165,8 @@ struct Ident {\n     span: Span\n }\n \n-fn parse_tts(cx: &ExtCtxt, tts: &[ast::TokenTree]) -> (@ast::Expr, Option<Ident>) {\n+fn parse_tts(cx: &ExtCtxt,\n+             tts: &[ast::TokenTree]) -> (Gc<ast::Expr>, Option<Ident>) {\n     let p = &mut parse::new_parser_from_tts(cx.parse_sess(),\n                                             cx.cfg(),\n                                             tts.iter()"}, {"sha": "8641936cc34ab3b143fef08cb468d84c77938f42", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -26,6 +26,7 @@ extern crate syntax;\n extern crate rustc;\n \n use std::rc::Rc;\n+use std::gc::{Gc, GC};\n \n use syntax::ast;\n use syntax::codemap;\n@@ -110,7 +111,7 @@ struct NfaGen<'a> {\n }\n \n impl<'a> NfaGen<'a> {\n-    fn code(&mut self) -> @ast::Expr {\n+    fn code(&mut self) -> Gc<ast::Expr> {\n         // Most or all of the following things are used in the quasiquoted\n         // expression returned.\n         let num_cap_locs = 2 * self.prog.num_captures();\n@@ -331,7 +332,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n     // Generates code for the `add` method, which is responsible for adding\n     // zero-width states to the next queue of states to visit.\n-    fn add_insts(&self) -> @ast::Expr {\n+    fn add_insts(&self) -> Gc<ast::Expr> {\n         let arms = self.prog.insts.iter().enumerate().map(|(pc, inst)| {\n             let nextpc = pc + 1;\n             let body = match *inst {\n@@ -432,7 +433,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n     // Generates the code for the `step` method, which processes all states\n     // in the current queue that consume a single character.\n-    fn step_insts(&self) -> @ast::Expr {\n+    fn step_insts(&self) -> Gc<ast::Expr> {\n         let arms = self.prog.insts.iter().enumerate().map(|(pc, inst)| {\n             let nextpc = pc + 1;\n             let body = match *inst {\n@@ -523,7 +524,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n     // Translates a character class into a match expression.\n     // This avoids a binary search (and is hopefully replaced by a jump\n     // table).\n-    fn match_class(&self, casei: bool, ranges: &[(char, char)]) -> @ast::Expr {\n+    fn match_class(&self, casei: bool, ranges: &[(char, char)]) -> Gc<ast::Expr> {\n         let expr_true = quote_expr!(self.cx, true);\n \n         let mut arms = ranges.iter().map(|&(mut start, mut end)| {\n@@ -545,7 +546,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n     // Generates code for checking a literal prefix of the search string.\n     // The code is only generated if the regex *has* a literal prefix.\n     // Otherwise, a no-op is returned.\n-    fn check_prefix(&self) -> @ast::Expr {\n+    fn check_prefix(&self) -> Gc<ast::Expr> {\n         if self.prog.prefix.len() == 0 {\n             self.empty_block()\n         } else {\n@@ -569,28 +570,28 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n     // A wild-card arm is automatically added that executes a no-op. It will\n     // never be used, but is added to satisfy the compiler complaining about\n     // non-exhaustive patterns.\n-    fn match_insts(&self, mut arms: Vec<ast::Arm>) -> @ast::Expr {\n+    fn match_insts(&self, mut arms: Vec<ast::Arm>) -> Gc<ast::Expr> {\n         arms.push(self.wild_arm_expr(self.empty_block()));\n         self.cx.expr_match(self.sp, quote_expr!(self.cx, pc), arms)\n     }\n \n-    fn empty_block(&self) -> @ast::Expr {\n+    fn empty_block(&self) -> Gc<ast::Expr> {\n         quote_expr!(self.cx, {})\n     }\n \n     // Creates a match arm for the instruction at `pc` with the expression\n     // `body`.\n-    fn arm_inst(&self, pc: uint, body: @ast::Expr) -> ast::Arm {\n+    fn arm_inst(&self, pc: uint, body: Gc<ast::Expr>) -> ast::Arm {\n         let pc_pat = self.cx.pat_lit(self.sp, quote_expr!(self.cx, $pc));\n \n         self.cx.arm(self.sp, vec!(pc_pat), body)\n     }\n \n     // Creates a wild-card match arm with the expression `body`.\n-    fn wild_arm_expr(&self, body: @ast::Expr) -> ast::Arm {\n+    fn wild_arm_expr(&self, body: Gc<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n             attrs: vec!(),\n-            pats: vec!(@ast::Pat{\n+            pats: vec!(box(GC) ast::Pat{\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.sp,\n                 node: ast::PatWild,\n@@ -603,8 +604,9 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n     // Converts `xs` to a `[x1, x2, .., xN]` expression by calling `to_expr`\n     // on each element in `xs`.\n-    fn vec_expr<T, It: Iterator<T>>(&self, xs: It, to_expr: |&ExtCtxt, T| -> @ast::Expr)\n-                  -> @ast::Expr {\n+    fn vec_expr<T, It: Iterator<T>>(&self, xs: It,\n+                                    to_expr: |&ExtCtxt, T| -> Gc<ast::Expr>)\n+                  -> Gc<ast::Expr> {\n         let exprs = xs.map(|x| to_expr(self.cx, x)).collect();\n         self.cx.expr_vec(self.sp, exprs)\n     }"}, {"sha": "2fa0ab9072c226f3ef566ba0cab6e37c5d4187e1", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,7 +12,7 @@ use syntax::fold::Folder;\n use syntax::{ast, fold, attr};\n use syntax::codemap;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n struct Context<'a> {\n     in_cfg: |attrs: &[ast::Attribute]|: 'a -> bool,"}, {"sha": "bdb884cc822056b6acb5054c8457277a616f8833", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -23,7 +23,7 @@ use syntax::parse::token;\n use syntax::util::small_vector::SmallVector;\n \n use std::mem;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n pub static VERSION: &'static str = \"0.11.0-pre\";\n "}, {"sha": "d33b76ae08c5ede9b9b1d9329beb5d3c86e02624", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,7 +18,7 @@ use front::config;\n use front::std_inject::with_version;\n \n use std::cell::RefCell;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::slice;\n use std::vec;\n use syntax::ast_util::*;"}, {"sha": "c7524c11188bc4f35725d8fa53acc271d2383708", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -40,7 +40,7 @@ use libc;\n use std::io::Seek;\n use std::io::MemWriter;\n use std::mem;\n-use std::string::String;\n+use std::gc::GC;\n \n use serialize::ebml::reader;\n use serialize::ebml;"}, {"sha": "44d722c209490d27abe6a2bba00f43df30f6b891", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -23,6 +23,7 @@ use util::ppaux::{note_and_explain_region, Repr, UserString};\n use std::cell::{Cell};\n use std::ops::{BitOr, BitAnd};\n use std::rc::Rc;\n+use std::gc::{Gc, GC};\n use std::string::String;\n use syntax::ast;\n use syntax::ast_map;\n@@ -70,7 +71,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n                    krate: &ast::Crate) {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n-        stats: @BorrowStats {\n+        stats: box(GC) BorrowStats {\n             loaned_paths_same: Cell::new(0),\n             loaned_paths_imm: Cell::new(0),\n             stable_paths: Cell::new(0),\n@@ -155,7 +156,7 @@ pub struct BorrowckCtxt<'a> {\n     tcx: &'a ty::ctxt,\n \n     // Statistics:\n-    stats: @BorrowStats\n+    stats: Gc<BorrowStats>,\n }\n \n pub struct BorrowStats {"}, {"sha": "d8f7a97ce13ff8d67daeb57fa3fdfdf7b24ea2b8", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -19,7 +19,7 @@ use middle::ty;\n use util::ppaux::ty_to_str;\n \n use std::cmp;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::iter;\n use syntax::ast::*;\n use syntax::ast_util::{is_unguarded, walk_pat};"}, {"sha": "33949ee5b1644a91855be8f450873519abcc2328", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -123,7 +123,7 @@ impl<'a> Visitor<bool> for CheckStaticVisitor<'a> {\n             ast::ExprUnary(ast::UnUniq, _) |\n             ast::ExprVstore(_, ast::ExprVstoreUniq) => {\n                 self.tcx.sess.span_err(e.span,\n-                                   \"static items are not allowed to have owned pointers\");\n+                                   \"static items are not allowed to have custom pointers\");\n             }\n             _ => {\n                 let node_ty = ty::node_id_to_type(self.tcx, e.id);"}, {"sha": "1a3cb166750142546bcb1d3196cbd16820ec7211", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -245,9 +245,12 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n     check_bounds_on_type_parameters(cx, e);\n \n     match e.node {\n-        ExprUnary(UnBox, ref interior) => {\n-            let interior_type = ty::expr_ty(cx.tcx, &**interior);\n-            let _ = check_static(cx.tcx, interior_type, interior.span);\n+        ExprBox(ref loc, ref interior) => {\n+            let def = ty::resolve_expr(cx.tcx, &**loc);\n+            if Some(def.def_id()) == cx.tcx.lang_items.managed_heap() {\n+                let interior_type = ty::expr_ty(cx.tcx, &**interior);\n+                let _ = check_static(cx.tcx, interior_type, interior.span);\n+            }\n         }\n         ExprCast(ref source, _) => {\n             let source_ty = ty::expr_ty(cx.tcx, &**source);"}, {"sha": "795c292b981f217056146b32d0ede66d5478ca5e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -35,7 +35,7 @@ use syntax::visit::Visitor;\n \n use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::mem::replace;\n use std::rc::{Rc, Weak};\n use std::uint;"}, {"sha": "9361d64250ca8f70293376aa78d5907cc9e51742", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -226,7 +226,7 @@ use util::ppaux::{Repr, vec_map_to_str};\n use std::collections::HashMap;\n use std::cell::Cell;\n use std::rc::Rc;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use syntax::ast;\n use syntax::ast::Ident;\n use syntax::ast_util::path_to_ident;"}, {"sha": "40d9543e669dff32210a8cf7c7205754135102e0", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -60,6 +60,7 @@ time of error detection.\n */\n \n use std::collections::HashSet;\n+use std::gc::GC;\n use middle::def;\n use middle::subst;\n use middle::ty;"}, {"sha": "7ef1f52c949e527bd716cbcef473be6c1fabb7b6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::ty;\n \n use std::rc::Rc;\n use std::u32;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n use core;\n use doctree;"}, {"sha": "061798cb23e57f112f021d75834dcfcc857c348b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,6 +18,7 @@ use syntax::parse::token;\n use syntax;\n \n use std::cell::RefCell;\n+use std::gc::GC;\n use std::os;\n use std::collections::{HashMap, HashSet};\n "}, {"sha": "411521fa0dbda0e039a050c7e319d68faccc5ae4", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,13 @@\n \n use std::cell::RefCell;\n use std::char;\n-use std::io;\n+use std::dynamic_lib::DynamicLibrary;\n+use std::gc::GC;\n use std::io::{Command, TempDir};\n+use std::io;\n use std::os;\n use std::str;\n use std::string::String;\n-use std::dynamic_lib::DynamicLibrary;\n \n use std::collections::{HashSet, HashMap};\n use testing;"}, {"sha": "00fe0134f00ee356907c2f725e4f7adf4116c9cb", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,7 +18,7 @@ use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n use core;\n use doctree::*;"}, {"sha": "215c0992bc022305b13b4a179a7d9fac1522fee3", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -274,6 +274,7 @@ impl<T: 'static> Drop for Ref<T> {\n #[cfg(test)]\n mod tests {\n     use std::prelude::*;\n+    use std::gc::{Gc, GC};\n     use super::*;\n     use std::task;\n \n@@ -329,25 +330,25 @@ mod tests {\n     #[test]\n     fn test_tls_multiple_types() {\n         static str_key: Key<String> = &Key;\n-        static box_key: Key<@()> = &Key;\n+        static box_key: Key<Gc<()>> = &Key;\n         static int_key: Key<int> = &Key;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(@()));\n+            box_key.replace(Some(box(GC) ()));\n             int_key.replace(Some(42));\n         });\n     }\n \n     #[test]\n     fn test_tls_overwrite_multiple_types() {\n         static str_key: Key<String> = &Key;\n-        static box_key: Key<@()> = &Key;\n+        static box_key: Key<Gc<()>> = &Key;\n         static int_key: Key<int> = &Key;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n             str_key.replace(Some(\"string data 2\".to_string()));\n-            box_key.replace(Some(@()));\n-            box_key.replace(Some(@()));\n+            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box(GC) ()));\n             int_key.replace(Some(42));\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n@@ -360,13 +361,13 @@ mod tests {\n     #[should_fail]\n     fn test_tls_cleanup_on_failure() {\n         static str_key: Key<String> = &Key;\n-        static box_key: Key<@()> = &Key;\n+        static box_key: Key<Gc<()>> = &Key;\n         static int_key: Key<int> = &Key;\n         str_key.replace(Some(\"parent data\".to_string()));\n-        box_key.replace(Some(@()));\n+        box_key.replace(Some(box(GC) ()));\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(@()));\n+            box_key.replace(Some(box(GC) ()));\n             int_key.replace(Some(42));\n             fail!();\n         });"}, {"sha": "d09033e771cf7d5813e3b93932658cc5c1e6cb57", "filename": "src/librustrt/local_heap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_heap.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -317,14 +317,15 @@ pub unsafe fn local_free(ptr: *u8) {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n+    use std::gc::GC;\n \n     #[bench]\n     fn alloc_managed_small(b: &mut Bencher) {\n-        b.iter(|| { @10; });\n+        b.iter(|| { box(GC) 10 });\n     }\n \n     #[bench]\n     fn alloc_managed_big(b: &mut Bencher) {\n-        b.iter(|| { @([10, ..1000]); });\n+        b.iter(|| { box(GC) ([10, ..1000]) });\n     }\n }"}, {"sha": "e99703a1f58bc6745e7b16779e1dafff4203e1a4", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -397,22 +397,23 @@ mod test {\n     use super::*;\n     use std::prelude::*;\n     use std::task;\n+    use std::gc::{Gc, GC};\n \n     #[test]\n     fn local_heap() {\n-        let a = @5;\n+        let a = box(GC) 5;\n         let b = a;\n         assert!(*a == 5);\n         assert!(*b == 5);\n     }\n \n     #[test]\n     fn tls() {\n-        local_data_key!(key: @String)\n-        key.replace(Some(@\"data\".to_string()));\n+        local_data_key!(key: Gc<String>)\n+        key.replace(Some(box(GC) \"data\".to_string()));\n         assert_eq!(key.get().unwrap().as_slice(), \"data\");\n-        local_data_key!(key2: @String)\n-        key2.replace(Some(@\"data\".to_string()));\n+        local_data_key!(key2: Gc<String>)\n+        key2.replace(Some(box(GC) \"data\".to_string()));\n         assert_eq!(key2.get().unwrap().as_slice(), \"data\");\n     }\n \n@@ -452,11 +453,11 @@ mod test {\n         use std::cell::RefCell;\n \n         struct List {\n-            next: Option<@RefCell<List>>,\n+            next: Option<Gc<RefCell<List>>>,\n         }\n \n-        let a = @RefCell::new(List { next: None });\n-        let b = @RefCell::new(List { next: Some(a) });\n+        let a = box(GC) RefCell::new(List { next: None });\n+        let b = box(GC) RefCell::new(List { next: Some(a) });\n \n         {\n             let mut a = a.borrow_mut();"}, {"sha": "0ed555e392fa1f0e1643eb1be47465e882f9159e", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -16,7 +16,7 @@ Core encoding and decoding interfaces.\n \n use std::path;\n use std::rc::Rc;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n pub trait Encoder<E> {\n     // Primitive types:"}, {"sha": "dfe6988624eb017dce9c5243489ab9ed0cc5503b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -92,7 +92,3 @@\n #[doc(no_inline)] pub use comm::{sync_channel, channel};\n #[doc(no_inline)] pub use comm::{SyncSender, Sender, Receiver};\n #[doc(no_inline)] pub use task::spawn;\n-\n-// Reexported statics\n-#[cfg(not(test))]\n-#[doc(no_inline)] pub use gc::GC;"}, {"sha": "08f412cd763816d99c786659c5a7f7eef42ed7eb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -21,7 +21,7 @@ use std::fmt;\n use std::fmt::Show;\n use std::option::Option;\n use std::rc::Rc;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A pointer abstraction. FIXME(eddyb) #10676 use Rc<T> in the future."}, {"sha": "828e9ab12c25152a7aec299968c20498af58e0d7", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -20,7 +20,7 @@ use util::small_vector::SmallVector;\n \n use std::cell::RefCell;\n use std::fmt;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::iter;\n use std::slice;\n "}, {"sha": "372f69b805a2af03878a112cac40cff8ca76bcc9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -21,7 +21,7 @@ use visit;\n \n use std::cell::Cell;\n use std::cmp;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::u32;\n \n pub fn path_name_i(idents: &[Ident]) -> String {"}, {"sha": "31dd07f463c63d1f477dd4ca58806448b80d135f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -22,7 +22,7 @@ use crateid::CrateId;\n \n use std::collections::HashSet;\n use std::collections::BitvSet;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n local_data_key!(used_attrs: BitvSet)\n "}, {"sha": "7aa93dee11df98acd3c4dceca3c0beb15158a863", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -20,6 +20,8 @@ use parse;\n use parse::token::InternedString;\n use parse::token;\n \n+use std::gc::GC;\n+\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "421f8b1294d6a3208a3b3b1823236705e11064fd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -20,7 +20,7 @@ use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n \n use std::collections::HashMap;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n // new-style macro! tt code:\n //"}, {"sha": "b99ab50c32618c1a8e9d39ce7e9813485e09c2a5", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -21,7 +21,7 @@ use parse::token::special_idents;\n use parse::token::InternedString;\n use parse::token;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "7cf901bbd5e1c97c07868bee9db70a53a496a502", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -16,7 +16,7 @@ use owned_slice::OwnedSlice;\n use parse::token;\n use parse::token::{str_to_ident};\n \n-use std::string::String;\n+use std::gc::GC;\n \n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                          -> Box<base::MacResult> {"}, {"sha": "05269dbb44dda6d662f6b0643cc2e67662e8345e", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -178,7 +178,7 @@ StaticEnum(<ast::EnumDef of C>, ~[(<ident of C0>, <span of C0>, Unnamed(~[<span\n */\n \n use std::cell::RefCell;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n use ast;\n use ast::{P, EnumDef, Expr, Ident, Generics, StructDef};"}, {"sha": "fb2de2e271a99c1309f9004dfdd3d09566bf3bdd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -29,7 +29,7 @@ use visit;\n use visit::Visitor;\n use util::small_vector::SmallVector;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n pub fn expand_expr(e: Gc<ast::Expr>, fld: &mut MacroExpander) -> Gc<ast::Expr> {\n     match e.node {\n@@ -1030,6 +1030,8 @@ mod test {\n     use visit;\n     use visit::Visitor;\n \n+    use std::gc::GC;\n+\n     // a visitor that extracts the paths\n     // from a given thingy and puts them in a mutable\n     // array (passed in to the traversal)"}, {"sha": "33ea186db35c4257710efb91ce807e2c86ce8533", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -20,7 +20,7 @@ use rsparse = parse;\n \n use parse = fmt_macros;\n use std::collections::HashMap;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n #[deriving(PartialEq)]\n enum ArgumentType {"}, {"sha": "86fbc8cec2a347f9f4108196fab5a4b3a5201d40", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -22,6 +22,7 @@ use parse::token::{Token, EOF, Nonterminal};\n use parse::token;\n \n use std::rc::Rc;\n+use std::gc::GC;\n use std::collections::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,"}, {"sha": "2e538c9579b7e3aa77974cc63c303c8f2490f181", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -17,7 +17,7 @@ use owned_slice::OwnedSlice;\n use util::small_vector::SmallVector;\n \n use std::rc::Rc;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n // We may eventually want to be able to fold over type parameters, too.\n pub trait Folder {"}, {"sha": "f48ddf4417bf65dff1c82bc6530652fe218705c4", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -16,7 +16,7 @@ use parse::token;\n use parse::parser::Parser;\n use parse::token::INTERPOLATED;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n // a parser that can parse attributes.\n pub trait ParserAttr {"}, {"sha": "faffc496846038fbdcc8f0a3ff12fb431d0523fb", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -282,6 +282,7 @@ mod test {\n     use std::io;\n     use std::io::MemWriter;\n     use std::str;\n+    use std::gc::GC;\n     use codemap::{Span, BytePos, Spanned};\n     use owned_slice::OwnedSlice;\n     use ast;"}, {"sha": "025684ae71e8c41155869058a838225d62ed676f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -22,7 +22,7 @@ use codemap::{Span, respan};\n use parse::parser;\n use parse::token;\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n /// The specific types of unsupported syntax\n #[deriving(PartialEq, Eq, Hash)]\n@@ -31,6 +31,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteOwnedExpr,\n     ObsoleteOwnedPattern,\n     ObsoleteOwnedVector,\n+    ObsoleteManagedType,\n+    ObsoleteManagedExpr,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -68,6 +70,14 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"`~[T]` is no longer a type\",\n                 \"use the `Vec` type instead\"\n             ),\n+            ObsoleteManagedType => (\n+                \"`@` notation for managed pointers\",\n+                \"use `Gc<T>` in `std::gc` instead\"\n+            ),\n+            ObsoleteManagedExpr => (\n+                \"`@` notation for a managed pointer allocation\",\n+                \"use the `box(GC)` oeprator instead of `@`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "ae3b8587ee5109a9c477ffa0d61e1cba317c66c9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -79,7 +79,7 @@ use owned_slice::OwnedSlice;\n use std::collections::HashSet;\n use std::mem::replace;\n use std::rc::Rc;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n #[allow(non_camel_case_types)]\n #[deriving(PartialEq)]\n@@ -1342,6 +1342,8 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::AT {\n             // MANAGED POINTER\n             self.bump();\n+            let span = self.last_span;\n+            self.obsolete(span, ObsoleteManagedType);\n             TyBox(self.parse_ty(plus_allowed))\n         } else if self.token == token::TILDE {\n             // OWNED POINTER\n@@ -2375,9 +2377,10 @@ impl<'a> Parser<'a> {\n           }\n           token::AT => {\n             self.bump();\n+            let span = self.last_span;\n+            self.obsolete(span, ObsoleteManagedExpr);\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n-            // HACK: pretending @[] is a (removed) @-vec\n             ex = self.mk_unary(UnBox, e);\n           }\n           token::TILDE => {"}, {"sha": "04116dec60e3113fb1e6b31e5e94da601158f7fd", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,6 +15,8 @@ use parse::{new_parser_from_source_str};\n use parse::parser::Parser;\n use parse::token;\n \n+use std::gc::Gc;\n+\n // map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> {\n     let ps = new_parse_sess();\n@@ -46,29 +48,29 @@ pub fn string_to_crate (source_str : String) -> ast::Crate {\n }\n \n // parse a string, return an expr\n-pub fn string_to_expr (source_str : String) -> @ast::Expr {\n+pub fn string_to_expr (source_str : String) -> Gc<ast::Expr> {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_expr()\n     })\n }\n \n // parse a string, return an item\n-pub fn string_to_item (source_str : String) -> Option<@ast::Item> {\n+pub fn string_to_item (source_str : String) -> Option<Gc<ast::Item>> {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_item(Vec::new())\n     })\n }\n \n // parse a string, return a stmt\n-pub fn string_to_stmt(source_str : String) -> @ast::Stmt {\n+pub fn string_to_stmt(source_str : String) -> Gc<ast::Stmt> {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_stmt(Vec::new())\n     })\n }\n \n // parse a string, return a pat. Uses \"irrefutable\"... which doesn't\n // (currently) affect parsing.\n-pub fn string_to_pat(source_str: String) -> @ast::Pat {\n+pub fn string_to_pat(source_str: String) -> Gc<ast::Pat> {\n     string_to_parser(&new_parse_sess(), source_str).parse_pat()\n }\n "}, {"sha": "58c58ef3aeb9678c14eb03d4151e5e379308a07b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,7 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n pub struct Entry<A,B> {\n     key: A,\n@@ -19,7 +20,7 @@ pub struct Entry<A,B> {\n \n pub struct alist<A,B> {\n     eq_fn: extern \"Rust\" fn(A,A) -> bool,\n-    data: @RefCell<Vec<Entry<A,B>> >,\n+    data: Gc<RefCell<Vec<Entry<A,B>>>>,\n }\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n@@ -47,7 +48,7 @@ pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: @RefCell::new(Vec::new()),\n+        data: box(GC) RefCell::new(Vec::new()),\n     };\n }\n \n@@ -57,6 +58,6 @@ pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: @RefCell::new(Vec::new()),\n+        data: box(GC) RefCell::new(Vec::new()),\n     };\n }"}, {"sha": "2aa503afb8d23c1fbc0598c4b39f6aea7abd3d34", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -28,8 +28,9 @@ pub mod name_pool {\n \n pub mod rust {\n     pub use name_pool::add;\n+    use std::gc::Gc;\n \n-    pub type rt = @();\n+    pub type rt = Gc<()>;\n \n     pub trait cx {\n         fn cx(&self);"}, {"sha": "6280d776e36f08350b8ebbb27ee35e07beae59df", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,8 +14,9 @@\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::gc::Gc;\n \n-pub type header_map = HashMap<String, @RefCell<Vec<@String>>>;\n+pub type header_map = HashMap<String, Gc<RefCell<Vec<Gc<String>>>>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {"}, {"sha": "6ce5bff60e6e074a47133a4189d3687deb0e11fc", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,5 +11,7 @@\n #![feature(managed_boxes)]\n \n use std::collections::HashMap;\n+use std::gc::Gc;\n+\n+pub type map = Gc<HashMap<uint, uint>>;\n \n-pub type map = @HashMap<uint, uint>;"}, {"sha": "e17e21ae7f41b84424b8e8f82feb932b61de3584", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -21,6 +21,8 @@ use syntax::ext::base::*;\n use syntax::parse::token;\n use rustc::plugin::Registry;\n \n+use std::gc::{Gc, GC};\n+\n #[macro_export]\n macro_rules! exported_macro (() => (2))\n \n@@ -42,9 +44,9 @@ fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     MacExpr::new(quote_expr!(cx, 1i))\n }\n \n-fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: @MetaItem, it: @Item)\n-                   -> @Item {\n-    @Item {\n+fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: Gc<MetaItem>, it: Gc<Item>)\n+                   -> Gc<Item> {\n+    box(GC) Item {\n         attrs: it.attrs.clone(),\n         ..(*quote_item!(cx, enum Foo { Bar, Baz }).unwrap()).clone()\n     }"}, {"sha": "037a326880f004de41eabc2480802ca9ea56d377", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -17,7 +17,7 @@ use time::precise_time_s;\n use std::os;\n use std::task;\n use std::vec;\n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n \n #[deriving(Clone)]\n enum List<T> {\n@@ -53,10 +53,10 @@ type nillist = List<()>;\n // Filled with things that have to be unwound\n \n struct State {\n-    managed: @nillist,\n+    managed: Gc<nillist>,\n     unique: Box<nillist>,\n-    tuple: (@nillist, Box<nillist>),\n-    vec: Vec<@nillist>,\n+    tuple: (Gc<nillist>, Box<nillist>),\n+    vec: Vec<Gc<nillist>>,\n     res: r\n }\n "}, {"sha": "f4b410d30319d8f6d94c42042f19ee33d4172041", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,23 +12,25 @@\n \n extern crate debug;\n \n+use std::gc::{Gc, GC};\n+\n struct clam {\n-    x: @int,\n-    y: @int,\n+    x: Gc<int>,\n+    y: Gc<int>,\n }\n \n struct fish {\n-    a: @int,\n+    a: Gc<int>,\n }\n \n fn main() {\n-    let a: clam = clam{x: @1, y: @2};\n-    let b: clam = clam{x: @10, y: @20};\n+    let a: clam = clam{x: box(GC) 1, y: box(GC) 2};\n+    let b: clam = clam{x: box(GC) 10, y: box(GC) 20};\n     let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `@int`\n     println!(\"{:?}\", z);\n     assert_eq!(z, 21);\n-    let forty: fish = fish{a: @40};\n-    let two: fish = fish{a: @2};\n+    let forty: fish = fish{a: box(GC) 40};\n+    let two: fish = fish{a: box(GC) 2};\n     let answer: int = forty.a + two.a;\n     //~^ ERROR binary operation `+` cannot be applied to type `@int`\n     println!(\"{:?}\", answer);"}, {"sha": "dba2c7dca766a653ced924464cdf7763b8784e2e", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,7 +13,9 @@\n \n #![feature(managed_boxes)]\n \n-fn foo<'a>(x: &'a @int) -> &'a int {\n+use std::gc::{GC, Gc};\n+\n+fn foo<'a>(x: &'a Gc<int>) -> &'a int {\n     match x {\n         &ref y => {\n             &**y // Do not expect an error here\n@@ -25,7 +27,7 @@ fn bar() {\n     let a = 3;\n     let mut y = &a;\n     if true {\n-        let x = @3;\n+        let x = box(GC) 3;\n         y = &*x; //~ ERROR `*x` does not live long enough\n     }\n }"}, {"sha": "416c272b8ce1bb8ad5f7eb791fcee403aef6c3ff", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n@@ -23,13 +24,13 @@ fn borrow(x: &int, f: |x: &int|) {\n struct F { f: Box<int> }\n \n pub fn main() {\n-    let mut x = @F {f: box 3};\n+    let mut x = box(GC) F {f: box 3};\n     borrow(x.f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = @F {f: box 4};\n+        x = box(GC) F {f: box 4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);"}, {"sha": "dcfead3a1c20571327e53d7e80ea359e45b430ea", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n@@ -23,13 +24,13 @@ fn borrow(x: &int, f: |x: &int|) {\n struct F { f: Box<int> }\n \n pub fn main() {\n-    let mut x = box @F{f: box 3};\n+    let mut x = box box(GC) F{f: box 3};\n     borrow(x.f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         //~^ NOTE  borrow occurs due to use of `x` in closure\n-        *x = @F{f: box 4};\n+        *x = box(GC) F{f: box 4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);"}, {"sha": "ccf0fb3711a91467d6fc091a325a029e812987e1", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n     f(x);\n@@ -20,13 +22,13 @@ fn borrow(x: &int, f: |x: &int|) {\n }\n \n pub fn main() {\n-    let mut x = @3;\n+    let mut x = box(GC) 3;\n     borrow(x, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x) as *int, &(*b_x) as *int);\n         //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = @22;\n+        x = box(GC) 22;\n \n         println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);"}, {"sha": "e1641f54a6c2a4c3b3e25a3a01883124fb7e6b22", "filename": "src/test/compile-fail/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,9 +12,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn testfn(cond: bool) {\n-    let mut x = @3;\n-    let mut y = @4;\n+    let mut x = box(GC) 3;\n+    let mut y = box(GC) 4;\n \n     // borrow x and y\n     let r_x = &*x;\n@@ -30,13 +32,13 @@ fn testfn(cond: bool) {\n     println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n \n-    x = @5; //~ERROR cannot assign to `x` because it is borrowed\n-    y = @6; //~ERROR cannot assign to `y` because it is borrowed\n+    x = box(GC) 5; //~ERROR cannot assign to `x` because it is borrowed\n+    y = box(GC) 6; //~ERROR cannot assign to `y` because it is borrowed\n \n     println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n-    assert_eq!(x, @5);\n-    assert_eq!(y, @6);\n+    assert_eq!(x, box(GC) 5);\n+    assert_eq!(y, box(GC) 6);\n }\n \n pub fn main() {"}, {"sha": "4a7a7b0f265954bd334184192268ef8e0f647d43", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n@@ -23,13 +24,13 @@ fn borrow(x: &int, f: |x: &int|) {\n struct F { f: Box<int> }\n \n pub fn main() {\n-    let mut x = @F {f: box 3};\n+    let mut x = box(GC) F {f: box 3};\n     borrow((*x).f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = @F {f: box 4};\n+        x = box(GC) F {f: box 4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);"}, {"sha": "e2622b6e72d68491858f1be60140e5764ca0c2d6", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,14 @@\n \n #![feature(managed_boxes)]\n \n-fn f<T>(x: T) -> @T {\n-    @x  //~ ERROR value may contain references\n+use std::gc::{Gc, GC};\n+\n+fn f<T>(x: T) -> Gc<T> {\n+    box(GC) x  //~ ERROR value may contain references\n }\n \n-fn g<T:'static>(x: T) -> @T {\n-    @x  // ok\n+fn g<T:'static>(x: T) -> Gc<T> {\n+    box(GC) x  // ok\n }\n \n fn main() {}"}, {"sha": "da5f7680d8ce759488dd30ffc8f446b05232e622", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,7 @@\n // Verifies all possible restrictions for static items values.\n \n use std::kinds::marker;\n+use std::gc::{Gc, GC};\n \n struct WithDtor;\n \n@@ -95,7 +96,7 @@ static STATIC10: UnsafeStruct = UnsafeStruct;\n struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n-//~^ ERROR static items are not allowed to have owned pointers\n+//~^ ERROR static items are not allowed to have custom pointers\n \n // The following examples test that mutable structs are just forbidden\n // to have types with destructors\n@@ -113,24 +114,24 @@ static mut STATIC14: SafeStruct = SafeStruct {\n };\n \n static STATIC15: &'static [Box<MyOwned>] = &'static [box MyOwned, box MyOwned];\n-//~^ ERROR static items are not allowed to have owned pointers\n-//~^^ ERROR static items are not allowed to have owned pointers\n+//~^ ERROR static items are not allowed to have custom pointers\n+//~^^ ERROR static items are not allowed to have custom pointers\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) =\n     (&'static box MyOwned, &'static box MyOwned);\n-//~^ ERROR static items are not allowed to have owned pointers\n-//~^^ ERROR static items are not allowed to have owned pointers\n+//~^ ERROR static items are not allowed to have custom pointers\n+//~^^ ERROR static items are not allowed to have custom pointers\n \n static mut STATIC17: SafeEnum = Variant1;\n //~^ ERROR mutable static items are not allowed to have destructors\n \n-static STATIC18: @SafeStruct = @SafeStruct{field1: Variant1, field2: Variant2(0)};\n-//~^ ERROR static items are not allowed to have managed pointers\n+static STATIC18: Gc<SafeStruct> = box(GC) SafeStruct{field1: Variant1, field2: Variant2(0)};\n+//~^ ERROR static items are not allowed to have custom pointers\n \n static STATIC19: Box<int> = box 3;\n-//~^ ERROR static items are not allowed to have owned pointers\n+//~^ ERROR static items are not allowed to have custom pointers\n \n pub fn main() {\n     let y = { static x: Box<int> = box 3; x };\n-    //~^ ERROR static items are not allowed to have owned pointers\n+    //~^ ERROR static items are not allowed to have custom pointers\n }"}, {"sha": "06079a5487ff403a663d9cbdeb2dba6445730411", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,7 +10,9 @@\n \n // Testing that we can't store a reference it task-local storage\n \n-local_data_key!(key: @&int)\n+use std::gc::{GC, Gc};\n+\n+local_data_key!(key: Gc<&int>)\n //~^ ERROR missing lifetime specifier\n \n fn main() {}"}, {"sha": "9e365acc5abeb29b77104dbc09bb3fc671e7b5e1", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n@@ -18,7 +20,7 @@ struct t { //~ ERROR this type cannot be instantiated\n   to_str: (),\n }\n \n-struct x(@t); //~ ERROR this type cannot be instantiated\n+struct x(Gc<t>); //~ ERROR this type cannot be instantiated\n \n fn main() {\n }"}, {"sha": "ec3808fa2c75dbaf85d283224dc143105439fda9", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,14 +10,16 @@\n \n #![feature(managed_boxes)]\n \n-struct P { child: Option<@P> }\n+use std::gc::Gc;\n+\n+struct P { child: Option<Gc<P>> }\n trait PTrait {\n-   fn getChildOption(&self) -> Option<@P>;\n+   fn getChildOption(&self) -> Option<Gc<P>>;\n }\n \n impl PTrait for P {\n-   fn getChildOption(&self) -> Option<@P> {\n-       static childVal: @P = self.child.get();\n+   fn getChildOption(&self) -> Option<Gc<P>> {\n+       static childVal: Gc<P> = self.child.get();\n        //~^ ERROR attempt to use a non-constant value in a constant\n        fail!();\n    }"}, {"sha": "30b05c7bbaac72ea939a1b80a3af000dc14b2555", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: int\n@@ -28,11 +30,11 @@ fn main() {\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     let _woohoo = (box my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n-    let _woohoo = (@my_struct).priv_field;\n+    let _woohoo = (box(GC) my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     (box my_struct).happyfun();            //~ ERROR method `happyfun` is private\n-    (@my_struct).happyfun();               //~ ERROR method `happyfun` is private\n+    (box(GC) my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "b05bff208258e7b0917a5697337dd3f03a8fcf4f", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct BarStruct;\n \n impl<'a> BarStruct {\n-    fn foo(&'a mut self) -> @BarStruct { self }\n+    fn foo(&'a mut self) -> Gc<BarStruct> { self }\n     //~^ ERROR: error: mismatched types: expected `@BarStruct` but found `&'a mut BarStruct\n }\n "}, {"sha": "96d25737f7e1a66ae9f30ba268545f83764a02d1", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,9 +11,10 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n // Regresion test for issue 7364\n-static managed: @RefCell<int> = @RefCell::new(0);\n-//~^ ERROR static items are not allowed to have managed pointers\n+static managed: Gc<RefCell<int>> = box(GC) RefCell::new(0);\n+//~^ ERROR static items are not allowed to have custom pointers\n \n fn main() { }"}, {"sha": "06232580198f0e6544a8d8569a0b5915ec0ca5e4", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,6 +13,7 @@\n #![feature(managed_boxes)]\n \n use std::rc::Rc;\n+use std::gc::Gc;\n \n fn assert_copy<T:Copy>() { }\n trait Dummy { }\n@@ -77,7 +78,7 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<MyNoncopyStruct>(); //~ ERROR does not fulfill\n \n     // managed or ref counted types are not ok\n-    assert_copy::<@int>();   //~ ERROR does not fulfill\n+    assert_copy::<Gc<int>>();   //~ ERROR does not fulfill\n     assert_copy::<Rc<int>>();   //~ ERROR does not fulfill\n }\n "}, {"sha": "fa5f15316378dddc58b368e75d1db3c8bce15e26", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,8 +10,10 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct Foo {\n-    f: @int,\n+    f: Gc<int>,\n }\n \n impl Drop for Foo {"}, {"sha": "cad340cedb17bfda94c92212a42e92fea164fc6d", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n-fn foo(_x: @uint) {}\n+use std::gc::{Gc, GC};\n+\n+fn foo(_x: Gc<uint>) {}\n \n fn main() {\n-    let x = @3u;\n+    let x = box(GC) 3u;\n     let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`\n     let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`\n     let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`"}, {"sha": "2ec9efe9498cec0f440d8771174fc41af549797a", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,17 +12,18 @@\n #![forbid(heap_memory)]\n #![allow(dead_code)]\n \n+use std::gc::{Gc, GC};\n \n struct Foo {\n-    x: @int //~ ERROR type uses managed\n+    x: Gc<int>, //~ ERROR type uses managed\n }\n \n struct Bar { x: Box<int> } //~ ERROR type uses owned\n \n fn main() {\n     let _x : Bar = Bar {x : box 10}; //~ ERROR type uses owned\n \n-    @2; //~ ERROR type uses managed\n+    box(GC) 2; //~ ERROR type uses managed\n \n     box 2; //~ ERROR type uses owned\n     fn g(_: Box<Clone>) {} //~ ERROR type uses owned"}, {"sha": "5e88f52a9a53155ee6fbafba080b01784288e49c", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,11 +12,13 @@\n #![feature(managed_boxes)]\n #![forbid(managed_heap_memory)]\n \n+use std::gc::{Gc, GC};\n+\n struct Foo {\n-    x: @int //~ ERROR type uses managed\n+    x: Gc<int> //~ ERROR type uses managed\n }\n \n fn main() {\n-    let _x : Foo = Foo {x : @10};\n+    let _x : Foo = Foo {x : box(GC) 10};\n     //~^ ERROR type uses managed\n }"}, {"sha": "383a0ac46193fc7e8f58360b1efc3605180fe0e7", "filename": "src/test/compile-fail/new-box-syntax-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,7 +13,7 @@\n \n // Tests that the new `box` syntax works with unique pointers and GC pointers.\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::owned::{Box, HEAP};\n \n pub fn main() {"}, {"sha": "20edd17556064d061fdf4d473b101a48e7d7f63e", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,8 +13,9 @@\n extern crate debug;\n \n use std::task;\n+use std::gc::{Gc, GC};\n \n-struct Port<T>(@T);\n+struct Port<T>(Gc<T>);\n \n fn main() {\n     struct foo {\n@@ -32,7 +33,7 @@ fn main() {\n         }\n     }\n \n-    let x = foo(Port(@()));\n+    let x = foo(Port(box(GC) ()));\n \n     task::spawn(proc() {\n         let y = x;   //~ ERROR does not fulfill `Send`"}, {"sha": "0374a6f33f1b58113eecf170cd0bd320f0afce44", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn main() {\n     let f; //~ ERROR cyclic type of infinite size\n-    f = @f;\n+    f = box(GC) f;\n }"}, {"sha": "aaa09de826b2c158aa73ee9f2612c39e49a54171", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,9 +13,10 @@\n extern crate debug;\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n struct r {\n-  i: @Cell<int>,\n+  i: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -27,7 +28,7 @@ impl Drop for r {\n     }\n }\n \n-fn r(i: @Cell<int>) -> r {\n+fn r(i: Gc<Cell<int>>) -> r {\n     r {\n         i: i\n     }\n@@ -38,7 +39,7 @@ struct A {\n }\n \n fn main() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n         // Can't do this copy\n         let x = box box box A {y: r(i)};"}, {"sha": "be4bdeedff4de31d0511aa72cc157832c31aa822", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,9 +12,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn testfn(cond: bool) {\n-    let mut x = @3;\n-    let mut y = @4;\n+    let mut x = box(GC) 3;\n+    let mut y = box(GC) 4;\n \n     let mut a = &*x;\n \n@@ -25,11 +27,11 @@ fn testfn(cond: bool) {\n         exp = 4;\n     }\n \n-    x = @5; //~ERROR cannot assign to `x` because it is borrowed\n-    y = @6; //~ERROR cannot assign to `y` because it is borrowed\n+    x = box(GC) 5; //~ERROR cannot assign to `x` because it is borrowed\n+    y = box(GC) 6; //~ERROR cannot assign to `y` because it is borrowed\n     assert_eq!(*a, exp);\n-    assert_eq!(x, @5);\n-    assert_eq!(y, @6);\n+    assert_eq!(x, box(GC) 5);\n+    assert_eq!(y, box(GC) 6);\n }\n \n pub fn main() {}"}, {"sha": "77988d1867952aab4d266f289844b5da1c5c1be5", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct point {\n     x: int,\n     y: int,\n@@ -19,7 +21,7 @@ fn x_coord<'r>(p: &'r point) -> &'r int {\n     return &p.x;\n }\n \n-fn foo(p: @point) -> &int {\n+fn foo(p: Gc<point>) -> &int {\n     let xc = x_coord(p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;"}, {"sha": "0aff58c34cc23d21e70aa002f7d51769db7a1f4a", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n-fn foo(cond: || -> bool, make_box: || -> @int) {\n+fn foo(cond: || -> bool, make_box: || -> Gc<int>) {\n     let mut y: &int;\n     loop {\n         let x = make_box();"}, {"sha": "b5b89ebcc2f2a5351361463dba034172cce78b47", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,24 +13,26 @@\n // Check that we correctly infer that b and c must be region\n // parameterized because they reference a which requires a region.\n \n+use std::gc::Gc;\n+\n type a<'a> = &'a int;\n-type b<'a> = @a<'a>;\n+type b<'a> = Gc<a<'a>>;\n \n struct c<'a> {\n-    f: @b<'a>\n+    f: Gc<b<'a>>\n }\n \n trait set_f<'a> {\n-    fn set_f_ok(&self, b: @b<'a>);\n-    fn set_f_bad(&self, b: @b);\n+    fn set_f_ok(&self, b: Gc<b<'a>>);\n+    fn set_f_bad(&self, b: Gc<b>);\n }\n \n impl<'a> set_f<'a> for c<'a> {\n-    fn set_f_ok(&self, b: @b<'a>) {\n+    fn set_f_ok(&self, b: Gc<b<'a>>) {\n         self.f = b;\n     }\n \n-    fn set_f_bad(&self, b: @b) {\n+    fn set_f_bad(&self, b: Gc<b>) {\n         self.f = b; //~ ERROR mismatched types: expected `@@&'a int` but found `@@&int`\n         //~^ ERROR cannot infer\n     }"}, {"sha": "880fbf0cb1d969eac56f60b9a8c993455ae788e4", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = @3;\n+    let x = box(GC) 3;\n     f(x);\n     let x = &3;\n     f(x);   //~ ERROR instantiating a type parameter with an incompatible type"}, {"sha": "b6ce848a7d8fb17e03685d9d1de7657065ec7f55", "filename": "src/test/compile-fail/struct-field-assignability.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n struct Foo<'a> {\n     x: &'a int\n }\n \n pub fn main() {\n-    let f = Foo { x: @3 }; //~ ERROR borrowed value does not live long enough\n+    let f = Foo { x: box(GC) 3 }; //~ ERROR borrowed value does not live long enough\n     assert_eq!(*f.x, 3);\n }"}, {"sha": "31814a2ff1ced4dfbee0e2d8852947202de6bb81", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,14 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct foo {\n     a: int,\n     b: int,\n }\n \n-type bar = @foo;\n+type bar = Gc<foo>;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {"}, {"sha": "8df4bb47f88098ad5f3ce838978e4c6af032d5de", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,13 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n trait Mumbo {\n-    fn jumbo(&self, x: @uint) -> uint;\n+    fn jumbo(&self, x: Gc<uint>) -> uint;\n }\n \n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n-    unsafe fn jumbo(&self, x: @uint) { *self + *x; }\n+    unsafe fn jumbo(&self, x: Gc<uint>) { *self + *x; }\n     //~^ ERROR expected normal fn but found unsafe fn\n }\n "}, {"sha": "e8dc0fc3b6c285908200d8f9e4cc78d5f6f94814", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box @100;\n+    let i = box box(GC) 100;\n     f(i); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "4d10537aa4d0412e6036ce2c3a2b57bd92ac2925", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,9 +12,10 @@\n \n extern crate debug;\n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n struct r {\n-  i: @Cell<int>,\n+  i: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -30,8 +31,8 @@ fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n }\n \n fn main() {\n-    let i1 = @Cell::new(0);\n-    let i2 = @Cell::new(1);\n+    let i1 = box(GC) Cell::new(0);\n+    let i2 = box(GC) Cell::new(1);\n     let r1 = vec!(box r { i: i1 });\n     let r2 = vec!(box r { i: i2 });\n     f(r1.clone(), r2.clone());"}, {"sha": "65f88ef71264bf82dbc38336596e4c289894e700", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,12 +13,14 @@\n // Test that a class with an unsendable field can't be\n // sent\n \n+use std::gc::{Gc, GC};\n+\n struct foo {\n   i: int,\n-  j: @String,\n+  j: Gc<String>,\n }\n \n-fn foo(i:int, j: @String) -> foo {\n+fn foo(i:int, j: Gc<String>) -> foo {\n     foo {\n         i: i,\n         j: j\n@@ -28,5 +30,5 @@ fn foo(i:int, j: @String) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel(); //~ ERROR does not fulfill `Send`\n-  tx.send(foo(42, @(cat))); //~ ERROR does not fulfill `Send`\n+  tx.send(foo(42, box(GC) (cat))); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "0f81e530fdd36a25454501547896ed47a594d54d", "filename": "src/test/debuginfo/borrowed-managed-basic.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -63,47 +63,49 @@\n \n #![allow(unused_variable)]\n \n+use std::gc::{Gc, GC};\n+\n fn main() {\n-    let bool_box: @bool = @true;\n+    let bool_box: Gc<bool> = box(GC) true;\n     let bool_ref: &bool = bool_box;\n \n-    let int_box: @int = @-1;\n+    let int_box: Gc<int> = box(GC) -1;\n     let int_ref: &int = int_box;\n \n-    let char_box: @char = @'a';\n+    let char_box: Gc<char> = box(GC) 'a';\n     let char_ref: &char = char_box;\n \n-    let i8_box: @i8 = @68;\n+    let i8_box: Gc<i8> = box(GC) 68;\n     let i8_ref: &i8 = i8_box;\n \n-    let i16_box: @i16 = @-16;\n+    let i16_box: Gc<i16> = box(GC) -16;\n     let i16_ref: &i16 = i16_box;\n \n-    let i32_box: @i32 = @-32;\n+    let i32_box: Gc<i32> = box(GC) -32;\n     let i32_ref: &i32 = i32_box;\n \n-    let i64_box: @i64 = @-64;\n+    let i64_box: Gc<i64> = box(GC) -64;\n     let i64_ref: &i64 = i64_box;\n \n-    let uint_box: @uint = @1;\n+    let uint_box: Gc<uint> = box(GC) 1;\n     let uint_ref: &uint = uint_box;\n \n-    let u8_box: @u8 = @100;\n+    let u8_box: Gc<u8> = box(GC) 100;\n     let u8_ref: &u8 = u8_box;\n \n-    let u16_box: @u16 = @16;\n+    let u16_box: Gc<u16> = box(GC) 16;\n     let u16_ref: &u16 = u16_box;\n \n-    let u32_box: @u32 = @32;\n+    let u32_box: Gc<u32> = box(GC) 32;\n     let u32_ref: &u32 = u32_box;\n \n-    let u64_box: @u64 = @64;\n+    let u64_box: Gc<u64> = box(GC) 64;\n     let u64_ref: &u64 = u64_box;\n \n-    let f32_box: @f32 = @2.5;\n+    let f32_box: Gc<f32> = box(GC) 2.5;\n     let f32_ref: &f32 = f32_box;\n \n-    let f64_box: @f64 = @3.5;\n+    let f64_box: Gc<f64> = box(GC) 3.5;\n     let f64_ref: &f64 = f64_box;\n     zzz();\n }"}, {"sha": "98b66098862b519c0a41c2d46a53022b11ebbaa3", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -48,6 +48,8 @@\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n+\n struct SomeStruct {\n     x: int,\n     y: f64\n@@ -60,7 +62,7 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let managed_val = @SomeStruct { x: 12, y: 25.5 };\n+    let managed_val = box(GC) SomeStruct { x: 12, y: 25.5 };\n     let managed_val_ref: &SomeStruct = managed_val;\n     let managed_val_interior_ref_1: &int = &managed_val.x;\n     let managed_val_interior_ref_2: &f64 = &managed_val.y;"}, {"sha": "b88161e4a0b30a5d39a7f7a775101cb8812a74b0", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -31,13 +31,14 @@\n \n #![allow(unused_variable)]\n \n+use std::gc::{Gc, GC};\n \n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);\n     let stack_val_ref: &(i16, f32) = &stack_val;\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n-    let managed_val: @(i16, f32) = @(-16, -21f32);\n+    let managed_val: Gc<(i16, f32)> = box(GC) (-16, -21f32);\n     let managed_val_ref: &(i16, f32) = managed_val;\n \n     let unique_val: Box<(i16, f32)> = box() (-17, -22f32);"}, {"sha": "01129c845e9eaa82ed91677215140e611c2a4513", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -27,11 +27,13 @@\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n+\n fn main() {\n     let a = box 1;\n     let b = box() (2, 3.5);\n-    let c = @4;\n-    let d = @false;\n+    let c = box(GC) 4;\n+    let d = box(GC) false;\n     _zzz();\n }\n "}, {"sha": "f583016b93f392220d409b3a84be45af545d651c", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -30,6 +30,7 @@\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n \n struct StructWithSomePadding {\n     x: i16,\n@@ -52,10 +53,10 @@ impl Drop for StructWithDestructor {\n fn main() {\n \n     let unique = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n-    let managed = @StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 };\n+    let managed = box(GC) StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 };\n \n     let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n-    let managed_dtor = @StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 };\n+    let managed_dtor = box(GC) StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 };\n \n     zzz();\n }"}, {"sha": "0da2d44d5ae50061e80eb558f142fc5d9dfc6ba2", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -36,6 +36,8 @@\n // gdb-check:$4 = 8888\n // gdb-command:continue\n \n+use std::gc::{Gc, GC};\n+\n trait Trait {\n     fn method(self) -> Self;\n }\n@@ -66,8 +68,8 @@ impl Trait for (f64, int, int, f64) {\n     }\n }\n \n-impl Trait for @int {\n-    fn method(self) -> @int {\n+impl Trait for Gc<int> {\n+    fn method(self) -> Gc<int> {\n         zzz();\n         self\n     }\n@@ -77,7 +79,7 @@ fn main() {\n     let _ = (1111 as int).method();\n     let _ = Struct { x: 2222, y: 3333 }.method();\n     let _ = (4444.5, 5555, 6666, 7777.5).method();\n-    let _ = (@8888).method();\n+    let _ = (box(GC) 8888).method();\n }\n \n fn zzz() {()}"}, {"sha": "bb236a28a88008ce8f598ad141311be59c0e6695", "filename": "src/test/debuginfo/managed-enum.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -27,6 +27,8 @@\n #![allow(unused_variable)]\n #![feature(struct_variant, managed_boxes)]\n \n+use std::gc::GC;\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -50,15 +52,15 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    let the_a = @TheA { x: 0, y: 8970181431921507452 };\n+    let the_a = box(GC) TheA { x: 0, y: 8970181431921507452 };\n \n     // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n     // 0b00010001000100010001000100010001 = 286331153\n     // 0b0001000100010001 = 4369\n     // 0b00010001 = 17\n-    let the_b = @TheB (0, 286331153, 286331153);\n+    let the_b = box(GC) TheB (0, 286331153, 286331153);\n \n-    let univariant = @TheOnlyCase(-9747455);\n+    let univariant = box(GC) TheOnlyCase(-9747455);\n \n     zzz();\n }"}, {"sha": "d1f38be1d8947c2807756962089f93d65cd18ab2", "filename": "src/test/debuginfo/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -31,9 +31,11 @@\n \n #![allow(unused_variable)]\n \n+use std::gc::{Gc, GC};\n+\n fn main() {\n \n-    let unique: Vec<@i64> = vec!(@10, @11, @12, @13);\n+    let unique: Vec<Gc<i64>> = vec!(box(GC) 10, box(GC) 11, box(GC) 12, box(GC) 13);\n \n     zzz();\n }"}, {"sha": "b56db2d18468e2b3222d099bd75c43ea1ae4ddca", "filename": "src/test/debuginfo/managed-pointer-within-unique.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -29,15 +29,17 @@\n \n #![allow(unused_variable)]\n \n+use std::gc::{GC, Gc};\n+\n struct ContainsManaged {\n     x: int,\n-    y: @int\n+    y: Gc<int>,\n }\n \n fn main() {\n     let ordinary_unique = box() (-1, -2);\n \n-    let managed_within_unique = box ContainsManaged { x: -3, y: @-4 };\n+    let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4 };\n \n     zzz();\n }"}, {"sha": "ea0867903b5af3fbef0d4c970aca5e090997364c", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -106,6 +106,7 @@\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n+use std::gc::{Gc, GC};\n \n enum Opt<T> {\n     Empty,\n@@ -118,7 +119,7 @@ struct UniqueNode<T> {\n }\n \n struct ManagedNode<T> {\n-    next: Opt<@ManagedNode<T>>,\n+    next: Opt<Gc<ManagedNode<T>>>,\n     value: T\n }\n \n@@ -183,7 +184,7 @@ fn main() {\n         value: 2,\n     };\n \n-    let box_unique: @UniqueNode<u64> = @UniqueNode {\n+    let box_unique: Gc<UniqueNode<u64>> = box(GC) UniqueNode {\n         next: Val {\n             val: box UniqueNode {\n                 next: Empty,\n@@ -215,7 +216,7 @@ fn main() {\n \n     let stack_managed: ManagedNode<u16> = ManagedNode {\n         next: Val {\n-            val: @ManagedNode {\n+            val: box(GC) ManagedNode {\n                 next: Empty,\n                 value: 11,\n             }\n@@ -225,17 +226,17 @@ fn main() {\n \n     let unique_managed: Box<ManagedNode<u32>> = box ManagedNode {\n         next: Val {\n-            val: @ManagedNode {\n+            val: box(GC) ManagedNode {\n                 next: Empty,\n                 value: 13,\n             }\n         },\n         value: 12,\n     };\n \n-    let box_managed: @ManagedNode<u64> = @ManagedNode {\n+    let box_managed: Gc<ManagedNode<u64>> = box(GC) ManagedNode {\n         next: Val {\n-            val: @ManagedNode {\n+            val: box(GC) ManagedNode {\n                 next: Empty,\n                 value: 15,\n             }\n@@ -245,7 +246,7 @@ fn main() {\n \n     let vec_managed: [ManagedNode<f32>, ..1] = [ManagedNode {\n         next: Val {\n-            val: @ManagedNode {\n+            val: box(GC) ManagedNode {\n                 next: Empty,\n                 value: 17.5,\n             }\n@@ -255,7 +256,7 @@ fn main() {\n \n     let borrowed_managed: &ManagedNode<f64> = &ManagedNode {\n         next: Val {\n-            val: @ManagedNode {\n+            val: box(GC) ManagedNode {\n                 next: Empty,\n                 value: 19.5,\n             }"}, {"sha": "3328b11228441ee31a5e66ea7218bb850d6e338c", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -51,6 +51,8 @@\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n+\n struct Struct {\n     a: int,\n     b: f64,\n@@ -69,7 +71,7 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = @7;\n+    let managed = box(GC) 7;\n \n     let closure = || {\n         let closure_local = 8;"}, {"sha": "453ac35463178429672c193d982f4c5febc73b7a", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -31,6 +31,8 @@\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n+\n struct Struct {\n     a: int,\n     b: f64,\n@@ -49,7 +51,7 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = @7;\n+    let managed = box(GC) 7;\n \n     let closure = || {\n         zzz();"}, {"sha": "20d634d047535dc3b93a5514b7115a3ac8c7631a", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,33 +15,34 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::GC;\n \n-fn test1() { let val = @0; { } *val; }\n+fn test1() { let val = box(GC) 0; { } *val; }\n \n-fn test2() -> int { let val = @0; { } *val }\n+fn test2() -> int { let val = box(GC) 0; { } *val }\n \n struct S { eax: int }\n \n fn test3() {\n-    let regs = @Cell::new(S {eax: 0});\n+    let regs = box(GC) Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }\n     regs.set(S {eax: 1});\n }\n \n-fn test4() -> bool { let regs = @true; if true { } *regs || false }\n+fn test4() -> bool { let regs = box(GC) true; if true { } *regs || false }\n \n fn test5() -> (int, int) { { } (0, 1) }\n \n fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n-    let regs = @0;\n+    let regs = box(GC) 0;\n     match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n-    let val = @0;\n+    let val = box(GC) 0;\n     match true {\n         true => { }\n         _    => { }\n@@ -54,12 +55,12 @@ fn test8() -> int {\n }\n \n fn test9() {\n-    let regs = @Cell::new(0);\n+    let regs = box(GC) Cell::new(0);\n     match true { true => { } _ => { } } regs.set(regs.get() + 1);\n }\n \n fn test10() -> int {\n-    let regs = @vec!(0);\n+    let regs = box(GC) vec!(0);\n     match true { true => { } _ => { } }\n     *(*regs).get(0)\n }"}, {"sha": "54ee90d763cb8649a57903708d8eba5ab925cc52", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,9 @@\n #![feature(managed_boxes)]\n \n // error-pattern:meep\n-fn f(_a: int, _b: int, _c: @int) { fail!(\"moop\"); }\n \n-fn main() { f(1, fail!(\"meep\"), @42); }\n+use std::gc::{Gc, GC};\n+\n+fn f(_a: int, _b: int, _c: Gc<int>) { fail!(\"moop\"); }\n+\n+fn main() { f(1, fail!(\"meep\"), box(GC) 42); }"}, {"sha": "df170023dc4a7589f24565e711fdd69ffbe063f2", "filename": "src/test/run-fail/issue-2272.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,15 +13,16 @@\n // error-pattern:explicit failure\n // Issue #2272 - unwind this without leaking the unique pointer\n \n+use std::gc::{Gc, GC};\n \n struct X { y: Y, a: Box<int> }\n \n-struct Y { z: @int }\n+struct Y { z: Gc<int> }\n \n fn main() {\n     let _x = X {\n         y: Y {\n-            z: @0\n+            z: box(GC) 0\n         },\n         a: box 0\n     };"}, {"sha": "2f6bd9ad255e022fa763b7c37c20fad9e0302aee", "filename": "src/test/run-fail/unwind-assert.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,7 +12,9 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn main() {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     assert!(false);\n }"}, {"sha": "b513757a4c8184c6ae9204dbe452b0d684204df5", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,13 +14,15 @@\n \n extern crate debug;\n \n+use std::gc::{GC, Gc};\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n     let y = box 0;\n-    let x: @proc():Send = @(proc() {\n+    let x: Gc<proc():Send> = box(GC) (proc() {\n         println!(\"{:?}\", y.clone());\n     });\n     failfn();"}, {"sha": "ce24d265504c75fbebe193da84082ebfa5f3e52e", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,6 +15,7 @@\n extern crate debug;\n \n use std::mem;\n+use std::gc::GC;\n \n fn failfn() {\n     fail!();\n@@ -43,7 +44,7 @@ fn main() {\n         let i1 = box 0;\n         let i1p = mem::transmute_copy(&i1);\n         mem::forget(i1);\n-        let x = @r(i1p);\n+        let x = box(GC) r(i1p);\n         failfn();\n         println!(\"{:?}\", x);\n     }"}, {"sha": "647d33013a17bcc30d84c8f71e884da535b8604f", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,12 +14,14 @@\n \n extern crate debug;\n \n+use std::gc::GC;\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n-    let x = @\"hi\".to_string();\n+    let x = box(GC) \"hi\".to_string();\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "086c4012087ce1da9cd5cc7d06c38da894c75a31", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,12 +14,14 @@\n \n extern crate debug;\n \n+use std::gc::GC;\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n-    let x = @box box 0;\n+    let x = box(GC) box box 0;\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "4add29bc873833f83d51273dabec44778cbb61b5", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,12 +14,14 @@\n \n extern crate debug;\n \n+use std::gc::GC;\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n-    let x = @box 0;\n+    let x = box(GC) box 0;\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "f18e55b305e544887c97842ba75527612f32edc7", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,12 +14,14 @@\n \n extern crate debug;\n \n+use std::gc::GC;\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n-    let x = @vec!(0, 1, 2, 3, 4, 5);\n+    let x = box(GC) vec!(0, 1, 2, 3, 4, 5);\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "e31f66ed9fb0857eb8cac854d2c9e6053443fa40", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,11 +12,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn failfn() {\n     fail!();\n }\n \n fn main() {\n-    @0;\n+    box(GC) 0;\n     failfn();\n }"}, {"sha": "5dbfd73c1d7e7cea1334beca85348a177bfc2149", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,7 +12,9 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn main() {\n-    @0;\n+    box(GC) 0;\n     fail!();\n }"}, {"sha": "e913a803885285e59c006db718f5eb3f3d0bd754", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:fail\n+\n #![feature(managed_boxes)]\n \n-// error-pattern:fail\n+use std::gc::Gc;\n \n-fn f() -> @int { fail!(); }\n+fn f() -> Gc<int> { fail!(); }\n \n fn main() {\n-    let _a: @int = f();\n+    let _a: Gc<int> = f();\n }"}, {"sha": "c383aaaf10883bb2f457331299f72a9cf5a59ed2", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:fail\n+\n #![feature(managed_boxes)]\n \n-// error-pattern:fail\n+use std::gc::Gc;\n \n fn main() {\n-    let _a: @int = {\n+    let _a: Gc<int> = {\n         fail!();\n     };\n }"}, {"sha": "8671758c42307cca64f4ec6dfe4e2faa25d6e1be", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,12 +14,14 @@\n #![allow(unreachable_code)]\n #![allow(unused_variable)]\n \n+use std::gc::GC;\n+\n fn x(it: |int|) {\n     fail!();\n     it(0);\n }\n \n fn main() {\n-    let a = @0;\n+    let a = box(GC) 0;\n     x(|_i| { } );\n }"}, {"sha": "d7b950ad5c19fa7a24484ebabd376802dab94044", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,8 +12,10 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC};\n+\n fn x(it: |int|) {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     it(1);\n }\n "}, {"sha": "543056afb8260ee3ee3f2a4ee624085fc4d5b64d", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,15 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:fail\n+\n #![feature(managed_boxes)]\n \n-// error-pattern:fail\n+use std::gc::{Gc, GC};\n \n fn main() {\n     let cheese = \"roquefort\".to_string();\n-    let carrots = @\"crunchy\".to_string();\n+    let carrots = box(GC) \"crunchy\".to_string();\n \n-    let result: |@String, |String||: 'static = (|tasties, macerate| {\n+    let result: |Gc<String>, |String||: 'static = (|tasties, macerate| {\n         macerate((*tasties).clone());\n     });\n     result(carrots, |food| {"}, {"sha": "4f1e454c39e3f02731252f2bfd69823cd600c63d", "filename": "src/test/run-fail/unwind-match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n-\n // Issue #945\n // error-pattern:non-exhaustive match failure\n+\n+#![feature(managed_boxes)]\n+\n+use std::gc::GC;\n+\n fn test_box() {\n-    @0;\n+    box(GC) 0;\n }\n fn test_str() {\n   let res = match false { true => { \"happy\".to_string() },"}, {"sha": "00d9309f4583198fbb582b0629802124e91d7f70", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,15 +15,16 @@\n \n use std::vec;\n use std::collections;\n+use std::gc::GC;\n \n fn main() {\n-    let _count = @0u;\n+    let _count = box(GC) 0u;\n     let mut map = collections::HashMap::new();\n     let mut arr = Vec::new();\n     for _i in range(0u, 10u) {\n-        arr.push(@\"key stuff\".to_string());\n+        arr.push(box(GC) \"key stuff\".to_string());\n         map.insert(arr.clone(),\n-                   arr.clone().append([@\"value stuff\".to_string()]));\n+                   arr.clone().append([box(GC) \"value stuff\".to_string()]));\n         if arr.len() == 5 {\n             fail!();\n         }"}, {"sha": "b1d9f4756c6ad2b5b4545df1be1fc13ad4087a0e", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:fail\n+\n #![feature(managed_boxes)]\n \n-// error-pattern:fail\n-fn f(_a: @int) {\n+use std::gc::{Gc, GC};\n+\n+fn f(_a: Gc<int>) {\n     fail!();\n }\n \n fn main() {\n-    let a = @0;\n+    let a = box(GC) 0;\n     f(a);\n }"}, {"sha": "b7a12f08c410e8e4536897066e851cedc36914b7", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,10 +12,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn main() {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     {\n-        let _b = @0;\n+        let _b = box(GC) 0;\n         {\n             fail!();\n         }"}, {"sha": "2bd264d0e3365b34a1ec278574b8a3c2f3411cc0", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,17 +12,18 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    @0;\n+    box(GC) 0;\n }\n \n fn partial() {\n-    let _x = @f();\n+    let _x = box(GC) f();\n }\n \n fn main() {"}, {"sha": "4ea099e9c0f36f34522eacc56f571279302cbc60", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,13 +12,14 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    @0;\n+    box(GC) 0;\n }\n \n fn partial() {"}, {"sha": "e0e043f623ba6f7f8855f498b3dfbcab4dbcb463", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,13 +12,14 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    @0;\n+    box(GC) 0;\n }\n \n fn partial() {"}, {"sha": "498d3ee6b0bc1484fc72061a74df935d313b3731", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n // error-pattern:squirrel\n \n+use std::gc::GC;\n+\n struct r {\n     i: int,\n }\n@@ -23,6 +25,6 @@ impl Drop for r {\n fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n-    @0;\n+    box(GC) 0;\n     let _r = r(0);\n }"}, {"sha": "add7fe3f0f35961208f825f310b3720238eb805d", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,8 @@\n // ignore-test leaks\n // error-pattern:wombat\n \n+use std::gc::GC;\n+\n struct r {\n     i: int,\n }\n@@ -22,7 +24,7 @@ impl Drop for r {\n fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n-    @0;\n+    box(GC) 0;\n     let r = r(0);\n     fail!();\n }"}, {"sha": "6252944973d651586927ffe24b81d4e364e8db12", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,12 +12,14 @@\n \n // error-pattern:quux\n \n+use std::gc::{Gc, GC};\n+\n struct faily_box {\n-    i: @int\n+    i: Gc<int>\n }\n // What happens to the box pointer owned by this class?\n \n-fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n+fn faily_box(i: Gc<int>) -> faily_box { faily_box { i: i } }\n \n #[unsafe_destructor]\n impl Drop for faily_box {\n@@ -27,5 +29,5 @@ impl Drop for faily_box {\n }\n \n fn main() {\n-    faily_box(@10);\n+    faily_box(box(GC) 10);\n }"}, {"sha": "da6205e9e373477fd6d22de518775e0ddd09476d", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,17 +12,19 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn f() {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     fail!();\n }\n \n fn g() {\n-    let _b = @0;\n+    let _b = box(GC) 0;\n     f();\n }\n \n fn main() {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     g();\n }"}, {"sha": "08a22a7c355b779e82f7a7458ab9d99e2fc7b8e7", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n \n // error-pattern:fail\n \n-fn fold_local() -> @Vec<int> {\n+fn fold_local() -> Gc<Vec<int>> {\n     fail!();\n }\n "}, {"sha": "26073531dd305aaf0a8a1a5ca79c8dbcc4328f23", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,14 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n // error-pattern:fail\n \n-fn fold_local() -> @Vec<int> {\n-    @vec!(0,0,0,0,0,0)\n+fn fold_local() -> Gc<Vec<int>> {\n+    box(GC) vec!(0,0,0,0,0,0)\n }\n \n-fn fold_remote() -> @Vec<int> {\n+fn fold_remote() -> Gc<Vec<int>> {\n     fail!();\n }\n "}, {"sha": "acba93f7be3ba7e6de20e01d3ad19b698b04d6a9", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,11 +12,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn f() {\n     fail!();\n }\n \n fn main() {\n     f();\n-    let _a = @0;\n+    let _a = box(GC) 0;\n }"}, {"sha": "59bf0bff5d8805e1f105f2413e2a611265fe7977", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -17,22 +17,23 @@\n extern crate syntax;\n \n use syntax::ext::base::ExtCtxt;\n+use std::gc::Gc;\n \n fn syntax_extension(cx: &ExtCtxt) {\n     let e_toks : Vec<syntax::ast::TokenTree> = quote_tokens!(cx, 1 + 2);\n     let p_toks : Vec<syntax::ast::TokenTree> = quote_tokens!(cx, (x, 1 .. 4, *));\n \n-    let a: @syntax::ast::Expr = quote_expr!(cx, 1 + 2);\n-    let _b: Option<@syntax::ast::Item> = quote_item!(cx, static foo : int = $e_toks; );\n-    let _c: @syntax::ast::Pat = quote_pat!(cx, (x, 1 .. 4, *) );\n-    let _d: @syntax::ast::Stmt = quote_stmt!(cx, let x = $a; );\n-    let _e: @syntax::ast::Expr = quote_expr!(cx, match foo { $p_toks => 10 } );\n+    let a: Gc<syntax::ast::Expr> = quote_expr!(cx, 1 + 2);\n+    let _b: Option<Gc<syntax::ast::Item>> = quote_item!(cx, static foo : int = $e_toks; );\n+    let _c: Gc<syntax::ast::Pat> = quote_pat!(cx, (x, 1 .. 4, *) );\n+    let _d: Gc<syntax::ast::Stmt> = quote_stmt!(cx, let x = $a; );\n+    let _e: Gc<syntax::ast::Expr> = quote_expr!(cx, match foo { $p_toks => 10 } );\n \n-    let _f: @syntax::ast::Expr = quote_expr!(cx, ());\n-    let _g: @syntax::ast::Expr = quote_expr!(cx, true);\n-    let _h: @syntax::ast::Expr = quote_expr!(cx, 'a');\n+    let _f: Gc<syntax::ast::Expr> = quote_expr!(cx, ());\n+    let _g: Gc<syntax::ast::Expr> = quote_expr!(cx, true);\n+    let _h: Gc<syntax::ast::Expr> = quote_expr!(cx, 'a');\n \n-    let i: Option<@syntax::ast::Item> = quote_item!(cx, #[deriving(Eq)] struct Foo; );\n+    let i: Option<Gc<syntax::ast::Item>> = quote_item!(cx, #[deriving(Eq)] struct Foo; );\n     assert!(i.is_some());\n }\n "}, {"sha": "debe4d8ea53ac3ccfd9414eb978740cae6db5da2", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n #[deriving(PartialEq, Show)]\n struct Point { x : int }\n \n@@ -18,5 +20,5 @@ pub fn main() {\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n     assert_eq!(box Point{x:34},box Point{x:34});\n     assert_eq!(&Point{x:34},&Point{x:34});\n-    assert_eq!(@Point{x:34},@Point{x:34});\n+    assert_eq!(box(GC) Point{x:34},box(GC) Point{x:34});\n }"}, {"sha": "acb3e43fbfc4bb65c880075e1bcbde7d9c3a020f", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC, Gc};\n+\n trait double {\n     fn double(self) -> uint;\n }\n@@ -18,11 +20,11 @@ impl double for uint {\n     fn double(self) -> uint { self }\n }\n \n-impl double for @uint {\n+impl double for Gc<uint> {\n     fn double(self) -> uint { *self * 2u }\n }\n \n pub fn main() {\n-    let x = @3u;\n+    let x = box(GC) 3u;\n     assert_eq!(x.double(), 6u);\n }"}, {"sha": "ee4431609cc1568e0a59bb351fc2284029532677", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,13 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n trait Foo {\n     fn foo(&self) -> String;\n }\n \n-impl<T:Foo> Foo for @T {\n+impl<T:Foo> Foo for Gc<T> {\n     fn foo(&self) -> String {\n-        format!(\"@{}\", (**self).foo())\n+        format!(\"box(GC) {}\", (**self).foo())\n     }\n }\n \n@@ -27,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = @3u;\n-    assert_eq!(x.foo(), \"@3\".to_string());\n+    let x = box(GC) 3u;\n+    assert_eq!(x.foo(), \"box(GC) 3\".to_string());\n }"}, {"sha": "9c1b64004a2bfe148dec7a5d3251fa8578b44194", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn test_nil() {\n     assert_eq!((), ());\n     assert!((!(() != ())));\n@@ -45,7 +47,7 @@ fn test_bool() {\n }\n \n fn test_box() {\n-    assert_eq!(@10, @10);\n+    assert_eq!(box(GC) 10, box(GC) 10);\n }\n \n fn test_ptr() {"}, {"sha": "dd1224929c7f316fe272f8177d00c91baafb6736", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n fn borrow(x: &int, f: |x: &int|) {\n     f(x)\n }\n \n-fn test1(x: @Box<int>) {\n+fn test1(x: Gc<Box<int>>) {\n     borrow(&*(*x).clone(), |p| {\n         let x_a = &**x as *int;\n         assert!((x_a as uint) != (p as *int as uint));\n@@ -24,5 +25,5 @@ fn test1(x: @Box<int>) {\n }\n \n pub fn main() {\n-    test1(@box 22);\n+    test1(box(GC) box 22);\n }"}, {"sha": "b75b391a2393307d4c30c5462a62c70938da551b", "filename": "src/test/run-pass/borrowck-preserve-box-in-moved-value.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,22 +15,24 @@\n \n #![feature(managed_boxes)]\n \n-fn free<T>(x: @T) {}\n+use std::gc::{Gc, GC};\n+\n+fn free<T>(x: Gc<T>) {}\n \n struct Foo {\n-    f: @Bar\n+    f: Gc<Bar>\n }\n \n struct Bar {\n     g: int\n }\n \n-fn lend(x: @Foo) -> int {\n+fn lend(x: Gc<Foo>) -> int {\n     let y = &x.f.g;\n     free(x); // specifically here, if x is not rooted, it will be freed\n     *y\n }\n \n pub fn main() {\n-    assert_eq!(lend(@Foo {f: @Bar {g: 22}}), 22);\n+    assert_eq!(lend(box(GC) Foo {f: box(GC) Bar {g: 22}}), 22);\n }"}, {"sha": "329db099e41fdbcb8abcac2b2b110306a8d3e440", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC, Gc};\n \n-struct F { f: @G }\n+struct F { f: Gc<G> }\n struct G { g: Vec<int> }\n \n pub fn main() {\n-    let rec = @F {f: @G {g: vec!(1, 2, 3)}};\n+    let rec = box(GC) F {f: box(GC) G {g: vec!(1, 2, 3)}};\n     while rec.f.g.len() == 23 {}\n }"}, {"sha": "eda8637adc4cf245039443f8b809b513320f1f7a", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n fn borrow<'r,T>(x: &'r T) -> &'r T {x}\n \n-struct Rec { f: @int }\n+struct Rec { f: Gc<int> }\n \n pub fn main() {\n-    let rec = @Rec {f: @22};\n+    let rec = box(GC) Rec {f: box(GC) 22};\n     while *borrow(rec.f) == 23 {}\n }"}, {"sha": "b096ff3de1f3c5791d677304e9169fb0081d41e0", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,7 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::GC;\n \n enum newtype {\n     newtype(int)\n@@ -21,8 +22,8 @@ pub fn main() {\n     // Test that borrowck treats enums with a single variant\n     // specially.\n \n-    let x = @Cell::new(5);\n-    let y = @Cell::new(newtype(3));\n+    let x = box(GC) Cell::new(5);\n+    let y = box(GC) Cell::new(newtype(3));\n     let z = match y.get() {\n       newtype(b) => {\n         x.set(x.get() + 1);"}, {"sha": "facd390620fb593a5306dac90934ecbb89ade95b", "filename": "src/test/run-pass/box-compare.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,8 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n pub fn main() {\n-    assert!((@1 < @3));\n-    assert!((@@\"hello \".to_string() > @@\"hello\".to_string()));\n-    assert!((@@@\"hello\".to_string() != @@@\"there\".to_string()));\n+    assert!((box(GC) 1 < box(GC) 3));\n+    assert!((box(GC) box(GC) \"hello \".to_string() >\n+             box(GC) box(GC) \"hello\".to_string()));\n+    assert!((box(GC) box(GC) box(GC) \"hello\".to_string() !=\n+             box(GC) box(GC) box(GC) \"there\".to_string()));\n }"}, {"sha": "7959bd385d3db586782727cdbc734b8b6f47a0aa", "filename": "src/test/run-pass/box-in-tup.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n pub fn main() {\n-    let i: (@int, int) = (@10, 10);\n+    let i: (Gc<int>, int) = (box(GC) 10, 10);\n     let (_a, _) = i;\n }"}, {"sha": "3f11f8b240b30eecee9fb4b802654d2e5da79511", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n-fn some_box(x: int) -> @int { return @x; }\n+use std::gc::{GC, Gc};\n+\n+fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n \n fn is_odd(_n: int) -> bool { return true; }\n \n-fn length_is_even(_vs: @int) -> bool { return true; }\n+fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n     if is_odd(n) && length_is_even(some_box(1)) { println!(\"bloop\"); }"}, {"sha": "d494d2d7e81761106017589e0d891f25090f436c", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n-fn some_box(x: int) -> @int { return @x; }\n+use std::gc::{Gc, GC};\n+\n+fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n \n fn is_odd(_n: int) -> bool { return true; }\n \n-fn length_is_even(_vs: @int) -> bool { return true; }\n+fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n     if is_odd(n) || length_is_even(some_box(1)) { println!(\"bloop\"); }"}, {"sha": "d360474cc9c52c14a52d9dc8f06a2fa59e7dd465", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,13 +10,15 @@\n \n #![feature(managed_boxes)]\n \n-struct Box<T> {c: @T}\n+use std::gc::{Gc, GC};\n+\n+struct Box<T> {c: Gc<T>}\n \n fn unbox<T:Clone>(b: Box<T>) -> T { return (*b.c).clone(); }\n \n pub fn main() {\n     let foo: int = 17;\n-    let bfoo: Box<int> = Box {c: @foo};\n+    let bfoo: Box<int> = Box {c: box(GC) foo};\n     println!(\"see what's in our box\");\n     assert_eq!(unbox::<int>(bfoo), foo);\n }"}, {"sha": "4c368b78b2d79eae3e60f70540d0203b054e6e0f", "filename": "src/test/run-pass/box.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,4 +10,6 @@\n \n #![feature(managed_boxes)]\n \n-pub fn main() { let x: @int = @10; assert!((*x == 10)); }\n+use std::gc::{Gc, GC};\n+\n+pub fn main() { let x: Gc<int> = box(GC) 10; assert!((*x == 10)); }"}, {"sha": "377d27d1d456d450beefed6b504e5675c48cf655", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,14 +13,16 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct Tree<T> {\n     parent: Option<T>\n }\n \n fn empty<T>() -> Tree<T> { fail!() }\n \n struct Box {\n-    tree: Tree<@Box>\n+    tree: Tree<Gc<Box>>\n }\n \n fn Box() -> Box {\n@@ -30,7 +32,7 @@ fn Box() -> Box {\n }\n \n struct LayoutData {\n-    a_box: Option<@Box>\n+    a_box: Option<Gc<Box>>\n }\n \n pub fn main() { }"}, {"sha": "324fb428df019d49f34d927decfe1fa0589cc4c6", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,9 +14,10 @@\n \n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n+use std::gc::GC;\n \n pub fn main() {\n-    let p = @22u;\n+    let p = box(GC) 22u;\n     let r = foo(p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "b8989afcff3bc9b478859956c77639dbd04d0403", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct kitten {\n     cat: Option<cat>,\n }\n@@ -20,6 +22,6 @@ fn kitten(cat: Option<cat>) -> kitten {\n     }\n }\n \n-type cat = @kitten;\n+type cat = Gc<kitten>;\n \n pub fn main() {}"}, {"sha": "58e4d1a7aab93fac2abf46291f9d10a647bac071", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,11 +11,12 @@\n #![feature(managed_boxes)]\n \n use std::task;\n+use std::gc::{GC, Gc};\n \n-fn adder(x: @int, y: @int) -> int { return *x + *y; }\n-fn failer() -> @int { fail!(); }\n+fn adder(x: Gc<int>, y: Gc<int>) -> int { return *x + *y; }\n+fn failer() -> Gc<int> { fail!(); }\n pub fn main() {\n     assert!(task::try(proc() {\n-        adder(@2, failer()); ()\n+        adder(box(GC) 2, failer()); ()\n     }).is_err());\n }"}, {"sha": "13ca344cc4e76bb76e2f1a4f64ec0b3458209d0a", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,10 +18,12 @@\n \n extern crate crate_method_reexport_grrrrrrr2;\n \n+use std::gc::GC;\n+\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x = @();\n+    let x = box(GC) ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "277f3e40c41efc809c8aa23c0da41a959f7db4fd", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,14 +11,15 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n enum taggy {\n-    cons(@RefCell<taggy>),\n+    cons(Gc<RefCell<taggy>>),\n     nil,\n }\n \n fn f() {\n-    let a_box = @RefCell::new(nil);\n+    let a_box = box(GC) RefCell::new(nil);\n     *a_box.borrow_mut() = cons(a_box);\n }\n "}, {"sha": "f507956960639809650c0887da25807da48609a6", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,9 +13,10 @@\n extern crate debug;\n \n use std::cell::Cell;\n+use std::gc::GC;\n \n pub fn main() {\n-    let x = @Cell::new(5);\n+    let x = box(GC) Cell::new(5);\n     x.set(1000);\n     println!(\"{:?}\", x.get());\n }"}, {"sha": "3d29b7bca8b65d89f67bd57f6dcf7bfe98ab0669", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n pub fn main() {\n-    let x: @int = @10;\n+    let x: Gc<int> = box(GC) 10;\n     let _y: int = *x;\n }"}, {"sha": "d019b191a5e277eb8a511b66e608e8144968a840", "filename": "src/test/run-pass/double-unbox.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n struct Quux {\n     bar: int\n }\n \n fn g(_i: int) { }\n-fn f(foo: @@Quux) { g(foo.bar); }\n+fn f(foo: Gc<Gc<Quux>>) { g(foo.bar); }\n \n pub fn main() { }"}, {"sha": "56a2e55fea5d13c3af81aa8f8f1c678499fd6281", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n-enum t { foo(@int), }\n+use std::gc::{Gc, GC};\n+\n+enum t { foo(Gc<int>), }\n \n pub fn main() {\n-    let tt = foo(@10);\n+    let tt = foo(box(GC) 10);\n     match tt { foo(_z) => { } }\n }"}, {"sha": "4ddff8d899afe9a120a1bcf7fe5c73ccf824859a", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -16,9 +16,11 @@\n  * represented with nullable pointers could be misoptimized in some cases.\n  */\n \n-enum List<X> { Nil, Cons(X, @List<X>) }\n+use std::gc::{Gc, GC};\n+\n+enum List<X> { Nil, Cons(X, Gc<List<X>>) }\n pub fn main() {\n-    match Cons(10, @Nil) {\n+    match Cons(10, box(GC) Nil) {\n         Cons(10, _) => {}\n         Nil => {}\n         _ => fail!()"}, {"sha": "d9495642abb3de2f88169e72f071ddf1b8d6f508", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,10 +11,12 @@\n #![feature(managed_boxes)]\n #![allow(dead_assignment)]\n \n+use std::gc::{Gc, GC};\n+\n pub fn main() {\n-    let x : [@int, ..5] = [@1,@2,@3,@4,@5];\n-    let _y : [@int, ..5] = [@1,@2,@3,@4,@5];\n-    let mut z = [@1,@2,@3,@4,@5];\n+    let x : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n+    let _y : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n+    let mut z = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n     z = x;\n     assert_eq!(*z[0], 1);\n     assert_eq!(*z[4], 5);"}, {"sha": "7cdc83e0f0756b1b3280937f9a2a3e2d44d41a9e", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n-enum list_cell<T> { cons(@list_cell<T>), nil }\n+use std::gc::Gc;\n+\n+enum list_cell<T> { cons(Gc<list_cell<T>>), nil }\n \n pub fn main() { }"}, {"sha": "b9d005d945fb1d8eec4a4f30e4dba73d884dabf7", "filename": "src/test/run-pass/expr-block-box.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,4 +10,6 @@\n \n #![feature(managed_boxes)]\n \n-pub fn main() { let x = { @100 }; assert!((*x == 100)); }\n+use std::gc::GC;\n+\n+pub fn main() { let x = { box(GC) 100 }; assert!((*x == 100)); }"}, {"sha": "7c79861ef2a74d520ee4625945507ca6f75262e3", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,20 +10,22 @@\n \n #![feature(managed_boxes)]\n \n-type compare<T> = |@T, @T|: 'static -> bool;\n+use std::gc::{Gc, GC};\n \n-fn test_generic<T>(expected: @T, eq: compare<T>) {\n-    let actual: @T = { expected };\n+type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n+\n+fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n+    let actual: Gc<T> = { expected };\n     assert!((eq(expected, actual)));\n }\n \n fn test_box() {\n-    fn compare_box(b1: @bool, b2: @bool) -> bool {\n+    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool {\n         println!(\"{}\", *b1);\n         println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n-    test_generic::<bool>(@true, compare_box);\n+    test_generic::<bool>(box(GC) true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "e49728e5176bbdb898fd79f593ccb7f29dae0fef", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC, Gc};\n \n type compare<'a, T> = |T, T|: 'a -> bool;\n \n@@ -19,8 +20,8 @@ fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: @int, v2: @int) -> bool { return v1 == v2; }\n-    test_generic::<@int>(@1, compare_vec);\n+    fn compare_vec(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n+    test_generic::<Gc<int>>(box(GC) 1, compare_vec);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "df7ea0c943b38cd8742efa066fbddb9d7f344f0e", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,5 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n // Regression test for issue #388\n-pub fn main() { let _x = { { @10 } }; }\n+pub fn main() { let _x = { { box(GC) 10 } }; }"}, {"sha": "0753606a6632d3379b34fedd6f1f880d7d0c70f5", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n // Make sure we drop the refs of the temporaries needed to return the\n // values from the else if branch\n pub fn main() {\n-    let y: @uint = @10u;\n+    let y: Gc<uint> = box(GC) 10u;\n     let _x = if false { y } else if true { y } else { y };\n     assert_eq!(*y, 10u);\n }"}, {"sha": "51e3df7b26b5b685d4c908743df63eafe3d20efd", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,13 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC};\n+\n // Regression test for issue #388\n pub fn main() {\n     let _x = if false {\n-        @0u\n+        box(GC) 0u\n     } else if true {\n-        @10u\n+        box(GC) 10u\n     } else {\n-        @0u\n+        box(GC) 0u\n     };\n }"}, {"sha": "e1c6de0bf6bd213d468a9e8382caffbeff920b5a", "filename": "src/test/run-pass/expr-if-box.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    let rs = if true { @100 } else { @101 };\n+    let rs = if true { box(GC) 100 } else { box(GC) 101 };\n     assert_eq!(*rs, 100);\n }\n "}, {"sha": "24216296ea2b35723e601aeb23a310312a6cd4f0", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,16 +10,18 @@\n \n #![feature(managed_boxes)]\n \n-type compare<T> = |@T, @T|: 'static -> bool;\n+use std::gc::{GC, Gc};\n \n-fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n-    let actual: @T = if true { expected } else { not_expected };\n+type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n+\n+fn test_generic<T>(expected: Gc<T>, not_expected: Gc<T>, eq: compare<T>) {\n+    let actual: Gc<T> = if true { expected } else { not_expected };\n     assert!((eq(expected, actual)));\n }\n \n fn test_box() {\n-    fn compare_box(b1: @bool, b2: @bool) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(@true, @false, compare_box);\n+    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n+    test_generic::<bool>(box(GC) true, box(GC) false, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "9c5d363577d34a528f64f6016d26daccb011af6f", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n type compare<T> = |T, T|: 'static -> bool;\n \n@@ -19,8 +20,8 @@ fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(v1: @int, v2: @int) -> bool { return v1 == v2; }\n-    test_generic::<@int>(@1, @2, compare_box);\n+    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n+    test_generic::<Gc<int>>(box(GC) 1, box(GC) 2, compare_box);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "98218829d34a14f4d789c6fcd0cebe23faee7c8b", "filename": "src/test/run-pass/expr-match-box.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { @100 } _ => fail!(\"wat\") };\n+    let res = match true { true => { box(GC) 100 } _ => fail!(\"wat\") };\n     assert_eq!(*res, 100);\n }\n "}, {"sha": "0a7442ce2cd211d79ed5ce4463722ddad004fb57", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,16 +10,18 @@\n \n #![feature(managed_boxes)]\n \n-type compare<T> = |@T, @T|: 'static -> bool;\n+use std::gc::{Gc, GC};\n \n-fn test_generic<T>(expected: @T, eq: compare<T>) {\n-    let actual: @T = match true { true => { expected }, _ => fail!() };\n+type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n+\n+fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n+    let actual: Gc<T> = match true { true => { expected }, _ => fail!() };\n     assert!((eq(expected, actual)));\n }\n \n fn test_box() {\n-    fn compare_box(b1: @bool, b2: @bool) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(@true, compare_box);\n+    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n+    test_generic::<bool>(box(GC) true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "304cde1ccdd96d644a14133a565c4f28fa383bb6", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n type compare<T> = |T, T|: 'static -> bool;\n \n@@ -19,8 +20,8 @@ fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(v1: @int, v2: @int) -> bool { return v1 == v2; }\n-    test_generic::<@int>(@1, compare_box);\n+    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n+    test_generic::<Gc<int>>(box(GC) 1, compare_box);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "6c4ab3bac5bb263fcb51170923aad5c86e539343", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,18 +11,19 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n struct Point {x: int, y: int, z: int}\n \n-fn f(p: @Cell<Point>) {\n+fn f(p: Gc<Cell<Point>>) {\n     assert!((p.get().z == 12));\n     p.set(Point {x: 10, y: 11, z: 13});\n     assert!((p.get().z == 13));\n }\n \n pub fn main() {\n     let a: Point = Point {x: 10, y: 11, z: 12};\n-    let b: @Cell<Point> = @Cell::new(a);\n+    let b: Gc<Cell<Point>> = box(GC) Cell::new(a);\n     assert_eq!(b.get().z, 12);\n     f(b);\n     assert_eq!(a.z, 12);"}, {"sha": "7664d75cfb7bbd216a3c8734841973c54963f5ca", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,11 +12,13 @@\n \n extern crate debug;\n \n+use std::gc::{Gc, GC};\n+\n fn id<T>(t: T) -> T { return t; }\n \n pub fn main() {\n-    let expected = @100;\n-    let actual = id::<@int>(expected);\n+    let expected = box(GC) 100;\n+    let actual = id::<Gc<int>>(expected);\n     println!(\"{:?}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "fa3f971a7f0ed5a82aec58764891f8c854d9dee4", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n-fn box_it<T:'static>(x: Box<T>) -> @Box<T> { return @x; }\n+use std::gc::{Gc, GC};\n+\n+fn box_it<T:'static>(x: Box<T>) -> Gc<Box<T>> { return box(GC) x; }\n \n struct Box<T> {x: T, y: T, z: T}\n \n pub fn main() {\n-    let x: @Box<int> = box_it::<int>(Box{x: 1, y: 2, z: 3});\n+    let x: Gc<Box<int>> = box_it::<int>(Box{x: 1, y: 2, z: 3});\n     assert_eq!(x.y, 2);\n }"}, {"sha": "4863b61ed256d82e0b9a58df799518c9002d39a3", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,8 +10,10 @@\n \n #![feature(managed_boxes)]\n \n-struct Pair { x: @int, y: @int }\n+use std::gc::{Gc, GC};\n+\n+struct Pair { x: Gc<int>, y: Gc<int> }\n \n fn f<T>(t: T) { let _t1: T = t; }\n \n-pub fn main() { let x = Pair {x: @10, y: @12}; f(x); }\n+pub fn main() { let x = Pair {x: box(GC) 10, y: box(GC) 12}; f(x); }"}, {"sha": "43cf655582133f3b61890f0557a9d6808d60f20b", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n-struct Recbox<T> {x: @T}\n+use std::gc::{Gc, GC};\n \n-fn reclift<T:'static>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n+struct Recbox<T> {x: Gc<T>}\n+\n+fn reclift<T:'static>(t: T) -> Recbox<T> { return Recbox {x: box(GC) t}; }\n \n pub fn main() {\n     let foo: int = 17;"}, {"sha": "ef90eb2fa526273ebbb926526d4c3d7e1b3a76b7", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n extern crate debug;\n \n-fn f<T>(x: @T) -> @T { return x; }\n+use std::gc::{Gc, GC};\n \n-pub fn main() { let x = f(@3); println!(\"{:?}\", *x); }\n+fn f<T>(x: Gc<T>) -> Gc<T> { return x; }\n+\n+pub fn main() { let x = f(box(GC) 3); println!(\"{:?}\", *x); }"}, {"sha": "18d1b7f03a1d095a0dc1a2f6776934a8ffb6b38c", "filename": "src/test/run-pass/generic-ivec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,5 +10,7 @@\n \n #![feature(managed_boxes)]\n \n-fn f<T>(_v: @T) { }\n-pub fn main() { f(@vec!(1, 2, 3, 4, 5)); }\n+use std::gc::{Gc, GC};\n+\n+fn f<T>(_v: Gc<T>) { }\n+pub fn main() { f(box(GC) vec!(1, 2, 3, 4, 5)); }"}, {"sha": "2f8b07e364e6a50e51421a2c2b7926bca10f5f6f", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,9 +12,14 @@\n \n #![feature(managed_boxes)]\n \n-enum list<T> { cons(@T, @list<T>), nil, }\n+use std::gc::{Gc, GC};\n+\n+enum list<T> { cons(Gc<T>, Gc<list<T>>), nil, }\n \n pub fn main() {\n     let _a: list<int> =\n-        cons::<int>(@10, @cons::<int>(@12, @cons::<int>(@13, @nil::<int>)));\n+        cons::<int>(box(GC) 10,\n+        box(GC) cons::<int>(box(GC) 12,\n+        box(GC) cons::<int>(box(GC) 13,\n+        box(GC) nil::<int>)));\n }"}, {"sha": "1a0cc14f02ef8f49f1aece99356c1de379130c88", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,9 +12,11 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-enum option<T> { some(@T), none, }\n+use std::gc::{Gc, GC};\n+\n+enum option<T> { some(Gc<T>), none, }\n \n pub fn main() {\n-    let mut a: option<int> = some::<int>(@10);\n+    let mut a: option<int> = some::<int>(box(GC) 10);\n     a = none::<int>;\n }"}, {"sha": "6638b80680ec82fb9254358c21628bb4f8dead8d", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -17,6 +17,7 @@\n extern crate debug;\n \n use std::fmt;\n+use std::gc::GC;\n use std::io::MemWriter;\n use std::io;\n use std::str;\n@@ -42,7 +43,7 @@ pub fn main() {\n     t!(format!(\"{:?}\", 1), \"1\");\n     t!(format!(\"{:?}\", A), \"A\");\n     t!(format!(\"{:?}\", ()), \"()\");\n-    t!(format!(\"{:?}\", @(box 1, \"foo\")), \"@(box 1, \\\"foo\\\")\");\n+    t!(format!(\"{:?}\", box(GC) (box 1, \"foo\")), \"box(GC) (box 1, \\\"foo\\\")\");\n \n     // Various edge cases without formats\n     t!(format!(\"\"), \"\");"}, {"sha": "4c05103973f499843dd55dcde3b2e10bc25abf3b", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,12 +11,13 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n // Resources can't be copied, but storing into data structures counts\n // as a move unless the stored thing is used afterwards.\n \n struct r {\n-    i: @Cell<int>,\n+    i: Gc<Cell<int>>,\n }\n \n struct Box { x: r }\n@@ -28,22 +29,22 @@ impl Drop for r {\n     }\n }\n \n-fn r(i: @Cell<int>) -> r {\n+fn r(i: Gc<Cell<int>>) -> r {\n     r {\n         i: i\n     }\n }\n \n fn test_box() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n-        let _a = @r(i);\n+        let _a = box(GC) r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_rec() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n         let _a = Box {x: r(i)};\n     }\n@@ -55,33 +56,33 @@ fn test_tag() {\n         t0(r),\n     }\n \n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n         let _a = t0(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n         let _a = (r(i), 0);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n         let _a = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_box_rec() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     {\n-        let _a = @Box {\n+        let _a = box(GC) Box {\n             x: r(i)\n         };\n     }"}, {"sha": "3c353e0ac3ad1a9b13c17341def14e31b4b5f5f9", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -18,10 +18,11 @@ extern crate req;\n use req::request;\n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::gc::GC;\n \n pub fn main() {\n-  let v = vec!(@\"hi\".to_string());\n+  let v = vec!(box(GC) \"hi\".to_string());\n   let mut m: req::header_map = HashMap::new();\n-  m.insert(\"METHOD\".to_string(), @RefCell::new(v));\n+  m.insert(\"METHOD\".to_string(), box(GC) RefCell::new(v));\n   request::<int>(&m);\n }"}, {"sha": "37902b5da48685561829efc672f5752a2f3f81c5", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n struct Font {\n     fontbuf: uint,\n     cairo_font: uint,\n@@ -30,5 +32,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f = @Font();\n+    let _f = box(GC) Font();\n }"}, {"sha": "b62905634ad09d315b66ef52d5d47421fc9f289a", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,10 +11,11 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-3\n struct defer {\n-    b: @Cell<bool>,\n+    b: Gc<Cell<bool>>,\n }\n \n #[unsafe_destructor]\n@@ -24,14 +25,14 @@ impl Drop for defer {\n     }\n }\n \n-fn defer(b: @Cell<bool>) -> defer {\n+fn defer(b: Gc<Cell<bool>>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = @Cell::new(false);\n+    let dtor_ran = box(GC) Cell::new(false);\n     let _  = defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "f59c143c46fdadb351c302baa3d01d74fe4fde73", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,10 +11,11 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-2\n struct defer {\n-    b: @Cell<bool>,\n+    b: Gc<Cell<bool>>,\n }\n \n #[unsafe_destructor]\n@@ -24,14 +25,14 @@ impl Drop for defer {\n     }\n }\n \n-fn defer(b: @Cell<bool>) -> defer {\n+fn defer(b: Gc<Cell<bool>>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = @Cell::new(false);\n+    let dtor_ran = box(GC) Cell::new(false);\n     defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "fffd21e9e9e58eeedae9ec09ea612de7627ed6eb", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,9 +15,10 @@\n extern crate socketlib;\n extern crate libc;\n \n+use std::gc::GC;\n use socketlib::socket;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let _sock = @socket::socket_handle(fd);\n+    let _sock = box(GC) socket::socket_handle(fd);\n }"}, {"sha": "fe0b168e8fa917dca368eea70b5315f5b3966ba9", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }\n enum meal { to_go(order), for_here(order) }\n \n-fn foo(m: @meal, cond: bool) {\n+fn foo(m: Gc<meal>, cond: bool) {\n     match *m {\n       to_go(_) => { }\n       for_here(_) if cond => {}\n@@ -25,5 +27,5 @@ fn foo(m: @meal, cond: bool) {\n }\n \n pub fn main() {\n-    foo(@for_here(hamburger), true)\n+    foo(box(GC) for_here(hamburger), true)\n }"}, {"sha": "b133fcad3eb3db11ce249ca0c6e99cd0b8ec0c2e", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,12 +11,13 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n static S: &'static str = \"str\";\n \n struct list<T> {\n     element: T,\n-    next: Option<@RefCell<list<T>>>\n+    next: Option<Gc<RefCell<list<T>>>>\n }\n \n impl<T:'static> list<T> {\n@@ -26,7 +27,7 @@ impl<T:'static> list<T> {\n             next: None\n         };\n \n-        self.next = Some(@RefCell::new(newList));\n+        self.next = Some(box(GC) RefCell::new(newList));\n     }\n }\n "}, {"sha": "2b561ec4060dd4f6d74933b711685dd7bf2178bd", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,13 +12,16 @@\n \n extern crate debug;\n \n+use std::gc::{Gc, GC};\n+\n enum Token {\n-    Text(@String),\n-    ETag(@Vec<String> , @String),\n-    UTag(@Vec<String> , @String),\n-    Section(@Vec<String> , bool, @Vec<Token> , @String, @String, @String, @String, @String),\n-    IncompleteSection(@Vec<String> , bool, @String, bool),\n-    Partial(@String, @String, @String),\n+    Text(Gc<String>),\n+    ETag(Gc<Vec<String>> , Gc<String>),\n+    UTag(Gc<Vec<String>> , Gc<String>),\n+    Section(Gc<Vec<String>> , bool, Gc<Vec<Token>>, Gc<String>,\n+            Gc<String>, Gc<String>, Gc<String>, Gc<String>),\n+    IncompleteSection(Gc<Vec<String>> , bool, Gc<String>, bool),\n+    Partial(Gc<String>, Gc<String>, Gc<String>),\n }\n \n fn check_strs(actual: &str, expected: &str) -> bool\n@@ -37,13 +40,13 @@ pub fn main()\n // assert!(check_strs(fmt!(\"%?\", ETag(@~[\"foo\".to_string()], @\"bar\".to_string())),\n //                    \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));\n \n-    let t = Text(@\"foo\".to_string());\n-    let u = Section(@vec!(\"alpha\".to_string()),\n+    let t = Text(box(GC) \"foo\".to_string());\n+    let u = Section(box(GC) vec!(\"alpha\".to_string()),\n                           true,\n-                          @vec!(t),\n-                          @\"foo\".to_string(),\n-                    @\"foo\".to_string(), @\"foo\".to_string(), @\"foo\".to_string(),\n-                    @\"foo\".to_string());\n+                          box(GC) vec!(t),\n+                          box(GC) \"foo\".to_string(),\n+                    box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(),\n+                    box(GC) \"foo\".to_string());\n     let v = format!(\"{:?}\", u);    // this is the line that causes the seg fault\n     assert!(v.len() > 0);\n }"}, {"sha": "c99fb7765fb23324046740c9f96d24d246f7fc1d", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n \n pub struct Foo {\n     a: int,\n@@ -20,7 +21,7 @@ struct Bar<'a> {\n     b: &'a Foo,\n }\n \n-fn check(a: @Foo) {\n+fn check(a: Gc<Foo>) {\n     let _ic = Bar{ b: a, a: box None };\n }\n "}, {"sha": "80727b569dea9b4bf8d52713cd1469084a9f4d17", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Left(@17) {\n+    match Left(box(GC) 17) {\n         Right(()) => {}\n         _ => {}\n     }"}, {"sha": "84e9de9b924ab7a4f8c21c0582780f04c0b07ed9", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n extern crate debug;\n \n+use std::gc::GC;\n+\n fn assert_repr_eq<T>(obj : T, expected : String) {\n     assert_eq!(expected, format!(\"{:?}\", obj));\n }\n@@ -21,12 +23,12 @@ pub fn main() {\n     let tf = [true, false];\n     let x  = [(), ()];\n     let slice = x.slice(0,1);\n-    let z = @x;\n+    let z = box(GC) x;\n \n     assert_repr_eq(abc, \"[1, 2, 3]\".to_string());\n     assert_repr_eq(tf, \"[true, false]\".to_string());\n     assert_repr_eq(x, \"[(), ()]\".to_string());\n     assert_repr_eq(slice, \"&[()]\".to_string());\n     assert_repr_eq(&x, \"&[(), ()]\".to_string());\n-    assert_repr_eq(z, \"@[(), ()]\".to_string());\n+    assert_repr_eq(z, \"box(GC) [(), ()]\".to_string());\n }"}, {"sha": "9f6b281810e31f2f10e5cfd430ac67a247b675b5", "filename": "src/test/run-pass/issue-8983.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8983.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn main() {\n     fn f(_: proc()) {}\n     fn eat<T>(_: T) {}\n \n-    let x = @1;\n+    let x = box(GC) 1;\n     f(proc() { eat(x) });\n }"}, {"sha": "39b81d16519182ab16bdc1da6d6238049de975e6", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,9 +11,10 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{GC, Gc};\n \n struct r {\n-    b: @Cell<int>,\n+    b: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -23,14 +24,14 @@ impl Drop for r {\n     }\n }\n \n-fn r(b: @Cell<int>) -> r {\n+fn r(b: Gc<Cell<int>>) -> r {\n     r {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let b = @Cell::new(0);\n+    let b = box(GC) Cell::new(0);\n     {\n         let _p = Some(r(b));\n     }"}, {"sha": "ea17c6cd020b7549bd9bc0e54c726e98139a6c17", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,18 +11,19 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n enum maybe_pointy {\n     no_pointy,\n-    yes_pointy(@RefCell<Pointy>),\n+    yes_pointy(Gc<RefCell<Pointy>>),\n }\n \n struct Pointy {\n     x: maybe_pointy\n }\n \n pub fn main() {\n-    let m = @RefCell::new(Pointy { x : no_pointy });\n+    let m = box(GC) RefCell::new(Pointy { x : no_pointy });\n     *m.borrow_mut() = Pointy {\n         x: yes_pointy(m)\n     };"}, {"sha": "3cdaf850d80fdd9545143b38128bfc4d538fc60e", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n fn leaky<T>(_t: T) { }\n \n-pub fn main() { let x = @10; leaky::<@int>(x); }\n+pub fn main() { let x = box(GC) 10; leaky::<Gc<int>>(x); }"}, {"sha": "18ca6584f9edbe6792c9b88c5b8d5eec6c115cdf", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-enum t { a, b(@int), }\n+use std::gc::{Gc, GC};\n \n-pub fn main() { let mut x = b(@10); x = a; }\n+enum t { a, b(Gc<int>), }\n+\n+pub fn main() { let mut x = b(box(GC) 10); x = a; }"}, {"sha": "c42f610bcd1c3f0017af8f09964d3cac96d388b3", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n-enum list { cons(int, @list), nil, }\n+use std::gc::{Gc, GC};\n \n-pub fn main() { cons(10, @cons(11, @cons(12, @nil))); }\n+enum list { cons(int, Gc<list>), nil, }\n+\n+pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }"}, {"sha": "be16c68770a49d24923f19df32b4fd46814873da", "filename": "src/test/run-pass/mlist.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n-enum mlist { cons(int, @mlist), nil, }\n+use std::gc::{Gc, GC};\n \n-pub fn main() { cons(10, @cons(11, @cons(12, @nil))); }\n+enum mlist { cons(int, Gc<mlist>), nil, }\n+\n+pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }"}, {"sha": "19238193a1a540f3dff86c258a05e80bbd432958", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,18 +10,20 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n struct Triple { x: int, y: int, z: int }\n \n-fn test(x: bool, foo: @Triple) -> int {\n+fn test(x: bool, foo: Gc<Triple>) -> int {\n     let bar = foo;\n-    let mut y: @Triple;\n+    let mut y: Gc<Triple>;\n     y = bar;\n-    if x { y = bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n pub fn main() {\n-    let x = @Triple {x: 1, y: 2, z: 3};\n+    let x = box(GC) Triple {x: 1, y: 2, z: 3};\n     assert_eq!(test(true, x), 2);\n     assert_eq!(test(true, x), 2);\n     assert_eq!(test(true, x), 2);"}, {"sha": "d553141882607a4f6a530d8df1972d02c16af9a5", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = @X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x = box(GC) X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }"}, {"sha": "0ddc8371dab6f9c3b886d71bc807323ff1d90c51", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,17 +10,19 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n+\n struct Triple { x: int, y: int, z: int }\n \n-fn test(x: bool, foo: @Triple) -> int {\n+fn test(x: bool, foo: Gc<Triple>) -> int {\n     let bar = foo;\n-    let mut y: @Triple;\n-    if x { y = bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n+    let mut y: Gc<Triple>;\n+    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n pub fn main() {\n-    let x = @Triple{x: 1, y: 2, z: 3};\n+    let x = box(GC) Triple{x: 1, y: 2, z: 3};\n     for _i in range(0u, 10000u) {\n         assert_eq!(test(true, x), 2);\n     }"}, {"sha": "291996a63e330034894f3d63d413f328f32ed5a0", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC, Gc};\n+\n struct Triple { a: int, b: int, c: int }\n \n-fn test(foo: @Triple) -> @Triple {\n+fn test(foo: Gc<Triple>) -> Gc<Triple> {\n     let foo = foo;\n     let bar = foo;\n     let baz = bar;\n@@ -21,7 +23,7 @@ fn test(foo: @Triple) -> @Triple {\n }\n \n pub fn main() {\n-    let x = @Triple{a: 1, b: 2, c: 3};\n+    let x = box(GC) Triple{a: 1, b: 2, c: 3};\n     let y = test(x);\n     assert_eq!(y.c, 3);\n }"}, {"sha": "1977830733b9c57425a78c50ac15b0b05023041b", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,14 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n-fn test(foo: @Vec<int> ) { assert!((*foo.get(0) == 10)); }\n+fn test(foo: Gc<Vec<int>>) { assert!((*foo.get(0) == 10)); }\n \n pub fn main() {\n-    let x = @vec!(10);\n+    let x = box(GC) vec!(10);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(@vec!(10));\n+    test(box(GC) vec!(10));\n }"}, {"sha": "4c39be0ed192774b2b1e1ec974aae66cc06d3907", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,11 +11,14 @@\n #![feature(managed_boxes)]\n #![allow(unused_mut)]\n \n+use std::gc::{Gc, GC};\n \n struct Pair { a: int, b: int}\n \n pub fn main() {\n     // This just tests whether the vec leaks its members.\n-    let mut _pvec: Vec<@Pair> =\n-        vec!(@Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6});\n+    let mut _pvec: Vec<Gc<Pair>> =\n+        vec!(box(GC) Pair{a: 1, b: 2},\n+             box(GC) Pair{a: 3, b: 4},\n+             box(GC) Pair{a: 5, b: 6});\n }"}, {"sha": "41cf4c64b26cd9dc397ace60bd989b404ed9e2ca", "filename": "src/test/run-pass/mutual-recursion-group.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,14 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n+\n enum colour { red, green, blue, }\n \n-enum tree { children(@list), leaf(colour), }\n+enum tree { children(Gc<list>), leaf(colour), }\n \n-enum list { cons(@tree, @list), nil, }\n+enum list { cons(Gc<tree>, Gc<list>), nil, }\n \n-enum small_list { kons(int, @small_list), neel, }\n+enum small_list { kons(int, Gc<small_list>), neel, }\n \n pub fn main() { }"}, {"sha": "0150120e1dbcad86416acc8400ae02a5246668e5", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,7 +13,7 @@\n \n // Tests that the new `box` syntax works with unique pointers and GC pointers.\n \n-use std::gc::Gc;\n+use std::gc::{Gc, GC};\n use std::owned::{Box, HEAP};\n \n struct Structure {"}, {"sha": "3821efcb1bcf789607ec1e7f72abf7812006bc4a", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,8 +13,9 @@\n // Make sure the destructor is run for newtype structs.\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n-struct Foo(@Cell<int>);\n+struct Foo(Gc<Cell<int>>);\n \n #[unsafe_destructor]\n impl Drop for Foo {\n@@ -25,7 +26,7 @@ impl Drop for Foo {\n }\n \n pub fn main() {\n-    let y = @Cell::new(32);\n+    let y = box(GC) Cell::new(32);\n     {\n         let _x = Foo(y);\n     }"}, {"sha": "8b26ece176d4d58bc1e3f00df438f1be09c16cea", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,7 @@\n #![feature(macro_rules, managed_boxes)]\n \n use std::{option, mem};\n+use std::gc::{Gc, GC};\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n@@ -75,7 +76,7 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&17: &int);\n     check_type!(box 18: Box<int>);\n-    check_type!(@19: @int);\n+    check_type!(box(GC) 19: Gc<int>);\n     check_type!(\"foo\".to_string(): String);\n     check_type!(vec!(20, 22): Vec<int> );\n     let mint: uint = unsafe { mem::transmute(main) };"}, {"sha": "8a54f22585ff8fc9cd7a532e7ab99bfc7be2e418", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,7 @@\n #![feature(macro_rules, managed_boxes)]\n \n use std::mem;\n+use std::gc::Gc;\n \n enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n struct S<T>(int, T);\n@@ -39,6 +40,6 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&'static int);\n     check_type!(Box<int>);\n-    check_type!(@int);\n+    check_type!(Gc<int>);\n     check_type!(extern fn());\n }"}, {"sha": "be1b135ddc96626374ea8721df7b0e296a419dfd", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{Gc, GC};\n \n // Test invoked `&self` methods on owned objects where the values\n // closed over contain managed values. This implies that the boxes\n@@ -20,7 +21,7 @@ trait FooTrait {\n }\n \n struct BarStruct {\n-    x: @uint\n+    x: Gc<uint>\n }\n \n impl FooTrait for BarStruct {\n@@ -31,9 +32,9 @@ impl FooTrait for BarStruct {\n \n pub fn main() {\n     let foos: Vec<Box<FooTrait:>> = vec!(\n-        box BarStruct{ x: @0 } as Box<FooTrait:>,\n-        box BarStruct{ x: @1 } as Box<FooTrait:>,\n-        box BarStruct{ x: @2 } as Box<FooTrait:>\n+        box BarStruct{ x: box(GC) 0 } as Box<FooTrait:>,\n+        box BarStruct{ x: box(GC) 1 } as Box<FooTrait:>,\n+        box BarStruct{ x: box(GC) 2 } as Box<FooTrait:>\n     );\n \n     for i in range(0u, foos.len()) {"}, {"sha": "eea5296d7e4879a690b69bea5217563a75b829f1", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,9 +11,10 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{GC, Gc};\n \n struct dtor {\n-    x: @Cell<int>,\n+    x: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -32,7 +33,7 @@ fn unwrap<T>(o: Option<T>) -> T {\n }\n \n pub fn main() {\n-    let x = @Cell::new(1);\n+    let x = box(GC) Cell::new(1);\n \n     {\n         let b = Some(dtor { x:x });"}, {"sha": "f0728d0bd22c788dc2297e5674853683558665f7", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,28 +12,30 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n+use std::gc::{Gc, GC};\n+\n struct A { a: int, b: int }\n-struct Abox { a: @int, b: @int }\n+struct Abox { a: Gc<int>, b: Gc<int> }\n \n fn ret_int_i() -> int { return 10; }\n \n-fn ret_ext_i() -> @int { return @10; }\n+fn ret_ext_i() -> Gc<int> { return box(GC) 10; }\n \n fn ret_int_rec() -> A { return A {a: 10, b: 10}; }\n \n-fn ret_ext_rec() -> @A { return @A {a: 10, b: 10}; }\n+fn ret_ext_rec() -> Gc<A> { return box(GC) A {a: 10, b: 10}; }\n \n-fn ret_ext_mem() -> Abox { return Abox {a: @10, b: @10}; }\n+fn ret_ext_mem() -> Abox { return Abox {a: box(GC) 10, b: box(GC) 10}; }\n \n-fn ret_ext_ext_mem() -> @Abox { return @Abox{a: @10, b: @10}; }\n+fn ret_ext_ext_mem() -> Gc<Abox> { box(GC) Abox{a: box(GC) 10, b: box(GC) 10} }\n \n pub fn main() {\n     let mut int_i: int;\n-    let mut ext_i: @int;\n+    let mut ext_i: Gc<int>;\n     let mut int_rec: A;\n-    let mut ext_rec: @A;\n+    let mut ext_rec: Gc<A>;\n     let mut ext_mem: Abox;\n-    let mut ext_ext_mem: @Abox;\n+    let mut ext_ext_mem: Gc<Abox>;\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing"}, {"sha": "aedead36ed1917db86f042bd9c6dc717fe48ca18", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,6 +11,7 @@\n #![feature(managed_boxes)]\n \n use std::mem;\n+use std::gc::Gc;\n \n #[packed]\n struct S4 {\n@@ -48,7 +49,7 @@ struct S7_Option {\n     a: f32,\n     b: u8,\n     c: u16,\n-    d: Option<@f64>\n+    d: Option<Gc<f64>>\n }\n \n // Placing packed structs in statics should work\n@@ -62,5 +63,5 @@ pub fn main() {\n     assert_eq!(mem::size_of::<S5>(), 5);\n     assert_eq!(mem::size_of::<S13>(), 13);\n     assert_eq!(mem::size_of::<S3_Foo>(), 3 + mem::size_of::<Foo>());\n-    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<@f64>>());\n+    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<Gc<f64>>>());\n }"}, {"sha": "6e53774d68d4d6ad6eb0bf8a3369b0c078c17e6b", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::Gc;\n use std::mem;\n \n #[packed]\n@@ -30,7 +31,7 @@ enum Foo {\n struct S3_Foo(u8, u16, Foo);\n \n #[packed]\n-struct S7_Option(f32, u8, u16, Option<@f64>);\n+struct S7_Option(f32, u8, u16, Option<Gc<f64>>);\n \n pub fn main() {\n     assert_eq!(mem::size_of::<S4>(), 4);\n@@ -43,5 +44,5 @@ pub fn main() {\n                3 + mem::size_of::<Foo>());\n \n     assert_eq!(mem::size_of::<S7_Option>(),\n-              7 + mem::size_of::<Option<@f64>>());\n+              7 + mem::size_of::<Option<Gc<f64>>>());\n }"}, {"sha": "c7c088d59d4cf40a8e8646bf91151be93bab5113", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,14 +12,16 @@\n \n extern crate debug;\n \n+use std::gc::{GC, Gc};\n+\n fn magic(x: A) { println!(\"{:?}\", x); }\n-fn magic2(x: @int) { println!(\"{:?}\", x); }\n+fn magic2(x: Gc<int>) { println!(\"{:?}\", x); }\n \n-struct A { a: @int }\n+struct A { a: Gc<int> }\n \n pub fn main() {\n-    let a = A {a: @10};\n-    let b = @10;\n-    magic(a); magic(A {a: @20});\n-    magic2(b); magic2(@20);\n+    let a = A {a: box(GC) 10};\n+    let b = box(GC) 10;\n+    magic(a); magic(A {a: box(GC) 20});\n+    magic2(b); magic2(box(GC) 20);\n }"}, {"sha": "0d9f05b9e2663076a4d0983fbdabbd9e142a743d", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n trait get {\n     fn get(self) -> int;\n }\n@@ -24,11 +26,11 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = @6;\n+    let x = box(GC) 6;\n     let y = x.get();\n     assert_eq!(y, 6);\n \n-    let x = @6;\n+    let x = box(GC) 6;\n     let y = x.get();\n     println!(\"y={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "c6dfbabd448db02be25cb0028f56687901ed53ba", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,14 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn foo(x: &uint) -> uint {\n     *x\n }\n \n pub fn main() {\n-    let p = @22u;\n+    let p = box(GC) 22u;\n     let r = foo(p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "695a1b110da4e6a86d4980cecb9021ccbce7324a", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn foo<'r>(x: &'r uint) -> &'r uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = @3u;\n+    let p = box(GC) 3u;\n     assert_eq!(bar(foo(p)), 3);\n }"}, {"sha": "ee01a3837dcdb45cdcc32b7296119a82fce3e801", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+use std::gc::GC;\n \n fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n pub fn main() {\n-    let x = @3;\n+    let x = box(GC) 3;\n     loop {\n         let y = borrow(x);\n         assert_eq!(*x, *y);"}, {"sha": "c757762245325038657ddefe0ff425fd4affd501", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,14 +10,16 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n struct Point {x: int, y: int}\n \n fn x_coord<'r>(p: &'r Point) -> &'r int {\n     return &p.x;\n }\n \n pub fn main() {\n-    let p = @Point {x: 3, y: 4};\n+    let p = box(GC) Point {x: 3, y: 4};\n     let xc = x_coord(p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "7f266ec912abb90aaaf9ffb98d5267e0c6289880", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,9 +13,10 @@\n extern crate debug;\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n struct r {\n-    i: @Cell<int>,\n+    i: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -25,14 +26,14 @@ impl Drop for r {\n     }\n }\n \n-fn r(i: @Cell<int>) -> r {\n+fn r(i: Gc<Cell<int>>) -> r {\n     r {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let i = @Cell::new(0);\n+    let i = box(GC) Cell::new(0);\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);"}, {"sha": "85750899259c25987e27d3f89eae89e3f0bcda24", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,9 +11,10 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{GC, Gc};\n \n struct shrinky_pointer {\n-  i: @@Cell<int>,\n+  i: Gc<Gc<Cell<int>>>,\n }\n \n #[unsafe_destructor]\n@@ -27,14 +28,14 @@ impl shrinky_pointer {\n     pub fn look_at(&self) -> int { return self.i.get(); }\n }\n \n-fn shrinky_pointer(i: @@Cell<int>) -> shrinky_pointer {\n+fn shrinky_pointer(i: Gc<Gc<Cell<int>>>) -> shrinky_pointer {\n     shrinky_pointer {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let my_total = @@Cell::new(10);\n+    let my_total = box(GC) box(GC) Cell::new(10);\n     { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n     println!(\"my_total = {}\", my_total.get());\n     assert_eq!(my_total.get(), 9);"}, {"sha": "88edefdfe29a039847411a3198fd2662e84aba65", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,8 +14,9 @@\n // variant\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n-type closable = @Cell<bool>;\n+type closable = Gc<Cell<bool>>;\n \n struct close_res {\n   i: closable,\n@@ -40,7 +41,7 @@ enum option<T> { none, some(T), }\n fn sink(_res: option<close_res>) { }\n \n pub fn main() {\n-    let c = @Cell::new(true);\n+    let c = box(GC) Cell::new(true);\n     sink(none);\n     sink(some(close_res(c)));\n     assert!(!c.get());"}, {"sha": "b60f09d698fa116a206b40be3fdde9fb388101c2", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -17,12 +17,13 @@ extern crate debug;\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n \n+use std::gc::{Gc, GC};\n \n #[deriving(Clone)]\n enum opt_span {\n     //hack (as opposed to option), to make `span` compile\n     os_none,\n-    os_some(@Span),\n+    os_some(Gc<Span>),\n }\n \n #[deriving(Clone)]\n@@ -44,7 +45,7 @@ type ty_ = uint;\n struct Path_ {\n     global: bool,\n     idents: Vec<String> ,\n-    types: Vec<@ty>,\n+    types: Vec<Gc<ty>>,\n }\n \n type path = Spanned<Path_>;\n@@ -58,7 +59,7 @@ struct X {\n \n pub fn main() {\n     let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: os_none};\n-    let t: @ty = @Spanned { data: 3u, span: sp };\n+    let t: Gc<ty> = box(GC) Spanned { data: 3u, span: sp };\n     let p_: Path_ = Path_ {\n         global: true,\n         idents: vec!(\"hi\".to_string()),"}, {"sha": "391f0e20fccd945ef2b37b09bcea163cbb4130cf", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -14,21 +14,22 @@\n // Don't try to clean up uninitialized locals\n \n use std::task;\n+use std::gc::{Gc};\n \n-fn test_break() { loop { let _x: @int = break; } }\n+fn test_break() { loop { let _x: Gc<int> = break; } }\n \n-fn test_cont() { let mut i = 0; while i < 1 { i += 1; let _x: @int = continue; } }\n+fn test_cont() { let mut i = 0; while i < 1 { i += 1; let _x: Gc<int> = continue; } }\n \n-fn test_ret() { let _x: @int = return; }\n+fn test_ret() { let _x: Gc<int> = return; }\n \n fn test_fail() {\n-    fn f() { let _x: @int = fail!(); }\n+    fn f() { let _x: Gc<int> = fail!(); }\n     task::try(proc() f() );\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail!(); }\n-    fn g() { let _x: @int = f(); }\n+    fn g() { let _x: Gc<int> = f(); }\n     task::try(proc() g() );\n }\n "}, {"sha": "18209be0dece35439374f21cbb14d67f07645c28", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -15,8 +15,9 @@\n // Test cyclic detector when using trait instances.\n \n use std::cell::RefCell;\n+use std::gc::{GC, Gc};\n \n-struct Tree(@RefCell<TreeR>);\n+struct Tree(Gc<RefCell<TreeR>>);\n struct TreeR {\n     left: Option<Tree>,\n     right: Option<Tree>,\n@@ -55,12 +56,12 @@ impl to_str for Tree {\n fn foo<T:to_str>(x: T) -> String { x.to_str_() }\n \n pub fn main() {\n-    let t1 = Tree(@RefCell::new(TreeR{left: None,\n-                                      right: None,\n-                                      val: box 1 as Box<to_str+Send>}));\n-    let t2 = Tree(@RefCell::new(TreeR{left: Some(t1),\n-                                      right: Some(t1),\n-                                      val: box 2 as Box<to_str+Send>}));\n+    let t1 = Tree(box(GC) RefCell::new(TreeR{left: None,\n+                                       right: None,\n+                                       val: box 1 as Box<to_str+Send>}));\n+    let t2 = Tree(box(GC) RefCell::new(TreeR{left: Some(t1),\n+                                       right: Some(t1),\n+                                       val: box 2 as Box<to_str+Send>}));\n     let expected =\n         \"[2, some([1, none, none]), some([1, none, none])]\".to_string();\n     assert!(t2.to_str_() == expected);"}, {"sha": "b87517940c2666fdc6dd3d6a1f37b06457f001a9", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n \n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }\n@@ -31,15 +32,15 @@ fn r(i:int) -> r {\n \n pub fn main() {\n     p_foo(r(10));\n-    p_foo(@r(10));\n+    p_foo(box(GC) r(10));\n \n     p_foo(box r(10));\n-    p_foo(@10);\n+    p_foo(box(GC) 10);\n     p_foo(box 10);\n     p_foo(10);\n \n-    s_foo(@r(10));\n-    s_foo(@10);\n+    s_foo(box(GC) r(10));\n+    s_foo(box(GC) 10);\n     s_foo(box 10);\n     s_foo(10);\n "}, {"sha": "ef79412c75e66359ae420b8a265c49f8b18c4c4a", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,6 +13,8 @@\n // Example from lkuper's intern talk, August 2012 -- now with static\n // methods!\n \n+use std::gc::{GC, Gc};\n+\n trait Equal {\n     fn isEq(a: Self, b: Self) -> bool;\n }\n@@ -33,7 +35,7 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(@ColorTree, @ColorTree)\n+    branch(Gc<ColorTree>, Gc<ColorTree>)\n }\n \n impl Equal for ColorTree {\n@@ -57,11 +59,11 @@ pub fn main() {\n     assert!(Equal::isEq(leaf(cyan), leaf(cyan)));\n     assert!(!Equal::isEq(leaf(cyan), leaf(yellow)));\n \n-    assert!(Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n-                branch(@leaf(magenta), @leaf(cyan))));\n+    assert!(Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n+                branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n \n-    assert!(!Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n-                 branch(@leaf(magenta), @leaf(magenta))));\n+    assert!(!Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n+                 branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "e063f9ecb74d639fbaf86f2487eb900d7717c120", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,8 @@\n \n // Example from lkuper's intern talk, August 2012.\n \n+use std::gc::{GC, Gc};\n+\n trait Equal {\n     fn isEq(&self, a: Self) -> bool;\n }\n@@ -32,7 +34,7 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(@ColorTree, @ColorTree)\n+    branch(Gc<ColorTree>, Gc<ColorTree>)\n }\n \n impl Equal for ColorTree {\n@@ -56,11 +58,11 @@ pub fn main() {\n     assert!(leaf(cyan).isEq(leaf(cyan)));\n     assert!(!leaf(cyan).isEq(leaf(yellow)));\n \n-    assert!(branch(@leaf(magenta), @leaf(cyan))\n-        .isEq(branch(@leaf(magenta), @leaf(cyan))));\n+    assert!(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n+        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n \n-    assert!(!branch(@leaf(magenta), @leaf(cyan))\n-        .isEq(branch(@leaf(magenta), @leaf(magenta))));\n+    assert!(!branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n+        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "77a8009c97593b4c8994a1a68e61068db4515005", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -13,10 +13,11 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n enum maybe_pointy {\n     none,\n-    p(@RefCell<Pointy>),\n+    p(Gc<RefCell<Pointy>>),\n }\n \n struct Pointy {\n@@ -28,8 +29,8 @@ fn make_uniq_closure<A:Send>(a: A) -> proc():Send -> uint {\n     proc() { &a as *A as uint }\n }\n \n-fn empty_pointy() -> @RefCell<Pointy> {\n-    return @RefCell::new(Pointy {\n+fn empty_pointy() -> Gc<RefCell<Pointy>> {\n+    return box(GC) RefCell::new(Pointy {\n         a : none,\n         d : make_uniq_closure(\"hi\".to_string())\n     })"}, {"sha": "ed5e1a5546af06e3be25b95aecf51f7e2f008e54", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,10 +11,11 @@\n #![feature(managed_boxes)]\n \n use std::cell::RefCell;\n+use std::gc::{Gc, GC};\n \n enum maybe_pointy {\n     none,\n-    p(@RefCell<Pointy>),\n+    p(Gc<RefCell<Pointy>>),\n }\n \n struct Pointy {\n@@ -23,8 +24,8 @@ struct Pointy {\n     d : proc():Send->(),\n }\n \n-fn empty_pointy() -> @RefCell<Pointy> {\n-    return @RefCell::new(Pointy {\n+fn empty_pointy() -> Gc<RefCell<Pointy>> {\n+    return box(GC) RefCell::new(Pointy {\n         a : none,\n         c : box 22,\n         d : proc() {},"}, {"sha": "da77921e5c37be394e1527d0b79505a73c166d65", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::GC;\n+\n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1\n@@ -18,6 +20,6 @@ fn f<T>(t: T) -> T {\n pub fn main() {\n     let t = f(box 100);\n     assert_eq!(t, box 100);\n-    let t = f(box @vec!(100));\n-    assert_eq!(t, box @vec!(100));\n+    let t = f(box box(GC) vec!(100));\n+    assert_eq!(t, box box(GC) vec!(100));\n }"}, {"sha": "f06791ff2c7b4b4990189fcd5fb266f02a1e2f5c", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,9 +11,10 @@\n #![feature(managed_boxes)]\n \n use std::task;\n+use std::gc::GC;\n \n fn f() {\n-    let _a = @0;\n+    let _a = box(GC) 0;\n     fail!();\n }\n "}, {"sha": "b1669dea7b216f0f743d938c267113a573d44ad0", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,24 +11,25 @@\n #![feature(managed_boxes)]\n \n use std::task;\n+use std::gc::{Gc, GC};\n \n struct complainer {\n-  c: @int,\n+  c: Gc<int>,\n }\n \n #[unsafe_destructor]\n impl Drop for complainer {\n     fn drop(&mut self) {}\n }\n \n-fn complainer(c: @int) -> complainer {\n+fn complainer(c: Gc<int>) -> complainer {\n     complainer {\n         c: c\n     }\n }\n \n fn f() {\n-    let _c = complainer(@0);\n+    let _c = complainer(box(GC) 0);\n     fail!();\n }\n "}, {"sha": "e2901a84b8b9bf87a40f6fdb38a24c900734a738", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -10,12 +10,15 @@\n \n #![feature(managed_boxes)]\n \n+use std::gc::{GC, Gc};\n \n struct Pair { x: int, y: int }\n \n pub fn main() {\n     // This just tests whether the vec leaks its members.\n \n-    let _pvec: Vec<@Pair> =\n-        vec!(@Pair{x: 1, y: 2}, @Pair{x: 3, y: 4}, @Pair{x: 5, y: 6});\n+    let _pvec: Vec<Gc<Pair>> =\n+        vec!(box(GC) Pair{x: 1, y: 2},\n+             box(GC) Pair{x: 3, y: 4},\n+             box(GC) Pair{x: 5, y: 6});\n }"}, {"sha": "3c0a9abec144af49c38eded1e279e397e9293283", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,10 +11,11 @@\n #![feature(managed_boxes)]\n \n use std::cell::Cell;\n+use std::gc::{Gc, GC};\n \n // Make sure that destructors get run on slice literals\n struct foo {\n-    x: @Cell<int>,\n+    x: Gc<Cell<int>>,\n }\n \n #[unsafe_destructor]\n@@ -24,14 +25,14 @@ impl Drop for foo {\n     }\n }\n \n-fn foo(x: @Cell<int>) -> foo {\n+fn foo(x: Gc<Cell<int>>) -> foo {\n     foo {\n         x: x\n     }\n }\n \n pub fn main() {\n-    let x = @Cell::new(0);\n+    let x = box(GC) Cell::new(0);\n     {\n         let l = &[foo(x)];\n         assert_eq!(l[0].x.get(), 0);"}, {"sha": "c2280cd2c6aae33a59d6b61e483649a4f377c77f", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -11,4 +11,4 @@\n #![feature(managed_boxes)]\n \n \n-pub fn main() { let _quux: @Vec<uint> = @Vec::new(); }\n+pub fn main() { let _quux: Box<Vec<uint>> = box Vec::new(); }"}, {"sha": "1eb34f9df255100a5892b6a51a94880a74669473", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade807c6dcf6dc4454732c5e914ca06ebb429773/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=ade807c6dcf6dc4454732c5e914ca06ebb429773", "patch": "@@ -12,6 +12,7 @@\n \n use std::cell::Cell;\n use std::mem::swap;\n+use std::gc::{Gc, GC};\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n \n@@ -23,10 +24,10 @@ fn funny() {\n }\n \n fn what() {\n-    fn the(x: @Cell<bool>) {\n+    fn the(x: Gc<Cell<bool>>) {\n         return while !x.get() { x.set(true); };\n     }\n-    let i = @Cell::new(false);\n+    let i = box(GC) Cell::new(false);\n     let dont = {||the(i)};\n     dont();\n     assert!((i.get()));"}]}