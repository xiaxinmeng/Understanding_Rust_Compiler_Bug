{"sha": "e1f073692781c832b4880158515efda8b9e6f48b", "node_id": "C_kwDOAAsO6NoAKGUxZjA3MzY5Mjc4MWM4MzJiNDg4MDE1ODUxNWVmZGE4YjllNmY0OGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-05T14:53:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-05T14:53:35Z"}, "message": "Allow ptr_from_addr_cast to fail", "tree": {"sha": "714401d3484dab6d0506bc13c9e09f7c99beacb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714401d3484dab6d0506bc13c9e09f7c99beacb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f073692781c832b4880158515efda8b9e6f48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f073692781c832b4880158515efda8b9e6f48b", "html_url": "https://github.com/rust-lang/rust/commit/e1f073692781c832b4880158515efda8b9e6f48b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f073692781c832b4880158515efda8b9e6f48b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef", "html_url": "https://github.com/rust-lang/rust/commit/4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "fb484fba9fd066e77ed8f5edffe2210b0221dfd5", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1f073692781c832b4880158515efda8b9e6f48b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f073692781c832b4880158515efda8b9e6f48b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=e1f073692781c832b4880158515efda8b9e6f48b", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let addr = addr.to_machine_usize(self)?;\n \n         // Then turn address into pointer.\n-        let ptr = M::ptr_from_addr_cast(&self, addr);\n+        let ptr = M::ptr_from_addr_cast(&self, addr)?;\n         Ok(Scalar::from_maybe_pointer(ptr, self).into())\n     }\n "}, {"sha": "5377535b9fa0877b25666ee9114fd6976b679773", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1f073692781c832b4880158515efda8b9e6f48b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f073692781c832b4880158515efda8b9e6f48b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=e1f073692781c832b4880158515efda8b9e6f48b", "patch": "@@ -294,11 +294,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn ptr_from_addr_cast(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<Self::PointerTag>>;\n+    ) -> InterpResult<'tcx, Pointer<Option<Self::PointerTag>>>;\n \n-    // FIXME: Transmuting an integer to a pointer should just always return a `None`\n-    // provenance, but that causes problems with function pointers in Miri.\n     /// Hook for returning a pointer from a transmute-like operation on an addr.\n+    /// This is only needed to support Miri's (unsound) \"allow-ptr-int-transmute\" flag.\n     fn ptr_from_addr_transmute(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n@@ -519,8 +518,10 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn ptr_from_addr_cast(\n         _ecx: &InterpCx<$mir, $tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<AllocId>> {\n-        Pointer::new(None, Size::from_bytes(addr))\n+    ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n+        // Allow these casts, but make the pointer not dereferenceable.\n+        // (I.e., they behave like transmutation.)\n+        Ok(Pointer::new(None, Size::from_bytes(addr)))\n     }\n \n     #[inline(always)]"}]}