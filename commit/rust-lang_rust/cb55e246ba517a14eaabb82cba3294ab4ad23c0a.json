{"sha": "cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTVlMjQ2YmE1MTdhMTRlYWFiYjgyY2JhMzI5NGFiNGFkMjNjMGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-13T00:00:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-13T00:46:43Z"}, "message": "Use the Nth impl when translating a static method call, instead\nof the 0th.  0th is only correct when there are no bound tps\non the trait.\n\nFixes #3741.", "tree": {"sha": "e2c9dd4e2183de97b01c81c08b71d0b46a471e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c9dd4e2183de97b01c81c08b71d0b46a471e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "html_url": "https://github.com/rust-lang/rust/commit/cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b4d10ff652d3beddae64782c882a07822bac3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b4d10ff652d3beddae64782c882a07822bac3c", "html_url": "https://github.com/rust-lang/rust/commit/57b4d10ff652d3beddae64782c882a07822bac3c"}], "stats": {"total": 165, "additions": 122, "deletions": 43}, "files": [{"sha": "4b945494293543f68613d9ab07ec1d1d3a4c1f15", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -118,7 +118,9 @@ type ty_param = {ident: ident, id: node_id, bounds: @~[ty_param_bound]};\n #[auto_deserialize]\n enum def {\n     def_fn(def_id, purity),\n-    def_static_method(def_id, purity),\n+    def_static_method(/* method */ def_id,\n+                      /* trait */  def_id,\n+                      purity),\n     def_self(node_id),\n     def_mod(def_id),\n     def_foreign_mod(def_id),\n@@ -150,9 +152,10 @@ impl def : cmp::Eq {\n                     _ => false\n                 }\n             }\n-            def_static_method(e0a, e1a) => {\n+            def_static_method(e0a, e1a, e2a) => {\n                 match (*other) {\n-                    def_static_method(e0b, e1b) => e0a == e0b && e1a == e1b,\n+                    def_static_method(e0b, e1b, e2b) =>\n+                    e0a == e0b && e1a == e1b && e2a == e2b,\n                     _ => false\n                 }\n             }"}, {"sha": "35b9e8d40c0187bf1be4e197ebda7d72762806f3", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -54,7 +54,7 @@ fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n \n pure fn def_id_of_def(d: def) -> def_id {\n     match d {\n-      def_fn(id, _) | def_static_method(id, _) | def_mod(id) |\n+      def_fn(id, _) | def_static_method(id, _, _) | def_mod(id) |\n       def_foreign_mod(id) | def_const(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_use(id) | def_class(id, _) => {"}, {"sha": "38838120a10346953f76f4e16f3b0fc6cbac8dbf", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -178,6 +178,12 @@ fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n     None\n }\n \n+fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n+                                        d: ebml::Doc) -> ast::def_id {\n+    let trait_did = item_parent_item(d).expect(~\"item without parent\");\n+    {crate: cnum, node: trait_did.node}\n+}\n+\n fn item_def_id(d: ebml::Doc, cdata: cmd) -> ast::def_id {\n     let tagdoc = ebml::get_doc(d, tag_def_id);\n     return translate_def_id(cdata, ebml::with_doc_data(tagdoc,\n@@ -297,35 +303,39 @@ fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::ident {\n }\n \n fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n-        -> def_like {\n+    -> def_like\n+{\n     let fam = item_family(item);\n     match fam {\n-      Const     => dl_def(ast::def_const(did)),\n-      Class     => dl_def(ast::def_class(did, true)),\n-      Struct    => dl_def(ast::def_class(did, false)),\n-      UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n-      Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n-      PureFn    => dl_def(ast::def_fn(did, ast::pure_fn)),\n-      ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n-      UnsafeStaticMethod => dl_def(ast::def_static_method(did,\n-                                                          ast::unsafe_fn)),\n-      StaticMethod => dl_def(ast::def_static_method(did, ast::impure_fn)),\n-      PureStaticMethod => dl_def(ast::def_static_method(did, ast::pure_fn)),\n-      Type | ForeignType => dl_def(ast::def_ty(did)),\n-      Mod => dl_def(ast::def_mod(did)),\n-      ForeignMod => dl_def(ast::def_foreign_mod(did)),\n-      Variant => {\n-          match item_parent_item(item) {\n-              Some(t) => {\n-                let tid = {crate: cnum, node: t.node};\n-                dl_def(ast::def_variant(tid, did))\n-              }\n-              None => fail ~\"item_to_def_like: enum item has no parent\"\n-          }\n-      }\n-      Trait | Enum => dl_def(ast::def_ty(did)),\n-      Impl => dl_impl(did),\n-      PublicField | PrivateField | InheritedField => dl_field,\n+        Const     => dl_def(ast::def_const(did)),\n+        Class     => dl_def(ast::def_class(did, true)),\n+        Struct    => dl_def(ast::def_class(did, false)),\n+        UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n+        Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n+        PureFn    => dl_def(ast::def_fn(did, ast::pure_fn)),\n+        ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n+        UnsafeStaticMethod => {\n+            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did, ast::unsafe_fn))\n+        }\n+        StaticMethod => {\n+            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did, ast::impure_fn))\n+        }\n+        PureStaticMethod => {\n+            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did, ast::pure_fn))\n+        }\n+        Type | ForeignType => dl_def(ast::def_ty(did)),\n+        Mod => dl_def(ast::def_mod(did)),\n+        ForeignMod => dl_def(ast::def_foreign_mod(did)),\n+        Variant => {\n+            let enum_did = item_reqd_and_translated_parent_item(cnum, item);\n+            dl_def(ast::def_variant(enum_did, did))\n+        }\n+        Trait | Enum => dl_def(ast::def_ty(did)),\n+        Impl => dl_impl(did),\n+        PublicField | PrivateField | InheritedField => dl_field,\n     }\n }\n "}, {"sha": "63a7ce1ac74c385a28afd4b3946597ca4025f65a", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -794,6 +794,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Serializer,\n \n             ebml_w.start_tag(tag_items_data_item);\n             encode_def_id(ebml_w, local_def(ty_m.id));\n+            encode_parent_item(ebml_w, local_def(item.id));\n             encode_name(ecx, ebml_w, ty_m.ident);\n             encode_family(ebml_w,\n                           purity_static_method_family(ty_m.purity));"}, {"sha": "15b20c41b674837282993837451de6df520a8761", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -345,8 +345,8 @@ impl ast::def: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def {\n         match self {\n           ast::def_fn(did, p) => { ast::def_fn(did.tr(xcx), p) }\n-          ast::def_static_method(did, p) => {\n-            ast::def_static_method(did.tr(xcx), p)\n+          ast::def_static_method(did, did2, p) => {\n+            ast::def_static_method(did.tr(xcx), did2.tr(xcx), p)\n           }\n           ast::def_self(nid) => { ast::def_self(xcx.tr_id(nid)) }\n           ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }"}, {"sha": "314dea1b57637787b43a640f36473ad1d4fd12e0", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -1126,6 +1126,7 @@ impl Resolver {\n                             self.add_child(ident, new_parent, ~[ValueNS],\n                                            ty_m.span);\n                         let def = def_static_method(local_def(ty_m.id),\n+                                                    local_def(item.id),\n                                                     ty_m.purity);\n                         (*method_name_bindings).define_value\n                             (Public, def, ty_m.span);"}, {"sha": "aa998fb7b92d1fe2c7b55d1b30816ed43e45ee33", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -78,8 +78,9 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n             ast::def_fn(did, _) => {\n                 fn_callee(bcx, trans_fn_ref(bcx, did, ref_expr.id))\n             }\n-            ast::def_static_method(did, _) => {\n-                fn_callee(bcx, meth::trans_static_method_callee(bcx, did,\n+            ast::def_static_method(impl_did, trait_did, _) => {\n+                fn_callee(bcx, meth::trans_static_method_callee(bcx, impl_did,\n+                                                                trait_did,\n                                                                 ref_expr.id))\n             }\n             ast::def_variant(tid, vid) => {"}, {"sha": "c841d9bd91372c64037be534c1bae2f50ed1c739", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -641,10 +641,11 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n             let fn_data = callee::trans_fn_ref(bcx, did, ref_expr.id);\n             return fn_data_to_datum(bcx, did, fn_data, lldest);\n         }\n-        ast::def_static_method(did, _) => {\n-            let fn_data = meth::trans_static_method_callee(bcx, did,\n+        ast::def_static_method(impl_did, trait_did, _) => {\n+            let fn_data = meth::trans_static_method_callee(bcx, impl_did,\n+                                                           trait_did,\n                                                            ref_expr.id);\n-            return fn_data_to_datum(bcx, did, fn_data, lldest);\n+            return fn_data_to_datum(bcx, impl_did, fn_data, lldest);\n         }\n         ast::def_variant(tid, vid) => {\n             if ty::enum_variant_with_id(ccx.tcx, tid, vid).args.len() > 0u {"}, {"sha": "96cf7fabd1f76c6686d0a5fea520489e4f65d87d", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -162,11 +162,50 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n \n fn trans_static_method_callee(bcx: block,\n                               method_id: ast::def_id,\n+                              trait_id: ast::def_id,\n                               callee_id: ast::node_id) -> FnData\n {\n     let _icx = bcx.insn_ctxt(\"impl::trans_static_method_callee\");\n     let ccx = bcx.ccx();\n \n+    debug!(\"trans_static_method_callee(method_id=%?, trait_id=%s, \\\n+            callee_id=%?)\",\n+           method_id,\n+           ty::item_path_str(bcx.tcx(), trait_id),\n+           callee_id);\n+    let _indenter = indenter();\n+\n+    // When we translate a static fn defined in a trait like:\n+    //\n+    //   trait<T1...Tn> Trait {\n+    //       static fn foo<M1...Mn>(...) {...}\n+    //   }\n+    //\n+    // this winds up being translated as something like:\n+    //\n+    //   fn foo<T1...Tn,self: Trait<T1...Tn>,M1...Mn>(...) {...}\n+    //\n+    // So when we see a call to this function foo, we have to figure\n+    // out which impl the `Trait<T1...Tn>` bound on the type `self` was\n+    // bound to.  Due to the fact that we use a flattened list of\n+    // impls, one per bound, this means we have to total up the bounds\n+    // found on the type parametesr T1...Tn to find the index of the\n+    // one we are interested in.\n+    let bound_index = {\n+        let trait_polyty = ty::lookup_item_type(bcx.tcx(), trait_id);\n+        let mut index = 0;\n+        for trait_polyty.bounds.each |param_bounds| {\n+            for param_bounds.each |param_bound| {\n+                match *param_bound {\n+                    ty::bound_trait(_) => { index += 1; }\n+                    ty::bound_copy | ty::bound_owned |\n+                    ty::bound_send | ty::bound_const => {}\n+                }\n+            }\n+        }\n+        index\n+    };\n+\n     let mname = if method_id.crate == ast::local_crate {\n         match bcx.tcx().items.get(method_id.node) {\n             ast_map::node_trait_method(trait_method, _, _) => {\n@@ -187,9 +226,7 @@ fn trans_static_method_callee(bcx: block,\n     let vtbls = resolve_vtables_in_fn_ctxt(\n         bcx.fcx, ccx.maps.vtable_map.get(callee_id));\n \n-    // FIXME(#3446) -- I am pretty sure index 0 is not the right one,\n-    // if the static method is implemented on a generic type. (NDM)\n-    match vtbls[0] {\n+    match vtbls[bound_index] {\n         typeck::vtable_static(impl_did, rcvr_substs, rcvr_origins) => {\n \n             let mth_id = method_with_name(bcx.ccx(), impl_did, mname);"}, {"sha": "bf0ca36dddf4148036e2479ea94f6fbf0489686c", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -2403,13 +2403,13 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       }\n \n       ast::def_fn(id, ast::unsafe_fn) |\n-      ast::def_static_method(id, ast::unsafe_fn) => {\n+      ast::def_static_method(id, _, ast::unsafe_fn) => {\n         // Unsafe functions can only be touched in an unsafe context\n         fcx.require_unsafe(sp, ~\"access to unsafe function\");\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n       }\n \n-      ast::def_fn(id, _) | ast::def_static_method(id, _) |\n+      ast::def_fn(id, _) | ast::def_static_method(id, _, _) |\n       ast::def_const(id) | ast::def_variant(_, id) |\n       ast::def_class(id, _) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);"}, {"sha": "ac00f6a645b3e6c30b03cb7af884b3fba9731431", "filename": "src/test/run-pass/static-method-in-trait-with-tps-intracrate.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb55e246ba517a14eaabb82cba3294ab4ad23c0a/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs?ref=cb55e246ba517a14eaabb82cba3294ab4ad23c0a", "patch": "@@ -0,0 +1,25 @@\n+trait Deserializer {\n+    fn read_int() -> int;\n+}\n+\n+trait Deserializable<D: Deserializer> {\n+    static fn deserialize(d: &D) -> self;\n+}\n+\n+impl<D: Deserializer> int: Deserializable<D> {\n+    static fn deserialize(d: &D) -> int {\n+        return d.read_int();\n+    }\n+}\n+\n+struct FromThinAir { dummy: () }\n+\n+impl FromThinAir: Deserializer {\n+    fn read_int() -> int { 22 }\n+}\n+\n+fn main() {\n+    let d = FromThinAir { dummy: () };\n+    let i: int = deserialize(&d);\n+    assert i == 22;\n+}\n\\ No newline at end of file"}]}