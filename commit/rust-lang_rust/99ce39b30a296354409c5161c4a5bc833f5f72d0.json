{"sha": "99ce39b30a296354409c5161c4a5bc833f5f72d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Y2UzOWIzMGEyOTYzNTQ0MDljNTE2MWM0YTViYzgzM2Y1ZjcyZDA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-19T22:04:25Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-20T13:55:31Z"}, "message": "Load error codes via build script instead of JSON parsing\n\nThis scans the tree for `error_codes.rs` and loads all of them.", "tree": {"sha": "3652863c8f78981c1f4ee69aea83ed362a33e0c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3652863c8f78981c1f4ee69aea83ed362a33e0c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ce39b30a296354409c5161c4a5bc833f5f72d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ce39b30a296354409c5161c4a5bc833f5f72d0", "html_url": "https://github.com/rust-lang/rust/commit/99ce39b30a296354409c5161c4a5bc833f5f72d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ce39b30a296354409c5161c4a5bc833f5f72d0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "html_url": "https://github.com/rust-lang/rust/commit/29a54035c77cb2ba7ea2c24b2437760d0495a2c8"}], "stats": {"total": 115, "additions": 84, "deletions": 31}, "files": [{"sha": "82bfc671355aab8705fb02c6703bf74f3968b564", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99ce39b30a296354409c5161c4a5bc833f5f72d0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/99ce39b30a296354409c5161c4a5bc833f5f72d0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=99ce39b30a296354409c5161c4a5bc833f5f72d0", "patch": "@@ -946,6 +946,7 @@ name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustdoc\",\n+ \"walkdir\",\n ]\n \n [[package]]"}, {"sha": "992af261b8352f1495f91e8f3d3d01515df40440", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=99ce39b30a296354409c5161c4a5bc833f5f72d0", "patch": "@@ -3,10 +3,14 @@ authors = [\"The Rust Project Developers\"]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n edition = \"2018\"\n+build = \"build.rs\"\n \n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n \n+[build-dependencies]\n+walkdir = \"2\"\n+\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}, {"sha": "2ac7351fce469a0d599aa5ff1b357fe1cdf0a995", "filename": "src/tools/error_index_generator/build.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=99ce39b30a296354409c5161c4a5bc833f5f72d0", "patch": "@@ -0,0 +1,64 @@\n+use walkdir::WalkDir;\n+use std::path::PathBuf;\n+use std::{env, fs};\n+\n+fn main() {\n+    // The src directory (we are in src/tools/error_index_generator)\n+    // Note that we could skip one of the .. but this ensures we at least loosely find the right\n+    // directory.\n+    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n+    let dest = out_dir.join(\"error_codes.rs\");\n+    let mut idx = 0;\n+    for entry in WalkDir::new(\"../../../src\") {\n+        let entry = entry.unwrap();\n+        if entry.file_name() == \"error_codes.rs\" {\n+            println!(\"cargo:rerun-if-changed={}\", entry.path().to_str().unwrap());\n+            let file = fs::read_to_string(entry.path()).unwrap()\n+                .replace(\"use syntax::{register_diagnostics, register_long_diagnostics};\", \"\")\n+                .replace(\"use syntax::register_diagnostics;\", \"\")\n+                .replace(\"use syntax::register_long_diagnostics;\", \"\");\n+            let contents = format!(\"(|| {{\\n{}\\n}})();\", file);\n+\n+            fs::write(&out_dir.join(&format!(\"error_{}.rs\", idx)), &contents).unwrap();\n+\n+            idx += 1;\n+        }\n+    }\n+\n+    let mut all = String::new();\n+    all.push_str(\"fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\\n\");\n+    all.push_str(\"let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\\n\");\n+    all.push_str(r#\"\n+macro_rules! register_diagnostics {\n+    ($($code:tt),*) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());\n+    }};\n+    ($($code:tt),*,) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)));\n+    }}\n+}\n+\n+macro_rules! register_long_diagnostics {\n+    ($($code:tt: $description:tt),*) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    };\n+    ($($code:tt: $description:tt),*,) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    }\n+}\"#);\n+    for idx in 0..idx {\n+        all.push_str(&format!(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/error_{}.rs\"));\"#, idx));\n+    }\n+    all.push_str(\"\\nlong_codes\\n\");\n+    all.push_str(\"}\\n\");\n+\n+    fs::write(&dest, all).unwrap();\n+}"}, {"sha": "b35d304e760fed35e398d381f9392a96b91a3214", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=99ce39b30a296354409c5161c4a5bc833f5f72d0", "patch": "@@ -2,22 +2,20 @@\n \n extern crate env_logger;\n extern crate syntax;\n-extern crate serialize as rustc_serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::error::Error;\n-use std::fs::{self, read_dir, File};\n+use std::fs::File;\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n use std::cell::RefCell;\n \n use syntax::edition::DEFAULT_EDITION;\n-use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n+use syntax::diagnostics::metadata::{ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, Playground};\n-use rustc_serialize::json;\n \n enum OutputFormat {\n     HTML(HTMLFormatter),\n@@ -80,11 +78,7 @@ impl Formatter for HTMLFormatter {\n             Some(_) => \"error-described\",\n             None => \"error-undescribed\",\n         };\n-        let use_desc = match info.use_site {\n-            Some(_) => \"error-used\",\n-            None => \"error-unused\",\n-        };\n-        write!(output, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc)?;\n+        write!(output, \"<div class=\\\"{}\\\">\", desc_desc)?;\n \n         // Error title (with self-link).\n         write!(output,\n@@ -199,25 +193,6 @@ impl Formatter for MarkdownFormatter {\n     }\n }\n \n-/// Loads all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n-    let mut all_errors = BTreeMap::new();\n-\n-    for entry in read_dir(metadata_dir)? {\n-        let path = entry?.path();\n-\n-        let metadata_str = fs::read_to_string(&path)?;\n-\n-        let some_errors: ErrorMetadataMap = json::decode(&metadata_str)?;\n-\n-        for (err_code, info) in some_errors {\n-            all_errors.insert(err_code, info);\n-        }\n-    }\n-\n-    Ok(all_errors)\n-}\n-\n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n                                    formatter: T) -> Result<(), Box<dyn Error>> {\n@@ -234,9 +209,16 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n }\n \n fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n-    let build_arch = env::var(\"CFG_BUILD\")?;\n-    let metadata_dir = get_metadata_dir(&build_arch);\n-    let err_map = load_all_errors(&metadata_dir)?;\n+    let long_codes = register_all();\n+    let mut err_map = BTreeMap::new();\n+    for (code, desc) in long_codes {\n+        err_map.insert(code.to_string(), ErrorMetadata {\n+            description: desc.map(String::from),\n+            // FIXME: this indicates that the error code is not used, which may not be true.\n+            // We currently do not use this information.\n+            use_site: None,\n+        });\n+    }\n     match format {\n         OutputFormat::Unknown(s)  => panic!(\"Unknown output format: {}\", s),\n         OutputFormat::HTML(h)     => render_error_page(&err_map, dst, h)?,\n@@ -272,3 +254,5 @@ fn main() {\n         panic!(\"{}\", e.description());\n     }\n }\n+\n+include!(concat!(env!(\"OUT_DIR\"), \"/error_codes.rs\"));"}]}