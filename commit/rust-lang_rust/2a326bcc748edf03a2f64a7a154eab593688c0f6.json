{"sha": "2a326bcc748edf03a2f64a7a154eab593688c0f6", "node_id": "C_kwDOAAsO6NoAKDJhMzI2YmNjNzQ4ZWRmMDNhMmY2NGE3YTE1NGVhYjU5MzY4OGMwZjY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-05-24T17:35:54Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-05-24T17:35:54Z"}, "message": "fix clippy perf lints", "tree": {"sha": "2163e49cdc05b1e610b9352c191f98b384d4e89e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2163e49cdc05b1e610b9352c191f98b384d4e89e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a326bcc748edf03a2f64a7a154eab593688c0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a326bcc748edf03a2f64a7a154eab593688c0f6", "html_url": "https://github.com/rust-lang/rust/commit/2a326bcc748edf03a2f64a7a154eab593688c0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a326bcc748edf03a2f64a7a154eab593688c0f6/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "678059f7d03f05b5a9b81b509d251ac83e87f464", "url": "https://api.github.com/repos/rust-lang/rust/commits/678059f7d03f05b5a9b81b509d251ac83e87f464", "html_url": "https://github.com/rust-lang/rust/commit/678059f7d03f05b5a9b81b509d251ac83e87f464"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "30946834583213b4fd7275eaf17d1e1a2b28b9e8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2a326bcc748edf03a2f64a7a154eab593688c0f6", "patch": "@@ -5,6 +5,7 @@\n //! assume that HTML output is desired, although it may be possible to redesign\n //! them in the future to instead emit any format desired.\n \n+use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt;\n use std::iter;\n@@ -1295,26 +1296,28 @@ impl clean::Visibility {\n         item_did: ItemId,\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        let to_print = match self {\n-            clean::Public => \"pub \".to_owned(),\n-            clean::Inherited => String::new(),\n+        use std::fmt::Write as _;\n+\n+        let to_print: Cow<'static, str> = match self {\n+            clean::Public => \"pub \".into(),\n+            clean::Inherited => \"\".into(),\n             clean::Visibility::Restricted(vis_did) => {\n                 // FIXME(camelid): This may not work correctly if `item_did` is a module.\n                 //                 However, rustdoc currently never displays a module's\n                 //                 visibility, so it shouldn't matter.\n                 let parent_module = find_nearest_parent_module(cx.tcx(), item_did.expect_def_id());\n \n                 if vis_did.is_crate_root() {\n-                    \"pub(crate) \".to_owned()\n+                    \"pub(crate) \".into()\n                 } else if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module\n                     // is the same as no visibility modifier\n-                    String::new()\n+                    \"\".into()\n                 } else if parent_module\n                     .and_then(|parent| find_nearest_parent_module(cx.tcx(), parent))\n                     == Some(vis_did)\n                 {\n-                    \"pub(super) \".to_owned()\n+                    \"pub(super) \".into()\n                 } else {\n                     let path = cx.tcx().def_path(vis_did);\n                     debug!(\"path={:?}\", path);\n@@ -1324,14 +1327,14 @@ impl clean::Visibility {\n \n                     let mut s = \"pub(in \".to_owned();\n                     for seg in &path.data[..path.data.len() - 1] {\n-                        s.push_str(&format!(\"{}::\", seg.data.get_opt_name().unwrap()));\n+                        let _ = write!(s, \"{}::\", seg.data.get_opt_name().unwrap());\n                     }\n-                    s.push_str(&format!(\"{}) \", anchor));\n-                    s\n+                    let _ = write!(s, \"{}) \", anchor);\n+                    s.into()\n                 }\n             }\n         };\n-        display_fn(move |f| f.write_str(&to_print))\n+        display_fn(move |f| write!(f, \"{}\", to_print))\n     }\n \n     /// This function is the same as print_with_space, except that it renders no links."}, {"sha": "3809738cc336659a717dabe048902602aa04a547", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2a326bcc748edf03a2f64a7a154eab593688c0f6", "patch": "@@ -2537,6 +2537,8 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n }\n \n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+    use std::fmt::Write as _;\n+\n     let mut sidebar = String::new();\n \n     let item_sections_in_use: FxHashSet<_> = items\n@@ -2554,7 +2556,7 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n         .map(|it| item_ty_to_section(it.type_()))\n         .collect();\n     for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n-        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n+        let _ = write!(sidebar, \"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name());\n     }\n \n     if !sidebar.is_empty() {"}, {"sha": "3daef3dbb79471e148b75ecfbe514d0ad55d140d", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=2a326bcc748edf03a2f64a7a154eab593688c0f6", "patch": "@@ -182,8 +182,8 @@ pub(crate) fn build_index<'tcx>(\n         })\n         .expect(\"failed serde conversion\")\n         // All these `replace` calls are because we have to go through JS string for JSON content.\n-        .replace(r#\"\\\"#, r\"\\\\\")\n-        .replace(r#\"'\"#, r\"\\'\")\n+        .replace('\\\\', r\"\\\\\")\n+        .replace('\\'', r\"\\'\")\n         // We need to escape double quotes for the JSON.\n         .replace(\"\\\\\\\"\", \"\\\\\\\\\\\"\")\n     )"}, {"sha": "a12c2a6a16c32f15ba951310a5af304f855bf3e0", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a326bcc748edf03a2f64a7a154eab593688c0f6/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=2a326bcc748edf03a2f64a7a154eab593688c0f6", "patch": "@@ -163,15 +163,18 @@ impl TocBuilder {\n \n impl Toc {\n     fn print_inner(&self, v: &mut String) {\n+        use std::fmt::Write as _;\n+\n         v.push_str(\"<ul>\");\n         for entry in &self.entries {\n             // recursively format this table of contents\n-            v.push_str(&format!(\n+            let _ = write!(\n+                v,\n                 \"\\n<li><a href=\\\"#{id}\\\">{num} {name}</a>\",\n                 id = entry.id,\n                 num = entry.sec_number,\n                 name = entry.name\n-            ));\n+            );\n             entry.children.print_inner(&mut *v);\n             v.push_str(\"</li>\");\n         }"}]}